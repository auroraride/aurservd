// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/purchasecommodity"
)

// PurchaseCommodityUpdate is the builder for updating PurchaseCommodity entities.
type PurchaseCommodityUpdate struct {
	config
	hooks     []Hook
	mutation  *PurchaseCommodityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PurchaseCommodityUpdate builder.
func (pcu *PurchaseCommodityUpdate) Where(ps ...predicate.PurchaseCommodity) *PurchaseCommodityUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PurchaseCommodityUpdate) SetUpdatedAt(t time.Time) *PurchaseCommodityUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetDeletedAt sets the "deleted_at" field.
func (pcu *PurchaseCommodityUpdate) SetDeletedAt(t time.Time) *PurchaseCommodityUpdate {
	pcu.mutation.SetDeletedAt(t)
	return pcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcu *PurchaseCommodityUpdate) SetNillableDeletedAt(t *time.Time) *PurchaseCommodityUpdate {
	if t != nil {
		pcu.SetDeletedAt(*t)
	}
	return pcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcu *PurchaseCommodityUpdate) ClearDeletedAt() *PurchaseCommodityUpdate {
	pcu.mutation.ClearDeletedAt()
	return pcu
}

// SetLastModifier sets the "last_modifier" field.
func (pcu *PurchaseCommodityUpdate) SetLastModifier(m *model.Modifier) *PurchaseCommodityUpdate {
	pcu.mutation.SetLastModifier(m)
	return pcu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pcu *PurchaseCommodityUpdate) ClearLastModifier() *PurchaseCommodityUpdate {
	pcu.mutation.ClearLastModifier()
	return pcu
}

// SetRemark sets the "remark" field.
func (pcu *PurchaseCommodityUpdate) SetRemark(s string) *PurchaseCommodityUpdate {
	pcu.mutation.SetRemark(s)
	return pcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcu *PurchaseCommodityUpdate) SetNillableRemark(s *string) *PurchaseCommodityUpdate {
	if s != nil {
		pcu.SetRemark(*s)
	}
	return pcu
}

// ClearRemark clears the value of the "remark" field.
func (pcu *PurchaseCommodityUpdate) ClearRemark() *PurchaseCommodityUpdate {
	pcu.mutation.ClearRemark()
	return pcu
}

// Mutation returns the PurchaseCommodityMutation object of the builder.
func (pcu *PurchaseCommodityUpdate) Mutation() *PurchaseCommodityMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PurchaseCommodityUpdate) Save(ctx context.Context) (int, error) {
	if err := pcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PurchaseCommodityUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PurchaseCommodityUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PurchaseCommodityUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PurchaseCommodityUpdate) defaults() error {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		if purchasecommodity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasecommodity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasecommodity.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PurchaseCommodityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseCommodityUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PurchaseCommodityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(purchasecommodity.Table, purchasecommodity.Columns, sqlgraph.NewFieldSpec(purchasecommodity.FieldID, field.TypeUint64))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasecommodity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.DeletedAt(); ok {
		_spec.SetField(purchasecommodity.FieldDeletedAt, field.TypeTime, value)
	}
	if pcu.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasecommodity.FieldDeletedAt, field.TypeTime)
	}
	if pcu.mutation.CreatorCleared() {
		_spec.ClearField(purchasecommodity.FieldCreator, field.TypeJSON)
	}
	if value, ok := pcu.mutation.LastModifier(); ok {
		_spec.SetField(purchasecommodity.FieldLastModifier, field.TypeJSON, value)
	}
	if pcu.mutation.LastModifierCleared() {
		_spec.ClearField(purchasecommodity.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pcu.mutation.Remark(); ok {
		_spec.SetField(purchasecommodity.FieldRemark, field.TypeString, value)
	}
	if pcu.mutation.RemarkCleared() {
		_spec.ClearField(purchasecommodity.FieldRemark, field.TypeString)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasecommodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PurchaseCommodityUpdateOne is the builder for updating a single PurchaseCommodity entity.
type PurchaseCommodityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PurchaseCommodityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PurchaseCommodityUpdateOne) SetUpdatedAt(t time.Time) *PurchaseCommodityUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pcuo *PurchaseCommodityUpdateOne) SetDeletedAt(t time.Time) *PurchaseCommodityUpdateOne {
	pcuo.mutation.SetDeletedAt(t)
	return pcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcuo *PurchaseCommodityUpdateOne) SetNillableDeletedAt(t *time.Time) *PurchaseCommodityUpdateOne {
	if t != nil {
		pcuo.SetDeletedAt(*t)
	}
	return pcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcuo *PurchaseCommodityUpdateOne) ClearDeletedAt() *PurchaseCommodityUpdateOne {
	pcuo.mutation.ClearDeletedAt()
	return pcuo
}

// SetLastModifier sets the "last_modifier" field.
func (pcuo *PurchaseCommodityUpdateOne) SetLastModifier(m *model.Modifier) *PurchaseCommodityUpdateOne {
	pcuo.mutation.SetLastModifier(m)
	return pcuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pcuo *PurchaseCommodityUpdateOne) ClearLastModifier() *PurchaseCommodityUpdateOne {
	pcuo.mutation.ClearLastModifier()
	return pcuo
}

// SetRemark sets the "remark" field.
func (pcuo *PurchaseCommodityUpdateOne) SetRemark(s string) *PurchaseCommodityUpdateOne {
	pcuo.mutation.SetRemark(s)
	return pcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcuo *PurchaseCommodityUpdateOne) SetNillableRemark(s *string) *PurchaseCommodityUpdateOne {
	if s != nil {
		pcuo.SetRemark(*s)
	}
	return pcuo
}

// ClearRemark clears the value of the "remark" field.
func (pcuo *PurchaseCommodityUpdateOne) ClearRemark() *PurchaseCommodityUpdateOne {
	pcuo.mutation.ClearRemark()
	return pcuo
}

// Mutation returns the PurchaseCommodityMutation object of the builder.
func (pcuo *PurchaseCommodityUpdateOne) Mutation() *PurchaseCommodityMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the PurchaseCommodityUpdate builder.
func (pcuo *PurchaseCommodityUpdateOne) Where(ps ...predicate.PurchaseCommodity) *PurchaseCommodityUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PurchaseCommodityUpdateOne) Select(field string, fields ...string) *PurchaseCommodityUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PurchaseCommodity entity.
func (pcuo *PurchaseCommodityUpdateOne) Save(ctx context.Context) (*PurchaseCommodity, error) {
	if err := pcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PurchaseCommodityUpdateOne) SaveX(ctx context.Context) *PurchaseCommodity {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PurchaseCommodityUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PurchaseCommodityUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PurchaseCommodityUpdateOne) defaults() error {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		if purchasecommodity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasecommodity.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasecommodity.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PurchaseCommodityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PurchaseCommodityUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PurchaseCommodityUpdateOne) sqlSave(ctx context.Context) (_node *PurchaseCommodity, err error) {
	_spec := sqlgraph.NewUpdateSpec(purchasecommodity.Table, purchasecommodity.Columns, sqlgraph.NewFieldSpec(purchasecommodity.FieldID, field.TypeUint64))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PurchaseCommodity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, purchasecommodity.FieldID)
		for _, f := range fields {
			if !purchasecommodity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != purchasecommodity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasecommodity.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.DeletedAt(); ok {
		_spec.SetField(purchasecommodity.FieldDeletedAt, field.TypeTime, value)
	}
	if pcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(purchasecommodity.FieldDeletedAt, field.TypeTime)
	}
	if pcuo.mutation.CreatorCleared() {
		_spec.ClearField(purchasecommodity.FieldCreator, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.LastModifier(); ok {
		_spec.SetField(purchasecommodity.FieldLastModifier, field.TypeJSON, value)
	}
	if pcuo.mutation.LastModifierCleared() {
		_spec.ClearField(purchasecommodity.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.Remark(); ok {
		_spec.SetField(purchasecommodity.FieldRemark, field.TypeString, value)
	}
	if pcuo.mutation.RemarkCleared() {
		_spec.ClearField(purchasecommodity.FieldRemark, field.TypeString)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PurchaseCommodity{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{purchasecommodity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
