// Code generated by ent, DO NOT EDIT.

package subscribe

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscribe type in the database.
	Label = "subscribe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldInitialOrderID holds the string denoting the initial_order_id field in the database.
	FieldInitialOrderID = "initial_order_id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldInitialDays holds the string denoting the initial_days field in the database.
	FieldInitialDays = "initial_days"
	// FieldAlterDays holds the string denoting the alter_days field in the database.
	FieldAlterDays = "alter_days"
	// FieldPauseDays holds the string denoting the pause_days field in the database.
	FieldPauseDays = "pause_days"
	// FieldSuspendDays holds the string denoting the suspend_days field in the database.
	FieldSuspendDays = "suspend_days"
	// FieldRenewalDays holds the string denoting the renewal_days field in the database.
	FieldRenewalDays = "renewal_days"
	// FieldOverdueDays holds the string denoting the overdue_days field in the database.
	FieldOverdueDays = "overdue_days"
	// FieldRemaining holds the string denoting the remaining field in the database.
	FieldRemaining = "remaining"
	// FieldPausedAt holds the string denoting the paused_at field in the database.
	FieldPausedAt = "paused_at"
	// FieldSuspendAt holds the string denoting the suspend_at field in the database.
	FieldSuspendAt = "suspend_at"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldRefundAt holds the string denoting the refund_at field in the database.
	FieldRefundAt = "refund_at"
	// FieldUnsubscribeReason holds the string denoting the unsubscribe_reason field in the database.
	FieldUnsubscribeReason = "unsubscribe_reason"
	// FieldLastBillDate holds the string denoting the last_bill_date field in the database.
	FieldLastBillDate = "last_bill_date"
	// FieldPauseOverdue holds the string denoting the pause_overdue field in the database.
	FieldPauseOverdue = "pause_overdue"
	// FieldAgentEndAt holds the string denoting the agent_end_at field in the database.
	FieldAgentEndAt = "agent_end_at"
	// FieldFormula holds the string denoting the formula field in the database.
	FieldFormula = "formula"
	// FieldNeedContract holds the string denoting the need_contract field in the database.
	FieldNeedContract = "need_contract"
	// FieldIntelligent holds the string denoting the intelligent field in the database.
	FieldIntelligent = "intelligent"
	// FieldAgreementHash holds the string denoting the agreement_hash field in the database.
	FieldAgreementHash = "agreement_hash"
	// FieldEnterprisePriceID holds the string denoting the enterprise_price_id field in the database.
	FieldEnterprisePriceID = "enterprise_price_id"
	// FieldDepositType holds the string denoting the deposit_type field in the database.
	FieldDepositType = "deposit_type"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgePauses holds the string denoting the pauses edge name in mutations.
	EdgePauses = "pauses"
	// EdgeSuspends holds the string denoting the suspends edge name in mutations.
	EdgeSuspends = "suspends"
	// EdgeAlters holds the string denoting the alters edge name in mutations.
	EdgeAlters = "alters"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeInitialOrder holds the string denoting the initial_order edge name in mutations.
	EdgeInitialOrder = "initial_order"
	// EdgeBills holds the string denoting the bills edge name in mutations.
	EdgeBills = "bills"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeEnterprisePrice holds the string denoting the enterprise_price edge name in mutations.
	EdgeEnterprisePrice = "enterprise_price"
	// Table holds the table name of the subscribe in the database.
	Table = "subscribe"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "subscribe"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plan"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "subscribe"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "subscribe"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "subscribe"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "subscribe"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "subscribe"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "subscribe"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "subscribe"
	// EbikeInverseTable is the table name for the Ebike entity.
	// It exists in this package in order to avoid circular dependency with the "ebike" package.
	EbikeInverseTable = "ebike"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "subscribe"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "subscribe"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// PausesTable is the table that holds the pauses relation/edge.
	PausesTable = "subscribe_pause"
	// PausesInverseTable is the table name for the SubscribePause entity.
	// It exists in this package in order to avoid circular dependency with the "subscribepause" package.
	PausesInverseTable = "subscribe_pause"
	// PausesColumn is the table column denoting the pauses relation/edge.
	PausesColumn = "subscribe_id"
	// SuspendsTable is the table that holds the suspends relation/edge.
	SuspendsTable = "subscribe_suspend"
	// SuspendsInverseTable is the table name for the SubscribeSuspend entity.
	// It exists in this package in order to avoid circular dependency with the "subscribesuspend" package.
	SuspendsInverseTable = "subscribe_suspend"
	// SuspendsColumn is the table column denoting the suspends relation/edge.
	SuspendsColumn = "subscribe_id"
	// AltersTable is the table that holds the alters relation/edge.
	AltersTable = "subscribe_alter"
	// AltersInverseTable is the table name for the SubscribeAlter entity.
	// It exists in this package in order to avoid circular dependency with the "subscribealter" package.
	AltersInverseTable = "subscribe_alter"
	// AltersColumn is the table column denoting the alters relation/edge.
	AltersColumn = "subscribe_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "order"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "subscribe_id"
	// InitialOrderTable is the table that holds the initial_order relation/edge.
	InitialOrderTable = "subscribe"
	// InitialOrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	InitialOrderInverseTable = "order"
	// InitialOrderColumn is the table column denoting the initial_order relation/edge.
	InitialOrderColumn = "initial_order_id"
	// BillsTable is the table that holds the bills relation/edge.
	BillsTable = "enterprise_bill"
	// BillsInverseTable is the table name for the EnterpriseBill entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebill" package.
	BillsInverseTable = "enterprise_bill"
	// BillsColumn is the table column denoting the bills relation/edge.
	BillsColumn = "subscribe_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "battery"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "subscribe_id"
	// EnterprisePriceTable is the table that holds the enterprise_price relation/edge.
	EnterprisePriceTable = "subscribe"
	// EnterprisePriceInverseTable is the table name for the EnterprisePrice entity.
	// It exists in this package in order to avoid circular dependency with the "enterpriseprice" package.
	EnterprisePriceInverseTable = "enterprise_price"
	// EnterprisePriceColumn is the table column denoting the enterprise_price relation/edge.
	EnterprisePriceColumn = "enterprise_price_id"
)

// Columns holds all SQL columns for subscribe fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldPlanID,
	FieldEmployeeID,
	FieldCityID,
	FieldStationID,
	FieldStoreID,
	FieldCabinetID,
	FieldBrandID,
	FieldEbikeID,
	FieldRiderID,
	FieldInitialOrderID,
	FieldEnterpriseID,
	FieldStatus,
	FieldType,
	FieldModel,
	FieldInitialDays,
	FieldAlterDays,
	FieldPauseDays,
	FieldSuspendDays,
	FieldRenewalDays,
	FieldOverdueDays,
	FieldRemaining,
	FieldPausedAt,
	FieldSuspendAt,
	FieldStartAt,
	FieldEndAt,
	FieldRefundAt,
	FieldUnsubscribeReason,
	FieldLastBillDate,
	FieldPauseOverdue,
	FieldAgentEndAt,
	FieldFormula,
	FieldNeedContract,
	FieldIntelligent,
	FieldAgreementHash,
	FieldEnterprisePriceID,
	FieldDepositType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint
	// DefaultAlterDays holds the default value on creation for the "alter_days" field.
	DefaultAlterDays int
	// DefaultPauseDays holds the default value on creation for the "pause_days" field.
	DefaultPauseDays int
	// DefaultSuspendDays holds the default value on creation for the "suspend_days" field.
	DefaultSuspendDays int
	// DefaultRenewalDays holds the default value on creation for the "renewal_days" field.
	DefaultRenewalDays int
	// DefaultOverdueDays holds the default value on creation for the "overdue_days" field.
	DefaultOverdueDays int
	// DefaultRemaining holds the default value on creation for the "remaining" field.
	DefaultRemaining int
	// DefaultPauseOverdue holds the default value on creation for the "pause_overdue" field.
	DefaultPauseOverdue bool
	// DefaultNeedContract holds the default value on creation for the "need_contract" field.
	DefaultNeedContract bool
	// DefaultIntelligent holds the default value on creation for the "intelligent" field.
	DefaultIntelligent bool
)

// OrderOption defines the ordering options for the Subscribe queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByEbikeID orders the results by the ebike_id field.
func ByEbikeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByInitialOrderID orders the results by the initial_order_id field.
func ByInitialOrderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialOrderID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByInitialDays orders the results by the initial_days field.
func ByInitialDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialDays, opts...).ToFunc()
}

// ByAlterDays orders the results by the alter_days field.
func ByAlterDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlterDays, opts...).ToFunc()
}

// ByPauseDays orders the results by the pause_days field.
func ByPauseDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseDays, opts...).ToFunc()
}

// BySuspendDays orders the results by the suspend_days field.
func BySuspendDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendDays, opts...).ToFunc()
}

// ByRenewalDays orders the results by the renewal_days field.
func ByRenewalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewalDays, opts...).ToFunc()
}

// ByOverdueDays orders the results by the overdue_days field.
func ByOverdueDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverdueDays, opts...).ToFunc()
}

// ByRemaining orders the results by the remaining field.
func ByRemaining(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemaining, opts...).ToFunc()
}

// ByPausedAt orders the results by the paused_at field.
func ByPausedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPausedAt, opts...).ToFunc()
}

// BySuspendAt orders the results by the suspend_at field.
func BySuspendAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspendAt, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByRefundAt orders the results by the refund_at field.
func ByRefundAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAt, opts...).ToFunc()
}

// ByUnsubscribeReason orders the results by the unsubscribe_reason field.
func ByUnsubscribeReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnsubscribeReason, opts...).ToFunc()
}

// ByLastBillDate orders the results by the last_bill_date field.
func ByLastBillDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastBillDate, opts...).ToFunc()
}

// ByPauseOverdue orders the results by the pause_overdue field.
func ByPauseOverdue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseOverdue, opts...).ToFunc()
}

// ByAgentEndAt orders the results by the agent_end_at field.
func ByAgentEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentEndAt, opts...).ToFunc()
}

// ByFormula orders the results by the formula field.
func ByFormula(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormula, opts...).ToFunc()
}

// ByNeedContract orders the results by the need_contract field.
func ByNeedContract(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNeedContract, opts...).ToFunc()
}

// ByIntelligent orders the results by the intelligent field.
func ByIntelligent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntelligent, opts...).ToFunc()
}

// ByAgreementHash orders the results by the agreement_hash field.
func ByAgreementHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgreementHash, opts...).ToFunc()
}

// ByEnterprisePriceID orders the results by the enterprise_price_id field.
func ByEnterprisePriceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterprisePriceID, opts...).ToFunc()
}

// ByDepositType orders the results by the deposit_type field.
func ByDepositType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepositType, opts...).ToFunc()
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByEbikeField orders the results by ebike field.
func ByEbikeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEbikeStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByPausesCount orders the results by pauses count.
func ByPausesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPausesStep(), opts...)
	}
}

// ByPauses orders the results by pauses terms.
func ByPauses(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPausesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySuspendsCount orders the results by suspends count.
func BySuspendsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSuspendsStep(), opts...)
	}
}

// BySuspends orders the results by suspends terms.
func BySuspends(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSuspendsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAltersCount orders the results by alters count.
func ByAltersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAltersStep(), opts...)
	}
}

// ByAlters orders the results by alters terms.
func ByAlters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAltersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrdersCount orders the results by orders count.
func ByOrdersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrdersStep(), opts...)
	}
}

// ByOrders orders the results by orders terms.
func ByOrders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrdersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInitialOrderField orders the results by initial_order field.
func ByInitialOrderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInitialOrderStep(), sql.OrderByField(field, opts...))
	}
}

// ByBillsCount orders the results by bills count.
func ByBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillsStep(), opts...)
	}
}

// ByBills orders the results by bills terms.
func ByBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteryField orders the results by battery field.
func ByBatteryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryStep(), sql.OrderByField(field, opts...))
	}
}

// ByEnterprisePriceField orders the results by enterprise_price field.
func ByEnterprisePriceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterprisePriceStep(), sql.OrderByField(field, opts...))
	}
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
	)
}
func newEbikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EbikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
	)
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
	)
}
func newPausesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PausesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PausesTable, PausesColumn),
	)
}
func newSuspendsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SuspendsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SuspendsTable, SuspendsColumn),
	)
}
func newAltersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AltersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AltersTable, AltersColumn),
	)
}
func newOrdersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrdersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
	)
}
func newInitialOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InitialOrderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InitialOrderTable, InitialOrderColumn),
	)
}
func newBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
	)
}
func newBatteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, BatteryTable, BatteryColumn),
	)
}
func newEnterprisePriceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterprisePriceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EnterprisePriceTable, EnterprisePriceColumn),
	)
}
