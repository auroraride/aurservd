// Code generated by ent, DO NOT EDIT.

package subscribe

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the subscribe type in the database.
	Label = "subscribe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldInitialOrderID holds the string denoting the initial_order_id field in the database.
	FieldInitialOrderID = "initial_order_id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldContractID holds the string denoting the contract_id field in the database.
	FieldContractID = "contract_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldInitialDays holds the string denoting the initial_days field in the database.
	FieldInitialDays = "initial_days"
	// FieldAlterDays holds the string denoting the alter_days field in the database.
	FieldAlterDays = "alter_days"
	// FieldPauseDays holds the string denoting the pause_days field in the database.
	FieldPauseDays = "pause_days"
	// FieldSuspendDays holds the string denoting the suspend_days field in the database.
	FieldSuspendDays = "suspend_days"
	// FieldRenewalDays holds the string denoting the renewal_days field in the database.
	FieldRenewalDays = "renewal_days"
	// FieldOverdueDays holds the string denoting the overdue_days field in the database.
	FieldOverdueDays = "overdue_days"
	// FieldRemaining holds the string denoting the remaining field in the database.
	FieldRemaining = "remaining"
	// FieldPausedAt holds the string denoting the paused_at field in the database.
	FieldPausedAt = "paused_at"
	// FieldSuspendAt holds the string denoting the suspend_at field in the database.
	FieldSuspendAt = "suspend_at"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldRefundAt holds the string denoting the refund_at field in the database.
	FieldRefundAt = "refund_at"
	// FieldUnsubscribeReason holds the string denoting the unsubscribe_reason field in the database.
	FieldUnsubscribeReason = "unsubscribe_reason"
	// FieldLastBillDate holds the string denoting the last_bill_date field in the database.
	FieldLastBillDate = "last_bill_date"
	// FieldPauseOverdue holds the string denoting the pause_overdue field in the database.
	FieldPauseOverdue = "pause_overdue"
	// FieldAgentEndAt holds the string denoting the agent_end_at field in the database.
	FieldAgentEndAt = "agent_end_at"
	// FieldFormula holds the string denoting the formula field in the database.
	FieldFormula = "formula"
	// FieldNeedContract holds the string denoting the need_contract field in the database.
	FieldNeedContract = "need_contract"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgePauses holds the string denoting the pauses edge name in mutations.
	EdgePauses = "pauses"
	// EdgeSuspends holds the string denoting the suspends edge name in mutations.
	EdgeSuspends = "suspends"
	// EdgeAlters holds the string denoting the alters edge name in mutations.
	EdgeAlters = "alters"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgeInitialOrder holds the string denoting the initial_order edge name in mutations.
	EdgeInitialOrder = "initial_order"
	// EdgeBills holds the string denoting the bills edge name in mutations.
	EdgeBills = "bills"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// Table holds the table name of the subscribe in the database.
	Table = "subscribe"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "subscribe"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plan"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "subscribe"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "subscribe"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "subscribe"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "subscribe"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "subscribe"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "subscribe"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "subscribe"
	// EbikeInverseTable is the table name for the Ebike entity.
	// It exists in this package in order to avoid circular dependency with the "ebike" package.
	EbikeInverseTable = "ebike"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "subscribe"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "subscribe"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// PausesTable is the table that holds the pauses relation/edge.
	PausesTable = "subscribe_pause"
	// PausesInverseTable is the table name for the SubscribePause entity.
	// It exists in this package in order to avoid circular dependency with the "subscribepause" package.
	PausesInverseTable = "subscribe_pause"
	// PausesColumn is the table column denoting the pauses relation/edge.
	PausesColumn = "subscribe_id"
	// SuspendsTable is the table that holds the suspends relation/edge.
	SuspendsTable = "subscribe_suspend"
	// SuspendsInverseTable is the table name for the SubscribeSuspend entity.
	// It exists in this package in order to avoid circular dependency with the "subscribesuspend" package.
	SuspendsInverseTable = "subscribe_suspend"
	// SuspendsColumn is the table column denoting the suspends relation/edge.
	SuspendsColumn = "subscribe_id"
	// AltersTable is the table that holds the alters relation/edge.
	AltersTable = "subscribe_alter"
	// AltersInverseTable is the table name for the SubscribeAlter entity.
	// It exists in this package in order to avoid circular dependency with the "subscribealter" package.
	AltersInverseTable = "subscribe_alter"
	// AltersColumn is the table column denoting the alters relation/edge.
	AltersColumn = "subscribe_id"
	// OrdersTable is the table that holds the orders relation/edge.
	OrdersTable = "order"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "order"
	// OrdersColumn is the table column denoting the orders relation/edge.
	OrdersColumn = "subscribe_id"
	// InitialOrderTable is the table that holds the initial_order relation/edge.
	InitialOrderTable = "subscribe"
	// InitialOrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	InitialOrderInverseTable = "order"
	// InitialOrderColumn is the table column denoting the initial_order relation/edge.
	InitialOrderColumn = "initial_order_id"
	// BillsTable is the table that holds the bills relation/edge.
	BillsTable = "enterprise_bill"
	// BillsInverseTable is the table name for the EnterpriseBill entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebill" package.
	BillsInverseTable = "enterprise_bill"
	// BillsColumn is the table column denoting the bills relation/edge.
	BillsColumn = "subscribe_id"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "subscribe"
	// ContractInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractInverseTable = "contract"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "contract_id"
)

// Columns holds all SQL columns for subscribe fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldPlanID,
	FieldEmployeeID,
	FieldCityID,
	FieldStationID,
	FieldStoreID,
	FieldCabinetID,
	FieldBrandID,
	FieldEbikeID,
	FieldRiderID,
	FieldInitialOrderID,
	FieldEnterpriseID,
	FieldContractID,
	FieldStatus,
	FieldType,
	FieldModel,
	FieldInitialDays,
	FieldAlterDays,
	FieldPauseDays,
	FieldSuspendDays,
	FieldRenewalDays,
	FieldOverdueDays,
	FieldRemaining,
	FieldPausedAt,
	FieldSuspendAt,
	FieldStartAt,
	FieldEndAt,
	FieldRefundAt,
	FieldUnsubscribeReason,
	FieldLastBillDate,
	FieldPauseOverdue,
	FieldAgentEndAt,
	FieldFormula,
	FieldNeedContract,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint
	// DefaultAlterDays holds the default value on creation for the "alter_days" field.
	DefaultAlterDays int
	// DefaultPauseDays holds the default value on creation for the "pause_days" field.
	DefaultPauseDays int
	// DefaultSuspendDays holds the default value on creation for the "suspend_days" field.
	DefaultSuspendDays int
	// DefaultRenewalDays holds the default value on creation for the "renewal_days" field.
	DefaultRenewalDays int
	// DefaultOverdueDays holds the default value on creation for the "overdue_days" field.
	DefaultOverdueDays int
	// DefaultRemaining holds the default value on creation for the "remaining" field.
	DefaultRemaining int
	// DefaultPauseOverdue holds the default value on creation for the "pause_overdue" field.
	DefaultPauseOverdue bool
	// DefaultNeedContract holds the default value on creation for the "need_contract" field.
	DefaultNeedContract bool
)
