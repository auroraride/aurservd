// Code generated by entc, DO NOT EDIT.

package subscribe

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// PlanID applies equality check predicate on the "plan_id" field. It's identical to PlanIDEQ.
func PlanID(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanID), v))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// Voltage applies equality check predicate on the "voltage" field. It's identical to VoltageEQ.
func Voltage(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoltage), v))
	})
}

// Days applies equality check predicate on the "days" field. It's identical to DaysEQ.
func Days(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDays), v))
	})
}

// AlterDays applies equality check predicate on the "alter_days" field. It's identical to AlterDaysEQ.
func AlterDays(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlterDays), v))
	})
}

// PauseDays applies equality check predicate on the "pause_days" field. It's identical to PauseDaysEQ.
func PauseDays(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPauseDays), v))
	})
}

// PausedAt applies equality check predicate on the "paused_at" field. It's identical to PausedAtEQ.
func PausedAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPausedAt), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// RefundAt applies equality check predicate on the "refund_at" field. It's identical to RefundAtEQ.
func RefundAt(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// PlanIDEQ applies the EQ predicate on the "plan_id" field.
func PlanIDEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlanID), v))
	})
}

// PlanIDNEQ applies the NEQ predicate on the "plan_id" field.
func PlanIDNEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlanID), v))
	})
}

// PlanIDIn applies the In predicate on the "plan_id" field.
func PlanIDIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlanID), v...))
	})
}

// PlanIDNotIn applies the NotIn predicate on the "plan_id" field.
func PlanIDNotIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlanID), v...))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployeeID)))
	})
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployeeID)))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderID), v))
	})
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRiderID), v...))
	})
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRiderID), v...))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uint64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uint64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// VoltageEQ applies the EQ predicate on the "voltage" field.
func VoltageEQ(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoltage), v))
	})
}

// VoltageNEQ applies the NEQ predicate on the "voltage" field.
func VoltageNEQ(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVoltage), v))
	})
}

// VoltageIn applies the In predicate on the "voltage" field.
func VoltageIn(vs ...float64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVoltage), v...))
	})
}

// VoltageNotIn applies the NotIn predicate on the "voltage" field.
func VoltageNotIn(vs ...float64) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVoltage), v...))
	})
}

// VoltageGT applies the GT predicate on the "voltage" field.
func VoltageGT(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVoltage), v))
	})
}

// VoltageGTE applies the GTE predicate on the "voltage" field.
func VoltageGTE(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVoltage), v))
	})
}

// VoltageLT applies the LT predicate on the "voltage" field.
func VoltageLT(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVoltage), v))
	})
}

// VoltageLTE applies the LTE predicate on the "voltage" field.
func VoltageLTE(v float64) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVoltage), v))
	})
}

// DaysEQ applies the EQ predicate on the "days" field.
func DaysEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDays), v))
	})
}

// DaysNEQ applies the NEQ predicate on the "days" field.
func DaysNEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDays), v))
	})
}

// DaysIn applies the In predicate on the "days" field.
func DaysIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDays), v...))
	})
}

// DaysNotIn applies the NotIn predicate on the "days" field.
func DaysNotIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDays), v...))
	})
}

// DaysGT applies the GT predicate on the "days" field.
func DaysGT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDays), v))
	})
}

// DaysGTE applies the GTE predicate on the "days" field.
func DaysGTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDays), v))
	})
}

// DaysLT applies the LT predicate on the "days" field.
func DaysLT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDays), v))
	})
}

// DaysLTE applies the LTE predicate on the "days" field.
func DaysLTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDays), v))
	})
}

// AlterDaysEQ applies the EQ predicate on the "alter_days" field.
func AlterDaysEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlterDays), v))
	})
}

// AlterDaysNEQ applies the NEQ predicate on the "alter_days" field.
func AlterDaysNEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlterDays), v))
	})
}

// AlterDaysIn applies the In predicate on the "alter_days" field.
func AlterDaysIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlterDays), v...))
	})
}

// AlterDaysNotIn applies the NotIn predicate on the "alter_days" field.
func AlterDaysNotIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlterDays), v...))
	})
}

// AlterDaysGT applies the GT predicate on the "alter_days" field.
func AlterDaysGT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlterDays), v))
	})
}

// AlterDaysGTE applies the GTE predicate on the "alter_days" field.
func AlterDaysGTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlterDays), v))
	})
}

// AlterDaysLT applies the LT predicate on the "alter_days" field.
func AlterDaysLT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlterDays), v))
	})
}

// AlterDaysLTE applies the LTE predicate on the "alter_days" field.
func AlterDaysLTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlterDays), v))
	})
}

// PauseDaysEQ applies the EQ predicate on the "pause_days" field.
func PauseDaysEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPauseDays), v))
	})
}

// PauseDaysNEQ applies the NEQ predicate on the "pause_days" field.
func PauseDaysNEQ(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPauseDays), v))
	})
}

// PauseDaysIn applies the In predicate on the "pause_days" field.
func PauseDaysIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPauseDays), v...))
	})
}

// PauseDaysNotIn applies the NotIn predicate on the "pause_days" field.
func PauseDaysNotIn(vs ...uint) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPauseDays), v...))
	})
}

// PauseDaysGT applies the GT predicate on the "pause_days" field.
func PauseDaysGT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPauseDays), v))
	})
}

// PauseDaysGTE applies the GTE predicate on the "pause_days" field.
func PauseDaysGTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPauseDays), v))
	})
}

// PauseDaysLT applies the LT predicate on the "pause_days" field.
func PauseDaysLT(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPauseDays), v))
	})
}

// PauseDaysLTE applies the LTE predicate on the "pause_days" field.
func PauseDaysLTE(v uint) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPauseDays), v))
	})
}

// PausedAtEQ applies the EQ predicate on the "paused_at" field.
func PausedAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPausedAt), v))
	})
}

// PausedAtNEQ applies the NEQ predicate on the "paused_at" field.
func PausedAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPausedAt), v))
	})
}

// PausedAtIn applies the In predicate on the "paused_at" field.
func PausedAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPausedAt), v...))
	})
}

// PausedAtNotIn applies the NotIn predicate on the "paused_at" field.
func PausedAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPausedAt), v...))
	})
}

// PausedAtGT applies the GT predicate on the "paused_at" field.
func PausedAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPausedAt), v))
	})
}

// PausedAtGTE applies the GTE predicate on the "paused_at" field.
func PausedAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPausedAt), v))
	})
}

// PausedAtLT applies the LT predicate on the "paused_at" field.
func PausedAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPausedAt), v))
	})
}

// PausedAtLTE applies the LTE predicate on the "paused_at" field.
func PausedAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPausedAt), v))
	})
}

// PausedAtIsNil applies the IsNil predicate on the "paused_at" field.
func PausedAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPausedAt)))
	})
}

// PausedAtNotNil applies the NotNil predicate on the "paused_at" field.
func PausedAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPausedAt)))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndAt), v))
	})
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndAt), v))
	})
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndAt), v...))
	})
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndAt), v...))
	})
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndAt), v))
	})
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndAt), v))
	})
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndAt), v))
	})
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndAt), v))
	})
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndAt)))
	})
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndAt)))
	})
}

// RefundAtEQ applies the EQ predicate on the "refund_at" field.
func RefundAtEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundAt), v))
	})
}

// RefundAtNEQ applies the NEQ predicate on the "refund_at" field.
func RefundAtNEQ(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefundAt), v))
	})
}

// RefundAtIn applies the In predicate on the "refund_at" field.
func RefundAtIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefundAt), v...))
	})
}

// RefundAtNotIn applies the NotIn predicate on the "refund_at" field.
func RefundAtNotIn(vs ...time.Time) predicate.Subscribe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subscribe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefundAt), v...))
	})
}

// RefundAtGT applies the GT predicate on the "refund_at" field.
func RefundAtGT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefundAt), v))
	})
}

// RefundAtGTE applies the GTE predicate on the "refund_at" field.
func RefundAtGTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefundAt), v))
	})
}

// RefundAtLT applies the LT predicate on the "refund_at" field.
func RefundAtLT(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefundAt), v))
	})
}

// RefundAtLTE applies the LTE predicate on the "refund_at" field.
func RefundAtLTE(v time.Time) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefundAt), v))
	})
}

// RefundAtIsNil applies the IsNil predicate on the "refund_at" field.
func RefundAtIsNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefundAt)))
	})
}

// RefundAtNotNil applies the NotNil predicate on the "refund_at" field.
func RefundAtNotNil() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefundAt)))
	})
}

// HasPlan applies the HasEdge predicate on the "plan" edge.
func HasPlan() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlanWith applies the HasEdge predicate on the "plan" edge with a given conditions (other predicates).
func HasPlanWith(preds ...predicate.Plan) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PlanInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPauses applies the HasEdge predicate on the "pauses" edge.
func HasPauses() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PausesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PausesTable, PausesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPausesWith applies the HasEdge predicate on the "pauses" edge with a given conditions (other predicates).
func HasPausesWith(preds ...predicate.SubscribePause) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PausesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PausesTable, PausesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlters applies the HasEdge predicate on the "alters" edge.
func HasAlters() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AltersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AltersTable, AltersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAltersWith applies the HasEdge predicate on the "alters" edge with a given conditions (other predicates).
func HasAltersWith(preds ...predicate.SubscribeAlter) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AltersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AltersTable, AltersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrders applies the HasEdge predicate on the "orders" edge.
func HasOrders() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrdersWith applies the HasEdge predicate on the "orders" edge with a given conditions (other predicates).
func HasOrdersWith(preds ...predicate.Order) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrdersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrdersTable, OrdersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStartOrder applies the HasEdge predicate on the "start_order" edge.
func HasStartOrder() predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StartOrderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StartOrderTable, StartOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStartOrderWith applies the HasEdge predicate on the "start_order" edge with a given conditions (other predicates).
func HasStartOrderWith(preds ...predicate.Order) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StartOrderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StartOrderTable, StartOrderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscribe) predicate.Subscribe {
	return predicate.Subscribe(func(s *sql.Selector) {
		p(s.Not())
	})
}
