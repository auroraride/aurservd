// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/riderbelongs"
)

// RiderBelongsDelete is the builder for deleting a RiderBelongs entity.
type RiderBelongsDelete struct {
	config
	hooks    []Hook
	mutation *RiderBelongsMutation
}

// Where appends a list predicates to the RiderBelongsDelete builder.
func (rbd *RiderBelongsDelete) Where(ps ...predicate.RiderBelongs) *RiderBelongsDelete {
	rbd.mutation.Where(ps...)
	return rbd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rbd *RiderBelongsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, RiderBelongsMutation](ctx, rbd.sqlExec, rbd.mutation, rbd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rbd *RiderBelongsDelete) ExecX(ctx context.Context) int {
	n, err := rbd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rbd *RiderBelongsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(riderbelongs.Table, sqlgraph.NewFieldSpec(riderbelongs.FieldID, field.TypeUint64))
	if ps := rbd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rbd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rbd.mutation.done = true
	return affected, err
}

// RiderBelongsDeleteOne is the builder for deleting a single RiderBelongs entity.
type RiderBelongsDeleteOne struct {
	rbd *RiderBelongsDelete
}

// Where appends a list predicates to the RiderBelongsDelete builder.
func (rbdo *RiderBelongsDeleteOne) Where(ps ...predicate.RiderBelongs) *RiderBelongsDeleteOne {
	rbdo.rbd.mutation.Where(ps...)
	return rbdo
}

// Exec executes the deletion query.
func (rbdo *RiderBelongsDeleteOne) Exec(ctx context.Context) error {
	n, err := rbdo.rbd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{riderbelongs.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rbdo *RiderBelongsDeleteOne) ExecX(ctx context.Context) {
	if err := rbdo.Exec(ctx); err != nil {
		panic(err)
	}
}
