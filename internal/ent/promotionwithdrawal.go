// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
)

// PromotionWithdrawal is the model entity for the PromotionWithdrawal schema.
type PromotionWithdrawal struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID uint64 `json:"member_id,omitempty"`
	// 提现状态 0:待审核 1:成功 2:失败
	Status uint8 `json:"status,omitempty"`
	// 提现申请金额
	ApplyAmount float64 `json:"apply_amount,omitempty"`
	// 提现金额
	Amount float64 `json:"amount,omitempty"`
	// 提现手续费
	Fee float64 `json:"fee,omitempty"`
	// 提现方式 1:银行卡
	Method uint8 `json:"method,omitempty"`
	// 提现账号ID
	AccountID uint64 `json:"account_id,omitempty"`
	// 申请时间
	ApplyTime time.Time `json:"apply_time,omitempty"`
	// 审核时间
	ReviewTime *time.Time `json:"review_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionWithdrawalQuery when eager-loading is set.
	Edges        PromotionWithdrawalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionWithdrawalEdges holds the relations/edges for other nodes in the graph.
type PromotionWithdrawalEdges struct {
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// Cards holds the value of the cards edge.
	Cards *PromotionBankCard `json:"cards,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionWithdrawalEdges) MemberOrErr() (*PromotionMember, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// CardsOrErr returns the Cards value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionWithdrawalEdges) CardsOrErr() (*PromotionBankCard, error) {
	if e.loadedTypes[1] {
		if e.Cards == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionbankcard.Label}
		}
		return e.Cards, nil
	}
	return nil, &NotLoadedError{edge: "cards"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionWithdrawal) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionwithdrawal.FieldCreator, promotionwithdrawal.FieldLastModifier:
			values[i] = new([]byte)
		case promotionwithdrawal.FieldApplyAmount, promotionwithdrawal.FieldAmount, promotionwithdrawal.FieldFee:
			values[i] = new(sql.NullFloat64)
		case promotionwithdrawal.FieldID, promotionwithdrawal.FieldMemberID, promotionwithdrawal.FieldStatus, promotionwithdrawal.FieldMethod, promotionwithdrawal.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case promotionwithdrawal.FieldRemark:
			values[i] = new(sql.NullString)
		case promotionwithdrawal.FieldCreatedAt, promotionwithdrawal.FieldUpdatedAt, promotionwithdrawal.FieldDeletedAt, promotionwithdrawal.FieldApplyTime, promotionwithdrawal.FieldReviewTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionWithdrawal fields.
func (pw *PromotionWithdrawal) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionwithdrawal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pw.ID = uint64(value.Int64)
		case promotionwithdrawal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pw.CreatedAt = value.Time
			}
		case promotionwithdrawal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pw.UpdatedAt = value.Time
			}
		case promotionwithdrawal.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pw.DeletedAt = new(time.Time)
				*pw.DeletedAt = value.Time
			}
		case promotionwithdrawal.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pw.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionwithdrawal.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pw.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionwithdrawal.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pw.Remark = value.String
			}
		case promotionwithdrawal.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pw.MemberID = uint64(value.Int64)
			}
		case promotionwithdrawal.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pw.Status = uint8(value.Int64)
			}
		case promotionwithdrawal.FieldApplyAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field apply_amount", values[i])
			} else if value.Valid {
				pw.ApplyAmount = value.Float64
			}
		case promotionwithdrawal.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pw.Amount = value.Float64
			}
		case promotionwithdrawal.FieldFee:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fee", values[i])
			} else if value.Valid {
				pw.Fee = value.Float64
			}
		case promotionwithdrawal.FieldMethod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field method", values[i])
			} else if value.Valid {
				pw.Method = uint8(value.Int64)
			}
		case promotionwithdrawal.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				pw.AccountID = uint64(value.Int64)
			}
		case promotionwithdrawal.FieldApplyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field apply_time", values[i])
			} else if value.Valid {
				pw.ApplyTime = value.Time
			}
		case promotionwithdrawal.FieldReviewTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field review_time", values[i])
			} else if value.Valid {
				pw.ReviewTime = new(time.Time)
				*pw.ReviewTime = value.Time
			}
		default:
			pw.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionWithdrawal.
// This includes values selected through modifiers, order, etc.
func (pw *PromotionWithdrawal) Value(name string) (ent.Value, error) {
	return pw.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PromotionWithdrawal entity.
func (pw *PromotionWithdrawal) QueryMember() *PromotionMemberQuery {
	return NewPromotionWithdrawalClient(pw.config).QueryMember(pw)
}

// QueryCards queries the "cards" edge of the PromotionWithdrawal entity.
func (pw *PromotionWithdrawal) QueryCards() *PromotionBankCardQuery {
	return NewPromotionWithdrawalClient(pw.config).QueryCards(pw)
}

// Update returns a builder for updating this PromotionWithdrawal.
// Note that you need to call PromotionWithdrawal.Unwrap() before calling this method if this PromotionWithdrawal
// was returned from a transaction, and the transaction was committed or rolled back.
func (pw *PromotionWithdrawal) Update() *PromotionWithdrawalUpdateOne {
	return NewPromotionWithdrawalClient(pw.config).UpdateOne(pw)
}

// Unwrap unwraps the PromotionWithdrawal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pw *PromotionWithdrawal) Unwrap() *PromotionWithdrawal {
	_tx, ok := pw.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionWithdrawal is not a transactional entity")
	}
	pw.config.driver = _tx.drv
	return pw
}

// String implements the fmt.Stringer.
func (pw *PromotionWithdrawal) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionWithdrawal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pw.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pw.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pw.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pw.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pw.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pw.Remark)
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", pw.MemberID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pw.Status))
	builder.WriteString(", ")
	builder.WriteString("apply_amount=")
	builder.WriteString(fmt.Sprintf("%v", pw.ApplyAmount))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pw.Amount))
	builder.WriteString(", ")
	builder.WriteString("fee=")
	builder.WriteString(fmt.Sprintf("%v", pw.Fee))
	builder.WriteString(", ")
	builder.WriteString("method=")
	builder.WriteString(fmt.Sprintf("%v", pw.Method))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", pw.AccountID))
	builder.WriteString(", ")
	builder.WriteString("apply_time=")
	builder.WriteString(pw.ApplyTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pw.ReviewTime; v != nil {
		builder.WriteString("review_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PromotionWithdrawals is a parsable slice of PromotionWithdrawal.
type PromotionWithdrawals []*PromotionWithdrawal
