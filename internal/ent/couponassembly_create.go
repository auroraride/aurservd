// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
)

// CouponAssemblyCreate is the builder for creating a CouponAssembly entity.
type CouponAssemblyCreate struct {
	config
	mutation *CouponAssemblyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cac *CouponAssemblyCreate) SetCreatedAt(t time.Time) *CouponAssemblyCreate {
	cac.mutation.SetCreatedAt(t)
	return cac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cac *CouponAssemblyCreate) SetNillableCreatedAt(t *time.Time) *CouponAssemblyCreate {
	if t != nil {
		cac.SetCreatedAt(*t)
	}
	return cac
}

// SetUpdatedAt sets the "updated_at" field.
func (cac *CouponAssemblyCreate) SetUpdatedAt(t time.Time) *CouponAssemblyCreate {
	cac.mutation.SetUpdatedAt(t)
	return cac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cac *CouponAssemblyCreate) SetNillableUpdatedAt(t *time.Time) *CouponAssemblyCreate {
	if t != nil {
		cac.SetUpdatedAt(*t)
	}
	return cac
}

// SetCreator sets the "creator" field.
func (cac *CouponAssemblyCreate) SetCreator(m *model.Modifier) *CouponAssemblyCreate {
	cac.mutation.SetCreator(m)
	return cac
}

// SetLastModifier sets the "last_modifier" field.
func (cac *CouponAssemblyCreate) SetLastModifier(m *model.Modifier) *CouponAssemblyCreate {
	cac.mutation.SetLastModifier(m)
	return cac
}

// SetRemark sets the "remark" field.
func (cac *CouponAssemblyCreate) SetRemark(s string) *CouponAssemblyCreate {
	cac.mutation.SetRemark(s)
	return cac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cac *CouponAssemblyCreate) SetNillableRemark(s *string) *CouponAssemblyCreate {
	if s != nil {
		cac.SetRemark(*s)
	}
	return cac
}

// SetTemplateID sets the "template_id" field.
func (cac *CouponAssemblyCreate) SetTemplateID(u uint64) *CouponAssemblyCreate {
	cac.mutation.SetTemplateID(u)
	return cac
}

// SetTemplate sets the "template" edge to the CouponTemplate entity.
func (cac *CouponAssemblyCreate) SetTemplate(c *CouponTemplate) *CouponAssemblyCreate {
	return cac.SetTemplateID(c.ID)
}

// Mutation returns the CouponAssemblyMutation object of the builder.
func (cac *CouponAssemblyCreate) Mutation() *CouponAssemblyMutation {
	return cac.mutation
}

// Save creates the CouponAssembly in the database.
func (cac *CouponAssemblyCreate) Save(ctx context.Context) (*CouponAssembly, error) {
	var (
		err  error
		node *CouponAssembly
	)
	if err := cac.defaults(); err != nil {
		return nil, err
	}
	if len(cac.hooks) == 0 {
		if err = cac.check(); err != nil {
			return nil, err
		}
		node, err = cac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponAssemblyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cac.check(); err != nil {
				return nil, err
			}
			cac.mutation = mutation
			if node, err = cac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cac.hooks) - 1; i >= 0; i-- {
			if cac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponAssembly)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponAssemblyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cac *CouponAssemblyCreate) SaveX(ctx context.Context) *CouponAssembly {
	v, err := cac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cac *CouponAssemblyCreate) Exec(ctx context.Context) error {
	_, err := cac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cac *CouponAssemblyCreate) ExecX(ctx context.Context) {
	if err := cac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cac *CouponAssemblyCreate) defaults() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		if couponassembly.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponassembly.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := couponassembly.DefaultCreatedAt()
		cac.mutation.SetCreatedAt(v)
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		if couponassembly.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponassembly.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponassembly.DefaultUpdatedAt()
		cac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cac *CouponAssemblyCreate) check() error {
	if _, ok := cac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponAssembly.created_at"`)}
	}
	if _, ok := cac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponAssembly.updated_at"`)}
	}
	if _, ok := cac.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "CouponAssembly.template_id"`)}
	}
	if _, ok := cac.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "CouponAssembly.template"`)}
	}
	return nil
}

func (cac *CouponAssemblyCreate) sqlSave(ctx context.Context) (*CouponAssembly, error) {
	_node, _spec := cac.createSpec()
	if err := sqlgraph.CreateNode(ctx, cac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (cac *CouponAssemblyCreate) createSpec() (*CouponAssembly, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponAssembly{config: cac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: couponassembly.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponassembly.FieldID,
			},
		}
	)
	_spec.OnConflict = cac.conflict
	if value, ok := cac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponassembly.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponassembly.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := cac.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := cac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponassembly.FieldRemark,
		})
		_node.Remark = value
	}
	if nodes := cac.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   couponassembly.TemplateTable,
			Columns: []string{couponassembly.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponAssembly.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponAssemblyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cac *CouponAssemblyCreate) OnConflict(opts ...sql.ConflictOption) *CouponAssemblyUpsertOne {
	cac.conflict = opts
	return &CouponAssemblyUpsertOne{
		create: cac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cac *CouponAssemblyCreate) OnConflictColumns(columns ...string) *CouponAssemblyUpsertOne {
	cac.conflict = append(cac.conflict, sql.ConflictColumns(columns...))
	return &CouponAssemblyUpsertOne{
		create: cac,
	}
}

type (
	// CouponAssemblyUpsertOne is the builder for "upsert"-ing
	//  one CouponAssembly node.
	CouponAssemblyUpsertOne struct {
		create *CouponAssemblyCreate
	}

	// CouponAssemblyUpsert is the "OnConflict" setter.
	CouponAssemblyUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAssemblyUpsert) SetUpdatedAt(v time.Time) *CouponAssemblyUpsert {
	u.Set(couponassembly.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAssemblyUpsert) UpdateUpdatedAt() *CouponAssemblyUpsert {
	u.SetExcluded(couponassembly.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponAssemblyUpsert) SetLastModifier(v *model.Modifier) *CouponAssemblyUpsert {
	u.Set(couponassembly.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponAssemblyUpsert) UpdateLastModifier() *CouponAssemblyUpsert {
	u.SetExcluded(couponassembly.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponAssemblyUpsert) ClearLastModifier() *CouponAssemblyUpsert {
	u.SetNull(couponassembly.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CouponAssemblyUpsert) SetRemark(v string) *CouponAssemblyUpsert {
	u.Set(couponassembly.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponAssemblyUpsert) UpdateRemark() *CouponAssemblyUpsert {
	u.SetExcluded(couponassembly.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponAssemblyUpsert) ClearRemark() *CouponAssemblyUpsert {
	u.SetNull(couponassembly.FieldRemark)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *CouponAssemblyUpsert) SetTemplateID(v uint64) *CouponAssemblyUpsert {
	u.Set(couponassembly.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponAssemblyUpsert) UpdateTemplateID() *CouponAssemblyUpsert {
	u.SetExcluded(couponassembly.FieldTemplateID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponAssemblyUpsertOne) UpdateNewValues() *CouponAssemblyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(couponassembly.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(couponassembly.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponAssemblyUpsertOne) Ignore() *CouponAssemblyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponAssemblyUpsertOne) DoNothing() *CouponAssemblyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponAssemblyCreate.OnConflict
// documentation for more info.
func (u *CouponAssemblyUpsertOne) Update(set func(*CouponAssemblyUpsert)) *CouponAssemblyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponAssemblyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAssemblyUpsertOne) SetUpdatedAt(v time.Time) *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAssemblyUpsertOne) UpdateUpdatedAt() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponAssemblyUpsertOne) SetLastModifier(v *model.Modifier) *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponAssemblyUpsertOne) UpdateLastModifier() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponAssemblyUpsertOne) ClearLastModifier() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponAssemblyUpsertOne) SetRemark(v string) *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponAssemblyUpsertOne) UpdateRemark() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponAssemblyUpsertOne) ClearRemark() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.ClearRemark()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *CouponAssemblyUpsertOne) SetTemplateID(v uint64) *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponAssemblyUpsertOne) UpdateTemplateID() *CouponAssemblyUpsertOne {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateTemplateID()
	})
}

// Exec executes the query.
func (u *CouponAssemblyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponAssemblyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponAssemblyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponAssemblyUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponAssemblyUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponAssemblyCreateBulk is the builder for creating many CouponAssembly entities in bulk.
type CouponAssemblyCreateBulk struct {
	config
	builders []*CouponAssemblyCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponAssembly entities in the database.
func (cacb *CouponAssemblyCreateBulk) Save(ctx context.Context) ([]*CouponAssembly, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cacb.builders))
	nodes := make([]*CouponAssembly, len(cacb.builders))
	mutators := make([]Mutator, len(cacb.builders))
	for i := range cacb.builders {
		func(i int, root context.Context) {
			builder := cacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponAssemblyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cacb *CouponAssemblyCreateBulk) SaveX(ctx context.Context) []*CouponAssembly {
	v, err := cacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cacb *CouponAssemblyCreateBulk) Exec(ctx context.Context) error {
	_, err := cacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cacb *CouponAssemblyCreateBulk) ExecX(ctx context.Context) {
	if err := cacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponAssembly.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponAssemblyUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cacb *CouponAssemblyCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponAssemblyUpsertBulk {
	cacb.conflict = opts
	return &CouponAssemblyUpsertBulk{
		create: cacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cacb *CouponAssemblyCreateBulk) OnConflictColumns(columns ...string) *CouponAssemblyUpsertBulk {
	cacb.conflict = append(cacb.conflict, sql.ConflictColumns(columns...))
	return &CouponAssemblyUpsertBulk{
		create: cacb,
	}
}

// CouponAssemblyUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponAssembly nodes.
type CouponAssemblyUpsertBulk struct {
	create *CouponAssemblyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponAssemblyUpsertBulk) UpdateNewValues() *CouponAssemblyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(couponassembly.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(couponassembly.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponAssembly.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponAssemblyUpsertBulk) Ignore() *CouponAssemblyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponAssemblyUpsertBulk) DoNothing() *CouponAssemblyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponAssemblyCreateBulk.OnConflict
// documentation for more info.
func (u *CouponAssemblyUpsertBulk) Update(set func(*CouponAssemblyUpsert)) *CouponAssemblyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponAssemblyUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponAssemblyUpsertBulk) SetUpdatedAt(v time.Time) *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponAssemblyUpsertBulk) UpdateUpdatedAt() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponAssemblyUpsertBulk) SetLastModifier(v *model.Modifier) *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponAssemblyUpsertBulk) UpdateLastModifier() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponAssemblyUpsertBulk) ClearLastModifier() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponAssemblyUpsertBulk) SetRemark(v string) *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponAssemblyUpsertBulk) UpdateRemark() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponAssemblyUpsertBulk) ClearRemark() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.ClearRemark()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *CouponAssemblyUpsertBulk) SetTemplateID(v uint64) *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponAssemblyUpsertBulk) UpdateTemplateID() *CouponAssemblyUpsertBulk {
	return u.Update(func(s *CouponAssemblyUpsert) {
		s.UpdateTemplateID()
	})
}

// Exec executes the query.
func (u *CouponAssemblyUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponAssemblyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponAssemblyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponAssemblyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
