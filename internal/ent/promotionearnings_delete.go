// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
)

// PromotionEarningsDelete is the builder for deleting a PromotionEarnings entity.
type PromotionEarningsDelete struct {
	config
	hooks    []Hook
	mutation *PromotionEarningsMutation
}

// Where appends a list predicates to the PromotionEarningsDelete builder.
func (ped *PromotionEarningsDelete) Where(ps ...predicate.PromotionEarnings) *PromotionEarningsDelete {
	ped.mutation.Where(ps...)
	return ped
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ped *PromotionEarningsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ped.sqlExec, ped.mutation, ped.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ped *PromotionEarningsDelete) ExecX(ctx context.Context) int {
	n, err := ped.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ped *PromotionEarningsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotionearnings.Table, sqlgraph.NewFieldSpec(promotionearnings.FieldID, field.TypeUint64))
	if ps := ped.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ped.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ped.mutation.done = true
	return affected, err
}

// PromotionEarningsDeleteOne is the builder for deleting a single PromotionEarnings entity.
type PromotionEarningsDeleteOne struct {
	ped *PromotionEarningsDelete
}

// Where appends a list predicates to the PromotionEarningsDelete builder.
func (pedo *PromotionEarningsDeleteOne) Where(ps ...predicate.PromotionEarnings) *PromotionEarningsDeleteOne {
	pedo.ped.mutation.Where(ps...)
	return pedo
}

// Exec executes the deletion query.
func (pedo *PromotionEarningsDeleteOne) Exec(ctx context.Context) error {
	n, err := pedo.ped.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotionearnings.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pedo *PromotionEarningsDeleteOne) ExecX(ctx context.Context) {
	if err := pedo.Exec(ctx); err != nil {
		panic(err)
	}
}
