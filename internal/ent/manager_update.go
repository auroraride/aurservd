// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/role"
)

// ManagerUpdate is the builder for updating Manager entities.
type ManagerUpdate struct {
	config
	hooks     []Hook
	mutation  *ManagerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ManagerUpdate builder.
func (mu *ManagerUpdate) Where(ps ...predicate.Manager) *ManagerUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ManagerUpdate) SetUpdatedAt(t time.Time) *ManagerUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *ManagerUpdate) SetDeletedAt(t time.Time) *ManagerUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *ManagerUpdate) SetNillableDeletedAt(t *time.Time) *ManagerUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *ManagerUpdate) ClearDeletedAt() *ManagerUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetLastModifier sets the "last_modifier" field.
func (mu *ManagerUpdate) SetLastModifier(m *model.Modifier) *ManagerUpdate {
	mu.mutation.SetLastModifier(m)
	return mu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (mu *ManagerUpdate) ClearLastModifier() *ManagerUpdate {
	mu.mutation.ClearLastModifier()
	return mu
}

// SetRemark sets the "remark" field.
func (mu *ManagerUpdate) SetRemark(s string) *ManagerUpdate {
	mu.mutation.SetRemark(s)
	return mu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mu *ManagerUpdate) SetNillableRemark(s *string) *ManagerUpdate {
	if s != nil {
		mu.SetRemark(*s)
	}
	return mu
}

// ClearRemark clears the value of the "remark" field.
func (mu *ManagerUpdate) ClearRemark() *ManagerUpdate {
	mu.mutation.ClearRemark()
	return mu
}

// SetRoleID sets the "role_id" field.
func (mu *ManagerUpdate) SetRoleID(u uint64) *ManagerUpdate {
	mu.mutation.SetRoleID(u)
	return mu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (mu *ManagerUpdate) SetNillableRoleID(u *uint64) *ManagerUpdate {
	if u != nil {
		mu.SetRoleID(*u)
	}
	return mu
}

// ClearRoleID clears the value of the "role_id" field.
func (mu *ManagerUpdate) ClearRoleID() *ManagerUpdate {
	mu.mutation.ClearRoleID()
	return mu
}

// SetPhone sets the "phone" field.
func (mu *ManagerUpdate) SetPhone(s string) *ManagerUpdate {
	mu.mutation.SetPhone(s)
	return mu
}

// SetName sets the "name" field.
func (mu *ManagerUpdate) SetName(s string) *ManagerUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetPassword sets the "password" field.
func (mu *ManagerUpdate) SetPassword(s string) *ManagerUpdate {
	mu.mutation.SetPassword(s)
	return mu
}

// SetLastSigninAt sets the "last_signin_at" field.
func (mu *ManagerUpdate) SetLastSigninAt(t time.Time) *ManagerUpdate {
	mu.mutation.SetLastSigninAt(t)
	return mu
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (mu *ManagerUpdate) SetNillableLastSigninAt(t *time.Time) *ManagerUpdate {
	if t != nil {
		mu.SetLastSigninAt(*t)
	}
	return mu
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (mu *ManagerUpdate) ClearLastSigninAt() *ManagerUpdate {
	mu.mutation.ClearLastSigninAt()
	return mu
}

// SetRole sets the "role" edge to the Role entity.
func (mu *ManagerUpdate) SetRole(r *Role) *ManagerUpdate {
	return mu.SetRoleID(r.ID)
}

// Mutation returns the ManagerMutation object of the builder.
func (mu *ManagerUpdate) Mutation() *ManagerMutation {
	return mu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (mu *ManagerUpdate) ClearRole() *ManagerUpdate {
	mu.mutation.ClearRole()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ManagerUpdate) Save(ctx context.Context) (int, error) {
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, ManagerMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ManagerUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ManagerUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ManagerUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if manager.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized manager.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := manager.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mu *ManagerUpdate) check() error {
	if v, ok := mu.mutation.Phone(); ok {
		if err := manager.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Manager.phone": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Name(); ok {
		if err := manager.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Manager.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *ManagerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ManagerUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *ManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(manager.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(manager.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(manager.FieldDeletedAt, field.TypeTime)
	}
	if mu.mutation.CreatorCleared() {
		_spec.ClearField(manager.FieldCreator, field.TypeJSON)
	}
	if value, ok := mu.mutation.LastModifier(); ok {
		_spec.SetField(manager.FieldLastModifier, field.TypeJSON, value)
	}
	if mu.mutation.LastModifierCleared() {
		_spec.ClearField(manager.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := mu.mutation.Remark(); ok {
		_spec.SetField(manager.FieldRemark, field.TypeString, value)
	}
	if mu.mutation.RemarkCleared() {
		_spec.ClearField(manager.FieldRemark, field.TypeString)
	}
	if value, ok := mu.mutation.Phone(); ok {
		_spec.SetField(manager.FieldPhone, field.TypeString, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(manager.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Password(); ok {
		_spec.SetField(manager.FieldPassword, field.TypeString, value)
	}
	if value, ok := mu.mutation.LastSigninAt(); ok {
		_spec.SetField(manager.FieldLastSigninAt, field.TypeTime, value)
	}
	if mu.mutation.LastSigninAtCleared() {
		_spec.ClearField(manager.FieldLastSigninAt, field.TypeTime)
	}
	if mu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ManagerUpdateOne is the builder for updating a single Manager entity.
type ManagerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ManagerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ManagerUpdateOne) SetUpdatedAt(t time.Time) *ManagerUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *ManagerUpdateOne) SetDeletedAt(t time.Time) *ManagerUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *ManagerUpdateOne) SetNillableDeletedAt(t *time.Time) *ManagerUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *ManagerUpdateOne) ClearDeletedAt() *ManagerUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetLastModifier sets the "last_modifier" field.
func (muo *ManagerUpdateOne) SetLastModifier(m *model.Modifier) *ManagerUpdateOne {
	muo.mutation.SetLastModifier(m)
	return muo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (muo *ManagerUpdateOne) ClearLastModifier() *ManagerUpdateOne {
	muo.mutation.ClearLastModifier()
	return muo
}

// SetRemark sets the "remark" field.
func (muo *ManagerUpdateOne) SetRemark(s string) *ManagerUpdateOne {
	muo.mutation.SetRemark(s)
	return muo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (muo *ManagerUpdateOne) SetNillableRemark(s *string) *ManagerUpdateOne {
	if s != nil {
		muo.SetRemark(*s)
	}
	return muo
}

// ClearRemark clears the value of the "remark" field.
func (muo *ManagerUpdateOne) ClearRemark() *ManagerUpdateOne {
	muo.mutation.ClearRemark()
	return muo
}

// SetRoleID sets the "role_id" field.
func (muo *ManagerUpdateOne) SetRoleID(u uint64) *ManagerUpdateOne {
	muo.mutation.SetRoleID(u)
	return muo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (muo *ManagerUpdateOne) SetNillableRoleID(u *uint64) *ManagerUpdateOne {
	if u != nil {
		muo.SetRoleID(*u)
	}
	return muo
}

// ClearRoleID clears the value of the "role_id" field.
func (muo *ManagerUpdateOne) ClearRoleID() *ManagerUpdateOne {
	muo.mutation.ClearRoleID()
	return muo
}

// SetPhone sets the "phone" field.
func (muo *ManagerUpdateOne) SetPhone(s string) *ManagerUpdateOne {
	muo.mutation.SetPhone(s)
	return muo
}

// SetName sets the "name" field.
func (muo *ManagerUpdateOne) SetName(s string) *ManagerUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetPassword sets the "password" field.
func (muo *ManagerUpdateOne) SetPassword(s string) *ManagerUpdateOne {
	muo.mutation.SetPassword(s)
	return muo
}

// SetLastSigninAt sets the "last_signin_at" field.
func (muo *ManagerUpdateOne) SetLastSigninAt(t time.Time) *ManagerUpdateOne {
	muo.mutation.SetLastSigninAt(t)
	return muo
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (muo *ManagerUpdateOne) SetNillableLastSigninAt(t *time.Time) *ManagerUpdateOne {
	if t != nil {
		muo.SetLastSigninAt(*t)
	}
	return muo
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (muo *ManagerUpdateOne) ClearLastSigninAt() *ManagerUpdateOne {
	muo.mutation.ClearLastSigninAt()
	return muo
}

// SetRole sets the "role" edge to the Role entity.
func (muo *ManagerUpdateOne) SetRole(r *Role) *ManagerUpdateOne {
	return muo.SetRoleID(r.ID)
}

// Mutation returns the ManagerMutation object of the builder.
func (muo *ManagerUpdateOne) Mutation() *ManagerMutation {
	return muo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (muo *ManagerUpdateOne) ClearRole() *ManagerUpdateOne {
	muo.mutation.ClearRole()
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ManagerUpdateOne) Select(field string, fields ...string) *ManagerUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Manager entity.
func (muo *ManagerUpdateOne) Save(ctx context.Context) (*Manager, error) {
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Manager, ManagerMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ManagerUpdateOne) SaveX(ctx context.Context) *Manager {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ManagerUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ManagerUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if manager.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized manager.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := manager.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (muo *ManagerUpdateOne) check() error {
	if v, ok := muo.mutation.Phone(); ok {
		if err := manager.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Manager.phone": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Name(); ok {
		if err := manager.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Manager.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *ManagerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ManagerUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *ManagerUpdateOne) sqlSave(ctx context.Context) (_node *Manager, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   manager.Table,
			Columns: manager.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: manager.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Manager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, manager.FieldID)
		for _, f := range fields {
			if !manager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != manager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(manager.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(manager.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(manager.FieldDeletedAt, field.TypeTime)
	}
	if muo.mutation.CreatorCleared() {
		_spec.ClearField(manager.FieldCreator, field.TypeJSON)
	}
	if value, ok := muo.mutation.LastModifier(); ok {
		_spec.SetField(manager.FieldLastModifier, field.TypeJSON, value)
	}
	if muo.mutation.LastModifierCleared() {
		_spec.ClearField(manager.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := muo.mutation.Remark(); ok {
		_spec.SetField(manager.FieldRemark, field.TypeString, value)
	}
	if muo.mutation.RemarkCleared() {
		_spec.ClearField(manager.FieldRemark, field.TypeString)
	}
	if value, ok := muo.mutation.Phone(); ok {
		_spec.SetField(manager.FieldPhone, field.TypeString, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(manager.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Password(); ok {
		_spec.SetField(manager.FieldPassword, field.TypeString, value)
	}
	if value, ok := muo.mutation.LastSigninAt(); ok {
		_spec.SetField(manager.FieldLastSigninAt, field.TypeTime, value)
	}
	if muo.mutation.LastSigninAtCleared() {
		_spec.ClearField(manager.FieldLastSigninAt, field.TypeTime)
	}
	if muo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   manager.RoleTable,
			Columns: []string{manager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Manager{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{manager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
