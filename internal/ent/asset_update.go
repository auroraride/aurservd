// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssetUpdate) SetDeletedAt(t time.Time) *AssetUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDeletedAt(t *time.Time) *AssetUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssetUpdate) ClearDeletedAt() *AssetUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AssetUpdate) SetLastModifier(m *model.Modifier) *AssetUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AssetUpdate) ClearLastModifier() *AssetUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AssetUpdate) SetRemark(s string) *AssetUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AssetUpdate) SetNillableRemark(s *string) *AssetUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AssetUpdate) ClearRemark() *AssetUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetBrandID sets the "brand_id" field.
func (au *AssetUpdate) SetBrandID(u uint64) *AssetUpdate {
	au.mutation.SetBrandID(u)
	return au
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableBrandID(u *uint64) *AssetUpdate {
	if u != nil {
		au.SetBrandID(*u)
	}
	return au
}

// ClearBrandID clears the value of the "brand_id" field.
func (au *AssetUpdate) ClearBrandID() *AssetUpdate {
	au.mutation.ClearBrandID()
	return au
}

// SetModelID sets the "model_id" field.
func (au *AssetUpdate) SetModelID(u uint64) *AssetUpdate {
	au.mutation.SetModelID(u)
	return au
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableModelID(u *uint64) *AssetUpdate {
	if u != nil {
		au.SetModelID(*u)
	}
	return au
}

// ClearModelID clears the value of the "model_id" field.
func (au *AssetUpdate) ClearModelID() *AssetUpdate {
	au.mutation.ClearModelID()
	return au
}

// SetCityID sets the "city_id" field.
func (au *AssetUpdate) SetCityID(u uint64) *AssetUpdate {
	au.mutation.SetCityID(u)
	return au
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableCityID(u *uint64) *AssetUpdate {
	if u != nil {
		au.SetCityID(*u)
	}
	return au
}

// ClearCityID clears the value of the "city_id" field.
func (au *AssetUpdate) ClearCityID() *AssetUpdate {
	au.mutation.ClearCityID()
	return au
}

// SetType sets the "type" field.
func (au *AssetUpdate) SetType(u uint8) *AssetUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(u)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableType(u *uint8) *AssetUpdate {
	if u != nil {
		au.SetType(*u)
	}
	return au
}

// AddType adds u to the "type" field.
func (au *AssetUpdate) AddType(u int8) *AssetUpdate {
	au.mutation.AddType(u)
	return au
}

// SetName sets the "name" field.
func (au *AssetUpdate) SetName(s string) *AssetUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableName(s *string) *AssetUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetSn sets the "sn" field.
func (au *AssetUpdate) SetSn(s string) *AssetUpdate {
	au.mutation.SetSn(s)
	return au
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (au *AssetUpdate) SetNillableSn(s *string) *AssetUpdate {
	if s != nil {
		au.SetSn(*s)
	}
	return au
}

// ClearSn clears the value of the "sn" field.
func (au *AssetUpdate) ClearSn() *AssetUpdate {
	au.mutation.ClearSn()
	return au
}

// SetStatus sets the "status" field.
func (au *AssetUpdate) SetStatus(u uint8) *AssetUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AssetUpdate) SetNillableStatus(u *uint8) *AssetUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AssetUpdate) AddStatus(u int8) *AssetUpdate {
	au.mutation.AddStatus(u)
	return au
}

// SetEnable sets the "enable" field.
func (au *AssetUpdate) SetEnable(b bool) *AssetUpdate {
	au.mutation.SetEnable(b)
	return au
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (au *AssetUpdate) SetNillableEnable(b *bool) *AssetUpdate {
	if b != nil {
		au.SetEnable(*b)
	}
	return au
}

// SetLocationsType sets the "locations_type" field.
func (au *AssetUpdate) SetLocationsType(u uint8) *AssetUpdate {
	au.mutation.ResetLocationsType()
	au.mutation.SetLocationsType(u)
	return au
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableLocationsType(u *uint8) *AssetUpdate {
	if u != nil {
		au.SetLocationsType(*u)
	}
	return au
}

// AddLocationsType adds u to the "locations_type" field.
func (au *AssetUpdate) AddLocationsType(u int8) *AssetUpdate {
	au.mutation.AddLocationsType(u)
	return au
}

// ClearLocationsType clears the value of the "locations_type" field.
func (au *AssetUpdate) ClearLocationsType() *AssetUpdate {
	au.mutation.ClearLocationsType()
	return au
}

// SetLocationsID sets the "locations_id" field.
func (au *AssetUpdate) SetLocationsID(u uint64) *AssetUpdate {
	au.mutation.SetLocationsID(u)
	return au
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableLocationsID(u *uint64) *AssetUpdate {
	if u != nil {
		au.SetLocationsID(*u)
	}
	return au
}

// ClearLocationsID clears the value of the "locations_id" field.
func (au *AssetUpdate) ClearLocationsID() *AssetUpdate {
	au.mutation.ClearLocationsID()
	return au
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (au *AssetUpdate) SetRtoRiderID(u uint64) *AssetUpdate {
	au.mutation.ResetRtoRiderID()
	au.mutation.SetRtoRiderID(u)
	return au
}

// SetNillableRtoRiderID sets the "rto_rider_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableRtoRiderID(u *uint64) *AssetUpdate {
	if u != nil {
		au.SetRtoRiderID(*u)
	}
	return au
}

// AddRtoRiderID adds u to the "rto_rider_id" field.
func (au *AssetUpdate) AddRtoRiderID(u int64) *AssetUpdate {
	au.mutation.AddRtoRiderID(u)
	return au
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (au *AssetUpdate) ClearRtoRiderID() *AssetUpdate {
	au.mutation.ClearRtoRiderID()
	return au
}

// SetInventoryAt sets the "inventory_at" field.
func (au *AssetUpdate) SetInventoryAt(t time.Time) *AssetUpdate {
	au.mutation.SetInventoryAt(t)
	return au
}

// SetNillableInventoryAt sets the "inventory_at" field if the given value is not nil.
func (au *AssetUpdate) SetNillableInventoryAt(t *time.Time) *AssetUpdate {
	if t != nil {
		au.SetInventoryAt(*t)
	}
	return au
}

// ClearInventoryAt clears the value of the "inventory_at" field.
func (au *AssetUpdate) ClearInventoryAt() *AssetUpdate {
	au.mutation.ClearInventoryAt()
	return au
}

// SetBrandName sets the "brand_name" field.
func (au *AssetUpdate) SetBrandName(s string) *AssetUpdate {
	au.mutation.SetBrandName(s)
	return au
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableBrandName(s *string) *AssetUpdate {
	if s != nil {
		au.SetBrandName(*s)
	}
	return au
}

// ClearBrandName clears the value of the "brand_name" field.
func (au *AssetUpdate) ClearBrandName() *AssetUpdate {
	au.mutation.ClearBrandName()
	return au
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (au *AssetUpdate) SetBrand(e *EbikeBrand) *AssetUpdate {
	return au.SetBrandID(e.ID)
}

// SetModel sets the "model" edge to the BatteryModel entity.
func (au *AssetUpdate) SetModel(b *BatteryModel) *AssetUpdate {
	return au.SetModelID(b.ID)
}

// SetCity sets the "city" edge to the City entity.
func (au *AssetUpdate) SetCity(c *City) *AssetUpdate {
	return au.SetCityID(c.ID)
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (au *AssetUpdate) AddValueIDs(ids ...uint64) *AssetUpdate {
	au.mutation.AddValueIDs(ids...)
	return au
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (au *AssetUpdate) AddValues(a ...*AssetAttributeValues) *AssetUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddValueIDs(ids...)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (au *AssetUpdate) SetWarehouseID(id uint64) *AssetUpdate {
	au.mutation.SetWarehouseID(id)
	return au
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableWarehouseID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetWarehouseID(*id)
	}
	return au
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (au *AssetUpdate) SetWarehouse(w *Warehouse) *AssetUpdate {
	return au.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (au *AssetUpdate) SetStoreID(id uint64) *AssetUpdate {
	au.mutation.SetStoreID(id)
	return au
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableStoreID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetStoreID(*id)
	}
	return au
}

// SetStore sets the "store" edge to the Store entity.
func (au *AssetUpdate) SetStore(s *Store) *AssetUpdate {
	return au.SetStoreID(s.ID)
}

// SetCabinetID sets the "cabinet" edge to the Cabinet entity by ID.
func (au *AssetUpdate) SetCabinetID(id uint64) *AssetUpdate {
	au.mutation.SetCabinetID(id)
	return au
}

// SetNillableCabinetID sets the "cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableCabinetID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetCabinetID(*id)
	}
	return au
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (au *AssetUpdate) SetCabinet(c *Cabinet) *AssetUpdate {
	return au.SetCabinetID(c.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (au *AssetUpdate) SetStationID(id uint64) *AssetUpdate {
	au.mutation.SetStationID(id)
	return au
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableStationID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetStationID(*id)
	}
	return au
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (au *AssetUpdate) SetStation(e *EnterpriseStation) *AssetUpdate {
	return au.SetStationID(e.ID)
}

// SetRiderID sets the "rider" edge to the Rider entity by ID.
func (au *AssetUpdate) SetRiderID(id uint64) *AssetUpdate {
	au.mutation.SetRiderID(id)
	return au
}

// SetNillableRiderID sets the "rider" edge to the Rider entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableRiderID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetRiderID(*id)
	}
	return au
}

// SetRider sets the "rider" edge to the Rider entity.
func (au *AssetUpdate) SetRider(r *Rider) *AssetUpdate {
	return au.SetRiderID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Maintainer entity by ID.
func (au *AssetUpdate) SetOperatorID(id uint64) *AssetUpdate {
	au.mutation.SetOperatorID(id)
	return au
}

// SetNillableOperatorID sets the "operator" edge to the Maintainer entity by ID if the given value is not nil.
func (au *AssetUpdate) SetNillableOperatorID(id *uint64) *AssetUpdate {
	if id != nil {
		au = au.SetOperatorID(*id)
	}
	return au
}

// SetOperator sets the "operator" edge to the Maintainer entity.
func (au *AssetUpdate) SetOperator(m *Maintainer) *AssetUpdate {
	return au.SetOperatorID(m.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (au *AssetUpdate) ClearBrand() *AssetUpdate {
	au.mutation.ClearBrand()
	return au
}

// ClearModel clears the "model" edge to the BatteryModel entity.
func (au *AssetUpdate) ClearModel() *AssetUpdate {
	au.mutation.ClearModel()
	return au
}

// ClearCity clears the "city" edge to the City entity.
func (au *AssetUpdate) ClearCity() *AssetUpdate {
	au.mutation.ClearCity()
	return au
}

// ClearValues clears all "values" edges to the AssetAttributeValues entity.
func (au *AssetUpdate) ClearValues() *AssetUpdate {
	au.mutation.ClearValues()
	return au
}

// RemoveValueIDs removes the "values" edge to AssetAttributeValues entities by IDs.
func (au *AssetUpdate) RemoveValueIDs(ids ...uint64) *AssetUpdate {
	au.mutation.RemoveValueIDs(ids...)
	return au
}

// RemoveValues removes "values" edges to AssetAttributeValues entities.
func (au *AssetUpdate) RemoveValues(a ...*AssetAttributeValues) *AssetUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveValueIDs(ids...)
}

// ClearWarehouse clears the "warehouse" edge to the Warehouse entity.
func (au *AssetUpdate) ClearWarehouse() *AssetUpdate {
	au.mutation.ClearWarehouse()
	return au
}

// ClearStore clears the "store" edge to the Store entity.
func (au *AssetUpdate) ClearStore() *AssetUpdate {
	au.mutation.ClearStore()
	return au
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (au *AssetUpdate) ClearCabinet() *AssetUpdate {
	au.mutation.ClearCabinet()
	return au
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (au *AssetUpdate) ClearStation() *AssetUpdate {
	au.mutation.ClearStation()
	return au
}

// ClearRider clears the "rider" edge to the Rider entity.
func (au *AssetUpdate) ClearRider() *AssetUpdate {
	au.mutation.ClearRider()
	return au
}

// ClearOperator clears the "operator" edge to the Maintainer entity.
func (au *AssetUpdate) ClearOperator() *AssetUpdate {
	au.mutation.ClearOperator()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if asset.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized asset.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := asset.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AssetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(asset.FieldDeletedAt, field.TypeTime)
	}
	if au.mutation.CreatorCleared() {
		_spec.ClearField(asset.FieldCreator, field.TypeJSON)
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.SetField(asset.FieldLastModifier, field.TypeJSON, value)
	}
	if au.mutation.LastModifierCleared() {
		_spec.ClearField(asset.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(asset.FieldRemark, field.TypeString, value)
	}
	if au.mutation.RemarkCleared() {
		_spec.ClearField(asset.FieldRemark, field.TypeString)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(asset.FieldType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Sn(); ok {
		_spec.SetField(asset.FieldSn, field.TypeString, value)
	}
	if au.mutation.SnCleared() {
		_spec.ClearField(asset.FieldSn, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(asset.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := au.mutation.Enable(); ok {
		_spec.SetField(asset.FieldEnable, field.TypeBool, value)
	}
	if value, ok := au.mutation.LocationsType(); ok {
		_spec.SetField(asset.FieldLocationsType, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedLocationsType(); ok {
		_spec.AddField(asset.FieldLocationsType, field.TypeUint8, value)
	}
	if au.mutation.LocationsTypeCleared() {
		_spec.ClearField(asset.FieldLocationsType, field.TypeUint8)
	}
	if value, ok := au.mutation.RtoRiderID(); ok {
		_spec.SetField(asset.FieldRtoRiderID, field.TypeUint64, value)
	}
	if value, ok := au.mutation.AddedRtoRiderID(); ok {
		_spec.AddField(asset.FieldRtoRiderID, field.TypeUint64, value)
	}
	if au.mutation.RtoRiderIDCleared() {
		_spec.ClearField(asset.FieldRtoRiderID, field.TypeUint64)
	}
	if value, ok := au.mutation.InventoryAt(); ok {
		_spec.SetField(asset.FieldInventoryAt, field.TypeTime, value)
	}
	if au.mutation.InventoryAtCleared() {
		_spec.ClearField(asset.FieldInventoryAt, field.TypeTime)
	}
	if value, ok := au.mutation.BrandName(); ok {
		_spec.SetField(asset.FieldBrandName, field.TypeString, value)
	}
	if au.mutation.BrandNameCleared() {
		_spec.ClearField(asset.FieldBrandName, field.TypeString)
	}
	if au.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.BrandTable,
			Columns: []string{asset.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.BrandTable,
			Columns: []string{asset.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.ModelTable,
			Columns: []string{asset.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.ModelTable,
			Columns: []string{asset.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CityTable,
			Columns: []string{asset.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CityTable,
			Columns: []string{asset.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedValuesIDs(); len(nodes) > 0 && !au.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.WarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.WarehouseTable,
			Columns: []string{asset.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.WarehouseTable,
			Columns: []string{asset.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StoreTable,
			Columns: []string{asset.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StoreTable,
			Columns: []string{asset.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CabinetTable,
			Columns: []string{asset.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CabinetTable,
			Columns: []string{asset.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StationTable,
			Columns: []string{asset.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StationTable,
			Columns: []string{asset.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.RiderTable,
			Columns: []string{asset.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.RiderTable,
			Columns: []string{asset.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.OperatorTable,
			Columns: []string{asset.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.OperatorTable,
			Columns: []string{asset.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssetUpdateOne) SetDeletedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssetUpdateOne) ClearDeletedAt() *AssetUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AssetUpdateOne) SetLastModifier(m *model.Modifier) *AssetUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AssetUpdateOne) ClearLastModifier() *AssetUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AssetUpdateOne) SetRemark(s string) *AssetUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableRemark(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AssetUpdateOne) ClearRemark() *AssetUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetBrandID sets the "brand_id" field.
func (auo *AssetUpdateOne) SetBrandID(u uint64) *AssetUpdateOne {
	auo.mutation.SetBrandID(u)
	return auo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableBrandID(u *uint64) *AssetUpdateOne {
	if u != nil {
		auo.SetBrandID(*u)
	}
	return auo
}

// ClearBrandID clears the value of the "brand_id" field.
func (auo *AssetUpdateOne) ClearBrandID() *AssetUpdateOne {
	auo.mutation.ClearBrandID()
	return auo
}

// SetModelID sets the "model_id" field.
func (auo *AssetUpdateOne) SetModelID(u uint64) *AssetUpdateOne {
	auo.mutation.SetModelID(u)
	return auo
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableModelID(u *uint64) *AssetUpdateOne {
	if u != nil {
		auo.SetModelID(*u)
	}
	return auo
}

// ClearModelID clears the value of the "model_id" field.
func (auo *AssetUpdateOne) ClearModelID() *AssetUpdateOne {
	auo.mutation.ClearModelID()
	return auo
}

// SetCityID sets the "city_id" field.
func (auo *AssetUpdateOne) SetCityID(u uint64) *AssetUpdateOne {
	auo.mutation.SetCityID(u)
	return auo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCityID(u *uint64) *AssetUpdateOne {
	if u != nil {
		auo.SetCityID(*u)
	}
	return auo
}

// ClearCityID clears the value of the "city_id" field.
func (auo *AssetUpdateOne) ClearCityID() *AssetUpdateOne {
	auo.mutation.ClearCityID()
	return auo
}

// SetType sets the "type" field.
func (auo *AssetUpdateOne) SetType(u uint8) *AssetUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(u)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableType(u *uint8) *AssetUpdateOne {
	if u != nil {
		auo.SetType(*u)
	}
	return auo
}

// AddType adds u to the "type" field.
func (auo *AssetUpdateOne) AddType(u int8) *AssetUpdateOne {
	auo.mutation.AddType(u)
	return auo
}

// SetName sets the "name" field.
func (auo *AssetUpdateOne) SetName(s string) *AssetUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetSn sets the "sn" field.
func (auo *AssetUpdateOne) SetSn(s string) *AssetUpdateOne {
	auo.mutation.SetSn(s)
	return auo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableSn(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetSn(*s)
	}
	return auo
}

// ClearSn clears the value of the "sn" field.
func (auo *AssetUpdateOne) ClearSn() *AssetUpdateOne {
	auo.mutation.ClearSn()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AssetUpdateOne) SetStatus(u uint8) *AssetUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableStatus(u *uint8) *AssetUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AssetUpdateOne) AddStatus(u int8) *AssetUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// SetEnable sets the "enable" field.
func (auo *AssetUpdateOne) SetEnable(b bool) *AssetUpdateOne {
	auo.mutation.SetEnable(b)
	return auo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableEnable(b *bool) *AssetUpdateOne {
	if b != nil {
		auo.SetEnable(*b)
	}
	return auo
}

// SetLocationsType sets the "locations_type" field.
func (auo *AssetUpdateOne) SetLocationsType(u uint8) *AssetUpdateOne {
	auo.mutation.ResetLocationsType()
	auo.mutation.SetLocationsType(u)
	return auo
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableLocationsType(u *uint8) *AssetUpdateOne {
	if u != nil {
		auo.SetLocationsType(*u)
	}
	return auo
}

// AddLocationsType adds u to the "locations_type" field.
func (auo *AssetUpdateOne) AddLocationsType(u int8) *AssetUpdateOne {
	auo.mutation.AddLocationsType(u)
	return auo
}

// ClearLocationsType clears the value of the "locations_type" field.
func (auo *AssetUpdateOne) ClearLocationsType() *AssetUpdateOne {
	auo.mutation.ClearLocationsType()
	return auo
}

// SetLocationsID sets the "locations_id" field.
func (auo *AssetUpdateOne) SetLocationsID(u uint64) *AssetUpdateOne {
	auo.mutation.SetLocationsID(u)
	return auo
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableLocationsID(u *uint64) *AssetUpdateOne {
	if u != nil {
		auo.SetLocationsID(*u)
	}
	return auo
}

// ClearLocationsID clears the value of the "locations_id" field.
func (auo *AssetUpdateOne) ClearLocationsID() *AssetUpdateOne {
	auo.mutation.ClearLocationsID()
	return auo
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (auo *AssetUpdateOne) SetRtoRiderID(u uint64) *AssetUpdateOne {
	auo.mutation.ResetRtoRiderID()
	auo.mutation.SetRtoRiderID(u)
	return auo
}

// SetNillableRtoRiderID sets the "rto_rider_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableRtoRiderID(u *uint64) *AssetUpdateOne {
	if u != nil {
		auo.SetRtoRiderID(*u)
	}
	return auo
}

// AddRtoRiderID adds u to the "rto_rider_id" field.
func (auo *AssetUpdateOne) AddRtoRiderID(u int64) *AssetUpdateOne {
	auo.mutation.AddRtoRiderID(u)
	return auo
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (auo *AssetUpdateOne) ClearRtoRiderID() *AssetUpdateOne {
	auo.mutation.ClearRtoRiderID()
	return auo
}

// SetInventoryAt sets the "inventory_at" field.
func (auo *AssetUpdateOne) SetInventoryAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetInventoryAt(t)
	return auo
}

// SetNillableInventoryAt sets the "inventory_at" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableInventoryAt(t *time.Time) *AssetUpdateOne {
	if t != nil {
		auo.SetInventoryAt(*t)
	}
	return auo
}

// ClearInventoryAt clears the value of the "inventory_at" field.
func (auo *AssetUpdateOne) ClearInventoryAt() *AssetUpdateOne {
	auo.mutation.ClearInventoryAt()
	return auo
}

// SetBrandName sets the "brand_name" field.
func (auo *AssetUpdateOne) SetBrandName(s string) *AssetUpdateOne {
	auo.mutation.SetBrandName(s)
	return auo
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableBrandName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetBrandName(*s)
	}
	return auo
}

// ClearBrandName clears the value of the "brand_name" field.
func (auo *AssetUpdateOne) ClearBrandName() *AssetUpdateOne {
	auo.mutation.ClearBrandName()
	return auo
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (auo *AssetUpdateOne) SetBrand(e *EbikeBrand) *AssetUpdateOne {
	return auo.SetBrandID(e.ID)
}

// SetModel sets the "model" edge to the BatteryModel entity.
func (auo *AssetUpdateOne) SetModel(b *BatteryModel) *AssetUpdateOne {
	return auo.SetModelID(b.ID)
}

// SetCity sets the "city" edge to the City entity.
func (auo *AssetUpdateOne) SetCity(c *City) *AssetUpdateOne {
	return auo.SetCityID(c.ID)
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (auo *AssetUpdateOne) AddValueIDs(ids ...uint64) *AssetUpdateOne {
	auo.mutation.AddValueIDs(ids...)
	return auo
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (auo *AssetUpdateOne) AddValues(a ...*AssetAttributeValues) *AssetUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddValueIDs(ids...)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (auo *AssetUpdateOne) SetWarehouseID(id uint64) *AssetUpdateOne {
	auo.mutation.SetWarehouseID(id)
	return auo
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableWarehouseID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetWarehouseID(*id)
	}
	return auo
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (auo *AssetUpdateOne) SetWarehouse(w *Warehouse) *AssetUpdateOne {
	return auo.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (auo *AssetUpdateOne) SetStoreID(id uint64) *AssetUpdateOne {
	auo.mutation.SetStoreID(id)
	return auo
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableStoreID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetStoreID(*id)
	}
	return auo
}

// SetStore sets the "store" edge to the Store entity.
func (auo *AssetUpdateOne) SetStore(s *Store) *AssetUpdateOne {
	return auo.SetStoreID(s.ID)
}

// SetCabinetID sets the "cabinet" edge to the Cabinet entity by ID.
func (auo *AssetUpdateOne) SetCabinetID(id uint64) *AssetUpdateOne {
	auo.mutation.SetCabinetID(id)
	return auo
}

// SetNillableCabinetID sets the "cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCabinetID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetCabinetID(*id)
	}
	return auo
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (auo *AssetUpdateOne) SetCabinet(c *Cabinet) *AssetUpdateOne {
	return auo.SetCabinetID(c.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (auo *AssetUpdateOne) SetStationID(id uint64) *AssetUpdateOne {
	auo.mutation.SetStationID(id)
	return auo
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableStationID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetStationID(*id)
	}
	return auo
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (auo *AssetUpdateOne) SetStation(e *EnterpriseStation) *AssetUpdateOne {
	return auo.SetStationID(e.ID)
}

// SetRiderID sets the "rider" edge to the Rider entity by ID.
func (auo *AssetUpdateOne) SetRiderID(id uint64) *AssetUpdateOne {
	auo.mutation.SetRiderID(id)
	return auo
}

// SetNillableRiderID sets the "rider" edge to the Rider entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableRiderID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetRiderID(*id)
	}
	return auo
}

// SetRider sets the "rider" edge to the Rider entity.
func (auo *AssetUpdateOne) SetRider(r *Rider) *AssetUpdateOne {
	return auo.SetRiderID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Maintainer entity by ID.
func (auo *AssetUpdateOne) SetOperatorID(id uint64) *AssetUpdateOne {
	auo.mutation.SetOperatorID(id)
	return auo
}

// SetNillableOperatorID sets the "operator" edge to the Maintainer entity by ID if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableOperatorID(id *uint64) *AssetUpdateOne {
	if id != nil {
		auo = auo.SetOperatorID(*id)
	}
	return auo
}

// SetOperator sets the "operator" edge to the Maintainer entity.
func (auo *AssetUpdateOne) SetOperator(m *Maintainer) *AssetUpdateOne {
	return auo.SetOperatorID(m.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (auo *AssetUpdateOne) ClearBrand() *AssetUpdateOne {
	auo.mutation.ClearBrand()
	return auo
}

// ClearModel clears the "model" edge to the BatteryModel entity.
func (auo *AssetUpdateOne) ClearModel() *AssetUpdateOne {
	auo.mutation.ClearModel()
	return auo
}

// ClearCity clears the "city" edge to the City entity.
func (auo *AssetUpdateOne) ClearCity() *AssetUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// ClearValues clears all "values" edges to the AssetAttributeValues entity.
func (auo *AssetUpdateOne) ClearValues() *AssetUpdateOne {
	auo.mutation.ClearValues()
	return auo
}

// RemoveValueIDs removes the "values" edge to AssetAttributeValues entities by IDs.
func (auo *AssetUpdateOne) RemoveValueIDs(ids ...uint64) *AssetUpdateOne {
	auo.mutation.RemoveValueIDs(ids...)
	return auo
}

// RemoveValues removes "values" edges to AssetAttributeValues entities.
func (auo *AssetUpdateOne) RemoveValues(a ...*AssetAttributeValues) *AssetUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveValueIDs(ids...)
}

// ClearWarehouse clears the "warehouse" edge to the Warehouse entity.
func (auo *AssetUpdateOne) ClearWarehouse() *AssetUpdateOne {
	auo.mutation.ClearWarehouse()
	return auo
}

// ClearStore clears the "store" edge to the Store entity.
func (auo *AssetUpdateOne) ClearStore() *AssetUpdateOne {
	auo.mutation.ClearStore()
	return auo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (auo *AssetUpdateOne) ClearCabinet() *AssetUpdateOne {
	auo.mutation.ClearCabinet()
	return auo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (auo *AssetUpdateOne) ClearStation() *AssetUpdateOne {
	auo.mutation.ClearStation()
	return auo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (auo *AssetUpdateOne) ClearRider() *AssetUpdateOne {
	auo.mutation.ClearRider()
	return auo
}

// ClearOperator clears the "operator" edge to the Maintainer entity.
func (auo *AssetUpdateOne) ClearOperator() *AssetUpdateOne {
	auo.mutation.ClearOperator()
	return auo
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if asset.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized asset.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := asset.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AssetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(asset.FieldDeletedAt, field.TypeTime)
	}
	if auo.mutation.CreatorCleared() {
		_spec.ClearField(asset.FieldCreator, field.TypeJSON)
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.SetField(asset.FieldLastModifier, field.TypeJSON, value)
	}
	if auo.mutation.LastModifierCleared() {
		_spec.ClearField(asset.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(asset.FieldRemark, field.TypeString, value)
	}
	if auo.mutation.RemarkCleared() {
		_spec.ClearField(asset.FieldRemark, field.TypeString)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(asset.FieldType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Sn(); ok {
		_spec.SetField(asset.FieldSn, field.TypeString, value)
	}
	if auo.mutation.SnCleared() {
		_spec.ClearField(asset.FieldSn, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(asset.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.Enable(); ok {
		_spec.SetField(asset.FieldEnable, field.TypeBool, value)
	}
	if value, ok := auo.mutation.LocationsType(); ok {
		_spec.SetField(asset.FieldLocationsType, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedLocationsType(); ok {
		_spec.AddField(asset.FieldLocationsType, field.TypeUint8, value)
	}
	if auo.mutation.LocationsTypeCleared() {
		_spec.ClearField(asset.FieldLocationsType, field.TypeUint8)
	}
	if value, ok := auo.mutation.RtoRiderID(); ok {
		_spec.SetField(asset.FieldRtoRiderID, field.TypeUint64, value)
	}
	if value, ok := auo.mutation.AddedRtoRiderID(); ok {
		_spec.AddField(asset.FieldRtoRiderID, field.TypeUint64, value)
	}
	if auo.mutation.RtoRiderIDCleared() {
		_spec.ClearField(asset.FieldRtoRiderID, field.TypeUint64)
	}
	if value, ok := auo.mutation.InventoryAt(); ok {
		_spec.SetField(asset.FieldInventoryAt, field.TypeTime, value)
	}
	if auo.mutation.InventoryAtCleared() {
		_spec.ClearField(asset.FieldInventoryAt, field.TypeTime)
	}
	if value, ok := auo.mutation.BrandName(); ok {
		_spec.SetField(asset.FieldBrandName, field.TypeString, value)
	}
	if auo.mutation.BrandNameCleared() {
		_spec.ClearField(asset.FieldBrandName, field.TypeString)
	}
	if auo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.BrandTable,
			Columns: []string{asset.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.BrandTable,
			Columns: []string{asset.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ModelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.ModelTable,
			Columns: []string{asset.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.ModelTable,
			Columns: []string{asset.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CityTable,
			Columns: []string{asset.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CityTable,
			Columns: []string{asset.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !auo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.WarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.WarehouseTable,
			Columns: []string{asset.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.WarehouseTable,
			Columns: []string{asset.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StoreTable,
			Columns: []string{asset.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StoreTable,
			Columns: []string{asset.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CabinetTable,
			Columns: []string{asset.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CabinetTable,
			Columns: []string{asset.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StationTable,
			Columns: []string{asset.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.StationTable,
			Columns: []string{asset.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.RiderTable,
			Columns: []string{asset.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.RiderTable,
			Columns: []string{asset.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.OperatorTable,
			Columns: []string{asset.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.OperatorTable,
			Columns: []string{asset.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
