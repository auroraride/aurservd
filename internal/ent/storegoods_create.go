// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
)

// StoreGoodsCreate is the builder for creating a StoreGoods entity.
type StoreGoodsCreate struct {
	config
	mutation *StoreGoodsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sgc *StoreGoodsCreate) SetCreatedAt(t time.Time) *StoreGoodsCreate {
	sgc.mutation.SetCreatedAt(t)
	return sgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgc *StoreGoodsCreate) SetNillableCreatedAt(t *time.Time) *StoreGoodsCreate {
	if t != nil {
		sgc.SetCreatedAt(*t)
	}
	return sgc
}

// SetUpdatedAt sets the "updated_at" field.
func (sgc *StoreGoodsCreate) SetUpdatedAt(t time.Time) *StoreGoodsCreate {
	sgc.mutation.SetUpdatedAt(t)
	return sgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgc *StoreGoodsCreate) SetNillableUpdatedAt(t *time.Time) *StoreGoodsCreate {
	if t != nil {
		sgc.SetUpdatedAt(*t)
	}
	return sgc
}

// SetDeletedAt sets the "deleted_at" field.
func (sgc *StoreGoodsCreate) SetDeletedAt(t time.Time) *StoreGoodsCreate {
	sgc.mutation.SetDeletedAt(t)
	return sgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sgc *StoreGoodsCreate) SetNillableDeletedAt(t *time.Time) *StoreGoodsCreate {
	if t != nil {
		sgc.SetDeletedAt(*t)
	}
	return sgc
}

// SetGoodsID sets the "goods_id" field.
func (sgc *StoreGoodsCreate) SetGoodsID(u uint64) *StoreGoodsCreate {
	sgc.mutation.SetGoodsID(u)
	return sgc
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (sgc *StoreGoodsCreate) SetNillableGoodsID(u *uint64) *StoreGoodsCreate {
	if u != nil {
		sgc.SetGoodsID(*u)
	}
	return sgc
}

// SetStoreID sets the "store_id" field.
func (sgc *StoreGoodsCreate) SetStoreID(u uint64) *StoreGoodsCreate {
	sgc.mutation.SetStoreID(u)
	return sgc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (sgc *StoreGoodsCreate) SetNillableStoreID(u *uint64) *StoreGoodsCreate {
	if u != nil {
		sgc.SetStoreID(*u)
	}
	return sgc
}

// SetGoods sets the "goods" edge to the Goods entity.
func (sgc *StoreGoodsCreate) SetGoods(g *Goods) *StoreGoodsCreate {
	return sgc.SetGoodsID(g.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (sgc *StoreGoodsCreate) SetStore(s *Store) *StoreGoodsCreate {
	return sgc.SetStoreID(s.ID)
}

// Mutation returns the StoreGoodsMutation object of the builder.
func (sgc *StoreGoodsCreate) Mutation() *StoreGoodsMutation {
	return sgc.mutation
}

// Save creates the StoreGoods in the database.
func (sgc *StoreGoodsCreate) Save(ctx context.Context) (*StoreGoods, error) {
	sgc.defaults()
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *StoreGoodsCreate) SaveX(ctx context.Context) *StoreGoods {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *StoreGoodsCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *StoreGoodsCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *StoreGoodsCreate) defaults() {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		v := storegoods.DefaultCreatedAt()
		sgc.mutation.SetCreatedAt(v)
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		v := storegoods.DefaultUpdatedAt()
		sgc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sgc *StoreGoodsCreate) check() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StoreGoods.created_at"`)}
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StoreGoods.updated_at"`)}
	}
	return nil
}

func (sgc *StoreGoodsCreate) sqlSave(ctx context.Context) (*StoreGoods, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *StoreGoodsCreate) createSpec() (*StoreGoods, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreGoods{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(storegoods.Table, sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = sgc.conflict
	if value, ok := sgc.mutation.CreatedAt(); ok {
		_spec.SetField(storegoods.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sgc.mutation.UpdatedAt(); ok {
		_spec.SetField(storegoods.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sgc.mutation.DeletedAt(); ok {
		_spec.SetField(storegoods.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := sgc.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.GoodsTable,
			Columns: []string{storegoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GoodsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sgc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.StoreTable,
			Columns: []string{storegoods.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StoreGoods.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreGoodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgc *StoreGoodsCreate) OnConflict(opts ...sql.ConflictOption) *StoreGoodsUpsertOne {
	sgc.conflict = opts
	return &StoreGoodsUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *StoreGoodsCreate) OnConflictColumns(columns ...string) *StoreGoodsUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &StoreGoodsUpsertOne{
		create: sgc,
	}
}

type (
	// StoreGoodsUpsertOne is the builder for "upsert"-ing
	//  one StoreGoods node.
	StoreGoodsUpsertOne struct {
		create *StoreGoodsCreate
	}

	// StoreGoodsUpsert is the "OnConflict" setter.
	StoreGoodsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGoodsUpsert) SetUpdatedAt(v time.Time) *StoreGoodsUpsert {
	u.Set(storegoods.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGoodsUpsert) UpdateUpdatedAt() *StoreGoodsUpsert {
	u.SetExcluded(storegoods.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGoodsUpsert) SetDeletedAt(v time.Time) *StoreGoodsUpsert {
	u.Set(storegoods.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGoodsUpsert) UpdateDeletedAt() *StoreGoodsUpsert {
	u.SetExcluded(storegoods.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGoodsUpsert) ClearDeletedAt() *StoreGoodsUpsert {
	u.SetNull(storegoods.FieldDeletedAt)
	return u
}

// SetGoodsID sets the "goods_id" field.
func (u *StoreGoodsUpsert) SetGoodsID(v uint64) *StoreGoodsUpsert {
	u.Set(storegoods.FieldGoodsID, v)
	return u
}

// UpdateGoodsID sets the "goods_id" field to the value that was provided on create.
func (u *StoreGoodsUpsert) UpdateGoodsID() *StoreGoodsUpsert {
	u.SetExcluded(storegoods.FieldGoodsID)
	return u
}

// ClearGoodsID clears the value of the "goods_id" field.
func (u *StoreGoodsUpsert) ClearGoodsID() *StoreGoodsUpsert {
	u.SetNull(storegoods.FieldGoodsID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *StoreGoodsUpsert) SetStoreID(v uint64) *StoreGoodsUpsert {
	u.Set(storegoods.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StoreGoodsUpsert) UpdateStoreID() *StoreGoodsUpsert {
	u.SetExcluded(storegoods.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StoreGoodsUpsert) ClearStoreID() *StoreGoodsUpsert {
	u.SetNull(storegoods.FieldStoreID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StoreGoodsUpsertOne) UpdateNewValues() *StoreGoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(storegoods.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StoreGoodsUpsertOne) Ignore() *StoreGoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreGoodsUpsertOne) DoNothing() *StoreGoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreGoodsCreate.OnConflict
// documentation for more info.
func (u *StoreGoodsUpsertOne) Update(set func(*StoreGoodsUpsert)) *StoreGoodsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreGoodsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGoodsUpsertOne) SetUpdatedAt(v time.Time) *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGoodsUpsertOne) UpdateUpdatedAt() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGoodsUpsertOne) SetDeletedAt(v time.Time) *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGoodsUpsertOne) UpdateDeletedAt() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGoodsUpsertOne) ClearDeletedAt() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetGoodsID sets the "goods_id" field.
func (u *StoreGoodsUpsertOne) SetGoodsID(v uint64) *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetGoodsID(v)
	})
}

// UpdateGoodsID sets the "goods_id" field to the value that was provided on create.
func (u *StoreGoodsUpsertOne) UpdateGoodsID() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateGoodsID()
	})
}

// ClearGoodsID clears the value of the "goods_id" field.
func (u *StoreGoodsUpsertOne) ClearGoodsID() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearGoodsID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StoreGoodsUpsertOne) SetStoreID(v uint64) *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StoreGoodsUpsertOne) UpdateStoreID() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StoreGoodsUpsertOne) ClearStoreID() *StoreGoodsUpsertOne {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearStoreID()
	})
}

// Exec executes the query.
func (u *StoreGoodsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreGoodsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreGoodsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StoreGoodsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StoreGoodsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StoreGoodsCreateBulk is the builder for creating many StoreGoods entities in bulk.
type StoreGoodsCreateBulk struct {
	config
	err      error
	builders []*StoreGoodsCreate
	conflict []sql.ConflictOption
}

// Save creates the StoreGoods entities in the database.
func (sgcb *StoreGoodsCreateBulk) Save(ctx context.Context) ([]*StoreGoods, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*StoreGoods, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreGoodsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *StoreGoodsCreateBulk) SaveX(ctx context.Context) []*StoreGoods {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *StoreGoodsCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *StoreGoodsCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StoreGoods.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreGoodsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgcb *StoreGoodsCreateBulk) OnConflict(opts ...sql.ConflictOption) *StoreGoodsUpsertBulk {
	sgcb.conflict = opts
	return &StoreGoodsUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *StoreGoodsCreateBulk) OnConflictColumns(columns ...string) *StoreGoodsUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &StoreGoodsUpsertBulk{
		create: sgcb,
	}
}

// StoreGoodsUpsertBulk is the builder for "upsert"-ing
// a bulk of StoreGoods nodes.
type StoreGoodsUpsertBulk struct {
	create *StoreGoodsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StoreGoodsUpsertBulk) UpdateNewValues() *StoreGoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(storegoods.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StoreGoods.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StoreGoodsUpsertBulk) Ignore() *StoreGoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreGoodsUpsertBulk) DoNothing() *StoreGoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreGoodsCreateBulk.OnConflict
// documentation for more info.
func (u *StoreGoodsUpsertBulk) Update(set func(*StoreGoodsUpsert)) *StoreGoodsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreGoodsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGoodsUpsertBulk) SetUpdatedAt(v time.Time) *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGoodsUpsertBulk) UpdateUpdatedAt() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGoodsUpsertBulk) SetDeletedAt(v time.Time) *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGoodsUpsertBulk) UpdateDeletedAt() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGoodsUpsertBulk) ClearDeletedAt() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetGoodsID sets the "goods_id" field.
func (u *StoreGoodsUpsertBulk) SetGoodsID(v uint64) *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetGoodsID(v)
	})
}

// UpdateGoodsID sets the "goods_id" field to the value that was provided on create.
func (u *StoreGoodsUpsertBulk) UpdateGoodsID() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateGoodsID()
	})
}

// ClearGoodsID clears the value of the "goods_id" field.
func (u *StoreGoodsUpsertBulk) ClearGoodsID() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearGoodsID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StoreGoodsUpsertBulk) SetStoreID(v uint64) *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StoreGoodsUpsertBulk) UpdateStoreID() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StoreGoodsUpsertBulk) ClearStoreID() *StoreGoodsUpsertBulk {
	return u.Update(func(s *StoreGoodsUpsert) {
		s.ClearStoreID()
	})
}

// Exec executes the query.
func (u *StoreGoodsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StoreGoodsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreGoodsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreGoodsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
