// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Stock is the model entity for the Stock schema.
type Stock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID *uint64 `json:"subscribe_id,omitempty"`
	// EbikeID holds the value of the "ebike_id" field.
	EbikeID *uint64 `json:"ebike_id,omitempty"`
	// 调拨编号
	Sn string `json:"sn,omitempty"`
	// 类型 0:调拨 1:领取电池 2:寄存电池 3:结束寄存 4:归还电池
	Type uint8 `json:"type,omitempty"`
	// 入库至 或 出库自 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// 入库至 或 出库自 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 对应骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// 操作店员ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 物资名称
	Name string `json:"name,omitempty"`
	// 电池型号
	Model *string `json:"model,omitempty"`
	// 物资数量: 正值调入 / 负值调出
	Num int `json:"num,omitempty"`
	// 物资种类
	Material stock.Material `json:"material,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StockQuery when eager-loading is set.
	Edges        StockEdges `json:"edges"`
	stock_spouse *uint64
}

// StockEdges holds the relations/edges for other nodes in the graph.
type StockEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// Ebike holds the value of the ebike edge.
	Ebike *Ebike `json:"ebike,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Spouse holds the value of the spouse edge.
	Spouse *Stock `json:"spouse,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[1] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// EbikeOrErr returns the Ebike value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) EbikeOrErr() (*Ebike, error) {
	if e.loadedTypes[2] {
		if e.Ebike == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: ebike.Label}
		}
		return e.Ebike, nil
	}
	return nil, &NotLoadedError{edge: "ebike"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[3] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[4] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[5] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[6] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// SpouseOrErr returns the Spouse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) SpouseOrErr() (*Stock, error) {
	if e.loadedTypes[7] {
		if e.Spouse == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: stock.Label}
		}
		return e.Spouse, nil
	}
	return nil, &NotLoadedError{edge: "spouse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stock.FieldCreator, stock.FieldLastModifier:
			values[i] = new([]byte)
		case stock.FieldID, stock.FieldCityID, stock.FieldSubscribeID, stock.FieldEbikeID, stock.FieldType, stock.FieldStoreID, stock.FieldCabinetID, stock.FieldRiderID, stock.FieldEmployeeID, stock.FieldNum:
			values[i] = new(sql.NullInt64)
		case stock.FieldRemark, stock.FieldSn, stock.FieldName, stock.FieldModel, stock.FieldMaterial:
			values[i] = new(sql.NullString)
		case stock.FieldCreatedAt, stock.FieldUpdatedAt, stock.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case stock.ForeignKeys[0]: // stock_spouse
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stock fields.
func (s *Stock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case stock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case stock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case stock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case stock.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case stock.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case stock.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case stock.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				s.CityID = new(uint64)
				*s.CityID = uint64(value.Int64)
			}
		case stock.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				s.SubscribeID = new(uint64)
				*s.SubscribeID = uint64(value.Int64)
			}
		case stock.FieldEbikeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ebike_id", values[i])
			} else if value.Valid {
				s.EbikeID = new(uint64)
				*s.EbikeID = uint64(value.Int64)
			}
		case stock.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				s.Sn = value.String
			}
		case stock.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = uint8(value.Int64)
			}
		case stock.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				s.StoreID = new(uint64)
				*s.StoreID = uint64(value.Int64)
			}
		case stock.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				s.CabinetID = new(uint64)
				*s.CabinetID = uint64(value.Int64)
			}
		case stock.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				s.RiderID = new(uint64)
				*s.RiderID = uint64(value.Int64)
			}
		case stock.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				s.EmployeeID = new(uint64)
				*s.EmployeeID = uint64(value.Int64)
			}
		case stock.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stock.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				s.Model = new(string)
				*s.Model = value.String
			}
		case stock.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				s.Num = int(value.Int64)
			}
		case stock.FieldMaterial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field material", values[i])
			} else if value.Valid {
				s.Material = stock.Material(value.String)
			}
		case stock.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field stock_spouse", value)
			} else if value.Valid {
				s.stock_spouse = new(uint64)
				*s.stock_spouse = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Stock entity.
func (s *Stock) QueryCity() *CityQuery {
	return (&StockClient{config: s.config}).QueryCity(s)
}

// QuerySubscribe queries the "subscribe" edge of the Stock entity.
func (s *Stock) QuerySubscribe() *SubscribeQuery {
	return (&StockClient{config: s.config}).QuerySubscribe(s)
}

// QueryEbike queries the "ebike" edge of the Stock entity.
func (s *Stock) QueryEbike() *EbikeQuery {
	return (&StockClient{config: s.config}).QueryEbike(s)
}

// QueryStore queries the "store" edge of the Stock entity.
func (s *Stock) QueryStore() *StoreQuery {
	return (&StockClient{config: s.config}).QueryStore(s)
}

// QueryCabinet queries the "cabinet" edge of the Stock entity.
func (s *Stock) QueryCabinet() *CabinetQuery {
	return (&StockClient{config: s.config}).QueryCabinet(s)
}

// QueryRider queries the "rider" edge of the Stock entity.
func (s *Stock) QueryRider() *RiderQuery {
	return (&StockClient{config: s.config}).QueryRider(s)
}

// QueryEmployee queries the "employee" edge of the Stock entity.
func (s *Stock) QueryEmployee() *EmployeeQuery {
	return (&StockClient{config: s.config}).QueryEmployee(s)
}

// QuerySpouse queries the "spouse" edge of the Stock entity.
func (s *Stock) QuerySpouse() *StockQuery {
	return (&StockClient{config: s.config}).QuerySpouse(s)
}

// Update returns a builder for updating this Stock.
// Note that you need to call Stock.Unwrap() before calling this method if this Stock
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stock) Update() *StockUpdateOne {
	return (&StockClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stock) Unwrap() *Stock {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stock is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stock) String() string {
	var builder strings.Builder
	builder.WriteString("Stock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", s.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", s.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", ")
	if v := s.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.SubscribeID; v != nil {
		builder.WriteString("subscribe_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.EbikeID; v != nil {
		builder.WriteString("ebike_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(s.Sn)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", s.Type))
	builder.WriteString(", ")
	if v := s.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	if v := s.Model; v != nil {
		builder.WriteString("model=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", s.Num))
	builder.WriteString(", ")
	builder.WriteString("material=")
	builder.WriteString(fmt.Sprintf("%v", s.Material))
	builder.WriteByte(')')
	return builder.String()
}

// Stocks is a parsable slice of Stock.
type Stocks []*Stock

func (s Stocks) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
