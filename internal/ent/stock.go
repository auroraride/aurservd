// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/google/uuid"
)

// Stock is the model entity for the Stock schema.
type Stock struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// StoreID holds the value of the "store_id" field.
	// 所属门店ID
	StoreID uint64 `json:"store_id,omitempty"`
	// UUID holds the value of the "uuid" field.
	// 调拨编号
	UUID uuid.UUID `json:"uuid,omitempty"`
	// FromStoreID holds the value of the "from_store_id" field.
	// 调入自门店ID
	FromStoreID *uint64 `json:"from_store_id,omitempty"`
	// Name holds the value of the "name" field.
	// 物资名称
	Name string `json:"name,omitempty"`
	// Voltage holds the value of the "voltage" field.
	// 电池型号(电压)
	Voltage *float64 `json:"voltage,omitempty"`
	// Num holds the value of the "num" field.
	// 物资数量: 正值调入 / 负值调出
	Num int `json:"num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StockQuery when eager-loading is set.
	Edges StockEdges `json:"edges"`
}

// StockEdges holds the relations/edges for other nodes in the graph.
type StockEdges struct {
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// FromStore holds the value of the fromStore edge.
	FromStore *Store `json:"fromStore,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[0] {
		if e.Store == nil {
			// The edge store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// FromStoreOrErr returns the FromStore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockEdges) FromStoreOrErr() (*Store, error) {
	if e.loadedTypes[1] {
		if e.FromStore == nil {
			// The edge fromStore was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.FromStore, nil
	}
	return nil, &NotLoadedError{edge: "fromStore"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stock) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case stock.FieldCreator, stock.FieldLastModifier:
			values[i] = new([]byte)
		case stock.FieldVoltage:
			values[i] = new(sql.NullFloat64)
		case stock.FieldID, stock.FieldStoreID, stock.FieldFromStoreID, stock.FieldNum:
			values[i] = new(sql.NullInt64)
		case stock.FieldRemark, stock.FieldName:
			values[i] = new(sql.NullString)
		case stock.FieldCreatedAt, stock.FieldUpdatedAt, stock.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case stock.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Stock", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stock fields.
func (s *Stock) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case stock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case stock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case stock.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = new(time.Time)
				*s.DeletedAt = value.Time
			}
		case stock.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case stock.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case stock.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				s.Remark = value.String
			}
		case stock.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				s.StoreID = uint64(value.Int64)
			}
		case stock.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				s.UUID = *value
			}
		case stock.FieldFromStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_store_id", values[i])
			} else if value.Valid {
				s.FromStoreID = new(uint64)
				*s.FromStoreID = uint64(value.Int64)
			}
		case stock.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case stock.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				s.Voltage = new(float64)
				*s.Voltage = value.Float64
			}
		case stock.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				s.Num = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryStore queries the "store" edge of the Stock entity.
func (s *Stock) QueryStore() *StoreQuery {
	return (&StockClient{config: s.config}).QueryStore(s)
}

// QueryFromStore queries the "fromStore" edge of the Stock entity.
func (s *Stock) QueryFromStore() *StoreQuery {
	return (&StockClient{config: s.config}).QueryFromStore(s)
}

// Update returns a builder for updating this Stock.
// Note that you need to call Stock.Unwrap() before calling this method if this Stock
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stock) Update() *StockUpdateOne {
	return (&StockClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Stock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stock) Unwrap() *Stock {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stock is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stock) String() string {
	var builder strings.Builder
	builder.WriteString("Stock(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	if v := s.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", s.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", s.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(s.Remark)
	builder.WriteString(", store_id=")
	builder.WriteString(fmt.Sprintf("%v", s.StoreID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", s.UUID))
	if v := s.FromStoreID; v != nil {
		builder.WriteString(", from_store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	if v := s.Voltage; v != nil {
		builder.WriteString(", voltage=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", num=")
	builder.WriteString(fmt.Sprintf("%v", s.Num))
	builder.WriteByte(')')
	return builder.String()
}

// Stocks is a parsable slice of Stock.
type Stocks []*Stock

func (s Stocks) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
