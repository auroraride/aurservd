// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribeUpdate is the builder for updating Subscribe entities.
type SubscribeUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscribeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscribeUpdate builder.
func (su *SubscribeUpdate) Where(ps ...predicate.Subscribe) *SubscribeUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscribeUpdate) SetUpdatedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubscribeUpdate) SetDeletedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableDeletedAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubscribeUpdate) ClearDeletedAt() *SubscribeUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *SubscribeUpdate) SetLastModifier(m *model.Modifier) *SubscribeUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *SubscribeUpdate) ClearLastModifier() *SubscribeUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *SubscribeUpdate) SetRemark(s string) *SubscribeUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRemark(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *SubscribeUpdate) ClearRemark() *SubscribeUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetPlanID sets the "plan_id" field.
func (su *SubscribeUpdate) SetPlanID(u uint64) *SubscribeUpdate {
	su.mutation.SetPlanID(u)
	return su
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePlanID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetPlanID(*u)
	}
	return su
}

// ClearPlanID clears the value of the "plan_id" field.
func (su *SubscribeUpdate) ClearPlanID() *SubscribeUpdate {
	su.mutation.ClearPlanID()
	return su
}

// SetEmployeeID sets the "employee_id" field.
func (su *SubscribeUpdate) SetEmployeeID(u uint64) *SubscribeUpdate {
	su.mutation.SetEmployeeID(u)
	return su
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEmployeeID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetEmployeeID(*u)
	}
	return su
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (su *SubscribeUpdate) ClearEmployeeID() *SubscribeUpdate {
	su.mutation.ClearEmployeeID()
	return su
}

// SetCityID sets the "city_id" field.
func (su *SubscribeUpdate) SetCityID(u uint64) *SubscribeUpdate {
	su.mutation.SetCityID(u)
	return su
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableCityID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetCityID(*u)
	}
	return su
}

// SetStationID sets the "station_id" field.
func (su *SubscribeUpdate) SetStationID(u uint64) *SubscribeUpdate {
	su.mutation.SetStationID(u)
	return su
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableStationID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetStationID(*u)
	}
	return su
}

// ClearStationID clears the value of the "station_id" field.
func (su *SubscribeUpdate) ClearStationID() *SubscribeUpdate {
	su.mutation.ClearStationID()
	return su
}

// SetStoreID sets the "store_id" field.
func (su *SubscribeUpdate) SetStoreID(u uint64) *SubscribeUpdate {
	su.mutation.SetStoreID(u)
	return su
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableStoreID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetStoreID(*u)
	}
	return su
}

// ClearStoreID clears the value of the "store_id" field.
func (su *SubscribeUpdate) ClearStoreID() *SubscribeUpdate {
	su.mutation.ClearStoreID()
	return su
}

// SetCabinetID sets the "cabinet_id" field.
func (su *SubscribeUpdate) SetCabinetID(u uint64) *SubscribeUpdate {
	su.mutation.SetCabinetID(u)
	return su
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableCabinetID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetCabinetID(*u)
	}
	return su
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (su *SubscribeUpdate) ClearCabinetID() *SubscribeUpdate {
	su.mutation.ClearCabinetID()
	return su
}

// SetBrandID sets the "brand_id" field.
func (su *SubscribeUpdate) SetBrandID(u uint64) *SubscribeUpdate {
	su.mutation.SetBrandID(u)
	return su
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableBrandID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetBrandID(*u)
	}
	return su
}

// ClearBrandID clears the value of the "brand_id" field.
func (su *SubscribeUpdate) ClearBrandID() *SubscribeUpdate {
	su.mutation.ClearBrandID()
	return su
}

// SetEbikeID sets the "ebike_id" field.
func (su *SubscribeUpdate) SetEbikeID(u uint64) *SubscribeUpdate {
	su.mutation.SetEbikeID(u)
	return su
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEbikeID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetEbikeID(*u)
	}
	return su
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (su *SubscribeUpdate) ClearEbikeID() *SubscribeUpdate {
	su.mutation.ClearEbikeID()
	return su
}

// SetRiderID sets the "rider_id" field.
func (su *SubscribeUpdate) SetRiderID(u uint64) *SubscribeUpdate {
	su.mutation.SetRiderID(u)
	return su
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRiderID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetRiderID(*u)
	}
	return su
}

// SetInitialOrderID sets the "initial_order_id" field.
func (su *SubscribeUpdate) SetInitialOrderID(u uint64) *SubscribeUpdate {
	su.mutation.SetInitialOrderID(u)
	return su
}

// SetNillableInitialOrderID sets the "initial_order_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableInitialOrderID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetInitialOrderID(*u)
	}
	return su
}

// ClearInitialOrderID clears the value of the "initial_order_id" field.
func (su *SubscribeUpdate) ClearInitialOrderID() *SubscribeUpdate {
	su.mutation.ClearInitialOrderID()
	return su
}

// SetEnterpriseID sets the "enterprise_id" field.
func (su *SubscribeUpdate) SetEnterpriseID(u uint64) *SubscribeUpdate {
	su.mutation.SetEnterpriseID(u)
	return su
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEnterpriseID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetEnterpriseID(*u)
	}
	return su
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (su *SubscribeUpdate) ClearEnterpriseID() *SubscribeUpdate {
	su.mutation.ClearEnterpriseID()
	return su
}

// SetStatus sets the "status" field.
func (su *SubscribeUpdate) SetStatus(u uint8) *SubscribeUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableStatus(u *uint8) *SubscribeUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *SubscribeUpdate) AddStatus(u int8) *SubscribeUpdate {
	su.mutation.AddStatus(u)
	return su
}

// SetModel sets the "model" field.
func (su *SubscribeUpdate) SetModel(s string) *SubscribeUpdate {
	su.mutation.SetModel(s)
	return su
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableModel(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetModel(*s)
	}
	return su
}

// SetInitialDays sets the "initial_days" field.
func (su *SubscribeUpdate) SetInitialDays(i int) *SubscribeUpdate {
	su.mutation.ResetInitialDays()
	su.mutation.SetInitialDays(i)
	return su
}

// SetNillableInitialDays sets the "initial_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableInitialDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetInitialDays(*i)
	}
	return su
}

// AddInitialDays adds i to the "initial_days" field.
func (su *SubscribeUpdate) AddInitialDays(i int) *SubscribeUpdate {
	su.mutation.AddInitialDays(i)
	return su
}

// ClearInitialDays clears the value of the "initial_days" field.
func (su *SubscribeUpdate) ClearInitialDays() *SubscribeUpdate {
	su.mutation.ClearInitialDays()
	return su
}

// SetAlterDays sets the "alter_days" field.
func (su *SubscribeUpdate) SetAlterDays(i int) *SubscribeUpdate {
	su.mutation.ResetAlterDays()
	su.mutation.SetAlterDays(i)
	return su
}

// SetNillableAlterDays sets the "alter_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableAlterDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetAlterDays(*i)
	}
	return su
}

// AddAlterDays adds i to the "alter_days" field.
func (su *SubscribeUpdate) AddAlterDays(i int) *SubscribeUpdate {
	su.mutation.AddAlterDays(i)
	return su
}

// SetPauseDays sets the "pause_days" field.
func (su *SubscribeUpdate) SetPauseDays(i int) *SubscribeUpdate {
	su.mutation.ResetPauseDays()
	su.mutation.SetPauseDays(i)
	return su
}

// SetNillablePauseDays sets the "pause_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePauseDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetPauseDays(*i)
	}
	return su
}

// AddPauseDays adds i to the "pause_days" field.
func (su *SubscribeUpdate) AddPauseDays(i int) *SubscribeUpdate {
	su.mutation.AddPauseDays(i)
	return su
}

// SetSuspendDays sets the "suspend_days" field.
func (su *SubscribeUpdate) SetSuspendDays(i int) *SubscribeUpdate {
	su.mutation.ResetSuspendDays()
	su.mutation.SetSuspendDays(i)
	return su
}

// SetNillableSuspendDays sets the "suspend_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableSuspendDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetSuspendDays(*i)
	}
	return su
}

// AddSuspendDays adds i to the "suspend_days" field.
func (su *SubscribeUpdate) AddSuspendDays(i int) *SubscribeUpdate {
	su.mutation.AddSuspendDays(i)
	return su
}

// SetRenewalDays sets the "renewal_days" field.
func (su *SubscribeUpdate) SetRenewalDays(i int) *SubscribeUpdate {
	su.mutation.ResetRenewalDays()
	su.mutation.SetRenewalDays(i)
	return su
}

// SetNillableRenewalDays sets the "renewal_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRenewalDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetRenewalDays(*i)
	}
	return su
}

// AddRenewalDays adds i to the "renewal_days" field.
func (su *SubscribeUpdate) AddRenewalDays(i int) *SubscribeUpdate {
	su.mutation.AddRenewalDays(i)
	return su
}

// SetOverdueDays sets the "overdue_days" field.
func (su *SubscribeUpdate) SetOverdueDays(i int) *SubscribeUpdate {
	su.mutation.ResetOverdueDays()
	su.mutation.SetOverdueDays(i)
	return su
}

// SetNillableOverdueDays sets the "overdue_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableOverdueDays(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetOverdueDays(*i)
	}
	return su
}

// AddOverdueDays adds i to the "overdue_days" field.
func (su *SubscribeUpdate) AddOverdueDays(i int) *SubscribeUpdate {
	su.mutation.AddOverdueDays(i)
	return su
}

// SetRemaining sets the "remaining" field.
func (su *SubscribeUpdate) SetRemaining(i int) *SubscribeUpdate {
	su.mutation.ResetRemaining()
	su.mutation.SetRemaining(i)
	return su
}

// SetNillableRemaining sets the "remaining" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRemaining(i *int) *SubscribeUpdate {
	if i != nil {
		su.SetRemaining(*i)
	}
	return su
}

// AddRemaining adds i to the "remaining" field.
func (su *SubscribeUpdate) AddRemaining(i int) *SubscribeUpdate {
	su.mutation.AddRemaining(i)
	return su
}

// SetPausedAt sets the "paused_at" field.
func (su *SubscribeUpdate) SetPausedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetPausedAt(t)
	return su
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePausedAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetPausedAt(*t)
	}
	return su
}

// ClearPausedAt clears the value of the "paused_at" field.
func (su *SubscribeUpdate) ClearPausedAt() *SubscribeUpdate {
	su.mutation.ClearPausedAt()
	return su
}

// SetSuspendAt sets the "suspend_at" field.
func (su *SubscribeUpdate) SetSuspendAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetSuspendAt(t)
	return su
}

// SetNillableSuspendAt sets the "suspend_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableSuspendAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetSuspendAt(*t)
	}
	return su
}

// ClearSuspendAt clears the value of the "suspend_at" field.
func (su *SubscribeUpdate) ClearSuspendAt() *SubscribeUpdate {
	su.mutation.ClearSuspendAt()
	return su
}

// SetStartAt sets the "start_at" field.
func (su *SubscribeUpdate) SetStartAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetStartAt(t)
	return su
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableStartAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetStartAt(*t)
	}
	return su
}

// ClearStartAt clears the value of the "start_at" field.
func (su *SubscribeUpdate) ClearStartAt() *SubscribeUpdate {
	su.mutation.ClearStartAt()
	return su
}

// SetEndAt sets the "end_at" field.
func (su *SubscribeUpdate) SetEndAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetEndAt(t)
	return su
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEndAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetEndAt(*t)
	}
	return su
}

// ClearEndAt clears the value of the "end_at" field.
func (su *SubscribeUpdate) ClearEndAt() *SubscribeUpdate {
	su.mutation.ClearEndAt()
	return su
}

// SetRefundAt sets the "refund_at" field.
func (su *SubscribeUpdate) SetRefundAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetRefundAt(t)
	return su
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRefundAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetRefundAt(*t)
	}
	return su
}

// ClearRefundAt clears the value of the "refund_at" field.
func (su *SubscribeUpdate) ClearRefundAt() *SubscribeUpdate {
	su.mutation.ClearRefundAt()
	return su
}

// SetUnsubscribeReason sets the "unsubscribe_reason" field.
func (su *SubscribeUpdate) SetUnsubscribeReason(s string) *SubscribeUpdate {
	su.mutation.SetUnsubscribeReason(s)
	return su
}

// SetNillableUnsubscribeReason sets the "unsubscribe_reason" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableUnsubscribeReason(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetUnsubscribeReason(*s)
	}
	return su
}

// ClearUnsubscribeReason clears the value of the "unsubscribe_reason" field.
func (su *SubscribeUpdate) ClearUnsubscribeReason() *SubscribeUpdate {
	su.mutation.ClearUnsubscribeReason()
	return su
}

// SetLastBillDate sets the "last_bill_date" field.
func (su *SubscribeUpdate) SetLastBillDate(t time.Time) *SubscribeUpdate {
	su.mutation.SetLastBillDate(t)
	return su
}

// SetNillableLastBillDate sets the "last_bill_date" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableLastBillDate(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetLastBillDate(*t)
	}
	return su
}

// ClearLastBillDate clears the value of the "last_bill_date" field.
func (su *SubscribeUpdate) ClearLastBillDate() *SubscribeUpdate {
	su.mutation.ClearLastBillDate()
	return su
}

// SetPauseOverdue sets the "pause_overdue" field.
func (su *SubscribeUpdate) SetPauseOverdue(b bool) *SubscribeUpdate {
	su.mutation.SetPauseOverdue(b)
	return su
}

// SetNillablePauseOverdue sets the "pause_overdue" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePauseOverdue(b *bool) *SubscribeUpdate {
	if b != nil {
		su.SetPauseOverdue(*b)
	}
	return su
}

// SetAgentEndAt sets the "agent_end_at" field.
func (su *SubscribeUpdate) SetAgentEndAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetAgentEndAt(t)
	return su
}

// SetNillableAgentEndAt sets the "agent_end_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableAgentEndAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetAgentEndAt(*t)
	}
	return su
}

// ClearAgentEndAt clears the value of the "agent_end_at" field.
func (su *SubscribeUpdate) ClearAgentEndAt() *SubscribeUpdate {
	su.mutation.ClearAgentEndAt()
	return su
}

// SetFormula sets the "formula" field.
func (su *SubscribeUpdate) SetFormula(s string) *SubscribeUpdate {
	su.mutation.SetFormula(s)
	return su
}

// SetNillableFormula sets the "formula" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableFormula(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetFormula(*s)
	}
	return su
}

// ClearFormula clears the value of the "formula" field.
func (su *SubscribeUpdate) ClearFormula() *SubscribeUpdate {
	su.mutation.ClearFormula()
	return su
}

// SetNeedContract sets the "need_contract" field.
func (su *SubscribeUpdate) SetNeedContract(b bool) *SubscribeUpdate {
	su.mutation.SetNeedContract(b)
	return su
}

// SetNillableNeedContract sets the "need_contract" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableNeedContract(b *bool) *SubscribeUpdate {
	if b != nil {
		su.SetNeedContract(*b)
	}
	return su
}

// SetIntelligent sets the "intelligent" field.
func (su *SubscribeUpdate) SetIntelligent(b bool) *SubscribeUpdate {
	su.mutation.SetIntelligent(b)
	return su
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableIntelligent(b *bool) *SubscribeUpdate {
	if b != nil {
		su.SetIntelligent(*b)
	}
	return su
}

// SetAgreementHash sets the "agreement_hash" field.
func (su *SubscribeUpdate) SetAgreementHash(s string) *SubscribeUpdate {
	su.mutation.SetAgreementHash(s)
	return su
}

// SetNillableAgreementHash sets the "agreement_hash" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableAgreementHash(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetAgreementHash(*s)
	}
	return su
}

// ClearAgreementHash clears the value of the "agreement_hash" field.
func (su *SubscribeUpdate) ClearAgreementHash() *SubscribeUpdate {
	su.mutation.ClearAgreementHash()
	return su
}

// SetEnterprisePriceID sets the "enterprise_price_id" field.
func (su *SubscribeUpdate) SetEnterprisePriceID(u uint64) *SubscribeUpdate {
	su.mutation.SetEnterprisePriceID(u)
	return su
}

// SetNillableEnterprisePriceID sets the "enterprise_price_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEnterprisePriceID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetEnterprisePriceID(*u)
	}
	return su
}

// ClearEnterprisePriceID clears the value of the "enterprise_price_id" field.
func (su *SubscribeUpdate) ClearEnterprisePriceID() *SubscribeUpdate {
	su.mutation.ClearEnterprisePriceID()
	return su
}

// SetPlan sets the "plan" edge to the Plan entity.
func (su *SubscribeUpdate) SetPlan(p *Plan) *SubscribeUpdate {
	return su.SetPlanID(p.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (su *SubscribeUpdate) SetEmployee(e *Employee) *SubscribeUpdate {
	return su.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (su *SubscribeUpdate) SetCity(c *City) *SubscribeUpdate {
	return su.SetCityID(c.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (su *SubscribeUpdate) SetStation(e *EnterpriseStation) *SubscribeUpdate {
	return su.SetStationID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (su *SubscribeUpdate) SetStore(s *Store) *SubscribeUpdate {
	return su.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (su *SubscribeUpdate) SetCabinet(c *Cabinet) *SubscribeUpdate {
	return su.SetCabinetID(c.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (su *SubscribeUpdate) SetBrand(e *EbikeBrand) *SubscribeUpdate {
	return su.SetBrandID(e.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (su *SubscribeUpdate) SetEbike(e *Ebike) *SubscribeUpdate {
	return su.SetEbikeID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (su *SubscribeUpdate) SetRider(r *Rider) *SubscribeUpdate {
	return su.SetRiderID(r.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (su *SubscribeUpdate) SetEnterprise(e *Enterprise) *SubscribeUpdate {
	return su.SetEnterpriseID(e.ID)
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by IDs.
func (su *SubscribeUpdate) AddPauseIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddPauseIDs(ids...)
	return su
}

// AddPauses adds the "pauses" edges to the SubscribePause entity.
func (su *SubscribeUpdate) AddPauses(s ...*SubscribePause) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPauseIDs(ids...)
}

// AddSuspendIDs adds the "suspends" edge to the SubscribeSuspend entity by IDs.
func (su *SubscribeUpdate) AddSuspendIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddSuspendIDs(ids...)
	return su
}

// AddSuspends adds the "suspends" edges to the SubscribeSuspend entity.
func (su *SubscribeUpdate) AddSuspends(s ...*SubscribeSuspend) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSuspendIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by IDs.
func (su *SubscribeUpdate) AddAlterIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddAlterIDs(ids...)
	return su
}

// AddAlters adds the "alters" edges to the SubscribeAlter entity.
func (su *SubscribeUpdate) AddAlters(s ...*SubscribeAlter) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddAlterIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (su *SubscribeUpdate) AddOrderIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddOrderIDs(ids...)
	return su
}

// AddOrders adds the "orders" edges to the Order entity.
func (su *SubscribeUpdate) AddOrders(o ...*Order) *SubscribeUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddOrderIDs(ids...)
}

// SetInitialOrder sets the "initial_order" edge to the Order entity.
func (su *SubscribeUpdate) SetInitialOrder(o *Order) *SubscribeUpdate {
	return su.SetInitialOrderID(o.ID)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (su *SubscribeUpdate) AddBillIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddBillIDs(ids...)
	return su
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (su *SubscribeUpdate) AddBills(e ...*EnterpriseBill) *SubscribeUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddBillIDs(ids...)
}

// SetBatteryID sets the "battery" edge to the Battery entity by ID.
func (su *SubscribeUpdate) SetBatteryID(id uint64) *SubscribeUpdate {
	su.mutation.SetBatteryID(id)
	return su
}

// SetNillableBatteryID sets the "battery" edge to the Battery entity by ID if the given value is not nil.
func (su *SubscribeUpdate) SetNillableBatteryID(id *uint64) *SubscribeUpdate {
	if id != nil {
		su = su.SetBatteryID(*id)
	}
	return su
}

// SetBattery sets the "battery" edge to the Battery entity.
func (su *SubscribeUpdate) SetBattery(b *Battery) *SubscribeUpdate {
	return su.SetBatteryID(b.ID)
}

// SetEnterprisePrice sets the "enterprise_price" edge to the EnterprisePrice entity.
func (su *SubscribeUpdate) SetEnterprisePrice(e *EnterprisePrice) *SubscribeUpdate {
	return su.SetEnterprisePriceID(e.ID)
}

// Mutation returns the SubscribeMutation object of the builder.
func (su *SubscribeUpdate) Mutation() *SubscribeMutation {
	return su.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (su *SubscribeUpdate) ClearPlan() *SubscribeUpdate {
	su.mutation.ClearPlan()
	return su
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (su *SubscribeUpdate) ClearEmployee() *SubscribeUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearCity clears the "city" edge to the City entity.
func (su *SubscribeUpdate) ClearCity() *SubscribeUpdate {
	su.mutation.ClearCity()
	return su
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (su *SubscribeUpdate) ClearStation() *SubscribeUpdate {
	su.mutation.ClearStation()
	return su
}

// ClearStore clears the "store" edge to the Store entity.
func (su *SubscribeUpdate) ClearStore() *SubscribeUpdate {
	su.mutation.ClearStore()
	return su
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (su *SubscribeUpdate) ClearCabinet() *SubscribeUpdate {
	su.mutation.ClearCabinet()
	return su
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (su *SubscribeUpdate) ClearBrand() *SubscribeUpdate {
	su.mutation.ClearBrand()
	return su
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (su *SubscribeUpdate) ClearEbike() *SubscribeUpdate {
	su.mutation.ClearEbike()
	return su
}

// ClearRider clears the "rider" edge to the Rider entity.
func (su *SubscribeUpdate) ClearRider() *SubscribeUpdate {
	su.mutation.ClearRider()
	return su
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (su *SubscribeUpdate) ClearEnterprise() *SubscribeUpdate {
	su.mutation.ClearEnterprise()
	return su
}

// ClearPauses clears all "pauses" edges to the SubscribePause entity.
func (su *SubscribeUpdate) ClearPauses() *SubscribeUpdate {
	su.mutation.ClearPauses()
	return su
}

// RemovePauseIDs removes the "pauses" edge to SubscribePause entities by IDs.
func (su *SubscribeUpdate) RemovePauseIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemovePauseIDs(ids...)
	return su
}

// RemovePauses removes "pauses" edges to SubscribePause entities.
func (su *SubscribeUpdate) RemovePauses(s ...*SubscribePause) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePauseIDs(ids...)
}

// ClearSuspends clears all "suspends" edges to the SubscribeSuspend entity.
func (su *SubscribeUpdate) ClearSuspends() *SubscribeUpdate {
	su.mutation.ClearSuspends()
	return su
}

// RemoveSuspendIDs removes the "suspends" edge to SubscribeSuspend entities by IDs.
func (su *SubscribeUpdate) RemoveSuspendIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveSuspendIDs(ids...)
	return su
}

// RemoveSuspends removes "suspends" edges to SubscribeSuspend entities.
func (su *SubscribeUpdate) RemoveSuspends(s ...*SubscribeSuspend) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSuspendIDs(ids...)
}

// ClearAlters clears all "alters" edges to the SubscribeAlter entity.
func (su *SubscribeUpdate) ClearAlters() *SubscribeUpdate {
	su.mutation.ClearAlters()
	return su
}

// RemoveAlterIDs removes the "alters" edge to SubscribeAlter entities by IDs.
func (su *SubscribeUpdate) RemoveAlterIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveAlterIDs(ids...)
	return su
}

// RemoveAlters removes "alters" edges to SubscribeAlter entities.
func (su *SubscribeUpdate) RemoveAlters(s ...*SubscribeAlter) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveAlterIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (su *SubscribeUpdate) ClearOrders() *SubscribeUpdate {
	su.mutation.ClearOrders()
	return su
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (su *SubscribeUpdate) RemoveOrderIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveOrderIDs(ids...)
	return su
}

// RemoveOrders removes "orders" edges to Order entities.
func (su *SubscribeUpdate) RemoveOrders(o ...*Order) *SubscribeUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveOrderIDs(ids...)
}

// ClearInitialOrder clears the "initial_order" edge to the Order entity.
func (su *SubscribeUpdate) ClearInitialOrder() *SubscribeUpdate {
	su.mutation.ClearInitialOrder()
	return su
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (su *SubscribeUpdate) ClearBills() *SubscribeUpdate {
	su.mutation.ClearBills()
	return su
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (su *SubscribeUpdate) RemoveBillIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveBillIDs(ids...)
	return su
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (su *SubscribeUpdate) RemoveBills(e ...*EnterpriseBill) *SubscribeUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveBillIDs(ids...)
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (su *SubscribeUpdate) ClearBattery() *SubscribeUpdate {
	su.mutation.ClearBattery()
	return su
}

// ClearEnterprisePrice clears the "enterprise_price" edge to the EnterprisePrice entity.
func (su *SubscribeUpdate) ClearEnterprisePrice() *SubscribeUpdate {
	su.mutation.ClearEnterprisePrice()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscribeUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscribeUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscribeUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscribeUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscribeUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if subscribe.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscribeUpdate) check() error {
	if _, ok := su.mutation.CityID(); su.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.city"`)
	}
	if _, ok := su.mutation.RiderID(); su.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubscribeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubscribeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribe.Table, subscribe.Columns, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribe.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subscribe.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(subscribe.FieldDeletedAt, field.TypeTime)
	}
	if su.mutation.CreatorCleared() {
		_spec.ClearField(subscribe.FieldCreator, field.TypeJSON)
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.SetField(subscribe.FieldLastModifier, field.TypeJSON, value)
	}
	if su.mutation.LastModifierCleared() {
		_spec.ClearField(subscribe.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(subscribe.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(subscribe.FieldRemark, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscribe.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(subscribe.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.Model(); ok {
		_spec.SetField(subscribe.FieldModel, field.TypeString, value)
	}
	if value, ok := su.mutation.InitialDays(); ok {
		_spec.SetField(subscribe.FieldInitialDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedInitialDays(); ok {
		_spec.AddField(subscribe.FieldInitialDays, field.TypeInt, value)
	}
	if su.mutation.InitialDaysCleared() {
		_spec.ClearField(subscribe.FieldInitialDays, field.TypeInt)
	}
	if value, ok := su.mutation.AlterDays(); ok {
		_spec.SetField(subscribe.FieldAlterDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAlterDays(); ok {
		_spec.AddField(subscribe.FieldAlterDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.PauseDays(); ok {
		_spec.SetField(subscribe.FieldPauseDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedPauseDays(); ok {
		_spec.AddField(subscribe.FieldPauseDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.SuspendDays(); ok {
		_spec.SetField(subscribe.FieldSuspendDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedSuspendDays(); ok {
		_spec.AddField(subscribe.FieldSuspendDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.RenewalDays(); ok {
		_spec.SetField(subscribe.FieldRenewalDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedRenewalDays(); ok {
		_spec.AddField(subscribe.FieldRenewalDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.OverdueDays(); ok {
		_spec.SetField(subscribe.FieldOverdueDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedOverdueDays(); ok {
		_spec.AddField(subscribe.FieldOverdueDays, field.TypeInt, value)
	}
	if value, ok := su.mutation.Remaining(); ok {
		_spec.SetField(subscribe.FieldRemaining, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedRemaining(); ok {
		_spec.AddField(subscribe.FieldRemaining, field.TypeInt, value)
	}
	if value, ok := su.mutation.PausedAt(); ok {
		_spec.SetField(subscribe.FieldPausedAt, field.TypeTime, value)
	}
	if su.mutation.PausedAtCleared() {
		_spec.ClearField(subscribe.FieldPausedAt, field.TypeTime)
	}
	if value, ok := su.mutation.SuspendAt(); ok {
		_spec.SetField(subscribe.FieldSuspendAt, field.TypeTime, value)
	}
	if su.mutation.SuspendAtCleared() {
		_spec.ClearField(subscribe.FieldSuspendAt, field.TypeTime)
	}
	if value, ok := su.mutation.StartAt(); ok {
		_spec.SetField(subscribe.FieldStartAt, field.TypeTime, value)
	}
	if su.mutation.StartAtCleared() {
		_spec.ClearField(subscribe.FieldStartAt, field.TypeTime)
	}
	if value, ok := su.mutation.EndAt(); ok {
		_spec.SetField(subscribe.FieldEndAt, field.TypeTime, value)
	}
	if su.mutation.EndAtCleared() {
		_spec.ClearField(subscribe.FieldEndAt, field.TypeTime)
	}
	if value, ok := su.mutation.RefundAt(); ok {
		_spec.SetField(subscribe.FieldRefundAt, field.TypeTime, value)
	}
	if su.mutation.RefundAtCleared() {
		_spec.ClearField(subscribe.FieldRefundAt, field.TypeTime)
	}
	if value, ok := su.mutation.UnsubscribeReason(); ok {
		_spec.SetField(subscribe.FieldUnsubscribeReason, field.TypeString, value)
	}
	if su.mutation.UnsubscribeReasonCleared() {
		_spec.ClearField(subscribe.FieldUnsubscribeReason, field.TypeString)
	}
	if value, ok := su.mutation.LastBillDate(); ok {
		_spec.SetField(subscribe.FieldLastBillDate, field.TypeTime, value)
	}
	if su.mutation.LastBillDateCleared() {
		_spec.ClearField(subscribe.FieldLastBillDate, field.TypeTime)
	}
	if value, ok := su.mutation.PauseOverdue(); ok {
		_spec.SetField(subscribe.FieldPauseOverdue, field.TypeBool, value)
	}
	if value, ok := su.mutation.AgentEndAt(); ok {
		_spec.SetField(subscribe.FieldAgentEndAt, field.TypeTime, value)
	}
	if su.mutation.AgentEndAtCleared() {
		_spec.ClearField(subscribe.FieldAgentEndAt, field.TypeTime)
	}
	if value, ok := su.mutation.Formula(); ok {
		_spec.SetField(subscribe.FieldFormula, field.TypeString, value)
	}
	if su.mutation.FormulaCleared() {
		_spec.ClearField(subscribe.FieldFormula, field.TypeString)
	}
	if value, ok := su.mutation.NeedContract(); ok {
		_spec.SetField(subscribe.FieldNeedContract, field.TypeBool, value)
	}
	if value, ok := su.mutation.Intelligent(); ok {
		_spec.SetField(subscribe.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := su.mutation.AgreementHash(); ok {
		_spec.SetField(subscribe.FieldAgreementHash, field.TypeString, value)
	}
	if su.mutation.AgreementHashCleared() {
		_spec.ClearField(subscribe.FieldAgreementHash, field.TypeString)
	}
	if su.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CabinetTable,
			Columns: []string{subscribe.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CabinetTable,
			Columns: []string{subscribe.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.BrandTable,
			Columns: []string{subscribe.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.BrandTable,
			Columns: []string{subscribe.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EbikeTable,
			Columns: []string{subscribe.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EbikeTable,
			Columns: []string{subscribe.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPausesIDs(); len(nodes) > 0 && !su.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSuspendsIDs(); len(nodes) > 0 && !su.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SuspendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAltersIDs(); len(nodes) > 0 && !su.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InitialOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InitialOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBillsIDs(); len(nodes) > 0 && !su.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.BatteryTable,
			Columns: []string{subscribe.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.BatteryTable,
			Columns: []string{subscribe.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EnterprisePriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EnterprisePriceTable,
			Columns: []string{subscribe.EnterprisePriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EnterprisePriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EnterprisePriceTable,
			Columns: []string{subscribe.EnterprisePriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscribeUpdateOne is the builder for updating a single Subscribe entity.
type SubscribeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscribeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscribeUpdateOne) SetUpdatedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubscribeUpdateOne) SetDeletedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubscribeUpdateOne) ClearDeletedAt() *SubscribeUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *SubscribeUpdateOne) SetLastModifier(m *model.Modifier) *SubscribeUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *SubscribeUpdateOne) ClearLastModifier() *SubscribeUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *SubscribeUpdateOne) SetRemark(s string) *SubscribeUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRemark(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *SubscribeUpdateOne) ClearRemark() *SubscribeUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetPlanID sets the "plan_id" field.
func (suo *SubscribeUpdateOne) SetPlanID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetPlanID(u)
	return suo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePlanID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetPlanID(*u)
	}
	return suo
}

// ClearPlanID clears the value of the "plan_id" field.
func (suo *SubscribeUpdateOne) ClearPlanID() *SubscribeUpdateOne {
	suo.mutation.ClearPlanID()
	return suo
}

// SetEmployeeID sets the "employee_id" field.
func (suo *SubscribeUpdateOne) SetEmployeeID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetEmployeeID(u)
	return suo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEmployeeID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetEmployeeID(*u)
	}
	return suo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (suo *SubscribeUpdateOne) ClearEmployeeID() *SubscribeUpdateOne {
	suo.mutation.ClearEmployeeID()
	return suo
}

// SetCityID sets the "city_id" field.
func (suo *SubscribeUpdateOne) SetCityID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetCityID(u)
	return suo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableCityID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetCityID(*u)
	}
	return suo
}

// SetStationID sets the "station_id" field.
func (suo *SubscribeUpdateOne) SetStationID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetStationID(u)
	return suo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableStationID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetStationID(*u)
	}
	return suo
}

// ClearStationID clears the value of the "station_id" field.
func (suo *SubscribeUpdateOne) ClearStationID() *SubscribeUpdateOne {
	suo.mutation.ClearStationID()
	return suo
}

// SetStoreID sets the "store_id" field.
func (suo *SubscribeUpdateOne) SetStoreID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetStoreID(u)
	return suo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableStoreID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetStoreID(*u)
	}
	return suo
}

// ClearStoreID clears the value of the "store_id" field.
func (suo *SubscribeUpdateOne) ClearStoreID() *SubscribeUpdateOne {
	suo.mutation.ClearStoreID()
	return suo
}

// SetCabinetID sets the "cabinet_id" field.
func (suo *SubscribeUpdateOne) SetCabinetID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetCabinetID(u)
	return suo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableCabinetID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetCabinetID(*u)
	}
	return suo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (suo *SubscribeUpdateOne) ClearCabinetID() *SubscribeUpdateOne {
	suo.mutation.ClearCabinetID()
	return suo
}

// SetBrandID sets the "brand_id" field.
func (suo *SubscribeUpdateOne) SetBrandID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetBrandID(u)
	return suo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableBrandID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetBrandID(*u)
	}
	return suo
}

// ClearBrandID clears the value of the "brand_id" field.
func (suo *SubscribeUpdateOne) ClearBrandID() *SubscribeUpdateOne {
	suo.mutation.ClearBrandID()
	return suo
}

// SetEbikeID sets the "ebike_id" field.
func (suo *SubscribeUpdateOne) SetEbikeID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetEbikeID(u)
	return suo
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEbikeID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetEbikeID(*u)
	}
	return suo
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (suo *SubscribeUpdateOne) ClearEbikeID() *SubscribeUpdateOne {
	suo.mutation.ClearEbikeID()
	return suo
}

// SetRiderID sets the "rider_id" field.
func (suo *SubscribeUpdateOne) SetRiderID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetRiderID(u)
	return suo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRiderID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetRiderID(*u)
	}
	return suo
}

// SetInitialOrderID sets the "initial_order_id" field.
func (suo *SubscribeUpdateOne) SetInitialOrderID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetInitialOrderID(u)
	return suo
}

// SetNillableInitialOrderID sets the "initial_order_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableInitialOrderID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetInitialOrderID(*u)
	}
	return suo
}

// ClearInitialOrderID clears the value of the "initial_order_id" field.
func (suo *SubscribeUpdateOne) ClearInitialOrderID() *SubscribeUpdateOne {
	suo.mutation.ClearInitialOrderID()
	return suo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (suo *SubscribeUpdateOne) SetEnterpriseID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetEnterpriseID(u)
	return suo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEnterpriseID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetEnterpriseID(*u)
	}
	return suo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (suo *SubscribeUpdateOne) ClearEnterpriseID() *SubscribeUpdateOne {
	suo.mutation.ClearEnterpriseID()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscribeUpdateOne) SetStatus(u uint8) *SubscribeUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableStatus(u *uint8) *SubscribeUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *SubscribeUpdateOne) AddStatus(u int8) *SubscribeUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// SetModel sets the "model" field.
func (suo *SubscribeUpdateOne) SetModel(s string) *SubscribeUpdateOne {
	suo.mutation.SetModel(s)
	return suo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableModel(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetModel(*s)
	}
	return suo
}

// SetInitialDays sets the "initial_days" field.
func (suo *SubscribeUpdateOne) SetInitialDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetInitialDays()
	suo.mutation.SetInitialDays(i)
	return suo
}

// SetNillableInitialDays sets the "initial_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableInitialDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetInitialDays(*i)
	}
	return suo
}

// AddInitialDays adds i to the "initial_days" field.
func (suo *SubscribeUpdateOne) AddInitialDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddInitialDays(i)
	return suo
}

// ClearInitialDays clears the value of the "initial_days" field.
func (suo *SubscribeUpdateOne) ClearInitialDays() *SubscribeUpdateOne {
	suo.mutation.ClearInitialDays()
	return suo
}

// SetAlterDays sets the "alter_days" field.
func (suo *SubscribeUpdateOne) SetAlterDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetAlterDays()
	suo.mutation.SetAlterDays(i)
	return suo
}

// SetNillableAlterDays sets the "alter_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableAlterDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetAlterDays(*i)
	}
	return suo
}

// AddAlterDays adds i to the "alter_days" field.
func (suo *SubscribeUpdateOne) AddAlterDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddAlterDays(i)
	return suo
}

// SetPauseDays sets the "pause_days" field.
func (suo *SubscribeUpdateOne) SetPauseDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetPauseDays()
	suo.mutation.SetPauseDays(i)
	return suo
}

// SetNillablePauseDays sets the "pause_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePauseDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetPauseDays(*i)
	}
	return suo
}

// AddPauseDays adds i to the "pause_days" field.
func (suo *SubscribeUpdateOne) AddPauseDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddPauseDays(i)
	return suo
}

// SetSuspendDays sets the "suspend_days" field.
func (suo *SubscribeUpdateOne) SetSuspendDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetSuspendDays()
	suo.mutation.SetSuspendDays(i)
	return suo
}

// SetNillableSuspendDays sets the "suspend_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableSuspendDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetSuspendDays(*i)
	}
	return suo
}

// AddSuspendDays adds i to the "suspend_days" field.
func (suo *SubscribeUpdateOne) AddSuspendDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddSuspendDays(i)
	return suo
}

// SetRenewalDays sets the "renewal_days" field.
func (suo *SubscribeUpdateOne) SetRenewalDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetRenewalDays()
	suo.mutation.SetRenewalDays(i)
	return suo
}

// SetNillableRenewalDays sets the "renewal_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRenewalDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetRenewalDays(*i)
	}
	return suo
}

// AddRenewalDays adds i to the "renewal_days" field.
func (suo *SubscribeUpdateOne) AddRenewalDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddRenewalDays(i)
	return suo
}

// SetOverdueDays sets the "overdue_days" field.
func (suo *SubscribeUpdateOne) SetOverdueDays(i int) *SubscribeUpdateOne {
	suo.mutation.ResetOverdueDays()
	suo.mutation.SetOverdueDays(i)
	return suo
}

// SetNillableOverdueDays sets the "overdue_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableOverdueDays(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetOverdueDays(*i)
	}
	return suo
}

// AddOverdueDays adds i to the "overdue_days" field.
func (suo *SubscribeUpdateOne) AddOverdueDays(i int) *SubscribeUpdateOne {
	suo.mutation.AddOverdueDays(i)
	return suo
}

// SetRemaining sets the "remaining" field.
func (suo *SubscribeUpdateOne) SetRemaining(i int) *SubscribeUpdateOne {
	suo.mutation.ResetRemaining()
	suo.mutation.SetRemaining(i)
	return suo
}

// SetNillableRemaining sets the "remaining" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRemaining(i *int) *SubscribeUpdateOne {
	if i != nil {
		suo.SetRemaining(*i)
	}
	return suo
}

// AddRemaining adds i to the "remaining" field.
func (suo *SubscribeUpdateOne) AddRemaining(i int) *SubscribeUpdateOne {
	suo.mutation.AddRemaining(i)
	return suo
}

// SetPausedAt sets the "paused_at" field.
func (suo *SubscribeUpdateOne) SetPausedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetPausedAt(t)
	return suo
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePausedAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetPausedAt(*t)
	}
	return suo
}

// ClearPausedAt clears the value of the "paused_at" field.
func (suo *SubscribeUpdateOne) ClearPausedAt() *SubscribeUpdateOne {
	suo.mutation.ClearPausedAt()
	return suo
}

// SetSuspendAt sets the "suspend_at" field.
func (suo *SubscribeUpdateOne) SetSuspendAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetSuspendAt(t)
	return suo
}

// SetNillableSuspendAt sets the "suspend_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableSuspendAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetSuspendAt(*t)
	}
	return suo
}

// ClearSuspendAt clears the value of the "suspend_at" field.
func (suo *SubscribeUpdateOne) ClearSuspendAt() *SubscribeUpdateOne {
	suo.mutation.ClearSuspendAt()
	return suo
}

// SetStartAt sets the "start_at" field.
func (suo *SubscribeUpdateOne) SetStartAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetStartAt(t)
	return suo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableStartAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetStartAt(*t)
	}
	return suo
}

// ClearStartAt clears the value of the "start_at" field.
func (suo *SubscribeUpdateOne) ClearStartAt() *SubscribeUpdateOne {
	suo.mutation.ClearStartAt()
	return suo
}

// SetEndAt sets the "end_at" field.
func (suo *SubscribeUpdateOne) SetEndAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetEndAt(t)
	return suo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEndAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetEndAt(*t)
	}
	return suo
}

// ClearEndAt clears the value of the "end_at" field.
func (suo *SubscribeUpdateOne) ClearEndAt() *SubscribeUpdateOne {
	suo.mutation.ClearEndAt()
	return suo
}

// SetRefundAt sets the "refund_at" field.
func (suo *SubscribeUpdateOne) SetRefundAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetRefundAt(t)
	return suo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRefundAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetRefundAt(*t)
	}
	return suo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (suo *SubscribeUpdateOne) ClearRefundAt() *SubscribeUpdateOne {
	suo.mutation.ClearRefundAt()
	return suo
}

// SetUnsubscribeReason sets the "unsubscribe_reason" field.
func (suo *SubscribeUpdateOne) SetUnsubscribeReason(s string) *SubscribeUpdateOne {
	suo.mutation.SetUnsubscribeReason(s)
	return suo
}

// SetNillableUnsubscribeReason sets the "unsubscribe_reason" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableUnsubscribeReason(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetUnsubscribeReason(*s)
	}
	return suo
}

// ClearUnsubscribeReason clears the value of the "unsubscribe_reason" field.
func (suo *SubscribeUpdateOne) ClearUnsubscribeReason() *SubscribeUpdateOne {
	suo.mutation.ClearUnsubscribeReason()
	return suo
}

// SetLastBillDate sets the "last_bill_date" field.
func (suo *SubscribeUpdateOne) SetLastBillDate(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetLastBillDate(t)
	return suo
}

// SetNillableLastBillDate sets the "last_bill_date" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableLastBillDate(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetLastBillDate(*t)
	}
	return suo
}

// ClearLastBillDate clears the value of the "last_bill_date" field.
func (suo *SubscribeUpdateOne) ClearLastBillDate() *SubscribeUpdateOne {
	suo.mutation.ClearLastBillDate()
	return suo
}

// SetPauseOverdue sets the "pause_overdue" field.
func (suo *SubscribeUpdateOne) SetPauseOverdue(b bool) *SubscribeUpdateOne {
	suo.mutation.SetPauseOverdue(b)
	return suo
}

// SetNillablePauseOverdue sets the "pause_overdue" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePauseOverdue(b *bool) *SubscribeUpdateOne {
	if b != nil {
		suo.SetPauseOverdue(*b)
	}
	return suo
}

// SetAgentEndAt sets the "agent_end_at" field.
func (suo *SubscribeUpdateOne) SetAgentEndAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetAgentEndAt(t)
	return suo
}

// SetNillableAgentEndAt sets the "agent_end_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableAgentEndAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetAgentEndAt(*t)
	}
	return suo
}

// ClearAgentEndAt clears the value of the "agent_end_at" field.
func (suo *SubscribeUpdateOne) ClearAgentEndAt() *SubscribeUpdateOne {
	suo.mutation.ClearAgentEndAt()
	return suo
}

// SetFormula sets the "formula" field.
func (suo *SubscribeUpdateOne) SetFormula(s string) *SubscribeUpdateOne {
	suo.mutation.SetFormula(s)
	return suo
}

// SetNillableFormula sets the "formula" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableFormula(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetFormula(*s)
	}
	return suo
}

// ClearFormula clears the value of the "formula" field.
func (suo *SubscribeUpdateOne) ClearFormula() *SubscribeUpdateOne {
	suo.mutation.ClearFormula()
	return suo
}

// SetNeedContract sets the "need_contract" field.
func (suo *SubscribeUpdateOne) SetNeedContract(b bool) *SubscribeUpdateOne {
	suo.mutation.SetNeedContract(b)
	return suo
}

// SetNillableNeedContract sets the "need_contract" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableNeedContract(b *bool) *SubscribeUpdateOne {
	if b != nil {
		suo.SetNeedContract(*b)
	}
	return suo
}

// SetIntelligent sets the "intelligent" field.
func (suo *SubscribeUpdateOne) SetIntelligent(b bool) *SubscribeUpdateOne {
	suo.mutation.SetIntelligent(b)
	return suo
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableIntelligent(b *bool) *SubscribeUpdateOne {
	if b != nil {
		suo.SetIntelligent(*b)
	}
	return suo
}

// SetAgreementHash sets the "agreement_hash" field.
func (suo *SubscribeUpdateOne) SetAgreementHash(s string) *SubscribeUpdateOne {
	suo.mutation.SetAgreementHash(s)
	return suo
}

// SetNillableAgreementHash sets the "agreement_hash" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableAgreementHash(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetAgreementHash(*s)
	}
	return suo
}

// ClearAgreementHash clears the value of the "agreement_hash" field.
func (suo *SubscribeUpdateOne) ClearAgreementHash() *SubscribeUpdateOne {
	suo.mutation.ClearAgreementHash()
	return suo
}

// SetEnterprisePriceID sets the "enterprise_price_id" field.
func (suo *SubscribeUpdateOne) SetEnterprisePriceID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetEnterprisePriceID(u)
	return suo
}

// SetNillableEnterprisePriceID sets the "enterprise_price_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEnterprisePriceID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetEnterprisePriceID(*u)
	}
	return suo
}

// ClearEnterprisePriceID clears the value of the "enterprise_price_id" field.
func (suo *SubscribeUpdateOne) ClearEnterprisePriceID() *SubscribeUpdateOne {
	suo.mutation.ClearEnterprisePriceID()
	return suo
}

// SetPlan sets the "plan" edge to the Plan entity.
func (suo *SubscribeUpdateOne) SetPlan(p *Plan) *SubscribeUpdateOne {
	return suo.SetPlanID(p.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (suo *SubscribeUpdateOne) SetEmployee(e *Employee) *SubscribeUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (suo *SubscribeUpdateOne) SetCity(c *City) *SubscribeUpdateOne {
	return suo.SetCityID(c.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (suo *SubscribeUpdateOne) SetStation(e *EnterpriseStation) *SubscribeUpdateOne {
	return suo.SetStationID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (suo *SubscribeUpdateOne) SetStore(s *Store) *SubscribeUpdateOne {
	return suo.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (suo *SubscribeUpdateOne) SetCabinet(c *Cabinet) *SubscribeUpdateOne {
	return suo.SetCabinetID(c.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (suo *SubscribeUpdateOne) SetBrand(e *EbikeBrand) *SubscribeUpdateOne {
	return suo.SetBrandID(e.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (suo *SubscribeUpdateOne) SetEbike(e *Ebike) *SubscribeUpdateOne {
	return suo.SetEbikeID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (suo *SubscribeUpdateOne) SetRider(r *Rider) *SubscribeUpdateOne {
	return suo.SetRiderID(r.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (suo *SubscribeUpdateOne) SetEnterprise(e *Enterprise) *SubscribeUpdateOne {
	return suo.SetEnterpriseID(e.ID)
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by IDs.
func (suo *SubscribeUpdateOne) AddPauseIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddPauseIDs(ids...)
	return suo
}

// AddPauses adds the "pauses" edges to the SubscribePause entity.
func (suo *SubscribeUpdateOne) AddPauses(s ...*SubscribePause) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPauseIDs(ids...)
}

// AddSuspendIDs adds the "suspends" edge to the SubscribeSuspend entity by IDs.
func (suo *SubscribeUpdateOne) AddSuspendIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddSuspendIDs(ids...)
	return suo
}

// AddSuspends adds the "suspends" edges to the SubscribeSuspend entity.
func (suo *SubscribeUpdateOne) AddSuspends(s ...*SubscribeSuspend) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSuspendIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by IDs.
func (suo *SubscribeUpdateOne) AddAlterIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddAlterIDs(ids...)
	return suo
}

// AddAlters adds the "alters" edges to the SubscribeAlter entity.
func (suo *SubscribeUpdateOne) AddAlters(s ...*SubscribeAlter) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddAlterIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (suo *SubscribeUpdateOne) AddOrderIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddOrderIDs(ids...)
	return suo
}

// AddOrders adds the "orders" edges to the Order entity.
func (suo *SubscribeUpdateOne) AddOrders(o ...*Order) *SubscribeUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddOrderIDs(ids...)
}

// SetInitialOrder sets the "initial_order" edge to the Order entity.
func (suo *SubscribeUpdateOne) SetInitialOrder(o *Order) *SubscribeUpdateOne {
	return suo.SetInitialOrderID(o.ID)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (suo *SubscribeUpdateOne) AddBillIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddBillIDs(ids...)
	return suo
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (suo *SubscribeUpdateOne) AddBills(e ...*EnterpriseBill) *SubscribeUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddBillIDs(ids...)
}

// SetBatteryID sets the "battery" edge to the Battery entity by ID.
func (suo *SubscribeUpdateOne) SetBatteryID(id uint64) *SubscribeUpdateOne {
	suo.mutation.SetBatteryID(id)
	return suo
}

// SetNillableBatteryID sets the "battery" edge to the Battery entity by ID if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableBatteryID(id *uint64) *SubscribeUpdateOne {
	if id != nil {
		suo = suo.SetBatteryID(*id)
	}
	return suo
}

// SetBattery sets the "battery" edge to the Battery entity.
func (suo *SubscribeUpdateOne) SetBattery(b *Battery) *SubscribeUpdateOne {
	return suo.SetBatteryID(b.ID)
}

// SetEnterprisePrice sets the "enterprise_price" edge to the EnterprisePrice entity.
func (suo *SubscribeUpdateOne) SetEnterprisePrice(e *EnterprisePrice) *SubscribeUpdateOne {
	return suo.SetEnterprisePriceID(e.ID)
}

// Mutation returns the SubscribeMutation object of the builder.
func (suo *SubscribeUpdateOne) Mutation() *SubscribeMutation {
	return suo.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (suo *SubscribeUpdateOne) ClearPlan() *SubscribeUpdateOne {
	suo.mutation.ClearPlan()
	return suo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (suo *SubscribeUpdateOne) ClearEmployee() *SubscribeUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearCity clears the "city" edge to the City entity.
func (suo *SubscribeUpdateOne) ClearCity() *SubscribeUpdateOne {
	suo.mutation.ClearCity()
	return suo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (suo *SubscribeUpdateOne) ClearStation() *SubscribeUpdateOne {
	suo.mutation.ClearStation()
	return suo
}

// ClearStore clears the "store" edge to the Store entity.
func (suo *SubscribeUpdateOne) ClearStore() *SubscribeUpdateOne {
	suo.mutation.ClearStore()
	return suo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (suo *SubscribeUpdateOne) ClearCabinet() *SubscribeUpdateOne {
	suo.mutation.ClearCabinet()
	return suo
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (suo *SubscribeUpdateOne) ClearBrand() *SubscribeUpdateOne {
	suo.mutation.ClearBrand()
	return suo
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (suo *SubscribeUpdateOne) ClearEbike() *SubscribeUpdateOne {
	suo.mutation.ClearEbike()
	return suo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (suo *SubscribeUpdateOne) ClearRider() *SubscribeUpdateOne {
	suo.mutation.ClearRider()
	return suo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (suo *SubscribeUpdateOne) ClearEnterprise() *SubscribeUpdateOne {
	suo.mutation.ClearEnterprise()
	return suo
}

// ClearPauses clears all "pauses" edges to the SubscribePause entity.
func (suo *SubscribeUpdateOne) ClearPauses() *SubscribeUpdateOne {
	suo.mutation.ClearPauses()
	return suo
}

// RemovePauseIDs removes the "pauses" edge to SubscribePause entities by IDs.
func (suo *SubscribeUpdateOne) RemovePauseIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemovePauseIDs(ids...)
	return suo
}

// RemovePauses removes "pauses" edges to SubscribePause entities.
func (suo *SubscribeUpdateOne) RemovePauses(s ...*SubscribePause) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePauseIDs(ids...)
}

// ClearSuspends clears all "suspends" edges to the SubscribeSuspend entity.
func (suo *SubscribeUpdateOne) ClearSuspends() *SubscribeUpdateOne {
	suo.mutation.ClearSuspends()
	return suo
}

// RemoveSuspendIDs removes the "suspends" edge to SubscribeSuspend entities by IDs.
func (suo *SubscribeUpdateOne) RemoveSuspendIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveSuspendIDs(ids...)
	return suo
}

// RemoveSuspends removes "suspends" edges to SubscribeSuspend entities.
func (suo *SubscribeUpdateOne) RemoveSuspends(s ...*SubscribeSuspend) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSuspendIDs(ids...)
}

// ClearAlters clears all "alters" edges to the SubscribeAlter entity.
func (suo *SubscribeUpdateOne) ClearAlters() *SubscribeUpdateOne {
	suo.mutation.ClearAlters()
	return suo
}

// RemoveAlterIDs removes the "alters" edge to SubscribeAlter entities by IDs.
func (suo *SubscribeUpdateOne) RemoveAlterIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveAlterIDs(ids...)
	return suo
}

// RemoveAlters removes "alters" edges to SubscribeAlter entities.
func (suo *SubscribeUpdateOne) RemoveAlters(s ...*SubscribeAlter) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveAlterIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (suo *SubscribeUpdateOne) ClearOrders() *SubscribeUpdateOne {
	suo.mutation.ClearOrders()
	return suo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (suo *SubscribeUpdateOne) RemoveOrderIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveOrderIDs(ids...)
	return suo
}

// RemoveOrders removes "orders" edges to Order entities.
func (suo *SubscribeUpdateOne) RemoveOrders(o ...*Order) *SubscribeUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveOrderIDs(ids...)
}

// ClearInitialOrder clears the "initial_order" edge to the Order entity.
func (suo *SubscribeUpdateOne) ClearInitialOrder() *SubscribeUpdateOne {
	suo.mutation.ClearInitialOrder()
	return suo
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (suo *SubscribeUpdateOne) ClearBills() *SubscribeUpdateOne {
	suo.mutation.ClearBills()
	return suo
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (suo *SubscribeUpdateOne) RemoveBillIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveBillIDs(ids...)
	return suo
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (suo *SubscribeUpdateOne) RemoveBills(e ...*EnterpriseBill) *SubscribeUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveBillIDs(ids...)
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (suo *SubscribeUpdateOne) ClearBattery() *SubscribeUpdateOne {
	suo.mutation.ClearBattery()
	return suo
}

// ClearEnterprisePrice clears the "enterprise_price" edge to the EnterprisePrice entity.
func (suo *SubscribeUpdateOne) ClearEnterprisePrice() *SubscribeUpdateOne {
	suo.mutation.ClearEnterprisePrice()
	return suo
}

// Where appends a list predicates to the SubscribeUpdate builder.
func (suo *SubscribeUpdateOne) Where(ps ...predicate.Subscribe) *SubscribeUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscribeUpdateOne) Select(field string, fields ...string) *SubscribeUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscribe entity.
func (suo *SubscribeUpdateOne) Save(ctx context.Context) (*Subscribe, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscribeUpdateOne) SaveX(ctx context.Context) *Subscribe {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscribeUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscribeUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscribeUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if subscribe.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscribeUpdateOne) check() error {
	if _, ok := suo.mutation.CityID(); suo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.city"`)
	}
	if _, ok := suo.mutation.RiderID(); suo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubscribeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubscribeUpdateOne) sqlSave(ctx context.Context) (_node *Subscribe, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribe.Table, subscribe.Columns, sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscribe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribe.FieldID)
		for _, f := range fields {
			if !subscribe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribe.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subscribe.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscribe.FieldDeletedAt, field.TypeTime)
	}
	if suo.mutation.CreatorCleared() {
		_spec.ClearField(subscribe.FieldCreator, field.TypeJSON)
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.SetField(subscribe.FieldLastModifier, field.TypeJSON, value)
	}
	if suo.mutation.LastModifierCleared() {
		_spec.ClearField(subscribe.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(subscribe.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(subscribe.FieldRemark, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscribe.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(subscribe.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.Model(); ok {
		_spec.SetField(subscribe.FieldModel, field.TypeString, value)
	}
	if value, ok := suo.mutation.InitialDays(); ok {
		_spec.SetField(subscribe.FieldInitialDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedInitialDays(); ok {
		_spec.AddField(subscribe.FieldInitialDays, field.TypeInt, value)
	}
	if suo.mutation.InitialDaysCleared() {
		_spec.ClearField(subscribe.FieldInitialDays, field.TypeInt)
	}
	if value, ok := suo.mutation.AlterDays(); ok {
		_spec.SetField(subscribe.FieldAlterDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAlterDays(); ok {
		_spec.AddField(subscribe.FieldAlterDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.PauseDays(); ok {
		_spec.SetField(subscribe.FieldPauseDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedPauseDays(); ok {
		_spec.AddField(subscribe.FieldPauseDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.SuspendDays(); ok {
		_spec.SetField(subscribe.FieldSuspendDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedSuspendDays(); ok {
		_spec.AddField(subscribe.FieldSuspendDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.RenewalDays(); ok {
		_spec.SetField(subscribe.FieldRenewalDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedRenewalDays(); ok {
		_spec.AddField(subscribe.FieldRenewalDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.OverdueDays(); ok {
		_spec.SetField(subscribe.FieldOverdueDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedOverdueDays(); ok {
		_spec.AddField(subscribe.FieldOverdueDays, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Remaining(); ok {
		_spec.SetField(subscribe.FieldRemaining, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedRemaining(); ok {
		_spec.AddField(subscribe.FieldRemaining, field.TypeInt, value)
	}
	if value, ok := suo.mutation.PausedAt(); ok {
		_spec.SetField(subscribe.FieldPausedAt, field.TypeTime, value)
	}
	if suo.mutation.PausedAtCleared() {
		_spec.ClearField(subscribe.FieldPausedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.SuspendAt(); ok {
		_spec.SetField(subscribe.FieldSuspendAt, field.TypeTime, value)
	}
	if suo.mutation.SuspendAtCleared() {
		_spec.ClearField(subscribe.FieldSuspendAt, field.TypeTime)
	}
	if value, ok := suo.mutation.StartAt(); ok {
		_spec.SetField(subscribe.FieldStartAt, field.TypeTime, value)
	}
	if suo.mutation.StartAtCleared() {
		_spec.ClearField(subscribe.FieldStartAt, field.TypeTime)
	}
	if value, ok := suo.mutation.EndAt(); ok {
		_spec.SetField(subscribe.FieldEndAt, field.TypeTime, value)
	}
	if suo.mutation.EndAtCleared() {
		_spec.ClearField(subscribe.FieldEndAt, field.TypeTime)
	}
	if value, ok := suo.mutation.RefundAt(); ok {
		_spec.SetField(subscribe.FieldRefundAt, field.TypeTime, value)
	}
	if suo.mutation.RefundAtCleared() {
		_spec.ClearField(subscribe.FieldRefundAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UnsubscribeReason(); ok {
		_spec.SetField(subscribe.FieldUnsubscribeReason, field.TypeString, value)
	}
	if suo.mutation.UnsubscribeReasonCleared() {
		_spec.ClearField(subscribe.FieldUnsubscribeReason, field.TypeString)
	}
	if value, ok := suo.mutation.LastBillDate(); ok {
		_spec.SetField(subscribe.FieldLastBillDate, field.TypeTime, value)
	}
	if suo.mutation.LastBillDateCleared() {
		_spec.ClearField(subscribe.FieldLastBillDate, field.TypeTime)
	}
	if value, ok := suo.mutation.PauseOverdue(); ok {
		_spec.SetField(subscribe.FieldPauseOverdue, field.TypeBool, value)
	}
	if value, ok := suo.mutation.AgentEndAt(); ok {
		_spec.SetField(subscribe.FieldAgentEndAt, field.TypeTime, value)
	}
	if suo.mutation.AgentEndAtCleared() {
		_spec.ClearField(subscribe.FieldAgentEndAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Formula(); ok {
		_spec.SetField(subscribe.FieldFormula, field.TypeString, value)
	}
	if suo.mutation.FormulaCleared() {
		_spec.ClearField(subscribe.FieldFormula, field.TypeString)
	}
	if value, ok := suo.mutation.NeedContract(); ok {
		_spec.SetField(subscribe.FieldNeedContract, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Intelligent(); ok {
		_spec.SetField(subscribe.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := suo.mutation.AgreementHash(); ok {
		_spec.SetField(subscribe.FieldAgreementHash, field.TypeString, value)
	}
	if suo.mutation.AgreementHashCleared() {
		_spec.ClearField(subscribe.FieldAgreementHash, field.TypeString)
	}
	if suo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StationTable,
			Columns: []string{subscribe.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.StoreTable,
			Columns: []string{subscribe.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CabinetTable,
			Columns: []string{subscribe.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CabinetTable,
			Columns: []string{subscribe.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.BrandTable,
			Columns: []string{subscribe.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.BrandTable,
			Columns: []string{subscribe.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EbikeTable,
			Columns: []string{subscribe.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EbikeTable,
			Columns: []string{subscribe.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.EnterpriseTable,
			Columns: []string{subscribe.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPausesIDs(); len(nodes) > 0 && !suo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSuspendsIDs(); len(nodes) > 0 && !suo.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SuspendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.SuspendsTable,
			Columns: []string{subscribe.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAltersIDs(); len(nodes) > 0 && !suo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InitialOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InitialOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !suo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.BillsTable,
			Columns: []string{subscribe.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisebill.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.BatteryTable,
			Columns: []string{subscribe.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subscribe.BatteryTable,
			Columns: []string{subscribe.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EnterprisePriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EnterprisePriceTable,
			Columns: []string{subscribe.EnterprisePriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EnterprisePriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EnterprisePriceTable,
			Columns: []string{subscribe.EnterprisePriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subscribe{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
