// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribeUpdate is the builder for updating Subscribe entities.
type SubscribeUpdate struct {
	config
	hooks    []Hook
	mutation *SubscribeMutation
}

// Where appends a list predicates to the SubscribeUpdate builder.
func (su *SubscribeUpdate) Where(ps ...predicate.Subscribe) *SubscribeUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscribeUpdate) SetUpdatedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubscribeUpdate) SetDeletedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableDeletedAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubscribeUpdate) ClearDeletedAt() *SubscribeUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *SubscribeUpdate) SetLastModifier(m *model.Modifier) *SubscribeUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *SubscribeUpdate) ClearLastModifier() *SubscribeUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *SubscribeUpdate) SetRemark(s string) *SubscribeUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRemark(s *string) *SubscribeUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *SubscribeUpdate) ClearRemark() *SubscribeUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetPlanID sets the "plan_id" field.
func (su *SubscribeUpdate) SetPlanID(u uint64) *SubscribeUpdate {
	su.mutation.SetPlanID(u)
	return su
}

// SetEmployeeID sets the "employee_id" field.
func (su *SubscribeUpdate) SetEmployeeID(u uint64) *SubscribeUpdate {
	su.mutation.SetEmployeeID(u)
	return su
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEmployeeID(u *uint64) *SubscribeUpdate {
	if u != nil {
		su.SetEmployeeID(*u)
	}
	return su
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (su *SubscribeUpdate) ClearEmployeeID() *SubscribeUpdate {
	su.mutation.ClearEmployeeID()
	return su
}

// SetCityID sets the "city_id" field.
func (su *SubscribeUpdate) SetCityID(u uint64) *SubscribeUpdate {
	su.mutation.SetCityID(u)
	return su
}

// SetRiderID sets the "rider_id" field.
func (su *SubscribeUpdate) SetRiderID(u uint64) *SubscribeUpdate {
	su.mutation.SetRiderID(u)
	return su
}

// SetInitialOrderID sets the "initial_order_id" field.
func (su *SubscribeUpdate) SetInitialOrderID(u uint64) *SubscribeUpdate {
	su.mutation.SetInitialOrderID(u)
	return su
}

// SetVoltage sets the "voltage" field.
func (su *SubscribeUpdate) SetVoltage(f float64) *SubscribeUpdate {
	su.mutation.ResetVoltage()
	su.mutation.SetVoltage(f)
	return su
}

// AddVoltage adds f to the "voltage" field.
func (su *SubscribeUpdate) AddVoltage(f float64) *SubscribeUpdate {
	su.mutation.AddVoltage(f)
	return su
}

// SetDays sets the "days" field.
func (su *SubscribeUpdate) SetDays(u uint) *SubscribeUpdate {
	su.mutation.ResetDays()
	su.mutation.SetDays(u)
	return su
}

// AddDays adds u to the "days" field.
func (su *SubscribeUpdate) AddDays(u int) *SubscribeUpdate {
	su.mutation.AddDays(u)
	return su
}

// SetAlterDays sets the "alter_days" field.
func (su *SubscribeUpdate) SetAlterDays(u uint) *SubscribeUpdate {
	su.mutation.ResetAlterDays()
	su.mutation.SetAlterDays(u)
	return su
}

// SetNillableAlterDays sets the "alter_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableAlterDays(u *uint) *SubscribeUpdate {
	if u != nil {
		su.SetAlterDays(*u)
	}
	return su
}

// AddAlterDays adds u to the "alter_days" field.
func (su *SubscribeUpdate) AddAlterDays(u int) *SubscribeUpdate {
	su.mutation.AddAlterDays(u)
	return su
}

// SetPauseDays sets the "pause_days" field.
func (su *SubscribeUpdate) SetPauseDays(u uint) *SubscribeUpdate {
	su.mutation.ResetPauseDays()
	su.mutation.SetPauseDays(u)
	return su
}

// SetNillablePauseDays sets the "pause_days" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePauseDays(u *uint) *SubscribeUpdate {
	if u != nil {
		su.SetPauseDays(*u)
	}
	return su
}

// AddPauseDays adds u to the "pause_days" field.
func (su *SubscribeUpdate) AddPauseDays(u int) *SubscribeUpdate {
	su.mutation.AddPauseDays(u)
	return su
}

// SetPausedAt sets the "paused_at" field.
func (su *SubscribeUpdate) SetPausedAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetPausedAt(t)
	return su
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillablePausedAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetPausedAt(*t)
	}
	return su
}

// ClearPausedAt clears the value of the "paused_at" field.
func (su *SubscribeUpdate) ClearPausedAt() *SubscribeUpdate {
	su.mutation.ClearPausedAt()
	return su
}

// SetStartAt sets the "start_at" field.
func (su *SubscribeUpdate) SetStartAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetStartAt(t)
	return su
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableStartAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetStartAt(*t)
	}
	return su
}

// ClearStartAt clears the value of the "start_at" field.
func (su *SubscribeUpdate) ClearStartAt() *SubscribeUpdate {
	su.mutation.ClearStartAt()
	return su
}

// SetEndAt sets the "end_at" field.
func (su *SubscribeUpdate) SetEndAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetEndAt(t)
	return su
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableEndAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetEndAt(*t)
	}
	return su
}

// ClearEndAt clears the value of the "end_at" field.
func (su *SubscribeUpdate) ClearEndAt() *SubscribeUpdate {
	su.mutation.ClearEndAt()
	return su
}

// SetRefundAt sets the "refund_at" field.
func (su *SubscribeUpdate) SetRefundAt(t time.Time) *SubscribeUpdate {
	su.mutation.SetRefundAt(t)
	return su
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (su *SubscribeUpdate) SetNillableRefundAt(t *time.Time) *SubscribeUpdate {
	if t != nil {
		su.SetRefundAt(*t)
	}
	return su
}

// ClearRefundAt clears the value of the "refund_at" field.
func (su *SubscribeUpdate) ClearRefundAt() *SubscribeUpdate {
	su.mutation.ClearRefundAt()
	return su
}

// SetPlan sets the "plan" edge to the Plan entity.
func (su *SubscribeUpdate) SetPlan(p *Plan) *SubscribeUpdate {
	return su.SetPlanID(p.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (su *SubscribeUpdate) SetEmployee(e *Employee) *SubscribeUpdate {
	return su.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (su *SubscribeUpdate) SetCity(c *City) *SubscribeUpdate {
	return su.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (su *SubscribeUpdate) SetRider(r *Rider) *SubscribeUpdate {
	return su.SetRiderID(r.ID)
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by IDs.
func (su *SubscribeUpdate) AddPauseIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddPauseIDs(ids...)
	return su
}

// AddPauses adds the "pauses" edges to the SubscribePause entity.
func (su *SubscribeUpdate) AddPauses(s ...*SubscribePause) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddPauseIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by IDs.
func (su *SubscribeUpdate) AddAlterIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddAlterIDs(ids...)
	return su
}

// AddAlters adds the "alters" edges to the SubscribeAlter entity.
func (su *SubscribeUpdate) AddAlters(s ...*SubscribeAlter) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddAlterIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (su *SubscribeUpdate) AddOrderIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.AddOrderIDs(ids...)
	return su
}

// AddOrders adds the "orders" edges to the Order entity.
func (su *SubscribeUpdate) AddOrders(o ...*Order) *SubscribeUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.AddOrderIDs(ids...)
}

// SetInitialOrder sets the "initial_order" edge to the Order entity.
func (su *SubscribeUpdate) SetInitialOrder(o *Order) *SubscribeUpdate {
	return su.SetInitialOrderID(o.ID)
}

// Mutation returns the SubscribeMutation object of the builder.
func (su *SubscribeUpdate) Mutation() *SubscribeMutation {
	return su.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (su *SubscribeUpdate) ClearPlan() *SubscribeUpdate {
	su.mutation.ClearPlan()
	return su
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (su *SubscribeUpdate) ClearEmployee() *SubscribeUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearCity clears the "city" edge to the City entity.
func (su *SubscribeUpdate) ClearCity() *SubscribeUpdate {
	su.mutation.ClearCity()
	return su
}

// ClearRider clears the "rider" edge to the Rider entity.
func (su *SubscribeUpdate) ClearRider() *SubscribeUpdate {
	su.mutation.ClearRider()
	return su
}

// ClearPauses clears all "pauses" edges to the SubscribePause entity.
func (su *SubscribeUpdate) ClearPauses() *SubscribeUpdate {
	su.mutation.ClearPauses()
	return su
}

// RemovePauseIDs removes the "pauses" edge to SubscribePause entities by IDs.
func (su *SubscribeUpdate) RemovePauseIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemovePauseIDs(ids...)
	return su
}

// RemovePauses removes "pauses" edges to SubscribePause entities.
func (su *SubscribeUpdate) RemovePauses(s ...*SubscribePause) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemovePauseIDs(ids...)
}

// ClearAlters clears all "alters" edges to the SubscribeAlter entity.
func (su *SubscribeUpdate) ClearAlters() *SubscribeUpdate {
	su.mutation.ClearAlters()
	return su
}

// RemoveAlterIDs removes the "alters" edge to SubscribeAlter entities by IDs.
func (su *SubscribeUpdate) RemoveAlterIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveAlterIDs(ids...)
	return su
}

// RemoveAlters removes "alters" edges to SubscribeAlter entities.
func (su *SubscribeUpdate) RemoveAlters(s ...*SubscribeAlter) *SubscribeUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveAlterIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (su *SubscribeUpdate) ClearOrders() *SubscribeUpdate {
	su.mutation.ClearOrders()
	return su
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (su *SubscribeUpdate) RemoveOrderIDs(ids ...uint64) *SubscribeUpdate {
	su.mutation.RemoveOrderIDs(ids...)
	return su
}

// RemoveOrders removes "orders" edges to Order entities.
func (su *SubscribeUpdate) RemoveOrders(o ...*Order) *SubscribeUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return su.RemoveOrderIDs(ids...)
}

// ClearInitialOrder clears the "initial_order" edge to the Order entity.
func (su *SubscribeUpdate) ClearInitialOrder() *SubscribeUpdate {
	su.mutation.ClearInitialOrder()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscribeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscribeUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscribeUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscribeUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscribeUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if subscribe.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscribeUpdate) check() error {
	if _, ok := su.mutation.PlanID(); su.mutation.PlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.plan"`)
	}
	if _, ok := su.mutation.CityID(); su.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.city"`)
	}
	if _, ok := su.mutation.RiderID(); su.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.rider"`)
	}
	if _, ok := su.mutation.InitialOrderID(); su.mutation.InitialOrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.initial_order"`)
	}
	return nil
}

func (su *SubscribeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldDeletedAt,
		})
	}
	if su.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribe.FieldCreator,
		})
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribe.FieldLastModifier,
		})
	}
	if su.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribe.FieldLastModifier,
		})
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribe.FieldRemark,
		})
	}
	if su.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribe.FieldRemark,
		})
	}
	if value, ok := su.mutation.Voltage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: subscribe.FieldVoltage,
		})
	}
	if value, ok := su.mutation.AddedVoltage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: subscribe.FieldVoltage,
		})
	}
	if value, ok := su.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldDays,
		})
	}
	if value, ok := su.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldDays,
		})
	}
	if value, ok := su.mutation.AlterDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldAlterDays,
		})
	}
	if value, ok := su.mutation.AddedAlterDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldAlterDays,
		})
	}
	if value, ok := su.mutation.PauseDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldPauseDays,
		})
	}
	if value, ok := su.mutation.AddedPauseDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldPauseDays,
		})
	}
	if value, ok := su.mutation.PausedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldPausedAt,
		})
	}
	if su.mutation.PausedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldPausedAt,
		})
	}
	if value, ok := su.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldStartAt,
		})
	}
	if su.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldStartAt,
		})
	}
	if value, ok := su.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldEndAt,
		})
	}
	if su.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldEndAt,
		})
	}
	if value, ok := su.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldRefundAt,
		})
	}
	if su.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldRefundAt,
		})
	}
	if su.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedPausesIDs(); len(nodes) > 0 && !su.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAltersIDs(); len(nodes) > 0 && !su.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !su.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InitialOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InitialOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubscribeUpdateOne is the builder for updating a single Subscribe entity.
type SubscribeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscribeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscribeUpdateOne) SetUpdatedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubscribeUpdateOne) SetDeletedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubscribeUpdateOne) ClearDeletedAt() *SubscribeUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *SubscribeUpdateOne) SetLastModifier(m *model.Modifier) *SubscribeUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *SubscribeUpdateOne) ClearLastModifier() *SubscribeUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *SubscribeUpdateOne) SetRemark(s string) *SubscribeUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRemark(s *string) *SubscribeUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *SubscribeUpdateOne) ClearRemark() *SubscribeUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetPlanID sets the "plan_id" field.
func (suo *SubscribeUpdateOne) SetPlanID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetPlanID(u)
	return suo
}

// SetEmployeeID sets the "employee_id" field.
func (suo *SubscribeUpdateOne) SetEmployeeID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetEmployeeID(u)
	return suo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEmployeeID(u *uint64) *SubscribeUpdateOne {
	if u != nil {
		suo.SetEmployeeID(*u)
	}
	return suo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (suo *SubscribeUpdateOne) ClearEmployeeID() *SubscribeUpdateOne {
	suo.mutation.ClearEmployeeID()
	return suo
}

// SetCityID sets the "city_id" field.
func (suo *SubscribeUpdateOne) SetCityID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetCityID(u)
	return suo
}

// SetRiderID sets the "rider_id" field.
func (suo *SubscribeUpdateOne) SetRiderID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetRiderID(u)
	return suo
}

// SetInitialOrderID sets the "initial_order_id" field.
func (suo *SubscribeUpdateOne) SetInitialOrderID(u uint64) *SubscribeUpdateOne {
	suo.mutation.SetInitialOrderID(u)
	return suo
}

// SetVoltage sets the "voltage" field.
func (suo *SubscribeUpdateOne) SetVoltage(f float64) *SubscribeUpdateOne {
	suo.mutation.ResetVoltage()
	suo.mutation.SetVoltage(f)
	return suo
}

// AddVoltage adds f to the "voltage" field.
func (suo *SubscribeUpdateOne) AddVoltage(f float64) *SubscribeUpdateOne {
	suo.mutation.AddVoltage(f)
	return suo
}

// SetDays sets the "days" field.
func (suo *SubscribeUpdateOne) SetDays(u uint) *SubscribeUpdateOne {
	suo.mutation.ResetDays()
	suo.mutation.SetDays(u)
	return suo
}

// AddDays adds u to the "days" field.
func (suo *SubscribeUpdateOne) AddDays(u int) *SubscribeUpdateOne {
	suo.mutation.AddDays(u)
	return suo
}

// SetAlterDays sets the "alter_days" field.
func (suo *SubscribeUpdateOne) SetAlterDays(u uint) *SubscribeUpdateOne {
	suo.mutation.ResetAlterDays()
	suo.mutation.SetAlterDays(u)
	return suo
}

// SetNillableAlterDays sets the "alter_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableAlterDays(u *uint) *SubscribeUpdateOne {
	if u != nil {
		suo.SetAlterDays(*u)
	}
	return suo
}

// AddAlterDays adds u to the "alter_days" field.
func (suo *SubscribeUpdateOne) AddAlterDays(u int) *SubscribeUpdateOne {
	suo.mutation.AddAlterDays(u)
	return suo
}

// SetPauseDays sets the "pause_days" field.
func (suo *SubscribeUpdateOne) SetPauseDays(u uint) *SubscribeUpdateOne {
	suo.mutation.ResetPauseDays()
	suo.mutation.SetPauseDays(u)
	return suo
}

// SetNillablePauseDays sets the "pause_days" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePauseDays(u *uint) *SubscribeUpdateOne {
	if u != nil {
		suo.SetPauseDays(*u)
	}
	return suo
}

// AddPauseDays adds u to the "pause_days" field.
func (suo *SubscribeUpdateOne) AddPauseDays(u int) *SubscribeUpdateOne {
	suo.mutation.AddPauseDays(u)
	return suo
}

// SetPausedAt sets the "paused_at" field.
func (suo *SubscribeUpdateOne) SetPausedAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetPausedAt(t)
	return suo
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillablePausedAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetPausedAt(*t)
	}
	return suo
}

// ClearPausedAt clears the value of the "paused_at" field.
func (suo *SubscribeUpdateOne) ClearPausedAt() *SubscribeUpdateOne {
	suo.mutation.ClearPausedAt()
	return suo
}

// SetStartAt sets the "start_at" field.
func (suo *SubscribeUpdateOne) SetStartAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetStartAt(t)
	return suo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableStartAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetStartAt(*t)
	}
	return suo
}

// ClearStartAt clears the value of the "start_at" field.
func (suo *SubscribeUpdateOne) ClearStartAt() *SubscribeUpdateOne {
	suo.mutation.ClearStartAt()
	return suo
}

// SetEndAt sets the "end_at" field.
func (suo *SubscribeUpdateOne) SetEndAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetEndAt(t)
	return suo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableEndAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetEndAt(*t)
	}
	return suo
}

// ClearEndAt clears the value of the "end_at" field.
func (suo *SubscribeUpdateOne) ClearEndAt() *SubscribeUpdateOne {
	suo.mutation.ClearEndAt()
	return suo
}

// SetRefundAt sets the "refund_at" field.
func (suo *SubscribeUpdateOne) SetRefundAt(t time.Time) *SubscribeUpdateOne {
	suo.mutation.SetRefundAt(t)
	return suo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (suo *SubscribeUpdateOne) SetNillableRefundAt(t *time.Time) *SubscribeUpdateOne {
	if t != nil {
		suo.SetRefundAt(*t)
	}
	return suo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (suo *SubscribeUpdateOne) ClearRefundAt() *SubscribeUpdateOne {
	suo.mutation.ClearRefundAt()
	return suo
}

// SetPlan sets the "plan" edge to the Plan entity.
func (suo *SubscribeUpdateOne) SetPlan(p *Plan) *SubscribeUpdateOne {
	return suo.SetPlanID(p.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (suo *SubscribeUpdateOne) SetEmployee(e *Employee) *SubscribeUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (suo *SubscribeUpdateOne) SetCity(c *City) *SubscribeUpdateOne {
	return suo.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (suo *SubscribeUpdateOne) SetRider(r *Rider) *SubscribeUpdateOne {
	return suo.SetRiderID(r.ID)
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by IDs.
func (suo *SubscribeUpdateOne) AddPauseIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddPauseIDs(ids...)
	return suo
}

// AddPauses adds the "pauses" edges to the SubscribePause entity.
func (suo *SubscribeUpdateOne) AddPauses(s ...*SubscribePause) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddPauseIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by IDs.
func (suo *SubscribeUpdateOne) AddAlterIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddAlterIDs(ids...)
	return suo
}

// AddAlters adds the "alters" edges to the SubscribeAlter entity.
func (suo *SubscribeUpdateOne) AddAlters(s ...*SubscribeAlter) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddAlterIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (suo *SubscribeUpdateOne) AddOrderIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.AddOrderIDs(ids...)
	return suo
}

// AddOrders adds the "orders" edges to the Order entity.
func (suo *SubscribeUpdateOne) AddOrders(o ...*Order) *SubscribeUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.AddOrderIDs(ids...)
}

// SetInitialOrder sets the "initial_order" edge to the Order entity.
func (suo *SubscribeUpdateOne) SetInitialOrder(o *Order) *SubscribeUpdateOne {
	return suo.SetInitialOrderID(o.ID)
}

// Mutation returns the SubscribeMutation object of the builder.
func (suo *SubscribeUpdateOne) Mutation() *SubscribeMutation {
	return suo.mutation
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (suo *SubscribeUpdateOne) ClearPlan() *SubscribeUpdateOne {
	suo.mutation.ClearPlan()
	return suo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (suo *SubscribeUpdateOne) ClearEmployee() *SubscribeUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearCity clears the "city" edge to the City entity.
func (suo *SubscribeUpdateOne) ClearCity() *SubscribeUpdateOne {
	suo.mutation.ClearCity()
	return suo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (suo *SubscribeUpdateOne) ClearRider() *SubscribeUpdateOne {
	suo.mutation.ClearRider()
	return suo
}

// ClearPauses clears all "pauses" edges to the SubscribePause entity.
func (suo *SubscribeUpdateOne) ClearPauses() *SubscribeUpdateOne {
	suo.mutation.ClearPauses()
	return suo
}

// RemovePauseIDs removes the "pauses" edge to SubscribePause entities by IDs.
func (suo *SubscribeUpdateOne) RemovePauseIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemovePauseIDs(ids...)
	return suo
}

// RemovePauses removes "pauses" edges to SubscribePause entities.
func (suo *SubscribeUpdateOne) RemovePauses(s ...*SubscribePause) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemovePauseIDs(ids...)
}

// ClearAlters clears all "alters" edges to the SubscribeAlter entity.
func (suo *SubscribeUpdateOne) ClearAlters() *SubscribeUpdateOne {
	suo.mutation.ClearAlters()
	return suo
}

// RemoveAlterIDs removes the "alters" edge to SubscribeAlter entities by IDs.
func (suo *SubscribeUpdateOne) RemoveAlterIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveAlterIDs(ids...)
	return suo
}

// RemoveAlters removes "alters" edges to SubscribeAlter entities.
func (suo *SubscribeUpdateOne) RemoveAlters(s ...*SubscribeAlter) *SubscribeUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveAlterIDs(ids...)
}

// ClearOrders clears all "orders" edges to the Order entity.
func (suo *SubscribeUpdateOne) ClearOrders() *SubscribeUpdateOne {
	suo.mutation.ClearOrders()
	return suo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (suo *SubscribeUpdateOne) RemoveOrderIDs(ids ...uint64) *SubscribeUpdateOne {
	suo.mutation.RemoveOrderIDs(ids...)
	return suo
}

// RemoveOrders removes "orders" edges to Order entities.
func (suo *SubscribeUpdateOne) RemoveOrders(o ...*Order) *SubscribeUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return suo.RemoveOrderIDs(ids...)
}

// ClearInitialOrder clears the "initial_order" edge to the Order entity.
func (suo *SubscribeUpdateOne) ClearInitialOrder() *SubscribeUpdateOne {
	suo.mutation.ClearInitialOrder()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscribeUpdateOne) Select(field string, fields ...string) *SubscribeUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscribe entity.
func (suo *SubscribeUpdateOne) Save(ctx context.Context) (*Subscribe, error) {
	var (
		err  error
		node *Subscribe
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Subscribe)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscribeUpdateOne) SaveX(ctx context.Context) *Subscribe {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscribeUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscribeUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscribeUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if subscribe.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscribeUpdateOne) check() error {
	if _, ok := suo.mutation.PlanID(); suo.mutation.PlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.plan"`)
	}
	if _, ok := suo.mutation.CityID(); suo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.city"`)
	}
	if _, ok := suo.mutation.RiderID(); suo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.rider"`)
	}
	if _, ok := suo.mutation.InitialOrderID(); suo.mutation.InitialOrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subscribe.initial_order"`)
	}
	return nil
}

func (suo *SubscribeUpdateOne) sqlSave(ctx context.Context) (_node *Subscribe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscribe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribe.FieldID)
		for _, f := range fields {
			if !subscribe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldDeletedAt,
		})
	}
	if suo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribe.FieldCreator,
		})
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribe.FieldLastModifier,
		})
	}
	if suo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribe.FieldLastModifier,
		})
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribe.FieldRemark,
		})
	}
	if suo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribe.FieldRemark,
		})
	}
	if value, ok := suo.mutation.Voltage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: subscribe.FieldVoltage,
		})
	}
	if value, ok := suo.mutation.AddedVoltage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: subscribe.FieldVoltage,
		})
	}
	if value, ok := suo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldDays,
		})
	}
	if value, ok := suo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldDays,
		})
	}
	if value, ok := suo.mutation.AlterDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldAlterDays,
		})
	}
	if value, ok := suo.mutation.AddedAlterDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldAlterDays,
		})
	}
	if value, ok := suo.mutation.PauseDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldPauseDays,
		})
	}
	if value, ok := suo.mutation.AddedPauseDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldPauseDays,
		})
	}
	if value, ok := suo.mutation.PausedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldPausedAt,
		})
	}
	if suo.mutation.PausedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldPausedAt,
		})
	}
	if value, ok := suo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldStartAt,
		})
	}
	if suo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldStartAt,
		})
	}
	if value, ok := suo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldEndAt,
		})
	}
	if suo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldEndAt,
		})
	}
	if value, ok := suo.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldRefundAt,
		})
	}
	if suo.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribe.FieldRefundAt,
		})
	}
	if suo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedPausesIDs(); len(nodes) > 0 && !suo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAltersIDs(); len(nodes) > 0 && !suo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !suo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InitialOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InitialOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscribe{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
