// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetScrapDetailsUpdate is the builder for updating AssetScrapDetails entities.
type AssetScrapDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetScrapDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetScrapDetailsUpdate builder.
func (asdu *AssetScrapDetailsUpdate) Where(ps ...predicate.AssetScrapDetails) *AssetScrapDetailsUpdate {
	asdu.mutation.Where(ps...)
	return asdu
}

// SetUpdatedAt sets the "updated_at" field.
func (asdu *AssetScrapDetailsUpdate) SetUpdatedAt(t time.Time) *AssetScrapDetailsUpdate {
	asdu.mutation.SetUpdatedAt(t)
	return asdu
}

// SetAssetID sets the "asset_id" field.
func (asdu *AssetScrapDetailsUpdate) SetAssetID(u uint64) *AssetScrapDetailsUpdate {
	asdu.mutation.SetAssetID(u)
	return asdu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (asdu *AssetScrapDetailsUpdate) SetNillableAssetID(u *uint64) *AssetScrapDetailsUpdate {
	if u != nil {
		asdu.SetAssetID(*u)
	}
	return asdu
}

// SetScrapID sets the "scrap_id" field.
func (asdu *AssetScrapDetailsUpdate) SetScrapID(u uint64) *AssetScrapDetailsUpdate {
	asdu.mutation.SetScrapID(u)
	return asdu
}

// SetNillableScrapID sets the "scrap_id" field if the given value is not nil.
func (asdu *AssetScrapDetailsUpdate) SetNillableScrapID(u *uint64) *AssetScrapDetailsUpdate {
	if u != nil {
		asdu.SetScrapID(*u)
	}
	return asdu
}

// ClearScrapID clears the value of the "scrap_id" field.
func (asdu *AssetScrapDetailsUpdate) ClearScrapID() *AssetScrapDetailsUpdate {
	asdu.mutation.ClearScrapID()
	return asdu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asdu *AssetScrapDetailsUpdate) SetAsset(a *Asset) *AssetScrapDetailsUpdate {
	return asdu.SetAssetID(a.ID)
}

// SetScrap sets the "scrap" edge to the AssetScrap entity.
func (asdu *AssetScrapDetailsUpdate) SetScrap(a *AssetScrap) *AssetScrapDetailsUpdate {
	return asdu.SetScrapID(a.ID)
}

// Mutation returns the AssetScrapDetailsMutation object of the builder.
func (asdu *AssetScrapDetailsUpdate) Mutation() *AssetScrapDetailsMutation {
	return asdu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (asdu *AssetScrapDetailsUpdate) ClearAsset() *AssetScrapDetailsUpdate {
	asdu.mutation.ClearAsset()
	return asdu
}

// ClearScrap clears the "scrap" edge to the AssetScrap entity.
func (asdu *AssetScrapDetailsUpdate) ClearScrap() *AssetScrapDetailsUpdate {
	asdu.mutation.ClearScrap()
	return asdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asdu *AssetScrapDetailsUpdate) Save(ctx context.Context) (int, error) {
	asdu.defaults()
	return withHooks(ctx, asdu.sqlSave, asdu.mutation, asdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asdu *AssetScrapDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := asdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asdu *AssetScrapDetailsUpdate) Exec(ctx context.Context) error {
	_, err := asdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asdu *AssetScrapDetailsUpdate) ExecX(ctx context.Context) {
	if err := asdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asdu *AssetScrapDetailsUpdate) defaults() {
	if _, ok := asdu.mutation.UpdatedAt(); !ok {
		v := assetscrapdetails.UpdateDefaultUpdatedAt()
		asdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asdu *AssetScrapDetailsUpdate) check() error {
	if asdu.mutation.AssetCleared() && len(asdu.mutation.AssetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AssetScrapDetails.asset"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asdu *AssetScrapDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetScrapDetailsUpdate {
	asdu.modifiers = append(asdu.modifiers, modifiers...)
	return asdu
}

func (asdu *AssetScrapDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := asdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetscrapdetails.Table, assetscrapdetails.Columns, sqlgraph.NewFieldSpec(assetscrapdetails.FieldID, field.TypeUint64))
	if ps := asdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asdu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrapdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if asdu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.AssetTable,
			Columns: []string{assetscrapdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asdu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.AssetTable,
			Columns: []string{assetscrapdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asdu.mutation.ScrapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.ScrapTable,
			Columns: []string{assetscrapdetails.ScrapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asdu.mutation.ScrapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.ScrapTable,
			Columns: []string{assetscrapdetails.ScrapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetscrapdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asdu.mutation.done = true
	return n, nil
}

// AssetScrapDetailsUpdateOne is the builder for updating a single AssetScrapDetails entity.
type AssetScrapDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetScrapDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (asduo *AssetScrapDetailsUpdateOne) SetUpdatedAt(t time.Time) *AssetScrapDetailsUpdateOne {
	asduo.mutation.SetUpdatedAt(t)
	return asduo
}

// SetAssetID sets the "asset_id" field.
func (asduo *AssetScrapDetailsUpdateOne) SetAssetID(u uint64) *AssetScrapDetailsUpdateOne {
	asduo.mutation.SetAssetID(u)
	return asduo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (asduo *AssetScrapDetailsUpdateOne) SetNillableAssetID(u *uint64) *AssetScrapDetailsUpdateOne {
	if u != nil {
		asduo.SetAssetID(*u)
	}
	return asduo
}

// SetScrapID sets the "scrap_id" field.
func (asduo *AssetScrapDetailsUpdateOne) SetScrapID(u uint64) *AssetScrapDetailsUpdateOne {
	asduo.mutation.SetScrapID(u)
	return asduo
}

// SetNillableScrapID sets the "scrap_id" field if the given value is not nil.
func (asduo *AssetScrapDetailsUpdateOne) SetNillableScrapID(u *uint64) *AssetScrapDetailsUpdateOne {
	if u != nil {
		asduo.SetScrapID(*u)
	}
	return asduo
}

// ClearScrapID clears the value of the "scrap_id" field.
func (asduo *AssetScrapDetailsUpdateOne) ClearScrapID() *AssetScrapDetailsUpdateOne {
	asduo.mutation.ClearScrapID()
	return asduo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asduo *AssetScrapDetailsUpdateOne) SetAsset(a *Asset) *AssetScrapDetailsUpdateOne {
	return asduo.SetAssetID(a.ID)
}

// SetScrap sets the "scrap" edge to the AssetScrap entity.
func (asduo *AssetScrapDetailsUpdateOne) SetScrap(a *AssetScrap) *AssetScrapDetailsUpdateOne {
	return asduo.SetScrapID(a.ID)
}

// Mutation returns the AssetScrapDetailsMutation object of the builder.
func (asduo *AssetScrapDetailsUpdateOne) Mutation() *AssetScrapDetailsMutation {
	return asduo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (asduo *AssetScrapDetailsUpdateOne) ClearAsset() *AssetScrapDetailsUpdateOne {
	asduo.mutation.ClearAsset()
	return asduo
}

// ClearScrap clears the "scrap" edge to the AssetScrap entity.
func (asduo *AssetScrapDetailsUpdateOne) ClearScrap() *AssetScrapDetailsUpdateOne {
	asduo.mutation.ClearScrap()
	return asduo
}

// Where appends a list predicates to the AssetScrapDetailsUpdate builder.
func (asduo *AssetScrapDetailsUpdateOne) Where(ps ...predicate.AssetScrapDetails) *AssetScrapDetailsUpdateOne {
	asduo.mutation.Where(ps...)
	return asduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asduo *AssetScrapDetailsUpdateOne) Select(field string, fields ...string) *AssetScrapDetailsUpdateOne {
	asduo.fields = append([]string{field}, fields...)
	return asduo
}

// Save executes the query and returns the updated AssetScrapDetails entity.
func (asduo *AssetScrapDetailsUpdateOne) Save(ctx context.Context) (*AssetScrapDetails, error) {
	asduo.defaults()
	return withHooks(ctx, asduo.sqlSave, asduo.mutation, asduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asduo *AssetScrapDetailsUpdateOne) SaveX(ctx context.Context) *AssetScrapDetails {
	node, err := asduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asduo *AssetScrapDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := asduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asduo *AssetScrapDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := asduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asduo *AssetScrapDetailsUpdateOne) defaults() {
	if _, ok := asduo.mutation.UpdatedAt(); !ok {
		v := assetscrapdetails.UpdateDefaultUpdatedAt()
		asduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asduo *AssetScrapDetailsUpdateOne) check() error {
	if asduo.mutation.AssetCleared() && len(asduo.mutation.AssetIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AssetScrapDetails.asset"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asduo *AssetScrapDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetScrapDetailsUpdateOne {
	asduo.modifiers = append(asduo.modifiers, modifiers...)
	return asduo
}

func (asduo *AssetScrapDetailsUpdateOne) sqlSave(ctx context.Context) (_node *AssetScrapDetails, err error) {
	if err := asduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetscrapdetails.Table, assetscrapdetails.Columns, sqlgraph.NewFieldSpec(assetscrapdetails.FieldID, field.TypeUint64))
	id, ok := asduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetScrapDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetscrapdetails.FieldID)
		for _, f := range fields {
			if !assetscrapdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetscrapdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asduo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrapdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if asduo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.AssetTable,
			Columns: []string{assetscrapdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asduo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.AssetTable,
			Columns: []string{assetscrapdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if asduo.mutation.ScrapCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.ScrapTable,
			Columns: []string{assetscrapdetails.ScrapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asduo.mutation.ScrapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.ScrapTable,
			Columns: []string{assetscrapdetails.ScrapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(asduo.modifiers...)
	_node = &AssetScrapDetails{config: asduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetscrapdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asduo.mutation.done = true
	return _node, nil
}
