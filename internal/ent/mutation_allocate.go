// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/allocate"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// AllocateMutation represents an operation that mutates the Allocate nodes in the graph.
type AllocateMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	_type            *allocate.Type
	status           *uint8
	addstatus        *int8
	time             *time.Time
	model            *string
	clearedFields    map[string]struct{}
	rider            *uint64
	clearedrider     bool
	subscribe        *uint64
	clearedsubscribe bool
	employee         *uint64
	clearedemployee  bool
	cabinet          *uint64
	clearedcabinet   bool
	store            *uint64
	clearedstore     bool
	ebike            *uint64
	clearedebike     bool
	brand            *uint64
	clearedbrand     bool
	contract         *uint64
	clearedcontract  bool
	done             bool
	oldValue         func(context.Context) (*Allocate, error)
	predicates       []predicate.Allocate
}

var _ ent.Mutation = (*AllocateMutation)(nil)

// allocateOption allows management of the mutation configuration using functional options.
type allocateOption func(*AllocateMutation)

// newAllocateMutation creates new mutation for the Allocate entity.
func newAllocateMutation(c config, op Op, opts ...allocateOption) *AllocateMutation {
	m := &AllocateMutation{
		config:        c,
		op:            op,
		typ:           TypeAllocate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAllocateID sets the ID field of the mutation.
func withAllocateID(id uint64) allocateOption {
	return func(m *AllocateMutation) {
		var (
			err   error
			once  sync.Once
			value *Allocate
		)
		m.oldValue = func(ctx context.Context) (*Allocate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Allocate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAllocate sets the old Allocate of the mutation.
func withAllocate(node *Allocate) allocateOption {
	return func(m *AllocateMutation) {
		m.oldValue = func(context.Context) (*Allocate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AllocateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AllocateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AllocateMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AllocateMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Allocate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRiderID sets the "rider_id" field.
func (m *AllocateMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *AllocateMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *AllocateMutation) ResetRiderID() {
	m.rider = nil
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *AllocateMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *AllocateMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *AllocateMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetCreator sets the "creator" field.
func (m *AllocateMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *AllocateMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *AllocateMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[allocate.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *AllocateMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[allocate.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *AllocateMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, allocate.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *AllocateMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *AllocateMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *AllocateMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[allocate.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *AllocateMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[allocate.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *AllocateMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, allocate.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *AllocateMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *AllocateMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *AllocateMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[allocate.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *AllocateMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[allocate.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *AllocateMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, allocate.FieldRemark)
}

// SetEmployeeID sets the "employee_id" field.
func (m *AllocateMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *AllocateMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *AllocateMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[allocate.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *AllocateMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[allocate.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *AllocateMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, allocate.FieldEmployeeID)
}

// SetCabinetID sets the "cabinet_id" field.
func (m *AllocateMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *AllocateMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldCabinetID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (m *AllocateMutation) ClearCabinetID() {
	m.cabinet = nil
	m.clearedFields[allocate.FieldCabinetID] = struct{}{}
}

// CabinetIDCleared returns if the "cabinet_id" field was cleared in this mutation.
func (m *AllocateMutation) CabinetIDCleared() bool {
	_, ok := m.clearedFields[allocate.FieldCabinetID]
	return ok
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *AllocateMutation) ResetCabinetID() {
	m.cabinet = nil
	delete(m.clearedFields, allocate.FieldCabinetID)
}

// SetStoreID sets the "store_id" field.
func (m *AllocateMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *AllocateMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *AllocateMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[allocate.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *AllocateMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[allocate.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *AllocateMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, allocate.FieldStoreID)
}

// SetEbikeID sets the "ebike_id" field.
func (m *AllocateMutation) SetEbikeID(u uint64) {
	m.ebike = &u
}

// EbikeID returns the value of the "ebike_id" field in the mutation.
func (m *AllocateMutation) EbikeID() (r uint64, exists bool) {
	v := m.ebike
	if v == nil {
		return
	}
	return *v, true
}

// OldEbikeID returns the old "ebike_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldEbikeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEbikeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEbikeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEbikeID: %w", err)
	}
	return oldValue.EbikeID, nil
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (m *AllocateMutation) ClearEbikeID() {
	m.ebike = nil
	m.clearedFields[allocate.FieldEbikeID] = struct{}{}
}

// EbikeIDCleared returns if the "ebike_id" field was cleared in this mutation.
func (m *AllocateMutation) EbikeIDCleared() bool {
	_, ok := m.clearedFields[allocate.FieldEbikeID]
	return ok
}

// ResetEbikeID resets all changes to the "ebike_id" field.
func (m *AllocateMutation) ResetEbikeID() {
	m.ebike = nil
	delete(m.clearedFields, allocate.FieldEbikeID)
}

// SetBrandID sets the "brand_id" field.
func (m *AllocateMutation) SetBrandID(u uint64) {
	m.brand = &u
}

// BrandID returns the value of the "brand_id" field in the mutation.
func (m *AllocateMutation) BrandID() (r uint64, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandID returns the old "brand_id" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldBrandID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandID: %w", err)
	}
	return oldValue.BrandID, nil
}

// ClearBrandID clears the value of the "brand_id" field.
func (m *AllocateMutation) ClearBrandID() {
	m.brand = nil
	m.clearedFields[allocate.FieldBrandID] = struct{}{}
}

// BrandIDCleared returns if the "brand_id" field was cleared in this mutation.
func (m *AllocateMutation) BrandIDCleared() bool {
	_, ok := m.clearedFields[allocate.FieldBrandID]
	return ok
}

// ResetBrandID resets all changes to the "brand_id" field.
func (m *AllocateMutation) ResetBrandID() {
	m.brand = nil
	delete(m.clearedFields, allocate.FieldBrandID)
}

// SetType sets the "type" field.
func (m *AllocateMutation) SetType(a allocate.Type) {
	m._type = &a
}

// GetType returns the value of the "type" field in the mutation.
func (m *AllocateMutation) GetType() (r allocate.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldType(ctx context.Context) (v allocate.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *AllocateMutation) ResetType() {
	m._type = nil
}

// SetStatus sets the "status" field.
func (m *AllocateMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AllocateMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *AllocateMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AllocateMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *AllocateMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetTime sets the "time" field.
func (m *AllocateMutation) SetTime(t time.Time) {
	m.time = &t
}

// Time returns the value of the "time" field in the mutation.
func (m *AllocateMutation) Time() (r time.Time, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// OldTime returns the old "time" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTime: %w", err)
	}
	return oldValue.Time, nil
}

// ResetTime resets all changes to the "time" field.
func (m *AllocateMutation) ResetTime() {
	m.time = nil
}

// SetModel sets the "model" field.
func (m *AllocateMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *AllocateMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Allocate entity.
// If the Allocate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AllocateMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *AllocateMutation) ResetModel() {
	m.model = nil
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *AllocateMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *AllocateMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *AllocateMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *AllocateMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *AllocateMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *AllocateMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *AllocateMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *AllocateMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *AllocateMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *AllocateMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *AllocateMutation) CabinetCleared() bool {
	return m.CabinetIDCleared() || m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *AllocateMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *AllocateMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *AllocateMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *AllocateMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (m *AllocateMutation) ClearEbike() {
	m.clearedebike = true
}

// EbikeCleared reports if the "ebike" edge to the Ebike entity was cleared.
func (m *AllocateMutation) EbikeCleared() bool {
	return m.EbikeIDCleared() || m.clearedebike
}

// EbikeIDs returns the "ebike" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EbikeID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) EbikeIDs() (ids []uint64) {
	if id := m.ebike; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEbike resets all changes to the "ebike" edge.
func (m *AllocateMutation) ResetEbike() {
	m.ebike = nil
	m.clearedebike = false
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (m *AllocateMutation) ClearBrand() {
	m.clearedbrand = true
}

// BrandCleared reports if the "brand" edge to the EbikeBrand entity was cleared.
func (m *AllocateMutation) BrandCleared() bool {
	return m.BrandIDCleared() || m.clearedbrand
}

// BrandIDs returns the "brand" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BrandID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) BrandIDs() (ids []uint64) {
	if id := m.brand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBrand resets all changes to the "brand" edge.
func (m *AllocateMutation) ResetBrand() {
	m.brand = nil
	m.clearedbrand = false
}

// SetContractID sets the "contract" edge to the Contract entity by id.
func (m *AllocateMutation) SetContractID(id uint64) {
	m.contract = &id
}

// ClearContract clears the "contract" edge to the Contract entity.
func (m *AllocateMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the Contract entity was cleared.
func (m *AllocateMutation) ContractCleared() bool {
	return m.clearedcontract
}

// ContractID returns the "contract" edge ID in the mutation.
func (m *AllocateMutation) ContractID() (id uint64, exists bool) {
	if m.contract != nil {
		return *m.contract, true
	}
	return
}

// ContractIDs returns the "contract" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContractID instead. It exists only for internal usage by the builders.
func (m *AllocateMutation) ContractIDs() (ids []uint64) {
	if id := m.contract; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *AllocateMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
}

// Where appends a list predicates to the AllocateMutation builder.
func (m *AllocateMutation) Where(ps ...predicate.Allocate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AllocateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Allocate).
func (m *AllocateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AllocateMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.rider != nil {
		fields = append(fields, allocate.FieldRiderID)
	}
	if m.subscribe != nil {
		fields = append(fields, allocate.FieldSubscribeID)
	}
	if m.creator != nil {
		fields = append(fields, allocate.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, allocate.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, allocate.FieldRemark)
	}
	if m.employee != nil {
		fields = append(fields, allocate.FieldEmployeeID)
	}
	if m.cabinet != nil {
		fields = append(fields, allocate.FieldCabinetID)
	}
	if m.store != nil {
		fields = append(fields, allocate.FieldStoreID)
	}
	if m.ebike != nil {
		fields = append(fields, allocate.FieldEbikeID)
	}
	if m.brand != nil {
		fields = append(fields, allocate.FieldBrandID)
	}
	if m._type != nil {
		fields = append(fields, allocate.FieldType)
	}
	if m.status != nil {
		fields = append(fields, allocate.FieldStatus)
	}
	if m.time != nil {
		fields = append(fields, allocate.FieldTime)
	}
	if m.model != nil {
		fields = append(fields, allocate.FieldModel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AllocateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case allocate.FieldRiderID:
		return m.RiderID()
	case allocate.FieldSubscribeID:
		return m.SubscribeID()
	case allocate.FieldCreator:
		return m.Creator()
	case allocate.FieldLastModifier:
		return m.LastModifier()
	case allocate.FieldRemark:
		return m.Remark()
	case allocate.FieldEmployeeID:
		return m.EmployeeID()
	case allocate.FieldCabinetID:
		return m.CabinetID()
	case allocate.FieldStoreID:
		return m.StoreID()
	case allocate.FieldEbikeID:
		return m.EbikeID()
	case allocate.FieldBrandID:
		return m.BrandID()
	case allocate.FieldType:
		return m.GetType()
	case allocate.FieldStatus:
		return m.Status()
	case allocate.FieldTime:
		return m.Time()
	case allocate.FieldModel:
		return m.Model()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AllocateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case allocate.FieldRiderID:
		return m.OldRiderID(ctx)
	case allocate.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case allocate.FieldCreator:
		return m.OldCreator(ctx)
	case allocate.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case allocate.FieldRemark:
		return m.OldRemark(ctx)
	case allocate.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case allocate.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case allocate.FieldStoreID:
		return m.OldStoreID(ctx)
	case allocate.FieldEbikeID:
		return m.OldEbikeID(ctx)
	case allocate.FieldBrandID:
		return m.OldBrandID(ctx)
	case allocate.FieldType:
		return m.OldType(ctx)
	case allocate.FieldStatus:
		return m.OldStatus(ctx)
	case allocate.FieldTime:
		return m.OldTime(ctx)
	case allocate.FieldModel:
		return m.OldModel(ctx)
	}
	return nil, fmt.Errorf("unknown Allocate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AllocateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case allocate.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case allocate.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case allocate.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case allocate.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case allocate.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case allocate.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case allocate.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case allocate.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case allocate.FieldEbikeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEbikeID(v)
		return nil
	case allocate.FieldBrandID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandID(v)
		return nil
	case allocate.FieldType:
		v, ok := value.(allocate.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case allocate.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case allocate.FieldTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	case allocate.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	}
	return fmt.Errorf("unknown Allocate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AllocateMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, allocate.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AllocateMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case allocate.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AllocateMutation) AddField(name string, value ent.Value) error {
	switch name {
	case allocate.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Allocate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AllocateMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(allocate.FieldCreator) {
		fields = append(fields, allocate.FieldCreator)
	}
	if m.FieldCleared(allocate.FieldLastModifier) {
		fields = append(fields, allocate.FieldLastModifier)
	}
	if m.FieldCleared(allocate.FieldRemark) {
		fields = append(fields, allocate.FieldRemark)
	}
	if m.FieldCleared(allocate.FieldEmployeeID) {
		fields = append(fields, allocate.FieldEmployeeID)
	}
	if m.FieldCleared(allocate.FieldCabinetID) {
		fields = append(fields, allocate.FieldCabinetID)
	}
	if m.FieldCleared(allocate.FieldStoreID) {
		fields = append(fields, allocate.FieldStoreID)
	}
	if m.FieldCleared(allocate.FieldEbikeID) {
		fields = append(fields, allocate.FieldEbikeID)
	}
	if m.FieldCleared(allocate.FieldBrandID) {
		fields = append(fields, allocate.FieldBrandID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AllocateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AllocateMutation) ClearField(name string) error {
	switch name {
	case allocate.FieldCreator:
		m.ClearCreator()
		return nil
	case allocate.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case allocate.FieldRemark:
		m.ClearRemark()
		return nil
	case allocate.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case allocate.FieldCabinetID:
		m.ClearCabinetID()
		return nil
	case allocate.FieldStoreID:
		m.ClearStoreID()
		return nil
	case allocate.FieldEbikeID:
		m.ClearEbikeID()
		return nil
	case allocate.FieldBrandID:
		m.ClearBrandID()
		return nil
	}
	return fmt.Errorf("unknown Allocate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AllocateMutation) ResetField(name string) error {
	switch name {
	case allocate.FieldRiderID:
		m.ResetRiderID()
		return nil
	case allocate.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case allocate.FieldCreator:
		m.ResetCreator()
		return nil
	case allocate.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case allocate.FieldRemark:
		m.ResetRemark()
		return nil
	case allocate.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case allocate.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case allocate.FieldStoreID:
		m.ResetStoreID()
		return nil
	case allocate.FieldEbikeID:
		m.ResetEbikeID()
		return nil
	case allocate.FieldBrandID:
		m.ResetBrandID()
		return nil
	case allocate.FieldType:
		m.ResetType()
		return nil
	case allocate.FieldStatus:
		m.ResetStatus()
		return nil
	case allocate.FieldTime:
		m.ResetTime()
		return nil
	case allocate.FieldModel:
		m.ResetModel()
		return nil
	}
	return fmt.Errorf("unknown Allocate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AllocateMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.rider != nil {
		edges = append(edges, allocate.EdgeRider)
	}
	if m.subscribe != nil {
		edges = append(edges, allocate.EdgeSubscribe)
	}
	if m.employee != nil {
		edges = append(edges, allocate.EdgeEmployee)
	}
	if m.cabinet != nil {
		edges = append(edges, allocate.EdgeCabinet)
	}
	if m.store != nil {
		edges = append(edges, allocate.EdgeStore)
	}
	if m.ebike != nil {
		edges = append(edges, allocate.EdgeEbike)
	}
	if m.brand != nil {
		edges = append(edges, allocate.EdgeBrand)
	}
	if m.contract != nil {
		edges = append(edges, allocate.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AllocateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case allocate.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeEbike:
		if id := m.ebike; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeBrand:
		if id := m.brand; id != nil {
			return []ent.Value{*id}
		}
	case allocate.EdgeContract:
		if id := m.contract; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AllocateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AllocateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AllocateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedrider {
		edges = append(edges, allocate.EdgeRider)
	}
	if m.clearedsubscribe {
		edges = append(edges, allocate.EdgeSubscribe)
	}
	if m.clearedemployee {
		edges = append(edges, allocate.EdgeEmployee)
	}
	if m.clearedcabinet {
		edges = append(edges, allocate.EdgeCabinet)
	}
	if m.clearedstore {
		edges = append(edges, allocate.EdgeStore)
	}
	if m.clearedebike {
		edges = append(edges, allocate.EdgeEbike)
	}
	if m.clearedbrand {
		edges = append(edges, allocate.EdgeBrand)
	}
	if m.clearedcontract {
		edges = append(edges, allocate.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AllocateMutation) EdgeCleared(name string) bool {
	switch name {
	case allocate.EdgeRider:
		return m.clearedrider
	case allocate.EdgeSubscribe:
		return m.clearedsubscribe
	case allocate.EdgeEmployee:
		return m.clearedemployee
	case allocate.EdgeCabinet:
		return m.clearedcabinet
	case allocate.EdgeStore:
		return m.clearedstore
	case allocate.EdgeEbike:
		return m.clearedebike
	case allocate.EdgeBrand:
		return m.clearedbrand
	case allocate.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AllocateMutation) ClearEdge(name string) error {
	switch name {
	case allocate.EdgeRider:
		m.ClearRider()
		return nil
	case allocate.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case allocate.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case allocate.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case allocate.EdgeStore:
		m.ClearStore()
		return nil
	case allocate.EdgeEbike:
		m.ClearEbike()
		return nil
	case allocate.EdgeBrand:
		m.ClearBrand()
		return nil
	case allocate.EdgeContract:
		m.ClearContract()
		return nil
	}
	return fmt.Errorf("unknown Allocate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AllocateMutation) ResetEdge(name string) error {
	switch name {
	case allocate.EdgeRider:
		m.ResetRider()
		return nil
	case allocate.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case allocate.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case allocate.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case allocate.EdgeStore:
		m.ResetStore()
		return nil
	case allocate.EdgeEbike:
		m.ResetEbike()
		return nil
	case allocate.EdgeBrand:
		m.ResetBrand()
		return nil
	case allocate.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown Allocate edge %s", name)
}

