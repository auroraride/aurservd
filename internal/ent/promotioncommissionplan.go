// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionPlan is the model entity for the PromotionCommissionPlan schema.
type PromotionCommissionPlan struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID *uint64 `json:"member_id,omitempty"`
	// CommissionID holds the value of the "commission_id" field.
	CommissionID uint64 `json:"commission_id,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	PlanID uint64 `json:"plan_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionCommissionPlanQuery when eager-loading is set.
	Edges        PromotionCommissionPlanEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionCommissionPlanEdges holds the relations/edges for other nodes in the graph.
type PromotionCommissionPlanEdges struct {
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// PromotionCommission holds the value of the promotion_commission edge.
	PromotionCommission *PromotionCommission `json:"promotion_commission,omitempty"`
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionCommissionPlanEdges) MemberOrErr() (*PromotionMember, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: promotionmember.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// PromotionCommissionOrErr returns the PromotionCommission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionCommissionPlanEdges) PromotionCommissionOrErr() (*PromotionCommission, error) {
	if e.PromotionCommission != nil {
		return e.PromotionCommission, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: promotioncommission.Label}
	}
	return nil, &NotLoadedError{edge: "promotion_commission"}
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionCommissionPlanEdges) PlanOrErr() (*Plan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: plan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionCommissionPlan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotioncommissionplan.FieldID, promotioncommissionplan.FieldMemberID, promotioncommissionplan.FieldCommissionID, promotioncommissionplan.FieldPlanID:
			values[i] = new(sql.NullInt64)
		case promotioncommissionplan.FieldCreatedAt, promotioncommissionplan.FieldUpdatedAt, promotioncommissionplan.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionCommissionPlan fields.
func (pcp *PromotionCommissionPlan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotioncommissionplan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pcp.ID = uint64(value.Int64)
		case promotioncommissionplan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pcp.CreatedAt = value.Time
			}
		case promotioncommissionplan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pcp.UpdatedAt = value.Time
			}
		case promotioncommissionplan.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pcp.DeletedAt = new(time.Time)
				*pcp.DeletedAt = value.Time
			}
		case promotioncommissionplan.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pcp.MemberID = new(uint64)
				*pcp.MemberID = uint64(value.Int64)
			}
		case promotioncommissionplan.FieldCommissionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field commission_id", values[i])
			} else if value.Valid {
				pcp.CommissionID = uint64(value.Int64)
			}
		case promotioncommissionplan.FieldPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				pcp.PlanID = uint64(value.Int64)
			}
		default:
			pcp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionCommissionPlan.
// This includes values selected through modifiers, order, etc.
func (pcp *PromotionCommissionPlan) Value(name string) (ent.Value, error) {
	return pcp.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PromotionCommissionPlan entity.
func (pcp *PromotionCommissionPlan) QueryMember() *PromotionMemberQuery {
	return NewPromotionCommissionPlanClient(pcp.config).QueryMember(pcp)
}

// QueryPromotionCommission queries the "promotion_commission" edge of the PromotionCommissionPlan entity.
func (pcp *PromotionCommissionPlan) QueryPromotionCommission() *PromotionCommissionQuery {
	return NewPromotionCommissionPlanClient(pcp.config).QueryPromotionCommission(pcp)
}

// QueryPlan queries the "plan" edge of the PromotionCommissionPlan entity.
func (pcp *PromotionCommissionPlan) QueryPlan() *PlanQuery {
	return NewPromotionCommissionPlanClient(pcp.config).QueryPlan(pcp)
}

// Update returns a builder for updating this PromotionCommissionPlan.
// Note that you need to call PromotionCommissionPlan.Unwrap() before calling this method if this PromotionCommissionPlan
// was returned from a transaction, and the transaction was committed or rolled back.
func (pcp *PromotionCommissionPlan) Update() *PromotionCommissionPlanUpdateOne {
	return NewPromotionCommissionPlanClient(pcp.config).UpdateOne(pcp)
}

// Unwrap unwraps the PromotionCommissionPlan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pcp *PromotionCommissionPlan) Unwrap() *PromotionCommissionPlan {
	_tx, ok := pcp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionCommissionPlan is not a transactional entity")
	}
	pcp.config.driver = _tx.drv
	return pcp
}

// String implements the fmt.Stringer.
func (pcp *PromotionCommissionPlan) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionCommissionPlan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pcp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pcp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pcp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pcp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pcp.MemberID; v != nil {
		builder.WriteString("member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("commission_id=")
	builder.WriteString(fmt.Sprintf("%v", pcp.CommissionID))
	builder.WriteString(", ")
	builder.WriteString("plan_id=")
	builder.WriteString(fmt.Sprintf("%v", pcp.PlanID))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionCommissionPlans is a parsable slice of PromotionCommissionPlan.
type PromotionCommissionPlans []*PromotionCommissionPlan
