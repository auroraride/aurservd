// Code generated by ent, DO NOT EDIT.

package pointlog

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the pointlog type in the database.
	Label = "point_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldOrderID holds the string denoting the order_id field in the database.
	FieldOrderID = "order_id"
	// FieldModifier holds the string denoting the modifier field in the database.
	FieldModifier = "modifier"
	// FieldEmployeeInfo holds the string denoting the employee_info field in the database.
	FieldEmployeeInfo = "employee_info"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldAfter holds the string denoting the after field in the database.
	FieldAfter = "after"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldAttach holds the string denoting the attach field in the database.
	FieldAttach = "attach"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeOrder holds the string denoting the order edge name in mutations.
	EdgeOrder = "order"
	// Table holds the table name of the pointlog in the database.
	Table = "point_log"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "point_log"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// OrderTable is the table that holds the order relation/edge.
	OrderTable = "point_log"
	// OrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrderInverseTable = "order"
	// OrderColumn is the table column denoting the order relation/edge.
	OrderColumn = "order_id"
)

// Columns holds all SQL columns for pointlog fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRiderID,
	FieldOrderID,
	FieldModifier,
	FieldEmployeeInfo,
	FieldType,
	FieldPoints,
	FieldAfter,
	FieldReason,
	FieldAttach,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
