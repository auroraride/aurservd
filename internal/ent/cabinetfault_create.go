// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetFaultCreate is the builder for creating a CabinetFault entity.
type CabinetFaultCreate struct {
	config
	mutation *CabinetFaultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cfc *CabinetFaultCreate) SetCreatedAt(t time.Time) *CabinetFaultCreate {
	cfc.mutation.SetCreatedAt(t)
	return cfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableCreatedAt(t *time.Time) *CabinetFaultCreate {
	if t != nil {
		cfc.SetCreatedAt(*t)
	}
	return cfc
}

// SetUpdatedAt sets the "updated_at" field.
func (cfc *CabinetFaultCreate) SetUpdatedAt(t time.Time) *CabinetFaultCreate {
	cfc.mutation.SetUpdatedAt(t)
	return cfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableUpdatedAt(t *time.Time) *CabinetFaultCreate {
	if t != nil {
		cfc.SetUpdatedAt(*t)
	}
	return cfc
}

// SetDeletedAt sets the "deleted_at" field.
func (cfc *CabinetFaultCreate) SetDeletedAt(t time.Time) *CabinetFaultCreate {
	cfc.mutation.SetDeletedAt(t)
	return cfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableDeletedAt(t *time.Time) *CabinetFaultCreate {
	if t != nil {
		cfc.SetDeletedAt(*t)
	}
	return cfc
}

// SetCreator sets the "creator" field.
func (cfc *CabinetFaultCreate) SetCreator(m *model.Modifier) *CabinetFaultCreate {
	cfc.mutation.SetCreator(m)
	return cfc
}

// SetLastModifier sets the "last_modifier" field.
func (cfc *CabinetFaultCreate) SetLastModifier(m *model.Modifier) *CabinetFaultCreate {
	cfc.mutation.SetLastModifier(m)
	return cfc
}

// SetRemark sets the "remark" field.
func (cfc *CabinetFaultCreate) SetRemark(s string) *CabinetFaultCreate {
	cfc.mutation.SetRemark(s)
	return cfc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableRemark(s *string) *CabinetFaultCreate {
	if s != nil {
		cfc.SetRemark(*s)
	}
	return cfc
}

// SetCityID sets the "city_id" field.
func (cfc *CabinetFaultCreate) SetCityID(u uint64) *CabinetFaultCreate {
	cfc.mutation.SetCityID(u)
	return cfc
}

// SetStatus sets the "status" field.
func (cfc *CabinetFaultCreate) SetStatus(u uint8) *CabinetFaultCreate {
	cfc.mutation.SetStatus(u)
	return cfc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableStatus(u *uint8) *CabinetFaultCreate {
	if u != nil {
		cfc.SetStatus(*u)
	}
	return cfc
}

// SetBranchID sets the "branch_id" field.
func (cfc *CabinetFaultCreate) SetBranchID(u uint64) *CabinetFaultCreate {
	cfc.mutation.SetBranchID(u)
	return cfc
}

// SetCabinetID sets the "cabinet_id" field.
func (cfc *CabinetFaultCreate) SetCabinetID(u uint64) *CabinetFaultCreate {
	cfc.mutation.SetCabinetID(u)
	return cfc
}

// SetRiderID sets the "rider_id" field.
func (cfc *CabinetFaultCreate) SetRiderID(u uint64) *CabinetFaultCreate {
	cfc.mutation.SetRiderID(u)
	return cfc
}

// SetFault sets the "fault" field.
func (cfc *CabinetFaultCreate) SetFault(s string) *CabinetFaultCreate {
	cfc.mutation.SetFault(s)
	return cfc
}

// SetNillableFault sets the "fault" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableFault(s *string) *CabinetFaultCreate {
	if s != nil {
		cfc.SetFault(*s)
	}
	return cfc
}

// SetAttachments sets the "attachments" field.
func (cfc *CabinetFaultCreate) SetAttachments(s []string) *CabinetFaultCreate {
	cfc.mutation.SetAttachments(s)
	return cfc
}

// SetDescription sets the "description" field.
func (cfc *CabinetFaultCreate) SetDescription(s string) *CabinetFaultCreate {
	cfc.mutation.SetDescription(s)
	return cfc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cfc *CabinetFaultCreate) SetNillableDescription(s *string) *CabinetFaultCreate {
	if s != nil {
		cfc.SetDescription(*s)
	}
	return cfc
}

// SetCity sets the "city" edge to the City entity.
func (cfc *CabinetFaultCreate) SetCity(c *City) *CabinetFaultCreate {
	return cfc.SetCityID(c.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cfc *CabinetFaultCreate) SetBranch(b *Branch) *CabinetFaultCreate {
	return cfc.SetBranchID(b.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cfc *CabinetFaultCreate) SetCabinet(c *Cabinet) *CabinetFaultCreate {
	return cfc.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cfc *CabinetFaultCreate) SetRider(r *Rider) *CabinetFaultCreate {
	return cfc.SetRiderID(r.ID)
}

// Mutation returns the CabinetFaultMutation object of the builder.
func (cfc *CabinetFaultCreate) Mutation() *CabinetFaultMutation {
	return cfc.mutation
}

// Save creates the CabinetFault in the database.
func (cfc *CabinetFaultCreate) Save(ctx context.Context) (*CabinetFault, error) {
	var (
		err  error
		node *CabinetFault
	)
	if err := cfc.defaults(); err != nil {
		return nil, err
	}
	if len(cfc.hooks) == 0 {
		if err = cfc.check(); err != nil {
			return nil, err
		}
		node, err = cfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetFaultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfc.check(); err != nil {
				return nil, err
			}
			cfc.mutation = mutation
			if node, err = cfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cfc.hooks) - 1; i >= 0; i-- {
			if cfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cfc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CabinetFault)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CabinetFaultMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CabinetFaultCreate) SaveX(ctx context.Context) *CabinetFault {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CabinetFaultCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CabinetFaultCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cfc *CabinetFaultCreate) defaults() error {
	if _, ok := cfc.mutation.CreatedAt(); !ok {
		if cabinetfault.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetfault.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetfault.DefaultCreatedAt()
		cfc.mutation.SetCreatedAt(v)
	}
	if _, ok := cfc.mutation.UpdatedAt(); !ok {
		if cabinetfault.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetfault.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetfault.DefaultUpdatedAt()
		cfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cfc.mutation.Status(); !ok {
		v := cabinetfault.DefaultStatus
		cfc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CabinetFaultCreate) check() error {
	if _, ok := cfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CabinetFault.created_at"`)}
	}
	if _, ok := cfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CabinetFault.updated_at"`)}
	}
	if _, ok := cfc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "CabinetFault.city_id"`)}
	}
	if _, ok := cfc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CabinetFault.status"`)}
	}
	if _, ok := cfc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch_id", err: errors.New(`ent: missing required field "CabinetFault.branch_id"`)}
	}
	if _, ok := cfc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "CabinetFault.cabinet_id"`)}
	}
	if _, ok := cfc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "CabinetFault.rider_id"`)}
	}
	if _, ok := cfc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "CabinetFault.city"`)}
	}
	if _, ok := cfc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required edge "CabinetFault.branch"`)}
	}
	if _, ok := cfc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "CabinetFault.cabinet"`)}
	}
	if _, ok := cfc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "CabinetFault.rider"`)}
	}
	return nil
}

func (cfc *CabinetFaultCreate) sqlSave(ctx context.Context) (*CabinetFault, error) {
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (cfc *CabinetFaultCreate) createSpec() (*CabinetFault, *sqlgraph.CreateSpec) {
	var (
		_node = &CabinetFault{config: cfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cabinetfault.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetfault.FieldID,
			},
		}
	)
	_spec.OnConflict = cfc.conflict
	if value, ok := cfc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetfault.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cfc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetfault.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cfc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetfault.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := cfc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetfault.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := cfc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetfault.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := cfc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetfault.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := cfc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: cabinetfault.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cfc.mutation.Fault(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetfault.FieldFault,
		})
		_node.Fault = value
	}
	if value, ok := cfc.mutation.Attachments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetfault.FieldAttachments,
		})
		_node.Attachments = value
	}
	if value, ok := cfc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetfault.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := cfc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetfault.CityTable,
			Columns: []string{cabinetfault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cfc.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.BranchTable,
			Columns: []string{cabinetfault.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BranchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cfc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.CabinetTable,
			Columns: []string{cabinetfault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cfc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetfault.RiderTable,
			Columns: []string{cabinetfault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetFault.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetFaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cfc *CabinetFaultCreate) OnConflict(opts ...sql.ConflictOption) *CabinetFaultUpsertOne {
	cfc.conflict = opts
	return &CabinetFaultUpsertOne{
		create: cfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfc *CabinetFaultCreate) OnConflictColumns(columns ...string) *CabinetFaultUpsertOne {
	cfc.conflict = append(cfc.conflict, sql.ConflictColumns(columns...))
	return &CabinetFaultUpsertOne{
		create: cfc,
	}
}

type (
	// CabinetFaultUpsertOne is the builder for "upsert"-ing
	//  one CabinetFault node.
	CabinetFaultUpsertOne struct {
		create *CabinetFaultCreate
	}

	// CabinetFaultUpsert is the "OnConflict" setter.
	CabinetFaultUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CabinetFaultUpsert) SetCreatedAt(v time.Time) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateCreatedAt() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetFaultUpsert) SetUpdatedAt(v time.Time) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateUpdatedAt() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetFaultUpsert) SetDeletedAt(v time.Time) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateDeletedAt() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetFaultUpsert) ClearDeletedAt() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *CabinetFaultUpsert) SetCreator(v *model.Modifier) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateCreator() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetFaultUpsert) ClearCreator() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetFaultUpsert) SetLastModifier(v *model.Modifier) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateLastModifier() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetFaultUpsert) ClearLastModifier() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CabinetFaultUpsert) SetRemark(v string) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateRemark() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetFaultUpsert) ClearRemark() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *CabinetFaultUpsert) SetCityID(v uint64) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateCityID() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldCityID)
	return u
}

// SetStatus sets the "status" field.
func (u *CabinetFaultUpsert) SetStatus(v uint8) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateStatus() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CabinetFaultUpsert) AddStatus(v uint8) *CabinetFaultUpsert {
	u.Add(cabinetfault.FieldStatus, v)
	return u
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetFaultUpsert) SetBranchID(v uint64) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldBranchID, v)
	return u
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateBranchID() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldBranchID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetFaultUpsert) SetCabinetID(v uint64) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateCabinetID() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldCabinetID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetFaultUpsert) SetRiderID(v uint64) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateRiderID() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldRiderID)
	return u
}

// SetFault sets the "fault" field.
func (u *CabinetFaultUpsert) SetFault(v string) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldFault, v)
	return u
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateFault() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldFault)
	return u
}

// ClearFault clears the value of the "fault" field.
func (u *CabinetFaultUpsert) ClearFault() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldFault)
	return u
}

// SetAttachments sets the "attachments" field.
func (u *CabinetFaultUpsert) SetAttachments(v []string) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldAttachments, v)
	return u
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateAttachments() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldAttachments)
	return u
}

// ClearAttachments clears the value of the "attachments" field.
func (u *CabinetFaultUpsert) ClearAttachments() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldAttachments)
	return u
}

// SetDescription sets the "description" field.
func (u *CabinetFaultUpsert) SetDescription(v string) *CabinetFaultUpsert {
	u.Set(cabinetfault.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CabinetFaultUpsert) UpdateDescription() *CabinetFaultUpsert {
	u.SetExcluded(cabinetfault.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *CabinetFaultUpsert) ClearDescription() *CabinetFaultUpsert {
	u.SetNull(cabinetfault.FieldDescription)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetFaultUpsertOne) UpdateNewValues() *CabinetFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinetfault.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(cabinetfault.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CabinetFaultUpsertOne) Ignore() *CabinetFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetFaultUpsertOne) DoNothing() *CabinetFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetFaultCreate.OnConflict
// documentation for more info.
func (u *CabinetFaultUpsertOne) Update(set func(*CabinetFaultUpsert)) *CabinetFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetFaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetFaultUpsertOne) SetCreatedAt(v time.Time) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateCreatedAt() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetFaultUpsertOne) SetUpdatedAt(v time.Time) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateUpdatedAt() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetFaultUpsertOne) SetDeletedAt(v time.Time) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateDeletedAt() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetFaultUpsertOne) ClearDeletedAt() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetFaultUpsertOne) SetCreator(v *model.Modifier) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateCreator() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetFaultUpsertOne) ClearCreator() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetFaultUpsertOne) SetLastModifier(v *model.Modifier) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateLastModifier() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetFaultUpsertOne) ClearLastModifier() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetFaultUpsertOne) SetRemark(v string) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateRemark() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetFaultUpsertOne) ClearRemark() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *CabinetFaultUpsertOne) SetCityID(v uint64) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateCityID() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCityID()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetFaultUpsertOne) SetStatus(v uint8) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetFaultUpsertOne) AddStatus(v uint8) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateStatus() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateStatus()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetFaultUpsertOne) SetBranchID(v uint64) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateBranchID() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateBranchID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetFaultUpsertOne) SetCabinetID(v uint64) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateCabinetID() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetFaultUpsertOne) SetRiderID(v uint64) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateRiderID() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateRiderID()
	})
}

// SetFault sets the "fault" field.
func (u *CabinetFaultUpsertOne) SetFault(v string) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateFault() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateFault()
	})
}

// ClearFault clears the value of the "fault" field.
func (u *CabinetFaultUpsertOne) ClearFault() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearFault()
	})
}

// SetAttachments sets the "attachments" field.
func (u *CabinetFaultUpsertOne) SetAttachments(v []string) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateAttachments() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *CabinetFaultUpsertOne) ClearAttachments() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearAttachments()
	})
}

// SetDescription sets the "description" field.
func (u *CabinetFaultUpsertOne) SetDescription(v string) *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CabinetFaultUpsertOne) UpdateDescription() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CabinetFaultUpsertOne) ClearDescription() *CabinetFaultUpsertOne {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *CabinetFaultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetFaultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetFaultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetFaultUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetFaultUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CabinetFaultCreateBulk is the builder for creating many CabinetFault entities in bulk.
type CabinetFaultCreateBulk struct {
	config
	builders []*CabinetFaultCreate
	conflict []sql.ConflictOption
}

// Save creates the CabinetFault entities in the database.
func (cfcb *CabinetFaultCreateBulk) Save(ctx context.Context) ([]*CabinetFault, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CabinetFault, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetFaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CabinetFaultCreateBulk) SaveX(ctx context.Context) []*CabinetFault {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CabinetFaultCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CabinetFaultCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetFault.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetFaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cfcb *CabinetFaultCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetFaultUpsertBulk {
	cfcb.conflict = opts
	return &CabinetFaultUpsertBulk{
		create: cfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cfcb *CabinetFaultCreateBulk) OnConflictColumns(columns ...string) *CabinetFaultUpsertBulk {
	cfcb.conflict = append(cfcb.conflict, sql.ConflictColumns(columns...))
	return &CabinetFaultUpsertBulk{
		create: cfcb,
	}
}

// CabinetFaultUpsertBulk is the builder for "upsert"-ing
// a bulk of CabinetFault nodes.
type CabinetFaultUpsertBulk struct {
	create *CabinetFaultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetFaultUpsertBulk) UpdateNewValues() *CabinetFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinetfault.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(cabinetfault.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetFault.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CabinetFaultUpsertBulk) Ignore() *CabinetFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetFaultUpsertBulk) DoNothing() *CabinetFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetFaultCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetFaultUpsertBulk) Update(set func(*CabinetFaultUpsert)) *CabinetFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetFaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetFaultUpsertBulk) SetCreatedAt(v time.Time) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateCreatedAt() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetFaultUpsertBulk) SetUpdatedAt(v time.Time) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateUpdatedAt() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetFaultUpsertBulk) SetDeletedAt(v time.Time) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateDeletedAt() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetFaultUpsertBulk) ClearDeletedAt() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetFaultUpsertBulk) SetCreator(v *model.Modifier) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateCreator() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetFaultUpsertBulk) ClearCreator() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetFaultUpsertBulk) SetLastModifier(v *model.Modifier) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateLastModifier() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetFaultUpsertBulk) ClearLastModifier() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetFaultUpsertBulk) SetRemark(v string) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateRemark() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetFaultUpsertBulk) ClearRemark() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *CabinetFaultUpsertBulk) SetCityID(v uint64) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateCityID() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCityID()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetFaultUpsertBulk) SetStatus(v uint8) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetFaultUpsertBulk) AddStatus(v uint8) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateStatus() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateStatus()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetFaultUpsertBulk) SetBranchID(v uint64) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateBranchID() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateBranchID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetFaultUpsertBulk) SetCabinetID(v uint64) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateCabinetID() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetFaultUpsertBulk) SetRiderID(v uint64) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateRiderID() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateRiderID()
	})
}

// SetFault sets the "fault" field.
func (u *CabinetFaultUpsertBulk) SetFault(v string) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateFault() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateFault()
	})
}

// ClearFault clears the value of the "fault" field.
func (u *CabinetFaultUpsertBulk) ClearFault() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearFault()
	})
}

// SetAttachments sets the "attachments" field.
func (u *CabinetFaultUpsertBulk) SetAttachments(v []string) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateAttachments() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *CabinetFaultUpsertBulk) ClearAttachments() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearAttachments()
	})
}

// SetDescription sets the "description" field.
func (u *CabinetFaultUpsertBulk) SetDescription(v string) *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *CabinetFaultUpsertBulk) UpdateDescription() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *CabinetFaultUpsertBulk) ClearDescription() *CabinetFaultUpsertBulk {
	return u.Update(func(s *CabinetFaultUpsert) {
		s.ClearDescription()
	})
}

// Exec executes the query.
func (u *CabinetFaultUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetFaultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetFaultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetFaultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
