// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetRoleUpdate is the builder for updating AssetRole entities.
type AssetRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetRoleUpdate builder.
func (aru *AssetRoleUpdate) Where(ps ...predicate.AssetRole) *AssetRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetName sets the "name" field.
func (aru *AssetRoleUpdate) SetName(s string) *AssetRoleUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aru *AssetRoleUpdate) SetNillableName(s *string) *AssetRoleUpdate {
	if s != nil {
		aru.SetName(*s)
	}
	return aru
}

// SetPermissions sets the "permissions" field.
func (aru *AssetRoleUpdate) SetPermissions(s []string) *AssetRoleUpdate {
	aru.mutation.SetPermissions(s)
	return aru
}

// AppendPermissions appends s to the "permissions" field.
func (aru *AssetRoleUpdate) AppendPermissions(s []string) *AssetRoleUpdate {
	aru.mutation.AppendPermissions(s)
	return aru
}

// ClearPermissions clears the value of the "permissions" field.
func (aru *AssetRoleUpdate) ClearPermissions() *AssetRoleUpdate {
	aru.mutation.ClearPermissions()
	return aru
}

// SetBuildin sets the "buildin" field.
func (aru *AssetRoleUpdate) SetBuildin(b bool) *AssetRoleUpdate {
	aru.mutation.SetBuildin(b)
	return aru
}

// SetNillableBuildin sets the "buildin" field if the given value is not nil.
func (aru *AssetRoleUpdate) SetNillableBuildin(b *bool) *AssetRoleUpdate {
	if b != nil {
		aru.SetBuildin(*b)
	}
	return aru
}

// SetSuper sets the "super" field.
func (aru *AssetRoleUpdate) SetSuper(b bool) *AssetRoleUpdate {
	aru.mutation.SetSuper(b)
	return aru
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (aru *AssetRoleUpdate) SetNillableSuper(b *bool) *AssetRoleUpdate {
	if b != nil {
		aru.SetSuper(*b)
	}
	return aru
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (aru *AssetRoleUpdate) AddAssetManagerIDs(ids ...uint64) *AssetRoleUpdate {
	aru.mutation.AddAssetManagerIDs(ids...)
	return aru
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (aru *AssetRoleUpdate) AddAssetManagers(a ...*AssetManager) *AssetRoleUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAssetManagerIDs(ids...)
}

// Mutation returns the AssetRoleMutation object of the builder.
func (aru *AssetRoleUpdate) Mutation() *AssetRoleMutation {
	return aru.mutation
}

// ClearAssetManagers clears all "asset_managers" edges to the AssetManager entity.
func (aru *AssetRoleUpdate) ClearAssetManagers() *AssetRoleUpdate {
	aru.mutation.ClearAssetManagers()
	return aru
}

// RemoveAssetManagerIDs removes the "asset_managers" edge to AssetManager entities by IDs.
func (aru *AssetRoleUpdate) RemoveAssetManagerIDs(ids ...uint64) *AssetRoleUpdate {
	aru.mutation.RemoveAssetManagerIDs(ids...)
	return aru
}

// RemoveAssetManagers removes "asset_managers" edges to AssetManager entities.
func (aru *AssetRoleUpdate) RemoveAssetManagers(a ...*AssetManager) *AssetRoleUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAssetManagerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AssetRoleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AssetRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AssetRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AssetRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aru *AssetRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetRoleUpdate {
	aru.modifiers = append(aru.modifiers, modifiers...)
	return aru
}

func (aru *AssetRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetrole.Table, assetrole.Columns, sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.SetField(assetrole.FieldName, field.TypeString, value)
	}
	if value, ok := aru.mutation.Permissions(); ok {
		_spec.SetField(assetrole.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := aru.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assetrole.FieldPermissions, value)
		})
	}
	if aru.mutation.PermissionsCleared() {
		_spec.ClearField(assetrole.FieldPermissions, field.TypeJSON)
	}
	if value, ok := aru.mutation.Buildin(); ok {
		_spec.SetField(assetrole.FieldBuildin, field.TypeBool, value)
	}
	if value, ok := aru.mutation.Super(); ok {
		_spec.SetField(assetrole.FieldSuper, field.TypeBool, value)
	}
	if aru.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAssetManagersIDs(); len(nodes) > 0 && !aru.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AssetRoleUpdateOne is the builder for updating a single AssetRole entity.
type AssetRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (aruo *AssetRoleUpdateOne) SetName(s string) *AssetRoleUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aruo *AssetRoleUpdateOne) SetNillableName(s *string) *AssetRoleUpdateOne {
	if s != nil {
		aruo.SetName(*s)
	}
	return aruo
}

// SetPermissions sets the "permissions" field.
func (aruo *AssetRoleUpdateOne) SetPermissions(s []string) *AssetRoleUpdateOne {
	aruo.mutation.SetPermissions(s)
	return aruo
}

// AppendPermissions appends s to the "permissions" field.
func (aruo *AssetRoleUpdateOne) AppendPermissions(s []string) *AssetRoleUpdateOne {
	aruo.mutation.AppendPermissions(s)
	return aruo
}

// ClearPermissions clears the value of the "permissions" field.
func (aruo *AssetRoleUpdateOne) ClearPermissions() *AssetRoleUpdateOne {
	aruo.mutation.ClearPermissions()
	return aruo
}

// SetBuildin sets the "buildin" field.
func (aruo *AssetRoleUpdateOne) SetBuildin(b bool) *AssetRoleUpdateOne {
	aruo.mutation.SetBuildin(b)
	return aruo
}

// SetNillableBuildin sets the "buildin" field if the given value is not nil.
func (aruo *AssetRoleUpdateOne) SetNillableBuildin(b *bool) *AssetRoleUpdateOne {
	if b != nil {
		aruo.SetBuildin(*b)
	}
	return aruo
}

// SetSuper sets the "super" field.
func (aruo *AssetRoleUpdateOne) SetSuper(b bool) *AssetRoleUpdateOne {
	aruo.mutation.SetSuper(b)
	return aruo
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (aruo *AssetRoleUpdateOne) SetNillableSuper(b *bool) *AssetRoleUpdateOne {
	if b != nil {
		aruo.SetSuper(*b)
	}
	return aruo
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (aruo *AssetRoleUpdateOne) AddAssetManagerIDs(ids ...uint64) *AssetRoleUpdateOne {
	aruo.mutation.AddAssetManagerIDs(ids...)
	return aruo
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (aruo *AssetRoleUpdateOne) AddAssetManagers(a ...*AssetManager) *AssetRoleUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAssetManagerIDs(ids...)
}

// Mutation returns the AssetRoleMutation object of the builder.
func (aruo *AssetRoleUpdateOne) Mutation() *AssetRoleMutation {
	return aruo.mutation
}

// ClearAssetManagers clears all "asset_managers" edges to the AssetManager entity.
func (aruo *AssetRoleUpdateOne) ClearAssetManagers() *AssetRoleUpdateOne {
	aruo.mutation.ClearAssetManagers()
	return aruo
}

// RemoveAssetManagerIDs removes the "asset_managers" edge to AssetManager entities by IDs.
func (aruo *AssetRoleUpdateOne) RemoveAssetManagerIDs(ids ...uint64) *AssetRoleUpdateOne {
	aruo.mutation.RemoveAssetManagerIDs(ids...)
	return aruo
}

// RemoveAssetManagers removes "asset_managers" edges to AssetManager entities.
func (aruo *AssetRoleUpdateOne) RemoveAssetManagers(a ...*AssetManager) *AssetRoleUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAssetManagerIDs(ids...)
}

// Where appends a list predicates to the AssetRoleUpdate builder.
func (aruo *AssetRoleUpdateOne) Where(ps ...predicate.AssetRole) *AssetRoleUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AssetRoleUpdateOne) Select(field string, fields ...string) *AssetRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AssetRole entity.
func (aruo *AssetRoleUpdateOne) Save(ctx context.Context) (*AssetRole, error) {
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AssetRoleUpdateOne) SaveX(ctx context.Context) *AssetRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AssetRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AssetRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruo *AssetRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetRoleUpdateOne {
	aruo.modifiers = append(aruo.modifiers, modifiers...)
	return aruo
}

func (aruo *AssetRoleUpdateOne) sqlSave(ctx context.Context) (_node *AssetRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetrole.Table, assetrole.Columns, sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetrole.FieldID)
		for _, f := range fields {
			if !assetrole.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetrole.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.SetField(assetrole.FieldName, field.TypeString, value)
	}
	if value, ok := aruo.mutation.Permissions(); ok {
		_spec.SetField(assetrole.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := aruo.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assetrole.FieldPermissions, value)
		})
	}
	if aruo.mutation.PermissionsCleared() {
		_spec.ClearField(assetrole.FieldPermissions, field.TypeJSON)
	}
	if value, ok := aruo.mutation.Buildin(); ok {
		_spec.SetField(assetrole.FieldBuildin, field.TypeBool, value)
	}
	if value, ok := aruo.mutation.Super(); ok {
		_spec.SetField(assetrole.FieldSuper, field.TypeBool, value)
	}
	if aruo.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAssetManagersIDs(); len(nodes) > 0 && !aruo.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetrole.AssetManagersTable,
			Columns: []string{assetrole.AssetManagersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aruo.modifiers...)
	_node = &AssetRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetrole.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
