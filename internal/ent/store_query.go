// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StoreQuery is the builder for querying Store entities.
type StoreQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Store
	// eager-loading edges.
	withCity        *CityQuery
	withBranch      *BranchQuery
	withEmployee    *EmployeeQuery
	withStocks      *StockQuery
	withAttendances *AttendanceQuery
	withExceptions  *ExceptionQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StoreQuery builder.
func (sq *StoreQuery) Where(ps ...predicate.Store) *StoreQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit adds a limit step to the query.
func (sq *StoreQuery) Limit(limit int) *StoreQuery {
	sq.limit = &limit
	return sq
}

// Offset adds an offset step to the query.
func (sq *StoreQuery) Offset(offset int) *StoreQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StoreQuery) Unique(unique bool) *StoreQuery {
	sq.unique = &unique
	return sq
}

// Order adds an order step to the query.
func (sq *StoreQuery) Order(o ...OrderFunc) *StoreQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryCity chains the current query on the "city" edge.
func (sq *StoreQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.CityTable, store.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBranch chains the current query on the "branch" edge.
func (sq *StoreQuery) QueryBranch() *BranchQuery {
	query := &BranchQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, store.BranchTable, store.BranchColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (sq *StoreQuery) QueryEmployee() *EmployeeQuery {
	query := &EmployeeQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, store.EmployeeTable, store.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (sq *StoreQuery) QueryStocks() *StockQuery {
	query := &StockQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.StocksTable, store.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttendances chains the current query on the "attendances" edge.
func (sq *StoreQuery) QueryAttendances() *AttendanceQuery {
	query := &AttendanceQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.AttendancesTable, store.AttendancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExceptions chains the current query on the "exceptions" edge.
func (sq *StoreQuery) QueryExceptions() *ExceptionQuery {
	query := &ExceptionQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(exception.Table, exception.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.ExceptionsTable, store.ExceptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Store entity from the query.
// Returns a *NotFoundError when no Store was found.
func (sq *StoreQuery) First(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{store.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StoreQuery) FirstX(ctx context.Context) *Store {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Store ID from the query.
// Returns a *NotFoundError when no Store ID was found.
func (sq *StoreQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{store.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StoreQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Store entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Store entity is found.
// Returns a *NotFoundError when no Store entities are found.
func (sq *StoreQuery) Only(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{store.Label}
	default:
		return nil, &NotSingularError{store.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StoreQuery) OnlyX(ctx context.Context) *Store {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Store ID in the query.
// Returns a *NotSingularError when more than one Store ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StoreQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{store.Label}
	default:
		err = &NotSingularError{store.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StoreQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Stores.
func (sq *StoreQuery) All(ctx context.Context) ([]*Store, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sq *StoreQuery) AllX(ctx context.Context) []*Store {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Store IDs.
func (sq *StoreQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := sq.Select(store.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StoreQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StoreQuery) Count(ctx context.Context) (int, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StoreQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StoreQuery) Exist(ctx context.Context) (bool, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StoreQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StoreQuery) Clone() *StoreQuery {
	if sq == nil {
		return nil
	}
	return &StoreQuery{
		config:          sq.config,
		limit:           sq.limit,
		offset:          sq.offset,
		order:           append([]OrderFunc{}, sq.order...),
		predicates:      append([]predicate.Store{}, sq.predicates...),
		withCity:        sq.withCity.Clone(),
		withBranch:      sq.withBranch.Clone(),
		withEmployee:    sq.withEmployee.Clone(),
		withStocks:      sq.withStocks.Clone(),
		withAttendances: sq.withAttendances.Clone(),
		withExceptions:  sq.withExceptions.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithCity(opts ...func(*CityQuery)) *StoreQuery {
	query := &CityQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withCity = query
	return sq
}

// WithBranch tells the query-builder to eager-load the nodes that are connected to
// the "branch" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithBranch(opts ...func(*BranchQuery)) *StoreQuery {
	query := &BranchQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withBranch = query
	return sq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithEmployee(opts ...func(*EmployeeQuery)) *StoreQuery {
	query := &EmployeeQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withEmployee = query
	return sq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithStocks(opts ...func(*StockQuery)) *StoreQuery {
	query := &StockQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withStocks = query
	return sq
}

// WithAttendances tells the query-builder to eager-load the nodes that are connected to
// the "attendances" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithAttendances(opts ...func(*AttendanceQuery)) *StoreQuery {
	query := &AttendanceQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withAttendances = query
	return sq
}

// WithExceptions tells the query-builder to eager-load the nodes that are connected to
// the "exceptions" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithExceptions(opts ...func(*ExceptionQuery)) *StoreQuery {
	query := &ExceptionQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withExceptions = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Store.Query().
//		GroupBy(store.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sq *StoreQuery) GroupBy(field string, fields ...string) *StoreGroupBy {
	grbuild := &StoreGroupBy{config: sq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sq.sqlQuery(ctx), nil
	}
	grbuild.label = store.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Store.Query().
//		Select(store.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (sq *StoreQuery) Select(fields ...string) *StoreSelect {
	sq.fields = append(sq.fields, fields...)
	selbuild := &StoreSelect{StoreQuery: sq}
	selbuild.label = store.Label
	selbuild.flds, selbuild.scan = &sq.fields, selbuild.Scan
	return selbuild
}

func (sq *StoreQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sq.fields {
		if !store.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *StoreQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Store, error) {
	var (
		nodes       = []*Store{}
		_spec       = sq.querySpec()
		loadedTypes = [6]bool{
			sq.withCity != nil,
			sq.withBranch != nil,
			sq.withEmployee != nil,
			sq.withStocks != nil,
			sq.withAttendances != nil,
			sq.withExceptions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Store).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Store{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sq.withCity; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Store)
		for i := range nodes {
			fk := nodes[i].CityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(city.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.City = n
			}
		}
	}

	if query := sq.withBranch; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Store)
		for i := range nodes {
			fk := nodes[i].BranchID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(branch.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "branch_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Branch = n
			}
		}
	}

	if query := sq.withEmployee; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Store)
		for i := range nodes {
			if nodes[i].EmployeeID == nil {
				continue
			}
			fk := *nodes[i].EmployeeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(employee.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Employee = n
			}
		}
	}

	if query := sq.withStocks; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Store)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Stocks = []*Stock{}
		}
		query.withFKs = true
		query.Where(predicate.Stock(func(s *sql.Selector) {
			s.Where(sql.InValues(store.StocksColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.StoreID
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "store_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "store_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Stocks = append(node.Edges.Stocks, n)
		}
	}

	if query := sq.withAttendances; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Store)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Attendances = []*Attendance{}
		}
		query.Where(predicate.Attendance(func(s *sql.Selector) {
			s.Where(sql.InValues(store.AttendancesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.StoreID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "store_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Attendances = append(node.Edges.Attendances, n)
		}
	}

	if query := sq.withExceptions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Store)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Exceptions = []*Exception{}
		}
		query.Where(predicate.Exception(func(s *sql.Selector) {
			s.Where(sql.InValues(store.ExceptionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.StoreID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "store_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Exceptions = append(node.Edges.Exceptions, n)
		}
	}

	return nodes, nil
}

func (sq *StoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StoreQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sq *StoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for i := range fields {
			if fields[i] != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(store.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = store.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *StoreQuery) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// StoreGroupBy is the group-by builder for Store entities.
type StoreGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StoreGroupBy) Aggregate(fns ...AggregateFunc) *StoreGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgb *StoreGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sgb.path(ctx)
	if err != nil {
		return err
	}
	sgb.sql = query
	return sgb.sqlScan(ctx, v)
}

func (sgb *StoreGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sgb.fields {
		if !store.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgb *StoreGroupBy) sqlQuery() *sql.Selector {
	selector := sgb.sql.Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgb.fields)+len(sgb.fns))
		for _, f := range sgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgb.fields...)...)
}

// StoreSelect is the builder for selecting fields of Store entities.
type StoreSelect struct {
	*StoreQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StoreSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	ss.sql = ss.StoreQuery.sqlQuery(ctx)
	return ss.sqlScan(ctx, v)
}

func (ss *StoreSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ss.sql.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *StoreSelect) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
