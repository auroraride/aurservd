// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// StoreQuery is the builder for querying Store entities.
type StoreQuery struct {
	config
	ctx             *QueryContext
	order           []store.OrderOption
	inters          []Interceptor
	predicates      []predicate.Store
	withCity        *CityQuery
	withGroup       *StoreGroupQuery
	withBranch      *BranchQuery
	withEmployee    *EmployeeQuery
	withAsset       *AssetQuery
	withAttendances *AttendanceQuery
	withExceptions  *ExceptionQuery
	withGoods       *StoreGoodsQuery
	withEmployees   *EmployeeQuery
	withStocks      *StockQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StoreQuery builder.
func (sq *StoreQuery) Where(ps ...predicate.Store) *StoreQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *StoreQuery) Limit(limit int) *StoreQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *StoreQuery) Offset(offset int) *StoreQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StoreQuery) Unique(unique bool) *StoreQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *StoreQuery) Order(o ...store.OrderOption) *StoreQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryCity chains the current query on the "city" edge.
func (sq *StoreQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.CityTable, store.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (sq *StoreQuery) QueryGroup() *StoreGroupQuery {
	query := (&StoreGroupClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(storegroup.Table, storegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, store.GroupTable, store.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBranch chains the current query on the "branch" edge.
func (sq *StoreQuery) QueryBranch() *BranchQuery {
	query := (&BranchClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, store.BranchTable, store.BranchColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (sq *StoreQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, store.EmployeeTable, store.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (sq *StoreQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.AssetTable, store.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttendances chains the current query on the "attendances" edge.
func (sq *StoreQuery) QueryAttendances() *AttendanceQuery {
	query := (&AttendanceClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.AttendancesTable, store.AttendancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExceptions chains the current query on the "exceptions" edge.
func (sq *StoreQuery) QueryExceptions() *ExceptionQuery {
	query := (&ExceptionClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(exception.Table, exception.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.ExceptionsTable, store.ExceptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGoods chains the current query on the "goods" edge.
func (sq *StoreQuery) QueryGoods() *StoreGoodsQuery {
	query := (&StoreGoodsClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(storegoods.Table, storegoods.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.GoodsTable, store.GoodsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployees chains the current query on the "employees" edge.
func (sq *StoreQuery) QueryEmployees() *EmployeeQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, store.EmployeesTable, store.EmployeesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (sq *StoreQuery) QueryStocks() *StockQuery {
	query := (&StockClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(store.Table, store.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, store.StocksTable, store.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Store entity from the query.
// Returns a *NotFoundError when no Store was found.
func (sq *StoreQuery) First(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{store.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StoreQuery) FirstX(ctx context.Context) *Store {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Store ID from the query.
// Returns a *NotFoundError when no Store ID was found.
func (sq *StoreQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{store.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StoreQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Store entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Store entity is found.
// Returns a *NotFoundError when no Store entities are found.
func (sq *StoreQuery) Only(ctx context.Context) (*Store, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{store.Label}
	default:
		return nil, &NotSingularError{store.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StoreQuery) OnlyX(ctx context.Context) *Store {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Store ID in the query.
// Returns a *NotSingularError when more than one Store ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StoreQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{store.Label}
	default:
		err = &NotSingularError{store.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StoreQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Stores.
func (sq *StoreQuery) All(ctx context.Context) ([]*Store, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Store, *StoreQuery]()
	return withInterceptors[[]*Store](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *StoreQuery) AllX(ctx context.Context) []*Store {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Store IDs.
func (sq *StoreQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(store.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StoreQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StoreQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*StoreQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StoreQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StoreQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StoreQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StoreQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StoreQuery) Clone() *StoreQuery {
	if sq == nil {
		return nil
	}
	return &StoreQuery{
		config:          sq.config,
		ctx:             sq.ctx.Clone(),
		order:           append([]store.OrderOption{}, sq.order...),
		inters:          append([]Interceptor{}, sq.inters...),
		predicates:      append([]predicate.Store{}, sq.predicates...),
		withCity:        sq.withCity.Clone(),
		withGroup:       sq.withGroup.Clone(),
		withBranch:      sq.withBranch.Clone(),
		withEmployee:    sq.withEmployee.Clone(),
		withAsset:       sq.withAsset.Clone(),
		withAttendances: sq.withAttendances.Clone(),
		withExceptions:  sq.withExceptions.Clone(),
		withGoods:       sq.withGoods.Clone(),
		withEmployees:   sq.withEmployees.Clone(),
		withStocks:      sq.withStocks.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithCity(opts ...func(*CityQuery)) *StoreQuery {
	query := (&CityClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCity = query
	return sq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithGroup(opts ...func(*StoreGroupQuery)) *StoreQuery {
	query := (&StoreGroupClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withGroup = query
	return sq
}

// WithBranch tells the query-builder to eager-load the nodes that are connected to
// the "branch" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithBranch(opts ...func(*BranchQuery)) *StoreQuery {
	query := (&BranchClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBranch = query
	return sq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithEmployee(opts ...func(*EmployeeQuery)) *StoreQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEmployee = query
	return sq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithAsset(opts ...func(*AssetQuery)) *StoreQuery {
	query := (&AssetClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAsset = query
	return sq
}

// WithAttendances tells the query-builder to eager-load the nodes that are connected to
// the "attendances" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithAttendances(opts ...func(*AttendanceQuery)) *StoreQuery {
	query := (&AttendanceClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAttendances = query
	return sq
}

// WithExceptions tells the query-builder to eager-load the nodes that are connected to
// the "exceptions" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithExceptions(opts ...func(*ExceptionQuery)) *StoreQuery {
	query := (&ExceptionClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withExceptions = query
	return sq
}

// WithGoods tells the query-builder to eager-load the nodes that are connected to
// the "goods" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithGoods(opts ...func(*StoreGoodsQuery)) *StoreQuery {
	query := (&StoreGoodsClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withGoods = query
	return sq
}

// WithEmployees tells the query-builder to eager-load the nodes that are connected to
// the "employees" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithEmployees(opts ...func(*EmployeeQuery)) *StoreQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEmployees = query
	return sq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StoreQuery) WithStocks(opts ...func(*StockQuery)) *StoreQuery {
	query := (&StockClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withStocks = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Store.Query().
//		GroupBy(store.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *StoreQuery) GroupBy(field string, fields ...string) *StoreGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StoreGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = store.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Store.Query().
//		Select(store.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *StoreQuery) Select(fields ...string) *StoreSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &StoreSelect{StoreQuery: sq}
	sbuild.label = store.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StoreSelect configured with the given aggregations.
func (sq *StoreQuery) Aggregate(fns ...AggregateFunc) *StoreSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StoreQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !store.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *StoreQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Store, error) {
	var (
		nodes       = []*Store{}
		_spec       = sq.querySpec()
		loadedTypes = [10]bool{
			sq.withCity != nil,
			sq.withGroup != nil,
			sq.withBranch != nil,
			sq.withEmployee != nil,
			sq.withAsset != nil,
			sq.withAttendances != nil,
			sq.withExceptions != nil,
			sq.withGoods != nil,
			sq.withEmployees != nil,
			sq.withStocks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Store).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Store{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withCity; query != nil {
		if err := sq.loadCity(ctx, query, nodes, nil,
			func(n *Store, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withGroup; query != nil {
		if err := sq.loadGroup(ctx, query, nodes, nil,
			func(n *Store, e *StoreGroup) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withBranch; query != nil {
		if err := sq.loadBranch(ctx, query, nodes, nil,
			func(n *Store, e *Branch) { n.Edges.Branch = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEmployee; query != nil {
		if err := sq.loadEmployee(ctx, query, nodes, nil,
			func(n *Store, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withAsset; query != nil {
		if err := sq.loadAsset(ctx, query, nodes,
			func(n *Store) { n.Edges.Asset = []*Asset{} },
			func(n *Store, e *Asset) { n.Edges.Asset = append(n.Edges.Asset, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withAttendances; query != nil {
		if err := sq.loadAttendances(ctx, query, nodes,
			func(n *Store) { n.Edges.Attendances = []*Attendance{} },
			func(n *Store, e *Attendance) { n.Edges.Attendances = append(n.Edges.Attendances, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withExceptions; query != nil {
		if err := sq.loadExceptions(ctx, query, nodes,
			func(n *Store) { n.Edges.Exceptions = []*Exception{} },
			func(n *Store, e *Exception) { n.Edges.Exceptions = append(n.Edges.Exceptions, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withGoods; query != nil {
		if err := sq.loadGoods(ctx, query, nodes,
			func(n *Store) { n.Edges.Goods = []*StoreGoods{} },
			func(n *Store, e *StoreGoods) { n.Edges.Goods = append(n.Edges.Goods, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEmployees; query != nil {
		if err := sq.loadEmployees(ctx, query, nodes,
			func(n *Store) { n.Edges.Employees = []*Employee{} },
			func(n *Store, e *Employee) { n.Edges.Employees = append(n.Edges.Employees, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withStocks; query != nil {
		if err := sq.loadStocks(ctx, query, nodes,
			func(n *Store) { n.Edges.Stocks = []*Stock{} },
			func(n *Store, e *Stock) { n.Edges.Stocks = append(n.Edges.Stocks, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StoreQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Store, init func(*Store), assign func(*Store, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Store)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadGroup(ctx context.Context, query *StoreGroupQuery, nodes []*Store, init func(*Store), assign func(*Store, *StoreGroup)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Store)
	for i := range nodes {
		if nodes[i].GroupID == nil {
			continue
		}
		fk := *nodes[i].GroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(storegroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadBranch(ctx context.Context, query *BranchQuery, nodes []*Store, init func(*Store), assign func(*Store, *Branch)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Store)
	for i := range nodes {
		fk := nodes[i].BranchID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(branch.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "branch_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Store, init func(*Store), assign func(*Store, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Store)
	for i := range nodes {
		if nodes[i].EmployeeID == nil {
			continue
		}
		fk := *nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*Store, init func(*Store), assign func(*Store, *Asset)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(asset.FieldLocationsID)
	}
	query.Where(predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(store.AssetColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.LocationsID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "locations_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StoreQuery) loadAttendances(ctx context.Context, query *AttendanceQuery, nodes []*Store, init func(*Store), assign func(*Store, *Attendance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(attendance.FieldStoreID)
	}
	query.Where(predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(store.AttendancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "store_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StoreQuery) loadExceptions(ctx context.Context, query *ExceptionQuery, nodes []*Store, init func(*Store), assign func(*Store, *Exception)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exception.FieldStoreID)
	}
	query.Where(predicate.Exception(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(store.ExceptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "store_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StoreQuery) loadGoods(ctx context.Context, query *StoreGoodsQuery, nodes []*Store, init func(*Store), assign func(*Store, *StoreGoods)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(storegoods.FieldStoreID)
	}
	query.Where(predicate.StoreGoods(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(store.GoodsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "store_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StoreQuery) loadEmployees(ctx context.Context, query *EmployeeQuery, nodes []*Store, init func(*Store), assign func(*Store, *Employee)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Store)
	nids := make(map[uint64]map[*Store]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(store.EmployeesTable)
		s.Join(joinT).On(s.C(employee.FieldID), joinT.C(store.EmployeesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(store.EmployeesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(store.EmployeesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Store]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Employee](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "employees" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StoreQuery) loadStocks(ctx context.Context, query *StockQuery, nodes []*Store, init func(*Store), assign func(*Store, *Stock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Store)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(stock.FieldStoreID)
	}
	query.Where(predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(store.StocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StoreID
		if fk == nil {
			return fmt.Errorf(`foreign-key "store_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "store_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *StoreQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StoreQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for i := range fields {
			if fields[i] != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withCity != nil {
			_spec.Node.AddColumnOnce(store.FieldCityID)
		}
		if sq.withGroup != nil {
			_spec.Node.AddColumnOnce(store.FieldGroupID)
		}
		if sq.withBranch != nil {
			_spec.Node.AddColumnOnce(store.FieldBranchID)
		}
		if sq.withEmployee != nil {
			_spec.Node.AddColumnOnce(store.FieldEmployeeID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StoreQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(store.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = store.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *StoreQuery) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

type StoreQueryWith string

var (
	StoreQueryWithCity        StoreQueryWith = "City"
	StoreQueryWithGroup       StoreQueryWith = "Group"
	StoreQueryWithBranch      StoreQueryWith = "Branch"
	StoreQueryWithEmployee    StoreQueryWith = "Employee"
	StoreQueryWithAsset       StoreQueryWith = "Asset"
	StoreQueryWithAttendances StoreQueryWith = "Attendances"
	StoreQueryWithExceptions  StoreQueryWith = "Exceptions"
	StoreQueryWithGoods       StoreQueryWith = "Goods"
	StoreQueryWithEmployees   StoreQueryWith = "Employees"
	StoreQueryWithStocks      StoreQueryWith = "Stocks"
)

func (sq *StoreQuery) With(withEdges ...StoreQueryWith) *StoreQuery {
	for _, v := range withEdges {
		switch v {
		case StoreQueryWithCity:
			sq.WithCity()
		case StoreQueryWithGroup:
			sq.WithGroup()
		case StoreQueryWithBranch:
			sq.WithBranch()
		case StoreQueryWithEmployee:
			sq.WithEmployee()
		case StoreQueryWithAsset:
			sq.WithAsset()
		case StoreQueryWithAttendances:
			sq.WithAttendances()
		case StoreQueryWithExceptions:
			sq.WithExceptions()
		case StoreQueryWithGoods:
			sq.WithGoods()
		case StoreQueryWithEmployees:
			sq.WithEmployees()
		case StoreQueryWithStocks:
			sq.WithStocks()
		}
	}
	return sq
}

// StoreGroupBy is the group-by builder for Store entities.
type StoreGroupBy struct {
	selector
	build *StoreQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StoreGroupBy) Aggregate(fns ...AggregateFunc) *StoreGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *StoreGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StoreQuery, *StoreGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *StoreGroupBy) sqlScan(ctx context.Context, root *StoreQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StoreSelect is the builder for selecting fields of Store entities.
type StoreSelect struct {
	*StoreQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StoreSelect) Aggregate(fns ...AggregateFunc) *StoreSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StoreSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StoreQuery, *StoreSelect](ctx, ss.StoreQuery, ss, ss.inters, v)
}

func (ss *StoreSelect) sqlScan(ctx context.Context, root *StoreQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *StoreSelect) Modify(modifiers ...func(s *sql.Selector)) *StoreSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
