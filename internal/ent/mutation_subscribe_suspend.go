// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/subscribesuspend"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// SubscribeSuspendMutation represents an operation that mutates the SubscribeSuspend nodes in the graph.
type SubscribeSuspendMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	days             *int
	adddays          *int
	start_at         *time.Time
	end_at           *time.Time
	clearedFields    map[string]struct{}
	city             *uint64
	clearedcity      bool
	rider            *uint64
	clearedrider     bool
	subscribe        *uint64
	clearedsubscribe bool
	done             bool
	oldValue         func(context.Context) (*SubscribeSuspend, error)
	predicates       []predicate.SubscribeSuspend
}

var _ ent.Mutation = (*SubscribeSuspendMutation)(nil)

// subscribesuspendOption allows management of the mutation configuration using functional options.
type subscribesuspendOption func(*SubscribeSuspendMutation)

// newSubscribeSuspendMutation creates new mutation for the SubscribeSuspend entity.
func newSubscribeSuspendMutation(c config, op Op, opts ...subscribesuspendOption) *SubscribeSuspendMutation {
	m := &SubscribeSuspendMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribeSuspend,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribeSuspendID sets the ID field of the mutation.
func withSubscribeSuspendID(id uint64) subscribesuspendOption {
	return func(m *SubscribeSuspendMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscribeSuspend
		)
		m.oldValue = func(ctx context.Context) (*SubscribeSuspend, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscribeSuspend.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribeSuspend sets the old SubscribeSuspend of the mutation.
func withSubscribeSuspend(node *SubscribeSuspend) subscribesuspendOption {
	return func(m *SubscribeSuspendMutation) {
		m.oldValue = func(context.Context) (*SubscribeSuspend, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribeSuspendMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribeSuspendMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribeSuspendMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribeSuspendMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscribeSuspend.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreator sets the "creator" field.
func (m *SubscribeSuspendMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SubscribeSuspendMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SubscribeSuspendMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[subscribesuspend.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SubscribeSuspendMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[subscribesuspend.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SubscribeSuspendMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, subscribesuspend.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *SubscribeSuspendMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *SubscribeSuspendMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *SubscribeSuspendMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[subscribesuspend.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *SubscribeSuspendMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[subscribesuspend.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *SubscribeSuspendMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, subscribesuspend.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *SubscribeSuspendMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SubscribeSuspendMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SubscribeSuspendMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[subscribesuspend.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SubscribeSuspendMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[subscribesuspend.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SubscribeSuspendMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, subscribesuspend.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *SubscribeSuspendMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *SubscribeSuspendMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *SubscribeSuspendMutation) ResetCityID() {
	m.city = nil
}

// SetRiderID sets the "rider_id" field.
func (m *SubscribeSuspendMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *SubscribeSuspendMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *SubscribeSuspendMutation) ResetRiderID() {
	m.rider = nil
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *SubscribeSuspendMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *SubscribeSuspendMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *SubscribeSuspendMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetDays sets the "days" field.
func (m *SubscribeSuspendMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *SubscribeSuspendMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *SubscribeSuspendMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *SubscribeSuspendMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ResetDays resets all changes to the "days" field.
func (m *SubscribeSuspendMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
}

// SetStartAt sets the "start_at" field.
func (m *SubscribeSuspendMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *SubscribeSuspendMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *SubscribeSuspendMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *SubscribeSuspendMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *SubscribeSuspendMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the SubscribeSuspend entity.
// If the SubscribeSuspend object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeSuspendMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ClearEndAt clears the value of the "end_at" field.
func (m *SubscribeSuspendMutation) ClearEndAt() {
	m.end_at = nil
	m.clearedFields[subscribesuspend.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *SubscribeSuspendMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[subscribesuspend.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *SubscribeSuspendMutation) ResetEndAt() {
	m.end_at = nil
	delete(m.clearedFields, subscribesuspend.FieldEndAt)
}

// ClearCity clears the "city" edge to the City entity.
func (m *SubscribeSuspendMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *SubscribeSuspendMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *SubscribeSuspendMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *SubscribeSuspendMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *SubscribeSuspendMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *SubscribeSuspendMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *SubscribeSuspendMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *SubscribeSuspendMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *SubscribeSuspendMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *SubscribeSuspendMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *SubscribeSuspendMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *SubscribeSuspendMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// Where appends a list predicates to the SubscribeSuspendMutation builder.
func (m *SubscribeSuspendMutation) Where(ps ...predicate.SubscribeSuspend) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubscribeSuspendMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubscribeSuspend).
func (m *SubscribeSuspendMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribeSuspendMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.creator != nil {
		fields = append(fields, subscribesuspend.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, subscribesuspend.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, subscribesuspend.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, subscribesuspend.FieldCityID)
	}
	if m.rider != nil {
		fields = append(fields, subscribesuspend.FieldRiderID)
	}
	if m.subscribe != nil {
		fields = append(fields, subscribesuspend.FieldSubscribeID)
	}
	if m.days != nil {
		fields = append(fields, subscribesuspend.FieldDays)
	}
	if m.start_at != nil {
		fields = append(fields, subscribesuspend.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, subscribesuspend.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribeSuspendMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribesuspend.FieldCreator:
		return m.Creator()
	case subscribesuspend.FieldLastModifier:
		return m.LastModifier()
	case subscribesuspend.FieldRemark:
		return m.Remark()
	case subscribesuspend.FieldCityID:
		return m.CityID()
	case subscribesuspend.FieldRiderID:
		return m.RiderID()
	case subscribesuspend.FieldSubscribeID:
		return m.SubscribeID()
	case subscribesuspend.FieldDays:
		return m.Days()
	case subscribesuspend.FieldStartAt:
		return m.StartAt()
	case subscribesuspend.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribeSuspendMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribesuspend.FieldCreator:
		return m.OldCreator(ctx)
	case subscribesuspend.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case subscribesuspend.FieldRemark:
		return m.OldRemark(ctx)
	case subscribesuspend.FieldCityID:
		return m.OldCityID(ctx)
	case subscribesuspend.FieldRiderID:
		return m.OldRiderID(ctx)
	case subscribesuspend.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case subscribesuspend.FieldDays:
		return m.OldDays(ctx)
	case subscribesuspend.FieldStartAt:
		return m.OldStartAt(ctx)
	case subscribesuspend.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown SubscribeSuspend field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeSuspendMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribesuspend.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case subscribesuspend.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case subscribesuspend.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case subscribesuspend.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case subscribesuspend.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case subscribesuspend.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case subscribesuspend.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	case subscribesuspend.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case subscribesuspend.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribeSuspendMutation) AddedFields() []string {
	var fields []string
	if m.adddays != nil {
		fields = append(fields, subscribesuspend.FieldDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribeSuspendMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribesuspend.FieldDays:
		return m.AddedDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeSuspendMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribesuspend.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribeSuspendMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscribesuspend.FieldCreator) {
		fields = append(fields, subscribesuspend.FieldCreator)
	}
	if m.FieldCleared(subscribesuspend.FieldLastModifier) {
		fields = append(fields, subscribesuspend.FieldLastModifier)
	}
	if m.FieldCleared(subscribesuspend.FieldRemark) {
		fields = append(fields, subscribesuspend.FieldRemark)
	}
	if m.FieldCleared(subscribesuspend.FieldEndAt) {
		fields = append(fields, subscribesuspend.FieldEndAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribeSuspendMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribeSuspendMutation) ClearField(name string) error {
	switch name {
	case subscribesuspend.FieldCreator:
		m.ClearCreator()
		return nil
	case subscribesuspend.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case subscribesuspend.FieldRemark:
		m.ClearRemark()
		return nil
	case subscribesuspend.FieldEndAt:
		m.ClearEndAt()
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribeSuspendMutation) ResetField(name string) error {
	switch name {
	case subscribesuspend.FieldCreator:
		m.ResetCreator()
		return nil
	case subscribesuspend.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case subscribesuspend.FieldRemark:
		m.ResetRemark()
		return nil
	case subscribesuspend.FieldCityID:
		m.ResetCityID()
		return nil
	case subscribesuspend.FieldRiderID:
		m.ResetRiderID()
		return nil
	case subscribesuspend.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case subscribesuspend.FieldDays:
		m.ResetDays()
		return nil
	case subscribesuspend.FieldStartAt:
		m.ResetStartAt()
		return nil
	case subscribesuspend.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribeSuspendMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.city != nil {
		edges = append(edges, subscribesuspend.EdgeCity)
	}
	if m.rider != nil {
		edges = append(edges, subscribesuspend.EdgeRider)
	}
	if m.subscribe != nil {
		edges = append(edges, subscribesuspend.EdgeSubscribe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribeSuspendMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscribesuspend.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case subscribesuspend.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case subscribesuspend.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribeSuspendMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribeSuspendMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribeSuspendMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcity {
		edges = append(edges, subscribesuspend.EdgeCity)
	}
	if m.clearedrider {
		edges = append(edges, subscribesuspend.EdgeRider)
	}
	if m.clearedsubscribe {
		edges = append(edges, subscribesuspend.EdgeSubscribe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribeSuspendMutation) EdgeCleared(name string) bool {
	switch name {
	case subscribesuspend.EdgeCity:
		return m.clearedcity
	case subscribesuspend.EdgeRider:
		return m.clearedrider
	case subscribesuspend.EdgeSubscribe:
		return m.clearedsubscribe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribeSuspendMutation) ClearEdge(name string) error {
	switch name {
	case subscribesuspend.EdgeCity:
		m.ClearCity()
		return nil
	case subscribesuspend.EdgeRider:
		m.ClearRider()
		return nil
	case subscribesuspend.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribeSuspendMutation) ResetEdge(name string) error {
	switch name {
	case subscribesuspend.EdgeCity:
		m.ResetCity()
		return nil
	case subscribesuspend.EdgeRider:
		m.ResetRider()
		return nil
	case subscribesuspend.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	}
	return fmt.Errorf("unknown SubscribeSuspend edge %s", name)
}

