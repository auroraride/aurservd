// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// Warehouse is the model entity for the Warehouse schema.
type Warehouse struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// 仓库名称
	Name string `json:"name,omitempty"`
	// 经度
	Lng float64 `json:"lng,omitempty"`
	// 纬度
	Lat float64 `json:"lat,omitempty"`
	// 详细地址
	Address string `json:"address,omitempty"`
	// 仓库编号
	Sn string `json:"sn,omitempty"`
	// 上班仓管员ID
	AssetManagerID *uint64 `json:"asset_manager_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WarehouseQuery when eager-loading is set.
	Edges        WarehouseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WarehouseEdges holds the relations/edges for other nodes in the graph.
type WarehouseEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// AssetManager holds the value of the asset_manager edge.
	AssetManager *AssetManager `json:"asset_manager,omitempty"`
	// AssetManagers holds the value of the asset_managers edge.
	AssetManagers []*AssetManager `json:"asset_managers,omitempty"`
	// Asset holds the value of the asset edge.
	Asset []*Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarehouseEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// AssetManagerOrErr returns the AssetManager value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WarehouseEdges) AssetManagerOrErr() (*AssetManager, error) {
	if e.AssetManager != nil {
		return e.AssetManager, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: assetmanager.Label}
	}
	return nil, &NotLoadedError{edge: "asset_manager"}
}

// AssetManagersOrErr returns the AssetManagers value or an error if the edge
// was not loaded in eager-loading.
func (e WarehouseEdges) AssetManagersOrErr() ([]*AssetManager, error) {
	if e.loadedTypes[2] {
		return e.AssetManagers, nil
	}
	return nil, &NotLoadedError{edge: "asset_managers"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading.
func (e WarehouseEdges) AssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[3] {
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Warehouse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldCreator, warehouse.FieldLastModifier:
			values[i] = new([]byte)
		case warehouse.FieldLng, warehouse.FieldLat:
			values[i] = new(sql.NullFloat64)
		case warehouse.FieldID, warehouse.FieldCityID, warehouse.FieldAssetManagerID:
			values[i] = new(sql.NullInt64)
		case warehouse.FieldRemark, warehouse.FieldName, warehouse.FieldAddress, warehouse.FieldSn:
			values[i] = new(sql.NullString)
		case warehouse.FieldCreatedAt, warehouse.FieldUpdatedAt, warehouse.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Warehouse fields.
func (w *Warehouse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case warehouse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			w.ID = uint64(value.Int64)
		case warehouse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case warehouse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case warehouse.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				w.DeletedAt = new(time.Time)
				*w.DeletedAt = value.Time
			}
		case warehouse.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case warehouse.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &w.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case warehouse.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				w.Remark = value.String
			}
		case warehouse.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				w.CityID = uint64(value.Int64)
			}
		case warehouse.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				w.Name = value.String
			}
		case warehouse.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				w.Lng = value.Float64
			}
		case warehouse.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				w.Lat = value.Float64
			}
		case warehouse.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				w.Address = value.String
			}
		case warehouse.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				w.Sn = value.String
			}
		case warehouse.FieldAssetManagerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_manager_id", values[i])
			} else if value.Valid {
				w.AssetManagerID = new(uint64)
				*w.AssetManagerID = uint64(value.Int64)
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Warehouse.
// This includes values selected through modifiers, order, etc.
func (w *Warehouse) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the Warehouse entity.
func (w *Warehouse) QueryCity() *CityQuery {
	return NewWarehouseClient(w.config).QueryCity(w)
}

// QueryAssetManager queries the "asset_manager" edge of the Warehouse entity.
func (w *Warehouse) QueryAssetManager() *AssetManagerQuery {
	return NewWarehouseClient(w.config).QueryAssetManager(w)
}

// QueryAssetManagers queries the "asset_managers" edge of the Warehouse entity.
func (w *Warehouse) QueryAssetManagers() *AssetManagerQuery {
	return NewWarehouseClient(w.config).QueryAssetManagers(w)
}

// QueryAsset queries the "asset" edge of the Warehouse entity.
func (w *Warehouse) QueryAsset() *AssetQuery {
	return NewWarehouseClient(w.config).QueryAsset(w)
}

// Update returns a builder for updating this Warehouse.
// Note that you need to call Warehouse.Unwrap() before calling this method if this Warehouse
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Warehouse) Update() *WarehouseUpdateOne {
	return NewWarehouseClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Warehouse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Warehouse) Unwrap() *Warehouse {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Warehouse is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Warehouse) String() string {
	var builder strings.Builder
	builder.WriteString("Warehouse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := w.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", w.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", w.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(w.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", w.CityID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(w.Name)
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", w.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", w.Lat))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(w.Address)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(w.Sn)
	builder.WriteString(", ")
	if v := w.AssetManagerID; v != nil {
		builder.WriteString("asset_manager_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Warehouses is a parsable slice of Warehouse.
type Warehouses []*Warehouse
