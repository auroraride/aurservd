// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
)

// PromotionPrivilegeUpdate is the builder for updating PromotionPrivilege entities.
type PromotionPrivilegeUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionPrivilegeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionPrivilegeUpdate builder.
func (ppu *PromotionPrivilegeUpdate) Where(ps ...predicate.PromotionPrivilege) *PromotionPrivilegeUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetUpdatedAt sets the "updated_at" field.
func (ppu *PromotionPrivilegeUpdate) SetUpdatedAt(t time.Time) *PromotionPrivilegeUpdate {
	ppu.mutation.SetUpdatedAt(t)
	return ppu
}

// SetDeletedAt sets the "deleted_at" field.
func (ppu *PromotionPrivilegeUpdate) SetDeletedAt(t time.Time) *PromotionPrivilegeUpdate {
	ppu.mutation.SetDeletedAt(t)
	return ppu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppu *PromotionPrivilegeUpdate) SetNillableDeletedAt(t *time.Time) *PromotionPrivilegeUpdate {
	if t != nil {
		ppu.SetDeletedAt(*t)
	}
	return ppu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppu *PromotionPrivilegeUpdate) ClearDeletedAt() *PromotionPrivilegeUpdate {
	ppu.mutation.ClearDeletedAt()
	return ppu
}

// SetLastModifier sets the "last_modifier" field.
func (ppu *PromotionPrivilegeUpdate) SetLastModifier(m *model.Modifier) *PromotionPrivilegeUpdate {
	ppu.mutation.SetLastModifier(m)
	return ppu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ppu *PromotionPrivilegeUpdate) ClearLastModifier() *PromotionPrivilegeUpdate {
	ppu.mutation.ClearLastModifier()
	return ppu
}

// SetRemark sets the "remark" field.
func (ppu *PromotionPrivilegeUpdate) SetRemark(s string) *PromotionPrivilegeUpdate {
	ppu.mutation.SetRemark(s)
	return ppu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppu *PromotionPrivilegeUpdate) SetNillableRemark(s *string) *PromotionPrivilegeUpdate {
	if s != nil {
		ppu.SetRemark(*s)
	}
	return ppu
}

// ClearRemark clears the value of the "remark" field.
func (ppu *PromotionPrivilegeUpdate) ClearRemark() *PromotionPrivilegeUpdate {
	ppu.mutation.ClearRemark()
	return ppu
}

// SetType sets the "type" field.
func (ppu *PromotionPrivilegeUpdate) SetType(u uint8) *PromotionPrivilegeUpdate {
	ppu.mutation.ResetType()
	ppu.mutation.SetType(u)
	return ppu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppu *PromotionPrivilegeUpdate) SetNillableType(u *uint8) *PromotionPrivilegeUpdate {
	if u != nil {
		ppu.SetType(*u)
	}
	return ppu
}

// AddType adds u to the "type" field.
func (ppu *PromotionPrivilegeUpdate) AddType(u int8) *PromotionPrivilegeUpdate {
	ppu.mutation.AddType(u)
	return ppu
}

// SetName sets the "name" field.
func (ppu *PromotionPrivilegeUpdate) SetName(s string) *PromotionPrivilegeUpdate {
	ppu.mutation.SetName(s)
	return ppu
}

// SetDescription sets the "description" field.
func (ppu *PromotionPrivilegeUpdate) SetDescription(s string) *PromotionPrivilegeUpdate {
	ppu.mutation.SetDescription(s)
	return ppu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppu *PromotionPrivilegeUpdate) SetNillableDescription(s *string) *PromotionPrivilegeUpdate {
	if s != nil {
		ppu.SetDescription(*s)
	}
	return ppu
}

// ClearDescription clears the value of the "description" field.
func (ppu *PromotionPrivilegeUpdate) ClearDescription() *PromotionPrivilegeUpdate {
	ppu.mutation.ClearDescription()
	return ppu
}

// SetValue sets the "value" field.
func (ppu *PromotionPrivilegeUpdate) SetValue(u uint64) *PromotionPrivilegeUpdate {
	ppu.mutation.ResetValue()
	ppu.mutation.SetValue(u)
	return ppu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ppu *PromotionPrivilegeUpdate) SetNillableValue(u *uint64) *PromotionPrivilegeUpdate {
	if u != nil {
		ppu.SetValue(*u)
	}
	return ppu
}

// AddValue adds u to the "value" field.
func (ppu *PromotionPrivilegeUpdate) AddValue(u int64) *PromotionPrivilegeUpdate {
	ppu.mutation.AddValue(u)
	return ppu
}

// ClearValue clears the value of the "value" field.
func (ppu *PromotionPrivilegeUpdate) ClearValue() *PromotionPrivilegeUpdate {
	ppu.mutation.ClearValue()
	return ppu
}

// Mutation returns the PromotionPrivilegeMutation object of the builder.
func (ppu *PromotionPrivilegeUpdate) Mutation() *PromotionPrivilegeMutation {
	return ppu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PromotionPrivilegeUpdate) Save(ctx context.Context) (int, error) {
	if err := ppu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PromotionPrivilegeUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PromotionPrivilegeUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PromotionPrivilegeUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppu *PromotionPrivilegeUpdate) defaults() error {
	if _, ok := ppu.mutation.UpdatedAt(); !ok {
		if promotionprivilege.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionprivilege.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionprivilege.UpdateDefaultUpdatedAt()
		ppu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppu *PromotionPrivilegeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionPrivilegeUpdate {
	ppu.modifiers = append(ppu.modifiers, modifiers...)
	return ppu
}

func (ppu *PromotionPrivilegeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionprivilege.Table, promotionprivilege.Columns, sqlgraph.NewFieldSpec(promotionprivilege.FieldID, field.TypeUint64))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionprivilege.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionprivilege.FieldDeletedAt, field.TypeTime, value)
	}
	if ppu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionprivilege.FieldDeletedAt, field.TypeTime)
	}
	if ppu.mutation.CreatorCleared() {
		_spec.ClearField(promotionprivilege.FieldCreator, field.TypeJSON)
	}
	if value, ok := ppu.mutation.LastModifier(); ok {
		_spec.SetField(promotionprivilege.FieldLastModifier, field.TypeJSON, value)
	}
	if ppu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionprivilege.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ppu.mutation.Remark(); ok {
		_spec.SetField(promotionprivilege.FieldRemark, field.TypeString, value)
	}
	if ppu.mutation.RemarkCleared() {
		_spec.ClearField(promotionprivilege.FieldRemark, field.TypeString)
	}
	if value, ok := ppu.mutation.GetType(); ok {
		_spec.SetField(promotionprivilege.FieldType, field.TypeUint8, value)
	}
	if value, ok := ppu.mutation.AddedType(); ok {
		_spec.AddField(promotionprivilege.FieldType, field.TypeUint8, value)
	}
	if value, ok := ppu.mutation.Name(); ok {
		_spec.SetField(promotionprivilege.FieldName, field.TypeString, value)
	}
	if value, ok := ppu.mutation.Description(); ok {
		_spec.SetField(promotionprivilege.FieldDescription, field.TypeString, value)
	}
	if ppu.mutation.DescriptionCleared() {
		_spec.ClearField(promotionprivilege.FieldDescription, field.TypeString)
	}
	if value, ok := ppu.mutation.Value(); ok {
		_spec.SetField(promotionprivilege.FieldValue, field.TypeUint64, value)
	}
	if value, ok := ppu.mutation.AddedValue(); ok {
		_spec.AddField(promotionprivilege.FieldValue, field.TypeUint64, value)
	}
	if ppu.mutation.ValueCleared() {
		_spec.ClearField(promotionprivilege.FieldValue, field.TypeUint64)
	}
	_spec.AddModifiers(ppu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionprivilege.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PromotionPrivilegeUpdateOne is the builder for updating a single PromotionPrivilege entity.
type PromotionPrivilegeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionPrivilegeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetUpdatedAt(t time.Time) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetUpdatedAt(t)
	return ppuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetDeletedAt(t time.Time) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetDeletedAt(t)
	return ppuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppuo *PromotionPrivilegeUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionPrivilegeUpdateOne {
	if t != nil {
		ppuo.SetDeletedAt(*t)
	}
	return ppuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ppuo *PromotionPrivilegeUpdateOne) ClearDeletedAt() *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ClearDeletedAt()
	return ppuo
}

// SetLastModifier sets the "last_modifier" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetLastModifier(m *model.Modifier) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetLastModifier(m)
	return ppuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ppuo *PromotionPrivilegeUpdateOne) ClearLastModifier() *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ClearLastModifier()
	return ppuo
}

// SetRemark sets the "remark" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetRemark(s string) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetRemark(s)
	return ppuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppuo *PromotionPrivilegeUpdateOne) SetNillableRemark(s *string) *PromotionPrivilegeUpdateOne {
	if s != nil {
		ppuo.SetRemark(*s)
	}
	return ppuo
}

// ClearRemark clears the value of the "remark" field.
func (ppuo *PromotionPrivilegeUpdateOne) ClearRemark() *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ClearRemark()
	return ppuo
}

// SetType sets the "type" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetType(u uint8) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ResetType()
	ppuo.mutation.SetType(u)
	return ppuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppuo *PromotionPrivilegeUpdateOne) SetNillableType(u *uint8) *PromotionPrivilegeUpdateOne {
	if u != nil {
		ppuo.SetType(*u)
	}
	return ppuo
}

// AddType adds u to the "type" field.
func (ppuo *PromotionPrivilegeUpdateOne) AddType(u int8) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.AddType(u)
	return ppuo
}

// SetName sets the "name" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetName(s string) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetName(s)
	return ppuo
}

// SetDescription sets the "description" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetDescription(s string) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.SetDescription(s)
	return ppuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppuo *PromotionPrivilegeUpdateOne) SetNillableDescription(s *string) *PromotionPrivilegeUpdateOne {
	if s != nil {
		ppuo.SetDescription(*s)
	}
	return ppuo
}

// ClearDescription clears the value of the "description" field.
func (ppuo *PromotionPrivilegeUpdateOne) ClearDescription() *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ClearDescription()
	return ppuo
}

// SetValue sets the "value" field.
func (ppuo *PromotionPrivilegeUpdateOne) SetValue(u uint64) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ResetValue()
	ppuo.mutation.SetValue(u)
	return ppuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ppuo *PromotionPrivilegeUpdateOne) SetNillableValue(u *uint64) *PromotionPrivilegeUpdateOne {
	if u != nil {
		ppuo.SetValue(*u)
	}
	return ppuo
}

// AddValue adds u to the "value" field.
func (ppuo *PromotionPrivilegeUpdateOne) AddValue(u int64) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.AddValue(u)
	return ppuo
}

// ClearValue clears the value of the "value" field.
func (ppuo *PromotionPrivilegeUpdateOne) ClearValue() *PromotionPrivilegeUpdateOne {
	ppuo.mutation.ClearValue()
	return ppuo
}

// Mutation returns the PromotionPrivilegeMutation object of the builder.
func (ppuo *PromotionPrivilegeUpdateOne) Mutation() *PromotionPrivilegeMutation {
	return ppuo.mutation
}

// Where appends a list predicates to the PromotionPrivilegeUpdate builder.
func (ppuo *PromotionPrivilegeUpdateOne) Where(ps ...predicate.PromotionPrivilege) *PromotionPrivilegeUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PromotionPrivilegeUpdateOne) Select(field string, fields ...string) *PromotionPrivilegeUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PromotionPrivilege entity.
func (ppuo *PromotionPrivilegeUpdateOne) Save(ctx context.Context) (*PromotionPrivilege, error) {
	if err := ppuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PromotionPrivilegeUpdateOne) SaveX(ctx context.Context) *PromotionPrivilege {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PromotionPrivilegeUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PromotionPrivilegeUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppuo *PromotionPrivilegeUpdateOne) defaults() error {
	if _, ok := ppuo.mutation.UpdatedAt(); !ok {
		if promotionprivilege.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionprivilege.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionprivilege.UpdateDefaultUpdatedAt()
		ppuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ppuo *PromotionPrivilegeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionPrivilegeUpdateOne {
	ppuo.modifiers = append(ppuo.modifiers, modifiers...)
	return ppuo
}

func (ppuo *PromotionPrivilegeUpdateOne) sqlSave(ctx context.Context) (_node *PromotionPrivilege, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionprivilege.Table, promotionprivilege.Columns, sqlgraph.NewFieldSpec(promotionprivilege.FieldID, field.TypeUint64))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionPrivilege.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionprivilege.FieldID)
		for _, f := range fields {
			if !promotionprivilege.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionprivilege.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionprivilege.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ppuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionprivilege.FieldDeletedAt, field.TypeTime, value)
	}
	if ppuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionprivilege.FieldDeletedAt, field.TypeTime)
	}
	if ppuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionprivilege.FieldCreator, field.TypeJSON)
	}
	if value, ok := ppuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionprivilege.FieldLastModifier, field.TypeJSON, value)
	}
	if ppuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionprivilege.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ppuo.mutation.Remark(); ok {
		_spec.SetField(promotionprivilege.FieldRemark, field.TypeString, value)
	}
	if ppuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionprivilege.FieldRemark, field.TypeString)
	}
	if value, ok := ppuo.mutation.GetType(); ok {
		_spec.SetField(promotionprivilege.FieldType, field.TypeUint8, value)
	}
	if value, ok := ppuo.mutation.AddedType(); ok {
		_spec.AddField(promotionprivilege.FieldType, field.TypeUint8, value)
	}
	if value, ok := ppuo.mutation.Name(); ok {
		_spec.SetField(promotionprivilege.FieldName, field.TypeString, value)
	}
	if value, ok := ppuo.mutation.Description(); ok {
		_spec.SetField(promotionprivilege.FieldDescription, field.TypeString, value)
	}
	if ppuo.mutation.DescriptionCleared() {
		_spec.ClearField(promotionprivilege.FieldDescription, field.TypeString)
	}
	if value, ok := ppuo.mutation.Value(); ok {
		_spec.SetField(promotionprivilege.FieldValue, field.TypeUint64, value)
	}
	if value, ok := ppuo.mutation.AddedValue(); ok {
		_spec.AddField(promotionprivilege.FieldValue, field.TypeUint64, value)
	}
	if ppuo.mutation.ValueCleared() {
		_spec.ClearField(promotionprivilege.FieldValue, field.TypeUint64)
	}
	_spec.AddModifiers(ppuo.modifiers...)
	_node = &PromotionPrivilege{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionprivilege.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
