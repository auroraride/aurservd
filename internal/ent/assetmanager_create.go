// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetManagerCreate is the builder for creating a AssetManager entity.
type AssetManagerCreate struct {
	config
	mutation *AssetManagerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (amc *AssetManagerCreate) SetCreatedAt(t time.Time) *AssetManagerCreate {
	amc.mutation.SetCreatedAt(t)
	return amc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableCreatedAt(t *time.Time) *AssetManagerCreate {
	if t != nil {
		amc.SetCreatedAt(*t)
	}
	return amc
}

// SetUpdatedAt sets the "updated_at" field.
func (amc *AssetManagerCreate) SetUpdatedAt(t time.Time) *AssetManagerCreate {
	amc.mutation.SetUpdatedAt(t)
	return amc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableUpdatedAt(t *time.Time) *AssetManagerCreate {
	if t != nil {
		amc.SetUpdatedAt(*t)
	}
	return amc
}

// SetDeletedAt sets the "deleted_at" field.
func (amc *AssetManagerCreate) SetDeletedAt(t time.Time) *AssetManagerCreate {
	amc.mutation.SetDeletedAt(t)
	return amc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableDeletedAt(t *time.Time) *AssetManagerCreate {
	if t != nil {
		amc.SetDeletedAt(*t)
	}
	return amc
}

// SetCreator sets the "creator" field.
func (amc *AssetManagerCreate) SetCreator(m *model.Modifier) *AssetManagerCreate {
	amc.mutation.SetCreator(m)
	return amc
}

// SetLastModifier sets the "last_modifier" field.
func (amc *AssetManagerCreate) SetLastModifier(m *model.Modifier) *AssetManagerCreate {
	amc.mutation.SetLastModifier(m)
	return amc
}

// SetRemark sets the "remark" field.
func (amc *AssetManagerCreate) SetRemark(s string) *AssetManagerCreate {
	amc.mutation.SetRemark(s)
	return amc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableRemark(s *string) *AssetManagerCreate {
	if s != nil {
		amc.SetRemark(*s)
	}
	return amc
}

// SetName sets the "name" field.
func (amc *AssetManagerCreate) SetName(s string) *AssetManagerCreate {
	amc.mutation.SetName(s)
	return amc
}

// SetPhone sets the "phone" field.
func (amc *AssetManagerCreate) SetPhone(s string) *AssetManagerCreate {
	amc.mutation.SetPhone(s)
	return amc
}

// SetPassword sets the "password" field.
func (amc *AssetManagerCreate) SetPassword(s string) *AssetManagerCreate {
	amc.mutation.SetPassword(s)
	return amc
}

// SetRoleID sets the "role_id" field.
func (amc *AssetManagerCreate) SetRoleID(u uint64) *AssetManagerCreate {
	amc.mutation.SetRoleID(u)
	return amc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableRoleID(u *uint64) *AssetManagerCreate {
	if u != nil {
		amc.SetRoleID(*u)
	}
	return amc
}

// SetMiniEnable sets the "mini_enable" field.
func (amc *AssetManagerCreate) SetMiniEnable(b bool) *AssetManagerCreate {
	amc.mutation.SetMiniEnable(b)
	return amc
}

// SetNillableMiniEnable sets the "mini_enable" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableMiniEnable(b *bool) *AssetManagerCreate {
	if b != nil {
		amc.SetMiniEnable(*b)
	}
	return amc
}

// SetMiniLimit sets the "mini_limit" field.
func (amc *AssetManagerCreate) SetMiniLimit(u uint) *AssetManagerCreate {
	amc.mutation.SetMiniLimit(u)
	return amc
}

// SetNillableMiniLimit sets the "mini_limit" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableMiniLimit(u *uint) *AssetManagerCreate {
	if u != nil {
		amc.SetMiniLimit(*u)
	}
	return amc
}

// SetLastSigninAt sets the "last_signin_at" field.
func (amc *AssetManagerCreate) SetLastSigninAt(t time.Time) *AssetManagerCreate {
	amc.mutation.SetLastSigninAt(t)
	return amc
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (amc *AssetManagerCreate) SetNillableLastSigninAt(t *time.Time) *AssetManagerCreate {
	if t != nil {
		amc.SetLastSigninAt(*t)
	}
	return amc
}

// SetRole sets the "role" edge to the AssetRole entity.
func (amc *AssetManagerCreate) SetRole(a *AssetRole) *AssetManagerCreate {
	return amc.SetRoleID(a.ID)
}

// AddWarehouseIDs adds the "warehouses" edge to the Warehouse entity by IDs.
func (amc *AssetManagerCreate) AddWarehouseIDs(ids ...uint64) *AssetManagerCreate {
	amc.mutation.AddWarehouseIDs(ids...)
	return amc
}

// AddWarehouses adds the "warehouses" edges to the Warehouse entity.
func (amc *AssetManagerCreate) AddWarehouses(w ...*Warehouse) *AssetManagerCreate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return amc.AddWarehouseIDs(ids...)
}

// Mutation returns the AssetManagerMutation object of the builder.
func (amc *AssetManagerCreate) Mutation() *AssetManagerMutation {
	return amc.mutation
}

// Save creates the AssetManager in the database.
func (amc *AssetManagerCreate) Save(ctx context.Context) (*AssetManager, error) {
	if err := amc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AssetManagerCreate) SaveX(ctx context.Context) *AssetManager {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AssetManagerCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AssetManagerCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AssetManagerCreate) defaults() error {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		if assetmanager.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmanager.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assetmanager.DefaultCreatedAt()
		amc.mutation.SetCreatedAt(v)
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		if assetmanager.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmanager.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetmanager.DefaultUpdatedAt()
		amc.mutation.SetUpdatedAt(v)
	}
	if _, ok := amc.mutation.MiniEnable(); !ok {
		v := assetmanager.DefaultMiniEnable
		amc.mutation.SetMiniEnable(v)
	}
	if _, ok := amc.mutation.MiniLimit(); !ok {
		v := assetmanager.DefaultMiniLimit
		amc.mutation.SetMiniLimit(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (amc *AssetManagerCreate) check() error {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetManager.created_at"`)}
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetManager.updated_at"`)}
	}
	if _, ok := amc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AssetManager.name"`)}
	}
	if v, ok := amc.mutation.Name(); ok {
		if err := assetmanager.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AssetManager.name": %w`, err)}
		}
	}
	if _, ok := amc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "AssetManager.phone"`)}
	}
	if v, ok := amc.mutation.Phone(); ok {
		if err := assetmanager.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "AssetManager.phone": %w`, err)}
		}
	}
	if _, ok := amc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "AssetManager.password"`)}
	}
	if _, ok := amc.mutation.MiniEnable(); !ok {
		return &ValidationError{Name: "mini_enable", err: errors.New(`ent: missing required field "AssetManager.mini_enable"`)}
	}
	if _, ok := amc.mutation.MiniLimit(); !ok {
		return &ValidationError{Name: "mini_limit", err: errors.New(`ent: missing required field "AssetManager.mini_limit"`)}
	}
	return nil
}

func (amc *AssetManagerCreate) sqlSave(ctx context.Context) (*AssetManager, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AssetManagerCreate) createSpec() (*AssetManager, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetManager{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(assetmanager.Table, sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = amc.conflict
	if value, ok := amc.mutation.CreatedAt(); ok {
		_spec.SetField(assetmanager.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := amc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetmanager.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := amc.mutation.DeletedAt(); ok {
		_spec.SetField(assetmanager.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := amc.mutation.Creator(); ok {
		_spec.SetField(assetmanager.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := amc.mutation.LastModifier(); ok {
		_spec.SetField(assetmanager.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := amc.mutation.Remark(); ok {
		_spec.SetField(assetmanager.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := amc.mutation.Name(); ok {
		_spec.SetField(assetmanager.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amc.mutation.Phone(); ok {
		_spec.SetField(assetmanager.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := amc.mutation.Password(); ok {
		_spec.SetField(assetmanager.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := amc.mutation.MiniEnable(); ok {
		_spec.SetField(assetmanager.FieldMiniEnable, field.TypeBool, value)
		_node.MiniEnable = value
	}
	if value, ok := amc.mutation.MiniLimit(); ok {
		_spec.SetField(assetmanager.FieldMiniLimit, field.TypeUint, value)
		_node.MiniLimit = value
	}
	if value, ok := amc.mutation.LastSigninAt(); ok {
		_spec.SetField(assetmanager.FieldLastSigninAt, field.TypeTime, value)
		_node.LastSigninAt = &value
	}
	if nodes := amc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.RoleTable,
			Columns: []string{assetmanager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := amc.mutation.WarehousesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.WarehousesTable,
			Columns: assetmanager.WarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetManager.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetManagerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (amc *AssetManagerCreate) OnConflict(opts ...sql.ConflictOption) *AssetManagerUpsertOne {
	amc.conflict = opts
	return &AssetManagerUpsertOne{
		create: amc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amc *AssetManagerCreate) OnConflictColumns(columns ...string) *AssetManagerUpsertOne {
	amc.conflict = append(amc.conflict, sql.ConflictColumns(columns...))
	return &AssetManagerUpsertOne{
		create: amc,
	}
}

type (
	// AssetManagerUpsertOne is the builder for "upsert"-ing
	//  one AssetManager node.
	AssetManagerUpsertOne struct {
		create *AssetManagerCreate
	}

	// AssetManagerUpsert is the "OnConflict" setter.
	AssetManagerUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetManagerUpsert) SetUpdatedAt(v time.Time) *AssetManagerUpsert {
	u.Set(assetmanager.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateUpdatedAt() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetManagerUpsert) SetDeletedAt(v time.Time) *AssetManagerUpsert {
	u.Set(assetmanager.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateDeletedAt() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetManagerUpsert) ClearDeletedAt() *AssetManagerUpsert {
	u.SetNull(assetmanager.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetManagerUpsert) SetLastModifier(v *model.Modifier) *AssetManagerUpsert {
	u.Set(assetmanager.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateLastModifier() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetManagerUpsert) ClearLastModifier() *AssetManagerUpsert {
	u.SetNull(assetmanager.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetManagerUpsert) SetRemark(v string) *AssetManagerUpsert {
	u.Set(assetmanager.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateRemark() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetManagerUpsert) ClearRemark() *AssetManagerUpsert {
	u.SetNull(assetmanager.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *AssetManagerUpsert) SetName(v string) *AssetManagerUpsert {
	u.Set(assetmanager.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateName() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *AssetManagerUpsert) SetPhone(v string) *AssetManagerUpsert {
	u.Set(assetmanager.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdatePhone() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldPhone)
	return u
}

// SetPassword sets the "password" field.
func (u *AssetManagerUpsert) SetPassword(v string) *AssetManagerUpsert {
	u.Set(assetmanager.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdatePassword() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldPassword)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *AssetManagerUpsert) SetRoleID(v uint64) *AssetManagerUpsert {
	u.Set(assetmanager.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateRoleID() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldRoleID)
	return u
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AssetManagerUpsert) ClearRoleID() *AssetManagerUpsert {
	u.SetNull(assetmanager.FieldRoleID)
	return u
}

// SetMiniEnable sets the "mini_enable" field.
func (u *AssetManagerUpsert) SetMiniEnable(v bool) *AssetManagerUpsert {
	u.Set(assetmanager.FieldMiniEnable, v)
	return u
}

// UpdateMiniEnable sets the "mini_enable" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateMiniEnable() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldMiniEnable)
	return u
}

// SetMiniLimit sets the "mini_limit" field.
func (u *AssetManagerUpsert) SetMiniLimit(v uint) *AssetManagerUpsert {
	u.Set(assetmanager.FieldMiniLimit, v)
	return u
}

// UpdateMiniLimit sets the "mini_limit" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateMiniLimit() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldMiniLimit)
	return u
}

// AddMiniLimit adds v to the "mini_limit" field.
func (u *AssetManagerUpsert) AddMiniLimit(v uint) *AssetManagerUpsert {
	u.Add(assetmanager.FieldMiniLimit, v)
	return u
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *AssetManagerUpsert) SetLastSigninAt(v time.Time) *AssetManagerUpsert {
	u.Set(assetmanager.FieldLastSigninAt, v)
	return u
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *AssetManagerUpsert) UpdateLastSigninAt() *AssetManagerUpsert {
	u.SetExcluded(assetmanager.FieldLastSigninAt)
	return u
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *AssetManagerUpsert) ClearLastSigninAt() *AssetManagerUpsert {
	u.SetNull(assetmanager.FieldLastSigninAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetManagerUpsertOne) UpdateNewValues() *AssetManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetmanager.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assetmanager.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetManagerUpsertOne) Ignore() *AssetManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetManagerUpsertOne) DoNothing() *AssetManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetManagerCreate.OnConflict
// documentation for more info.
func (u *AssetManagerUpsertOne) Update(set func(*AssetManagerUpsert)) *AssetManagerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetManagerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetManagerUpsertOne) SetUpdatedAt(v time.Time) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateUpdatedAt() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetManagerUpsertOne) SetDeletedAt(v time.Time) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateDeletedAt() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetManagerUpsertOne) ClearDeletedAt() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetManagerUpsertOne) SetLastModifier(v *model.Modifier) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateLastModifier() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetManagerUpsertOne) ClearLastModifier() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetManagerUpsertOne) SetRemark(v string) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateRemark() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetManagerUpsertOne) ClearRemark() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AssetManagerUpsertOne) SetName(v string) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateName() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *AssetManagerUpsertOne) SetPhone(v string) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdatePhone() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *AssetManagerUpsertOne) SetPassword(v string) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdatePassword() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdatePassword()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AssetManagerUpsertOne) SetRoleID(v uint64) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateRoleID() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AssetManagerUpsertOne) ClearRoleID() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearRoleID()
	})
}

// SetMiniEnable sets the "mini_enable" field.
func (u *AssetManagerUpsertOne) SetMiniEnable(v bool) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetMiniEnable(v)
	})
}

// UpdateMiniEnable sets the "mini_enable" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateMiniEnable() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateMiniEnable()
	})
}

// SetMiniLimit sets the "mini_limit" field.
func (u *AssetManagerUpsertOne) SetMiniLimit(v uint) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetMiniLimit(v)
	})
}

// AddMiniLimit adds v to the "mini_limit" field.
func (u *AssetManagerUpsertOne) AddMiniLimit(v uint) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.AddMiniLimit(v)
	})
}

// UpdateMiniLimit sets the "mini_limit" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateMiniLimit() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateMiniLimit()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *AssetManagerUpsertOne) SetLastSigninAt(v time.Time) *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *AssetManagerUpsertOne) UpdateLastSigninAt() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *AssetManagerUpsertOne) ClearLastSigninAt() *AssetManagerUpsertOne {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearLastSigninAt()
	})
}

// Exec executes the query.
func (u *AssetManagerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetManagerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetManagerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetManagerUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetManagerUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetManagerCreateBulk is the builder for creating many AssetManager entities in bulk.
type AssetManagerCreateBulk struct {
	config
	err      error
	builders []*AssetManagerCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetManager entities in the database.
func (amcb *AssetManagerCreateBulk) Save(ctx context.Context) ([]*AssetManager, error) {
	if amcb.err != nil {
		return nil, amcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AssetManager, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetManagerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = amcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AssetManagerCreateBulk) SaveX(ctx context.Context) []*AssetManager {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AssetManagerCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AssetManagerCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetManager.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetManagerUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (amcb *AssetManagerCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetManagerUpsertBulk {
	amcb.conflict = opts
	return &AssetManagerUpsertBulk{
		create: amcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (amcb *AssetManagerCreateBulk) OnConflictColumns(columns ...string) *AssetManagerUpsertBulk {
	amcb.conflict = append(amcb.conflict, sql.ConflictColumns(columns...))
	return &AssetManagerUpsertBulk{
		create: amcb,
	}
}

// AssetManagerUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetManager nodes.
type AssetManagerUpsertBulk struct {
	create *AssetManagerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetManagerUpsertBulk) UpdateNewValues() *AssetManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetmanager.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assetmanager.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetManager.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetManagerUpsertBulk) Ignore() *AssetManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetManagerUpsertBulk) DoNothing() *AssetManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetManagerCreateBulk.OnConflict
// documentation for more info.
func (u *AssetManagerUpsertBulk) Update(set func(*AssetManagerUpsert)) *AssetManagerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetManagerUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetManagerUpsertBulk) SetUpdatedAt(v time.Time) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateUpdatedAt() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetManagerUpsertBulk) SetDeletedAt(v time.Time) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateDeletedAt() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetManagerUpsertBulk) ClearDeletedAt() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetManagerUpsertBulk) SetLastModifier(v *model.Modifier) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateLastModifier() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetManagerUpsertBulk) ClearLastModifier() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetManagerUpsertBulk) SetRemark(v string) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateRemark() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetManagerUpsertBulk) ClearRemark() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AssetManagerUpsertBulk) SetName(v string) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateName() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *AssetManagerUpsertBulk) SetPhone(v string) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdatePhone() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *AssetManagerUpsertBulk) SetPassword(v string) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdatePassword() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdatePassword()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AssetManagerUpsertBulk) SetRoleID(v uint64) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateRoleID() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AssetManagerUpsertBulk) ClearRoleID() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearRoleID()
	})
}

// SetMiniEnable sets the "mini_enable" field.
func (u *AssetManagerUpsertBulk) SetMiniEnable(v bool) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetMiniEnable(v)
	})
}

// UpdateMiniEnable sets the "mini_enable" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateMiniEnable() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateMiniEnable()
	})
}

// SetMiniLimit sets the "mini_limit" field.
func (u *AssetManagerUpsertBulk) SetMiniLimit(v uint) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetMiniLimit(v)
	})
}

// AddMiniLimit adds v to the "mini_limit" field.
func (u *AssetManagerUpsertBulk) AddMiniLimit(v uint) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.AddMiniLimit(v)
	})
}

// UpdateMiniLimit sets the "mini_limit" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateMiniLimit() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateMiniLimit()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *AssetManagerUpsertBulk) SetLastSigninAt(v time.Time) *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *AssetManagerUpsertBulk) UpdateLastSigninAt() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *AssetManagerUpsertBulk) ClearLastSigninAt() *AssetManagerUpsertBulk {
	return u.Update(func(s *AssetManagerUpsert) {
		s.ClearLastSigninAt()
	})
}

// Exec executes the query.
func (u *AssetManagerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetManagerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetManagerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetManagerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
