// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
)

// AssetAttributes is the model entity for the AssetAttributes schema.
type AssetAttributes struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 资产属性类型 1:电车 2:智能电池 3:非智能电池 4:电柜配件 5:电车配件 6:其它
	AssetType uint8 `json:"asset_type,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 键
	Key string `json:"key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetAttributesQuery when eager-loading is set.
	Edges        AssetAttributesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetAttributesEdges holds the relations/edges for other nodes in the graph.
type AssetAttributesEdges struct {
	// Values holds the value of the values edge.
	Values []*AssetAttributeValues `json:"values,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ValuesOrErr returns the Values value or an error if the edge
// was not loaded in eager-loading.
func (e AssetAttributesEdges) ValuesOrErr() ([]*AssetAttributeValues, error) {
	if e.loadedTypes[0] {
		return e.Values, nil
	}
	return nil, &NotLoadedError{edge: "values"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetAttributes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetattributes.FieldID, assetattributes.FieldAssetType:
			values[i] = new(sql.NullInt64)
		case assetattributes.FieldName, assetattributes.FieldKey:
			values[i] = new(sql.NullString)
		case assetattributes.FieldCreatedAt, assetattributes.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetAttributes fields.
func (aa *AssetAttributes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetattributes.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aa.ID = uint64(value.Int64)
		case assetattributes.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aa.CreatedAt = value.Time
			}
		case assetattributes.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aa.UpdatedAt = value.Time
			}
		case assetattributes.FieldAssetType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_type", values[i])
			} else if value.Valid {
				aa.AssetType = uint8(value.Int64)
			}
		case assetattributes.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				aa.Name = value.String
			}
		case assetattributes.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				aa.Key = value.String
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetAttributes.
// This includes values selected through modifiers, order, etc.
func (aa *AssetAttributes) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// QueryValues queries the "values" edge of the AssetAttributes entity.
func (aa *AssetAttributes) QueryValues() *AssetAttributeValuesQuery {
	return NewAssetAttributesClient(aa.config).QueryValues(aa)
}

// Update returns a builder for updating this AssetAttributes.
// Note that you need to call AssetAttributes.Unwrap() before calling this method if this AssetAttributes
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *AssetAttributes) Update() *AssetAttributesUpdateOne {
	return NewAssetAttributesClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the AssetAttributes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *AssetAttributes) Unwrap() *AssetAttributes {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetAttributes is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *AssetAttributes) String() string {
	var builder strings.Builder
	builder.WriteString("AssetAttributes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(aa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("asset_type=")
	builder.WriteString(fmt.Sprintf("%v", aa.AssetType))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(aa.Name)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(aa.Key)
	builder.WriteByte(')')
	return builder.String()
}

// AssetAttributesSlice is a parsable slice of AssetAttributes.
type AssetAttributesSlice []*AssetAttributes
