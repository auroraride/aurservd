// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// WarehouseUpdate is the builder for updating Warehouse entities.
type WarehouseUpdate struct {
	config
	hooks     []Hook
	mutation  *WarehouseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wu *WarehouseUpdate) Where(ps ...predicate.Warehouse) *WarehouseUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WarehouseUpdate) SetUpdatedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetDeletedAt sets the "deleted_at" field.
func (wu *WarehouseUpdate) SetDeletedAt(t time.Time) *WarehouseUpdate {
	wu.mutation.SetDeletedAt(t)
	return wu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableDeletedAt(t *time.Time) *WarehouseUpdate {
	if t != nil {
		wu.SetDeletedAt(*t)
	}
	return wu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wu *WarehouseUpdate) ClearDeletedAt() *WarehouseUpdate {
	wu.mutation.ClearDeletedAt()
	return wu
}

// SetLastModifier sets the "last_modifier" field.
func (wu *WarehouseUpdate) SetLastModifier(m *model.Modifier) *WarehouseUpdate {
	wu.mutation.SetLastModifier(m)
	return wu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (wu *WarehouseUpdate) ClearLastModifier() *WarehouseUpdate {
	wu.mutation.ClearLastModifier()
	return wu
}

// SetRemark sets the "remark" field.
func (wu *WarehouseUpdate) SetRemark(s string) *WarehouseUpdate {
	wu.mutation.SetRemark(s)
	return wu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableRemark(s *string) *WarehouseUpdate {
	if s != nil {
		wu.SetRemark(*s)
	}
	return wu
}

// ClearRemark clears the value of the "remark" field.
func (wu *WarehouseUpdate) ClearRemark() *WarehouseUpdate {
	wu.mutation.ClearRemark()
	return wu
}

// SetCityID sets the "city_id" field.
func (wu *WarehouseUpdate) SetCityID(u uint64) *WarehouseUpdate {
	wu.mutation.SetCityID(u)
	return wu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableCityID(u *uint64) *WarehouseUpdate {
	if u != nil {
		wu.SetCityID(*u)
	}
	return wu
}

// SetName sets the "name" field.
func (wu *WarehouseUpdate) SetName(s string) *WarehouseUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableName(s *string) *WarehouseUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// SetLng sets the "lng" field.
func (wu *WarehouseUpdate) SetLng(f float64) *WarehouseUpdate {
	wu.mutation.ResetLng()
	wu.mutation.SetLng(f)
	return wu
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableLng(f *float64) *WarehouseUpdate {
	if f != nil {
		wu.SetLng(*f)
	}
	return wu
}

// AddLng adds f to the "lng" field.
func (wu *WarehouseUpdate) AddLng(f float64) *WarehouseUpdate {
	wu.mutation.AddLng(f)
	return wu
}

// SetLat sets the "lat" field.
func (wu *WarehouseUpdate) SetLat(f float64) *WarehouseUpdate {
	wu.mutation.ResetLat()
	wu.mutation.SetLat(f)
	return wu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableLat(f *float64) *WarehouseUpdate {
	if f != nil {
		wu.SetLat(*f)
	}
	return wu
}

// AddLat adds f to the "lat" field.
func (wu *WarehouseUpdate) AddLat(f float64) *WarehouseUpdate {
	wu.mutation.AddLat(f)
	return wu
}

// SetAddress sets the "address" field.
func (wu *WarehouseUpdate) SetAddress(s string) *WarehouseUpdate {
	wu.mutation.SetAddress(s)
	return wu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableAddress(s *string) *WarehouseUpdate {
	if s != nil {
		wu.SetAddress(*s)
	}
	return wu
}

// ClearAddress clears the value of the "address" field.
func (wu *WarehouseUpdate) ClearAddress() *WarehouseUpdate {
	wu.mutation.ClearAddress()
	return wu
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (wu *WarehouseUpdate) SetAssetManagerID(u uint64) *WarehouseUpdate {
	wu.mutation.SetAssetManagerID(u)
	return wu
}

// SetNillableAssetManagerID sets the "asset_manager_id" field if the given value is not nil.
func (wu *WarehouseUpdate) SetNillableAssetManagerID(u *uint64) *WarehouseUpdate {
	if u != nil {
		wu.SetAssetManagerID(*u)
	}
	return wu
}

// ClearAssetManagerID clears the value of the "asset_manager_id" field.
func (wu *WarehouseUpdate) ClearAssetManagerID() *WarehouseUpdate {
	wu.mutation.ClearAssetManagerID()
	return wu
}

// SetCity sets the "city" edge to the City entity.
func (wu *WarehouseUpdate) SetCity(c *City) *WarehouseUpdate {
	return wu.SetCityID(c.ID)
}

// SetAssetManager sets the "asset_manager" edge to the AssetManager entity.
func (wu *WarehouseUpdate) SetAssetManager(a *AssetManager) *WarehouseUpdate {
	return wu.SetAssetManagerID(a.ID)
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (wu *WarehouseUpdate) AddAssetManagerIDs(ids ...uint64) *WarehouseUpdate {
	wu.mutation.AddAssetManagerIDs(ids...)
	return wu
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (wu *WarehouseUpdate) AddAssetManagers(a ...*AssetManager) *WarehouseUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.AddAssetManagerIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wu *WarehouseUpdate) Mutation() *WarehouseMutation {
	return wu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (wu *WarehouseUpdate) ClearCity() *WarehouseUpdate {
	wu.mutation.ClearCity()
	return wu
}

// ClearAssetManager clears the "asset_manager" edge to the AssetManager entity.
func (wu *WarehouseUpdate) ClearAssetManager() *WarehouseUpdate {
	wu.mutation.ClearAssetManager()
	return wu
}

// ClearAssetManagers clears all "asset_managers" edges to the AssetManager entity.
func (wu *WarehouseUpdate) ClearAssetManagers() *WarehouseUpdate {
	wu.mutation.ClearAssetManagers()
	return wu
}

// RemoveAssetManagerIDs removes the "asset_managers" edge to AssetManager entities by IDs.
func (wu *WarehouseUpdate) RemoveAssetManagerIDs(ids ...uint64) *WarehouseUpdate {
	wu.mutation.RemoveAssetManagerIDs(ids...)
	return wu
}

// RemoveAssetManagers removes "asset_managers" edges to AssetManager entities.
func (wu *WarehouseUpdate) RemoveAssetManagers(a ...*AssetManager) *WarehouseUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wu.RemoveAssetManagerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WarehouseUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WarehouseUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WarehouseUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WarehouseUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WarehouseUpdate) defaults() error {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		if warehouse.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warehouse.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warehouse.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WarehouseUpdate) check() error {
	if _, ok := wu.mutation.CityID(); wu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Warehouse.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WarehouseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarehouseUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WarehouseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(warehouse.Table, warehouse.Columns, sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
	}
	if wu.mutation.DeletedAtCleared() {
		_spec.ClearField(warehouse.FieldDeletedAt, field.TypeTime)
	}
	if wu.mutation.CreatorCleared() {
		_spec.ClearField(warehouse.FieldCreator, field.TypeJSON)
	}
	if value, ok := wu.mutation.LastModifier(); ok {
		_spec.SetField(warehouse.FieldLastModifier, field.TypeJSON, value)
	}
	if wu.mutation.LastModifierCleared() {
		_spec.ClearField(warehouse.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := wu.mutation.Remark(); ok {
		_spec.SetField(warehouse.FieldRemark, field.TypeString, value)
	}
	if wu.mutation.RemarkCleared() {
		_spec.ClearField(warehouse.FieldRemark, field.TypeString)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wu.mutation.Lng(); ok {
		_spec.SetField(warehouse.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLng(); ok {
		_spec.AddField(warehouse.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Lat(); ok {
		_spec.SetField(warehouse.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.AddedLat(); ok {
		_spec.AddField(warehouse.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := wu.mutation.Address(); ok {
		_spec.SetField(warehouse.FieldAddress, field.TypeString, value)
	}
	if wu.mutation.AddressCleared() {
		_spec.ClearField(warehouse.FieldAddress, field.TypeString)
	}
	if wu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warehouse.CityTable,
			Columns: []string{warehouse.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warehouse.CityTable,
			Columns: []string{warehouse.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.AssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   warehouse.AssetManagerTable,
			Columns: []string{warehouse.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   warehouse.AssetManagerTable,
			Columns: []string{warehouse.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedAssetManagersIDs(); len(nodes) > 0 && !wu.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WarehouseUpdateOne is the builder for updating a single Warehouse entity.
type WarehouseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WarehouseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WarehouseUpdateOne) SetUpdatedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetDeletedAt sets the "deleted_at" field.
func (wuo *WarehouseUpdateOne) SetDeletedAt(t time.Time) *WarehouseUpdateOne {
	wuo.mutation.SetDeletedAt(t)
	return wuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableDeletedAt(t *time.Time) *WarehouseUpdateOne {
	if t != nil {
		wuo.SetDeletedAt(*t)
	}
	return wuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (wuo *WarehouseUpdateOne) ClearDeletedAt() *WarehouseUpdateOne {
	wuo.mutation.ClearDeletedAt()
	return wuo
}

// SetLastModifier sets the "last_modifier" field.
func (wuo *WarehouseUpdateOne) SetLastModifier(m *model.Modifier) *WarehouseUpdateOne {
	wuo.mutation.SetLastModifier(m)
	return wuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (wuo *WarehouseUpdateOne) ClearLastModifier() *WarehouseUpdateOne {
	wuo.mutation.ClearLastModifier()
	return wuo
}

// SetRemark sets the "remark" field.
func (wuo *WarehouseUpdateOne) SetRemark(s string) *WarehouseUpdateOne {
	wuo.mutation.SetRemark(s)
	return wuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableRemark(s *string) *WarehouseUpdateOne {
	if s != nil {
		wuo.SetRemark(*s)
	}
	return wuo
}

// ClearRemark clears the value of the "remark" field.
func (wuo *WarehouseUpdateOne) ClearRemark() *WarehouseUpdateOne {
	wuo.mutation.ClearRemark()
	return wuo
}

// SetCityID sets the "city_id" field.
func (wuo *WarehouseUpdateOne) SetCityID(u uint64) *WarehouseUpdateOne {
	wuo.mutation.SetCityID(u)
	return wuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableCityID(u *uint64) *WarehouseUpdateOne {
	if u != nil {
		wuo.SetCityID(*u)
	}
	return wuo
}

// SetName sets the "name" field.
func (wuo *WarehouseUpdateOne) SetName(s string) *WarehouseUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableName(s *string) *WarehouseUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// SetLng sets the "lng" field.
func (wuo *WarehouseUpdateOne) SetLng(f float64) *WarehouseUpdateOne {
	wuo.mutation.ResetLng()
	wuo.mutation.SetLng(f)
	return wuo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableLng(f *float64) *WarehouseUpdateOne {
	if f != nil {
		wuo.SetLng(*f)
	}
	return wuo
}

// AddLng adds f to the "lng" field.
func (wuo *WarehouseUpdateOne) AddLng(f float64) *WarehouseUpdateOne {
	wuo.mutation.AddLng(f)
	return wuo
}

// SetLat sets the "lat" field.
func (wuo *WarehouseUpdateOne) SetLat(f float64) *WarehouseUpdateOne {
	wuo.mutation.ResetLat()
	wuo.mutation.SetLat(f)
	return wuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableLat(f *float64) *WarehouseUpdateOne {
	if f != nil {
		wuo.SetLat(*f)
	}
	return wuo
}

// AddLat adds f to the "lat" field.
func (wuo *WarehouseUpdateOne) AddLat(f float64) *WarehouseUpdateOne {
	wuo.mutation.AddLat(f)
	return wuo
}

// SetAddress sets the "address" field.
func (wuo *WarehouseUpdateOne) SetAddress(s string) *WarehouseUpdateOne {
	wuo.mutation.SetAddress(s)
	return wuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableAddress(s *string) *WarehouseUpdateOne {
	if s != nil {
		wuo.SetAddress(*s)
	}
	return wuo
}

// ClearAddress clears the value of the "address" field.
func (wuo *WarehouseUpdateOne) ClearAddress() *WarehouseUpdateOne {
	wuo.mutation.ClearAddress()
	return wuo
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (wuo *WarehouseUpdateOne) SetAssetManagerID(u uint64) *WarehouseUpdateOne {
	wuo.mutation.SetAssetManagerID(u)
	return wuo
}

// SetNillableAssetManagerID sets the "asset_manager_id" field if the given value is not nil.
func (wuo *WarehouseUpdateOne) SetNillableAssetManagerID(u *uint64) *WarehouseUpdateOne {
	if u != nil {
		wuo.SetAssetManagerID(*u)
	}
	return wuo
}

// ClearAssetManagerID clears the value of the "asset_manager_id" field.
func (wuo *WarehouseUpdateOne) ClearAssetManagerID() *WarehouseUpdateOne {
	wuo.mutation.ClearAssetManagerID()
	return wuo
}

// SetCity sets the "city" edge to the City entity.
func (wuo *WarehouseUpdateOne) SetCity(c *City) *WarehouseUpdateOne {
	return wuo.SetCityID(c.ID)
}

// SetAssetManager sets the "asset_manager" edge to the AssetManager entity.
func (wuo *WarehouseUpdateOne) SetAssetManager(a *AssetManager) *WarehouseUpdateOne {
	return wuo.SetAssetManagerID(a.ID)
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (wuo *WarehouseUpdateOne) AddAssetManagerIDs(ids ...uint64) *WarehouseUpdateOne {
	wuo.mutation.AddAssetManagerIDs(ids...)
	return wuo
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (wuo *WarehouseUpdateOne) AddAssetManagers(a ...*AssetManager) *WarehouseUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.AddAssetManagerIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wuo *WarehouseUpdateOne) Mutation() *WarehouseMutation {
	return wuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (wuo *WarehouseUpdateOne) ClearCity() *WarehouseUpdateOne {
	wuo.mutation.ClearCity()
	return wuo
}

// ClearAssetManager clears the "asset_manager" edge to the AssetManager entity.
func (wuo *WarehouseUpdateOne) ClearAssetManager() *WarehouseUpdateOne {
	wuo.mutation.ClearAssetManager()
	return wuo
}

// ClearAssetManagers clears all "asset_managers" edges to the AssetManager entity.
func (wuo *WarehouseUpdateOne) ClearAssetManagers() *WarehouseUpdateOne {
	wuo.mutation.ClearAssetManagers()
	return wuo
}

// RemoveAssetManagerIDs removes the "asset_managers" edge to AssetManager entities by IDs.
func (wuo *WarehouseUpdateOne) RemoveAssetManagerIDs(ids ...uint64) *WarehouseUpdateOne {
	wuo.mutation.RemoveAssetManagerIDs(ids...)
	return wuo
}

// RemoveAssetManagers removes "asset_managers" edges to AssetManager entities.
func (wuo *WarehouseUpdateOne) RemoveAssetManagers(a ...*AssetManager) *WarehouseUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wuo.RemoveAssetManagerIDs(ids...)
}

// Where appends a list predicates to the WarehouseUpdate builder.
func (wuo *WarehouseUpdateOne) Where(ps ...predicate.Warehouse) *WarehouseUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WarehouseUpdateOne) Select(field string, fields ...string) *WarehouseUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Warehouse entity.
func (wuo *WarehouseUpdateOne) Save(ctx context.Context) (*Warehouse, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) SaveX(ctx context.Context) *Warehouse {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WarehouseUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WarehouseUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WarehouseUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		if warehouse.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warehouse.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warehouse.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WarehouseUpdateOne) check() error {
	if _, ok := wuo.mutation.CityID(); wuo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Warehouse.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WarehouseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WarehouseUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WarehouseUpdateOne) sqlSave(ctx context.Context) (_node *Warehouse, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(warehouse.Table, warehouse.Columns, sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Warehouse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, warehouse.FieldID)
		for _, f := range fields {
			if !warehouse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != warehouse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
	}
	if wuo.mutation.DeletedAtCleared() {
		_spec.ClearField(warehouse.FieldDeletedAt, field.TypeTime)
	}
	if wuo.mutation.CreatorCleared() {
		_spec.ClearField(warehouse.FieldCreator, field.TypeJSON)
	}
	if value, ok := wuo.mutation.LastModifier(); ok {
		_spec.SetField(warehouse.FieldLastModifier, field.TypeJSON, value)
	}
	if wuo.mutation.LastModifierCleared() {
		_spec.ClearField(warehouse.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := wuo.mutation.Remark(); ok {
		_spec.SetField(warehouse.FieldRemark, field.TypeString, value)
	}
	if wuo.mutation.RemarkCleared() {
		_spec.ClearField(warehouse.FieldRemark, field.TypeString)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Lng(); ok {
		_spec.SetField(warehouse.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLng(); ok {
		_spec.AddField(warehouse.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Lat(); ok {
		_spec.SetField(warehouse.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.AddedLat(); ok {
		_spec.AddField(warehouse.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := wuo.mutation.Address(); ok {
		_spec.SetField(warehouse.FieldAddress, field.TypeString, value)
	}
	if wuo.mutation.AddressCleared() {
		_spec.ClearField(warehouse.FieldAddress, field.TypeString)
	}
	if wuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warehouse.CityTable,
			Columns: []string{warehouse.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warehouse.CityTable,
			Columns: []string{warehouse.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.AssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   warehouse.AssetManagerTable,
			Columns: []string{warehouse.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   warehouse.AssetManagerTable,
			Columns: []string{warehouse.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedAssetManagersIDs(); len(nodes) > 0 && !wuo.mutation.AssetManagersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Warehouse{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{warehouse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
