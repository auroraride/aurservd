// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// AllocateUpdate is the builder for updating Allocate entities.
type AllocateUpdate struct {
	config
	hooks     []Hook
	mutation  *AllocateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AllocateUpdate builder.
func (au *AllocateUpdate) Where(ps ...predicate.Allocate) *AllocateUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetRiderID sets the "rider_id" field.
func (au *AllocateUpdate) SetRiderID(u uint64) *AllocateUpdate {
	au.mutation.SetRiderID(u)
	return au
}

// SetSubscribeID sets the "subscribe_id" field.
func (au *AllocateUpdate) SetSubscribeID(u uint64) *AllocateUpdate {
	au.mutation.SetSubscribeID(u)
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AllocateUpdate) SetLastModifier(m *model.Modifier) *AllocateUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AllocateUpdate) ClearLastModifier() *AllocateUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AllocateUpdate) SetRemark(s string) *AllocateUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableRemark(s *string) *AllocateUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AllocateUpdate) ClearRemark() *AllocateUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetEmployeeID sets the "employee_id" field.
func (au *AllocateUpdate) SetEmployeeID(u uint64) *AllocateUpdate {
	au.mutation.SetEmployeeID(u)
	return au
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableEmployeeID(u *uint64) *AllocateUpdate {
	if u != nil {
		au.SetEmployeeID(*u)
	}
	return au
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (au *AllocateUpdate) ClearEmployeeID() *AllocateUpdate {
	au.mutation.ClearEmployeeID()
	return au
}

// SetCabinetID sets the "cabinet_id" field.
func (au *AllocateUpdate) SetCabinetID(u uint64) *AllocateUpdate {
	au.mutation.SetCabinetID(u)
	return au
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableCabinetID(u *uint64) *AllocateUpdate {
	if u != nil {
		au.SetCabinetID(*u)
	}
	return au
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (au *AllocateUpdate) ClearCabinetID() *AllocateUpdate {
	au.mutation.ClearCabinetID()
	return au
}

// SetStoreID sets the "store_id" field.
func (au *AllocateUpdate) SetStoreID(u uint64) *AllocateUpdate {
	au.mutation.SetStoreID(u)
	return au
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableStoreID(u *uint64) *AllocateUpdate {
	if u != nil {
		au.SetStoreID(*u)
	}
	return au
}

// ClearStoreID clears the value of the "store_id" field.
func (au *AllocateUpdate) ClearStoreID() *AllocateUpdate {
	au.mutation.ClearStoreID()
	return au
}

// SetEbikeID sets the "ebike_id" field.
func (au *AllocateUpdate) SetEbikeID(u uint64) *AllocateUpdate {
	au.mutation.SetEbikeID(u)
	return au
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableEbikeID(u *uint64) *AllocateUpdate {
	if u != nil {
		au.SetEbikeID(*u)
	}
	return au
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (au *AllocateUpdate) ClearEbikeID() *AllocateUpdate {
	au.mutation.ClearEbikeID()
	return au
}

// SetBrandID sets the "brand_id" field.
func (au *AllocateUpdate) SetBrandID(u uint64) *AllocateUpdate {
	au.mutation.SetBrandID(u)
	return au
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (au *AllocateUpdate) SetNillableBrandID(u *uint64) *AllocateUpdate {
	if u != nil {
		au.SetBrandID(*u)
	}
	return au
}

// ClearBrandID clears the value of the "brand_id" field.
func (au *AllocateUpdate) ClearBrandID() *AllocateUpdate {
	au.mutation.ClearBrandID()
	return au
}

// SetType sets the "type" field.
func (au *AllocateUpdate) SetType(a allocate.Type) *AllocateUpdate {
	au.mutation.SetType(a)
	return au
}

// SetStatus sets the "status" field.
func (au *AllocateUpdate) SetStatus(u uint8) *AllocateUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// AddStatus adds u to the "status" field.
func (au *AllocateUpdate) AddStatus(u int8) *AllocateUpdate {
	au.mutation.AddStatus(u)
	return au
}

// SetTime sets the "time" field.
func (au *AllocateUpdate) SetTime(t time.Time) *AllocateUpdate {
	au.mutation.SetTime(t)
	return au
}

// SetModel sets the "model" field.
func (au *AllocateUpdate) SetModel(s string) *AllocateUpdate {
	au.mutation.SetModel(s)
	return au
}

// SetRider sets the "rider" edge to the Rider entity.
func (au *AllocateUpdate) SetRider(r *Rider) *AllocateUpdate {
	return au.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (au *AllocateUpdate) SetSubscribe(s *Subscribe) *AllocateUpdate {
	return au.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (au *AllocateUpdate) SetEmployee(e *Employee) *AllocateUpdate {
	return au.SetEmployeeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (au *AllocateUpdate) SetCabinet(c *Cabinet) *AllocateUpdate {
	return au.SetCabinetID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (au *AllocateUpdate) SetStore(s *Store) *AllocateUpdate {
	return au.SetStoreID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (au *AllocateUpdate) SetEbike(e *Ebike) *AllocateUpdate {
	return au.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (au *AllocateUpdate) SetBrand(e *EbikeBrand) *AllocateUpdate {
	return au.SetBrandID(e.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (au *AllocateUpdate) SetContractID(id uint64) *AllocateUpdate {
	au.mutation.SetContractID(id)
	return au
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (au *AllocateUpdate) SetNillableContractID(id *uint64) *AllocateUpdate {
	if id != nil {
		au = au.SetContractID(*id)
	}
	return au
}

// SetContract sets the "contract" edge to the Contract entity.
func (au *AllocateUpdate) SetContract(c *Contract) *AllocateUpdate {
	return au.SetContractID(c.ID)
}

// Mutation returns the AllocateMutation object of the builder.
func (au *AllocateUpdate) Mutation() *AllocateMutation {
	return au.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (au *AllocateUpdate) ClearRider() *AllocateUpdate {
	au.mutation.ClearRider()
	return au
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (au *AllocateUpdate) ClearSubscribe() *AllocateUpdate {
	au.mutation.ClearSubscribe()
	return au
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (au *AllocateUpdate) ClearEmployee() *AllocateUpdate {
	au.mutation.ClearEmployee()
	return au
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (au *AllocateUpdate) ClearCabinet() *AllocateUpdate {
	au.mutation.ClearCabinet()
	return au
}

// ClearStore clears the "store" edge to the Store entity.
func (au *AllocateUpdate) ClearStore() *AllocateUpdate {
	au.mutation.ClearStore()
	return au
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (au *AllocateUpdate) ClearEbike() *AllocateUpdate {
	au.mutation.ClearEbike()
	return au
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (au *AllocateUpdate) ClearBrand() *AllocateUpdate {
	au.mutation.ClearBrand()
	return au
}

// ClearContract clears the "contract" edge to the Contract entity.
func (au *AllocateUpdate) ClearContract() *AllocateUpdate {
	au.mutation.ClearContract()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AllocateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AllocateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AllocateUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AllocateUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AllocateUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AllocateUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := allocate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Allocate.type": %w`, err)}
		}
	}
	if _, ok := au.mutation.RiderID(); au.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Allocate.rider"`)
	}
	if _, ok := au.mutation.SubscribeID(); au.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Allocate.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AllocateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AllocateUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AllocateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   allocate.Table,
			Columns: allocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: allocate.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: allocate.FieldCreator,
		})
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: allocate.FieldLastModifier,
		})
	}
	if au.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: allocate.FieldLastModifier,
		})
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocate.FieldRemark,
		})
	}
	if au.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: allocate.FieldRemark,
		})
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: allocate.FieldType,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: allocate.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: allocate.FieldStatus,
		})
	}
	if value, ok := au.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: allocate.FieldTime,
		})
	}
	if value, ok := au.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocate.FieldModel,
		})
	}
	if au.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = au.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AllocateUpdateOne is the builder for updating a single Allocate entity.
type AllocateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AllocateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRiderID sets the "rider_id" field.
func (auo *AllocateUpdateOne) SetRiderID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetRiderID(u)
	return auo
}

// SetSubscribeID sets the "subscribe_id" field.
func (auo *AllocateUpdateOne) SetSubscribeID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetSubscribeID(u)
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AllocateUpdateOne) SetLastModifier(m *model.Modifier) *AllocateUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AllocateUpdateOne) ClearLastModifier() *AllocateUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AllocateUpdateOne) SetRemark(s string) *AllocateUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableRemark(s *string) *AllocateUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AllocateUpdateOne) ClearRemark() *AllocateUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetEmployeeID sets the "employee_id" field.
func (auo *AllocateUpdateOne) SetEmployeeID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetEmployeeID(u)
	return auo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableEmployeeID(u *uint64) *AllocateUpdateOne {
	if u != nil {
		auo.SetEmployeeID(*u)
	}
	return auo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (auo *AllocateUpdateOne) ClearEmployeeID() *AllocateUpdateOne {
	auo.mutation.ClearEmployeeID()
	return auo
}

// SetCabinetID sets the "cabinet_id" field.
func (auo *AllocateUpdateOne) SetCabinetID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetCabinetID(u)
	return auo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableCabinetID(u *uint64) *AllocateUpdateOne {
	if u != nil {
		auo.SetCabinetID(*u)
	}
	return auo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (auo *AllocateUpdateOne) ClearCabinetID() *AllocateUpdateOne {
	auo.mutation.ClearCabinetID()
	return auo
}

// SetStoreID sets the "store_id" field.
func (auo *AllocateUpdateOne) SetStoreID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetStoreID(u)
	return auo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableStoreID(u *uint64) *AllocateUpdateOne {
	if u != nil {
		auo.SetStoreID(*u)
	}
	return auo
}

// ClearStoreID clears the value of the "store_id" field.
func (auo *AllocateUpdateOne) ClearStoreID() *AllocateUpdateOne {
	auo.mutation.ClearStoreID()
	return auo
}

// SetEbikeID sets the "ebike_id" field.
func (auo *AllocateUpdateOne) SetEbikeID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetEbikeID(u)
	return auo
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableEbikeID(u *uint64) *AllocateUpdateOne {
	if u != nil {
		auo.SetEbikeID(*u)
	}
	return auo
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (auo *AllocateUpdateOne) ClearEbikeID() *AllocateUpdateOne {
	auo.mutation.ClearEbikeID()
	return auo
}

// SetBrandID sets the "brand_id" field.
func (auo *AllocateUpdateOne) SetBrandID(u uint64) *AllocateUpdateOne {
	auo.mutation.SetBrandID(u)
	return auo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableBrandID(u *uint64) *AllocateUpdateOne {
	if u != nil {
		auo.SetBrandID(*u)
	}
	return auo
}

// ClearBrandID clears the value of the "brand_id" field.
func (auo *AllocateUpdateOne) ClearBrandID() *AllocateUpdateOne {
	auo.mutation.ClearBrandID()
	return auo
}

// SetType sets the "type" field.
func (auo *AllocateUpdateOne) SetType(a allocate.Type) *AllocateUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AllocateUpdateOne) SetStatus(u uint8) *AllocateUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AllocateUpdateOne) AddStatus(u int8) *AllocateUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// SetTime sets the "time" field.
func (auo *AllocateUpdateOne) SetTime(t time.Time) *AllocateUpdateOne {
	auo.mutation.SetTime(t)
	return auo
}

// SetModel sets the "model" field.
func (auo *AllocateUpdateOne) SetModel(s string) *AllocateUpdateOne {
	auo.mutation.SetModel(s)
	return auo
}

// SetRider sets the "rider" edge to the Rider entity.
func (auo *AllocateUpdateOne) SetRider(r *Rider) *AllocateUpdateOne {
	return auo.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (auo *AllocateUpdateOne) SetSubscribe(s *Subscribe) *AllocateUpdateOne {
	return auo.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (auo *AllocateUpdateOne) SetEmployee(e *Employee) *AllocateUpdateOne {
	return auo.SetEmployeeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (auo *AllocateUpdateOne) SetCabinet(c *Cabinet) *AllocateUpdateOne {
	return auo.SetCabinetID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (auo *AllocateUpdateOne) SetStore(s *Store) *AllocateUpdateOne {
	return auo.SetStoreID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (auo *AllocateUpdateOne) SetEbike(e *Ebike) *AllocateUpdateOne {
	return auo.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (auo *AllocateUpdateOne) SetBrand(e *EbikeBrand) *AllocateUpdateOne {
	return auo.SetBrandID(e.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (auo *AllocateUpdateOne) SetContractID(id uint64) *AllocateUpdateOne {
	auo.mutation.SetContractID(id)
	return auo
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (auo *AllocateUpdateOne) SetNillableContractID(id *uint64) *AllocateUpdateOne {
	if id != nil {
		auo = auo.SetContractID(*id)
	}
	return auo
}

// SetContract sets the "contract" edge to the Contract entity.
func (auo *AllocateUpdateOne) SetContract(c *Contract) *AllocateUpdateOne {
	return auo.SetContractID(c.ID)
}

// Mutation returns the AllocateMutation object of the builder.
func (auo *AllocateUpdateOne) Mutation() *AllocateMutation {
	return auo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (auo *AllocateUpdateOne) ClearRider() *AllocateUpdateOne {
	auo.mutation.ClearRider()
	return auo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (auo *AllocateUpdateOne) ClearSubscribe() *AllocateUpdateOne {
	auo.mutation.ClearSubscribe()
	return auo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (auo *AllocateUpdateOne) ClearEmployee() *AllocateUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (auo *AllocateUpdateOne) ClearCabinet() *AllocateUpdateOne {
	auo.mutation.ClearCabinet()
	return auo
}

// ClearStore clears the "store" edge to the Store entity.
func (auo *AllocateUpdateOne) ClearStore() *AllocateUpdateOne {
	auo.mutation.ClearStore()
	return auo
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (auo *AllocateUpdateOne) ClearEbike() *AllocateUpdateOne {
	auo.mutation.ClearEbike()
	return auo
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (auo *AllocateUpdateOne) ClearBrand() *AllocateUpdateOne {
	auo.mutation.ClearBrand()
	return auo
}

// ClearContract clears the "contract" edge to the Contract entity.
func (auo *AllocateUpdateOne) ClearContract() *AllocateUpdateOne {
	auo.mutation.ClearContract()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AllocateUpdateOne) Select(field string, fields ...string) *AllocateUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Allocate entity.
func (auo *AllocateUpdateOne) Save(ctx context.Context) (*Allocate, error) {
	var (
		err  error
		node *Allocate
	)
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AllocateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Allocate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AllocateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AllocateUpdateOne) SaveX(ctx context.Context) *Allocate {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AllocateUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AllocateUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AllocateUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := allocate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Allocate.type": %w`, err)}
		}
	}
	if _, ok := auo.mutation.RiderID(); auo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Allocate.rider"`)
	}
	if _, ok := auo.mutation.SubscribeID(); auo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Allocate.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AllocateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AllocateUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AllocateUpdateOne) sqlSave(ctx context.Context) (_node *Allocate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   allocate.Table,
			Columns: allocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: allocate.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Allocate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, allocate.FieldID)
		for _, f := range fields {
			if !allocate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != allocate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: allocate.FieldCreator,
		})
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: allocate.FieldLastModifier,
		})
	}
	if auo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: allocate.FieldLastModifier,
		})
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocate.FieldRemark,
		})
	}
	if auo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: allocate.FieldRemark,
		})
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: allocate.FieldType,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: allocate.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: allocate.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: allocate.FieldTime,
		})
	}
	if value, ok := auo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: allocate.FieldModel,
		})
	}
	if auo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = auo.modifiers
	_node = &Allocate{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{allocate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
