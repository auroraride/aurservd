// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// AttendanceCreate is the builder for creating a Attendance entity.
type AttendanceCreate struct {
	config
	mutation *AttendanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AttendanceCreate) SetCreatedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableCreatedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AttendanceCreate) SetUpdatedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableUpdatedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AttendanceCreate) SetDeletedAt(t time.Time) *AttendanceCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableDeletedAt(t *time.Time) *AttendanceCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AttendanceCreate) SetCreator(m *model.Modifier) *AttendanceCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AttendanceCreate) SetLastModifier(m *model.Modifier) *AttendanceCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AttendanceCreate) SetRemark(s string) *AttendanceCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableRemark(s *string) *AttendanceCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetStoreID sets the "store_id" field.
func (ac *AttendanceCreate) SetStoreID(u uint64) *AttendanceCreate {
	ac.mutation.SetStoreID(u)
	return ac
}

// SetEmployeeID sets the "employee_id" field.
func (ac *AttendanceCreate) SetEmployeeID(u uint64) *AttendanceCreate {
	ac.mutation.SetEmployeeID(u)
	return ac
}

// SetInventory sets the "inventory" field.
func (ac *AttendanceCreate) SetInventory(mi []model.AttendanceInventory) *AttendanceCreate {
	ac.mutation.SetInventory(mi)
	return ac
}

// SetPhoto sets the "photo" field.
func (ac *AttendanceCreate) SetPhoto(s string) *AttendanceCreate {
	ac.mutation.SetPhoto(s)
	return ac
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillablePhoto(s *string) *AttendanceCreate {
	if s != nil {
		ac.SetPhoto(*s)
	}
	return ac
}

// SetDuty sets the "duty" field.
func (ac *AttendanceCreate) SetDuty(b bool) *AttendanceCreate {
	ac.mutation.SetDuty(b)
	return ac
}

// SetDate sets the "date" field.
func (ac *AttendanceCreate) SetDate(m model.Date) *AttendanceCreate {
	ac.mutation.SetDate(m)
	return ac
}

// SetLng sets the "lng" field.
func (ac *AttendanceCreate) SetLng(f float64) *AttendanceCreate {
	ac.mutation.SetLng(f)
	return ac
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableLng(f *float64) *AttendanceCreate {
	if f != nil {
		ac.SetLng(*f)
	}
	return ac
}

// SetLat sets the "lat" field.
func (ac *AttendanceCreate) SetLat(f float64) *AttendanceCreate {
	ac.mutation.SetLat(f)
	return ac
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableLat(f *float64) *AttendanceCreate {
	if f != nil {
		ac.SetLat(*f)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AttendanceCreate) SetAddress(s string) *AttendanceCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableAddress(s *string) *AttendanceCreate {
	if s != nil {
		ac.SetAddress(*s)
	}
	return ac
}

// SetDistance sets the "distance" field.
func (ac *AttendanceCreate) SetDistance(f float64) *AttendanceCreate {
	ac.mutation.SetDistance(f)
	return ac
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (ac *AttendanceCreate) SetNillableDistance(f *float64) *AttendanceCreate {
	if f != nil {
		ac.SetDistance(*f)
	}
	return ac
}

// SetStore sets the "store" edge to the Store entity.
func (ac *AttendanceCreate) SetStore(s *Store) *AttendanceCreate {
	return ac.SetStoreID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ac *AttendanceCreate) SetEmployee(e *Employee) *AttendanceCreate {
	return ac.SetEmployeeID(e.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (ac *AttendanceCreate) Mutation() *AttendanceMutation {
	return ac.mutation
}

// Save creates the Attendance in the database.
func (ac *AttendanceCreate) Save(ctx context.Context) (*Attendance, error) {
	var (
		err  error
		node *Attendance
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attendance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttendanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AttendanceCreate) SaveX(ctx context.Context) *Attendance {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AttendanceCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AttendanceCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AttendanceCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if attendance.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized attendance.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := attendance.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if attendance.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized attendance.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := attendance.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AttendanceCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Attendance.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Attendance.updated_at"`)}
	}
	if _, ok := ac.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "Attendance.store_id"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Attendance.employee_id"`)}
	}
	if _, ok := ac.mutation.Duty(); !ok {
		return &ValidationError{Name: "duty", err: errors.New(`ent: missing required field "Attendance.duty"`)}
	}
	if _, ok := ac.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Attendance.date"`)}
	}
	if _, ok := ac.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store", err: errors.New(`ent: missing required edge "Attendance.store"`)}
	}
	if _, ok := ac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "Attendance.employee"`)}
	}
	return nil
}

func (ac *AttendanceCreate) sqlSave(ctx context.Context) (*Attendance, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ac *AttendanceCreate) createSpec() (*Attendance, *sqlgraph.CreateSpec) {
	var (
		_node = &Attendance{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: attendance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attendance.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ac.mutation.Inventory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldInventory,
		})
		_node.Inventory = value
	}
	if value, ok := ac.mutation.Photo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldPhoto,
		})
		_node.Photo = &value
	}
	if value, ok := ac.mutation.Duty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attendance.FieldDuty,
		})
		_node.Duty = value
	}
	if value, ok := ac.mutation.Date(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: attendance.FieldDate,
		})
		_node.Date = value
	}
	if value, ok := ac.mutation.Lng(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLng,
		})
		_node.Lng = &value
	}
	if value, ok := ac.mutation.Lat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLat,
		})
		_node.Lat = &value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldAddress,
		})
		_node.Address = &value
	}
	if value, ok := ac.mutation.Distance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldDistance,
		})
		_node.Distance = &value
	}
	if nodes := ac.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attendance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttendanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ac *AttendanceCreate) OnConflict(opts ...sql.ConflictOption) *AttendanceUpsertOne {
	ac.conflict = opts
	return &AttendanceUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attendance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ac *AttendanceCreate) OnConflictColumns(columns ...string) *AttendanceUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AttendanceUpsertOne{
		create: ac,
	}
}

type (
	// AttendanceUpsertOne is the builder for "upsert"-ing
	//  one Attendance node.
	AttendanceUpsertOne struct {
		create *AttendanceCreate
	}

	// AttendanceUpsert is the "OnConflict" setter.
	AttendanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AttendanceUpsert) SetCreatedAt(v time.Time) *AttendanceUpsert {
	u.Set(attendance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateCreatedAt() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttendanceUpsert) SetUpdatedAt(v time.Time) *AttendanceUpsert {
	u.Set(attendance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateUpdatedAt() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttendanceUpsert) SetDeletedAt(v time.Time) *AttendanceUpsert {
	u.Set(attendance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateDeletedAt() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttendanceUpsert) ClearDeletedAt() *AttendanceUpsert {
	u.SetNull(attendance.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *AttendanceUpsert) SetCreator(v *model.Modifier) *AttendanceUpsert {
	u.Set(attendance.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateCreator() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *AttendanceUpsert) ClearCreator() *AttendanceUpsert {
	u.SetNull(attendance.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AttendanceUpsert) SetLastModifier(v *model.Modifier) *AttendanceUpsert {
	u.Set(attendance.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateLastModifier() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AttendanceUpsert) ClearLastModifier() *AttendanceUpsert {
	u.SetNull(attendance.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AttendanceUpsert) SetRemark(v string) *AttendanceUpsert {
	u.Set(attendance.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateRemark() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AttendanceUpsert) ClearRemark() *AttendanceUpsert {
	u.SetNull(attendance.FieldRemark)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *AttendanceUpsert) SetStoreID(v uint64) *AttendanceUpsert {
	u.Set(attendance.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateStoreID() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldStoreID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *AttendanceUpsert) SetEmployeeID(v uint64) *AttendanceUpsert {
	u.Set(attendance.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateEmployeeID() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldEmployeeID)
	return u
}

// SetInventory sets the "inventory" field.
func (u *AttendanceUpsert) SetInventory(v []model.AttendanceInventory) *AttendanceUpsert {
	u.Set(attendance.FieldInventory, v)
	return u
}

// UpdateInventory sets the "inventory" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateInventory() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldInventory)
	return u
}

// ClearInventory clears the value of the "inventory" field.
func (u *AttendanceUpsert) ClearInventory() *AttendanceUpsert {
	u.SetNull(attendance.FieldInventory)
	return u
}

// SetPhoto sets the "photo" field.
func (u *AttendanceUpsert) SetPhoto(v string) *AttendanceUpsert {
	u.Set(attendance.FieldPhoto, v)
	return u
}

// UpdatePhoto sets the "photo" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdatePhoto() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldPhoto)
	return u
}

// ClearPhoto clears the value of the "photo" field.
func (u *AttendanceUpsert) ClearPhoto() *AttendanceUpsert {
	u.SetNull(attendance.FieldPhoto)
	return u
}

// SetDuty sets the "duty" field.
func (u *AttendanceUpsert) SetDuty(v bool) *AttendanceUpsert {
	u.Set(attendance.FieldDuty, v)
	return u
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateDuty() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldDuty)
	return u
}

// SetDate sets the "date" field.
func (u *AttendanceUpsert) SetDate(v model.Date) *AttendanceUpsert {
	u.Set(attendance.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateDate() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldDate)
	return u
}

// SetLng sets the "lng" field.
func (u *AttendanceUpsert) SetLng(v float64) *AttendanceUpsert {
	u.Set(attendance.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateLng() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *AttendanceUpsert) AddLng(v float64) *AttendanceUpsert {
	u.Add(attendance.FieldLng, v)
	return u
}

// ClearLng clears the value of the "lng" field.
func (u *AttendanceUpsert) ClearLng() *AttendanceUpsert {
	u.SetNull(attendance.FieldLng)
	return u
}

// SetLat sets the "lat" field.
func (u *AttendanceUpsert) SetLat(v float64) *AttendanceUpsert {
	u.Set(attendance.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateLat() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *AttendanceUpsert) AddLat(v float64) *AttendanceUpsert {
	u.Add(attendance.FieldLat, v)
	return u
}

// ClearLat clears the value of the "lat" field.
func (u *AttendanceUpsert) ClearLat() *AttendanceUpsert {
	u.SetNull(attendance.FieldLat)
	return u
}

// SetAddress sets the "address" field.
func (u *AttendanceUpsert) SetAddress(v string) *AttendanceUpsert {
	u.Set(attendance.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateAddress() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *AttendanceUpsert) ClearAddress() *AttendanceUpsert {
	u.SetNull(attendance.FieldAddress)
	return u
}

// SetDistance sets the "distance" field.
func (u *AttendanceUpsert) SetDistance(v float64) *AttendanceUpsert {
	u.Set(attendance.FieldDistance, v)
	return u
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AttendanceUpsert) UpdateDistance() *AttendanceUpsert {
	u.SetExcluded(attendance.FieldDistance)
	return u
}

// AddDistance adds v to the "distance" field.
func (u *AttendanceUpsert) AddDistance(v float64) *AttendanceUpsert {
	u.Add(attendance.FieldDistance, v)
	return u
}

// ClearDistance clears the value of the "distance" field.
func (u *AttendanceUpsert) ClearDistance() *AttendanceUpsert {
	u.SetNull(attendance.FieldDistance)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Attendance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AttendanceUpsertOne) UpdateNewValues() *AttendanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(attendance.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(attendance.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Attendance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AttendanceUpsertOne) Ignore() *AttendanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttendanceUpsertOne) DoNothing() *AttendanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttendanceCreate.OnConflict
// documentation for more info.
func (u *AttendanceUpsertOne) Update(set func(*AttendanceUpsert)) *AttendanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttendanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AttendanceUpsertOne) SetCreatedAt(v time.Time) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateCreatedAt() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttendanceUpsertOne) SetUpdatedAt(v time.Time) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateUpdatedAt() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttendanceUpsertOne) SetDeletedAt(v time.Time) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateDeletedAt() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttendanceUpsertOne) ClearDeletedAt() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *AttendanceUpsertOne) SetCreator(v *model.Modifier) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateCreator() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *AttendanceUpsertOne) ClearCreator() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AttendanceUpsertOne) SetLastModifier(v *model.Modifier) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateLastModifier() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AttendanceUpsertOne) ClearLastModifier() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AttendanceUpsertOne) SetRemark(v string) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateRemark() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AttendanceUpsertOne) ClearRemark() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearRemark()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AttendanceUpsertOne) SetStoreID(v uint64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateStoreID() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateStoreID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AttendanceUpsertOne) SetEmployeeID(v uint64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateEmployeeID() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetInventory sets the "inventory" field.
func (u *AttendanceUpsertOne) SetInventory(v []model.AttendanceInventory) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetInventory(v)
	})
}

// UpdateInventory sets the "inventory" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateInventory() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateInventory()
	})
}

// ClearInventory clears the value of the "inventory" field.
func (u *AttendanceUpsertOne) ClearInventory() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearInventory()
	})
}

// SetPhoto sets the "photo" field.
func (u *AttendanceUpsertOne) SetPhoto(v string) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetPhoto(v)
	})
}

// UpdatePhoto sets the "photo" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdatePhoto() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdatePhoto()
	})
}

// ClearPhoto clears the value of the "photo" field.
func (u *AttendanceUpsertOne) ClearPhoto() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearPhoto()
	})
}

// SetDuty sets the "duty" field.
func (u *AttendanceUpsertOne) SetDuty(v bool) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDuty(v)
	})
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateDuty() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDuty()
	})
}

// SetDate sets the "date" field.
func (u *AttendanceUpsertOne) SetDate(v model.Date) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateDate() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDate()
	})
}

// SetLng sets the "lng" field.
func (u *AttendanceUpsertOne) SetLng(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *AttendanceUpsertOne) AddLng(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateLng() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *AttendanceUpsertOne) ClearLng() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *AttendanceUpsertOne) SetLat(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *AttendanceUpsertOne) AddLat(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateLat() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *AttendanceUpsertOne) ClearLat() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLat()
	})
}

// SetAddress sets the "address" field.
func (u *AttendanceUpsertOne) SetAddress(v string) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateAddress() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AttendanceUpsertOne) ClearAddress() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearAddress()
	})
}

// SetDistance sets the "distance" field.
func (u *AttendanceUpsertOne) SetDistance(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *AttendanceUpsertOne) AddDistance(v float64) *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AttendanceUpsertOne) UpdateDistance() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDistance()
	})
}

// ClearDistance clears the value of the "distance" field.
func (u *AttendanceUpsertOne) ClearDistance() *AttendanceUpsertOne {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearDistance()
	})
}

// Exec executes the query.
func (u *AttendanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttendanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttendanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttendanceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttendanceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttendanceCreateBulk is the builder for creating many Attendance entities in bulk.
type AttendanceCreateBulk struct {
	config
	builders []*AttendanceCreate
	conflict []sql.ConflictOption
}

// Save creates the Attendance entities in the database.
func (acb *AttendanceCreateBulk) Save(ctx context.Context) ([]*Attendance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Attendance, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttendanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AttendanceCreateBulk) SaveX(ctx context.Context) []*Attendance {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AttendanceCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AttendanceCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Attendance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttendanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (acb *AttendanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttendanceUpsertBulk {
	acb.conflict = opts
	return &AttendanceUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Attendance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acb *AttendanceCreateBulk) OnConflictColumns(columns ...string) *AttendanceUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AttendanceUpsertBulk{
		create: acb,
	}
}

// AttendanceUpsertBulk is the builder for "upsert"-ing
// a bulk of Attendance nodes.
type AttendanceUpsertBulk struct {
	create *AttendanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Attendance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *AttendanceUpsertBulk) UpdateNewValues() *AttendanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(attendance.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(attendance.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Attendance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AttendanceUpsertBulk) Ignore() *AttendanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttendanceUpsertBulk) DoNothing() *AttendanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttendanceCreateBulk.OnConflict
// documentation for more info.
func (u *AttendanceUpsertBulk) Update(set func(*AttendanceUpsert)) *AttendanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttendanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AttendanceUpsertBulk) SetCreatedAt(v time.Time) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateCreatedAt() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AttendanceUpsertBulk) SetUpdatedAt(v time.Time) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateUpdatedAt() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AttendanceUpsertBulk) SetDeletedAt(v time.Time) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateDeletedAt() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AttendanceUpsertBulk) ClearDeletedAt() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *AttendanceUpsertBulk) SetCreator(v *model.Modifier) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateCreator() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *AttendanceUpsertBulk) ClearCreator() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AttendanceUpsertBulk) SetLastModifier(v *model.Modifier) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateLastModifier() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AttendanceUpsertBulk) ClearLastModifier() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AttendanceUpsertBulk) SetRemark(v string) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateRemark() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AttendanceUpsertBulk) ClearRemark() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearRemark()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AttendanceUpsertBulk) SetStoreID(v uint64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateStoreID() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateStoreID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AttendanceUpsertBulk) SetEmployeeID(v uint64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateEmployeeID() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetInventory sets the "inventory" field.
func (u *AttendanceUpsertBulk) SetInventory(v []model.AttendanceInventory) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetInventory(v)
	})
}

// UpdateInventory sets the "inventory" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateInventory() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateInventory()
	})
}

// ClearInventory clears the value of the "inventory" field.
func (u *AttendanceUpsertBulk) ClearInventory() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearInventory()
	})
}

// SetPhoto sets the "photo" field.
func (u *AttendanceUpsertBulk) SetPhoto(v string) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetPhoto(v)
	})
}

// UpdatePhoto sets the "photo" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdatePhoto() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdatePhoto()
	})
}

// ClearPhoto clears the value of the "photo" field.
func (u *AttendanceUpsertBulk) ClearPhoto() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearPhoto()
	})
}

// SetDuty sets the "duty" field.
func (u *AttendanceUpsertBulk) SetDuty(v bool) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDuty(v)
	})
}

// UpdateDuty sets the "duty" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateDuty() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDuty()
	})
}

// SetDate sets the "date" field.
func (u *AttendanceUpsertBulk) SetDate(v model.Date) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateDate() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDate()
	})
}

// SetLng sets the "lng" field.
func (u *AttendanceUpsertBulk) SetLng(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *AttendanceUpsertBulk) AddLng(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateLng() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *AttendanceUpsertBulk) ClearLng() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *AttendanceUpsertBulk) SetLat(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *AttendanceUpsertBulk) AddLat(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateLat() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *AttendanceUpsertBulk) ClearLat() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearLat()
	})
}

// SetAddress sets the "address" field.
func (u *AttendanceUpsertBulk) SetAddress(v string) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateAddress() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AttendanceUpsertBulk) ClearAddress() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearAddress()
	})
}

// SetDistance sets the "distance" field.
func (u *AttendanceUpsertBulk) SetDistance(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.SetDistance(v)
	})
}

// AddDistance adds v to the "distance" field.
func (u *AttendanceUpsertBulk) AddDistance(v float64) *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.AddDistance(v)
	})
}

// UpdateDistance sets the "distance" field to the value that was provided on create.
func (u *AttendanceUpsertBulk) UpdateDistance() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.UpdateDistance()
	})
}

// ClearDistance clears the value of the "distance" field.
func (u *AttendanceUpsertBulk) ClearDistance() *AttendanceUpsertBulk {
	return u.Update(func(s *AttendanceUpsert) {
		s.ClearDistance()
	})
}

// Exec executes the query.
func (u *AttendanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttendanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttendanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttendanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
