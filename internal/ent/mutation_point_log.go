// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/pointlog"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// PointLogMutation represents an operation that mutates the PointLog nodes in the graph.
type PointLogMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	modifier      **model.Modifier
	employee_info **model.Employee
	_type         *uint8
	add_type      *int8
	points        *int64
	addpoints     *int64
	after         *int64
	addafter      *int64
	reason        *string
	clearedFields map[string]struct{}
	rider         *uint64
	clearedrider  bool
	_order        *uint64
	cleared_order bool
	done          bool
	oldValue      func(context.Context) (*PointLog, error)
	predicates    []predicate.PointLog
}

var _ ent.Mutation = (*PointLogMutation)(nil)

// pointlogOption allows management of the mutation configuration using functional options.
type pointlogOption func(*PointLogMutation)

// newPointLogMutation creates new mutation for the PointLog entity.
func newPointLogMutation(c config, op Op, opts ...pointlogOption) *PointLogMutation {
	m := &PointLogMutation{
		config:        c,
		op:            op,
		typ:           TypePointLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPointLogID sets the ID field of the mutation.
func withPointLogID(id uint64) pointlogOption {
	return func(m *PointLogMutation) {
		var (
			err   error
			once  sync.Once
			value *PointLog
		)
		m.oldValue = func(ctx context.Context) (*PointLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PointLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPointLog sets the old PointLog of the mutation.
func withPointLog(node *PointLog) pointlogOption {
	return func(m *PointLogMutation) {
		m.oldValue = func(context.Context) (*PointLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PointLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PointLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PointLogMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PointLogMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PointLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PointLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PointLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PointLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PointLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PointLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PointLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRiderID sets the "rider_id" field.
func (m *PointLogMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *PointLogMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *PointLogMutation) ResetRiderID() {
	m.rider = nil
}

// SetOrderID sets the "order_id" field.
func (m *PointLogMutation) SetOrderID(u uint64) {
	m._order = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *PointLogMutation) OrderID() (r uint64, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldOrderID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *PointLogMutation) ClearOrderID() {
	m._order = nil
	m.clearedFields[pointlog.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *PointLogMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[pointlog.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *PointLogMutation) ResetOrderID() {
	m._order = nil
	delete(m.clearedFields, pointlog.FieldOrderID)
}

// SetModifier sets the "modifier" field.
func (m *PointLogMutation) SetModifier(value *model.Modifier) {
	m.modifier = &value
}

// Modifier returns the value of the "modifier" field in the mutation.
func (m *PointLogMutation) Modifier() (r *model.Modifier, exists bool) {
	v := m.modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldModifier returns the old "modifier" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifier: %w", err)
	}
	return oldValue.Modifier, nil
}

// ClearModifier clears the value of the "modifier" field.
func (m *PointLogMutation) ClearModifier() {
	m.modifier = nil
	m.clearedFields[pointlog.FieldModifier] = struct{}{}
}

// ModifierCleared returns if the "modifier" field was cleared in this mutation.
func (m *PointLogMutation) ModifierCleared() bool {
	_, ok := m.clearedFields[pointlog.FieldModifier]
	return ok
}

// ResetModifier resets all changes to the "modifier" field.
func (m *PointLogMutation) ResetModifier() {
	m.modifier = nil
	delete(m.clearedFields, pointlog.FieldModifier)
}

// SetEmployeeInfo sets the "employee_info" field.
func (m *PointLogMutation) SetEmployeeInfo(value *model.Employee) {
	m.employee_info = &value
}

// EmployeeInfo returns the value of the "employee_info" field in the mutation.
func (m *PointLogMutation) EmployeeInfo() (r *model.Employee, exists bool) {
	v := m.employee_info
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeInfo returns the old "employee_info" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldEmployeeInfo(ctx context.Context) (v *model.Employee, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeInfo: %w", err)
	}
	return oldValue.EmployeeInfo, nil
}

// ClearEmployeeInfo clears the value of the "employee_info" field.
func (m *PointLogMutation) ClearEmployeeInfo() {
	m.employee_info = nil
	m.clearedFields[pointlog.FieldEmployeeInfo] = struct{}{}
}

// EmployeeInfoCleared returns if the "employee_info" field was cleared in this mutation.
func (m *PointLogMutation) EmployeeInfoCleared() bool {
	_, ok := m.clearedFields[pointlog.FieldEmployeeInfo]
	return ok
}

// ResetEmployeeInfo resets all changes to the "employee_info" field.
func (m *PointLogMutation) ResetEmployeeInfo() {
	m.employee_info = nil
	delete(m.clearedFields, pointlog.FieldEmployeeInfo)
}

// SetType sets the "type" field.
func (m *PointLogMutation) SetType(u uint8) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *PointLogMutation) GetType() (r uint8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *PointLogMutation) AddType(u int8) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *PointLogMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *PointLogMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetPoints sets the "points" field.
func (m *PointLogMutation) SetPoints(i int64) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *PointLogMutation) Points() (r int64, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldPoints(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *PointLogMutation) AddPoints(i int64) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *PointLogMutation) AddedPoints() (r int64, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *PointLogMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// SetAfter sets the "after" field.
func (m *PointLogMutation) SetAfter(i int64) {
	m.after = &i
	m.addafter = nil
}

// After returns the value of the "after" field in the mutation.
func (m *PointLogMutation) After() (r int64, exists bool) {
	v := m.after
	if v == nil {
		return
	}
	return *v, true
}

// OldAfter returns the old "after" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldAfter(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAfter is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAfter requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAfter: %w", err)
	}
	return oldValue.After, nil
}

// AddAfter adds i to the "after" field.
func (m *PointLogMutation) AddAfter(i int64) {
	if m.addafter != nil {
		*m.addafter += i
	} else {
		m.addafter = &i
	}
}

// AddedAfter returns the value that was added to the "after" field in this mutation.
func (m *PointLogMutation) AddedAfter() (r int64, exists bool) {
	v := m.addafter
	if v == nil {
		return
	}
	return *v, true
}

// ResetAfter resets all changes to the "after" field.
func (m *PointLogMutation) ResetAfter() {
	m.after = nil
	m.addafter = nil
}

// SetReason sets the "reason" field.
func (m *PointLogMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *PointLogMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the PointLog entity.
// If the PointLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PointLogMutation) OldReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *PointLogMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[pointlog.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *PointLogMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[pointlog.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *PointLogMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, pointlog.FieldReason)
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *PointLogMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *PointLogMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *PointLogMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *PointLogMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *PointLogMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *PointLogMutation) OrderCleared() bool {
	return m.OrderIDCleared() || m.cleared_order
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *PointLogMutation) OrderIDs() (ids []uint64) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *PointLogMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// Where appends a list predicates to the PointLogMutation builder.
func (m *PointLogMutation) Where(ps ...predicate.PointLog) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PointLogMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PointLog).
func (m *PointLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PointLogMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, pointlog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, pointlog.FieldUpdatedAt)
	}
	if m.rider != nil {
		fields = append(fields, pointlog.FieldRiderID)
	}
	if m._order != nil {
		fields = append(fields, pointlog.FieldOrderID)
	}
	if m.modifier != nil {
		fields = append(fields, pointlog.FieldModifier)
	}
	if m.employee_info != nil {
		fields = append(fields, pointlog.FieldEmployeeInfo)
	}
	if m._type != nil {
		fields = append(fields, pointlog.FieldType)
	}
	if m.points != nil {
		fields = append(fields, pointlog.FieldPoints)
	}
	if m.after != nil {
		fields = append(fields, pointlog.FieldAfter)
	}
	if m.reason != nil {
		fields = append(fields, pointlog.FieldReason)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PointLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pointlog.FieldCreatedAt:
		return m.CreatedAt()
	case pointlog.FieldUpdatedAt:
		return m.UpdatedAt()
	case pointlog.FieldRiderID:
		return m.RiderID()
	case pointlog.FieldOrderID:
		return m.OrderID()
	case pointlog.FieldModifier:
		return m.Modifier()
	case pointlog.FieldEmployeeInfo:
		return m.EmployeeInfo()
	case pointlog.FieldType:
		return m.GetType()
	case pointlog.FieldPoints:
		return m.Points()
	case pointlog.FieldAfter:
		return m.After()
	case pointlog.FieldReason:
		return m.Reason()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PointLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pointlog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case pointlog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case pointlog.FieldRiderID:
		return m.OldRiderID(ctx)
	case pointlog.FieldOrderID:
		return m.OldOrderID(ctx)
	case pointlog.FieldModifier:
		return m.OldModifier(ctx)
	case pointlog.FieldEmployeeInfo:
		return m.OldEmployeeInfo(ctx)
	case pointlog.FieldType:
		return m.OldType(ctx)
	case pointlog.FieldPoints:
		return m.OldPoints(ctx)
	case pointlog.FieldAfter:
		return m.OldAfter(ctx)
	case pointlog.FieldReason:
		return m.OldReason(ctx)
	}
	return nil, fmt.Errorf("unknown PointLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pointlog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case pointlog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case pointlog.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case pointlog.FieldOrderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case pointlog.FieldModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifier(v)
		return nil
	case pointlog.FieldEmployeeInfo:
		v, ok := value.(*model.Employee)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeInfo(v)
		return nil
	case pointlog.FieldType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case pointlog.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case pointlog.FieldAfter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAfter(v)
		return nil
	case pointlog.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	}
	return fmt.Errorf("unknown PointLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PointLogMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, pointlog.FieldType)
	}
	if m.addpoints != nil {
		fields = append(fields, pointlog.FieldPoints)
	}
	if m.addafter != nil {
		fields = append(fields, pointlog.FieldAfter)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PointLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pointlog.FieldType:
		return m.AddedType()
	case pointlog.FieldPoints:
		return m.AddedPoints()
	case pointlog.FieldAfter:
		return m.AddedAfter()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PointLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pointlog.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case pointlog.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case pointlog.FieldAfter:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAfter(v)
		return nil
	}
	return fmt.Errorf("unknown PointLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PointLogMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pointlog.FieldOrderID) {
		fields = append(fields, pointlog.FieldOrderID)
	}
	if m.FieldCleared(pointlog.FieldModifier) {
		fields = append(fields, pointlog.FieldModifier)
	}
	if m.FieldCleared(pointlog.FieldEmployeeInfo) {
		fields = append(fields, pointlog.FieldEmployeeInfo)
	}
	if m.FieldCleared(pointlog.FieldReason) {
		fields = append(fields, pointlog.FieldReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PointLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PointLogMutation) ClearField(name string) error {
	switch name {
	case pointlog.FieldOrderID:
		m.ClearOrderID()
		return nil
	case pointlog.FieldModifier:
		m.ClearModifier()
		return nil
	case pointlog.FieldEmployeeInfo:
		m.ClearEmployeeInfo()
		return nil
	case pointlog.FieldReason:
		m.ClearReason()
		return nil
	}
	return fmt.Errorf("unknown PointLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PointLogMutation) ResetField(name string) error {
	switch name {
	case pointlog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case pointlog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case pointlog.FieldRiderID:
		m.ResetRiderID()
		return nil
	case pointlog.FieldOrderID:
		m.ResetOrderID()
		return nil
	case pointlog.FieldModifier:
		m.ResetModifier()
		return nil
	case pointlog.FieldEmployeeInfo:
		m.ResetEmployeeInfo()
		return nil
	case pointlog.FieldType:
		m.ResetType()
		return nil
	case pointlog.FieldPoints:
		m.ResetPoints()
		return nil
	case pointlog.FieldAfter:
		m.ResetAfter()
		return nil
	case pointlog.FieldReason:
		m.ResetReason()
		return nil
	}
	return fmt.Errorf("unknown PointLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PointLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rider != nil {
		edges = append(edges, pointlog.EdgeRider)
	}
	if m._order != nil {
		edges = append(edges, pointlog.EdgeOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PointLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pointlog.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case pointlog.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PointLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PointLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PointLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrider {
		edges = append(edges, pointlog.EdgeRider)
	}
	if m.cleared_order {
		edges = append(edges, pointlog.EdgeOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PointLogMutation) EdgeCleared(name string) bool {
	switch name {
	case pointlog.EdgeRider:
		return m.clearedrider
	case pointlog.EdgeOrder:
		return m.cleared_order
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PointLogMutation) ClearEdge(name string) error {
	switch name {
	case pointlog.EdgeRider:
		m.ClearRider()
		return nil
	case pointlog.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown PointLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PointLogMutation) ResetEdge(name string) error {
	switch name {
	case pointlog.EdgeRider:
		m.ResetRider()
		return nil
	case pointlog.EdgeOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown PointLog edge %s", name)
}

