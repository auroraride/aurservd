// Code generated by ent, DO NOT EDIT.

package batteryflow

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldUpdatedAt, v))
}

// SubscribeID applies equality check predicate on the "subscribe_id" field. It's identical to SubscribeIDEQ.
func SubscribeID(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSubscribeID, v))
}

// BatteryID applies equality check predicate on the "battery_id" field. It's identical to BatteryIDEQ.
func BatteryID(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldBatteryID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSn, v))
}

// Soc applies equality check predicate on the "soc" field. It's identical to SocEQ.
func Soc(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSoc, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldRiderID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldCabinetID, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSerial, v))
}

// Ordinal applies equality check predicate on the "ordinal" field. It's identical to OrdinalEQ.
func Ordinal(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldOrdinal, v))
}

// Geom applies equality check predicate on the "geom" field. It's identical to GeomEQ.
func Geom(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldGeom, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldUpdatedAt, v))
}

// SubscribeIDEQ applies the EQ predicate on the "subscribe_id" field.
func SubscribeIDEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSubscribeID, v))
}

// SubscribeIDNEQ applies the NEQ predicate on the "subscribe_id" field.
func SubscribeIDNEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldSubscribeID, v))
}

// SubscribeIDIn applies the In predicate on the "subscribe_id" field.
func SubscribeIDIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldSubscribeID, vs...))
}

// SubscribeIDNotIn applies the NotIn predicate on the "subscribe_id" field.
func SubscribeIDNotIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldSubscribeID, vs...))
}

// SubscribeIDIsNil applies the IsNil predicate on the "subscribe_id" field.
func SubscribeIDIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldSubscribeID))
}

// SubscribeIDNotNil applies the NotNil predicate on the "subscribe_id" field.
func SubscribeIDNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldSubscribeID))
}

// BatteryIDEQ applies the EQ predicate on the "battery_id" field.
func BatteryIDEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldBatteryID, v))
}

// BatteryIDNEQ applies the NEQ predicate on the "battery_id" field.
func BatteryIDNEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldBatteryID, v))
}

// BatteryIDIn applies the In predicate on the "battery_id" field.
func BatteryIDIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldBatteryID, vs...))
}

// BatteryIDNotIn applies the NotIn predicate on the "battery_id" field.
func BatteryIDNotIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldBatteryID, vs...))
}

// BatteryIDGT applies the GT predicate on the "battery_id" field.
func BatteryIDGT(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldBatteryID, v))
}

// BatteryIDGTE applies the GTE predicate on the "battery_id" field.
func BatteryIDGTE(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldBatteryID, v))
}

// BatteryIDLT applies the LT predicate on the "battery_id" field.
func BatteryIDLT(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldBatteryID, v))
}

// BatteryIDLTE applies the LTE predicate on the "battery_id" field.
func BatteryIDLTE(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldBatteryID, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContainsFold(FieldSn, v))
}

// SocEQ applies the EQ predicate on the "soc" field.
func SocEQ(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSoc, v))
}

// SocNEQ applies the NEQ predicate on the "soc" field.
func SocNEQ(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldSoc, v))
}

// SocIn applies the In predicate on the "soc" field.
func SocIn(vs ...float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldSoc, vs...))
}

// SocNotIn applies the NotIn predicate on the "soc" field.
func SocNotIn(vs ...float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldSoc, vs...))
}

// SocGT applies the GT predicate on the "soc" field.
func SocGT(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldSoc, v))
}

// SocGTE applies the GTE predicate on the "soc" field.
func SocGTE(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldSoc, v))
}

// SocLT applies the LT predicate on the "soc" field.
func SocLT(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldSoc, v))
}

// SocLTE applies the LTE predicate on the "soc" field.
func SocLTE(v float64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldSoc, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldRiderID))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldCabinetID, vs...))
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldCabinetID))
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldCabinetID))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialIsNil applies the IsNil predicate on the "serial" field.
func SerialIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldSerial))
}

// SerialNotNil applies the NotNil predicate on the "serial" field.
func SerialNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldSerial))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContainsFold(FieldSerial, v))
}

// OrdinalEQ applies the EQ predicate on the "ordinal" field.
func OrdinalEQ(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldOrdinal, v))
}

// OrdinalNEQ applies the NEQ predicate on the "ordinal" field.
func OrdinalNEQ(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldOrdinal, v))
}

// OrdinalIn applies the In predicate on the "ordinal" field.
func OrdinalIn(vs ...int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldOrdinal, vs...))
}

// OrdinalNotIn applies the NotIn predicate on the "ordinal" field.
func OrdinalNotIn(vs ...int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldOrdinal, vs...))
}

// OrdinalGT applies the GT predicate on the "ordinal" field.
func OrdinalGT(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldOrdinal, v))
}

// OrdinalGTE applies the GTE predicate on the "ordinal" field.
func OrdinalGTE(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldOrdinal, v))
}

// OrdinalLT applies the LT predicate on the "ordinal" field.
func OrdinalLT(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldOrdinal, v))
}

// OrdinalLTE applies the LTE predicate on the "ordinal" field.
func OrdinalLTE(v int) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldOrdinal, v))
}

// OrdinalIsNil applies the IsNil predicate on the "ordinal" field.
func OrdinalIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldOrdinal))
}

// OrdinalNotNil applies the NotNil predicate on the "ordinal" field.
func OrdinalNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldOrdinal))
}

// GeomEQ applies the EQ predicate on the "geom" field.
func GeomEQ(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldGeom, v))
}

// GeomNEQ applies the NEQ predicate on the "geom" field.
func GeomNEQ(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldGeom, v))
}

// GeomIn applies the In predicate on the "geom" field.
func GeomIn(vs ...*adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldGeom, vs...))
}

// GeomNotIn applies the NotIn predicate on the "geom" field.
func GeomNotIn(vs ...*adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldGeom, vs...))
}

// GeomGT applies the GT predicate on the "geom" field.
func GeomGT(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldGeom, v))
}

// GeomGTE applies the GTE predicate on the "geom" field.
func GeomGTE(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldGeom, v))
}

// GeomLT applies the LT predicate on the "geom" field.
func GeomLT(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldGeom, v))
}

// GeomLTE applies the LTE predicate on the "geom" field.
func GeomLTE(v *adapter.Geometry) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldGeom, v))
}

// GeomIsNil applies the IsNil predicate on the "geom" field.
func GeomIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldGeom))
}

// GeomNotNil applies the NotNil predicate on the "geom" field.
func GeomNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldGeom))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.FieldContainsFold(FieldRemark, v))
}

// HasSubscribe applies the HasEdge predicate on the "subscribe" edge.
func HasSubscribe() predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribeWith applies the HasEdge predicate on the "subscribe" edge with a given conditions (other predicates).
func HasSubscribeWith(preds ...predicate.Subscribe) predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := newSubscribeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.BatteryFlow {
	return predicate.BatteryFlow(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BatteryFlow) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BatteryFlow) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BatteryFlow) predicate.BatteryFlow {
	return predicate.BatteryFlow(sql.NotPredicates(p))
}
