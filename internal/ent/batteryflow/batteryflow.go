// Code generated by ent, DO NOT EDIT.

package batteryflow

import (
	"time"
)

const (
	// Label holds the string label denoting the batteryflow type in the database.
	Label = "battery_flow"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldBatteryID holds the string denoting the battery_id field in the database.
	FieldBatteryID = "battery_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldSoc holds the string denoting the soc field in the database.
	FieldSoc = "soc"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldOrdinal holds the string denoting the ordinal field in the database.
	FieldOrdinal = "ordinal"
	// FieldGeom holds the string denoting the geom field in the database.
	FieldGeom = "geom"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// Table holds the table name of the batteryflow in the database.
	Table = "battery_flow"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "battery_flow"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "battery_flow"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "battery_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "battery_flow"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "battery_flow"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
)

// Columns holds all SQL columns for batteryflow fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSubscribeID,
	FieldBatteryID,
	FieldSn,
	FieldSoc,
	FieldRiderID,
	FieldCabinetID,
	FieldSerial,
	FieldOrdinal,
	FieldGeom,
	FieldRemark,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSoc holds the default value on creation for the "soc" field.
	DefaultSoc float64
)
