// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterprisePriceQuery is the builder for querying EnterprisePrice entities.
type EnterprisePriceQuery struct {
	config
	ctx            *QueryContext
	order          []OrderFunc
	inters         []Interceptor
	predicates     []predicate.EnterprisePrice
	withCity       *CityQuery
	withEnterprise *EnterpriseQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterprisePriceQuery builder.
func (epq *EnterprisePriceQuery) Where(ps ...predicate.EnterprisePrice) *EnterprisePriceQuery {
	epq.predicates = append(epq.predicates, ps...)
	return epq
}

// Limit the number of records to be returned by this query.
func (epq *EnterprisePriceQuery) Limit(limit int) *EnterprisePriceQuery {
	epq.ctx.Limit = &limit
	return epq
}

// Offset to start from.
func (epq *EnterprisePriceQuery) Offset(offset int) *EnterprisePriceQuery {
	epq.ctx.Offset = &offset
	return epq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (epq *EnterprisePriceQuery) Unique(unique bool) *EnterprisePriceQuery {
	epq.ctx.Unique = &unique
	return epq
}

// Order specifies how the records should be ordered.
func (epq *EnterprisePriceQuery) Order(o ...OrderFunc) *EnterprisePriceQuery {
	epq.order = append(epq.order, o...)
	return epq
}

// QueryCity chains the current query on the "city" edge.
func (epq *EnterprisePriceQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: epq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterpriseprice.CityTable, enterpriseprice.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (epq *EnterprisePriceQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: epq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := epq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := epq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterpriseprice.Table, enterpriseprice.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterpriseprice.EnterpriseTable, enterpriseprice.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(epq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnterprisePrice entity from the query.
// Returns a *NotFoundError when no EnterprisePrice was found.
func (epq *EnterprisePriceQuery) First(ctx context.Context) (*EnterprisePrice, error) {
	nodes, err := epq.Limit(1).All(setContextOp(ctx, epq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterpriseprice.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (epq *EnterprisePriceQuery) FirstX(ctx context.Context) *EnterprisePrice {
	node, err := epq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnterprisePrice ID from the query.
// Returns a *NotFoundError when no EnterprisePrice ID was found.
func (epq *EnterprisePriceQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = epq.Limit(1).IDs(setContextOp(ctx, epq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterpriseprice.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (epq *EnterprisePriceQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := epq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnterprisePrice entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnterprisePrice entity is found.
// Returns a *NotFoundError when no EnterprisePrice entities are found.
func (epq *EnterprisePriceQuery) Only(ctx context.Context) (*EnterprisePrice, error) {
	nodes, err := epq.Limit(2).All(setContextOp(ctx, epq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterpriseprice.Label}
	default:
		return nil, &NotSingularError{enterpriseprice.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (epq *EnterprisePriceQuery) OnlyX(ctx context.Context) *EnterprisePrice {
	node, err := epq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnterprisePrice ID in the query.
// Returns a *NotSingularError when more than one EnterprisePrice ID is found.
// Returns a *NotFoundError when no entities are found.
func (epq *EnterprisePriceQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = epq.Limit(2).IDs(setContextOp(ctx, epq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterpriseprice.Label}
	default:
		err = &NotSingularError{enterpriseprice.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (epq *EnterprisePriceQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := epq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnterprisePrices.
func (epq *EnterprisePriceQuery) All(ctx context.Context) ([]*EnterprisePrice, error) {
	ctx = setContextOp(ctx, epq.ctx, "All")
	if err := epq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EnterprisePrice, *EnterprisePriceQuery]()
	return withInterceptors[[]*EnterprisePrice](ctx, epq, qr, epq.inters)
}

// AllX is like All, but panics if an error occurs.
func (epq *EnterprisePriceQuery) AllX(ctx context.Context) []*EnterprisePrice {
	nodes, err := epq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnterprisePrice IDs.
func (epq *EnterprisePriceQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = setContextOp(ctx, epq.ctx, "IDs")
	if err := epq.Select(enterpriseprice.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (epq *EnterprisePriceQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := epq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (epq *EnterprisePriceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, epq.ctx, "Count")
	if err := epq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, epq, querierCount[*EnterprisePriceQuery](), epq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (epq *EnterprisePriceQuery) CountX(ctx context.Context) int {
	count, err := epq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (epq *EnterprisePriceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, epq.ctx, "Exist")
	switch _, err := epq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (epq *EnterprisePriceQuery) ExistX(ctx context.Context) bool {
	exist, err := epq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterprisePriceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (epq *EnterprisePriceQuery) Clone() *EnterprisePriceQuery {
	if epq == nil {
		return nil
	}
	return &EnterprisePriceQuery{
		config:         epq.config,
		ctx:            epq.ctx.Clone(),
		order:          append([]OrderFunc{}, epq.order...),
		inters:         append([]Interceptor{}, epq.inters...),
		predicates:     append([]predicate.EnterprisePrice{}, epq.predicates...),
		withCity:       epq.withCity.Clone(),
		withEnterprise: epq.withEnterprise.Clone(),
		// clone intermediate query.
		sql:  epq.sql.Clone(),
		path: epq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EnterprisePriceQuery) WithCity(opts ...func(*CityQuery)) *EnterprisePriceQuery {
	query := (&CityClient{config: epq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	epq.withCity = query
	return epq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (epq *EnterprisePriceQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *EnterprisePriceQuery {
	query := (&EnterpriseClient{config: epq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	epq.withEnterprise = query
	return epq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnterprisePrice.Query().
//		GroupBy(enterpriseprice.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (epq *EnterprisePriceQuery) GroupBy(field string, fields ...string) *EnterprisePriceGroupBy {
	epq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnterprisePriceGroupBy{build: epq}
	grbuild.flds = &epq.ctx.Fields
	grbuild.label = enterpriseprice.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EnterprisePrice.Query().
//		Select(enterpriseprice.FieldCreatedAt).
//		Scan(ctx, &v)
func (epq *EnterprisePriceQuery) Select(fields ...string) *EnterprisePriceSelect {
	epq.ctx.Fields = append(epq.ctx.Fields, fields...)
	sbuild := &EnterprisePriceSelect{EnterprisePriceQuery: epq}
	sbuild.label = enterpriseprice.Label
	sbuild.flds, sbuild.scan = &epq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnterprisePriceSelect configured with the given aggregations.
func (epq *EnterprisePriceQuery) Aggregate(fns ...AggregateFunc) *EnterprisePriceSelect {
	return epq.Select().Aggregate(fns...)
}

func (epq *EnterprisePriceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range epq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, epq); err != nil {
				return err
			}
		}
	}
	for _, f := range epq.ctx.Fields {
		if !enterpriseprice.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if epq.path != nil {
		prev, err := epq.path(ctx)
		if err != nil {
			return err
		}
		epq.sql = prev
	}
	return nil
}

func (epq *EnterprisePriceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnterprisePrice, error) {
	var (
		nodes       = []*EnterprisePrice{}
		_spec       = epq.querySpec()
		loadedTypes = [2]bool{
			epq.withCity != nil,
			epq.withEnterprise != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EnterprisePrice).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EnterprisePrice{config: epq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(epq.modifiers) > 0 {
		_spec.Modifiers = epq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, epq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := epq.withCity; query != nil {
		if err := epq.loadCity(ctx, query, nodes, nil,
			func(n *EnterprisePrice, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := epq.withEnterprise; query != nil {
		if err := epq.loadEnterprise(ctx, query, nodes, nil,
			func(n *EnterprisePrice, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (epq *EnterprisePriceQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*EnterprisePrice, init func(*EnterprisePrice), assign func(*EnterprisePrice, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterprisePrice)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (epq *EnterprisePriceQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*EnterprisePrice, init func(*EnterprisePrice), assign func(*EnterprisePrice, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterprisePrice)
	for i := range nodes {
		fk := nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (epq *EnterprisePriceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := epq.querySpec()
	if len(epq.modifiers) > 0 {
		_spec.Modifiers = epq.modifiers
	}
	_spec.Node.Columns = epq.ctx.Fields
	if len(epq.ctx.Fields) > 0 {
		_spec.Unique = epq.ctx.Unique != nil && *epq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, epq.driver, _spec)
}

func (epq *EnterprisePriceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterpriseprice.Table,
			Columns: enterpriseprice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseprice.FieldID,
			},
		},
		From:   epq.sql,
		Unique: true,
	}
	if unique := epq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := epq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterpriseprice.FieldID)
		for i := range fields {
			if fields[i] != enterpriseprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := epq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := epq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := epq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := epq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (epq *EnterprisePriceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(epq.driver.Dialect())
	t1 := builder.Table(enterpriseprice.Table)
	columns := epq.ctx.Fields
	if len(columns) == 0 {
		columns = enterpriseprice.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if epq.sql != nil {
		selector = epq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if epq.ctx.Unique != nil && *epq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range epq.modifiers {
		m(selector)
	}
	for _, p := range epq.predicates {
		p(selector)
	}
	for _, p := range epq.order {
		p(selector)
	}
	if offset := epq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := epq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (epq *EnterprisePriceQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterprisePriceSelect {
	epq.modifiers = append(epq.modifiers, modifiers...)
	return epq.Select()
}

type EnterprisePriceQueryWith string

var (
	EnterprisePriceQueryWithCity       EnterprisePriceQueryWith = "City"
	EnterprisePriceQueryWithEnterprise EnterprisePriceQueryWith = "Enterprise"
)

func (epq *EnterprisePriceQuery) With(withEdges ...EnterprisePriceQueryWith) *EnterprisePriceQuery {
	for _, v := range withEdges {
		switch v {
		case EnterprisePriceQueryWithCity:
			epq.WithCity()
		case EnterprisePriceQueryWithEnterprise:
			epq.WithEnterprise()
		}
	}
	return epq
}

// EnterprisePriceGroupBy is the group-by builder for EnterprisePrice entities.
type EnterprisePriceGroupBy struct {
	selector
	build *EnterprisePriceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (epgb *EnterprisePriceGroupBy) Aggregate(fns ...AggregateFunc) *EnterprisePriceGroupBy {
	epgb.fns = append(epgb.fns, fns...)
	return epgb
}

// Scan applies the selector query and scans the result into the given value.
func (epgb *EnterprisePriceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, epgb.build.ctx, "GroupBy")
	if err := epgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterprisePriceQuery, *EnterprisePriceGroupBy](ctx, epgb.build, epgb, epgb.build.inters, v)
}

func (epgb *EnterprisePriceGroupBy) sqlScan(ctx context.Context, root *EnterprisePriceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(epgb.fns))
	for _, fn := range epgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*epgb.flds)+len(epgb.fns))
		for _, f := range *epgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*epgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := epgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnterprisePriceSelect is the builder for selecting fields of EnterprisePrice entities.
type EnterprisePriceSelect struct {
	*EnterprisePriceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (eps *EnterprisePriceSelect) Aggregate(fns ...AggregateFunc) *EnterprisePriceSelect {
	eps.fns = append(eps.fns, fns...)
	return eps
}

// Scan applies the selector query and scans the result into the given value.
func (eps *EnterprisePriceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, eps.ctx, "Select")
	if err := eps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterprisePriceQuery, *EnterprisePriceSelect](ctx, eps.EnterprisePriceQuery, eps, eps.inters, v)
}

func (eps *EnterprisePriceSelect) sqlScan(ctx context.Context, root *EnterprisePriceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(eps.fns))
	for _, fn := range eps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*eps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eps *EnterprisePriceSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterprisePriceSelect {
	eps.modifiers = append(eps.modifiers, modifiers...)
	return eps
}
