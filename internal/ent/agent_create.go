// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
)

// AgentCreate is the builder for creating a Agent entity.
type AgentCreate struct {
	config
	mutation *AgentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AgentCreate) SetCreatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableCreatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AgentCreate) SetUpdatedAt(t time.Time) *AgentCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableUpdatedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AgentCreate) SetDeletedAt(t time.Time) *AgentCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AgentCreate) SetNillableDeletedAt(t *time.Time) *AgentCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AgentCreate) SetCreator(m *model.Modifier) *AgentCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AgentCreate) SetLastModifier(m *model.Modifier) *AgentCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AgentCreate) SetRemark(s string) *AgentCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AgentCreate) SetNillableRemark(s *string) *AgentCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ac *AgentCreate) SetEnterpriseID(u uint64) *AgentCreate {
	ac.mutation.SetEnterpriseID(u)
	return ac
}

// SetName sets the "name" field.
func (ac *AgentCreate) SetName(s string) *AgentCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AgentCreate) SetPhone(s string) *AgentCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetSuper sets the "super" field.
func (ac *AgentCreate) SetSuper(b bool) *AgentCreate {
	ac.mutation.SetSuper(b)
	return ac
}

// SetNillableSuper sets the "super" field if the given value is not nil.
func (ac *AgentCreate) SetNillableSuper(b *bool) *AgentCreate {
	if b != nil {
		ac.SetSuper(*b)
	}
	return ac
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ac *AgentCreate) SetEnterprise(e *Enterprise) *AgentCreate {
	return ac.SetEnterpriseID(e.ID)
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by IDs.
func (ac *AgentCreate) AddStationIDs(ids ...uint64) *AgentCreate {
	ac.mutation.AddStationIDs(ids...)
	return ac
}

// AddStations adds the "stations" edges to the EnterpriseStation entity.
func (ac *AgentCreate) AddStations(e ...*EnterpriseStation) *AgentCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddStationIDs(ids...)
}

// Mutation returns the AgentMutation object of the builder.
func (ac *AgentCreate) Mutation() *AgentMutation {
	return ac.mutation
}

// Save creates the Agent in the database.
func (ac *AgentCreate) Save(ctx context.Context) (*Agent, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentCreate) SaveX(ctx context.Context) *Agent {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if agent.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := agent.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if agent.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agent.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agent.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Super(); !ok {
		v := agent.DefaultSuper
		ac.mutation.SetSuper(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Agent.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Agent.updated_at"`)}
	}
	if _, ok := ac.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "Agent.enterprise_id"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Agent.name"`)}
	}
	if _, ok := ac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Agent.phone"`)}
	}
	if _, ok := ac.mutation.Super(); !ok {
		return &ValidationError{Name: "super", err: errors.New(`ent: missing required field "Agent.super"`)}
	}
	if _, ok := ac.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "Agent.enterprise"`)}
	}
	return nil
}

func (ac *AgentCreate) sqlSave(ctx context.Context) (*Agent, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentCreate) createSpec() (*Agent, *sqlgraph.CreateSpec) {
	var (
		_node = &Agent{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agent.Table, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(agent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(agent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(agent.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(agent.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(agent.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(agent.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(agent.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.SetField(agent.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ac.mutation.Super(); ok {
		_spec.SetField(agent.FieldSuper, field.TypeBool, value)
		_node.Super = value
	}
	if nodes := ac.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   agent.EnterpriseTable,
			Columns: []string{agent.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.StationsTable,
			Columns: agent.StationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agent.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AgentCreate) OnConflict(opts ...sql.ConflictOption) *AgentUpsertOne {
	ac.conflict = opts
	return &AgentUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AgentCreate) OnConflictColumns(columns ...string) *AgentUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AgentUpsertOne{
		create: ac,
	}
}

type (
	// AgentUpsertOne is the builder for "upsert"-ing
	//  one Agent node.
	AgentUpsertOne struct {
		create *AgentCreate
	}

	// AgentUpsert is the "OnConflict" setter.
	AgentUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AgentUpsert) SetUpdatedAt(v time.Time) *AgentUpsert {
	u.Set(agent.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgentUpsert) UpdateUpdatedAt() *AgentUpsert {
	u.SetExcluded(agent.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgentUpsert) SetDeletedAt(v time.Time) *AgentUpsert {
	u.Set(agent.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgentUpsert) UpdateDeletedAt() *AgentUpsert {
	u.SetExcluded(agent.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgentUpsert) ClearDeletedAt() *AgentUpsert {
	u.SetNull(agent.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgentUpsert) SetLastModifier(v *model.Modifier) *AgentUpsert {
	u.Set(agent.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgentUpsert) UpdateLastModifier() *AgentUpsert {
	u.SetExcluded(agent.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgentUpsert) ClearLastModifier() *AgentUpsert {
	u.SetNull(agent.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AgentUpsert) SetRemark(v string) *AgentUpsert {
	u.Set(agent.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgentUpsert) UpdateRemark() *AgentUpsert {
	u.SetExcluded(agent.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AgentUpsert) ClearRemark() *AgentUpsert {
	u.SetNull(agent.FieldRemark)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *AgentUpsert) SetEnterpriseID(v uint64) *AgentUpsert {
	u.Set(agent.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *AgentUpsert) UpdateEnterpriseID() *AgentUpsert {
	u.SetExcluded(agent.FieldEnterpriseID)
	return u
}

// SetName sets the "name" field.
func (u *AgentUpsert) SetName(v string) *AgentUpsert {
	u.Set(agent.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgentUpsert) UpdateName() *AgentUpsert {
	u.SetExcluded(agent.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *AgentUpsert) SetPhone(v string) *AgentUpsert {
	u.Set(agent.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AgentUpsert) UpdatePhone() *AgentUpsert {
	u.SetExcluded(agent.FieldPhone)
	return u
}

// SetSuper sets the "super" field.
func (u *AgentUpsert) SetSuper(v bool) *AgentUpsert {
	u.Set(agent.FieldSuper, v)
	return u
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AgentUpsert) UpdateSuper() *AgentUpsert {
	u.SetExcluded(agent.FieldSuper)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Agent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgentUpsertOne) UpdateNewValues() *AgentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(agent.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(agent.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agent.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AgentUpsertOne) Ignore() *AgentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgentUpsertOne) DoNothing() *AgentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgentCreate.OnConflict
// documentation for more info.
func (u *AgentUpsertOne) Update(set func(*AgentUpsert)) *AgentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AgentUpsertOne) SetUpdatedAt(v time.Time) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateUpdatedAt() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgentUpsertOne) SetDeletedAt(v time.Time) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateDeletedAt() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgentUpsertOne) ClearDeletedAt() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgentUpsertOne) SetLastModifier(v *model.Modifier) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateLastModifier() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgentUpsertOne) ClearLastModifier() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AgentUpsertOne) SetRemark(v string) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateRemark() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AgentUpsertOne) ClearRemark() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *AgentUpsertOne) SetEnterpriseID(v uint64) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateEnterpriseID() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetName sets the "name" field.
func (u *AgentUpsertOne) SetName(v string) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateName() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *AgentUpsertOne) SetPhone(v string) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdatePhone() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdatePhone()
	})
}

// SetSuper sets the "super" field.
func (u *AgentUpsertOne) SetSuper(v bool) *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.SetSuper(v)
	})
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AgentUpsertOne) UpdateSuper() *AgentUpsertOne {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateSuper()
	})
}

// Exec executes the query.
func (u *AgentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AgentUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AgentUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AgentCreateBulk is the builder for creating many Agent entities in bulk.
type AgentCreateBulk struct {
	config
	err      error
	builders []*AgentCreate
	conflict []sql.ConflictOption
}

// Save creates the Agent entities in the database.
func (acb *AgentCreateBulk) Save(ctx context.Context) ([]*Agent, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agent, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentCreateBulk) SaveX(ctx context.Context) []*Agent {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agent.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AgentCreateBulk) OnConflict(opts ...sql.ConflictOption) *AgentUpsertBulk {
	acb.conflict = opts
	return &AgentUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agent.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AgentCreateBulk) OnConflictColumns(columns ...string) *AgentUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AgentUpsertBulk{
		create: acb,
	}
}

// AgentUpsertBulk is the builder for "upsert"-ing
// a bulk of Agent nodes.
type AgentUpsertBulk struct {
	create *AgentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Agent.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgentUpsertBulk) UpdateNewValues() *AgentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(agent.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(agent.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agent.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AgentUpsertBulk) Ignore() *AgentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgentUpsertBulk) DoNothing() *AgentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgentCreateBulk.OnConflict
// documentation for more info.
func (u *AgentUpsertBulk) Update(set func(*AgentUpsert)) *AgentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgentUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AgentUpsertBulk) SetUpdatedAt(v time.Time) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateUpdatedAt() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgentUpsertBulk) SetDeletedAt(v time.Time) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateDeletedAt() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgentUpsertBulk) ClearDeletedAt() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgentUpsertBulk) SetLastModifier(v *model.Modifier) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateLastModifier() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgentUpsertBulk) ClearLastModifier() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AgentUpsertBulk) SetRemark(v string) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateRemark() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AgentUpsertBulk) ClearRemark() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *AgentUpsertBulk) SetEnterpriseID(v uint64) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateEnterpriseID() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetName sets the "name" field.
func (u *AgentUpsertBulk) SetName(v string) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateName() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *AgentUpsertBulk) SetPhone(v string) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdatePhone() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdatePhone()
	})
}

// SetSuper sets the "super" field.
func (u *AgentUpsertBulk) SetSuper(v bool) *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.SetSuper(v)
	})
}

// UpdateSuper sets the "super" field to the value that was provided on create.
func (u *AgentUpsertBulk) UpdateSuper() *AgentUpsertBulk {
	return u.Update(func(s *AgentUpsert) {
		s.UpdateSuper()
	})
}

// Exec executes the query.
func (u *AgentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AgentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
