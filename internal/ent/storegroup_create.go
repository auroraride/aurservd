// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// StoreGroupCreate is the builder for creating a StoreGroup entity.
type StoreGroupCreate struct {
	config
	mutation *StoreGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sgc *StoreGroupCreate) SetCreatedAt(t time.Time) *StoreGroupCreate {
	sgc.mutation.SetCreatedAt(t)
	return sgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sgc *StoreGroupCreate) SetNillableCreatedAt(t *time.Time) *StoreGroupCreate {
	if t != nil {
		sgc.SetCreatedAt(*t)
	}
	return sgc
}

// SetUpdatedAt sets the "updated_at" field.
func (sgc *StoreGroupCreate) SetUpdatedAt(t time.Time) *StoreGroupCreate {
	sgc.mutation.SetUpdatedAt(t)
	return sgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sgc *StoreGroupCreate) SetNillableUpdatedAt(t *time.Time) *StoreGroupCreate {
	if t != nil {
		sgc.SetUpdatedAt(*t)
	}
	return sgc
}

// SetDeletedAt sets the "deleted_at" field.
func (sgc *StoreGroupCreate) SetDeletedAt(t time.Time) *StoreGroupCreate {
	sgc.mutation.SetDeletedAt(t)
	return sgc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sgc *StoreGroupCreate) SetNillableDeletedAt(t *time.Time) *StoreGroupCreate {
	if t != nil {
		sgc.SetDeletedAt(*t)
	}
	return sgc
}

// SetCreator sets the "creator" field.
func (sgc *StoreGroupCreate) SetCreator(m *model.Modifier) *StoreGroupCreate {
	sgc.mutation.SetCreator(m)
	return sgc
}

// SetLastModifier sets the "last_modifier" field.
func (sgc *StoreGroupCreate) SetLastModifier(m *model.Modifier) *StoreGroupCreate {
	sgc.mutation.SetLastModifier(m)
	return sgc
}

// SetRemark sets the "remark" field.
func (sgc *StoreGroupCreate) SetRemark(s string) *StoreGroupCreate {
	sgc.mutation.SetRemark(s)
	return sgc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sgc *StoreGroupCreate) SetNillableRemark(s *string) *StoreGroupCreate {
	if s != nil {
		sgc.SetRemark(*s)
	}
	return sgc
}

// SetName sets the "name" field.
func (sgc *StoreGroupCreate) SetName(s string) *StoreGroupCreate {
	sgc.mutation.SetName(s)
	return sgc
}

// Mutation returns the StoreGroupMutation object of the builder.
func (sgc *StoreGroupCreate) Mutation() *StoreGroupMutation {
	return sgc.mutation
}

// Save creates the StoreGroup in the database.
func (sgc *StoreGroupCreate) Save(ctx context.Context) (*StoreGroup, error) {
	if err := sgc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sgc.sqlSave, sgc.mutation, sgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sgc *StoreGroupCreate) SaveX(ctx context.Context) *StoreGroup {
	v, err := sgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgc *StoreGroupCreate) Exec(ctx context.Context) error {
	_, err := sgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgc *StoreGroupCreate) ExecX(ctx context.Context) {
	if err := sgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgc *StoreGroupCreate) defaults() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		if storegroup.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized storegroup.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := storegroup.DefaultCreatedAt()
		sgc.mutation.SetCreatedAt(v)
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		if storegroup.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized storegroup.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := storegroup.DefaultUpdatedAt()
		sgc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sgc *StoreGroupCreate) check() error {
	if _, ok := sgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StoreGroup.created_at"`)}
	}
	if _, ok := sgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StoreGroup.updated_at"`)}
	}
	if _, ok := sgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StoreGroup.name"`)}
	}
	return nil
}

func (sgc *StoreGroupCreate) sqlSave(ctx context.Context) (*StoreGroup, error) {
	if err := sgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	sgc.mutation.id = &_node.ID
	sgc.mutation.done = true
	return _node, nil
}

func (sgc *StoreGroupCreate) createSpec() (*StoreGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &StoreGroup{config: sgc.config}
		_spec = sqlgraph.NewCreateSpec(storegroup.Table, sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = sgc.conflict
	if value, ok := sgc.mutation.CreatedAt(); ok {
		_spec.SetField(storegroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sgc.mutation.UpdatedAt(); ok {
		_spec.SetField(storegroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sgc.mutation.DeletedAt(); ok {
		_spec.SetField(storegroup.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := sgc.mutation.Creator(); ok {
		_spec.SetField(storegroup.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := sgc.mutation.LastModifier(); ok {
		_spec.SetField(storegroup.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := sgc.mutation.Remark(); ok {
		_spec.SetField(storegroup.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := sgc.mutation.Name(); ok {
		_spec.SetField(storegroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StoreGroup.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgc *StoreGroupCreate) OnConflict(opts ...sql.ConflictOption) *StoreGroupUpsertOne {
	sgc.conflict = opts
	return &StoreGroupUpsertOne{
		create: sgc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgc *StoreGroupCreate) OnConflictColumns(columns ...string) *StoreGroupUpsertOne {
	sgc.conflict = append(sgc.conflict, sql.ConflictColumns(columns...))
	return &StoreGroupUpsertOne{
		create: sgc,
	}
}

type (
	// StoreGroupUpsertOne is the builder for "upsert"-ing
	//  one StoreGroup node.
	StoreGroupUpsertOne struct {
		create *StoreGroupCreate
	}

	// StoreGroupUpsert is the "OnConflict" setter.
	StoreGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGroupUpsert) SetUpdatedAt(v time.Time) *StoreGroupUpsert {
	u.Set(storegroup.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGroupUpsert) UpdateUpdatedAt() *StoreGroupUpsert {
	u.SetExcluded(storegroup.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGroupUpsert) SetDeletedAt(v time.Time) *StoreGroupUpsert {
	u.Set(storegroup.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGroupUpsert) UpdateDeletedAt() *StoreGroupUpsert {
	u.SetExcluded(storegroup.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGroupUpsert) ClearDeletedAt() *StoreGroupUpsert {
	u.SetNull(storegroup.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreGroupUpsert) SetLastModifier(v *model.Modifier) *StoreGroupUpsert {
	u.Set(storegroup.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreGroupUpsert) UpdateLastModifier() *StoreGroupUpsert {
	u.SetExcluded(storegroup.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreGroupUpsert) ClearLastModifier() *StoreGroupUpsert {
	u.SetNull(storegroup.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *StoreGroupUpsert) SetRemark(v string) *StoreGroupUpsert {
	u.Set(storegroup.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreGroupUpsert) UpdateRemark() *StoreGroupUpsert {
	u.SetExcluded(storegroup.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreGroupUpsert) ClearRemark() *StoreGroupUpsert {
	u.SetNull(storegroup.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *StoreGroupUpsert) SetName(v string) *StoreGroupUpsert {
	u.Set(storegroup.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreGroupUpsert) UpdateName() *StoreGroupUpsert {
	u.SetExcluded(storegroup.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StoreGroupUpsertOne) UpdateNewValues() *StoreGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(storegroup.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(storegroup.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StoreGroupUpsertOne) Ignore() *StoreGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreGroupUpsertOne) DoNothing() *StoreGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreGroupCreate.OnConflict
// documentation for more info.
func (u *StoreGroupUpsertOne) Update(set func(*StoreGroupUpsert)) *StoreGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGroupUpsertOne) SetUpdatedAt(v time.Time) *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGroupUpsertOne) UpdateUpdatedAt() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGroupUpsertOne) SetDeletedAt(v time.Time) *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGroupUpsertOne) UpdateDeletedAt() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGroupUpsertOne) ClearDeletedAt() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreGroupUpsertOne) SetLastModifier(v *model.Modifier) *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreGroupUpsertOne) UpdateLastModifier() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreGroupUpsertOne) ClearLastModifier() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StoreGroupUpsertOne) SetRemark(v string) *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreGroupUpsertOne) UpdateRemark() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreGroupUpsertOne) ClearRemark() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *StoreGroupUpsertOne) SetName(v string) *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreGroupUpsertOne) UpdateName() *StoreGroupUpsertOne {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *StoreGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StoreGroupUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StoreGroupUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StoreGroupCreateBulk is the builder for creating many StoreGroup entities in bulk.
type StoreGroupCreateBulk struct {
	config
	err      error
	builders []*StoreGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the StoreGroup entities in the database.
func (sgcb *StoreGroupCreateBulk) Save(ctx context.Context) ([]*StoreGroup, error) {
	if sgcb.err != nil {
		return nil, sgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sgcb.builders))
	nodes := make([]*StoreGroup, len(sgcb.builders))
	mutators := make([]Mutator, len(sgcb.builders))
	for i := range sgcb.builders {
		func(i int, root context.Context) {
			builder := sgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StoreGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sgcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sgcb *StoreGroupCreateBulk) SaveX(ctx context.Context) []*StoreGroup {
	v, err := sgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sgcb *StoreGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := sgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgcb *StoreGroupCreateBulk) ExecX(ctx context.Context) {
	if err := sgcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StoreGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StoreGroupUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sgcb *StoreGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *StoreGroupUpsertBulk {
	sgcb.conflict = opts
	return &StoreGroupUpsertBulk{
		create: sgcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sgcb *StoreGroupCreateBulk) OnConflictColumns(columns ...string) *StoreGroupUpsertBulk {
	sgcb.conflict = append(sgcb.conflict, sql.ConflictColumns(columns...))
	return &StoreGroupUpsertBulk{
		create: sgcb,
	}
}

// StoreGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of StoreGroup nodes.
type StoreGroupUpsertBulk struct {
	create *StoreGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StoreGroupUpsertBulk) UpdateNewValues() *StoreGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(storegroup.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(storegroup.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StoreGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StoreGroupUpsertBulk) Ignore() *StoreGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StoreGroupUpsertBulk) DoNothing() *StoreGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StoreGroupCreateBulk.OnConflict
// documentation for more info.
func (u *StoreGroupUpsertBulk) Update(set func(*StoreGroupUpsert)) *StoreGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StoreGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StoreGroupUpsertBulk) SetUpdatedAt(v time.Time) *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StoreGroupUpsertBulk) UpdateUpdatedAt() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StoreGroupUpsertBulk) SetDeletedAt(v time.Time) *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StoreGroupUpsertBulk) UpdateDeletedAt() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StoreGroupUpsertBulk) ClearDeletedAt() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StoreGroupUpsertBulk) SetLastModifier(v *model.Modifier) *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StoreGroupUpsertBulk) UpdateLastModifier() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StoreGroupUpsertBulk) ClearLastModifier() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StoreGroupUpsertBulk) SetRemark(v string) *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StoreGroupUpsertBulk) UpdateRemark() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StoreGroupUpsertBulk) ClearRemark() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *StoreGroupUpsertBulk) SetName(v string) *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StoreGroupUpsertBulk) UpdateName() *StoreGroupUpsertBulk {
	return u.Update(func(s *StoreGroupUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *StoreGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StoreGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StoreGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StoreGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
