// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/cabinetfault"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// CabinetFaultMutation represents an operation that mutates the CabinetFault nodes in the graph.
type CabinetFaultMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	created_at     *time.Time
	updated_at     *time.Time
	deleted_at     *time.Time
	creator        **model.Modifier
	last_modifier  **model.Modifier
	remark         *string
	status         *uint8
	addstatus      *int8
	fault          *string
	attachments    *[]string
	description    *string
	clearedFields  map[string]struct{}
	city           *uint64
	clearedcity    bool
	branch         *uint64
	clearedbranch  bool
	cabinet        *uint64
	clearedcabinet bool
	rider          *uint64
	clearedrider   bool
	done           bool
	oldValue       func(context.Context) (*CabinetFault, error)
	predicates     []predicate.CabinetFault
}

var _ ent.Mutation = (*CabinetFaultMutation)(nil)

// cabinetfaultOption allows management of the mutation configuration using functional options.
type cabinetfaultOption func(*CabinetFaultMutation)

// newCabinetFaultMutation creates new mutation for the CabinetFault entity.
func newCabinetFaultMutation(c config, op Op, opts ...cabinetfaultOption) *CabinetFaultMutation {
	m := &CabinetFaultMutation{
		config:        c,
		op:            op,
		typ:           TypeCabinetFault,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCabinetFaultID sets the ID field of the mutation.
func withCabinetFaultID(id uint64) cabinetfaultOption {
	return func(m *CabinetFaultMutation) {
		var (
			err   error
			once  sync.Once
			value *CabinetFault
		)
		m.oldValue = func(ctx context.Context) (*CabinetFault, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CabinetFault.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCabinetFault sets the old CabinetFault of the mutation.
func withCabinetFault(node *CabinetFault) cabinetfaultOption {
	return func(m *CabinetFaultMutation) {
		m.oldValue = func(context.Context) (*CabinetFault, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CabinetFaultMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CabinetFaultMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CabinetFaultMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CabinetFaultMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CabinetFault.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CabinetFaultMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CabinetFaultMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CabinetFaultMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CabinetFaultMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CabinetFaultMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CabinetFaultMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CabinetFaultMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CabinetFaultMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CabinetFaultMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[cabinetfault.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CabinetFaultMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CabinetFaultMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, cabinetfault.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *CabinetFaultMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *CabinetFaultMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *CabinetFaultMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[cabinetfault.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *CabinetFaultMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *CabinetFaultMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, cabinetfault.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *CabinetFaultMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *CabinetFaultMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *CabinetFaultMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[cabinetfault.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *CabinetFaultMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *CabinetFaultMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, cabinetfault.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *CabinetFaultMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CabinetFaultMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CabinetFaultMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[cabinetfault.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CabinetFaultMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CabinetFaultMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, cabinetfault.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *CabinetFaultMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *CabinetFaultMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *CabinetFaultMutation) ResetCityID() {
	m.city = nil
}

// SetStatus sets the "status" field.
func (m *CabinetFaultMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CabinetFaultMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *CabinetFaultMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CabinetFaultMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *CabinetFaultMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetBranchID sets the "branch_id" field.
func (m *CabinetFaultMutation) SetBranchID(u uint64) {
	m.branch = &u
}

// BranchID returns the value of the "branch_id" field in the mutation.
func (m *CabinetFaultMutation) BranchID() (r uint64, exists bool) {
	v := m.branch
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branch_id" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldBranchID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// ResetBranchID resets all changes to the "branch_id" field.
func (m *CabinetFaultMutation) ResetBranchID() {
	m.branch = nil
}

// SetCabinetID sets the "cabinet_id" field.
func (m *CabinetFaultMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *CabinetFaultMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldCabinetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *CabinetFaultMutation) ResetCabinetID() {
	m.cabinet = nil
}

// SetRiderID sets the "rider_id" field.
func (m *CabinetFaultMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *CabinetFaultMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *CabinetFaultMutation) ResetRiderID() {
	m.rider = nil
}

// SetFault sets the "fault" field.
func (m *CabinetFaultMutation) SetFault(s string) {
	m.fault = &s
}

// Fault returns the value of the "fault" field in the mutation.
func (m *CabinetFaultMutation) Fault() (r string, exists bool) {
	v := m.fault
	if v == nil {
		return
	}
	return *v, true
}

// OldFault returns the old "fault" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldFault(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFault is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFault requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFault: %w", err)
	}
	return oldValue.Fault, nil
}

// ClearFault clears the value of the "fault" field.
func (m *CabinetFaultMutation) ClearFault() {
	m.fault = nil
	m.clearedFields[cabinetfault.FieldFault] = struct{}{}
}

// FaultCleared returns if the "fault" field was cleared in this mutation.
func (m *CabinetFaultMutation) FaultCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldFault]
	return ok
}

// ResetFault resets all changes to the "fault" field.
func (m *CabinetFaultMutation) ResetFault() {
	m.fault = nil
	delete(m.clearedFields, cabinetfault.FieldFault)
}

// SetAttachments sets the "attachments" field.
func (m *CabinetFaultMutation) SetAttachments(s []string) {
	m.attachments = &s
}

// Attachments returns the value of the "attachments" field in the mutation.
func (m *CabinetFaultMutation) Attachments() (r []string, exists bool) {
	v := m.attachments
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachments returns the old "attachments" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldAttachments(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachments is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachments requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachments: %w", err)
	}
	return oldValue.Attachments, nil
}

// ClearAttachments clears the value of the "attachments" field.
func (m *CabinetFaultMutation) ClearAttachments() {
	m.attachments = nil
	m.clearedFields[cabinetfault.FieldAttachments] = struct{}{}
}

// AttachmentsCleared returns if the "attachments" field was cleared in this mutation.
func (m *CabinetFaultMutation) AttachmentsCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldAttachments]
	return ok
}

// ResetAttachments resets all changes to the "attachments" field.
func (m *CabinetFaultMutation) ResetAttachments() {
	m.attachments = nil
	delete(m.clearedFields, cabinetfault.FieldAttachments)
}

// SetDescription sets the "description" field.
func (m *CabinetFaultMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CabinetFaultMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the CabinetFault entity.
// If the CabinetFault object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetFaultMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CabinetFaultMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[cabinetfault.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CabinetFaultMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[cabinetfault.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CabinetFaultMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, cabinetfault.FieldDescription)
}

// ClearCity clears the "city" edge to the City entity.
func (m *CabinetFaultMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *CabinetFaultMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *CabinetFaultMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *CabinetFaultMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (m *CabinetFaultMutation) ClearBranch() {
	m.clearedbranch = true
}

// BranchCleared reports if the "branch" edge to the Branch entity was cleared.
func (m *CabinetFaultMutation) BranchCleared() bool {
	return m.clearedbranch
}

// BranchIDs returns the "branch" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BranchID instead. It exists only for internal usage by the builders.
func (m *CabinetFaultMutation) BranchIDs() (ids []uint64) {
	if id := m.branch; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBranch resets all changes to the "branch" edge.
func (m *CabinetFaultMutation) ResetBranch() {
	m.branch = nil
	m.clearedbranch = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *CabinetFaultMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *CabinetFaultMutation) CabinetCleared() bool {
	return m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *CabinetFaultMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *CabinetFaultMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *CabinetFaultMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *CabinetFaultMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *CabinetFaultMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *CabinetFaultMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// Where appends a list predicates to the CabinetFaultMutation builder.
func (m *CabinetFaultMutation) Where(ps ...predicate.CabinetFault) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CabinetFaultMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CabinetFault).
func (m *CabinetFaultMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CabinetFaultMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, cabinetfault.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cabinetfault.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, cabinetfault.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, cabinetfault.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, cabinetfault.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, cabinetfault.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, cabinetfault.FieldCityID)
	}
	if m.status != nil {
		fields = append(fields, cabinetfault.FieldStatus)
	}
	if m.branch != nil {
		fields = append(fields, cabinetfault.FieldBranchID)
	}
	if m.cabinet != nil {
		fields = append(fields, cabinetfault.FieldCabinetID)
	}
	if m.rider != nil {
		fields = append(fields, cabinetfault.FieldRiderID)
	}
	if m.fault != nil {
		fields = append(fields, cabinetfault.FieldFault)
	}
	if m.attachments != nil {
		fields = append(fields, cabinetfault.FieldAttachments)
	}
	if m.description != nil {
		fields = append(fields, cabinetfault.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CabinetFaultMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cabinetfault.FieldCreatedAt:
		return m.CreatedAt()
	case cabinetfault.FieldUpdatedAt:
		return m.UpdatedAt()
	case cabinetfault.FieldDeletedAt:
		return m.DeletedAt()
	case cabinetfault.FieldCreator:
		return m.Creator()
	case cabinetfault.FieldLastModifier:
		return m.LastModifier()
	case cabinetfault.FieldRemark:
		return m.Remark()
	case cabinetfault.FieldCityID:
		return m.CityID()
	case cabinetfault.FieldStatus:
		return m.Status()
	case cabinetfault.FieldBranchID:
		return m.BranchID()
	case cabinetfault.FieldCabinetID:
		return m.CabinetID()
	case cabinetfault.FieldRiderID:
		return m.RiderID()
	case cabinetfault.FieldFault:
		return m.Fault()
	case cabinetfault.FieldAttachments:
		return m.Attachments()
	case cabinetfault.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CabinetFaultMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cabinetfault.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cabinetfault.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cabinetfault.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case cabinetfault.FieldCreator:
		return m.OldCreator(ctx)
	case cabinetfault.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case cabinetfault.FieldRemark:
		return m.OldRemark(ctx)
	case cabinetfault.FieldCityID:
		return m.OldCityID(ctx)
	case cabinetfault.FieldStatus:
		return m.OldStatus(ctx)
	case cabinetfault.FieldBranchID:
		return m.OldBranchID(ctx)
	case cabinetfault.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case cabinetfault.FieldRiderID:
		return m.OldRiderID(ctx)
	case cabinetfault.FieldFault:
		return m.OldFault(ctx)
	case cabinetfault.FieldAttachments:
		return m.OldAttachments(ctx)
	case cabinetfault.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown CabinetFault field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CabinetFaultMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cabinetfault.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cabinetfault.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cabinetfault.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case cabinetfault.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case cabinetfault.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case cabinetfault.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case cabinetfault.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case cabinetfault.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case cabinetfault.FieldBranchID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case cabinetfault.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case cabinetfault.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case cabinetfault.FieldFault:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFault(v)
		return nil
	case cabinetfault.FieldAttachments:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachments(v)
		return nil
	case cabinetfault.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown CabinetFault field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CabinetFaultMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, cabinetfault.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CabinetFaultMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cabinetfault.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CabinetFaultMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cabinetfault.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown CabinetFault numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CabinetFaultMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cabinetfault.FieldDeletedAt) {
		fields = append(fields, cabinetfault.FieldDeletedAt)
	}
	if m.FieldCleared(cabinetfault.FieldCreator) {
		fields = append(fields, cabinetfault.FieldCreator)
	}
	if m.FieldCleared(cabinetfault.FieldLastModifier) {
		fields = append(fields, cabinetfault.FieldLastModifier)
	}
	if m.FieldCleared(cabinetfault.FieldRemark) {
		fields = append(fields, cabinetfault.FieldRemark)
	}
	if m.FieldCleared(cabinetfault.FieldFault) {
		fields = append(fields, cabinetfault.FieldFault)
	}
	if m.FieldCleared(cabinetfault.FieldAttachments) {
		fields = append(fields, cabinetfault.FieldAttachments)
	}
	if m.FieldCleared(cabinetfault.FieldDescription) {
		fields = append(fields, cabinetfault.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CabinetFaultMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CabinetFaultMutation) ClearField(name string) error {
	switch name {
	case cabinetfault.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case cabinetfault.FieldCreator:
		m.ClearCreator()
		return nil
	case cabinetfault.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case cabinetfault.FieldRemark:
		m.ClearRemark()
		return nil
	case cabinetfault.FieldFault:
		m.ClearFault()
		return nil
	case cabinetfault.FieldAttachments:
		m.ClearAttachments()
		return nil
	case cabinetfault.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown CabinetFault nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CabinetFaultMutation) ResetField(name string) error {
	switch name {
	case cabinetfault.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cabinetfault.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cabinetfault.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case cabinetfault.FieldCreator:
		m.ResetCreator()
		return nil
	case cabinetfault.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case cabinetfault.FieldRemark:
		m.ResetRemark()
		return nil
	case cabinetfault.FieldCityID:
		m.ResetCityID()
		return nil
	case cabinetfault.FieldStatus:
		m.ResetStatus()
		return nil
	case cabinetfault.FieldBranchID:
		m.ResetBranchID()
		return nil
	case cabinetfault.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case cabinetfault.FieldRiderID:
		m.ResetRiderID()
		return nil
	case cabinetfault.FieldFault:
		m.ResetFault()
		return nil
	case cabinetfault.FieldAttachments:
		m.ResetAttachments()
		return nil
	case cabinetfault.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown CabinetFault field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CabinetFaultMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.city != nil {
		edges = append(edges, cabinetfault.EdgeCity)
	}
	if m.branch != nil {
		edges = append(edges, cabinetfault.EdgeBranch)
	}
	if m.cabinet != nil {
		edges = append(edges, cabinetfault.EdgeCabinet)
	}
	if m.rider != nil {
		edges = append(edges, cabinetfault.EdgeRider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CabinetFaultMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cabinetfault.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case cabinetfault.EdgeBranch:
		if id := m.branch; id != nil {
			return []ent.Value{*id}
		}
	case cabinetfault.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case cabinetfault.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CabinetFaultMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CabinetFaultMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CabinetFaultMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedcity {
		edges = append(edges, cabinetfault.EdgeCity)
	}
	if m.clearedbranch {
		edges = append(edges, cabinetfault.EdgeBranch)
	}
	if m.clearedcabinet {
		edges = append(edges, cabinetfault.EdgeCabinet)
	}
	if m.clearedrider {
		edges = append(edges, cabinetfault.EdgeRider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CabinetFaultMutation) EdgeCleared(name string) bool {
	switch name {
	case cabinetfault.EdgeCity:
		return m.clearedcity
	case cabinetfault.EdgeBranch:
		return m.clearedbranch
	case cabinetfault.EdgeCabinet:
		return m.clearedcabinet
	case cabinetfault.EdgeRider:
		return m.clearedrider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CabinetFaultMutation) ClearEdge(name string) error {
	switch name {
	case cabinetfault.EdgeCity:
		m.ClearCity()
		return nil
	case cabinetfault.EdgeBranch:
		m.ClearBranch()
		return nil
	case cabinetfault.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case cabinetfault.EdgeRider:
		m.ClearRider()
		return nil
	}
	return fmt.Errorf("unknown CabinetFault unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CabinetFaultMutation) ResetEdge(name string) error {
	switch name {
	case cabinetfault.EdgeCity:
		m.ResetCity()
		return nil
	case cabinetfault.EdgeBranch:
		m.ResetBranch()
		return nil
	case cabinetfault.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case cabinetfault.EdgeRider:
		m.ResetRider()
		return nil
	}
	return fmt.Errorf("unknown CabinetFault edge %s", name)
}

