// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
)

// PromotionPrivilegeQuery is the builder for querying PromotionPrivilege entities.
type PromotionPrivilegeQuery struct {
	config
	ctx        *QueryContext
	order      []promotionprivilege.OrderOption
	inters     []Interceptor
	predicates []predicate.PromotionPrivilege
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionPrivilegeQuery builder.
func (ppq *PromotionPrivilegeQuery) Where(ps ...predicate.PromotionPrivilege) *PromotionPrivilegeQuery {
	ppq.predicates = append(ppq.predicates, ps...)
	return ppq
}

// Limit the number of records to be returned by this query.
func (ppq *PromotionPrivilegeQuery) Limit(limit int) *PromotionPrivilegeQuery {
	ppq.ctx.Limit = &limit
	return ppq
}

// Offset to start from.
func (ppq *PromotionPrivilegeQuery) Offset(offset int) *PromotionPrivilegeQuery {
	ppq.ctx.Offset = &offset
	return ppq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ppq *PromotionPrivilegeQuery) Unique(unique bool) *PromotionPrivilegeQuery {
	ppq.ctx.Unique = &unique
	return ppq
}

// Order specifies how the records should be ordered.
func (ppq *PromotionPrivilegeQuery) Order(o ...promotionprivilege.OrderOption) *PromotionPrivilegeQuery {
	ppq.order = append(ppq.order, o...)
	return ppq
}

// First returns the first PromotionPrivilege entity from the query.
// Returns a *NotFoundError when no PromotionPrivilege was found.
func (ppq *PromotionPrivilegeQuery) First(ctx context.Context) (*PromotionPrivilege, error) {
	nodes, err := ppq.Limit(1).All(setContextOp(ctx, ppq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionprivilege.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) FirstX(ctx context.Context) *PromotionPrivilege {
	node, err := ppq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionPrivilege ID from the query.
// Returns a *NotFoundError when no PromotionPrivilege ID was found.
func (ppq *PromotionPrivilegeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ppq.Limit(1).IDs(setContextOp(ctx, ppq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionprivilege.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ppq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionPrivilege entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionPrivilege entity is found.
// Returns a *NotFoundError when no PromotionPrivilege entities are found.
func (ppq *PromotionPrivilegeQuery) Only(ctx context.Context) (*PromotionPrivilege, error) {
	nodes, err := ppq.Limit(2).All(setContextOp(ctx, ppq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionprivilege.Label}
	default:
		return nil, &NotSingularError{promotionprivilege.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) OnlyX(ctx context.Context) *PromotionPrivilege {
	node, err := ppq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionPrivilege ID in the query.
// Returns a *NotSingularError when more than one PromotionPrivilege ID is found.
// Returns a *NotFoundError when no entities are found.
func (ppq *PromotionPrivilegeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ppq.Limit(2).IDs(setContextOp(ctx, ppq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionprivilege.Label}
	default:
		err = &NotSingularError{promotionprivilege.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ppq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionPrivileges.
func (ppq *PromotionPrivilegeQuery) All(ctx context.Context) ([]*PromotionPrivilege, error) {
	ctx = setContextOp(ctx, ppq.ctx, "All")
	if err := ppq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionPrivilege, *PromotionPrivilegeQuery]()
	return withInterceptors[[]*PromotionPrivilege](ctx, ppq, qr, ppq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) AllX(ctx context.Context) []*PromotionPrivilege {
	nodes, err := ppq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionPrivilege IDs.
func (ppq *PromotionPrivilegeQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if ppq.ctx.Unique == nil && ppq.path != nil {
		ppq.Unique(true)
	}
	ctx = setContextOp(ctx, ppq.ctx, "IDs")
	if err = ppq.Select(promotionprivilege.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ppq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ppq *PromotionPrivilegeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ppq.ctx, "Count")
	if err := ppq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ppq, querierCount[*PromotionPrivilegeQuery](), ppq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) CountX(ctx context.Context) int {
	count, err := ppq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ppq *PromotionPrivilegeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ppq.ctx, "Exist")
	switch _, err := ppq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ppq *PromotionPrivilegeQuery) ExistX(ctx context.Context) bool {
	exist, err := ppq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionPrivilegeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ppq *PromotionPrivilegeQuery) Clone() *PromotionPrivilegeQuery {
	if ppq == nil {
		return nil
	}
	return &PromotionPrivilegeQuery{
		config:     ppq.config,
		ctx:        ppq.ctx.Clone(),
		order:      append([]promotionprivilege.OrderOption{}, ppq.order...),
		inters:     append([]Interceptor{}, ppq.inters...),
		predicates: append([]predicate.PromotionPrivilege{}, ppq.predicates...),
		// clone intermediate query.
		sql:  ppq.sql.Clone(),
		path: ppq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionPrivilege.Query().
//		GroupBy(promotionprivilege.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ppq *PromotionPrivilegeQuery) GroupBy(field string, fields ...string) *PromotionPrivilegeGroupBy {
	ppq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionPrivilegeGroupBy{build: ppq}
	grbuild.flds = &ppq.ctx.Fields
	grbuild.label = promotionprivilege.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionPrivilege.Query().
//		Select(promotionprivilege.FieldCreatedAt).
//		Scan(ctx, &v)
func (ppq *PromotionPrivilegeQuery) Select(fields ...string) *PromotionPrivilegeSelect {
	ppq.ctx.Fields = append(ppq.ctx.Fields, fields...)
	sbuild := &PromotionPrivilegeSelect{PromotionPrivilegeQuery: ppq}
	sbuild.label = promotionprivilege.Label
	sbuild.flds, sbuild.scan = &ppq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionPrivilegeSelect configured with the given aggregations.
func (ppq *PromotionPrivilegeQuery) Aggregate(fns ...AggregateFunc) *PromotionPrivilegeSelect {
	return ppq.Select().Aggregate(fns...)
}

func (ppq *PromotionPrivilegeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ppq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ppq); err != nil {
				return err
			}
		}
	}
	for _, f := range ppq.ctx.Fields {
		if !promotionprivilege.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ppq.path != nil {
		prev, err := ppq.path(ctx)
		if err != nil {
			return err
		}
		ppq.sql = prev
	}
	return nil
}

func (ppq *PromotionPrivilegeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionPrivilege, error) {
	var (
		nodes = []*PromotionPrivilege{}
		_spec = ppq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionPrivilege).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionPrivilege{config: ppq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(ppq.modifiers) > 0 {
		_spec.Modifiers = ppq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ppq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (ppq *PromotionPrivilegeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ppq.querySpec()
	if len(ppq.modifiers) > 0 {
		_spec.Modifiers = ppq.modifiers
	}
	_spec.Node.Columns = ppq.ctx.Fields
	if len(ppq.ctx.Fields) > 0 {
		_spec.Unique = ppq.ctx.Unique != nil && *ppq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ppq.driver, _spec)
}

func (ppq *PromotionPrivilegeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionprivilege.Table, promotionprivilege.Columns, sqlgraph.NewFieldSpec(promotionprivilege.FieldID, field.TypeUint64))
	_spec.From = ppq.sql
	if unique := ppq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ppq.path != nil {
		_spec.Unique = true
	}
	if fields := ppq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionprivilege.FieldID)
		for i := range fields {
			if fields[i] != promotionprivilege.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ppq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ppq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ppq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ppq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ppq *PromotionPrivilegeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ppq.driver.Dialect())
	t1 := builder.Table(promotionprivilege.Table)
	columns := ppq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionprivilege.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ppq.sql != nil {
		selector = ppq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ppq.ctx.Unique != nil && *ppq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ppq.modifiers {
		m(selector)
	}
	for _, p := range ppq.predicates {
		p(selector)
	}
	for _, p := range ppq.order {
		p(selector)
	}
	if offset := ppq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ppq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ppq *PromotionPrivilegeQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionPrivilegeSelect {
	ppq.modifiers = append(ppq.modifiers, modifiers...)
	return ppq.Select()
}

type PromotionPrivilegeQueryWith string

var ()

func (ppq *PromotionPrivilegeQuery) With(withEdges ...PromotionPrivilegeQueryWith) *PromotionPrivilegeQuery {
	for _, v := range withEdges {
		switch v {
		}
	}
	return ppq
}

// PromotionPrivilegeGroupBy is the group-by builder for PromotionPrivilege entities.
type PromotionPrivilegeGroupBy struct {
	selector
	build *PromotionPrivilegeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ppgb *PromotionPrivilegeGroupBy) Aggregate(fns ...AggregateFunc) *PromotionPrivilegeGroupBy {
	ppgb.fns = append(ppgb.fns, fns...)
	return ppgb
}

// Scan applies the selector query and scans the result into the given value.
func (ppgb *PromotionPrivilegeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ppgb.build.ctx, "GroupBy")
	if err := ppgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionPrivilegeQuery, *PromotionPrivilegeGroupBy](ctx, ppgb.build, ppgb, ppgb.build.inters, v)
}

func (ppgb *PromotionPrivilegeGroupBy) sqlScan(ctx context.Context, root *PromotionPrivilegeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ppgb.fns))
	for _, fn := range ppgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ppgb.flds)+len(ppgb.fns))
		for _, f := range *ppgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ppgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ppgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionPrivilegeSelect is the builder for selecting fields of PromotionPrivilege entities.
type PromotionPrivilegeSelect struct {
	*PromotionPrivilegeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pps *PromotionPrivilegeSelect) Aggregate(fns ...AggregateFunc) *PromotionPrivilegeSelect {
	pps.fns = append(pps.fns, fns...)
	return pps
}

// Scan applies the selector query and scans the result into the given value.
func (pps *PromotionPrivilegeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pps.ctx, "Select")
	if err := pps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionPrivilegeQuery, *PromotionPrivilegeSelect](ctx, pps.PromotionPrivilegeQuery, pps, pps.inters, v)
}

func (pps *PromotionPrivilegeSelect) sqlScan(ctx context.Context, root *PromotionPrivilegeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pps.fns))
	for _, fn := range pps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pps *PromotionPrivilegeSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionPrivilegeSelect {
	pps.modifiers = append(pps.modifiers, modifiers...)
	return pps
}
