// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// AllocateCreate is the builder for creating a Allocate entity.
type AllocateCreate struct {
	config
	mutation *AllocateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AllocateCreate) SetCreatedAt(t time.Time) *AllocateCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableCreatedAt(t *time.Time) *AllocateCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AllocateCreate) SetUpdatedAt(t time.Time) *AllocateCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableUpdatedAt(t *time.Time) *AllocateCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetRiderID sets the "rider_id" field.
func (ac *AllocateCreate) SetRiderID(u uint64) *AllocateCreate {
	ac.mutation.SetRiderID(u)
	return ac
}

// SetSubscribeID sets the "subscribe_id" field.
func (ac *AllocateCreate) SetSubscribeID(u uint64) *AllocateCreate {
	ac.mutation.SetSubscribeID(u)
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AllocateCreate) SetCreator(m *model.Modifier) *AllocateCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AllocateCreate) SetLastModifier(m *model.Modifier) *AllocateCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AllocateCreate) SetRemark(s string) *AllocateCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableRemark(s *string) *AllocateCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetEmployeeID sets the "employee_id" field.
func (ac *AllocateCreate) SetEmployeeID(u uint64) *AllocateCreate {
	ac.mutation.SetEmployeeID(u)
	return ac
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableEmployeeID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetEmployeeID(*u)
	}
	return ac
}

// SetCabinetID sets the "cabinet_id" field.
func (ac *AllocateCreate) SetCabinetID(u uint64) *AllocateCreate {
	ac.mutation.SetCabinetID(u)
	return ac
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableCabinetID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetCabinetID(*u)
	}
	return ac
}

// SetStoreID sets the "store_id" field.
func (ac *AllocateCreate) SetStoreID(u uint64) *AllocateCreate {
	ac.mutation.SetStoreID(u)
	return ac
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableStoreID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetStoreID(*u)
	}
	return ac
}

// SetBrandID sets the "brand_id" field.
func (ac *AllocateCreate) SetBrandID(u uint64) *AllocateCreate {
	ac.mutation.SetBrandID(u)
	return ac
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableBrandID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetBrandID(*u)
	}
	return ac
}

// SetBatteryID sets the "battery_id" field.
func (ac *AllocateCreate) SetBatteryID(u uint64) *AllocateCreate {
	ac.mutation.SetBatteryID(u)
	return ac
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableBatteryID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetBatteryID(*u)
	}
	return ac
}

// SetStationID sets the "station_id" field.
func (ac *AllocateCreate) SetStationID(u uint64) *AllocateCreate {
	ac.mutation.SetStationID(u)
	return ac
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableStationID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetStationID(*u)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AllocateCreate) SetType(a allocate.Type) *AllocateCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AllocateCreate) SetStatus(u uint8) *AllocateCreate {
	ac.mutation.SetStatus(u)
	return ac
}

// SetTime sets the "time" field.
func (ac *AllocateCreate) SetTime(t time.Time) *AllocateCreate {
	ac.mutation.SetTime(t)
	return ac
}

// SetModel sets the "model" field.
func (ac *AllocateCreate) SetModel(s string) *AllocateCreate {
	ac.mutation.SetModel(s)
	return ac
}

// SetEbikeID sets the "ebike_id" field.
func (ac *AllocateCreate) SetEbikeID(u uint64) *AllocateCreate {
	ac.mutation.SetEbikeID(u)
	return ac
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (ac *AllocateCreate) SetNillableEbikeID(u *uint64) *AllocateCreate {
	if u != nil {
		ac.SetEbikeID(*u)
	}
	return ac
}

// SetRider sets the "rider" edge to the Rider entity.
func (ac *AllocateCreate) SetRider(r *Rider) *AllocateCreate {
	return ac.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ac *AllocateCreate) SetSubscribe(s *Subscribe) *AllocateCreate {
	return ac.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ac *AllocateCreate) SetEmployee(e *Employee) *AllocateCreate {
	return ac.SetEmployeeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ac *AllocateCreate) SetCabinet(c *Cabinet) *AllocateCreate {
	return ac.SetCabinetID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ac *AllocateCreate) SetStore(s *Store) *AllocateCreate {
	return ac.SetStoreID(s.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ac *AllocateCreate) SetBrand(e *EbikeBrand) *AllocateCreate {
	return ac.SetBrandID(e.ID)
}

// SetBattery sets the "battery" edge to the Battery entity.
func (ac *AllocateCreate) SetBattery(b *Battery) *AllocateCreate {
	return ac.SetBatteryID(b.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ac *AllocateCreate) SetStation(e *EnterpriseStation) *AllocateCreate {
	return ac.SetStationID(e.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (ac *AllocateCreate) SetContractID(id uint64) *AllocateCreate {
	ac.mutation.SetContractID(id)
	return ac
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (ac *AllocateCreate) SetNillableContractID(id *uint64) *AllocateCreate {
	if id != nil {
		ac = ac.SetContractID(*id)
	}
	return ac
}

// SetContract sets the "contract" edge to the Contract entity.
func (ac *AllocateCreate) SetContract(c *Contract) *AllocateCreate {
	return ac.SetContractID(c.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (ac *AllocateCreate) SetEbike(e *Ebike) *AllocateCreate {
	return ac.SetEbikeID(e.ID)
}

// Mutation returns the AllocateMutation object of the builder.
func (ac *AllocateCreate) Mutation() *AllocateMutation {
	return ac.mutation
}

// Save creates the Allocate in the database.
func (ac *AllocateCreate) Save(ctx context.Context) (*Allocate, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AllocateCreate) SaveX(ctx context.Context) *Allocate {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AllocateCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AllocateCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AllocateCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if allocate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized allocate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := allocate.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if allocate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized allocate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := allocate.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AllocateCreate) check() error {
	if _, ok := ac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Allocate.rider_id"`)}
	}
	if _, ok := ac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "Allocate.subscribe_id"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Allocate.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := allocate.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Allocate.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Allocate.status"`)}
	}
	if _, ok := ac.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Allocate.time"`)}
	}
	if _, ok := ac.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "Allocate.model"`)}
	}
	if _, ok := ac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Allocate.rider"`)}
	}
	if _, ok := ac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "Allocate.subscribe"`)}
	}
	return nil
}

func (ac *AllocateCreate) sqlSave(ctx context.Context) (*Allocate, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AllocateCreate) createSpec() (*Allocate, *sqlgraph.CreateSpec) {
	var (
		_node = &Allocate{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(allocate.Table, sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(allocate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = &value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(allocate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(allocate.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(allocate.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(allocate.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(allocate.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(allocate.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Time(); ok {
		_spec.SetField(allocate.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := ac.mutation.Model(); ok {
		_spec.SetField(allocate.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if nodes := ac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.RiderTable,
			Columns: []string{allocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.SubscribeTable,
			Columns: []string{allocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.EmployeeTable,
			Columns: []string{allocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.CabinetTable,
			Columns: []string{allocate.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StoreTable,
			Columns: []string{allocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BrandTable,
			Columns: []string{allocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.BatteryTable,
			Columns: []string{allocate.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   allocate.StationTable,
			Columns: []string{allocate.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   allocate.ContractTable,
			Columns: []string{allocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   allocate.EbikeTable,
			Columns: []string{allocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EbikeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Allocate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AllocateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AllocateCreate) OnConflict(opts ...sql.ConflictOption) *AllocateUpsertOne {
	ac.conflict = opts
	return &AllocateUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Allocate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AllocateCreate) OnConflictColumns(columns ...string) *AllocateUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AllocateUpsertOne{
		create: ac,
	}
}

type (
	// AllocateUpsertOne is the builder for "upsert"-ing
	//  one Allocate node.
	AllocateUpsertOne struct {
		create *AllocateCreate
	}

	// AllocateUpsert is the "OnConflict" setter.
	AllocateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AllocateUpsert) SetUpdatedAt(v time.Time) *AllocateUpsert {
	u.Set(allocate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateUpdatedAt() *AllocateUpsert {
	u.SetExcluded(allocate.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AllocateUpsert) ClearUpdatedAt() *AllocateUpsert {
	u.SetNull(allocate.FieldUpdatedAt)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *AllocateUpsert) SetRiderID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateRiderID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldRiderID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AllocateUpsert) SetSubscribeID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateSubscribeID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldSubscribeID)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AllocateUpsert) SetLastModifier(v *model.Modifier) *AllocateUpsert {
	u.Set(allocate.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateLastModifier() *AllocateUpsert {
	u.SetExcluded(allocate.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AllocateUpsert) ClearLastModifier() *AllocateUpsert {
	u.SetNull(allocate.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AllocateUpsert) SetRemark(v string) *AllocateUpsert {
	u.Set(allocate.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateRemark() *AllocateUpsert {
	u.SetExcluded(allocate.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AllocateUpsert) ClearRemark() *AllocateUpsert {
	u.SetNull(allocate.FieldRemark)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *AllocateUpsert) SetEmployeeID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateEmployeeID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AllocateUpsert) ClearEmployeeID() *AllocateUpsert {
	u.SetNull(allocate.FieldEmployeeID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *AllocateUpsert) SetCabinetID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateCabinetID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *AllocateUpsert) ClearCabinetID() *AllocateUpsert {
	u.SetNull(allocate.FieldCabinetID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *AllocateUpsert) SetStoreID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateStoreID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AllocateUpsert) ClearStoreID() *AllocateUpsert {
	u.SetNull(allocate.FieldStoreID)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *AllocateUpsert) SetBrandID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateBrandID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AllocateUpsert) ClearBrandID() *AllocateUpsert {
	u.SetNull(allocate.FieldBrandID)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *AllocateUpsert) SetBatteryID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateBatteryID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldBatteryID)
	return u
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *AllocateUpsert) ClearBatteryID() *AllocateUpsert {
	u.SetNull(allocate.FieldBatteryID)
	return u
}

// SetStationID sets the "station_id" field.
func (u *AllocateUpsert) SetStationID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateStationID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *AllocateUpsert) ClearStationID() *AllocateUpsert {
	u.SetNull(allocate.FieldStationID)
	return u
}

// SetType sets the "type" field.
func (u *AllocateUpsert) SetType(v allocate.Type) *AllocateUpsert {
	u.Set(allocate.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateType() *AllocateUpsert {
	u.SetExcluded(allocate.FieldType)
	return u
}

// SetStatus sets the "status" field.
func (u *AllocateUpsert) SetStatus(v uint8) *AllocateUpsert {
	u.Set(allocate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateStatus() *AllocateUpsert {
	u.SetExcluded(allocate.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AllocateUpsert) AddStatus(v uint8) *AllocateUpsert {
	u.Add(allocate.FieldStatus, v)
	return u
}

// SetTime sets the "time" field.
func (u *AllocateUpsert) SetTime(v time.Time) *AllocateUpsert {
	u.Set(allocate.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateTime() *AllocateUpsert {
	u.SetExcluded(allocate.FieldTime)
	return u
}

// SetModel sets the "model" field.
func (u *AllocateUpsert) SetModel(v string) *AllocateUpsert {
	u.Set(allocate.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateModel() *AllocateUpsert {
	u.SetExcluded(allocate.FieldModel)
	return u
}

// SetEbikeID sets the "ebike_id" field.
func (u *AllocateUpsert) SetEbikeID(v uint64) *AllocateUpsert {
	u.Set(allocate.FieldEbikeID, v)
	return u
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *AllocateUpsert) UpdateEbikeID() *AllocateUpsert {
	u.SetExcluded(allocate.FieldEbikeID)
	return u
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *AllocateUpsert) ClearEbikeID() *AllocateUpsert {
	u.SetNull(allocate.FieldEbikeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Allocate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AllocateUpsertOne) UpdateNewValues() *AllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(allocate.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(allocate.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Allocate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AllocateUpsertOne) Ignore() *AllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AllocateUpsertOne) DoNothing() *AllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AllocateCreate.OnConflict
// documentation for more info.
func (u *AllocateUpsertOne) Update(set func(*AllocateUpsert)) *AllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AllocateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AllocateUpsertOne) SetUpdatedAt(v time.Time) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateUpdatedAt() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AllocateUpsertOne) ClearUpdatedAt() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *AllocateUpsertOne) SetRiderID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateRiderID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AllocateUpsertOne) SetSubscribeID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateSubscribeID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AllocateUpsertOne) SetLastModifier(v *model.Modifier) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateLastModifier() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AllocateUpsertOne) ClearLastModifier() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AllocateUpsertOne) SetRemark(v string) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateRemark() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AllocateUpsertOne) ClearRemark() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearRemark()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AllocateUpsertOne) SetEmployeeID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateEmployeeID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AllocateUpsertOne) ClearEmployeeID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearEmployeeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *AllocateUpsertOne) SetCabinetID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateCabinetID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *AllocateUpsertOne) ClearCabinetID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearCabinetID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AllocateUpsertOne) SetStoreID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateStoreID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AllocateUpsertOne) ClearStoreID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearStoreID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *AllocateUpsertOne) SetBrandID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateBrandID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AllocateUpsertOne) ClearBrandID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearBrandID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *AllocateUpsertOne) SetBatteryID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateBatteryID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *AllocateUpsertOne) ClearBatteryID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearBatteryID()
	})
}

// SetStationID sets the "station_id" field.
func (u *AllocateUpsertOne) SetStationID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateStationID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *AllocateUpsertOne) ClearStationID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearStationID()
	})
}

// SetType sets the "type" field.
func (u *AllocateUpsertOne) SetType(v allocate.Type) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateType() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *AllocateUpsertOne) SetStatus(v uint8) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AllocateUpsertOne) AddStatus(v uint8) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateStatus() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStatus()
	})
}

// SetTime sets the "time" field.
func (u *AllocateUpsertOne) SetTime(v time.Time) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateTime() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateTime()
	})
}

// SetModel sets the "model" field.
func (u *AllocateUpsertOne) SetModel(v string) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateModel() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateModel()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *AllocateUpsertOne) SetEbikeID(v uint64) *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *AllocateUpsertOne) UpdateEbikeID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *AllocateUpsertOne) ClearEbikeID() *AllocateUpsertOne {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearEbikeID()
	})
}

// Exec executes the query.
func (u *AllocateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AllocateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AllocateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AllocateUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AllocateUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AllocateCreateBulk is the builder for creating many Allocate entities in bulk.
type AllocateCreateBulk struct {
	config
	builders []*AllocateCreate
	conflict []sql.ConflictOption
}

// Save creates the Allocate entities in the database.
func (acb *AllocateCreateBulk) Save(ctx context.Context) ([]*Allocate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Allocate, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AllocateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AllocateCreateBulk) SaveX(ctx context.Context) []*Allocate {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AllocateCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AllocateCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Allocate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AllocateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AllocateCreateBulk) OnConflict(opts ...sql.ConflictOption) *AllocateUpsertBulk {
	acb.conflict = opts
	return &AllocateUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Allocate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AllocateCreateBulk) OnConflictColumns(columns ...string) *AllocateUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AllocateUpsertBulk{
		create: acb,
	}
}

// AllocateUpsertBulk is the builder for "upsert"-ing
// a bulk of Allocate nodes.
type AllocateUpsertBulk struct {
	create *AllocateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Allocate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AllocateUpsertBulk) UpdateNewValues() *AllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(allocate.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(allocate.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Allocate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AllocateUpsertBulk) Ignore() *AllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AllocateUpsertBulk) DoNothing() *AllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AllocateCreateBulk.OnConflict
// documentation for more info.
func (u *AllocateUpsertBulk) Update(set func(*AllocateUpsert)) *AllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AllocateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AllocateUpsertBulk) SetUpdatedAt(v time.Time) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateUpdatedAt() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AllocateUpsertBulk) ClearUpdatedAt() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *AllocateUpsertBulk) SetRiderID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateRiderID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AllocateUpsertBulk) SetSubscribeID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateSubscribeID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AllocateUpsertBulk) SetLastModifier(v *model.Modifier) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateLastModifier() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AllocateUpsertBulk) ClearLastModifier() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AllocateUpsertBulk) SetRemark(v string) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateRemark() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AllocateUpsertBulk) ClearRemark() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearRemark()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *AllocateUpsertBulk) SetEmployeeID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateEmployeeID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *AllocateUpsertBulk) ClearEmployeeID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearEmployeeID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *AllocateUpsertBulk) SetCabinetID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateCabinetID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *AllocateUpsertBulk) ClearCabinetID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearCabinetID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *AllocateUpsertBulk) SetStoreID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateStoreID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *AllocateUpsertBulk) ClearStoreID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearStoreID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *AllocateUpsertBulk) SetBrandID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateBrandID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AllocateUpsertBulk) ClearBrandID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearBrandID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *AllocateUpsertBulk) SetBatteryID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateBatteryID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *AllocateUpsertBulk) ClearBatteryID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearBatteryID()
	})
}

// SetStationID sets the "station_id" field.
func (u *AllocateUpsertBulk) SetStationID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateStationID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *AllocateUpsertBulk) ClearStationID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearStationID()
	})
}

// SetType sets the "type" field.
func (u *AllocateUpsertBulk) SetType(v allocate.Type) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateType() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *AllocateUpsertBulk) SetStatus(v uint8) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AllocateUpsertBulk) AddStatus(v uint8) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateStatus() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateStatus()
	})
}

// SetTime sets the "time" field.
func (u *AllocateUpsertBulk) SetTime(v time.Time) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateTime() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateTime()
	})
}

// SetModel sets the "model" field.
func (u *AllocateUpsertBulk) SetModel(v string) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateModel() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateModel()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *AllocateUpsertBulk) SetEbikeID(v uint64) *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *AllocateUpsertBulk) UpdateEbikeID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *AllocateUpsertBulk) ClearEbikeID() *AllocateUpsertBulk {
	return u.Update(func(s *AllocateUpsert) {
		s.ClearEbikeID()
	})
}

// Exec executes the query.
func (u *AllocateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AllocateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AllocateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AllocateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
