// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterynew"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryNewUpdate is the builder for updating BatteryNew entities.
type BatteryNewUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryNewUpdate builder.
func (bnu *BatteryNewUpdate) Where(ps ...predicate.BatteryNew) *BatteryNewUpdate {
	bnu.mutation.Where(ps...)
	return bnu
}

// SetUpdatedAt sets the "updated_at" field.
func (bnu *BatteryNewUpdate) SetUpdatedAt(t time.Time) *BatteryNewUpdate {
	bnu.mutation.SetUpdatedAt(t)
	return bnu
}

// SetDeletedAt sets the "deleted_at" field.
func (bnu *BatteryNewUpdate) SetDeletedAt(t time.Time) *BatteryNewUpdate {
	bnu.mutation.SetDeletedAt(t)
	return bnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableDeletedAt(t *time.Time) *BatteryNewUpdate {
	if t != nil {
		bnu.SetDeletedAt(*t)
	}
	return bnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bnu *BatteryNewUpdate) ClearDeletedAt() *BatteryNewUpdate {
	bnu.mutation.ClearDeletedAt()
	return bnu
}

// SetLastModifier sets the "last_modifier" field.
func (bnu *BatteryNewUpdate) SetLastModifier(m *model.Modifier) *BatteryNewUpdate {
	bnu.mutation.SetLastModifier(m)
	return bnu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bnu *BatteryNewUpdate) ClearLastModifier() *BatteryNewUpdate {
	bnu.mutation.ClearLastModifier()
	return bnu
}

// SetRemark sets the "remark" field.
func (bnu *BatteryNewUpdate) SetRemark(s string) *BatteryNewUpdate {
	bnu.mutation.SetRemark(s)
	return bnu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableRemark(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetRemark(*s)
	}
	return bnu
}

// ClearRemark clears the value of the "remark" field.
func (bnu *BatteryNewUpdate) ClearRemark() *BatteryNewUpdate {
	bnu.mutation.ClearRemark()
	return bnu
}

// SetCityID sets the "city_id" field.
func (bnu *BatteryNewUpdate) SetCityID(u uint64) *BatteryNewUpdate {
	bnu.mutation.SetCityID(u)
	return bnu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableCityID(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetCityID(*u)
	}
	return bnu
}

// ClearCityID clears the value of the "city_id" field.
func (bnu *BatteryNewUpdate) ClearCityID() *BatteryNewUpdate {
	bnu.mutation.ClearCityID()
	return bnu
}

// SetSn sets the "sn" field.
func (bnu *BatteryNewUpdate) SetSn(s string) *BatteryNewUpdate {
	bnu.mutation.SetSn(s)
	return bnu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableSn(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetSn(*s)
	}
	return bnu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (bnu *BatteryNewUpdate) SetEnterpriseID(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetEnterpriseID()
	bnu.mutation.SetEnterpriseID(u)
	return bnu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableEnterpriseID(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetEnterpriseID(*u)
	}
	return bnu
}

// AddEnterpriseID adds u to the "enterprise_id" field.
func (bnu *BatteryNewUpdate) AddEnterpriseID(u int64) *BatteryNewUpdate {
	bnu.mutation.AddEnterpriseID(u)
	return bnu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (bnu *BatteryNewUpdate) ClearEnterpriseID() *BatteryNewUpdate {
	bnu.mutation.ClearEnterpriseID()
	return bnu
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (bnu *BatteryNewUpdate) SetAssetLocationsType(u uint8) *BatteryNewUpdate {
	bnu.mutation.ResetAssetLocationsType()
	bnu.mutation.SetAssetLocationsType(u)
	return bnu
}

// SetNillableAssetLocationsType sets the "asset_locations_type" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableAssetLocationsType(u *uint8) *BatteryNewUpdate {
	if u != nil {
		bnu.SetAssetLocationsType(*u)
	}
	return bnu
}

// AddAssetLocationsType adds u to the "asset_locations_type" field.
func (bnu *BatteryNewUpdate) AddAssetLocationsType(u int8) *BatteryNewUpdate {
	bnu.mutation.AddAssetLocationsType(u)
	return bnu
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (bnu *BatteryNewUpdate) SetAssetLocationsID(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetAssetLocationsID()
	bnu.mutation.SetAssetLocationsID(u)
	return bnu
}

// SetNillableAssetLocationsID sets the "asset_locations_id" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableAssetLocationsID(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetAssetLocationsID(*u)
	}
	return bnu
}

// AddAssetLocationsID adds u to the "asset_locations_id" field.
func (bnu *BatteryNewUpdate) AddAssetLocationsID(u int64) *BatteryNewUpdate {
	bnu.mutation.AddAssetLocationsID(u)
	return bnu
}

// SetAssetLocations sets the "asset_locations" field.
func (bnu *BatteryNewUpdate) SetAssetLocations(s string) *BatteryNewUpdate {
	bnu.mutation.SetAssetLocations(s)
	return bnu
}

// SetNillableAssetLocations sets the "asset_locations" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableAssetLocations(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetAssetLocations(*s)
	}
	return bnu
}

// ClearAssetLocations clears the value of the "asset_locations" field.
func (bnu *BatteryNewUpdate) ClearAssetLocations() *BatteryNewUpdate {
	bnu.mutation.ClearAssetLocations()
	return bnu
}

// SetBrand sets the "brand" field.
func (bnu *BatteryNewUpdate) SetBrand(s string) *BatteryNewUpdate {
	bnu.mutation.SetBrand(s)
	return bnu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableBrand(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetBrand(*s)
	}
	return bnu
}

// SetEnable sets the "enable" field.
func (bnu *BatteryNewUpdate) SetEnable(b bool) *BatteryNewUpdate {
	bnu.mutation.SetEnable(b)
	return bnu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableEnable(b *bool) *BatteryNewUpdate {
	if b != nil {
		bnu.SetEnable(*b)
	}
	return bnu
}

// SetModel sets the "model" field.
func (bnu *BatteryNewUpdate) SetModel(s string) *BatteryNewUpdate {
	bnu.mutation.SetModel(s)
	return bnu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableModel(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetModel(*s)
	}
	return bnu
}

// SetAssetStatus sets the "asset_status" field.
func (bnu *BatteryNewUpdate) SetAssetStatus(u uint8) *BatteryNewUpdate {
	bnu.mutation.ResetAssetStatus()
	bnu.mutation.SetAssetStatus(u)
	return bnu
}

// SetNillableAssetStatus sets the "asset_status" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableAssetStatus(u *uint8) *BatteryNewUpdate {
	if u != nil {
		bnu.SetAssetStatus(*u)
	}
	return bnu
}

// AddAssetStatus adds u to the "asset_status" field.
func (bnu *BatteryNewUpdate) AddAssetStatus(u int8) *BatteryNewUpdate {
	bnu.mutation.AddAssetStatus(u)
	return bnu
}

// SetStatus sets the "status" field.
func (bnu *BatteryNewUpdate) SetStatus(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetStatus()
	bnu.mutation.SetStatus(u)
	return bnu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableStatus(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetStatus(*u)
	}
	return bnu
}

// AddStatus adds u to the "status" field.
func (bnu *BatteryNewUpdate) AddStatus(u int64) *BatteryNewUpdate {
	bnu.mutation.AddStatus(u)
	return bnu
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (bnu *BatteryNewUpdate) SetScrapReasonType(u uint8) *BatteryNewUpdate {
	bnu.mutation.ResetScrapReasonType()
	bnu.mutation.SetScrapReasonType(u)
	return bnu
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableScrapReasonType(u *uint8) *BatteryNewUpdate {
	if u != nil {
		bnu.SetScrapReasonType(*u)
	}
	return bnu
}

// AddScrapReasonType adds u to the "scrap_reason_type" field.
func (bnu *BatteryNewUpdate) AddScrapReasonType(u int8) *BatteryNewUpdate {
	bnu.mutation.AddScrapReasonType(u)
	return bnu
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (bnu *BatteryNewUpdate) ClearScrapReasonType() *BatteryNewUpdate {
	bnu.mutation.ClearScrapReasonType()
	return bnu
}

// SetScrapAt sets the "scrap_at" field.
func (bnu *BatteryNewUpdate) SetScrapAt(t time.Time) *BatteryNewUpdate {
	bnu.mutation.SetScrapAt(t)
	return bnu
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableScrapAt(t *time.Time) *BatteryNewUpdate {
	if t != nil {
		bnu.SetScrapAt(*t)
	}
	return bnu
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (bnu *BatteryNewUpdate) ClearScrapAt() *BatteryNewUpdate {
	bnu.mutation.ClearScrapAt()
	return bnu
}

// SetOperateID sets the "operate_id" field.
func (bnu *BatteryNewUpdate) SetOperateID(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetOperateID()
	bnu.mutation.SetOperateID(u)
	return bnu
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableOperateID(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetOperateID(*u)
	}
	return bnu
}

// AddOperateID adds u to the "operate_id" field.
func (bnu *BatteryNewUpdate) AddOperateID(u int64) *BatteryNewUpdate {
	bnu.mutation.AddOperateID(u)
	return bnu
}

// ClearOperateID clears the value of the "operate_id" field.
func (bnu *BatteryNewUpdate) ClearOperateID() *BatteryNewUpdate {
	bnu.mutation.ClearOperateID()
	return bnu
}

// SetOperateRole sets the "operate_role" field.
func (bnu *BatteryNewUpdate) SetOperateRole(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetOperateRole()
	bnu.mutation.SetOperateRole(u)
	return bnu
}

// SetNillableOperateRole sets the "operate_role" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableOperateRole(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetOperateRole(*u)
	}
	return bnu
}

// AddOperateRole adds u to the "operate_role" field.
func (bnu *BatteryNewUpdate) AddOperateRole(u int64) *BatteryNewUpdate {
	bnu.mutation.AddOperateRole(u)
	return bnu
}

// ClearOperateRole clears the value of the "operate_role" field.
func (bnu *BatteryNewUpdate) ClearOperateRole() *BatteryNewUpdate {
	bnu.mutation.ClearOperateRole()
	return bnu
}

// SetOperateUser sets the "operate_user" field.
func (bnu *BatteryNewUpdate) SetOperateUser(s string) *BatteryNewUpdate {
	bnu.mutation.SetOperateUser(s)
	return bnu
}

// SetNillableOperateUser sets the "operate_user" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableOperateUser(s *string) *BatteryNewUpdate {
	if s != nil {
		bnu.SetOperateUser(*s)
	}
	return bnu
}

// ClearOperateUser clears the value of the "operate_user" field.
func (bnu *BatteryNewUpdate) ClearOperateUser() *BatteryNewUpdate {
	bnu.mutation.ClearOperateUser()
	return bnu
}

// SetWarehouseID sets the "warehouse_id" field.
func (bnu *BatteryNewUpdate) SetWarehouseID(u uint64) *BatteryNewUpdate {
	bnu.mutation.ResetWarehouseID()
	bnu.mutation.SetWarehouseID(u)
	return bnu
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (bnu *BatteryNewUpdate) SetNillableWarehouseID(u *uint64) *BatteryNewUpdate {
	if u != nil {
		bnu.SetWarehouseID(*u)
	}
	return bnu
}

// AddWarehouseID adds u to the "warehouse_id" field.
func (bnu *BatteryNewUpdate) AddWarehouseID(u int64) *BatteryNewUpdate {
	bnu.mutation.AddWarehouseID(u)
	return bnu
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (bnu *BatteryNewUpdate) ClearWarehouseID() *BatteryNewUpdate {
	bnu.mutation.ClearWarehouseID()
	return bnu
}

// SetCity sets the "city" edge to the City entity.
func (bnu *BatteryNewUpdate) SetCity(c *City) *BatteryNewUpdate {
	return bnu.SetCityID(c.ID)
}

// Mutation returns the BatteryNewMutation object of the builder.
func (bnu *BatteryNewUpdate) Mutation() *BatteryNewMutation {
	return bnu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (bnu *BatteryNewUpdate) ClearCity() *BatteryNewUpdate {
	bnu.mutation.ClearCity()
	return bnu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bnu *BatteryNewUpdate) Save(ctx context.Context) (int, error) {
	if err := bnu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bnu.sqlSave, bnu.mutation, bnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bnu *BatteryNewUpdate) SaveX(ctx context.Context) int {
	affected, err := bnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bnu *BatteryNewUpdate) Exec(ctx context.Context) error {
	_, err := bnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnu *BatteryNewUpdate) ExecX(ctx context.Context) {
	if err := bnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnu *BatteryNewUpdate) defaults() error {
	if _, ok := bnu.mutation.UpdatedAt(); !ok {
		if batterynew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterynew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterynew.UpdateDefaultUpdatedAt()
		bnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bnu *BatteryNewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryNewUpdate {
	bnu.modifiers = append(bnu.modifiers, modifiers...)
	return bnu
}

func (bnu *BatteryNewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterynew.Table, batterynew.Columns, sqlgraph.NewFieldSpec(batterynew.FieldID, field.TypeUint64))
	if ps := bnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bnu.mutation.UpdatedAt(); ok {
		_spec.SetField(batterynew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bnu.mutation.DeletedAt(); ok {
		_spec.SetField(batterynew.FieldDeletedAt, field.TypeTime, value)
	}
	if bnu.mutation.DeletedAtCleared() {
		_spec.ClearField(batterynew.FieldDeletedAt, field.TypeTime)
	}
	if bnu.mutation.CreatorCleared() {
		_spec.ClearField(batterynew.FieldCreator, field.TypeJSON)
	}
	if value, ok := bnu.mutation.LastModifier(); ok {
		_spec.SetField(batterynew.FieldLastModifier, field.TypeJSON, value)
	}
	if bnu.mutation.LastModifierCleared() {
		_spec.ClearField(batterynew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bnu.mutation.Remark(); ok {
		_spec.SetField(batterynew.FieldRemark, field.TypeString, value)
	}
	if bnu.mutation.RemarkCleared() {
		_spec.ClearField(batterynew.FieldRemark, field.TypeString)
	}
	if value, ok := bnu.mutation.Sn(); ok {
		_spec.SetField(batterynew.FieldSn, field.TypeString, value)
	}
	if value, ok := bnu.mutation.EnterpriseID(); ok {
		_spec.SetField(batterynew.FieldEnterpriseID, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedEnterpriseID(); ok {
		_spec.AddField(batterynew.FieldEnterpriseID, field.TypeUint64, value)
	}
	if bnu.mutation.EnterpriseIDCleared() {
		_spec.ClearField(batterynew.FieldEnterpriseID, field.TypeUint64)
	}
	if value, ok := bnu.mutation.AssetLocationsType(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsType, field.TypeUint8, value)
	}
	if value, ok := bnu.mutation.AddedAssetLocationsType(); ok {
		_spec.AddField(batterynew.FieldAssetLocationsType, field.TypeUint8, value)
	}
	if value, ok := bnu.mutation.AssetLocationsID(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsID, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedAssetLocationsID(); ok {
		_spec.AddField(batterynew.FieldAssetLocationsID, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AssetLocations(); ok {
		_spec.SetField(batterynew.FieldAssetLocations, field.TypeString, value)
	}
	if bnu.mutation.AssetLocationsCleared() {
		_spec.ClearField(batterynew.FieldAssetLocations, field.TypeString)
	}
	if value, ok := bnu.mutation.Brand(); ok {
		_spec.SetField(batterynew.FieldBrand, field.TypeString, value)
	}
	if value, ok := bnu.mutation.Enable(); ok {
		_spec.SetField(batterynew.FieldEnable, field.TypeBool, value)
	}
	if value, ok := bnu.mutation.Model(); ok {
		_spec.SetField(batterynew.FieldModel, field.TypeString, value)
	}
	if value, ok := bnu.mutation.AssetStatus(); ok {
		_spec.SetField(batterynew.FieldAssetStatus, field.TypeUint8, value)
	}
	if value, ok := bnu.mutation.AddedAssetStatus(); ok {
		_spec.AddField(batterynew.FieldAssetStatus, field.TypeUint8, value)
	}
	if value, ok := bnu.mutation.Status(); ok {
		_spec.SetField(batterynew.FieldStatus, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedStatus(); ok {
		_spec.AddField(batterynew.FieldStatus, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.ScrapReasonType(); ok {
		_spec.SetField(batterynew.FieldScrapReasonType, field.TypeUint8, value)
	}
	if value, ok := bnu.mutation.AddedScrapReasonType(); ok {
		_spec.AddField(batterynew.FieldScrapReasonType, field.TypeUint8, value)
	}
	if bnu.mutation.ScrapReasonTypeCleared() {
		_spec.ClearField(batterynew.FieldScrapReasonType, field.TypeUint8)
	}
	if value, ok := bnu.mutation.ScrapAt(); ok {
		_spec.SetField(batterynew.FieldScrapAt, field.TypeTime, value)
	}
	if bnu.mutation.ScrapAtCleared() {
		_spec.ClearField(batterynew.FieldScrapAt, field.TypeTime)
	}
	if value, ok := bnu.mutation.OperateID(); ok {
		_spec.SetField(batterynew.FieldOperateID, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedOperateID(); ok {
		_spec.AddField(batterynew.FieldOperateID, field.TypeUint64, value)
	}
	if bnu.mutation.OperateIDCleared() {
		_spec.ClearField(batterynew.FieldOperateID, field.TypeUint64)
	}
	if value, ok := bnu.mutation.OperateRole(); ok {
		_spec.SetField(batterynew.FieldOperateRole, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedOperateRole(); ok {
		_spec.AddField(batterynew.FieldOperateRole, field.TypeUint64, value)
	}
	if bnu.mutation.OperateRoleCleared() {
		_spec.ClearField(batterynew.FieldOperateRole, field.TypeUint64)
	}
	if value, ok := bnu.mutation.OperateUser(); ok {
		_spec.SetField(batterynew.FieldOperateUser, field.TypeString, value)
	}
	if bnu.mutation.OperateUserCleared() {
		_spec.ClearField(batterynew.FieldOperateUser, field.TypeString)
	}
	if value, ok := bnu.mutation.WarehouseID(); ok {
		_spec.SetField(batterynew.FieldWarehouseID, field.TypeUint64, value)
	}
	if value, ok := bnu.mutation.AddedWarehouseID(); ok {
		_spec.AddField(batterynew.FieldWarehouseID, field.TypeUint64, value)
	}
	if bnu.mutation.WarehouseIDCleared() {
		_spec.ClearField(batterynew.FieldWarehouseID, field.TypeUint64)
	}
	if bnu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batterynew.CityTable,
			Columns: []string{batterynew.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bnu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batterynew.CityTable,
			Columns: []string{batterynew.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterynew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bnu.mutation.done = true
	return n, nil
}

// BatteryNewUpdateOne is the builder for updating a single BatteryNew entity.
type BatteryNewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bnuo *BatteryNewUpdateOne) SetUpdatedAt(t time.Time) *BatteryNewUpdateOne {
	bnuo.mutation.SetUpdatedAt(t)
	return bnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bnuo *BatteryNewUpdateOne) SetDeletedAt(t time.Time) *BatteryNewUpdateOne {
	bnuo.mutation.SetDeletedAt(t)
	return bnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableDeletedAt(t *time.Time) *BatteryNewUpdateOne {
	if t != nil {
		bnuo.SetDeletedAt(*t)
	}
	return bnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bnuo *BatteryNewUpdateOne) ClearDeletedAt() *BatteryNewUpdateOne {
	bnuo.mutation.ClearDeletedAt()
	return bnuo
}

// SetLastModifier sets the "last_modifier" field.
func (bnuo *BatteryNewUpdateOne) SetLastModifier(m *model.Modifier) *BatteryNewUpdateOne {
	bnuo.mutation.SetLastModifier(m)
	return bnuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bnuo *BatteryNewUpdateOne) ClearLastModifier() *BatteryNewUpdateOne {
	bnuo.mutation.ClearLastModifier()
	return bnuo
}

// SetRemark sets the "remark" field.
func (bnuo *BatteryNewUpdateOne) SetRemark(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetRemark(s)
	return bnuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableRemark(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetRemark(*s)
	}
	return bnuo
}

// ClearRemark clears the value of the "remark" field.
func (bnuo *BatteryNewUpdateOne) ClearRemark() *BatteryNewUpdateOne {
	bnuo.mutation.ClearRemark()
	return bnuo
}

// SetCityID sets the "city_id" field.
func (bnuo *BatteryNewUpdateOne) SetCityID(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.SetCityID(u)
	return bnuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableCityID(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetCityID(*u)
	}
	return bnuo
}

// ClearCityID clears the value of the "city_id" field.
func (bnuo *BatteryNewUpdateOne) ClearCityID() *BatteryNewUpdateOne {
	bnuo.mutation.ClearCityID()
	return bnuo
}

// SetSn sets the "sn" field.
func (bnuo *BatteryNewUpdateOne) SetSn(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetSn(s)
	return bnuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableSn(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetSn(*s)
	}
	return bnuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (bnuo *BatteryNewUpdateOne) SetEnterpriseID(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetEnterpriseID()
	bnuo.mutation.SetEnterpriseID(u)
	return bnuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableEnterpriseID(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetEnterpriseID(*u)
	}
	return bnuo
}

// AddEnterpriseID adds u to the "enterprise_id" field.
func (bnuo *BatteryNewUpdateOne) AddEnterpriseID(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddEnterpriseID(u)
	return bnuo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (bnuo *BatteryNewUpdateOne) ClearEnterpriseID() *BatteryNewUpdateOne {
	bnuo.mutation.ClearEnterpriseID()
	return bnuo
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (bnuo *BatteryNewUpdateOne) SetAssetLocationsType(u uint8) *BatteryNewUpdateOne {
	bnuo.mutation.ResetAssetLocationsType()
	bnuo.mutation.SetAssetLocationsType(u)
	return bnuo
}

// SetNillableAssetLocationsType sets the "asset_locations_type" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableAssetLocationsType(u *uint8) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetAssetLocationsType(*u)
	}
	return bnuo
}

// AddAssetLocationsType adds u to the "asset_locations_type" field.
func (bnuo *BatteryNewUpdateOne) AddAssetLocationsType(u int8) *BatteryNewUpdateOne {
	bnuo.mutation.AddAssetLocationsType(u)
	return bnuo
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (bnuo *BatteryNewUpdateOne) SetAssetLocationsID(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetAssetLocationsID()
	bnuo.mutation.SetAssetLocationsID(u)
	return bnuo
}

// SetNillableAssetLocationsID sets the "asset_locations_id" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableAssetLocationsID(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetAssetLocationsID(*u)
	}
	return bnuo
}

// AddAssetLocationsID adds u to the "asset_locations_id" field.
func (bnuo *BatteryNewUpdateOne) AddAssetLocationsID(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddAssetLocationsID(u)
	return bnuo
}

// SetAssetLocations sets the "asset_locations" field.
func (bnuo *BatteryNewUpdateOne) SetAssetLocations(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetAssetLocations(s)
	return bnuo
}

// SetNillableAssetLocations sets the "asset_locations" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableAssetLocations(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetAssetLocations(*s)
	}
	return bnuo
}

// ClearAssetLocations clears the value of the "asset_locations" field.
func (bnuo *BatteryNewUpdateOne) ClearAssetLocations() *BatteryNewUpdateOne {
	bnuo.mutation.ClearAssetLocations()
	return bnuo
}

// SetBrand sets the "brand" field.
func (bnuo *BatteryNewUpdateOne) SetBrand(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetBrand(s)
	return bnuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableBrand(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetBrand(*s)
	}
	return bnuo
}

// SetEnable sets the "enable" field.
func (bnuo *BatteryNewUpdateOne) SetEnable(b bool) *BatteryNewUpdateOne {
	bnuo.mutation.SetEnable(b)
	return bnuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableEnable(b *bool) *BatteryNewUpdateOne {
	if b != nil {
		bnuo.SetEnable(*b)
	}
	return bnuo
}

// SetModel sets the "model" field.
func (bnuo *BatteryNewUpdateOne) SetModel(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetModel(s)
	return bnuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableModel(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetModel(*s)
	}
	return bnuo
}

// SetAssetStatus sets the "asset_status" field.
func (bnuo *BatteryNewUpdateOne) SetAssetStatus(u uint8) *BatteryNewUpdateOne {
	bnuo.mutation.ResetAssetStatus()
	bnuo.mutation.SetAssetStatus(u)
	return bnuo
}

// SetNillableAssetStatus sets the "asset_status" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableAssetStatus(u *uint8) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetAssetStatus(*u)
	}
	return bnuo
}

// AddAssetStatus adds u to the "asset_status" field.
func (bnuo *BatteryNewUpdateOne) AddAssetStatus(u int8) *BatteryNewUpdateOne {
	bnuo.mutation.AddAssetStatus(u)
	return bnuo
}

// SetStatus sets the "status" field.
func (bnuo *BatteryNewUpdateOne) SetStatus(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetStatus()
	bnuo.mutation.SetStatus(u)
	return bnuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableStatus(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetStatus(*u)
	}
	return bnuo
}

// AddStatus adds u to the "status" field.
func (bnuo *BatteryNewUpdateOne) AddStatus(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddStatus(u)
	return bnuo
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (bnuo *BatteryNewUpdateOne) SetScrapReasonType(u uint8) *BatteryNewUpdateOne {
	bnuo.mutation.ResetScrapReasonType()
	bnuo.mutation.SetScrapReasonType(u)
	return bnuo
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableScrapReasonType(u *uint8) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetScrapReasonType(*u)
	}
	return bnuo
}

// AddScrapReasonType adds u to the "scrap_reason_type" field.
func (bnuo *BatteryNewUpdateOne) AddScrapReasonType(u int8) *BatteryNewUpdateOne {
	bnuo.mutation.AddScrapReasonType(u)
	return bnuo
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (bnuo *BatteryNewUpdateOne) ClearScrapReasonType() *BatteryNewUpdateOne {
	bnuo.mutation.ClearScrapReasonType()
	return bnuo
}

// SetScrapAt sets the "scrap_at" field.
func (bnuo *BatteryNewUpdateOne) SetScrapAt(t time.Time) *BatteryNewUpdateOne {
	bnuo.mutation.SetScrapAt(t)
	return bnuo
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableScrapAt(t *time.Time) *BatteryNewUpdateOne {
	if t != nil {
		bnuo.SetScrapAt(*t)
	}
	return bnuo
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (bnuo *BatteryNewUpdateOne) ClearScrapAt() *BatteryNewUpdateOne {
	bnuo.mutation.ClearScrapAt()
	return bnuo
}

// SetOperateID sets the "operate_id" field.
func (bnuo *BatteryNewUpdateOne) SetOperateID(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetOperateID()
	bnuo.mutation.SetOperateID(u)
	return bnuo
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableOperateID(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetOperateID(*u)
	}
	return bnuo
}

// AddOperateID adds u to the "operate_id" field.
func (bnuo *BatteryNewUpdateOne) AddOperateID(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddOperateID(u)
	return bnuo
}

// ClearOperateID clears the value of the "operate_id" field.
func (bnuo *BatteryNewUpdateOne) ClearOperateID() *BatteryNewUpdateOne {
	bnuo.mutation.ClearOperateID()
	return bnuo
}

// SetOperateRole sets the "operate_role" field.
func (bnuo *BatteryNewUpdateOne) SetOperateRole(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetOperateRole()
	bnuo.mutation.SetOperateRole(u)
	return bnuo
}

// SetNillableOperateRole sets the "operate_role" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableOperateRole(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetOperateRole(*u)
	}
	return bnuo
}

// AddOperateRole adds u to the "operate_role" field.
func (bnuo *BatteryNewUpdateOne) AddOperateRole(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddOperateRole(u)
	return bnuo
}

// ClearOperateRole clears the value of the "operate_role" field.
func (bnuo *BatteryNewUpdateOne) ClearOperateRole() *BatteryNewUpdateOne {
	bnuo.mutation.ClearOperateRole()
	return bnuo
}

// SetOperateUser sets the "operate_user" field.
func (bnuo *BatteryNewUpdateOne) SetOperateUser(s string) *BatteryNewUpdateOne {
	bnuo.mutation.SetOperateUser(s)
	return bnuo
}

// SetNillableOperateUser sets the "operate_user" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableOperateUser(s *string) *BatteryNewUpdateOne {
	if s != nil {
		bnuo.SetOperateUser(*s)
	}
	return bnuo
}

// ClearOperateUser clears the value of the "operate_user" field.
func (bnuo *BatteryNewUpdateOne) ClearOperateUser() *BatteryNewUpdateOne {
	bnuo.mutation.ClearOperateUser()
	return bnuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (bnuo *BatteryNewUpdateOne) SetWarehouseID(u uint64) *BatteryNewUpdateOne {
	bnuo.mutation.ResetWarehouseID()
	bnuo.mutation.SetWarehouseID(u)
	return bnuo
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (bnuo *BatteryNewUpdateOne) SetNillableWarehouseID(u *uint64) *BatteryNewUpdateOne {
	if u != nil {
		bnuo.SetWarehouseID(*u)
	}
	return bnuo
}

// AddWarehouseID adds u to the "warehouse_id" field.
func (bnuo *BatteryNewUpdateOne) AddWarehouseID(u int64) *BatteryNewUpdateOne {
	bnuo.mutation.AddWarehouseID(u)
	return bnuo
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (bnuo *BatteryNewUpdateOne) ClearWarehouseID() *BatteryNewUpdateOne {
	bnuo.mutation.ClearWarehouseID()
	return bnuo
}

// SetCity sets the "city" edge to the City entity.
func (bnuo *BatteryNewUpdateOne) SetCity(c *City) *BatteryNewUpdateOne {
	return bnuo.SetCityID(c.ID)
}

// Mutation returns the BatteryNewMutation object of the builder.
func (bnuo *BatteryNewUpdateOne) Mutation() *BatteryNewMutation {
	return bnuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (bnuo *BatteryNewUpdateOne) ClearCity() *BatteryNewUpdateOne {
	bnuo.mutation.ClearCity()
	return bnuo
}

// Where appends a list predicates to the BatteryNewUpdate builder.
func (bnuo *BatteryNewUpdateOne) Where(ps ...predicate.BatteryNew) *BatteryNewUpdateOne {
	bnuo.mutation.Where(ps...)
	return bnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bnuo *BatteryNewUpdateOne) Select(field string, fields ...string) *BatteryNewUpdateOne {
	bnuo.fields = append([]string{field}, fields...)
	return bnuo
}

// Save executes the query and returns the updated BatteryNew entity.
func (bnuo *BatteryNewUpdateOne) Save(ctx context.Context) (*BatteryNew, error) {
	if err := bnuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bnuo.sqlSave, bnuo.mutation, bnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bnuo *BatteryNewUpdateOne) SaveX(ctx context.Context) *BatteryNew {
	node, err := bnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bnuo *BatteryNewUpdateOne) Exec(ctx context.Context) error {
	_, err := bnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnuo *BatteryNewUpdateOne) ExecX(ctx context.Context) {
	if err := bnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnuo *BatteryNewUpdateOne) defaults() error {
	if _, ok := bnuo.mutation.UpdatedAt(); !ok {
		if batterynew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterynew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterynew.UpdateDefaultUpdatedAt()
		bnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bnuo *BatteryNewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryNewUpdateOne {
	bnuo.modifiers = append(bnuo.modifiers, modifiers...)
	return bnuo
}

func (bnuo *BatteryNewUpdateOne) sqlSave(ctx context.Context) (_node *BatteryNew, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterynew.Table, batterynew.Columns, sqlgraph.NewFieldSpec(batterynew.FieldID, field.TypeUint64))
	id, ok := bnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryNew.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterynew.FieldID)
		for _, f := range fields {
			if !batterynew.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batterynew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(batterynew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bnuo.mutation.DeletedAt(); ok {
		_spec.SetField(batterynew.FieldDeletedAt, field.TypeTime, value)
	}
	if bnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(batterynew.FieldDeletedAt, field.TypeTime)
	}
	if bnuo.mutation.CreatorCleared() {
		_spec.ClearField(batterynew.FieldCreator, field.TypeJSON)
	}
	if value, ok := bnuo.mutation.LastModifier(); ok {
		_spec.SetField(batterynew.FieldLastModifier, field.TypeJSON, value)
	}
	if bnuo.mutation.LastModifierCleared() {
		_spec.ClearField(batterynew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bnuo.mutation.Remark(); ok {
		_spec.SetField(batterynew.FieldRemark, field.TypeString, value)
	}
	if bnuo.mutation.RemarkCleared() {
		_spec.ClearField(batterynew.FieldRemark, field.TypeString)
	}
	if value, ok := bnuo.mutation.Sn(); ok {
		_spec.SetField(batterynew.FieldSn, field.TypeString, value)
	}
	if value, ok := bnuo.mutation.EnterpriseID(); ok {
		_spec.SetField(batterynew.FieldEnterpriseID, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedEnterpriseID(); ok {
		_spec.AddField(batterynew.FieldEnterpriseID, field.TypeUint64, value)
	}
	if bnuo.mutation.EnterpriseIDCleared() {
		_spec.ClearField(batterynew.FieldEnterpriseID, field.TypeUint64)
	}
	if value, ok := bnuo.mutation.AssetLocationsType(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsType, field.TypeUint8, value)
	}
	if value, ok := bnuo.mutation.AddedAssetLocationsType(); ok {
		_spec.AddField(batterynew.FieldAssetLocationsType, field.TypeUint8, value)
	}
	if value, ok := bnuo.mutation.AssetLocationsID(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsID, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedAssetLocationsID(); ok {
		_spec.AddField(batterynew.FieldAssetLocationsID, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AssetLocations(); ok {
		_spec.SetField(batterynew.FieldAssetLocations, field.TypeString, value)
	}
	if bnuo.mutation.AssetLocationsCleared() {
		_spec.ClearField(batterynew.FieldAssetLocations, field.TypeString)
	}
	if value, ok := bnuo.mutation.Brand(); ok {
		_spec.SetField(batterynew.FieldBrand, field.TypeString, value)
	}
	if value, ok := bnuo.mutation.Enable(); ok {
		_spec.SetField(batterynew.FieldEnable, field.TypeBool, value)
	}
	if value, ok := bnuo.mutation.Model(); ok {
		_spec.SetField(batterynew.FieldModel, field.TypeString, value)
	}
	if value, ok := bnuo.mutation.AssetStatus(); ok {
		_spec.SetField(batterynew.FieldAssetStatus, field.TypeUint8, value)
	}
	if value, ok := bnuo.mutation.AddedAssetStatus(); ok {
		_spec.AddField(batterynew.FieldAssetStatus, field.TypeUint8, value)
	}
	if value, ok := bnuo.mutation.Status(); ok {
		_spec.SetField(batterynew.FieldStatus, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedStatus(); ok {
		_spec.AddField(batterynew.FieldStatus, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.ScrapReasonType(); ok {
		_spec.SetField(batterynew.FieldScrapReasonType, field.TypeUint8, value)
	}
	if value, ok := bnuo.mutation.AddedScrapReasonType(); ok {
		_spec.AddField(batterynew.FieldScrapReasonType, field.TypeUint8, value)
	}
	if bnuo.mutation.ScrapReasonTypeCleared() {
		_spec.ClearField(batterynew.FieldScrapReasonType, field.TypeUint8)
	}
	if value, ok := bnuo.mutation.ScrapAt(); ok {
		_spec.SetField(batterynew.FieldScrapAt, field.TypeTime, value)
	}
	if bnuo.mutation.ScrapAtCleared() {
		_spec.ClearField(batterynew.FieldScrapAt, field.TypeTime)
	}
	if value, ok := bnuo.mutation.OperateID(); ok {
		_spec.SetField(batterynew.FieldOperateID, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedOperateID(); ok {
		_spec.AddField(batterynew.FieldOperateID, field.TypeUint64, value)
	}
	if bnuo.mutation.OperateIDCleared() {
		_spec.ClearField(batterynew.FieldOperateID, field.TypeUint64)
	}
	if value, ok := bnuo.mutation.OperateRole(); ok {
		_spec.SetField(batterynew.FieldOperateRole, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedOperateRole(); ok {
		_spec.AddField(batterynew.FieldOperateRole, field.TypeUint64, value)
	}
	if bnuo.mutation.OperateRoleCleared() {
		_spec.ClearField(batterynew.FieldOperateRole, field.TypeUint64)
	}
	if value, ok := bnuo.mutation.OperateUser(); ok {
		_spec.SetField(batterynew.FieldOperateUser, field.TypeString, value)
	}
	if bnuo.mutation.OperateUserCleared() {
		_spec.ClearField(batterynew.FieldOperateUser, field.TypeString)
	}
	if value, ok := bnuo.mutation.WarehouseID(); ok {
		_spec.SetField(batterynew.FieldWarehouseID, field.TypeUint64, value)
	}
	if value, ok := bnuo.mutation.AddedWarehouseID(); ok {
		_spec.AddField(batterynew.FieldWarehouseID, field.TypeUint64, value)
	}
	if bnuo.mutation.WarehouseIDCleared() {
		_spec.ClearField(batterynew.FieldWarehouseID, field.TypeUint64)
	}
	if bnuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batterynew.CityTable,
			Columns: []string{batterynew.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bnuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batterynew.CityTable,
			Columns: []string{batterynew.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bnuo.modifiers...)
	_node = &BatteryNew{config: bnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterynew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bnuo.mutation.done = true
	return _node, nil
}
