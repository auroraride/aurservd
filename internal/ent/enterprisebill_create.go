// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseBillCreate is the builder for creating a EnterpriseBill entity.
type EnterpriseBillCreate struct {
	config
	mutation *EnterpriseBillMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ebc *EnterpriseBillCreate) SetCreatedAt(t time.Time) *EnterpriseBillCreate {
	ebc.mutation.SetCreatedAt(t)
	return ebc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ebc *EnterpriseBillCreate) SetNillableCreatedAt(t *time.Time) *EnterpriseBillCreate {
	if t != nil {
		ebc.SetCreatedAt(*t)
	}
	return ebc
}

// SetUpdatedAt sets the "updated_at" field.
func (ebc *EnterpriseBillCreate) SetUpdatedAt(t time.Time) *EnterpriseBillCreate {
	ebc.mutation.SetUpdatedAt(t)
	return ebc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ebc *EnterpriseBillCreate) SetNillableUpdatedAt(t *time.Time) *EnterpriseBillCreate {
	if t != nil {
		ebc.SetUpdatedAt(*t)
	}
	return ebc
}

// SetDeletedAt sets the "deleted_at" field.
func (ebc *EnterpriseBillCreate) SetDeletedAt(t time.Time) *EnterpriseBillCreate {
	ebc.mutation.SetDeletedAt(t)
	return ebc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebc *EnterpriseBillCreate) SetNillableDeletedAt(t *time.Time) *EnterpriseBillCreate {
	if t != nil {
		ebc.SetDeletedAt(*t)
	}
	return ebc
}

// SetCreator sets the "creator" field.
func (ebc *EnterpriseBillCreate) SetCreator(m *model.Modifier) *EnterpriseBillCreate {
	ebc.mutation.SetCreator(m)
	return ebc
}

// SetLastModifier sets the "last_modifier" field.
func (ebc *EnterpriseBillCreate) SetLastModifier(m *model.Modifier) *EnterpriseBillCreate {
	ebc.mutation.SetLastModifier(m)
	return ebc
}

// SetRemark sets the "remark" field.
func (ebc *EnterpriseBillCreate) SetRemark(s string) *EnterpriseBillCreate {
	ebc.mutation.SetRemark(s)
	return ebc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebc *EnterpriseBillCreate) SetNillableRemark(s *string) *EnterpriseBillCreate {
	if s != nil {
		ebc.SetRemark(*s)
	}
	return ebc
}

// SetRiderID sets the "rider_id" field.
func (ebc *EnterpriseBillCreate) SetRiderID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetRiderID(u)
	return ebc
}

// SetSubscribeID sets the "subscribe_id" field.
func (ebc *EnterpriseBillCreate) SetSubscribeID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetSubscribeID(u)
	return ebc
}

// SetCityID sets the "city_id" field.
func (ebc *EnterpriseBillCreate) SetCityID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetCityID(u)
	return ebc
}

// SetStationID sets the "station_id" field.
func (ebc *EnterpriseBillCreate) SetStationID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetStationID(u)
	return ebc
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ebc *EnterpriseBillCreate) SetNillableStationID(u *uint64) *EnterpriseBillCreate {
	if u != nil {
		ebc.SetStationID(*u)
	}
	return ebc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ebc *EnterpriseBillCreate) SetEnterpriseID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetEnterpriseID(u)
	return ebc
}

// SetStatementID sets the "statement_id" field.
func (ebc *EnterpriseBillCreate) SetStatementID(u uint64) *EnterpriseBillCreate {
	ebc.mutation.SetStatementID(u)
	return ebc
}

// SetStart sets the "start" field.
func (ebc *EnterpriseBillCreate) SetStart(t time.Time) *EnterpriseBillCreate {
	ebc.mutation.SetStart(t)
	return ebc
}

// SetEnd sets the "end" field.
func (ebc *EnterpriseBillCreate) SetEnd(t time.Time) *EnterpriseBillCreate {
	ebc.mutation.SetEnd(t)
	return ebc
}

// SetDays sets the "days" field.
func (ebc *EnterpriseBillCreate) SetDays(i int) *EnterpriseBillCreate {
	ebc.mutation.SetDays(i)
	return ebc
}

// SetPrice sets the "price" field.
func (ebc *EnterpriseBillCreate) SetPrice(f float64) *EnterpriseBillCreate {
	ebc.mutation.SetPrice(f)
	return ebc
}

// SetCost sets the "cost" field.
func (ebc *EnterpriseBillCreate) SetCost(f float64) *EnterpriseBillCreate {
	ebc.mutation.SetCost(f)
	return ebc
}

// SetModel sets the "model" field.
func (ebc *EnterpriseBillCreate) SetModel(s string) *EnterpriseBillCreate {
	ebc.mutation.SetModel(s)
	return ebc
}

// SetRider sets the "rider" edge to the Rider entity.
func (ebc *EnterpriseBillCreate) SetRider(r *Rider) *EnterpriseBillCreate {
	return ebc.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ebc *EnterpriseBillCreate) SetSubscribe(s *Subscribe) *EnterpriseBillCreate {
	return ebc.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ebc *EnterpriseBillCreate) SetCity(c *City) *EnterpriseBillCreate {
	return ebc.SetCityID(c.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ebc *EnterpriseBillCreate) SetStation(e *EnterpriseStation) *EnterpriseBillCreate {
	return ebc.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ebc *EnterpriseBillCreate) SetEnterprise(e *Enterprise) *EnterpriseBillCreate {
	return ebc.SetEnterpriseID(e.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (ebc *EnterpriseBillCreate) SetStatement(e *EnterpriseStatement) *EnterpriseBillCreate {
	return ebc.SetStatementID(e.ID)
}

// Mutation returns the EnterpriseBillMutation object of the builder.
func (ebc *EnterpriseBillCreate) Mutation() *EnterpriseBillMutation {
	return ebc.mutation
}

// Save creates the EnterpriseBill in the database.
func (ebc *EnterpriseBillCreate) Save(ctx context.Context) (*EnterpriseBill, error) {
	var (
		err  error
		node *EnterpriseBill
	)
	if err := ebc.defaults(); err != nil {
		return nil, err
	}
	if len(ebc.hooks) == 0 {
		if err = ebc.check(); err != nil {
			return nil, err
		}
		node, err = ebc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseBillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ebc.check(); err != nil {
				return nil, err
			}
			ebc.mutation = mutation
			if node, err = ebc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ebc.hooks) - 1; i >= 0; i-- {
			if ebc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ebc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ebc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseBill)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseBillMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ebc *EnterpriseBillCreate) SaveX(ctx context.Context) *EnterpriseBill {
	v, err := ebc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebc *EnterpriseBillCreate) Exec(ctx context.Context) error {
	_, err := ebc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebc *EnterpriseBillCreate) ExecX(ctx context.Context) {
	if err := ebc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebc *EnterpriseBillCreate) defaults() error {
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		if enterprisebill.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisebill.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisebill.DefaultCreatedAt()
		ebc.mutation.SetCreatedAt(v)
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		if enterprisebill.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisebill.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisebill.DefaultUpdatedAt()
		ebc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ebc *EnterpriseBillCreate) check() error {
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterpriseBill.created_at"`)}
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterpriseBill.updated_at"`)}
	}
	if _, ok := ebc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "EnterpriseBill.rider_id"`)}
	}
	if _, ok := ebc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "EnterpriseBill.subscribe_id"`)}
	}
	if _, ok := ebc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "EnterpriseBill.city_id"`)}
	}
	if _, ok := ebc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "EnterpriseBill.enterprise_id"`)}
	}
	if _, ok := ebc.mutation.StatementID(); !ok {
		return &ValidationError{Name: "statement_id", err: errors.New(`ent: missing required field "EnterpriseBill.statement_id"`)}
	}
	if _, ok := ebc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "EnterpriseBill.start"`)}
	}
	if _, ok := ebc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "EnterpriseBill.end"`)}
	}
	if _, ok := ebc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "EnterpriseBill.days"`)}
	}
	if _, ok := ebc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "EnterpriseBill.price"`)}
	}
	if _, ok := ebc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "EnterpriseBill.cost"`)}
	}
	if _, ok := ebc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "EnterpriseBill.model"`)}
	}
	if _, ok := ebc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "EnterpriseBill.rider"`)}
	}
	if _, ok := ebc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "EnterpriseBill.subscribe"`)}
	}
	if _, ok := ebc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "EnterpriseBill.city"`)}
	}
	if _, ok := ebc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "EnterpriseBill.enterprise"`)}
	}
	if _, ok := ebc.mutation.StatementID(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required edge "EnterpriseBill.statement"`)}
	}
	return nil
}

func (ebc *EnterpriseBillCreate) sqlSave(ctx context.Context) (*EnterpriseBill, error) {
	_node, _spec := ebc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ebc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ebc *EnterpriseBillCreate) createSpec() (*EnterpriseBill, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterpriseBill{config: ebc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enterprisebill.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		}
	)
	_spec.OnConflict = ebc.conflict
	if value, ok := ebc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisebill.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ebc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisebill.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ebc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisebill.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ebc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisebill.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ebc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisebill.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ebc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisebill.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ebc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisebill.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := ebc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisebill.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := ebc.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisebill.FieldDays,
		})
		_node.Days = value
	}
	if value, ok := ebc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisebill.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := ebc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisebill.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := ebc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisebill.FieldModel,
		})
		_node.Model = value
	}
	if nodes := ebc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ebc.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatementID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseBill.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseBillUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ebc *EnterpriseBillCreate) OnConflict(opts ...sql.ConflictOption) *EnterpriseBillUpsertOne {
	ebc.conflict = opts
	return &EnterpriseBillUpsertOne{
		create: ebc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseBill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ebc *EnterpriseBillCreate) OnConflictColumns(columns ...string) *EnterpriseBillUpsertOne {
	ebc.conflict = append(ebc.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseBillUpsertOne{
		create: ebc,
	}
}

type (
	// EnterpriseBillUpsertOne is the builder for "upsert"-ing
	//  one EnterpriseBill node.
	EnterpriseBillUpsertOne struct {
		create *EnterpriseBillCreate
	}

	// EnterpriseBillUpsert is the "OnConflict" setter.
	EnterpriseBillUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseBillUpsert) SetCreatedAt(v time.Time) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateCreatedAt() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBillUpsert) SetUpdatedAt(v time.Time) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateUpdatedAt() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseBillUpsert) SetDeletedAt(v time.Time) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateDeletedAt() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseBillUpsert) ClearDeletedAt() *EnterpriseBillUpsert {
	u.SetNull(enterprisebill.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *EnterpriseBillUpsert) SetCreator(v *model.Modifier) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateCreator() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseBillUpsert) ClearCreator() *EnterpriseBillUpsert {
	u.SetNull(enterprisebill.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseBillUpsert) SetLastModifier(v *model.Modifier) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateLastModifier() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseBillUpsert) ClearLastModifier() *EnterpriseBillUpsert {
	u.SetNull(enterprisebill.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EnterpriseBillUpsert) SetRemark(v string) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateRemark() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseBillUpsert) ClearRemark() *EnterpriseBillUpsert {
	u.SetNull(enterprisebill.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseBillUpsert) SetRiderID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateRiderID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldRiderID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EnterpriseBillUpsert) SetSubscribeID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateSubscribeID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldSubscribeID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *EnterpriseBillUpsert) SetCityID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateCityID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldCityID)
	return u
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseBillUpsert) SetStationID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateStationID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *EnterpriseBillUpsert) ClearStationID() *EnterpriseBillUpsert {
	u.SetNull(enterprisebill.FieldStationID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseBillUpsert) SetEnterpriseID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateEnterpriseID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldEnterpriseID)
	return u
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseBillUpsert) SetStatementID(v uint64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldStatementID, v)
	return u
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateStatementID() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldStatementID)
	return u
}

// SetStart sets the "start" field.
func (u *EnterpriseBillUpsert) SetStart(v time.Time) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateStart() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldStart)
	return u
}

// SetEnd sets the "end" field.
func (u *EnterpriseBillUpsert) SetEnd(v time.Time) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateEnd() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldEnd)
	return u
}

// SetDays sets the "days" field.
func (u *EnterpriseBillUpsert) SetDays(v int) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateDays() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *EnterpriseBillUpsert) AddDays(v int) *EnterpriseBillUpsert {
	u.Add(enterprisebill.FieldDays, v)
	return u
}

// SetPrice sets the "price" field.
func (u *EnterpriseBillUpsert) SetPrice(v float64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdatePrice() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseBillUpsert) AddPrice(v float64) *EnterpriseBillUpsert {
	u.Add(enterprisebill.FieldPrice, v)
	return u
}

// SetCost sets the "cost" field.
func (u *EnterpriseBillUpsert) SetCost(v float64) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldCost, v)
	return u
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateCost() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldCost)
	return u
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseBillUpsert) AddCost(v float64) *EnterpriseBillUpsert {
	u.Add(enterprisebill.FieldCost, v)
	return u
}

// SetModel sets the "model" field.
func (u *EnterpriseBillUpsert) SetModel(v string) *EnterpriseBillUpsert {
	u.Set(enterprisebill.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterpriseBillUpsert) UpdateModel() *EnterpriseBillUpsert {
	u.SetExcluded(enterprisebill.FieldModel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterpriseBill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseBillUpsertOne) UpdateNewValues() *EnterpriseBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterprisebill.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(enterprisebill.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EnterpriseBill.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EnterpriseBillUpsertOne) Ignore() *EnterpriseBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseBillUpsertOne) DoNothing() *EnterpriseBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseBillCreate.OnConflict
// documentation for more info.
func (u *EnterpriseBillUpsertOne) Update(set func(*EnterpriseBillUpsert)) *EnterpriseBillUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseBillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseBillUpsertOne) SetCreatedAt(v time.Time) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateCreatedAt() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBillUpsertOne) SetUpdatedAt(v time.Time) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateUpdatedAt() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseBillUpsertOne) SetDeletedAt(v time.Time) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateDeletedAt() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseBillUpsertOne) ClearDeletedAt() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseBillUpsertOne) SetCreator(v *model.Modifier) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateCreator() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseBillUpsertOne) ClearCreator() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseBillUpsertOne) SetLastModifier(v *model.Modifier) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateLastModifier() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseBillUpsertOne) ClearLastModifier() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseBillUpsertOne) SetRemark(v string) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateRemark() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseBillUpsertOne) ClearRemark() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseBillUpsertOne) SetRiderID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateRiderID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EnterpriseBillUpsertOne) SetSubscribeID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateSubscribeID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *EnterpriseBillUpsertOne) SetCityID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateCityID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCityID()
	})
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseBillUpsertOne) SetStationID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateStationID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *EnterpriseBillUpsertOne) ClearStationID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearStationID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseBillUpsertOne) SetEnterpriseID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateEnterpriseID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseBillUpsertOne) SetStatementID(v uint64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStatementID(v)
	})
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateStatementID() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStatementID()
	})
}

// SetStart sets the "start" field.
func (u *EnterpriseBillUpsertOne) SetStart(v time.Time) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateStart() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *EnterpriseBillUpsertOne) SetEnd(v time.Time) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateEnd() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateEnd()
	})
}

// SetDays sets the "days" field.
func (u *EnterpriseBillUpsertOne) SetDays(v int) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *EnterpriseBillUpsertOne) AddDays(v int) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateDays() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateDays()
	})
}

// SetPrice sets the "price" field.
func (u *EnterpriseBillUpsertOne) SetPrice(v float64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseBillUpsertOne) AddPrice(v float64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdatePrice() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdatePrice()
	})
}

// SetCost sets the "cost" field.
func (u *EnterpriseBillUpsertOne) SetCost(v float64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseBillUpsertOne) AddCost(v float64) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateCost() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCost()
	})
}

// SetModel sets the "model" field.
func (u *EnterpriseBillUpsertOne) SetModel(v string) *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterpriseBillUpsertOne) UpdateModel() *EnterpriseBillUpsertOne {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *EnterpriseBillUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseBillCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseBillUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterpriseBillUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterpriseBillUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterpriseBillCreateBulk is the builder for creating many EnterpriseBill entities in bulk.
type EnterpriseBillCreateBulk struct {
	config
	builders []*EnterpriseBillCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterpriseBill entities in the database.
func (ebcb *EnterpriseBillCreateBulk) Save(ctx context.Context) ([]*EnterpriseBill, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ebcb.builders))
	nodes := make([]*EnterpriseBill, len(ebcb.builders))
	mutators := make([]Mutator, len(ebcb.builders))
	for i := range ebcb.builders {
		func(i int, root context.Context) {
			builder := ebcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterpriseBillMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ebcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ebcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ebcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ebcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ebcb *EnterpriseBillCreateBulk) SaveX(ctx context.Context) []*EnterpriseBill {
	v, err := ebcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebcb *EnterpriseBillCreateBulk) Exec(ctx context.Context) error {
	_, err := ebcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebcb *EnterpriseBillCreateBulk) ExecX(ctx context.Context) {
	if err := ebcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseBill.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseBillUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ebcb *EnterpriseBillCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterpriseBillUpsertBulk {
	ebcb.conflict = opts
	return &EnterpriseBillUpsertBulk{
		create: ebcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseBill.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ebcb *EnterpriseBillCreateBulk) OnConflictColumns(columns ...string) *EnterpriseBillUpsertBulk {
	ebcb.conflict = append(ebcb.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseBillUpsertBulk{
		create: ebcb,
	}
}

// EnterpriseBillUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterpriseBill nodes.
type EnterpriseBillUpsertBulk struct {
	create *EnterpriseBillCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterpriseBill.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseBillUpsertBulk) UpdateNewValues() *EnterpriseBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterprisebill.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(enterprisebill.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseBill.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EnterpriseBillUpsertBulk) Ignore() *EnterpriseBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseBillUpsertBulk) DoNothing() *EnterpriseBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseBillCreateBulk.OnConflict
// documentation for more info.
func (u *EnterpriseBillUpsertBulk) Update(set func(*EnterpriseBillUpsert)) *EnterpriseBillUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseBillUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseBillUpsertBulk) SetCreatedAt(v time.Time) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateCreatedAt() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseBillUpsertBulk) SetUpdatedAt(v time.Time) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateUpdatedAt() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseBillUpsertBulk) SetDeletedAt(v time.Time) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateDeletedAt() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseBillUpsertBulk) ClearDeletedAt() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseBillUpsertBulk) SetCreator(v *model.Modifier) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateCreator() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseBillUpsertBulk) ClearCreator() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseBillUpsertBulk) SetLastModifier(v *model.Modifier) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateLastModifier() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseBillUpsertBulk) ClearLastModifier() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseBillUpsertBulk) SetRemark(v string) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateRemark() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseBillUpsertBulk) ClearRemark() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseBillUpsertBulk) SetRiderID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateRiderID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EnterpriseBillUpsertBulk) SetSubscribeID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateSubscribeID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *EnterpriseBillUpsertBulk) SetCityID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateCityID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCityID()
	})
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseBillUpsertBulk) SetStationID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateStationID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *EnterpriseBillUpsertBulk) ClearStationID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.ClearStationID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseBillUpsertBulk) SetEnterpriseID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateEnterpriseID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseBillUpsertBulk) SetStatementID(v uint64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStatementID(v)
	})
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateStatementID() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStatementID()
	})
}

// SetStart sets the "start" field.
func (u *EnterpriseBillUpsertBulk) SetStart(v time.Time) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateStart() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *EnterpriseBillUpsertBulk) SetEnd(v time.Time) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateEnd() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateEnd()
	})
}

// SetDays sets the "days" field.
func (u *EnterpriseBillUpsertBulk) SetDays(v int) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *EnterpriseBillUpsertBulk) AddDays(v int) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateDays() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateDays()
	})
}

// SetPrice sets the "price" field.
func (u *EnterpriseBillUpsertBulk) SetPrice(v float64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseBillUpsertBulk) AddPrice(v float64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdatePrice() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdatePrice()
	})
}

// SetCost sets the "cost" field.
func (u *EnterpriseBillUpsertBulk) SetCost(v float64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseBillUpsertBulk) AddCost(v float64) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateCost() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateCost()
	})
}

// SetModel sets the "model" field.
func (u *EnterpriseBillUpsertBulk) SetModel(v string) *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *EnterpriseBillUpsertBulk) UpdateModel() *EnterpriseBillUpsertBulk {
	return u.Update(func(s *EnterpriseBillUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *EnterpriseBillUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterpriseBillCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseBillCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseBillUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
