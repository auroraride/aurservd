// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CouponAssemblyQuery is the builder for querying CouponAssembly entities.
type CouponAssemblyQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	inters       []Interceptor
	predicates   []predicate.CouponAssembly
	withTemplate *CouponTemplateQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CouponAssemblyQuery builder.
func (caq *CouponAssemblyQuery) Where(ps ...predicate.CouponAssembly) *CouponAssemblyQuery {
	caq.predicates = append(caq.predicates, ps...)
	return caq
}

// Limit the number of records to be returned by this query.
func (caq *CouponAssemblyQuery) Limit(limit int) *CouponAssemblyQuery {
	caq.limit = &limit
	return caq
}

// Offset to start from.
func (caq *CouponAssemblyQuery) Offset(offset int) *CouponAssemblyQuery {
	caq.offset = &offset
	return caq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (caq *CouponAssemblyQuery) Unique(unique bool) *CouponAssemblyQuery {
	caq.unique = &unique
	return caq
}

// Order specifies how the records should be ordered.
func (caq *CouponAssemblyQuery) Order(o ...OrderFunc) *CouponAssemblyQuery {
	caq.order = append(caq.order, o...)
	return caq
}

// QueryTemplate chains the current query on the "template" edge.
func (caq *CouponAssemblyQuery) QueryTemplate() *CouponTemplateQuery {
	query := (&CouponTemplateClient{config: caq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := caq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := caq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(couponassembly.Table, couponassembly.FieldID, selector),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, couponassembly.TemplateTable, couponassembly.TemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(caq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CouponAssembly entity from the query.
// Returns a *NotFoundError when no CouponAssembly was found.
func (caq *CouponAssemblyQuery) First(ctx context.Context) (*CouponAssembly, error) {
	nodes, err := caq.Limit(1).All(newQueryContext(ctx, TypeCouponAssembly, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{couponassembly.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (caq *CouponAssemblyQuery) FirstX(ctx context.Context) *CouponAssembly {
	node, err := caq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CouponAssembly ID from the query.
// Returns a *NotFoundError when no CouponAssembly ID was found.
func (caq *CouponAssemblyQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = caq.Limit(1).IDs(newQueryContext(ctx, TypeCouponAssembly, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{couponassembly.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (caq *CouponAssemblyQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := caq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CouponAssembly entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CouponAssembly entity is found.
// Returns a *NotFoundError when no CouponAssembly entities are found.
func (caq *CouponAssemblyQuery) Only(ctx context.Context) (*CouponAssembly, error) {
	nodes, err := caq.Limit(2).All(newQueryContext(ctx, TypeCouponAssembly, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{couponassembly.Label}
	default:
		return nil, &NotSingularError{couponassembly.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (caq *CouponAssemblyQuery) OnlyX(ctx context.Context) *CouponAssembly {
	node, err := caq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CouponAssembly ID in the query.
// Returns a *NotSingularError when more than one CouponAssembly ID is found.
// Returns a *NotFoundError when no entities are found.
func (caq *CouponAssemblyQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = caq.Limit(2).IDs(newQueryContext(ctx, TypeCouponAssembly, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{couponassembly.Label}
	default:
		err = &NotSingularError{couponassembly.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (caq *CouponAssemblyQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := caq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CouponAssemblies.
func (caq *CouponAssemblyQuery) All(ctx context.Context) ([]*CouponAssembly, error) {
	ctx = newQueryContext(ctx, TypeCouponAssembly, "All")
	if err := caq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*CouponAssembly, *CouponAssemblyQuery]()
	return withInterceptors[[]*CouponAssembly](ctx, caq, qr, caq.inters)
}

// AllX is like All, but panics if an error occurs.
func (caq *CouponAssemblyQuery) AllX(ctx context.Context) []*CouponAssembly {
	nodes, err := caq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CouponAssembly IDs.
func (caq *CouponAssemblyQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = newQueryContext(ctx, TypeCouponAssembly, "IDs")
	if err := caq.Select(couponassembly.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (caq *CouponAssemblyQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := caq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (caq *CouponAssemblyQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeCouponAssembly, "Count")
	if err := caq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, caq, querierCount[*CouponAssemblyQuery](), caq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (caq *CouponAssemblyQuery) CountX(ctx context.Context) int {
	count, err := caq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (caq *CouponAssemblyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeCouponAssembly, "Exist")
	switch _, err := caq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (caq *CouponAssemblyQuery) ExistX(ctx context.Context) bool {
	exist, err := caq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CouponAssemblyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (caq *CouponAssemblyQuery) Clone() *CouponAssemblyQuery {
	if caq == nil {
		return nil
	}
	return &CouponAssemblyQuery{
		config:       caq.config,
		limit:        caq.limit,
		offset:       caq.offset,
		order:        append([]OrderFunc{}, caq.order...),
		predicates:   append([]predicate.CouponAssembly{}, caq.predicates...),
		withTemplate: caq.withTemplate.Clone(),
		// clone intermediate query.
		sql:    caq.sql.Clone(),
		path:   caq.path,
		unique: caq.unique,
	}
}

// WithTemplate tells the query-builder to eager-load the nodes that are connected to
// the "template" edge. The optional arguments are used to configure the query builder of the edge.
func (caq *CouponAssemblyQuery) WithTemplate(opts ...func(*CouponTemplateQuery)) *CouponAssemblyQuery {
	query := (&CouponTemplateClient{config: caq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	caq.withTemplate = query
	return caq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CouponAssembly.Query().
//		GroupBy(couponassembly.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (caq *CouponAssemblyQuery) GroupBy(field string, fields ...string) *CouponAssemblyGroupBy {
	caq.fields = append([]string{field}, fields...)
	grbuild := &CouponAssemblyGroupBy{build: caq}
	grbuild.flds = &caq.fields
	grbuild.label = couponassembly.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CouponAssembly.Query().
//		Select(couponassembly.FieldCreatedAt).
//		Scan(ctx, &v)
func (caq *CouponAssemblyQuery) Select(fields ...string) *CouponAssemblySelect {
	caq.fields = append(caq.fields, fields...)
	sbuild := &CouponAssemblySelect{CouponAssemblyQuery: caq}
	sbuild.label = couponassembly.Label
	sbuild.flds, sbuild.scan = &caq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CouponAssemblySelect configured with the given aggregations.
func (caq *CouponAssemblyQuery) Aggregate(fns ...AggregateFunc) *CouponAssemblySelect {
	return caq.Select().Aggregate(fns...)
}

func (caq *CouponAssemblyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range caq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, caq); err != nil {
				return err
			}
		}
	}
	for _, f := range caq.fields {
		if !couponassembly.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if caq.path != nil {
		prev, err := caq.path(ctx)
		if err != nil {
			return err
		}
		caq.sql = prev
	}
	return nil
}

func (caq *CouponAssemblyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CouponAssembly, error) {
	var (
		nodes       = []*CouponAssembly{}
		_spec       = caq.querySpec()
		loadedTypes = [1]bool{
			caq.withTemplate != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*CouponAssembly).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &CouponAssembly{config: caq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(caq.modifiers) > 0 {
		_spec.Modifiers = caq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, caq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := caq.withTemplate; query != nil {
		if err := caq.loadTemplate(ctx, query, nodes, nil,
			func(n *CouponAssembly, e *CouponTemplate) { n.Edges.Template = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (caq *CouponAssemblyQuery) loadTemplate(ctx context.Context, query *CouponTemplateQuery, nodes []*CouponAssembly, init func(*CouponAssembly), assign func(*CouponAssembly, *CouponTemplate)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*CouponAssembly)
	for i := range nodes {
		fk := nodes[i].TemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(coupontemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (caq *CouponAssemblyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := caq.querySpec()
	if len(caq.modifiers) > 0 {
		_spec.Modifiers = caq.modifiers
	}
	_spec.Node.Columns = caq.fields
	if len(caq.fields) > 0 {
		_spec.Unique = caq.unique != nil && *caq.unique
	}
	return sqlgraph.CountNodes(ctx, caq.driver, _spec)
}

func (caq *CouponAssemblyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponassembly.Table,
			Columns: couponassembly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponassembly.FieldID,
			},
		},
		From:   caq.sql,
		Unique: true,
	}
	if unique := caq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := caq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponassembly.FieldID)
		for i := range fields {
			if fields[i] != couponassembly.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := caq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := caq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := caq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := caq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (caq *CouponAssemblyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(caq.driver.Dialect())
	t1 := builder.Table(couponassembly.Table)
	columns := caq.fields
	if len(columns) == 0 {
		columns = couponassembly.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if caq.sql != nil {
		selector = caq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if caq.unique != nil && *caq.unique {
		selector.Distinct()
	}
	for _, m := range caq.modifiers {
		m(selector)
	}
	for _, p := range caq.predicates {
		p(selector)
	}
	for _, p := range caq.order {
		p(selector)
	}
	if offset := caq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := caq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (caq *CouponAssemblyQuery) Modify(modifiers ...func(s *sql.Selector)) *CouponAssemblySelect {
	caq.modifiers = append(caq.modifiers, modifiers...)
	return caq.Select()
}

// CouponAssemblyGroupBy is the group-by builder for CouponAssembly entities.
type CouponAssemblyGroupBy struct {
	selector
	build *CouponAssemblyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cagb *CouponAssemblyGroupBy) Aggregate(fns ...AggregateFunc) *CouponAssemblyGroupBy {
	cagb.fns = append(cagb.fns, fns...)
	return cagb
}

// Scan applies the selector query and scans the result into the given value.
func (cagb *CouponAssemblyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeCouponAssembly, "GroupBy")
	if err := cagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CouponAssemblyQuery, *CouponAssemblyGroupBy](ctx, cagb.build, cagb, cagb.build.inters, v)
}

func (cagb *CouponAssemblyGroupBy) sqlScan(ctx context.Context, root *CouponAssemblyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cagb.fns))
	for _, fn := range cagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cagb.flds)+len(cagb.fns))
		for _, f := range *cagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CouponAssemblySelect is the builder for selecting fields of CouponAssembly entities.
type CouponAssemblySelect struct {
	*CouponAssemblyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cas *CouponAssemblySelect) Aggregate(fns ...AggregateFunc) *CouponAssemblySelect {
	cas.fns = append(cas.fns, fns...)
	return cas
}

// Scan applies the selector query and scans the result into the given value.
func (cas *CouponAssemblySelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeCouponAssembly, "Select")
	if err := cas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CouponAssemblyQuery, *CouponAssemblySelect](ctx, cas.CouponAssemblyQuery, cas, cas.inters, v)
}

func (cas *CouponAssemblySelect) sqlScan(ctx context.Context, root *CouponAssemblyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cas.fns))
	for _, fn := range cas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cas *CouponAssemblySelect) Modify(modifiers ...func(s *sql.Selector)) *CouponAssemblySelect {
	cas.modifiers = append(cas.modifiers, modifiers...)
	return cas
}
