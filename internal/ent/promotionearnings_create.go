// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionEarningsCreate is the builder for creating a PromotionEarnings entity.
type PromotionEarningsCreate struct {
	config
	mutation *PromotionEarningsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pec *PromotionEarningsCreate) SetCreatedAt(t time.Time) *PromotionEarningsCreate {
	pec.mutation.SetCreatedAt(t)
	return pec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableCreatedAt(t *time.Time) *PromotionEarningsCreate {
	if t != nil {
		pec.SetCreatedAt(*t)
	}
	return pec
}

// SetUpdatedAt sets the "updated_at" field.
func (pec *PromotionEarningsCreate) SetUpdatedAt(t time.Time) *PromotionEarningsCreate {
	pec.mutation.SetUpdatedAt(t)
	return pec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableUpdatedAt(t *time.Time) *PromotionEarningsCreate {
	if t != nil {
		pec.SetUpdatedAt(*t)
	}
	return pec
}

// SetDeletedAt sets the "deleted_at" field.
func (pec *PromotionEarningsCreate) SetDeletedAt(t time.Time) *PromotionEarningsCreate {
	pec.mutation.SetDeletedAt(t)
	return pec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableDeletedAt(t *time.Time) *PromotionEarningsCreate {
	if t != nil {
		pec.SetDeletedAt(*t)
	}
	return pec
}

// SetCreator sets the "creator" field.
func (pec *PromotionEarningsCreate) SetCreator(m *model.Modifier) *PromotionEarningsCreate {
	pec.mutation.SetCreator(m)
	return pec
}

// SetLastModifier sets the "last_modifier" field.
func (pec *PromotionEarningsCreate) SetLastModifier(m *model.Modifier) *PromotionEarningsCreate {
	pec.mutation.SetLastModifier(m)
	return pec
}

// SetRemark sets the "remark" field.
func (pec *PromotionEarningsCreate) SetRemark(s string) *PromotionEarningsCreate {
	pec.mutation.SetRemark(s)
	return pec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableRemark(s *string) *PromotionEarningsCreate {
	if s != nil {
		pec.SetRemark(*s)
	}
	return pec
}

// SetCommissionID sets the "commission_id" field.
func (pec *PromotionEarningsCreate) SetCommissionID(u uint64) *PromotionEarningsCreate {
	pec.mutation.SetCommissionID(u)
	return pec
}

// SetMemberID sets the "member_id" field.
func (pec *PromotionEarningsCreate) SetMemberID(u uint64) *PromotionEarningsCreate {
	pec.mutation.SetMemberID(u)
	return pec
}

// SetRiderID sets the "rider_id" field.
func (pec *PromotionEarningsCreate) SetRiderID(u uint64) *PromotionEarningsCreate {
	pec.mutation.SetRiderID(u)
	return pec
}

// SetOrderID sets the "order_id" field.
func (pec *PromotionEarningsCreate) SetOrderID(u uint64) *PromotionEarningsCreate {
	pec.mutation.SetOrderID(u)
	return pec
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableOrderID(u *uint64) *PromotionEarningsCreate {
	if u != nil {
		pec.SetOrderID(*u)
	}
	return pec
}

// SetPlanID sets the "plan_id" field.
func (pec *PromotionEarningsCreate) SetPlanID(u uint64) *PromotionEarningsCreate {
	pec.mutation.SetPlanID(u)
	return pec
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillablePlanID(u *uint64) *PromotionEarningsCreate {
	if u != nil {
		pec.SetPlanID(*u)
	}
	return pec
}

// SetStatus sets the "status" field.
func (pec *PromotionEarningsCreate) SetStatus(u uint8) *PromotionEarningsCreate {
	pec.mutation.SetStatus(u)
	return pec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableStatus(u *uint8) *PromotionEarningsCreate {
	if u != nil {
		pec.SetStatus(*u)
	}
	return pec
}

// SetAmount sets the "amount" field.
func (pec *PromotionEarningsCreate) SetAmount(f float64) *PromotionEarningsCreate {
	pec.mutation.SetAmount(f)
	return pec
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableAmount(f *float64) *PromotionEarningsCreate {
	if f != nil {
		pec.SetAmount(*f)
	}
	return pec
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (pec *PromotionEarningsCreate) SetCommissionRuleKey(s string) *PromotionEarningsCreate {
	pec.mutation.SetCommissionRuleKey(s)
	return pec
}

// SetNillableCommissionRuleKey sets the "commission_rule_key" field if the given value is not nil.
func (pec *PromotionEarningsCreate) SetNillableCommissionRuleKey(s *string) *PromotionEarningsCreate {
	if s != nil {
		pec.SetCommissionRuleKey(*s)
	}
	return pec
}

// SetCommission sets the "commission" edge to the PromotionCommission entity.
func (pec *PromotionEarningsCreate) SetCommission(p *PromotionCommission) *PromotionEarningsCreate {
	return pec.SetCommissionID(p.ID)
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pec *PromotionEarningsCreate) SetMember(p *PromotionMember) *PromotionEarningsCreate {
	return pec.SetMemberID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (pec *PromotionEarningsCreate) SetRider(r *Rider) *PromotionEarningsCreate {
	return pec.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (pec *PromotionEarningsCreate) SetOrder(o *Order) *PromotionEarningsCreate {
	return pec.SetOrderID(o.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (pec *PromotionEarningsCreate) SetPlan(p *Plan) *PromotionEarningsCreate {
	return pec.SetPlanID(p.ID)
}

// Mutation returns the PromotionEarningsMutation object of the builder.
func (pec *PromotionEarningsCreate) Mutation() *PromotionEarningsMutation {
	return pec.mutation
}

// Save creates the PromotionEarnings in the database.
func (pec *PromotionEarningsCreate) Save(ctx context.Context) (*PromotionEarnings, error) {
	if err := pec.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pec.sqlSave, pec.mutation, pec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pec *PromotionEarningsCreate) SaveX(ctx context.Context) *PromotionEarnings {
	v, err := pec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pec *PromotionEarningsCreate) Exec(ctx context.Context) error {
	_, err := pec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pec *PromotionEarningsCreate) ExecX(ctx context.Context) {
	if err := pec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pec *PromotionEarningsCreate) defaults() error {
	if _, ok := pec.mutation.CreatedAt(); !ok {
		if promotionearnings.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionearnings.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionearnings.DefaultCreatedAt()
		pec.mutation.SetCreatedAt(v)
	}
	if _, ok := pec.mutation.UpdatedAt(); !ok {
		if promotionearnings.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionearnings.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionearnings.DefaultUpdatedAt()
		pec.mutation.SetUpdatedAt(v)
	}
	if _, ok := pec.mutation.Status(); !ok {
		v := promotionearnings.DefaultStatus
		pec.mutation.SetStatus(v)
	}
	if _, ok := pec.mutation.Amount(); !ok {
		v := promotionearnings.DefaultAmount
		pec.mutation.SetAmount(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pec *PromotionEarningsCreate) check() error {
	if _, ok := pec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionEarnings.created_at"`)}
	}
	if _, ok := pec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionEarnings.updated_at"`)}
	}
	if _, ok := pec.mutation.CommissionID(); !ok {
		return &ValidationError{Name: "commission_id", err: errors.New(`ent: missing required field "PromotionEarnings.commission_id"`)}
	}
	if _, ok := pec.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "PromotionEarnings.member_id"`)}
	}
	if _, ok := pec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "PromotionEarnings.rider_id"`)}
	}
	if _, ok := pec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PromotionEarnings.status"`)}
	}
	if _, ok := pec.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PromotionEarnings.amount"`)}
	}
	if _, ok := pec.mutation.CommissionID(); !ok {
		return &ValidationError{Name: "commission", err: errors.New(`ent: missing required edge "PromotionEarnings.commission"`)}
	}
	if _, ok := pec.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "PromotionEarnings.member"`)}
	}
	if _, ok := pec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "PromotionEarnings.rider"`)}
	}
	return nil
}

func (pec *PromotionEarningsCreate) sqlSave(ctx context.Context) (*PromotionEarnings, error) {
	if err := pec.check(); err != nil {
		return nil, err
	}
	_node, _spec := pec.createSpec()
	if err := sqlgraph.CreateNode(ctx, pec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pec.mutation.id = &_node.ID
	pec.mutation.done = true
	return _node, nil
}

func (pec *PromotionEarningsCreate) createSpec() (*PromotionEarnings, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionEarnings{config: pec.config}
		_spec = sqlgraph.NewCreateSpec(promotionearnings.Table, sqlgraph.NewFieldSpec(promotionearnings.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pec.conflict
	if value, ok := pec.mutation.CreatedAt(); ok {
		_spec.SetField(promotionearnings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pec.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionearnings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pec.mutation.DeletedAt(); ok {
		_spec.SetField(promotionearnings.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pec.mutation.Creator(); ok {
		_spec.SetField(promotionearnings.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pec.mutation.LastModifier(); ok {
		_spec.SetField(promotionearnings.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pec.mutation.Remark(); ok {
		_spec.SetField(promotionearnings.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pec.mutation.Status(); ok {
		_spec.SetField(promotionearnings.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := pec.mutation.Amount(); ok {
		_spec.SetField(promotionearnings.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pec.mutation.CommissionRuleKey(); ok {
		_spec.SetField(promotionearnings.FieldCommissionRuleKey, field.TypeString, value)
		_node.CommissionRuleKey = value
	}
	if nodes := pec.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommissionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pec.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pec.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pec.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.OrderTable,
			Columns: []string{promotionearnings.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pec.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.PlanTable,
			Columns: []string{promotionearnings.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionEarnings.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionEarningsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pec *PromotionEarningsCreate) OnConflict(opts ...sql.ConflictOption) *PromotionEarningsUpsertOne {
	pec.conflict = opts
	return &PromotionEarningsUpsertOne{
		create: pec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pec *PromotionEarningsCreate) OnConflictColumns(columns ...string) *PromotionEarningsUpsertOne {
	pec.conflict = append(pec.conflict, sql.ConflictColumns(columns...))
	return &PromotionEarningsUpsertOne{
		create: pec,
	}
}

type (
	// PromotionEarningsUpsertOne is the builder for "upsert"-ing
	//  one PromotionEarnings node.
	PromotionEarningsUpsertOne struct {
		create *PromotionEarningsCreate
	}

	// PromotionEarningsUpsert is the "OnConflict" setter.
	PromotionEarningsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionEarningsUpsert) SetUpdatedAt(v time.Time) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateUpdatedAt() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionEarningsUpsert) SetDeletedAt(v time.Time) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateDeletedAt() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionEarningsUpsert) ClearDeletedAt() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionEarningsUpsert) SetLastModifier(v *model.Modifier) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateLastModifier() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionEarningsUpsert) ClearLastModifier() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionEarningsUpsert) SetRemark(v string) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateRemark() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionEarningsUpsert) ClearRemark() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldRemark)
	return u
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionEarningsUpsert) SetCommissionID(v uint64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldCommissionID, v)
	return u
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateCommissionID() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldCommissionID)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionEarningsUpsert) SetMemberID(v uint64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateMemberID() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldMemberID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionEarningsUpsert) SetRiderID(v uint64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateRiderID() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldRiderID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PromotionEarningsUpsert) SetOrderID(v uint64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateOrderID() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PromotionEarningsUpsert) ClearOrderID() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldOrderID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionEarningsUpsert) SetPlanID(v uint64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdatePlanID() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionEarningsUpsert) ClearPlanID() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldPlanID)
	return u
}

// SetStatus sets the "status" field.
func (u *PromotionEarningsUpsert) SetStatus(v uint8) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateStatus() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PromotionEarningsUpsert) AddStatus(v uint8) *PromotionEarningsUpsert {
	u.Add(promotionearnings.FieldStatus, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *PromotionEarningsUpsert) SetAmount(v float64) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateAmount() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *PromotionEarningsUpsert) AddAmount(v float64) *PromotionEarningsUpsert {
	u.Add(promotionearnings.FieldAmount, v)
	return u
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (u *PromotionEarningsUpsert) SetCommissionRuleKey(v string) *PromotionEarningsUpsert {
	u.Set(promotionearnings.FieldCommissionRuleKey, v)
	return u
}

// UpdateCommissionRuleKey sets the "commission_rule_key" field to the value that was provided on create.
func (u *PromotionEarningsUpsert) UpdateCommissionRuleKey() *PromotionEarningsUpsert {
	u.SetExcluded(promotionearnings.FieldCommissionRuleKey)
	return u
}

// ClearCommissionRuleKey clears the value of the "commission_rule_key" field.
func (u *PromotionEarningsUpsert) ClearCommissionRuleKey() *PromotionEarningsUpsert {
	u.SetNull(promotionearnings.FieldCommissionRuleKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionEarningsUpsertOne) UpdateNewValues() *PromotionEarningsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionearnings.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionearnings.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionEarningsUpsertOne) Ignore() *PromotionEarningsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionEarningsUpsertOne) DoNothing() *PromotionEarningsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionEarningsCreate.OnConflict
// documentation for more info.
func (u *PromotionEarningsUpsertOne) Update(set func(*PromotionEarningsUpsert)) *PromotionEarningsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionEarningsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionEarningsUpsertOne) SetUpdatedAt(v time.Time) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateUpdatedAt() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionEarningsUpsertOne) SetDeletedAt(v time.Time) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateDeletedAt() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionEarningsUpsertOne) ClearDeletedAt() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionEarningsUpsertOne) SetLastModifier(v *model.Modifier) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateLastModifier() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionEarningsUpsertOne) ClearLastModifier() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionEarningsUpsertOne) SetRemark(v string) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateRemark() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionEarningsUpsertOne) ClearRemark() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearRemark()
	})
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionEarningsUpsertOne) SetCommissionID(v uint64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetCommissionID(v)
	})
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateCommissionID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateCommissionID()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionEarningsUpsertOne) SetMemberID(v uint64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateMemberID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateMemberID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionEarningsUpsertOne) SetRiderID(v uint64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateRiderID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PromotionEarningsUpsertOne) SetOrderID(v uint64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateOrderID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PromotionEarningsUpsertOne) ClearOrderID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearOrderID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionEarningsUpsertOne) SetPlanID(v uint64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdatePlanID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionEarningsUpsertOne) ClearPlanID() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearPlanID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionEarningsUpsertOne) SetStatus(v uint8) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionEarningsUpsertOne) AddStatus(v uint8) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateStatus() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateStatus()
	})
}

// SetAmount sets the "amount" field.
func (u *PromotionEarningsUpsertOne) SetAmount(v float64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PromotionEarningsUpsertOne) AddAmount(v float64) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateAmount() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateAmount()
	})
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (u *PromotionEarningsUpsertOne) SetCommissionRuleKey(v string) *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetCommissionRuleKey(v)
	})
}

// UpdateCommissionRuleKey sets the "commission_rule_key" field to the value that was provided on create.
func (u *PromotionEarningsUpsertOne) UpdateCommissionRuleKey() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateCommissionRuleKey()
	})
}

// ClearCommissionRuleKey clears the value of the "commission_rule_key" field.
func (u *PromotionEarningsUpsertOne) ClearCommissionRuleKey() *PromotionEarningsUpsertOne {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearCommissionRuleKey()
	})
}

// Exec executes the query.
func (u *PromotionEarningsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionEarningsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionEarningsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionEarningsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionEarningsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionEarningsCreateBulk is the builder for creating many PromotionEarnings entities in bulk.
type PromotionEarningsCreateBulk struct {
	config
	builders []*PromotionEarningsCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionEarnings entities in the database.
func (pecb *PromotionEarningsCreateBulk) Save(ctx context.Context) ([]*PromotionEarnings, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pecb.builders))
	nodes := make([]*PromotionEarnings, len(pecb.builders))
	mutators := make([]Mutator, len(pecb.builders))
	for i := range pecb.builders {
		func(i int, root context.Context) {
			builder := pecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionEarningsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pecb *PromotionEarningsCreateBulk) SaveX(ctx context.Context) []*PromotionEarnings {
	v, err := pecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pecb *PromotionEarningsCreateBulk) Exec(ctx context.Context) error {
	_, err := pecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pecb *PromotionEarningsCreateBulk) ExecX(ctx context.Context) {
	if err := pecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionEarnings.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionEarningsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pecb *PromotionEarningsCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionEarningsUpsertBulk {
	pecb.conflict = opts
	return &PromotionEarningsUpsertBulk{
		create: pecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pecb *PromotionEarningsCreateBulk) OnConflictColumns(columns ...string) *PromotionEarningsUpsertBulk {
	pecb.conflict = append(pecb.conflict, sql.ConflictColumns(columns...))
	return &PromotionEarningsUpsertBulk{
		create: pecb,
	}
}

// PromotionEarningsUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionEarnings nodes.
type PromotionEarningsUpsertBulk struct {
	create *PromotionEarningsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionEarningsUpsertBulk) UpdateNewValues() *PromotionEarningsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionearnings.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionearnings.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionEarnings.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionEarningsUpsertBulk) Ignore() *PromotionEarningsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionEarningsUpsertBulk) DoNothing() *PromotionEarningsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionEarningsCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionEarningsUpsertBulk) Update(set func(*PromotionEarningsUpsert)) *PromotionEarningsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionEarningsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionEarningsUpsertBulk) SetUpdatedAt(v time.Time) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateUpdatedAt() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionEarningsUpsertBulk) SetDeletedAt(v time.Time) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateDeletedAt() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionEarningsUpsertBulk) ClearDeletedAt() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionEarningsUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateLastModifier() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionEarningsUpsertBulk) ClearLastModifier() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionEarningsUpsertBulk) SetRemark(v string) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateRemark() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionEarningsUpsertBulk) ClearRemark() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearRemark()
	})
}

// SetCommissionID sets the "commission_id" field.
func (u *PromotionEarningsUpsertBulk) SetCommissionID(v uint64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetCommissionID(v)
	})
}

// UpdateCommissionID sets the "commission_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateCommissionID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateCommissionID()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionEarningsUpsertBulk) SetMemberID(v uint64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateMemberID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateMemberID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionEarningsUpsertBulk) SetRiderID(v uint64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateRiderID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PromotionEarningsUpsertBulk) SetOrderID(v uint64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateOrderID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PromotionEarningsUpsertBulk) ClearOrderID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearOrderID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *PromotionEarningsUpsertBulk) SetPlanID(v uint64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdatePlanID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *PromotionEarningsUpsertBulk) ClearPlanID() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearPlanID()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionEarningsUpsertBulk) SetStatus(v uint8) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionEarningsUpsertBulk) AddStatus(v uint8) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateStatus() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateStatus()
	})
}

// SetAmount sets the "amount" field.
func (u *PromotionEarningsUpsertBulk) SetAmount(v float64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *PromotionEarningsUpsertBulk) AddAmount(v float64) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateAmount() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateAmount()
	})
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (u *PromotionEarningsUpsertBulk) SetCommissionRuleKey(v string) *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.SetCommissionRuleKey(v)
	})
}

// UpdateCommissionRuleKey sets the "commission_rule_key" field to the value that was provided on create.
func (u *PromotionEarningsUpsertBulk) UpdateCommissionRuleKey() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.UpdateCommissionRuleKey()
	})
}

// ClearCommissionRuleKey clears the value of the "commission_rule_key" field.
func (u *PromotionEarningsUpsertBulk) ClearCommissionRuleKey() *PromotionEarningsUpsertBulk {
	return u.Update(func(s *PromotionEarningsUpsert) {
		s.ClearCommissionRuleKey()
	})
}

// Exec executes the query.
func (u *PromotionEarningsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionEarningsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionEarningsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionEarningsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
