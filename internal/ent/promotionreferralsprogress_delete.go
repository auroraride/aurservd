// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionreferralsprogress"
)

// PromotionReferralsProgressDelete is the builder for deleting a PromotionReferralsProgress entity.
type PromotionReferralsProgressDelete struct {
	config
	hooks    []Hook
	mutation *PromotionReferralsProgressMutation
}

// Where appends a list predicates to the PromotionReferralsProgressDelete builder.
func (prpd *PromotionReferralsProgressDelete) Where(ps ...predicate.PromotionReferralsProgress) *PromotionReferralsProgressDelete {
	prpd.mutation.Where(ps...)
	return prpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prpd *PromotionReferralsProgressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prpd.sqlExec, prpd.mutation, prpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prpd *PromotionReferralsProgressDelete) ExecX(ctx context.Context) int {
	n, err := prpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prpd *PromotionReferralsProgressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotionreferralsprogress.Table, sqlgraph.NewFieldSpec(promotionreferralsprogress.FieldID, field.TypeUint64))
	if ps := prpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prpd.mutation.done = true
	return affected, err
}

// PromotionReferralsProgressDeleteOne is the builder for deleting a single PromotionReferralsProgress entity.
type PromotionReferralsProgressDeleteOne struct {
	prpd *PromotionReferralsProgressDelete
}

// Where appends a list predicates to the PromotionReferralsProgressDelete builder.
func (prpdo *PromotionReferralsProgressDeleteOne) Where(ps ...predicate.PromotionReferralsProgress) *PromotionReferralsProgressDeleteOne {
	prpdo.prpd.mutation.Where(ps...)
	return prpdo
}

// Exec executes the deletion query.
func (prpdo *PromotionReferralsProgressDeleteOne) Exec(ctx context.Context) error {
	n, err := prpdo.prpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotionreferralsprogress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prpdo *PromotionReferralsProgressDeleteOne) ExecX(ctx context.Context) {
	if err := prpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
