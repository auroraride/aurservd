// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseBatterySwapUpdate is the builder for updating EnterpriseBatterySwap entities.
type EnterpriseBatterySwapUpdate struct {
	config
	hooks     []Hook
	mutation  *EnterpriseBatterySwapMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EnterpriseBatterySwapUpdate builder.
func (ebsu *EnterpriseBatterySwapUpdate) Where(ps ...predicate.EnterpriseBatterySwap) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.Where(ps...)
	return ebsu
}

// SetUpdatedAt sets the "updated_at" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetUpdatedAt(t time.Time) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetUpdatedAt(t)
	return ebsu
}

// SetExchangeID sets the "exchange_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetExchangeID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetExchangeID(u)
	return ebsu
}

// SetCabinetID sets the "cabinet_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetCabinetID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetCabinetID(u)
	return ebsu
}

// SetPutinID sets the "putin_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutinID(u)
	return ebsu
}

// SetPutinSn sets the "putin_sn" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinSn(s string) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutinSn(s)
	return ebsu
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinEnterpriseID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutinEnterpriseID(u)
	return ebsu
}

// SetNillablePutinEnterpriseID sets the "putin_enterprise_id" field if the given value is not nil.
func (ebsu *EnterpriseBatterySwapUpdate) SetNillablePutinEnterpriseID(u *uint64) *EnterpriseBatterySwapUpdate {
	if u != nil {
		ebsu.SetPutinEnterpriseID(*u)
	}
	return ebsu
}

// ClearPutinEnterpriseID clears the value of the "putin_enterprise_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutinEnterpriseID() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutinEnterpriseID()
	return ebsu
}

// SetPutinStationID sets the "putin_station_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinStationID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutinStationID(u)
	return ebsu
}

// SetNillablePutinStationID sets the "putin_station_id" field if the given value is not nil.
func (ebsu *EnterpriseBatterySwapUpdate) SetNillablePutinStationID(u *uint64) *EnterpriseBatterySwapUpdate {
	if u != nil {
		ebsu.SetPutinStationID(*u)
	}
	return ebsu
}

// ClearPutinStationID clears the value of the "putin_station_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutinStationID() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutinStationID()
	return ebsu
}

// SetPutoutID sets the "putout_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutoutID(u)
	return ebsu
}

// SetPutoutSn sets the "putout_sn" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutSn(s string) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutoutSn(s)
	return ebsu
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutEnterpriseID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutoutEnterpriseID(u)
	return ebsu
}

// SetNillablePutoutEnterpriseID sets the "putout_enterprise_id" field if the given value is not nil.
func (ebsu *EnterpriseBatterySwapUpdate) SetNillablePutoutEnterpriseID(u *uint64) *EnterpriseBatterySwapUpdate {
	if u != nil {
		ebsu.SetPutoutEnterpriseID(*u)
	}
	return ebsu
}

// ClearPutoutEnterpriseID clears the value of the "putout_enterprise_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutoutEnterpriseID() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutoutEnterpriseID()
	return ebsu
}

// SetPutoutStationID sets the "putout_station_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutStationID(u uint64) *EnterpriseBatterySwapUpdate {
	ebsu.mutation.SetPutoutStationID(u)
	return ebsu
}

// SetNillablePutoutStationID sets the "putout_station_id" field if the given value is not nil.
func (ebsu *EnterpriseBatterySwapUpdate) SetNillablePutoutStationID(u *uint64) *EnterpriseBatterySwapUpdate {
	if u != nil {
		ebsu.SetPutoutStationID(*u)
	}
	return ebsu
}

// ClearPutoutStationID clears the value of the "putout_station_id" field.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutoutStationID() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutoutStationID()
	return ebsu
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetExchange(e *Exchange) *EnterpriseBatterySwapUpdate {
	return ebsu.SetExchangeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetCabinet(c *Cabinet) *EnterpriseBatterySwapUpdate {
	return ebsu.SetCabinetID(c.ID)
}

// SetPutin sets the "putin" edge to the Battery entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutin(b *Battery) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutinID(b.ID)
}

// SetPutinEnterprise sets the "putin_enterprise" edge to the Enterprise entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinEnterprise(e *Enterprise) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutinEnterpriseID(e.ID)
}

// SetPutinStation sets the "putin_station" edge to the EnterpriseStation entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutinStation(e *EnterpriseStation) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutinStationID(e.ID)
}

// SetPutout sets the "putout" edge to the Battery entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutout(b *Battery) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutoutID(b.ID)
}

// SetPutoutEnterprise sets the "putout_enterprise" edge to the Enterprise entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutEnterprise(e *Enterprise) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutoutEnterpriseID(e.ID)
}

// SetPutoutStation sets the "putout_station" edge to the EnterpriseStation entity.
func (ebsu *EnterpriseBatterySwapUpdate) SetPutoutStation(e *EnterpriseStation) *EnterpriseBatterySwapUpdate {
	return ebsu.SetPutoutStationID(e.ID)
}

// Mutation returns the EnterpriseBatterySwapMutation object of the builder.
func (ebsu *EnterpriseBatterySwapUpdate) Mutation() *EnterpriseBatterySwapMutation {
	return ebsu.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearExchange() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearExchange()
	return ebsu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearCabinet() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearCabinet()
	return ebsu
}

// ClearPutin clears the "putin" edge to the Battery entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutin() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutin()
	return ebsu
}

// ClearPutinEnterprise clears the "putin_enterprise" edge to the Enterprise entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutinEnterprise() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutinEnterprise()
	return ebsu
}

// ClearPutinStation clears the "putin_station" edge to the EnterpriseStation entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutinStation() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutinStation()
	return ebsu
}

// ClearPutout clears the "putout" edge to the Battery entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutout() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutout()
	return ebsu
}

// ClearPutoutEnterprise clears the "putout_enterprise" edge to the Enterprise entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutoutEnterprise() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutoutEnterprise()
	return ebsu
}

// ClearPutoutStation clears the "putout_station" edge to the EnterpriseStation entity.
func (ebsu *EnterpriseBatterySwapUpdate) ClearPutoutStation() *EnterpriseBatterySwapUpdate {
	ebsu.mutation.ClearPutoutStation()
	return ebsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ebsu *EnterpriseBatterySwapUpdate) Save(ctx context.Context) (int, error) {
	ebsu.defaults()
	return withHooks(ctx, ebsu.sqlSave, ebsu.mutation, ebsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebsu *EnterpriseBatterySwapUpdate) SaveX(ctx context.Context) int {
	affected, err := ebsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ebsu *EnterpriseBatterySwapUpdate) Exec(ctx context.Context) error {
	_, err := ebsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebsu *EnterpriseBatterySwapUpdate) ExecX(ctx context.Context) {
	if err := ebsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebsu *EnterpriseBatterySwapUpdate) defaults() {
	if _, ok := ebsu.mutation.UpdatedAt(); !ok {
		v := enterprisebatteryswap.UpdateDefaultUpdatedAt()
		ebsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebsu *EnterpriseBatterySwapUpdate) check() error {
	if _, ok := ebsu.mutation.ExchangeID(); ebsu.mutation.ExchangeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.exchange"`)
	}
	if _, ok := ebsu.mutation.CabinetID(); ebsu.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.cabinet"`)
	}
	if _, ok := ebsu.mutation.PutinID(); ebsu.mutation.PutinCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.putin"`)
	}
	if _, ok := ebsu.mutation.PutoutID(); ebsu.mutation.PutoutCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.putout"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebsu *EnterpriseBatterySwapUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterpriseBatterySwapUpdate {
	ebsu.modifiers = append(ebsu.modifiers, modifiers...)
	return ebsu
}

func (ebsu *EnterpriseBatterySwapUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ebsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterprisebatteryswap.Table, enterprisebatteryswap.Columns, sqlgraph.NewFieldSpec(enterprisebatteryswap.FieldID, field.TypeUint64))
	if ps := ebsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebsu.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisebatteryswap.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebsu.mutation.PutinSn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutinSn, field.TypeString, value)
	}
	if value, ok := ebsu.mutation.PutoutSn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutoutSn, field.TypeString, value)
	}
	if ebsu.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinTable,
			Columns: []string{enterprisebatteryswap.PutinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinTable,
			Columns: []string{enterprisebatteryswap.PutinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutinEnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutinEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutinStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutinStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutTable,
			Columns: []string{enterprisebatteryswap.PutoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutTable,
			Columns: []string{enterprisebatteryswap.PutoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutoutEnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutoutEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsu.mutation.PutoutStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsu.mutation.PutoutStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ebsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisebatteryswap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ebsu.mutation.done = true
	return n, nil
}

// EnterpriseBatterySwapUpdateOne is the builder for updating a single EnterpriseBatterySwap entity.
type EnterpriseBatterySwapUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EnterpriseBatterySwapMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetUpdatedAt(t)
	return ebsuo
}

// SetExchangeID sets the "exchange_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetExchangeID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetExchangeID(u)
	return ebsuo
}

// SetCabinetID sets the "cabinet_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetCabinetID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetCabinetID(u)
	return ebsuo
}

// SetPutinID sets the "putin_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutinID(u)
	return ebsuo
}

// SetPutinSn sets the "putin_sn" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinSn(s string) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutinSn(s)
	return ebsuo
}

// SetPutinEnterpriseID sets the "putin_enterprise_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinEnterpriseID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutinEnterpriseID(u)
	return ebsuo
}

// SetNillablePutinEnterpriseID sets the "putin_enterprise_id" field if the given value is not nil.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetNillablePutinEnterpriseID(u *uint64) *EnterpriseBatterySwapUpdateOne {
	if u != nil {
		ebsuo.SetPutinEnterpriseID(*u)
	}
	return ebsuo
}

// ClearPutinEnterpriseID clears the value of the "putin_enterprise_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutinEnterpriseID() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutinEnterpriseID()
	return ebsuo
}

// SetPutinStationID sets the "putin_station_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinStationID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutinStationID(u)
	return ebsuo
}

// SetNillablePutinStationID sets the "putin_station_id" field if the given value is not nil.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetNillablePutinStationID(u *uint64) *EnterpriseBatterySwapUpdateOne {
	if u != nil {
		ebsuo.SetPutinStationID(*u)
	}
	return ebsuo
}

// ClearPutinStationID clears the value of the "putin_station_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutinStationID() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutinStationID()
	return ebsuo
}

// SetPutoutID sets the "putout_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutoutID(u)
	return ebsuo
}

// SetPutoutSn sets the "putout_sn" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutSn(s string) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutoutSn(s)
	return ebsuo
}

// SetPutoutEnterpriseID sets the "putout_enterprise_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutEnterpriseID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutoutEnterpriseID(u)
	return ebsuo
}

// SetNillablePutoutEnterpriseID sets the "putout_enterprise_id" field if the given value is not nil.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetNillablePutoutEnterpriseID(u *uint64) *EnterpriseBatterySwapUpdateOne {
	if u != nil {
		ebsuo.SetPutoutEnterpriseID(*u)
	}
	return ebsuo
}

// ClearPutoutEnterpriseID clears the value of the "putout_enterprise_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutoutEnterpriseID() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutoutEnterpriseID()
	return ebsuo
}

// SetPutoutStationID sets the "putout_station_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutStationID(u uint64) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.SetPutoutStationID(u)
	return ebsuo
}

// SetNillablePutoutStationID sets the "putout_station_id" field if the given value is not nil.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetNillablePutoutStationID(u *uint64) *EnterpriseBatterySwapUpdateOne {
	if u != nil {
		ebsuo.SetPutoutStationID(*u)
	}
	return ebsuo
}

// ClearPutoutStationID clears the value of the "putout_station_id" field.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutoutStationID() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutoutStationID()
	return ebsuo
}

// SetExchange sets the "exchange" edge to the Exchange entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetExchange(e *Exchange) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetExchangeID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetCabinet(c *Cabinet) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetCabinetID(c.ID)
}

// SetPutin sets the "putin" edge to the Battery entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutin(b *Battery) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutinID(b.ID)
}

// SetPutinEnterprise sets the "putin_enterprise" edge to the Enterprise entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinEnterprise(e *Enterprise) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutinEnterpriseID(e.ID)
}

// SetPutinStation sets the "putin_station" edge to the EnterpriseStation entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutinStation(e *EnterpriseStation) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutinStationID(e.ID)
}

// SetPutout sets the "putout" edge to the Battery entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutout(b *Battery) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutoutID(b.ID)
}

// SetPutoutEnterprise sets the "putout_enterprise" edge to the Enterprise entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutEnterprise(e *Enterprise) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutoutEnterpriseID(e.ID)
}

// SetPutoutStation sets the "putout_station" edge to the EnterpriseStation entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SetPutoutStation(e *EnterpriseStation) *EnterpriseBatterySwapUpdateOne {
	return ebsuo.SetPutoutStationID(e.ID)
}

// Mutation returns the EnterpriseBatterySwapMutation object of the builder.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Mutation() *EnterpriseBatterySwapMutation {
	return ebsuo.mutation
}

// ClearExchange clears the "exchange" edge to the Exchange entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearExchange() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearExchange()
	return ebsuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearCabinet() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearCabinet()
	return ebsuo
}

// ClearPutin clears the "putin" edge to the Battery entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutin() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutin()
	return ebsuo
}

// ClearPutinEnterprise clears the "putin_enterprise" edge to the Enterprise entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutinEnterprise() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutinEnterprise()
	return ebsuo
}

// ClearPutinStation clears the "putin_station" edge to the EnterpriseStation entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutinStation() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutinStation()
	return ebsuo
}

// ClearPutout clears the "putout" edge to the Battery entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutout() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutout()
	return ebsuo
}

// ClearPutoutEnterprise clears the "putout_enterprise" edge to the Enterprise entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutoutEnterprise() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutoutEnterprise()
	return ebsuo
}

// ClearPutoutStation clears the "putout_station" edge to the EnterpriseStation entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ClearPutoutStation() *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.ClearPutoutStation()
	return ebsuo
}

// Where appends a list predicates to the EnterpriseBatterySwapUpdate builder.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Where(ps ...predicate.EnterpriseBatterySwap) *EnterpriseBatterySwapUpdateOne {
	ebsuo.mutation.Where(ps...)
	return ebsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Select(field string, fields ...string) *EnterpriseBatterySwapUpdateOne {
	ebsuo.fields = append([]string{field}, fields...)
	return ebsuo
}

// Save executes the query and returns the updated EnterpriseBatterySwap entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Save(ctx context.Context) (*EnterpriseBatterySwap, error) {
	ebsuo.defaults()
	return withHooks(ctx, ebsuo.sqlSave, ebsuo.mutation, ebsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebsuo *EnterpriseBatterySwapUpdateOne) SaveX(ctx context.Context) *EnterpriseBatterySwap {
	node, err := ebsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Exec(ctx context.Context) error {
	_, err := ebsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebsuo *EnterpriseBatterySwapUpdateOne) ExecX(ctx context.Context) {
	if err := ebsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebsuo *EnterpriseBatterySwapUpdateOne) defaults() {
	if _, ok := ebsuo.mutation.UpdatedAt(); !ok {
		v := enterprisebatteryswap.UpdateDefaultUpdatedAt()
		ebsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ebsuo *EnterpriseBatterySwapUpdateOne) check() error {
	if _, ok := ebsuo.mutation.ExchangeID(); ebsuo.mutation.ExchangeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.exchange"`)
	}
	if _, ok := ebsuo.mutation.CabinetID(); ebsuo.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.cabinet"`)
	}
	if _, ok := ebsuo.mutation.PutinID(); ebsuo.mutation.PutinCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.putin"`)
	}
	if _, ok := ebsuo.mutation.PutoutID(); ebsuo.mutation.PutoutCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBatterySwap.putout"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebsuo *EnterpriseBatterySwapUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterpriseBatterySwapUpdateOne {
	ebsuo.modifiers = append(ebsuo.modifiers, modifiers...)
	return ebsuo
}

func (ebsuo *EnterpriseBatterySwapUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseBatterySwap, err error) {
	if err := ebsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterprisebatteryswap.Table, enterprisebatteryswap.Columns, sqlgraph.NewFieldSpec(enterprisebatteryswap.FieldID, field.TypeUint64))
	id, ok := ebsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseBatterySwap.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ebsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisebatteryswap.FieldID)
		for _, f := range fields {
			if !enterprisebatteryswap.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprisebatteryswap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ebsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisebatteryswap.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebsuo.mutation.PutinSn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutinSn, field.TypeString, value)
	}
	if value, ok := ebsuo.mutation.PutoutSn(); ok {
		_spec.SetField(enterprisebatteryswap.FieldPutoutSn, field.TypeString, value)
	}
	if ebsuo.mutation.ExchangeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.ExchangeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.ExchangeTable,
			Columns: []string{enterprisebatteryswap.ExchangeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.CabinetTable,
			Columns: []string{enterprisebatteryswap.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutinCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinTable,
			Columns: []string{enterprisebatteryswap.PutinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutinTable,
			Columns: []string{enterprisebatteryswap.PutinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutinEnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutinEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutinEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutinStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutinStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutinStationTable,
			Columns: []string{enterprisebatteryswap.PutinStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutoutCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutTable,
			Columns: []string{enterprisebatteryswap.PutoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebatteryswap.PutoutTable,
			Columns: []string{enterprisebatteryswap.PutoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutoutEnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutoutEnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutEnterpriseTable,
			Columns: []string{enterprisebatteryswap.PutoutEnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebsuo.mutation.PutoutStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebsuo.mutation.PutoutStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebatteryswap.PutoutStationTable,
			Columns: []string{enterprisebatteryswap.PutoutStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebsuo.modifiers...)
	_node = &EnterpriseBatterySwap{config: ebsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ebsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisebatteryswap.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ebsuo.mutation.done = true
	return _node, nil
}
