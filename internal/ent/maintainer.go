// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
)

// Maintainer is the model entity for the Maintainer schema.
type Maintainer struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 电话
	Phone string `json:"phone,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MaintainerQuery when eager-loading is set.
	Edges        MaintainerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MaintainerEdges holds the relations/edges for other nodes in the graph.
type MaintainerEdges struct {
	// Cities holds the value of the cities edge.
	Cities []*City `json:"cities,omitempty"`
	// Asset holds the value of the asset edge.
	Asset []*Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CitiesOrErr returns the Cities value or an error if the edge
// was not loaded in eager-loading.
func (e MaintainerEdges) CitiesOrErr() ([]*City, error) {
	if e.loadedTypes[0] {
		return e.Cities, nil
	}
	return nil, &NotLoadedError{edge: "cities"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading.
func (e MaintainerEdges) AssetOrErr() ([]*Asset, error) {
	if e.loadedTypes[1] {
		return e.Asset, nil
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Maintainer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case maintainer.FieldEnable:
			values[i] = new(sql.NullBool)
		case maintainer.FieldID:
			values[i] = new(sql.NullInt64)
		case maintainer.FieldName, maintainer.FieldPhone, maintainer.FieldPassword:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Maintainer fields.
func (m *Maintainer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case maintainer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = uint64(value.Int64)
		case maintainer.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				m.Enable = value.Bool
			}
		case maintainer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case maintainer.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				m.Phone = value.String
			}
		case maintainer.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				m.Password = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Maintainer.
// This includes values selected through modifiers, order, etc.
func (m *Maintainer) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryCities queries the "cities" edge of the Maintainer entity.
func (m *Maintainer) QueryCities() *CityQuery {
	return NewMaintainerClient(m.config).QueryCities(m)
}

// QueryAsset queries the "asset" edge of the Maintainer entity.
func (m *Maintainer) QueryAsset() *AssetQuery {
	return NewMaintainerClient(m.config).QueryAsset(m)
}

// Update returns a builder for updating this Maintainer.
// Note that you need to call Maintainer.Unwrap() before calling this method if this Maintainer
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Maintainer) Update() *MaintainerUpdateOne {
	return NewMaintainerClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Maintainer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Maintainer) Unwrap() *Maintainer {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Maintainer is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Maintainer) String() string {
	var builder strings.Builder
	builder.WriteString("Maintainer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", m.Enable))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(m.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(m.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Maintainers is a parsable slice of Maintainer.
type Maintainers []*Maintainer
