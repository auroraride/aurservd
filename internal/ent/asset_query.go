// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetQuery is the builder for querying Asset entities.
type AssetQuery struct {
	config
	ctx                    *QueryContext
	order                  []asset.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Asset
	withBrand              *EbikeBrandQuery
	withModel              *BatteryModelQuery
	withCity               *CityQuery
	withMaterial           *MaterialQuery
	withValues             *AssetAttributeValuesQuery
	withWarehouse          *WarehouseQuery
	withStore              *StoreQuery
	withCabinet            *CabinetQuery
	withStation            *EnterpriseStationQuery
	withRider              *RiderQuery
	withOperator           *MaintainerQuery
	withScrapDetails       *AssetScrapDetailsQuery
	withTransferDetails    *AssetTransferDetailsQuery
	withMaintenanceDetails *AssetMaintenanceDetailsQuery
	modifiers              []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetQuery builder.
func (aq *AssetQuery) Where(ps ...predicate.Asset) *AssetQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AssetQuery) Limit(limit int) *AssetQuery {
	aq.ctx.Limit = &limit
	return aq
}

// Offset to start from.
func (aq *AssetQuery) Offset(offset int) *AssetQuery {
	aq.ctx.Offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AssetQuery) Unique(unique bool) *AssetQuery {
	aq.ctx.Unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AssetQuery) Order(o ...asset.OrderOption) *AssetQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryBrand chains the current query on the "brand" edge.
func (aq *AssetQuery) QueryBrand() *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.BrandTable, asset.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModel chains the current query on the "model" edge.
func (aq *AssetQuery) QueryModel() *BatteryModelQuery {
	query := (&BatteryModelClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(batterymodel.Table, batterymodel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.ModelTable, asset.ModelColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (aq *AssetQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.CityTable, asset.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMaterial chains the current query on the "material" edge.
func (aq *AssetQuery) QueryMaterial() *MaterialQuery {
	query := (&MaterialClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.MaterialTable, asset.MaterialColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryValues chains the current query on the "values" edge.
func (aq *AssetQuery) QueryValues() *AssetAttributeValuesQuery {
	query := (&AssetAttributeValuesClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(assetattributevalues.Table, assetattributevalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.ValuesTable, asset.ValuesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWarehouse chains the current query on the "warehouse" edge.
func (aq *AssetQuery) QueryWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.WarehouseTable, asset.WarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (aq *AssetQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.StoreTable, asset.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (aq *AssetQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.CabinetTable, asset.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (aq *AssetQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.StationTable, asset.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (aq *AssetQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.RiderTable, asset.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOperator chains the current query on the "operator" edge.
func (aq *AssetQuery) QueryOperator() *MaintainerQuery {
	query := (&MaintainerClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, asset.OperatorTable, asset.OperatorColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScrapDetails chains the current query on the "scrap_details" edge.
func (aq *AssetQuery) QueryScrapDetails() *AssetScrapDetailsQuery {
	query := (&AssetScrapDetailsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(assetscrapdetails.Table, assetscrapdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.ScrapDetailsTable, asset.ScrapDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTransferDetails chains the current query on the "transfer_details" edge.
func (aq *AssetQuery) QueryTransferDetails() *AssetTransferDetailsQuery {
	query := (&AssetTransferDetailsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(assettransferdetails.Table, assettransferdetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.TransferDetailsTable, asset.TransferDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMaintenanceDetails chains the current query on the "maintenance_details" edge.
func (aq *AssetQuery) QueryMaintenanceDetails() *AssetMaintenanceDetailsQuery {
	query := (&AssetMaintenanceDetailsClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.MaintenanceDetailsTable, asset.MaintenanceDetailsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Asset entity from the query.
// Returns a *NotFoundError when no Asset was found.
func (aq *AssetQuery) First(ctx context.Context) (*Asset, error) {
	nodes, err := aq.Limit(1).All(setContextOp(ctx, aq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AssetQuery) FirstX(ctx context.Context) *Asset {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Asset ID from the query.
// Returns a *NotFoundError when no Asset ID was found.
func (aq *AssetQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(1).IDs(setContextOp(ctx, aq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AssetQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Asset entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Asset entity is found.
// Returns a *NotFoundError when no Asset entities are found.
func (aq *AssetQuery) Only(ctx context.Context) (*Asset, error) {
	nodes, err := aq.Limit(2).All(setContextOp(ctx, aq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asset.Label}
	default:
		return nil, &NotSingularError{asset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AssetQuery) OnlyX(ctx context.Context) *Asset {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Asset ID in the query.
// Returns a *NotSingularError when more than one Asset ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AssetQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(2).IDs(setContextOp(ctx, aq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asset.Label}
	default:
		err = &NotSingularError{asset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AssetQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Assets.
func (aq *AssetQuery) All(ctx context.Context) ([]*Asset, error) {
	ctx = setContextOp(ctx, aq.ctx, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Asset, *AssetQuery]()
	return withInterceptors[[]*Asset](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AssetQuery) AllX(ctx context.Context) []*Asset {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Asset IDs.
func (aq *AssetQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if aq.ctx.Unique == nil && aq.path != nil {
		aq.Unique(true)
	}
	ctx = setContextOp(ctx, aq.ctx, "IDs")
	if err = aq.Select(asset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AssetQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AssetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AssetQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AssetQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AssetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, aq.ctx, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AssetQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AssetQuery) Clone() *AssetQuery {
	if aq == nil {
		return nil
	}
	return &AssetQuery{
		config:                 aq.config,
		ctx:                    aq.ctx.Clone(),
		order:                  append([]asset.OrderOption{}, aq.order...),
		inters:                 append([]Interceptor{}, aq.inters...),
		predicates:             append([]predicate.Asset{}, aq.predicates...),
		withBrand:              aq.withBrand.Clone(),
		withModel:              aq.withModel.Clone(),
		withCity:               aq.withCity.Clone(),
		withMaterial:           aq.withMaterial.Clone(),
		withValues:             aq.withValues.Clone(),
		withWarehouse:          aq.withWarehouse.Clone(),
		withStore:              aq.withStore.Clone(),
		withCabinet:            aq.withCabinet.Clone(),
		withStation:            aq.withStation.Clone(),
		withRider:              aq.withRider.Clone(),
		withOperator:           aq.withOperator.Clone(),
		withScrapDetails:       aq.withScrapDetails.Clone(),
		withTransferDetails:    aq.withTransferDetails.Clone(),
		withMaintenanceDetails: aq.withMaintenanceDetails.Clone(),
		// clone intermediate query.
		sql:  aq.sql.Clone(),
		path: aq.path,
	}
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *AssetQuery {
	query := (&EbikeBrandClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withBrand = query
	return aq
}

// WithModel tells the query-builder to eager-load the nodes that are connected to
// the "model" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithModel(opts ...func(*BatteryModelQuery)) *AssetQuery {
	query := (&BatteryModelClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withModel = query
	return aq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithCity(opts ...func(*CityQuery)) *AssetQuery {
	query := (&CityClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCity = query
	return aq
}

// WithMaterial tells the query-builder to eager-load the nodes that are connected to
// the "material" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithMaterial(opts ...func(*MaterialQuery)) *AssetQuery {
	query := (&MaterialClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMaterial = query
	return aq
}

// WithValues tells the query-builder to eager-load the nodes that are connected to
// the "values" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithValues(opts ...func(*AssetAttributeValuesQuery)) *AssetQuery {
	query := (&AssetAttributeValuesClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withValues = query
	return aq
}

// WithWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithWarehouse(opts ...func(*WarehouseQuery)) *AssetQuery {
	query := (&WarehouseClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withWarehouse = query
	return aq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithStore(opts ...func(*StoreQuery)) *AssetQuery {
	query := (&StoreClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withStore = query
	return aq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithCabinet(opts ...func(*CabinetQuery)) *AssetQuery {
	query := (&CabinetClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCabinet = query
	return aq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *AssetQuery {
	query := (&EnterpriseStationClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withStation = query
	return aq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithRider(opts ...func(*RiderQuery)) *AssetQuery {
	query := (&RiderClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRider = query
	return aq
}

// WithOperator tells the query-builder to eager-load the nodes that are connected to
// the "operator" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithOperator(opts ...func(*MaintainerQuery)) *AssetQuery {
	query := (&MaintainerClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOperator = query
	return aq
}

// WithScrapDetails tells the query-builder to eager-load the nodes that are connected to
// the "scrap_details" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithScrapDetails(opts ...func(*AssetScrapDetailsQuery)) *AssetQuery {
	query := (&AssetScrapDetailsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withScrapDetails = query
	return aq
}

// WithTransferDetails tells the query-builder to eager-load the nodes that are connected to
// the "transfer_details" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithTransferDetails(opts ...func(*AssetTransferDetailsQuery)) *AssetQuery {
	query := (&AssetTransferDetailsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withTransferDetails = query
	return aq
}

// WithMaintenanceDetails tells the query-builder to eager-load the nodes that are connected to
// the "maintenance_details" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssetQuery) WithMaintenanceDetails(opts ...func(*AssetMaintenanceDetailsQuery)) *AssetQuery {
	query := (&AssetMaintenanceDetailsClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withMaintenanceDetails = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Asset.Query().
//		GroupBy(asset.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AssetQuery) GroupBy(field string, fields ...string) *AssetGroupBy {
	aq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetGroupBy{build: aq}
	grbuild.flds = &aq.ctx.Fields
	grbuild.label = asset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Asset.Query().
//		Select(asset.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *AssetQuery) Select(fields ...string) *AssetSelect {
	aq.ctx.Fields = append(aq.ctx.Fields, fields...)
	sbuild := &AssetSelect{AssetQuery: aq}
	sbuild.label = asset.Label
	sbuild.flds, sbuild.scan = &aq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetSelect configured with the given aggregations.
func (aq *AssetQuery) Aggregate(fns ...AggregateFunc) *AssetSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AssetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.ctx.Fields {
		if !asset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AssetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Asset, error) {
	var (
		nodes       = []*Asset{}
		_spec       = aq.querySpec()
		loadedTypes = [14]bool{
			aq.withBrand != nil,
			aq.withModel != nil,
			aq.withCity != nil,
			aq.withMaterial != nil,
			aq.withValues != nil,
			aq.withWarehouse != nil,
			aq.withStore != nil,
			aq.withCabinet != nil,
			aq.withStation != nil,
			aq.withRider != nil,
			aq.withOperator != nil,
			aq.withScrapDetails != nil,
			aq.withTransferDetails != nil,
			aq.withMaintenanceDetails != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Asset).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Asset{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withBrand; query != nil {
		if err := aq.loadBrand(ctx, query, nodes, nil,
			func(n *Asset, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withModel; query != nil {
		if err := aq.loadModel(ctx, query, nodes, nil,
			func(n *Asset, e *BatteryModel) { n.Edges.Model = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCity; query != nil {
		if err := aq.loadCity(ctx, query, nodes, nil,
			func(n *Asset, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMaterial; query != nil {
		if err := aq.loadMaterial(ctx, query, nodes, nil,
			func(n *Asset, e *Material) { n.Edges.Material = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withValues; query != nil {
		if err := aq.loadValues(ctx, query, nodes,
			func(n *Asset) { n.Edges.Values = []*AssetAttributeValues{} },
			func(n *Asset, e *AssetAttributeValues) { n.Edges.Values = append(n.Edges.Values, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withWarehouse; query != nil {
		if err := aq.loadWarehouse(ctx, query, nodes, nil,
			func(n *Asset, e *Warehouse) { n.Edges.Warehouse = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withStore; query != nil {
		if err := aq.loadStore(ctx, query, nodes, nil,
			func(n *Asset, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCabinet; query != nil {
		if err := aq.loadCabinet(ctx, query, nodes, nil,
			func(n *Asset, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withStation; query != nil {
		if err := aq.loadStation(ctx, query, nodes, nil,
			func(n *Asset, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRider; query != nil {
		if err := aq.loadRider(ctx, query, nodes, nil,
			func(n *Asset, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOperator; query != nil {
		if err := aq.loadOperator(ctx, query, nodes, nil,
			func(n *Asset, e *Maintainer) { n.Edges.Operator = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withScrapDetails; query != nil {
		if err := aq.loadScrapDetails(ctx, query, nodes,
			func(n *Asset) { n.Edges.ScrapDetails = []*AssetScrapDetails{} },
			func(n *Asset, e *AssetScrapDetails) { n.Edges.ScrapDetails = append(n.Edges.ScrapDetails, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withTransferDetails; query != nil {
		if err := aq.loadTransferDetails(ctx, query, nodes,
			func(n *Asset) { n.Edges.TransferDetails = []*AssetTransferDetails{} },
			func(n *Asset, e *AssetTransferDetails) { n.Edges.TransferDetails = append(n.Edges.TransferDetails, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMaintenanceDetails; query != nil {
		if err := aq.loadMaintenanceDetails(ctx, query, nodes,
			func(n *Asset) { n.Edges.MaintenanceDetails = []*AssetMaintenanceDetails{} },
			func(n *Asset, e *AssetMaintenanceDetails) {
				n.Edges.MaintenanceDetails = append(n.Edges.MaintenanceDetails, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AssetQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		if nodes[i].BrandID == nil {
			continue
		}
		fk := *nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadModel(ctx context.Context, query *BatteryModelQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *BatteryModel)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		if nodes[i].ModelID == nil {
			continue
		}
		fk := *nodes[i].ModelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(batterymodel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "model_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadMaterial(ctx context.Context, query *MaterialQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Material)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		if nodes[i].MaterialID == nil {
			continue
		}
		fk := *nodes[i].MaterialID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(material.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "material_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadValues(ctx context.Context, query *AssetAttributeValuesQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *AssetAttributeValues)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assetattributevalues.FieldAssetID)
	}
	query.Where(predicate.AssetAttributeValues(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.ValuesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssetID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AssetQuery) loadWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadOperator(ctx context.Context, query *MaintainerQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Asset)
	for i := range nodes {
		fk := nodes[i].LocationsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "locations_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssetQuery) loadScrapDetails(ctx context.Context, query *AssetScrapDetailsQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *AssetScrapDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assetscrapdetails.FieldAssetID)
	}
	query.Where(predicate.AssetScrapDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.ScrapDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssetID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AssetQuery) loadTransferDetails(ctx context.Context, query *AssetTransferDetailsQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *AssetTransferDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assettransferdetails.FieldAssetID)
	}
	query.Where(predicate.AssetTransferDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.TransferDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssetID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *AssetQuery) loadMaintenanceDetails(ctx context.Context, query *AssetMaintenanceDetailsQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *AssetMaintenanceDetails)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assetmaintenancedetails.FieldAssetID)
	}
	query.Where(predicate.AssetMaintenanceDetails(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.MaintenanceDetailsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssetID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (aq *AssetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.ctx.Fields
	if len(aq.ctx.Fields) > 0 {
		_spec.Unique = aq.ctx.Unique != nil && *aq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AssetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64))
	_spec.From = aq.sql
	if unique := aq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if aq.path != nil {
		_spec.Unique = true
	}
	if fields := aq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for i := range fields {
			if fields[i] != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if aq.withBrand != nil {
			_spec.Node.AddColumnOnce(asset.FieldBrandID)
		}
		if aq.withModel != nil {
			_spec.Node.AddColumnOnce(asset.FieldModelID)
		}
		if aq.withCity != nil {
			_spec.Node.AddColumnOnce(asset.FieldCityID)
		}
		if aq.withMaterial != nil {
			_spec.Node.AddColumnOnce(asset.FieldMaterialID)
		}
		if aq.withWarehouse != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
		if aq.withStore != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
		if aq.withCabinet != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
		if aq.withStation != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
		if aq.withRider != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
		if aq.withOperator != nil {
			_spec.Node.AddColumnOnce(asset.FieldLocationsID)
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AssetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(asset.Table)
	columns := aq.ctx.Fields
	if len(columns) == 0 {
		columns = asset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.ctx.Unique != nil && *aq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range aq.modifiers {
		m(selector)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aq *AssetQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetSelect {
	aq.modifiers = append(aq.modifiers, modifiers...)
	return aq.Select()
}

type AssetQueryWith string

var (
	AssetQueryWithBrand              AssetQueryWith = "Brand"
	AssetQueryWithModel              AssetQueryWith = "Model"
	AssetQueryWithCity               AssetQueryWith = "City"
	AssetQueryWithMaterial           AssetQueryWith = "Material"
	AssetQueryWithValues             AssetQueryWith = "Values"
	AssetQueryWithWarehouse          AssetQueryWith = "Warehouse"
	AssetQueryWithStore              AssetQueryWith = "Store"
	AssetQueryWithCabinet            AssetQueryWith = "Cabinet"
	AssetQueryWithStation            AssetQueryWith = "Station"
	AssetQueryWithRider              AssetQueryWith = "Rider"
	AssetQueryWithOperator           AssetQueryWith = "Operator"
	AssetQueryWithScrapDetails       AssetQueryWith = "ScrapDetails"
	AssetQueryWithTransferDetails    AssetQueryWith = "TransferDetails"
	AssetQueryWithMaintenanceDetails AssetQueryWith = "MaintenanceDetails"
)

func (aq *AssetQuery) With(withEdges ...AssetQueryWith) *AssetQuery {
	for _, v := range withEdges {
		switch v {
		case AssetQueryWithBrand:
			aq.WithBrand()
		case AssetQueryWithModel:
			aq.WithModel()
		case AssetQueryWithCity:
			aq.WithCity()
		case AssetQueryWithMaterial:
			aq.WithMaterial()
		case AssetQueryWithValues:
			aq.WithValues()
		case AssetQueryWithWarehouse:
			aq.WithWarehouse()
		case AssetQueryWithStore:
			aq.WithStore()
		case AssetQueryWithCabinet:
			aq.WithCabinet()
		case AssetQueryWithStation:
			aq.WithStation()
		case AssetQueryWithRider:
			aq.WithRider()
		case AssetQueryWithOperator:
			aq.WithOperator()
		case AssetQueryWithScrapDetails:
			aq.WithScrapDetails()
		case AssetQueryWithTransferDetails:
			aq.WithTransferDetails()
		case AssetQueryWithMaintenanceDetails:
			aq.WithMaintenanceDetails()
		}
	}
	return aq
}

// AssetGroupBy is the group-by builder for Asset entities.
type AssetGroupBy struct {
	selector
	build *AssetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AssetGroupBy) Aggregate(fns ...AggregateFunc) *AssetGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AssetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, agb.build.ctx, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetQuery, *AssetGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AssetGroupBy) sqlScan(ctx context.Context, root *AssetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetSelect is the builder for selecting fields of Asset entities.
type AssetSelect struct {
	*AssetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AssetSelect) Aggregate(fns ...AggregateFunc) *AssetSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AssetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, as.ctx, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetQuery, *AssetSelect](ctx, as.AssetQuery, as, as.inters, v)
}

func (as *AssetSelect) sqlScan(ctx context.Context, root *AssetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (as *AssetSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetSelect {
	as.modifiers = append(as.modifiers, modifiers...)
	return as
}
