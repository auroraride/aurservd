// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// WarehouseCreate is the builder for creating a Warehouse entity.
type WarehouseCreate struct {
	config
	mutation *WarehouseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WarehouseCreate) SetCreatedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableCreatedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WarehouseCreate) SetUpdatedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableUpdatedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetDeletedAt sets the "deleted_at" field.
func (wc *WarehouseCreate) SetDeletedAt(t time.Time) *WarehouseCreate {
	wc.mutation.SetDeletedAt(t)
	return wc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableDeletedAt(t *time.Time) *WarehouseCreate {
	if t != nil {
		wc.SetDeletedAt(*t)
	}
	return wc
}

// SetCreator sets the "creator" field.
func (wc *WarehouseCreate) SetCreator(m *model.Modifier) *WarehouseCreate {
	wc.mutation.SetCreator(m)
	return wc
}

// SetLastModifier sets the "last_modifier" field.
func (wc *WarehouseCreate) SetLastModifier(m *model.Modifier) *WarehouseCreate {
	wc.mutation.SetLastModifier(m)
	return wc
}

// SetRemark sets the "remark" field.
func (wc *WarehouseCreate) SetRemark(s string) *WarehouseCreate {
	wc.mutation.SetRemark(s)
	return wc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableRemark(s *string) *WarehouseCreate {
	if s != nil {
		wc.SetRemark(*s)
	}
	return wc
}

// SetCityID sets the "city_id" field.
func (wc *WarehouseCreate) SetCityID(u uint64) *WarehouseCreate {
	wc.mutation.SetCityID(u)
	return wc
}

// SetName sets the "name" field.
func (wc *WarehouseCreate) SetName(s string) *WarehouseCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetLng sets the "lng" field.
func (wc *WarehouseCreate) SetLng(f float64) *WarehouseCreate {
	wc.mutation.SetLng(f)
	return wc
}

// SetLat sets the "lat" field.
func (wc *WarehouseCreate) SetLat(f float64) *WarehouseCreate {
	wc.mutation.SetLat(f)
	return wc
}

// SetAddress sets the "address" field.
func (wc *WarehouseCreate) SetAddress(s string) *WarehouseCreate {
	wc.mutation.SetAddress(s)
	return wc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (wc *WarehouseCreate) SetNillableAddress(s *string) *WarehouseCreate {
	if s != nil {
		wc.SetAddress(*s)
	}
	return wc
}

// SetSn sets the "sn" field.
func (wc *WarehouseCreate) SetSn(s string) *WarehouseCreate {
	wc.mutation.SetSn(s)
	return wc
}

// SetCity sets the "city" edge to the City entity.
func (wc *WarehouseCreate) SetCity(c *City) *WarehouseCreate {
	return wc.SetCityID(c.ID)
}

// AddAssetManagerIDs adds the "asset_managers" edge to the AssetManager entity by IDs.
func (wc *WarehouseCreate) AddAssetManagerIDs(ids ...uint64) *WarehouseCreate {
	wc.mutation.AddAssetManagerIDs(ids...)
	return wc
}

// AddAssetManagers adds the "asset_managers" edges to the AssetManager entity.
func (wc *WarehouseCreate) AddAssetManagers(a ...*AssetManager) *WarehouseCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return wc.AddAssetManagerIDs(ids...)
}

// Mutation returns the WarehouseMutation object of the builder.
func (wc *WarehouseCreate) Mutation() *WarehouseMutation {
	return wc.mutation
}

// Save creates the Warehouse in the database.
func (wc *WarehouseCreate) Save(ctx context.Context) (*Warehouse, error) {
	if err := wc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WarehouseCreate) SaveX(ctx context.Context) *Warehouse {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WarehouseCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WarehouseCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WarehouseCreate) defaults() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		if warehouse.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized warehouse.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := warehouse.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		if warehouse.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized warehouse.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := warehouse.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wc *WarehouseCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Warehouse.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Warehouse.updated_at"`)}
	}
	if _, ok := wc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Warehouse.city_id"`)}
	}
	if _, ok := wc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Warehouse.name"`)}
	}
	if _, ok := wc.mutation.Lng(); !ok {
		return &ValidationError{Name: "lng", err: errors.New(`ent: missing required field "Warehouse.lng"`)}
	}
	if _, ok := wc.mutation.Lat(); !ok {
		return &ValidationError{Name: "lat", err: errors.New(`ent: missing required field "Warehouse.lat"`)}
	}
	if _, ok := wc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Warehouse.sn"`)}
	}
	if _, ok := wc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Warehouse.city"`)}
	}
	return nil
}

func (wc *WarehouseCreate) sqlSave(ctx context.Context) (*Warehouse, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WarehouseCreate) createSpec() (*Warehouse, *sqlgraph.CreateSpec) {
	var (
		_node = &Warehouse{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(warehouse.Table, sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = wc.conflict
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(warehouse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(warehouse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.DeletedAt(); ok {
		_spec.SetField(warehouse.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := wc.mutation.Creator(); ok {
		_spec.SetField(warehouse.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := wc.mutation.LastModifier(); ok {
		_spec.SetField(warehouse.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := wc.mutation.Remark(); ok {
		_spec.SetField(warehouse.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(warehouse.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.Lng(); ok {
		_spec.SetField(warehouse.FieldLng, field.TypeFloat64, value)
		_node.Lng = value
	}
	if value, ok := wc.mutation.Lat(); ok {
		_spec.SetField(warehouse.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if value, ok := wc.mutation.Address(); ok {
		_spec.SetField(warehouse.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := wc.mutation.Sn(); ok {
		_spec.SetField(warehouse.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if nodes := wc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   warehouse.CityTable,
			Columns: []string{warehouse.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.AssetManagersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   warehouse.AssetManagersTable,
			Columns: warehouse.AssetManagersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Warehouse.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarehouseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wc *WarehouseCreate) OnConflict(opts ...sql.ConflictOption) *WarehouseUpsertOne {
	wc.conflict = opts
	return &WarehouseUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WarehouseCreate) OnConflictColumns(columns ...string) *WarehouseUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WarehouseUpsertOne{
		create: wc,
	}
}

type (
	// WarehouseUpsertOne is the builder for "upsert"-ing
	//  one Warehouse node.
	WarehouseUpsertOne struct {
		create *WarehouseCreate
	}

	// WarehouseUpsert is the "OnConflict" setter.
	WarehouseUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsert) SetUpdatedAt(v time.Time) *WarehouseUpsert {
	u.Set(warehouse.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateUpdatedAt() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsert) SetDeletedAt(v time.Time) *WarehouseUpsert {
	u.Set(warehouse.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateDeletedAt() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsert) ClearDeletedAt() *WarehouseUpsert {
	u.SetNull(warehouse.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *WarehouseUpsert) SetLastModifier(v *model.Modifier) *WarehouseUpsert {
	u.Set(warehouse.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateLastModifier() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *WarehouseUpsert) ClearLastModifier() *WarehouseUpsert {
	u.SetNull(warehouse.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *WarehouseUpsert) SetRemark(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateRemark() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *WarehouseUpsert) ClearRemark() *WarehouseUpsert {
	u.SetNull(warehouse.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *WarehouseUpsert) SetCityID(v uint64) *WarehouseUpsert {
	u.Set(warehouse.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateCityID() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldCityID)
	return u
}

// SetName sets the "name" field.
func (u *WarehouseUpsert) SetName(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateName() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldName)
	return u
}

// SetLng sets the "lng" field.
func (u *WarehouseUpsert) SetLng(v float64) *WarehouseUpsert {
	u.Set(warehouse.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateLng() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *WarehouseUpsert) AddLng(v float64) *WarehouseUpsert {
	u.Add(warehouse.FieldLng, v)
	return u
}

// SetLat sets the "lat" field.
func (u *WarehouseUpsert) SetLat(v float64) *WarehouseUpsert {
	u.Set(warehouse.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateLat() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *WarehouseUpsert) AddLat(v float64) *WarehouseUpsert {
	u.Add(warehouse.FieldLat, v)
	return u
}

// SetAddress sets the "address" field.
func (u *WarehouseUpsert) SetAddress(v string) *WarehouseUpsert {
	u.Set(warehouse.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WarehouseUpsert) UpdateAddress() *WarehouseUpsert {
	u.SetExcluded(warehouse.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *WarehouseUpsert) ClearAddress() *WarehouseUpsert {
	u.SetNull(warehouse.FieldAddress)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WarehouseUpsertOne) UpdateNewValues() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(warehouse.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(warehouse.FieldCreator)
		}
		if _, exists := u.create.mutation.Sn(); exists {
			s.SetIgnore(warehouse.FieldSn)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WarehouseUpsertOne) Ignore() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarehouseUpsertOne) DoNothing() *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarehouseCreate.OnConflict
// documentation for more info.
func (u *WarehouseUpsertOne) Update(set func(*WarehouseUpsert)) *WarehouseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarehouseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsertOne) SetUpdatedAt(v time.Time) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateUpdatedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsertOne) SetDeletedAt(v time.Time) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateDeletedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsertOne) ClearDeletedAt() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *WarehouseUpsertOne) SetLastModifier(v *model.Modifier) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateLastModifier() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *WarehouseUpsertOne) ClearLastModifier() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *WarehouseUpsertOne) SetRemark(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateRemark() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *WarehouseUpsertOne) ClearRemark() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *WarehouseUpsertOne) SetCityID(v uint64) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateCityID() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCityID()
	})
}

// SetName sets the "name" field.
func (u *WarehouseUpsertOne) SetName(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateName() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateName()
	})
}

// SetLng sets the "lng" field.
func (u *WarehouseUpsertOne) SetLng(v float64) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *WarehouseUpsertOne) AddLng(v float64) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateLng() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLng()
	})
}

// SetLat sets the "lat" field.
func (u *WarehouseUpsertOne) SetLat(v float64) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *WarehouseUpsertOne) AddLat(v float64) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateLat() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLat()
	})
}

// SetAddress sets the "address" field.
func (u *WarehouseUpsertOne) SetAddress(v string) *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WarehouseUpsertOne) UpdateAddress() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *WarehouseUpsertOne) ClearAddress() *WarehouseUpsertOne {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearAddress()
	})
}

// Exec executes the query.
func (u *WarehouseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarehouseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarehouseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WarehouseUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WarehouseUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WarehouseCreateBulk is the builder for creating many Warehouse entities in bulk.
type WarehouseCreateBulk struct {
	config
	err      error
	builders []*WarehouseCreate
	conflict []sql.ConflictOption
}

// Save creates the Warehouse entities in the database.
func (wcb *WarehouseCreateBulk) Save(ctx context.Context) ([]*Warehouse, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Warehouse, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WarehouseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WarehouseCreateBulk) SaveX(ctx context.Context) []*Warehouse {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WarehouseCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WarehouseCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Warehouse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WarehouseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wcb *WarehouseCreateBulk) OnConflict(opts ...sql.ConflictOption) *WarehouseUpsertBulk {
	wcb.conflict = opts
	return &WarehouseUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WarehouseCreateBulk) OnConflictColumns(columns ...string) *WarehouseUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WarehouseUpsertBulk{
		create: wcb,
	}
}

// WarehouseUpsertBulk is the builder for "upsert"-ing
// a bulk of Warehouse nodes.
type WarehouseUpsertBulk struct {
	create *WarehouseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WarehouseUpsertBulk) UpdateNewValues() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(warehouse.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(warehouse.FieldCreator)
			}
			if _, exists := b.mutation.Sn(); exists {
				s.SetIgnore(warehouse.FieldSn)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Warehouse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WarehouseUpsertBulk) Ignore() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WarehouseUpsertBulk) DoNothing() *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WarehouseCreateBulk.OnConflict
// documentation for more info.
func (u *WarehouseUpsertBulk) Update(set func(*WarehouseUpsert)) *WarehouseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WarehouseUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WarehouseUpsertBulk) SetUpdatedAt(v time.Time) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateUpdatedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *WarehouseUpsertBulk) SetDeletedAt(v time.Time) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateDeletedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *WarehouseUpsertBulk) ClearDeletedAt() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *WarehouseUpsertBulk) SetLastModifier(v *model.Modifier) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateLastModifier() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *WarehouseUpsertBulk) ClearLastModifier() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *WarehouseUpsertBulk) SetRemark(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateRemark() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *WarehouseUpsertBulk) ClearRemark() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *WarehouseUpsertBulk) SetCityID(v uint64) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateCityID() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateCityID()
	})
}

// SetName sets the "name" field.
func (u *WarehouseUpsertBulk) SetName(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateName() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateName()
	})
}

// SetLng sets the "lng" field.
func (u *WarehouseUpsertBulk) SetLng(v float64) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *WarehouseUpsertBulk) AddLng(v float64) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateLng() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLng()
	})
}

// SetLat sets the "lat" field.
func (u *WarehouseUpsertBulk) SetLat(v float64) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *WarehouseUpsertBulk) AddLat(v float64) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateLat() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateLat()
	})
}

// SetAddress sets the "address" field.
func (u *WarehouseUpsertBulk) SetAddress(v string) *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *WarehouseUpsertBulk) UpdateAddress() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *WarehouseUpsertBulk) ClearAddress() *WarehouseUpsertBulk {
	return u.Update(func(s *WarehouseUpsert) {
		s.ClearAddress()
	})
}

// Exec executes the query.
func (u *WarehouseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WarehouseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WarehouseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WarehouseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
