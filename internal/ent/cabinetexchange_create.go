// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetexchange"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetExchangeCreate is the builder for creating a CabinetExchange entity.
type CabinetExchangeCreate struct {
	config
	mutation *CabinetExchangeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cec *CabinetExchangeCreate) SetCreatedAt(t time.Time) *CabinetExchangeCreate {
	cec.mutation.SetCreatedAt(t)
	return cec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cec *CabinetExchangeCreate) SetNillableCreatedAt(t *time.Time) *CabinetExchangeCreate {
	if t != nil {
		cec.SetCreatedAt(*t)
	}
	return cec
}

// SetUpdatedAt sets the "updated_at" field.
func (cec *CabinetExchangeCreate) SetUpdatedAt(t time.Time) *CabinetExchangeCreate {
	cec.mutation.SetUpdatedAt(t)
	return cec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cec *CabinetExchangeCreate) SetNillableUpdatedAt(t *time.Time) *CabinetExchangeCreate {
	if t != nil {
		cec.SetUpdatedAt(*t)
	}
	return cec
}

// SetDeletedAt sets the "deleted_at" field.
func (cec *CabinetExchangeCreate) SetDeletedAt(t time.Time) *CabinetExchangeCreate {
	cec.mutation.SetDeletedAt(t)
	return cec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cec *CabinetExchangeCreate) SetNillableDeletedAt(t *time.Time) *CabinetExchangeCreate {
	if t != nil {
		cec.SetDeletedAt(*t)
	}
	return cec
}

// SetCreator sets the "creator" field.
func (cec *CabinetExchangeCreate) SetCreator(m *model.Modifier) *CabinetExchangeCreate {
	cec.mutation.SetCreator(m)
	return cec
}

// SetLastModifier sets the "last_modifier" field.
func (cec *CabinetExchangeCreate) SetLastModifier(m *model.Modifier) *CabinetExchangeCreate {
	cec.mutation.SetLastModifier(m)
	return cec
}

// SetRemark sets the "remark" field.
func (cec *CabinetExchangeCreate) SetRemark(s string) *CabinetExchangeCreate {
	cec.mutation.SetRemark(s)
	return cec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cec *CabinetExchangeCreate) SetNillableRemark(s *string) *CabinetExchangeCreate {
	if s != nil {
		cec.SetRemark(*s)
	}
	return cec
}

// SetRiderID sets the "rider_id" field.
func (cec *CabinetExchangeCreate) SetRiderID(u uint64) *CabinetExchangeCreate {
	cec.mutation.SetRiderID(u)
	return cec
}

// SetCabinetID sets the "cabinet_id" field.
func (cec *CabinetExchangeCreate) SetCabinetID(u uint64) *CabinetExchangeCreate {
	cec.mutation.SetCabinetID(u)
	return cec
}

// SetAlternative sets the "alternative" field.
func (cec *CabinetExchangeCreate) SetAlternative(b bool) *CabinetExchangeCreate {
	cec.mutation.SetAlternative(b)
	return cec
}

// SetNillableAlternative sets the "alternative" field if the given value is not nil.
func (cec *CabinetExchangeCreate) SetNillableAlternative(b *bool) *CabinetExchangeCreate {
	if b != nil {
		cec.SetAlternative(*b)
	}
	return cec
}

// SetStep sets the "step" field.
func (cec *CabinetExchangeCreate) SetStep(u uint) *CabinetExchangeCreate {
	cec.mutation.SetStep(u)
	return cec
}

// SetStatus sets the "status" field.
func (cec *CabinetExchangeCreate) SetStatus(u uint) *CabinetExchangeCreate {
	cec.mutation.SetStatus(u)
	return cec
}

// SetBinIndex sets the "bin_index" field.
func (cec *CabinetExchangeCreate) SetBinIndex(u uint) *CabinetExchangeCreate {
	cec.mutation.SetBinIndex(u)
	return cec
}

// SetBin sets the "bin" field.
func (cec *CabinetExchangeCreate) SetBin(mb model.CabinetBin) *CabinetExchangeCreate {
	cec.mutation.SetBin(mb)
	return cec
}

// SetRider sets the "rider" edge to the Rider entity.
func (cec *CabinetExchangeCreate) SetRider(r *Rider) *CabinetExchangeCreate {
	return cec.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cec *CabinetExchangeCreate) SetCabinet(c *Cabinet) *CabinetExchangeCreate {
	return cec.SetCabinetID(c.ID)
}

// Mutation returns the CabinetExchangeMutation object of the builder.
func (cec *CabinetExchangeCreate) Mutation() *CabinetExchangeMutation {
	return cec.mutation
}

// Save creates the CabinetExchange in the database.
func (cec *CabinetExchangeCreate) Save(ctx context.Context) (*CabinetExchange, error) {
	var (
		err  error
		node *CabinetExchange
	)
	if err := cec.defaults(); err != nil {
		return nil, err
	}
	if len(cec.hooks) == 0 {
		if err = cec.check(); err != nil {
			return nil, err
		}
		node, err = cec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetExchangeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cec.check(); err != nil {
				return nil, err
			}
			cec.mutation = mutation
			if node, err = cec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cec.hooks) - 1; i >= 0; i-- {
			if cec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CabinetExchange)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CabinetExchangeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CabinetExchangeCreate) SaveX(ctx context.Context) *CabinetExchange {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CabinetExchangeCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CabinetExchangeCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CabinetExchangeCreate) defaults() error {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		if cabinetexchange.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetexchange.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetexchange.DefaultCreatedAt()
		cec.mutation.SetCreatedAt(v)
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		if cabinetexchange.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinetexchange.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinetexchange.DefaultUpdatedAt()
		cec.mutation.SetUpdatedAt(v)
	}
	if _, ok := cec.mutation.Alternative(); !ok {
		v := cabinetexchange.DefaultAlternative
		cec.mutation.SetAlternative(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cec *CabinetExchangeCreate) check() error {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CabinetExchange.created_at"`)}
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CabinetExchange.updated_at"`)}
	}
	if _, ok := cec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "CabinetExchange.rider_id"`)}
	}
	if _, ok := cec.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "CabinetExchange.cabinet_id"`)}
	}
	if _, ok := cec.mutation.Alternative(); !ok {
		return &ValidationError{Name: "alternative", err: errors.New(`ent: missing required field "CabinetExchange.alternative"`)}
	}
	if _, ok := cec.mutation.Step(); !ok {
		return &ValidationError{Name: "step", err: errors.New(`ent: missing required field "CabinetExchange.step"`)}
	}
	if _, ok := cec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CabinetExchange.status"`)}
	}
	if _, ok := cec.mutation.BinIndex(); !ok {
		return &ValidationError{Name: "bin_index", err: errors.New(`ent: missing required field "CabinetExchange.bin_index"`)}
	}
	if _, ok := cec.mutation.Bin(); !ok {
		return &ValidationError{Name: "bin", err: errors.New(`ent: missing required field "CabinetExchange.bin"`)}
	}
	if _, ok := cec.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "CabinetExchange.rider"`)}
	}
	if _, ok := cec.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "CabinetExchange.cabinet"`)}
	}
	return nil
}

func (cec *CabinetExchangeCreate) sqlSave(ctx context.Context) (*CabinetExchange, error) {
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (cec *CabinetExchangeCreate) createSpec() (*CabinetExchange, *sqlgraph.CreateSpec) {
	var (
		_node = &CabinetExchange{config: cec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cabinetexchange.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetexchange.FieldID,
			},
		}
	)
	_spec.OnConflict = cec.conflict
	if value, ok := cec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinetexchange.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := cec.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := cec.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := cec.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinetexchange.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := cec.mutation.Alternative(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: cabinetexchange.FieldAlternative,
		})
		_node.Alternative = value
	}
	if value, ok := cec.mutation.Step(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStep,
		})
		_node.Step = value
	}
	if value, ok := cec.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cec.mutation.BinIndex(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinetexchange.FieldBinIndex,
		})
		_node.BinIndex = value
	}
	if value, ok := cec.mutation.Bin(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinetexchange.FieldBin,
		})
		_node.Bin = value
	}
	if nodes := cec.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.RiderTable,
			Columns: []string{cabinetexchange.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cec.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinetexchange.CabinetTable,
			Columns: []string{cabinetexchange.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetExchange.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetExchangeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cec *CabinetExchangeCreate) OnConflict(opts ...sql.ConflictOption) *CabinetExchangeUpsertOne {
	cec.conflict = opts
	return &CabinetExchangeUpsertOne{
		create: cec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetExchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cec *CabinetExchangeCreate) OnConflictColumns(columns ...string) *CabinetExchangeUpsertOne {
	cec.conflict = append(cec.conflict, sql.ConflictColumns(columns...))
	return &CabinetExchangeUpsertOne{
		create: cec,
	}
}

type (
	// CabinetExchangeUpsertOne is the builder for "upsert"-ing
	//  one CabinetExchange node.
	CabinetExchangeUpsertOne struct {
		create *CabinetExchangeCreate
	}

	// CabinetExchangeUpsert is the "OnConflict" setter.
	CabinetExchangeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CabinetExchangeUpsert) SetCreatedAt(v time.Time) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateCreatedAt() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetExchangeUpsert) SetUpdatedAt(v time.Time) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateUpdatedAt() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetExchangeUpsert) SetDeletedAt(v time.Time) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateDeletedAt() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetExchangeUpsert) ClearDeletedAt() *CabinetExchangeUpsert {
	u.SetNull(cabinetexchange.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *CabinetExchangeUpsert) SetCreator(v *model.Modifier) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateCreator() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetExchangeUpsert) ClearCreator() *CabinetExchangeUpsert {
	u.SetNull(cabinetexchange.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetExchangeUpsert) SetLastModifier(v *model.Modifier) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateLastModifier() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetExchangeUpsert) ClearLastModifier() *CabinetExchangeUpsert {
	u.SetNull(cabinetexchange.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CabinetExchangeUpsert) SetRemark(v string) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateRemark() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetExchangeUpsert) ClearRemark() *CabinetExchangeUpsert {
	u.SetNull(cabinetexchange.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetExchangeUpsert) SetRiderID(v uint64) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateRiderID() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldRiderID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetExchangeUpsert) SetCabinetID(v uint64) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateCabinetID() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldCabinetID)
	return u
}

// SetAlternative sets the "alternative" field.
func (u *CabinetExchangeUpsert) SetAlternative(v bool) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldAlternative, v)
	return u
}

// UpdateAlternative sets the "alternative" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateAlternative() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldAlternative)
	return u
}

// SetStep sets the "step" field.
func (u *CabinetExchangeUpsert) SetStep(v uint) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldStep, v)
	return u
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateStep() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldStep)
	return u
}

// AddStep adds v to the "step" field.
func (u *CabinetExchangeUpsert) AddStep(v uint) *CabinetExchangeUpsert {
	u.Add(cabinetexchange.FieldStep, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CabinetExchangeUpsert) SetStatus(v uint) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateStatus() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CabinetExchangeUpsert) AddStatus(v uint) *CabinetExchangeUpsert {
	u.Add(cabinetexchange.FieldStatus, v)
	return u
}

// SetBinIndex sets the "bin_index" field.
func (u *CabinetExchangeUpsert) SetBinIndex(v uint) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldBinIndex, v)
	return u
}

// UpdateBinIndex sets the "bin_index" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateBinIndex() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldBinIndex)
	return u
}

// AddBinIndex adds v to the "bin_index" field.
func (u *CabinetExchangeUpsert) AddBinIndex(v uint) *CabinetExchangeUpsert {
	u.Add(cabinetexchange.FieldBinIndex, v)
	return u
}

// SetBin sets the "bin" field.
func (u *CabinetExchangeUpsert) SetBin(v model.CabinetBin) *CabinetExchangeUpsert {
	u.Set(cabinetexchange.FieldBin, v)
	return u
}

// UpdateBin sets the "bin" field to the value that was provided on create.
func (u *CabinetExchangeUpsert) UpdateBin() *CabinetExchangeUpsert {
	u.SetExcluded(cabinetexchange.FieldBin)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CabinetExchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CabinetExchangeUpsertOne) UpdateNewValues() *CabinetExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinetexchange.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(cabinetexchange.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CabinetExchange.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CabinetExchangeUpsertOne) Ignore() *CabinetExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetExchangeUpsertOne) DoNothing() *CabinetExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetExchangeCreate.OnConflict
// documentation for more info.
func (u *CabinetExchangeUpsertOne) Update(set func(*CabinetExchangeUpsert)) *CabinetExchangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetExchangeUpsertOne) SetCreatedAt(v time.Time) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateCreatedAt() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetExchangeUpsertOne) SetUpdatedAt(v time.Time) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateUpdatedAt() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetExchangeUpsertOne) SetDeletedAt(v time.Time) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateDeletedAt() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetExchangeUpsertOne) ClearDeletedAt() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetExchangeUpsertOne) SetCreator(v *model.Modifier) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateCreator() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetExchangeUpsertOne) ClearCreator() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetExchangeUpsertOne) SetLastModifier(v *model.Modifier) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateLastModifier() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetExchangeUpsertOne) ClearLastModifier() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetExchangeUpsertOne) SetRemark(v string) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateRemark() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetExchangeUpsertOne) ClearRemark() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetExchangeUpsertOne) SetRiderID(v uint64) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateRiderID() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetExchangeUpsertOne) SetCabinetID(v uint64) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateCabinetID() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCabinetID()
	})
}

// SetAlternative sets the "alternative" field.
func (u *CabinetExchangeUpsertOne) SetAlternative(v bool) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetAlternative(v)
	})
}

// UpdateAlternative sets the "alternative" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateAlternative() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateAlternative()
	})
}

// SetStep sets the "step" field.
func (u *CabinetExchangeUpsertOne) SetStep(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *CabinetExchangeUpsertOne) AddStep(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateStep() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateStep()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetExchangeUpsertOne) SetStatus(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetExchangeUpsertOne) AddStatus(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateStatus() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateStatus()
	})
}

// SetBinIndex sets the "bin_index" field.
func (u *CabinetExchangeUpsertOne) SetBinIndex(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetBinIndex(v)
	})
}

// AddBinIndex adds v to the "bin_index" field.
func (u *CabinetExchangeUpsertOne) AddBinIndex(v uint) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddBinIndex(v)
	})
}

// UpdateBinIndex sets the "bin_index" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateBinIndex() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateBinIndex()
	})
}

// SetBin sets the "bin" field.
func (u *CabinetExchangeUpsertOne) SetBin(v model.CabinetBin) *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetBin(v)
	})
}

// UpdateBin sets the "bin" field to the value that was provided on create.
func (u *CabinetExchangeUpsertOne) UpdateBin() *CabinetExchangeUpsertOne {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateBin()
	})
}

// Exec executes the query.
func (u *CabinetExchangeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetExchangeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetExchangeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetExchangeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetExchangeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CabinetExchangeCreateBulk is the builder for creating many CabinetExchange entities in bulk.
type CabinetExchangeCreateBulk struct {
	config
	builders []*CabinetExchangeCreate
	conflict []sql.ConflictOption
}

// Save creates the CabinetExchange entities in the database.
func (cecb *CabinetExchangeCreateBulk) Save(ctx context.Context) ([]*CabinetExchange, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CabinetExchange, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetExchangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CabinetExchangeCreateBulk) SaveX(ctx context.Context) []*CabinetExchange {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CabinetExchangeCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CabinetExchangeCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetExchange.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetExchangeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cecb *CabinetExchangeCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetExchangeUpsertBulk {
	cecb.conflict = opts
	return &CabinetExchangeUpsertBulk{
		create: cecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetExchange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cecb *CabinetExchangeCreateBulk) OnConflictColumns(columns ...string) *CabinetExchangeUpsertBulk {
	cecb.conflict = append(cecb.conflict, sql.ConflictColumns(columns...))
	return &CabinetExchangeUpsertBulk{
		create: cecb,
	}
}

// CabinetExchangeUpsertBulk is the builder for "upsert"-ing
// a bulk of CabinetExchange nodes.
type CabinetExchangeUpsertBulk struct {
	create *CabinetExchangeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CabinetExchange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CabinetExchangeUpsertBulk) UpdateNewValues() *CabinetExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinetexchange.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(cabinetexchange.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetExchange.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CabinetExchangeUpsertBulk) Ignore() *CabinetExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetExchangeUpsertBulk) DoNothing() *CabinetExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetExchangeCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetExchangeUpsertBulk) Update(set func(*CabinetExchangeUpsert)) *CabinetExchangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetExchangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetExchangeUpsertBulk) SetCreatedAt(v time.Time) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateCreatedAt() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetExchangeUpsertBulk) SetUpdatedAt(v time.Time) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateUpdatedAt() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetExchangeUpsertBulk) SetDeletedAt(v time.Time) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateDeletedAt() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetExchangeUpsertBulk) ClearDeletedAt() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetExchangeUpsertBulk) SetCreator(v *model.Modifier) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateCreator() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetExchangeUpsertBulk) ClearCreator() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetExchangeUpsertBulk) SetLastModifier(v *model.Modifier) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateLastModifier() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetExchangeUpsertBulk) ClearLastModifier() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetExchangeUpsertBulk) SetRemark(v string) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateRemark() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetExchangeUpsertBulk) ClearRemark() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CabinetExchangeUpsertBulk) SetRiderID(v uint64) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateRiderID() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetExchangeUpsertBulk) SetCabinetID(v uint64) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateCabinetID() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateCabinetID()
	})
}

// SetAlternative sets the "alternative" field.
func (u *CabinetExchangeUpsertBulk) SetAlternative(v bool) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetAlternative(v)
	})
}

// UpdateAlternative sets the "alternative" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateAlternative() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateAlternative()
	})
}

// SetStep sets the "step" field.
func (u *CabinetExchangeUpsertBulk) SetStep(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *CabinetExchangeUpsertBulk) AddStep(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateStep() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateStep()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetExchangeUpsertBulk) SetStatus(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetExchangeUpsertBulk) AddStatus(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateStatus() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateStatus()
	})
}

// SetBinIndex sets the "bin_index" field.
func (u *CabinetExchangeUpsertBulk) SetBinIndex(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetBinIndex(v)
	})
}

// AddBinIndex adds v to the "bin_index" field.
func (u *CabinetExchangeUpsertBulk) AddBinIndex(v uint) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.AddBinIndex(v)
	})
}

// UpdateBinIndex sets the "bin_index" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateBinIndex() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateBinIndex()
	})
}

// SetBin sets the "bin" field.
func (u *CabinetExchangeUpsertBulk) SetBin(v model.CabinetBin) *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.SetBin(v)
	})
}

// UpdateBin sets the "bin" field to the value that was provided on create.
func (u *CabinetExchangeUpsertBulk) UpdateBin() *CabinetExchangeUpsertBulk {
	return u.Update(func(s *CabinetExchangeUpsert) {
		s.UpdateBin()
	})
}

// Exec executes the query.
func (u *CabinetExchangeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetExchangeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetExchangeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetExchangeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
