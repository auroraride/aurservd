// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetManagerQuery is the builder for querying AssetManager entities.
type AssetManagerQuery struct {
	config
	ctx                  *QueryContext
	order                []assetmanager.OrderOption
	inters               []Interceptor
	predicates           []predicate.AssetManager
	withRole             *AssetRoleQuery
	withBelongWarehouses *WarehouseQuery
	withDutyWarehouse    *WarehouseQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetManagerQuery builder.
func (amq *AssetManagerQuery) Where(ps ...predicate.AssetManager) *AssetManagerQuery {
	amq.predicates = append(amq.predicates, ps...)
	return amq
}

// Limit the number of records to be returned by this query.
func (amq *AssetManagerQuery) Limit(limit int) *AssetManagerQuery {
	amq.ctx.Limit = &limit
	return amq
}

// Offset to start from.
func (amq *AssetManagerQuery) Offset(offset int) *AssetManagerQuery {
	amq.ctx.Offset = &offset
	return amq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amq *AssetManagerQuery) Unique(unique bool) *AssetManagerQuery {
	amq.ctx.Unique = &unique
	return amq
}

// Order specifies how the records should be ordered.
func (amq *AssetManagerQuery) Order(o ...assetmanager.OrderOption) *AssetManagerQuery {
	amq.order = append(amq.order, o...)
	return amq
}

// QueryRole chains the current query on the "role" edge.
func (amq *AssetManagerQuery) QueryRole() *AssetRoleQuery {
	query := (&AssetRoleClient{config: amq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmanager.Table, assetmanager.FieldID, selector),
			sqlgraph.To(assetrole.Table, assetrole.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmanager.RoleTable, assetmanager.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBelongWarehouses chains the current query on the "belong_warehouses" edge.
func (amq *AssetManagerQuery) QueryBelongWarehouses() *WarehouseQuery {
	query := (&WarehouseClient{config: amq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmanager.Table, assetmanager.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, assetmanager.BelongWarehousesTable, assetmanager.BelongWarehousesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDutyWarehouse chains the current query on the "duty_warehouse" edge.
func (amq *AssetManagerQuery) QueryDutyWarehouse() *WarehouseQuery {
	query := (&WarehouseClient{config: amq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmanager.Table, assetmanager.FieldID, selector),
			sqlgraph.To(warehouse.Table, warehouse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmanager.DutyWarehouseTable, assetmanager.DutyWarehouseColumn),
		)
		fromU = sqlgraph.SetNeighbors(amq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetManager entity from the query.
// Returns a *NotFoundError when no AssetManager was found.
func (amq *AssetManagerQuery) First(ctx context.Context) (*AssetManager, error) {
	nodes, err := amq.Limit(1).All(setContextOp(ctx, amq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assetmanager.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amq *AssetManagerQuery) FirstX(ctx context.Context) *AssetManager {
	node, err := amq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetManager ID from the query.
// Returns a *NotFoundError when no AssetManager ID was found.
func (amq *AssetManagerQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = amq.Limit(1).IDs(setContextOp(ctx, amq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assetmanager.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amq *AssetManagerQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := amq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetManager entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetManager entity is found.
// Returns a *NotFoundError when no AssetManager entities are found.
func (amq *AssetManagerQuery) Only(ctx context.Context) (*AssetManager, error) {
	nodes, err := amq.Limit(2).All(setContextOp(ctx, amq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assetmanager.Label}
	default:
		return nil, &NotSingularError{assetmanager.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amq *AssetManagerQuery) OnlyX(ctx context.Context) *AssetManager {
	node, err := amq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetManager ID in the query.
// Returns a *NotSingularError when more than one AssetManager ID is found.
// Returns a *NotFoundError when no entities are found.
func (amq *AssetManagerQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = amq.Limit(2).IDs(setContextOp(ctx, amq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assetmanager.Label}
	default:
		err = &NotSingularError{assetmanager.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amq *AssetManagerQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := amq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetManagers.
func (amq *AssetManagerQuery) All(ctx context.Context) ([]*AssetManager, error) {
	ctx = setContextOp(ctx, amq.ctx, "All")
	if err := amq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetManager, *AssetManagerQuery]()
	return withInterceptors[[]*AssetManager](ctx, amq, qr, amq.inters)
}

// AllX is like All, but panics if an error occurs.
func (amq *AssetManagerQuery) AllX(ctx context.Context) []*AssetManager {
	nodes, err := amq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetManager IDs.
func (amq *AssetManagerQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if amq.ctx.Unique == nil && amq.path != nil {
		amq.Unique(true)
	}
	ctx = setContextOp(ctx, amq.ctx, "IDs")
	if err = amq.Select(assetmanager.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amq *AssetManagerQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := amq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amq *AssetManagerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, amq.ctx, "Count")
	if err := amq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, amq, querierCount[*AssetManagerQuery](), amq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (amq *AssetManagerQuery) CountX(ctx context.Context) int {
	count, err := amq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amq *AssetManagerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, amq.ctx, "Exist")
	switch _, err := amq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (amq *AssetManagerQuery) ExistX(ctx context.Context) bool {
	exist, err := amq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetManagerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amq *AssetManagerQuery) Clone() *AssetManagerQuery {
	if amq == nil {
		return nil
	}
	return &AssetManagerQuery{
		config:               amq.config,
		ctx:                  amq.ctx.Clone(),
		order:                append([]assetmanager.OrderOption{}, amq.order...),
		inters:               append([]Interceptor{}, amq.inters...),
		predicates:           append([]predicate.AssetManager{}, amq.predicates...),
		withRole:             amq.withRole.Clone(),
		withBelongWarehouses: amq.withBelongWarehouses.Clone(),
		withDutyWarehouse:    amq.withDutyWarehouse.Clone(),
		// clone intermediate query.
		sql:  amq.sql.Clone(),
		path: amq.path,
	}
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AssetManagerQuery) WithRole(opts ...func(*AssetRoleQuery)) *AssetManagerQuery {
	query := (&AssetRoleClient{config: amq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amq.withRole = query
	return amq
}

// WithBelongWarehouses tells the query-builder to eager-load the nodes that are connected to
// the "belong_warehouses" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AssetManagerQuery) WithBelongWarehouses(opts ...func(*WarehouseQuery)) *AssetManagerQuery {
	query := (&WarehouseClient{config: amq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amq.withBelongWarehouses = query
	return amq
}

// WithDutyWarehouse tells the query-builder to eager-load the nodes that are connected to
// the "duty_warehouse" edge. The optional arguments are used to configure the query builder of the edge.
func (amq *AssetManagerQuery) WithDutyWarehouse(opts ...func(*WarehouseQuery)) *AssetManagerQuery {
	query := (&WarehouseClient{config: amq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amq.withDutyWarehouse = query
	return amq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetManager.Query().
//		GroupBy(assetmanager.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (amq *AssetManagerQuery) GroupBy(field string, fields ...string) *AssetManagerGroupBy {
	amq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetManagerGroupBy{build: amq}
	grbuild.flds = &amq.ctx.Fields
	grbuild.label = assetmanager.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetManager.Query().
//		Select(assetmanager.FieldCreatedAt).
//		Scan(ctx, &v)
func (amq *AssetManagerQuery) Select(fields ...string) *AssetManagerSelect {
	amq.ctx.Fields = append(amq.ctx.Fields, fields...)
	sbuild := &AssetManagerSelect{AssetManagerQuery: amq}
	sbuild.label = assetmanager.Label
	sbuild.flds, sbuild.scan = &amq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetManagerSelect configured with the given aggregations.
func (amq *AssetManagerQuery) Aggregate(fns ...AggregateFunc) *AssetManagerSelect {
	return amq.Select().Aggregate(fns...)
}

func (amq *AssetManagerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range amq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, amq); err != nil {
				return err
			}
		}
	}
	for _, f := range amq.ctx.Fields {
		if !assetmanager.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if amq.path != nil {
		prev, err := amq.path(ctx)
		if err != nil {
			return err
		}
		amq.sql = prev
	}
	return nil
}

func (amq *AssetManagerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetManager, error) {
	var (
		nodes       = []*AssetManager{}
		_spec       = amq.querySpec()
		loadedTypes = [3]bool{
			amq.withRole != nil,
			amq.withBelongWarehouses != nil,
			amq.withDutyWarehouse != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetManager).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetManager{config: amq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(amq.modifiers) > 0 {
		_spec.Modifiers = amq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, amq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := amq.withRole; query != nil {
		if err := amq.loadRole(ctx, query, nodes, nil,
			func(n *AssetManager, e *AssetRole) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := amq.withBelongWarehouses; query != nil {
		if err := amq.loadBelongWarehouses(ctx, query, nodes,
			func(n *AssetManager) { n.Edges.BelongWarehouses = []*Warehouse{} },
			func(n *AssetManager, e *Warehouse) { n.Edges.BelongWarehouses = append(n.Edges.BelongWarehouses, e) }); err != nil {
			return nil, err
		}
	}
	if query := amq.withDutyWarehouse; query != nil {
		if err := amq.loadDutyWarehouse(ctx, query, nodes, nil,
			func(n *AssetManager, e *Warehouse) { n.Edges.DutyWarehouse = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (amq *AssetManagerQuery) loadRole(ctx context.Context, query *AssetRoleQuery, nodes []*AssetManager, init func(*AssetManager), assign func(*AssetManager, *AssetRole)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetManager)
	for i := range nodes {
		if nodes[i].RoleID == nil {
			continue
		}
		fk := *nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assetrole.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (amq *AssetManagerQuery) loadBelongWarehouses(ctx context.Context, query *WarehouseQuery, nodes []*AssetManager, init func(*AssetManager), assign func(*AssetManager, *Warehouse)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*AssetManager)
	nids := make(map[uint64]map[*AssetManager]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(assetmanager.BelongWarehousesTable)
		s.Join(joinT).On(s.C(warehouse.FieldID), joinT.C(assetmanager.BelongWarehousesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(assetmanager.BelongWarehousesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(assetmanager.BelongWarehousesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*AssetManager]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Warehouse](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "belong_warehouses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (amq *AssetManagerQuery) loadDutyWarehouse(ctx context.Context, query *WarehouseQuery, nodes []*AssetManager, init func(*AssetManager), assign func(*AssetManager, *Warehouse)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetManager)
	for i := range nodes {
		if nodes[i].WarehouseID == nil {
			continue
		}
		fk := *nodes[i].WarehouseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(warehouse.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "warehouse_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (amq *AssetManagerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := amq.querySpec()
	if len(amq.modifiers) > 0 {
		_spec.Modifiers = amq.modifiers
	}
	_spec.Node.Columns = amq.ctx.Fields
	if len(amq.ctx.Fields) > 0 {
		_spec.Unique = amq.ctx.Unique != nil && *amq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, amq.driver, _spec)
}

func (amq *AssetManagerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assetmanager.Table, assetmanager.Columns, sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64))
	_spec.From = amq.sql
	if unique := amq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if amq.path != nil {
		_spec.Unique = true
	}
	if fields := amq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetmanager.FieldID)
		for i := range fields {
			if fields[i] != assetmanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if amq.withRole != nil {
			_spec.Node.AddColumnOnce(assetmanager.FieldRoleID)
		}
		if amq.withDutyWarehouse != nil {
			_spec.Node.AddColumnOnce(assetmanager.FieldWarehouseID)
		}
	}
	if ps := amq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amq *AssetManagerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amq.driver.Dialect())
	t1 := builder.Table(assetmanager.Table)
	columns := amq.ctx.Fields
	if len(columns) == 0 {
		columns = assetmanager.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amq.sql != nil {
		selector = amq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amq.ctx.Unique != nil && *amq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range amq.modifiers {
		m(selector)
	}
	for _, p := range amq.predicates {
		p(selector)
	}
	for _, p := range amq.order {
		p(selector)
	}
	if offset := amq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (amq *AssetManagerQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetManagerSelect {
	amq.modifiers = append(amq.modifiers, modifiers...)
	return amq.Select()
}

type AssetManagerQueryWith string

var (
	AssetManagerQueryWithRole             AssetManagerQueryWith = "Role"
	AssetManagerQueryWithBelongWarehouses AssetManagerQueryWith = "BelongWarehouses"
	AssetManagerQueryWithDutyWarehouse    AssetManagerQueryWith = "DutyWarehouse"
)

func (amq *AssetManagerQuery) With(withEdges ...AssetManagerQueryWith) *AssetManagerQuery {
	for _, v := range withEdges {
		switch v {
		case AssetManagerQueryWithRole:
			amq.WithRole()
		case AssetManagerQueryWithBelongWarehouses:
			amq.WithBelongWarehouses()
		case AssetManagerQueryWithDutyWarehouse:
			amq.WithDutyWarehouse()
		}
	}
	return amq
}

// AssetManagerGroupBy is the group-by builder for AssetManager entities.
type AssetManagerGroupBy struct {
	selector
	build *AssetManagerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amgb *AssetManagerGroupBy) Aggregate(fns ...AggregateFunc) *AssetManagerGroupBy {
	amgb.fns = append(amgb.fns, fns...)
	return amgb
}

// Scan applies the selector query and scans the result into the given value.
func (amgb *AssetManagerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, amgb.build.ctx, "GroupBy")
	if err := amgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetManagerQuery, *AssetManagerGroupBy](ctx, amgb.build, amgb, amgb.build.inters, v)
}

func (amgb *AssetManagerGroupBy) sqlScan(ctx context.Context, root *AssetManagerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(amgb.fns))
	for _, fn := range amgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*amgb.flds)+len(amgb.fns))
		for _, f := range *amgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*amgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetManagerSelect is the builder for selecting fields of AssetManager entities.
type AssetManagerSelect struct {
	*AssetManagerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ams *AssetManagerSelect) Aggregate(fns ...AggregateFunc) *AssetManagerSelect {
	ams.fns = append(ams.fns, fns...)
	return ams
}

// Scan applies the selector query and scans the result into the given value.
func (ams *AssetManagerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ams.ctx, "Select")
	if err := ams.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetManagerQuery, *AssetManagerSelect](ctx, ams.AssetManagerQuery, ams, ams.inters, v)
}

func (ams *AssetManagerSelect) sqlScan(ctx context.Context, root *AssetManagerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ams.fns))
	for _, fn := range ams.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ams.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ams.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ams *AssetManagerSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetManagerSelect {
	ams.modifiers = append(ams.modifiers, modifiers...)
	return ams
}
