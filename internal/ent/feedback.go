// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/feedback"
)

// Feedback is the model entity for the Feedback schema.
type Feedback struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 企业ID
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// AgentID holds the value of the "agent_id" field.
	AgentID *uint64 `json:"agent_id,omitempty"`
	// 反馈内容
	Content string `json:"content,omitempty"`
	// 反馈类型
	Type uint8 `json:"type,omitempty"`
	// 反馈来源
	Source uint8 `json:"source,omitempty"`
	// 反馈图片
	URL []string `json:"url,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 电话
	Phone string `json:"phone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FeedbackQuery when eager-loading is set.
	Edges        FeedbackEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FeedbackEdges holds the relations/edges for other nodes in the graph.
type FeedbackEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Agent holds the value of the agent edge.
	Agent *Agent `json:"agent,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedbackEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// AgentOrErr returns the Agent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FeedbackEdges) AgentOrErr() (*Agent, error) {
	if e.loadedTypes[1] {
		if e.Agent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: agent.Label}
		}
		return e.Agent, nil
	}
	return nil, &NotLoadedError{edge: "agent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Feedback) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case feedback.FieldURL:
			values[i] = new([]byte)
		case feedback.FieldID, feedback.FieldEnterpriseID, feedback.FieldAgentID, feedback.FieldType, feedback.FieldSource:
			values[i] = new(sql.NullInt64)
		case feedback.FieldContent, feedback.FieldName, feedback.FieldPhone:
			values[i] = new(sql.NullString)
		case feedback.FieldCreatedAt, feedback.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Feedback fields.
func (f *Feedback) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case feedback.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = uint64(value.Int64)
		case feedback.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case feedback.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		case feedback.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				f.EnterpriseID = new(uint64)
				*f.EnterpriseID = uint64(value.Int64)
			}
		case feedback.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				f.AgentID = new(uint64)
				*f.AgentID = uint64(value.Int64)
			}
		case feedback.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				f.Content = value.String
			}
		case feedback.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				f.Type = uint8(value.Int64)
			}
		case feedback.FieldSource:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				f.Source = uint8(value.Int64)
			}
		case feedback.FieldURL:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &f.URL); err != nil {
					return fmt.Errorf("unmarshal field url: %w", err)
				}
			}
		case feedback.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case feedback.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				f.Phone = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Feedback.
// This includes values selected through modifiers, order, etc.
func (f *Feedback) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryEnterprise queries the "enterprise" edge of the Feedback entity.
func (f *Feedback) QueryEnterprise() *EnterpriseQuery {
	return NewFeedbackClient(f.config).QueryEnterprise(f)
}

// QueryAgent queries the "agent" edge of the Feedback entity.
func (f *Feedback) QueryAgent() *AgentQuery {
	return NewFeedbackClient(f.config).QueryAgent(f)
}

// Update returns a builder for updating this Feedback.
// Note that you need to call Feedback.Unwrap() before calling this method if this Feedback
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Feedback) Update() *FeedbackUpdateOne {
	return NewFeedbackClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Feedback entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Feedback) Unwrap() *Feedback {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Feedback is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Feedback) String() string {
	var builder strings.Builder
	builder.WriteString("Feedback(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := f.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := f.AgentID; v != nil {
		builder.WriteString("agent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(f.Content)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", f.Type))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", f.Source))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(fmt.Sprintf("%v", f.URL))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(f.Phone)
	builder.WriteByte(')')
	return builder.String()
}

// Feedbacks is a parsable slice of Feedback.
type Feedbacks []*Feedback
