// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
)

// BatteryModelCreate is the builder for creating a BatteryModel entity.
type BatteryModelCreate struct {
	config
	mutation *BatteryModelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetModel sets the "model" field.
func (bmc *BatteryModelCreate) SetModel(s string) *BatteryModelCreate {
	bmc.mutation.SetModel(s)
	return bmc
}

// SetCreatedAt sets the "created_at" field.
func (bmc *BatteryModelCreate) SetCreatedAt(t time.Time) *BatteryModelCreate {
	bmc.mutation.SetCreatedAt(t)
	return bmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bmc *BatteryModelCreate) SetNillableCreatedAt(t *time.Time) *BatteryModelCreate {
	if t != nil {
		bmc.SetCreatedAt(*t)
	}
	return bmc
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmc *BatteryModelCreate) AddCabinetIDs(ids ...uint64) *BatteryModelCreate {
	bmc.mutation.AddCabinetIDs(ids...)
	return bmc
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmc *BatteryModelCreate) AddCabinets(c ...*Cabinet) *BatteryModelCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmc.AddCabinetIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmc *BatteryModelCreate) Mutation() *BatteryModelMutation {
	return bmc.mutation
}

// Save creates the BatteryModel in the database.
func (bmc *BatteryModelCreate) Save(ctx context.Context) (*BatteryModel, error) {
	bmc.defaults()
	return withHooks(ctx, bmc.sqlSave, bmc.mutation, bmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bmc *BatteryModelCreate) SaveX(ctx context.Context) *BatteryModel {
	v, err := bmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmc *BatteryModelCreate) Exec(ctx context.Context) error {
	_, err := bmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmc *BatteryModelCreate) ExecX(ctx context.Context) {
	if err := bmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmc *BatteryModelCreate) defaults() {
	if _, ok := bmc.mutation.CreatedAt(); !ok {
		v := batterymodel.DefaultCreatedAt()
		bmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bmc *BatteryModelCreate) check() error {
	if _, ok := bmc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "BatteryModel.model"`)}
	}
	if _, ok := bmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryModel.created_at"`)}
	}
	return nil
}

func (bmc *BatteryModelCreate) sqlSave(ctx context.Context) (*BatteryModel, error) {
	if err := bmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bmc.mutation.id = &_node.ID
	bmc.mutation.done = true
	return _node, nil
}

func (bmc *BatteryModelCreate) createSpec() (*BatteryModel, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryModel{config: bmc.config}
		_spec = sqlgraph.NewCreateSpec(batterymodel.Table, sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bmc.conflict
	if value, ok := bmc.mutation.Model(); ok {
		_spec.SetField(batterymodel.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := bmc.mutation.CreatedAt(); ok {
		_spec.SetField(batterymodel.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := bmc.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModel.Create().
//		SetModel(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelUpsert) {
//			SetModel(v+v).
//		}).
//		Exec(ctx)
func (bmc *BatteryModelCreate) OnConflict(opts ...sql.ConflictOption) *BatteryModelUpsertOne {
	bmc.conflict = opts
	return &BatteryModelUpsertOne{
		create: bmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bmc *BatteryModelCreate) OnConflictColumns(columns ...string) *BatteryModelUpsertOne {
	bmc.conflict = append(bmc.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelUpsertOne{
		create: bmc,
	}
}

type (
	// BatteryModelUpsertOne is the builder for "upsert"-ing
	//  one BatteryModel node.
	BatteryModelUpsertOne struct {
		create *BatteryModelCreate
	}

	// BatteryModelUpsert is the "OnConflict" setter.
	BatteryModelUpsert struct {
		*sql.UpdateSet
	}
)

// SetModel sets the "model" field.
func (u *BatteryModelUpsert) SetModel(v string) *BatteryModelUpsert {
	u.Set(batterymodel.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateModel() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldModel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryModelUpsertOne) UpdateNewValues() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batterymodel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryModelUpsertOne) Ignore() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelUpsertOne) DoNothing() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelCreate.OnConflict
// documentation for more info.
func (u *BatteryModelUpsertOne) Update(set func(*BatteryModelUpsert)) *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetModel sets the "model" field.
func (u *BatteryModelUpsertOne) SetModel(v string) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateModel() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryModelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryModelUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryModelUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryModelCreateBulk is the builder for creating many BatteryModel entities in bulk.
type BatteryModelCreateBulk struct {
	config
	err      error
	builders []*BatteryModelCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryModel entities in the database.
func (bmcb *BatteryModelCreateBulk) Save(ctx context.Context) ([]*BatteryModel, error) {
	if bmcb.err != nil {
		return nil, bmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bmcb.builders))
	nodes := make([]*BatteryModel, len(bmcb.builders))
	mutators := make([]Mutator, len(bmcb.builders))
	for i := range bmcb.builders {
		func(i int, root context.Context) {
			builder := bmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bmcb *BatteryModelCreateBulk) SaveX(ctx context.Context) []*BatteryModel {
	v, err := bmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmcb *BatteryModelCreateBulk) Exec(ctx context.Context) error {
	_, err := bmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmcb *BatteryModelCreateBulk) ExecX(ctx context.Context) {
	if err := bmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelUpsert) {
//			SetModel(v+v).
//		}).
//		Exec(ctx)
func (bmcb *BatteryModelCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryModelUpsertBulk {
	bmcb.conflict = opts
	return &BatteryModelUpsertBulk{
		create: bmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bmcb *BatteryModelCreateBulk) OnConflictColumns(columns ...string) *BatteryModelUpsertBulk {
	bmcb.conflict = append(bmcb.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelUpsertBulk{
		create: bmcb,
	}
}

// BatteryModelUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryModel nodes.
type BatteryModelUpsertBulk struct {
	create *BatteryModelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryModelUpsertBulk) UpdateNewValues() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batterymodel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryModelUpsertBulk) Ignore() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelUpsertBulk) DoNothing() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryModelUpsertBulk) Update(set func(*BatteryModelUpsert)) *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetModel sets the "model" field.
func (u *BatteryModelUpsertBulk) SetModel(v string) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateModel() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryModelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryModelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
