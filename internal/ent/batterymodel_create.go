// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
)

// BatteryModelCreate is the builder for creating a BatteryModel entity.
type BatteryModelCreate struct {
	config
	mutation *BatteryModelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bmc *BatteryModelCreate) SetCreatedAt(t time.Time) *BatteryModelCreate {
	bmc.mutation.SetCreatedAt(t)
	return bmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bmc *BatteryModelCreate) SetNillableCreatedAt(t *time.Time) *BatteryModelCreate {
	if t != nil {
		bmc.SetCreatedAt(*t)
	}
	return bmc
}

// SetUpdatedAt sets the "updated_at" field.
func (bmc *BatteryModelCreate) SetUpdatedAt(t time.Time) *BatteryModelCreate {
	bmc.mutation.SetUpdatedAt(t)
	return bmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bmc *BatteryModelCreate) SetNillableUpdatedAt(t *time.Time) *BatteryModelCreate {
	if t != nil {
		bmc.SetUpdatedAt(*t)
	}
	return bmc
}

// SetDeletedAt sets the "deleted_at" field.
func (bmc *BatteryModelCreate) SetDeletedAt(t time.Time) *BatteryModelCreate {
	bmc.mutation.SetDeletedAt(t)
	return bmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmc *BatteryModelCreate) SetNillableDeletedAt(t *time.Time) *BatteryModelCreate {
	if t != nil {
		bmc.SetDeletedAt(*t)
	}
	return bmc
}

// SetCreator sets the "creator" field.
func (bmc *BatteryModelCreate) SetCreator(m *model.Modifier) *BatteryModelCreate {
	bmc.mutation.SetCreator(m)
	return bmc
}

// SetLastModifier sets the "last_modifier" field.
func (bmc *BatteryModelCreate) SetLastModifier(m *model.Modifier) *BatteryModelCreate {
	bmc.mutation.SetLastModifier(m)
	return bmc
}

// SetRemark sets the "remark" field.
func (bmc *BatteryModelCreate) SetRemark(s string) *BatteryModelCreate {
	bmc.mutation.SetRemark(s)
	return bmc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmc *BatteryModelCreate) SetNillableRemark(s *string) *BatteryModelCreate {
	if s != nil {
		bmc.SetRemark(*s)
	}
	return bmc
}

// SetVoltage sets the "voltage" field.
func (bmc *BatteryModelCreate) SetVoltage(s string) *BatteryModelCreate {
	bmc.mutation.SetVoltage(s)
	return bmc
}

// SetCapacity sets the "capacity" field.
func (bmc *BatteryModelCreate) SetCapacity(s string) *BatteryModelCreate {
	bmc.mutation.SetCapacity(s)
	return bmc
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmc *BatteryModelCreate) AddCabinetIDs(ids ...uint64) *BatteryModelCreate {
	bmc.mutation.AddCabinetIDs(ids...)
	return bmc
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmc *BatteryModelCreate) AddCabinets(c ...*Cabinet) *BatteryModelCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmc.AddCabinetIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmc *BatteryModelCreate) Mutation() *BatteryModelMutation {
	return bmc.mutation
}

// Save creates the BatteryModel in the database.
func (bmc *BatteryModelCreate) Save(ctx context.Context) (*BatteryModel, error) {
	var (
		err  error
		node *BatteryModel
	)
	bmc.defaults()
	if len(bmc.hooks) == 0 {
		if err = bmc.check(); err != nil {
			return nil, err
		}
		node, err = bmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BatteryModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bmc.check(); err != nil {
				return nil, err
			}
			bmc.mutation = mutation
			if node, err = bmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bmc.hooks) - 1; i >= 0; i-- {
			if bmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bmc *BatteryModelCreate) SaveX(ctx context.Context) *BatteryModel {
	v, err := bmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmc *BatteryModelCreate) Exec(ctx context.Context) error {
	_, err := bmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmc *BatteryModelCreate) ExecX(ctx context.Context) {
	if err := bmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmc *BatteryModelCreate) defaults() {
	if _, ok := bmc.mutation.CreatedAt(); !ok {
		v := batterymodel.DefaultCreatedAt()
		bmc.mutation.SetCreatedAt(v)
	}
	if _, ok := bmc.mutation.UpdatedAt(); !ok {
		v := batterymodel.DefaultUpdatedAt()
		bmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bmc *BatteryModelCreate) check() error {
	if _, ok := bmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryModel.created_at"`)}
	}
	if _, ok := bmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatteryModel.updated_at"`)}
	}
	if _, ok := bmc.mutation.Voltage(); !ok {
		return &ValidationError{Name: "voltage", err: errors.New(`ent: missing required field "BatteryModel.voltage"`)}
	}
	if _, ok := bmc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "BatteryModel.capacity"`)}
	}
	return nil
}

func (bmc *BatteryModelCreate) sqlSave(ctx context.Context) (*BatteryModel, error) {
	_node, _spec := bmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (bmc *BatteryModelCreate) createSpec() (*BatteryModel, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryModel{config: bmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: batterymodel.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		}
	)
	_spec.OnConflict = bmc.conflict
	if value, ok := bmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bmc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bmc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := bmc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: batterymodel.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := bmc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: batterymodel.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := bmc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldRemark,
		})
		_node.Remark = &value
	}
	if value, ok := bmc.mutation.Voltage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldVoltage,
		})
		_node.Voltage = value
	}
	if value, ok := bmc.mutation.Capacity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldCapacity,
		})
		_node.Capacity = value
	}
	if nodes := bmc.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   batterymodel.CabinetsTable,
			Columns: []string{batterymodel.CabinetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModel.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (bmc *BatteryModelCreate) OnConflict(opts ...sql.ConflictOption) *BatteryModelUpsertOne {
	bmc.conflict = opts
	return &BatteryModelUpsertOne{
		create: bmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bmc *BatteryModelCreate) OnConflictColumns(columns ...string) *BatteryModelUpsertOne {
	bmc.conflict = append(bmc.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelUpsertOne{
		create: bmc,
	}
}

type (
	// BatteryModelUpsertOne is the builder for "upsert"-ing
	//  one BatteryModel node.
	BatteryModelUpsertOne struct {
		create *BatteryModelCreate
	}

	// BatteryModelUpsert is the "OnConflict" setter.
	BatteryModelUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *BatteryModelUpsert) SetCreatedAt(v time.Time) *BatteryModelUpsert {
	u.Set(batterymodel.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateCreatedAt() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelUpsert) SetUpdatedAt(v time.Time) *BatteryModelUpsert {
	u.Set(batterymodel.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateUpdatedAt() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelUpsert) SetDeletedAt(v time.Time) *BatteryModelUpsert {
	u.Set(batterymodel.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateDeletedAt() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelUpsert) ClearDeletedAt() *BatteryModelUpsert {
	u.SetNull(batterymodel.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *BatteryModelUpsert) SetCreator(v *model.Modifier) *BatteryModelUpsert {
	u.Set(batterymodel.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateCreator() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *BatteryModelUpsert) ClearCreator() *BatteryModelUpsert {
	u.SetNull(batterymodel.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelUpsert) SetLastModifier(v *model.Modifier) *BatteryModelUpsert {
	u.Set(batterymodel.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateLastModifier() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelUpsert) ClearLastModifier() *BatteryModelUpsert {
	u.SetNull(batterymodel.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BatteryModelUpsert) SetRemark(v string) *BatteryModelUpsert {
	u.Set(batterymodel.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateRemark() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelUpsert) ClearRemark() *BatteryModelUpsert {
	u.SetNull(batterymodel.FieldRemark)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelUpsert) SetVoltage(v string) *BatteryModelUpsert {
	u.Set(batterymodel.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateVoltage() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldVoltage)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelUpsert) SetCapacity(v string) *BatteryModelUpsert {
	u.Set(batterymodel.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelUpsert) UpdateCapacity() *BatteryModelUpsert {
	u.SetExcluded(batterymodel.FieldCapacity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *BatteryModelUpsertOne) UpdateNewValues() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batterymodel.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.BatteryModel.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BatteryModelUpsertOne) Ignore() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelUpsertOne) DoNothing() *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelCreate.OnConflict
// documentation for more info.
func (u *BatteryModelUpsertOne) Update(set func(*BatteryModelUpsert)) *BatteryModelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BatteryModelUpsertOne) SetCreatedAt(v time.Time) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateCreatedAt() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelUpsertOne) SetUpdatedAt(v time.Time) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateUpdatedAt() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelUpsertOne) SetDeletedAt(v time.Time) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateDeletedAt() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelUpsertOne) ClearDeletedAt() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *BatteryModelUpsertOne) SetCreator(v *model.Modifier) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateCreator() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *BatteryModelUpsertOne) ClearCreator() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelUpsertOne) SetLastModifier(v *model.Modifier) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateLastModifier() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelUpsertOne) ClearLastModifier() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryModelUpsertOne) SetRemark(v string) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateRemark() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelUpsertOne) ClearRemark() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearRemark()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelUpsertOne) SetVoltage(v string) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateVoltage() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateVoltage()
	})
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelUpsertOne) SetCapacity(v string) *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelUpsertOne) UpdateCapacity() *BatteryModelUpsertOne {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCapacity()
	})
}

// Exec executes the query.
func (u *BatteryModelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryModelUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryModelUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryModelCreateBulk is the builder for creating many BatteryModel entities in bulk.
type BatteryModelCreateBulk struct {
	config
	builders []*BatteryModelCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryModel entities in the database.
func (bmcb *BatteryModelCreateBulk) Save(ctx context.Context) ([]*BatteryModel, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bmcb.builders))
	nodes := make([]*BatteryModel, len(bmcb.builders))
	mutators := make([]Mutator, len(bmcb.builders))
	for i := range bmcb.builders {
		func(i int, root context.Context) {
			builder := bmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryModelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bmcb *BatteryModelCreateBulk) SaveX(ctx context.Context) []*BatteryModel {
	v, err := bmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmcb *BatteryModelCreateBulk) Exec(ctx context.Context) error {
	_, err := bmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmcb *BatteryModelCreateBulk) ExecX(ctx context.Context) {
	if err := bmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModel.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (bmcb *BatteryModelCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryModelUpsertBulk {
	bmcb.conflict = opts
	return &BatteryModelUpsertBulk{
		create: bmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bmcb *BatteryModelCreateBulk) OnConflictColumns(columns ...string) *BatteryModelUpsertBulk {
	bmcb.conflict = append(bmcb.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelUpsertBulk{
		create: bmcb,
	}
}

// BatteryModelUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryModel nodes.
type BatteryModelUpsertBulk struct {
	create *BatteryModelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *BatteryModelUpsertBulk) UpdateNewValues() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batterymodel.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryModel.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *BatteryModelUpsertBulk) Ignore() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelUpsertBulk) DoNothing() *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryModelUpsertBulk) Update(set func(*BatteryModelUpsert)) *BatteryModelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BatteryModelUpsertBulk) SetCreatedAt(v time.Time) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateCreatedAt() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelUpsertBulk) SetUpdatedAt(v time.Time) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateUpdatedAt() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelUpsertBulk) SetDeletedAt(v time.Time) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateDeletedAt() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelUpsertBulk) ClearDeletedAt() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *BatteryModelUpsertBulk) SetCreator(v *model.Modifier) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateCreator() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *BatteryModelUpsertBulk) ClearCreator() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelUpsertBulk) SetLastModifier(v *model.Modifier) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateLastModifier() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelUpsertBulk) ClearLastModifier() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryModelUpsertBulk) SetRemark(v string) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateRemark() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelUpsertBulk) ClearRemark() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.ClearRemark()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelUpsertBulk) SetVoltage(v string) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateVoltage() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateVoltage()
	})
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelUpsertBulk) SetCapacity(v string) *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.SetCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelUpsertBulk) UpdateCapacity() *BatteryModelUpsertBulk {
	return u.Update(func(s *BatteryModelUpsert) {
		s.UpdateCapacity()
	})
}

// Exec executes the query.
func (u *BatteryModelUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryModelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
