// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryfault"
)

// BatteryFault is the model entity for the BatteryFault schema.
type BatteryFault struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 电池ID
	BatteryID uint64 `json:"battery_id,omitempty"`
	// 故障
	Fault model.BatteryFault `json:"fault,omitempty"`
	// 开始时间
	BeginAt time.Time `json:"begin_at,omitempty"`
	// 结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryFaultQuery when eager-loading is set.
	Edges BatteryFaultEdges `json:"edges"`
}

// BatteryFaultEdges holds the relations/edges for other nodes in the graph.
type BatteryFaultEdges struct {
	// 所属电池
	Battery *Battery `json:"battery,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BatteryOrErr returns the Battery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryFaultEdges) BatteryOrErr() (*Battery, error) {
	if e.loadedTypes[0] {
		if e.Battery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: battery.Label}
		}
		return e.Battery, nil
	}
	return nil, &NotLoadedError{edge: "battery"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatteryFault) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batteryfault.FieldFault:
			values[i] = new(model.BatteryFault)
		case batteryfault.FieldID, batteryfault.FieldBatteryID:
			values[i] = new(sql.NullInt64)
		case batteryfault.FieldSn:
			values[i] = new(sql.NullString)
		case batteryfault.FieldCreatedAt, batteryfault.FieldUpdatedAt, batteryfault.FieldBeginAt, batteryfault.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BatteryFault", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatteryFault fields.
func (bf *BatteryFault) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batteryfault.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bf.ID = uint64(value.Int64)
		case batteryfault.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bf.CreatedAt = value.Time
			}
		case batteryfault.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bf.UpdatedAt = value.Time
			}
		case batteryfault.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				bf.Sn = value.String
			}
		case batteryfault.FieldBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_id", values[i])
			} else if value.Valid {
				bf.BatteryID = uint64(value.Int64)
			}
		case batteryfault.FieldFault:
			if value, ok := values[i].(*model.BatteryFault); !ok {
				return fmt.Errorf("unexpected type %T for field fault", values[i])
			} else if value != nil {
				bf.Fault = *value
			}
		case batteryfault.FieldBeginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field begin_at", values[i])
			} else if value.Valid {
				bf.BeginAt = value.Time
			}
		case batteryfault.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				bf.EndAt = value.Time
			}
		}
	}
	return nil
}

// QueryBattery queries the "battery" edge of the BatteryFault entity.
func (bf *BatteryFault) QueryBattery() *BatteryQuery {
	return NewBatteryFaultClient(bf.config).QueryBattery(bf)
}

// Update returns a builder for updating this BatteryFault.
// Note that you need to call BatteryFault.Unwrap() before calling this method if this BatteryFault
// was returned from a transaction, and the transaction was committed or rolled back.
func (bf *BatteryFault) Update() *BatteryFaultUpdateOne {
	return NewBatteryFaultClient(bf.config).UpdateOne(bf)
}

// Unwrap unwraps the BatteryFault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bf *BatteryFault) Unwrap() *BatteryFault {
	_tx, ok := bf.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatteryFault is not a transactional entity")
	}
	bf.config.driver = _tx.drv
	return bf
}

// String implements the fmt.Stringer.
func (bf *BatteryFault) String() string {
	var builder strings.Builder
	builder.WriteString("BatteryFault(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(bf.Sn)
	builder.WriteString(", ")
	builder.WriteString("battery_id=")
	builder.WriteString(fmt.Sprintf("%v", bf.BatteryID))
	builder.WriteString(", ")
	builder.WriteString("fault=")
	builder.WriteString(fmt.Sprintf("%v", bf.Fault))
	builder.WriteString(", ")
	builder.WriteString("begin_at=")
	builder.WriteString(bf.BeginAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(bf.EndAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BatteryFaults is a parsable slice of BatteryFault.
type BatteryFaults []*BatteryFault

func (bf BatteryFaults) config(cfg config) {
	for _i := range bf {
		bf[_i].config = cfg
	}
}
