// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
)

// Pagination returns pagination query builder for AgentQuery.
func (aq *AgentQuery) Pagination(req model.PaginationReq) *AgentQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AgentQuery.
func (aq *AgentQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AgentQuery.
func (aq *AgentQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AllocateQuery.
func (aq *AllocateQuery) Pagination(req model.PaginationReq) *AllocateQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AllocateQuery.
func (aq *AllocateQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AllocateQuery.
func (aq *AllocateQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssistanceQuery.
func (aq *AssistanceQuery) Pagination(req model.PaginationReq) *AssistanceQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AssistanceQuery.
func (aq *AssistanceQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssistanceQuery.
func (aq *AssistanceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AttendanceQuery.
func (aq *AttendanceQuery) Pagination(req model.PaginationReq) *AttendanceQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AttendanceQuery.
func (aq *AttendanceQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AttendanceQuery.
func (aq *AttendanceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryQuery.
func (bq *BatteryQuery) Pagination(req model.PaginationReq) *BatteryQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BatteryQuery.
func (bq *BatteryQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryQuery.
func (bq *BatteryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) Pagination(req model.PaginationReq) *BatteryFlowQuery {
	bfq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bfq
}

// PaginationItems returns pagination query builder for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) PaginationItemsX(req model.PaginationReq) any {
	return bfq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bfq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryModelQuery.
func (bmq *BatteryModelQuery) Pagination(req model.PaginationReq) *BatteryModelQuery {
	bmq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bmq
}

// PaginationItems returns pagination query builder for BatteryModelQuery.
func (bmq *BatteryModelQuery) PaginationItemsX(req model.PaginationReq) any {
	return bmq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryModelQuery.
func (bmq *BatteryModelQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bmq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchQuery.
func (bq *BranchQuery) Pagination(req model.PaginationReq) *BranchQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BranchQuery.
func (bq *BranchQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BranchQuery.
func (bq *BranchQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchContractQuery.
func (bcq *BranchContractQuery) Pagination(req model.PaginationReq) *BranchContractQuery {
	bcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bcq
}

// PaginationItems returns pagination query builder for BranchContractQuery.
func (bcq *BranchContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return bcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BranchContractQuery.
func (bcq *BranchContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BusinessQuery.
func (bq *BusinessQuery) Pagination(req model.PaginationReq) *BusinessQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BusinessQuery.
func (bq *BusinessQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BusinessQuery.
func (bq *BusinessQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetQuery.
func (cq *CabinetQuery) Pagination(req model.PaginationReq) *CabinetQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CabinetQuery.
func (cq *CabinetQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CabinetQuery.
func (cq *CabinetQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) Pagination(req model.PaginationReq) *CabinetFaultQuery {
	cfq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cfq
}

// PaginationItems returns pagination query builder for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) PaginationItemsX(req model.PaginationReq) any {
	return cfq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cfq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CityQuery.
func (cq *CityQuery) Pagination(req model.PaginationReq) *CityQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CityQuery.
func (cq *CityQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CityQuery.
func (cq *CityQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CommissionQuery.
func (cq *CommissionQuery) Pagination(req model.PaginationReq) *CommissionQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CommissionQuery.
func (cq *CommissionQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CommissionQuery.
func (cq *CommissionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ContractQuery.
func (cq *ContractQuery) Pagination(req model.PaginationReq) *ContractQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for ContractQuery.
func (cq *ContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ContractQuery.
func (cq *ContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponQuery.
func (cq *CouponQuery) Pagination(req model.PaginationReq) *CouponQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CouponQuery.
func (cq *CouponQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponQuery.
func (cq *CouponQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) Pagination(req model.PaginationReq) *CouponAssemblyQuery {
	caq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return caq
}

// PaginationItems returns pagination query builder for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) PaginationItemsX(req model.PaginationReq) any {
	return caq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := caq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) Pagination(req model.PaginationReq) *CouponTemplateQuery {
	ctq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ctq
}

// PaginationItems returns pagination query builder for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) PaginationItemsX(req model.PaginationReq) any {
	return ctq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ctq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EbikeQuery.
func (eq *EbikeQuery) Pagination(req model.PaginationReq) *EbikeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EbikeQuery.
func (eq *EbikeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EbikeQuery.
func (eq *EbikeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) Pagination(req model.PaginationReq) *EbikeBrandQuery {
	ebq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebq
}

// PaginationItems returns pagination query builder for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EmployeeQuery.
func (eq *EmployeeQuery) Pagination(req model.PaginationReq) *EmployeeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EmployeeQuery.
func (eq *EmployeeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EmployeeQuery.
func (eq *EmployeeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseQuery.
func (eq *EnterpriseQuery) Pagination(req model.PaginationReq) *EnterpriseQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EnterpriseQuery.
func (eq *EnterpriseQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseQuery.
func (eq *EnterpriseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) Pagination(req model.PaginationReq) *EnterpriseBillQuery {
	ebq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebq
}

// PaginationItems returns pagination query builder for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) Pagination(req model.PaginationReq) *EnterpriseContractQuery {
	ecq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ecq
}

// PaginationItems returns pagination query builder for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return ecq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ecq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) Pagination(req model.PaginationReq) *EnterprisePrepaymentQuery {
	epq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return epq
}

// PaginationItems returns pagination query builder for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) PaginationItemsX(req model.PaginationReq) any {
	return epq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := epq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) Pagination(req model.PaginationReq) *EnterprisePriceQuery {
	epq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return epq
}

// PaginationItems returns pagination query builder for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) PaginationItemsX(req model.PaginationReq) any {
	return epq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := epq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) Pagination(req model.PaginationReq) *EnterpriseStatementQuery {
	esq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return esq
}

// PaginationItems returns pagination query builder for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) PaginationItemsX(req model.PaginationReq) any {
	return esq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := esq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) Pagination(req model.PaginationReq) *EnterpriseStationQuery {
	esq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return esq
}

// PaginationItems returns pagination query builder for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) PaginationItemsX(req model.PaginationReq) any {
	return esq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := esq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExceptionQuery.
func (eq *ExceptionQuery) Pagination(req model.PaginationReq) *ExceptionQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExceptionQuery.
func (eq *ExceptionQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExceptionQuery.
func (eq *ExceptionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExchangeQuery.
func (eq *ExchangeQuery) Pagination(req model.PaginationReq) *ExchangeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExchangeQuery.
func (eq *ExchangeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExchangeQuery.
func (eq *ExchangeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExportQuery.
func (eq *ExportQuery) Pagination(req model.PaginationReq) *ExportQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExportQuery.
func (eq *ExportQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExportQuery.
func (eq *ExportQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for InventoryQuery.
func (iq *InventoryQuery) Pagination(req model.PaginationReq) *InventoryQuery {
	iq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return iq
}

// PaginationItems returns pagination query builder for InventoryQuery.
func (iq *InventoryQuery) PaginationItemsX(req model.PaginationReq) any {
	return iq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for InventoryQuery.
func (iq *InventoryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := iq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ManagerQuery.
func (mq *ManagerQuery) Pagination(req model.PaginationReq) *ManagerQuery {
	mq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return mq
}

// PaginationItems returns pagination query builder for ManagerQuery.
func (mq *ManagerQuery) PaginationItemsX(req model.PaginationReq) any {
	return mq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ManagerQuery.
func (mq *ManagerQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := mq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for OrderQuery.
func (oq *OrderQuery) Pagination(req model.PaginationReq) *OrderQuery {
	oq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return oq
}

// PaginationItems returns pagination query builder for OrderQuery.
func (oq *OrderQuery) PaginationItemsX(req model.PaginationReq) any {
	return oq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for OrderQuery.
func (oq *OrderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := oq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for OrderRefundQuery.
func (orq *OrderRefundQuery) Pagination(req model.PaginationReq) *OrderRefundQuery {
	orq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return orq
}

// PaginationItems returns pagination query builder for OrderRefundQuery.
func (orq *OrderRefundQuery) PaginationItemsX(req model.PaginationReq) any {
	return orq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for OrderRefundQuery.
func (orq *OrderRefundQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := orq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PersonQuery.
func (pq *PersonQuery) Pagination(req model.PaginationReq) *PersonQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationItems returns pagination query builder for PersonQuery.
func (pq *PersonQuery) PaginationItemsX(req model.PaginationReq) any {
	return pq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PersonQuery.
func (pq *PersonQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PlanQuery.
func (pq *PlanQuery) Pagination(req model.PaginationReq) *PlanQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationItems returns pagination query builder for PlanQuery.
func (pq *PlanQuery) PaginationItemsX(req model.PaginationReq) any {
	return pq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PlanQuery.
func (pq *PlanQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) Pagination(req model.PaginationReq) *PlanIntroduceQuery {
	piq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return piq
}

// PaginationItems returns pagination query builder for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) PaginationItemsX(req model.PaginationReq) any {
	return piq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := piq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PointLogQuery.
func (plq *PointLogQuery) Pagination(req model.PaginationReq) *PointLogQuery {
	plq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return plq
}

// PaginationItems returns pagination query builder for PointLogQuery.
func (plq *PointLogQuery) PaginationItemsX(req model.PaginationReq) any {
	return plq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PointLogQuery.
func (plq *PointLogQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := plq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ReserveQuery.
func (rq *ReserveQuery) Pagination(req model.PaginationReq) *ReserveQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for ReserveQuery.
func (rq *ReserveQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ReserveQuery.
func (rq *ReserveQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderQuery.
func (rq *RiderQuery) Pagination(req model.PaginationReq) *RiderQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for RiderQuery.
func (rq *RiderQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RiderQuery.
func (rq *RiderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) Pagination(req model.PaginationReq) *RiderFollowUpQuery {
	rfuq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rfuq
}

// PaginationItems returns pagination query builder for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) PaginationItemsX(req model.PaginationReq) any {
	return rfuq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rfuq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RoleQuery.
func (rq *RoleQuery) Pagination(req model.PaginationReq) *RoleQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for RoleQuery.
func (rq *RoleQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RoleQuery.
func (rq *RoleQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SettingQuery.
func (sq *SettingQuery) Pagination(req model.PaginationReq) *SettingQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for SettingQuery.
func (sq *SettingQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SettingQuery.
func (sq *SettingQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StockQuery.
func (sq *StockQuery) Pagination(req model.PaginationReq) *StockQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for StockQuery.
func (sq *StockQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StockQuery.
func (sq *StockQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StoreQuery.
func (sq *StoreQuery) Pagination(req model.PaginationReq) *StoreQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for StoreQuery.
func (sq *StoreQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StoreQuery.
func (sq *StoreQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeQuery.
func (sq *SubscribeQuery) Pagination(req model.PaginationReq) *SubscribeQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for SubscribeQuery.
func (sq *SubscribeQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeQuery.
func (sq *SubscribeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) Pagination(req model.PaginationReq) *SubscribeAlterQuery {
	saq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return saq
}

// PaginationItems returns pagination query builder for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) PaginationItemsX(req model.PaginationReq) any {
	return saq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := saq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribePauseQuery.
func (spq *SubscribePauseQuery) Pagination(req model.PaginationReq) *SubscribePauseQuery {
	spq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return spq
}

// PaginationItems returns pagination query builder for SubscribePauseQuery.
func (spq *SubscribePauseQuery) PaginationItemsX(req model.PaginationReq) any {
	return spq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribePauseQuery.
func (spq *SubscribePauseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := spq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) Pagination(req model.PaginationReq) *SubscribeReminderQuery {
	srq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return srq
}

// PaginationItems returns pagination query builder for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) PaginationItemsX(req model.PaginationReq) any {
	return srq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := srq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) Pagination(req model.PaginationReq) *SubscribeSuspendQuery {
	ssq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ssq
}

// PaginationItems returns pagination query builder for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) PaginationItemsX(req model.PaginationReq) any {
	return ssq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ssq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for TaskQuery.
func (tq *TaskQuery) Pagination(req model.PaginationReq) *TaskQuery {
	tq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return tq
}

// PaginationItems returns pagination query builder for TaskQuery.
func (tq *TaskQuery) PaginationItemsX(req model.PaginationReq) any {
	return tq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for TaskQuery.
func (tq *TaskQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := tq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}
