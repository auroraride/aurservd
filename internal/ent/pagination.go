// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/auroraride/aurservd/app/model"
)

// Pagination returns pagination query builder for BatteryModelQuery.
func (bmq *BatteryModelQuery) Pagination(req model.PaginationReq) *BatteryModelQuery {
	bmq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bmq
}

// PaginationResult returns pagination for BatteryModelQuery.
func (bmq *BatteryModelQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := bmq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchQuery.
func (bq *BranchQuery) Pagination(req model.PaginationReq) *BranchQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationResult returns pagination for BranchQuery.
func (bq *BranchQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := bq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchContractQuery.
func (bcq *BranchContractQuery) Pagination(req model.PaginationReq) *BranchContractQuery {
	bcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bcq
}

// PaginationResult returns pagination for BranchContractQuery.
func (bcq *BranchContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := bcq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetQuery.
func (cq *CabinetQuery) Pagination(req model.PaginationReq) *CabinetQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationResult returns pagination for CabinetQuery.
func (cq *CabinetQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := cq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) Pagination(req model.PaginationReq) *CabinetFaultQuery {
	cfq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cfq
}

// PaginationResult returns pagination for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := cfq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CityQuery.
func (cq *CityQuery) Pagination(req model.PaginationReq) *CityQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationResult returns pagination for CityQuery.
func (cq *CityQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := cq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CommissionQuery.
func (cq *CommissionQuery) Pagination(req model.PaginationReq) *CommissionQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationResult returns pagination for CommissionQuery.
func (cq *CommissionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := cq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ContractQuery.
func (cq *ContractQuery) Pagination(req model.PaginationReq) *ContractQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationResult returns pagination for ContractQuery.
func (cq *ContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := cq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseQuery.
func (eq *EnterpriseQuery) Pagination(req model.PaginationReq) *EnterpriseQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationResult returns pagination for EnterpriseQuery.
func (eq *EnterpriseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := eq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ManagerQuery.
func (mq *ManagerQuery) Pagination(req model.PaginationReq) *ManagerQuery {
	mq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return mq
}

// PaginationResult returns pagination for ManagerQuery.
func (mq *ManagerQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := mq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for OrderQuery.
func (oq *OrderQuery) Pagination(req model.PaginationReq) *OrderQuery {
	oq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return oq
}

// PaginationResult returns pagination for OrderQuery.
func (oq *OrderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := oq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PersonQuery.
func (pq *PersonQuery) Pagination(req model.PaginationReq) *PersonQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationResult returns pagination for PersonQuery.
func (pq *PersonQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := pq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PlanQuery.
func (pq *PlanQuery) Pagination(req model.PaginationReq) *PlanQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationResult returns pagination for PlanQuery.
func (pq *PlanQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := pq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderQuery.
func (rq *RiderQuery) Pagination(req model.PaginationReq) *RiderQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationResult returns pagination for RiderQuery.
func (rq *RiderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := rq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SettingQuery.
func (sq *SettingQuery) Pagination(req model.PaginationReq) *SettingQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationResult returns pagination for SettingQuery.
func (sq *SettingQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := sq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StoreQuery.
func (sq *StoreQuery) Pagination(req model.PaginationReq) *StoreQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationResult returns pagination for StoreQuery.
func (sq *StoreQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	ids := sq.Clone().Select("id").GroupBy("id").IntsX(context.Background())
	total := len(ids)
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}
