// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
)

// Pagination returns pagination query builder for ActivityQuery.
func (aq *ActivityQuery) Pagination(req model.PaginationReq) *ActivityQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for ActivityQuery.
func (aq *ActivityQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ActivityQuery.
func (aq *ActivityQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AgentQuery.
func (aq *AgentQuery) Pagination(req model.PaginationReq) *AgentQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AgentQuery.
func (aq *AgentQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AgentQuery.
func (aq *AgentQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AgreementQuery.
func (aq *AgreementQuery) Pagination(req model.PaginationReq) *AgreementQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AgreementQuery.
func (aq *AgreementQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AgreementQuery.
func (aq *AgreementQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AllocateQuery.
func (aq *AllocateQuery) Pagination(req model.PaginationReq) *AllocateQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AllocateQuery.
func (aq *AllocateQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AllocateQuery.
func (aq *AllocateQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssetQuery.
func (aq *AssetQuery) Pagination(req model.PaginationReq) *AssetQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AssetQuery.
func (aq *AssetQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssetQuery.
func (aq *AssetQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssetAttributeValuesQuery.
func (aavq *AssetAttributeValuesQuery) Pagination(req model.PaginationReq) *AssetAttributeValuesQuery {
	aavq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aavq
}

// PaginationItems returns pagination query builder for AssetAttributeValuesQuery.
func (aavq *AssetAttributeValuesQuery) PaginationItemsX(req model.PaginationReq) any {
	return aavq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssetAttributeValuesQuery.
func (aavq *AssetAttributeValuesQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aavq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssetAttributesQuery.
func (aaq *AssetAttributesQuery) Pagination(req model.PaginationReq) *AssetAttributesQuery {
	aaq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aaq
}

// PaginationItems returns pagination query builder for AssetAttributesQuery.
func (aaq *AssetAttributesQuery) PaginationItemsX(req model.PaginationReq) any {
	return aaq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssetAttributesQuery.
func (aaq *AssetAttributesQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aaq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssetHistoryQuery.
func (ahq *AssetHistoryQuery) Pagination(req model.PaginationReq) *AssetHistoryQuery {
	ahq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ahq
}

// PaginationItems returns pagination query builder for AssetHistoryQuery.
func (ahq *AssetHistoryQuery) PaginationItemsX(req model.PaginationReq) any {
	return ahq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssetHistoryQuery.
func (ahq *AssetHistoryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ahq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssetScrapQuery.
func (asq *AssetScrapQuery) Pagination(req model.PaginationReq) *AssetScrapQuery {
	asq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return asq
}

// PaginationItems returns pagination query builder for AssetScrapQuery.
func (asq *AssetScrapQuery) PaginationItemsX(req model.PaginationReq) any {
	return asq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssetScrapQuery.
func (asq *AssetScrapQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := asq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AssistanceQuery.
func (aq *AssistanceQuery) Pagination(req model.PaginationReq) *AssistanceQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AssistanceQuery.
func (aq *AssistanceQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AssistanceQuery.
func (aq *AssistanceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for AttendanceQuery.
func (aq *AttendanceQuery) Pagination(req model.PaginationReq) *AttendanceQuery {
	aq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return aq
}

// PaginationItems returns pagination query builder for AttendanceQuery.
func (aq *AttendanceQuery) PaginationItemsX(req model.PaginationReq) any {
	return aq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for AttendanceQuery.
func (aq *AttendanceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := aq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryQuery.
func (bq *BatteryQuery) Pagination(req model.PaginationReq) *BatteryQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BatteryQuery.
func (bq *BatteryQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryQuery.
func (bq *BatteryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) Pagination(req model.PaginationReq) *BatteryFlowQuery {
	bfq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bfq
}

// PaginationItems returns pagination query builder for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) PaginationItemsX(req model.PaginationReq) any {
	return bfq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryFlowQuery.
func (bfq *BatteryFlowQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bfq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryModelQuery.
func (bmq *BatteryModelQuery) Pagination(req model.PaginationReq) *BatteryModelQuery {
	bmq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bmq
}

// PaginationItems returns pagination query builder for BatteryModelQuery.
func (bmq *BatteryModelQuery) PaginationItemsX(req model.PaginationReq) any {
	return bmq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryModelQuery.
func (bmq *BatteryModelQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bmq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BatteryModelNewQuery.
func (bmnq *BatteryModelNewQuery) Pagination(req model.PaginationReq) *BatteryModelNewQuery {
	bmnq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bmnq
}

// PaginationItems returns pagination query builder for BatteryModelNewQuery.
func (bmnq *BatteryModelNewQuery) PaginationItemsX(req model.PaginationReq) any {
	return bmnq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BatteryModelNewQuery.
func (bmnq *BatteryModelNewQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bmnq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchQuery.
func (bq *BranchQuery) Pagination(req model.PaginationReq) *BranchQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BranchQuery.
func (bq *BranchQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BranchQuery.
func (bq *BranchQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BranchContractQuery.
func (bcq *BranchContractQuery) Pagination(req model.PaginationReq) *BranchContractQuery {
	bcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bcq
}

// PaginationItems returns pagination query builder for BranchContractQuery.
func (bcq *BranchContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return bcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BranchContractQuery.
func (bcq *BranchContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for BusinessQuery.
func (bq *BusinessQuery) Pagination(req model.PaginationReq) *BusinessQuery {
	bq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return bq
}

// PaginationItems returns pagination query builder for BusinessQuery.
func (bq *BusinessQuery) PaginationItemsX(req model.PaginationReq) any {
	return bq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for BusinessQuery.
func (bq *BusinessQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := bq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetQuery.
func (cq *CabinetQuery) Pagination(req model.PaginationReq) *CabinetQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CabinetQuery.
func (cq *CabinetQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CabinetQuery.
func (cq *CabinetQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetEcQuery.
func (ceq *CabinetEcQuery) Pagination(req model.PaginationReq) *CabinetEcQuery {
	ceq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ceq
}

// PaginationItems returns pagination query builder for CabinetEcQuery.
func (ceq *CabinetEcQuery) PaginationItemsX(req model.PaginationReq) any {
	return ceq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CabinetEcQuery.
func (ceq *CabinetEcQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ceq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) Pagination(req model.PaginationReq) *CabinetFaultQuery {
	cfq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cfq
}

// PaginationItems returns pagination query builder for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) PaginationItemsX(req model.PaginationReq) any {
	return cfq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CabinetFaultQuery.
func (cfq *CabinetFaultQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cfq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CityQuery.
func (cq *CityQuery) Pagination(req model.PaginationReq) *CityQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CityQuery.
func (cq *CityQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CityQuery.
func (cq *CityQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CommissionQuery.
func (cq *CommissionQuery) Pagination(req model.PaginationReq) *CommissionQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CommissionQuery.
func (cq *CommissionQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CommissionQuery.
func (cq *CommissionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ContractQuery.
func (cq *ContractQuery) Pagination(req model.PaginationReq) *ContractQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for ContractQuery.
func (cq *ContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ContractQuery.
func (cq *ContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ContractTemplateQuery.
func (ctq *ContractTemplateQuery) Pagination(req model.PaginationReq) *ContractTemplateQuery {
	ctq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ctq
}

// PaginationItems returns pagination query builder for ContractTemplateQuery.
func (ctq *ContractTemplateQuery) PaginationItemsX(req model.PaginationReq) any {
	return ctq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ContractTemplateQuery.
func (ctq *ContractTemplateQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ctq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponQuery.
func (cq *CouponQuery) Pagination(req model.PaginationReq) *CouponQuery {
	cq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return cq
}

// PaginationItems returns pagination query builder for CouponQuery.
func (cq *CouponQuery) PaginationItemsX(req model.PaginationReq) any {
	return cq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponQuery.
func (cq *CouponQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := cq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) Pagination(req model.PaginationReq) *CouponAssemblyQuery {
	caq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return caq
}

// PaginationItems returns pagination query builder for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) PaginationItemsX(req model.PaginationReq) any {
	return caq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponAssemblyQuery.
func (caq *CouponAssemblyQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := caq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) Pagination(req model.PaginationReq) *CouponTemplateQuery {
	ctq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ctq
}

// PaginationItems returns pagination query builder for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) PaginationItemsX(req model.PaginationReq) any {
	return ctq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for CouponTemplateQuery.
func (ctq *CouponTemplateQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ctq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EbikeQuery.
func (eq *EbikeQuery) Pagination(req model.PaginationReq) *EbikeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EbikeQuery.
func (eq *EbikeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EbikeQuery.
func (eq *EbikeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) Pagination(req model.PaginationReq) *EbikeBrandQuery {
	ebq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebq
}

// PaginationItems returns pagination query builder for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EbikeBrandQuery.
func (ebq *EbikeBrandQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EbikeBrandAttributeQuery.
func (ebaq *EbikeBrandAttributeQuery) Pagination(req model.PaginationReq) *EbikeBrandAttributeQuery {
	ebaq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebaq
}

// PaginationItems returns pagination query builder for EbikeBrandAttributeQuery.
func (ebaq *EbikeBrandAttributeQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebaq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EbikeBrandAttributeQuery.
func (ebaq *EbikeBrandAttributeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebaq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EmployeeQuery.
func (eq *EmployeeQuery) Pagination(req model.PaginationReq) *EmployeeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EmployeeQuery.
func (eq *EmployeeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EmployeeQuery.
func (eq *EmployeeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseQuery.
func (eq *EnterpriseQuery) Pagination(req model.PaginationReq) *EnterpriseQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for EnterpriseQuery.
func (eq *EnterpriseQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseQuery.
func (eq *EnterpriseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseBatterySwapQuery.
func (ebsq *EnterpriseBatterySwapQuery) Pagination(req model.PaginationReq) *EnterpriseBatterySwapQuery {
	ebsq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebsq
}

// PaginationItems returns pagination query builder for EnterpriseBatterySwapQuery.
func (ebsq *EnterpriseBatterySwapQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebsq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseBatterySwapQuery.
func (ebsq *EnterpriseBatterySwapQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebsq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) Pagination(req model.PaginationReq) *EnterpriseBillQuery {
	ebq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ebq
}

// PaginationItems returns pagination query builder for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) PaginationItemsX(req model.PaginationReq) any {
	return ebq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseBillQuery.
func (ebq *EnterpriseBillQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ebq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) Pagination(req model.PaginationReq) *EnterpriseContractQuery {
	ecq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ecq
}

// PaginationItems returns pagination query builder for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) PaginationItemsX(req model.PaginationReq) any {
	return ecq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseContractQuery.
func (ecq *EnterpriseContractQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ecq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) Pagination(req model.PaginationReq) *EnterprisePrepaymentQuery {
	epq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return epq
}

// PaginationItems returns pagination query builder for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) PaginationItemsX(req model.PaginationReq) any {
	return epq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterprisePrepaymentQuery.
func (epq *EnterprisePrepaymentQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := epq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) Pagination(req model.PaginationReq) *EnterprisePriceQuery {
	epq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return epq
}

// PaginationItems returns pagination query builder for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) PaginationItemsX(req model.PaginationReq) any {
	return epq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterprisePriceQuery.
func (epq *EnterprisePriceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := epq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) Pagination(req model.PaginationReq) *EnterpriseStatementQuery {
	esq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return esq
}

// PaginationItems returns pagination query builder for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) PaginationItemsX(req model.PaginationReq) any {
	return esq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseStatementQuery.
func (esq *EnterpriseStatementQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := esq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) Pagination(req model.PaginationReq) *EnterpriseStationQuery {
	esq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return esq
}

// PaginationItems returns pagination query builder for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) PaginationItemsX(req model.PaginationReq) any {
	return esq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for EnterpriseStationQuery.
func (esq *EnterpriseStationQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := esq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExceptionQuery.
func (eq *ExceptionQuery) Pagination(req model.PaginationReq) *ExceptionQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExceptionQuery.
func (eq *ExceptionQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExceptionQuery.
func (eq *ExceptionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExchangeQuery.
func (eq *ExchangeQuery) Pagination(req model.PaginationReq) *ExchangeQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExchangeQuery.
func (eq *ExchangeQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExchangeQuery.
func (eq *ExchangeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ExportQuery.
func (eq *ExportQuery) Pagination(req model.PaginationReq) *ExportQuery {
	eq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return eq
}

// PaginationItems returns pagination query builder for ExportQuery.
func (eq *ExportQuery) PaginationItemsX(req model.PaginationReq) any {
	return eq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ExportQuery.
func (eq *ExportQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := eq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for FaultQuery.
func (fq *FaultQuery) Pagination(req model.PaginationReq) *FaultQuery {
	fq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return fq
}

// PaginationItems returns pagination query builder for FaultQuery.
func (fq *FaultQuery) PaginationItemsX(req model.PaginationReq) any {
	return fq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for FaultQuery.
func (fq *FaultQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := fq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for FeedbackQuery.
func (fq *FeedbackQuery) Pagination(req model.PaginationReq) *FeedbackQuery {
	fq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return fq
}

// PaginationItems returns pagination query builder for FeedbackQuery.
func (fq *FeedbackQuery) PaginationItemsX(req model.PaginationReq) any {
	return fq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for FeedbackQuery.
func (fq *FeedbackQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := fq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for GoodsQuery.
func (gq *GoodsQuery) Pagination(req model.PaginationReq) *GoodsQuery {
	gq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return gq
}

// PaginationItems returns pagination query builder for GoodsQuery.
func (gq *GoodsQuery) PaginationItemsX(req model.PaginationReq) any {
	return gq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for GoodsQuery.
func (gq *GoodsQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := gq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for InstructionsQuery.
func (iq *InstructionsQuery) Pagination(req model.PaginationReq) *InstructionsQuery {
	iq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return iq
}

// PaginationItems returns pagination query builder for InstructionsQuery.
func (iq *InstructionsQuery) PaginationItemsX(req model.PaginationReq) any {
	return iq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for InstructionsQuery.
func (iq *InstructionsQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := iq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for InventoryQuery.
func (iq *InventoryQuery) Pagination(req model.PaginationReq) *InventoryQuery {
	iq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return iq
}

// PaginationItems returns pagination query builder for InventoryQuery.
func (iq *InventoryQuery) PaginationItemsX(req model.PaginationReq) any {
	return iq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for InventoryQuery.
func (iq *InventoryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := iq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for MaintainerQuery.
func (mq *MaintainerQuery) Pagination(req model.PaginationReq) *MaintainerQuery {
	mq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return mq
}

// PaginationItems returns pagination query builder for MaintainerQuery.
func (mq *MaintainerQuery) PaginationItemsX(req model.PaginationReq) any {
	return mq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for MaintainerQuery.
func (mq *MaintainerQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := mq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ManagerQuery.
func (mq *ManagerQuery) Pagination(req model.PaginationReq) *ManagerQuery {
	mq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return mq
}

// PaginationItems returns pagination query builder for ManagerQuery.
func (mq *ManagerQuery) PaginationItemsX(req model.PaginationReq) any {
	return mq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ManagerQuery.
func (mq *ManagerQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := mq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for MaterialQuery.
func (mq *MaterialQuery) Pagination(req model.PaginationReq) *MaterialQuery {
	mq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return mq
}

// PaginationItems returns pagination query builder for MaterialQuery.
func (mq *MaterialQuery) PaginationItemsX(req model.PaginationReq) any {
	return mq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for MaterialQuery.
func (mq *MaterialQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := mq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for OrderQuery.
func (oq *OrderQuery) Pagination(req model.PaginationReq) *OrderQuery {
	oq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return oq
}

// PaginationItems returns pagination query builder for OrderQuery.
func (oq *OrderQuery) PaginationItemsX(req model.PaginationReq) any {
	return oq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for OrderQuery.
func (oq *OrderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := oq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for OrderRefundQuery.
func (orq *OrderRefundQuery) Pagination(req model.PaginationReq) *OrderRefundQuery {
	orq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return orq
}

// PaginationItems returns pagination query builder for OrderRefundQuery.
func (orq *OrderRefundQuery) PaginationItemsX(req model.PaginationReq) any {
	return orq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for OrderRefundQuery.
func (orq *OrderRefundQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := orq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PersonQuery.
func (pq *PersonQuery) Pagination(req model.PaginationReq) *PersonQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationItems returns pagination query builder for PersonQuery.
func (pq *PersonQuery) PaginationItemsX(req model.PaginationReq) any {
	return pq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PersonQuery.
func (pq *PersonQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PlanQuery.
func (pq *PlanQuery) Pagination(req model.PaginationReq) *PlanQuery {
	pq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pq
}

// PaginationItems returns pagination query builder for PlanQuery.
func (pq *PlanQuery) PaginationItemsX(req model.PaginationReq) any {
	return pq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PlanQuery.
func (pq *PlanQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) Pagination(req model.PaginationReq) *PlanIntroduceQuery {
	piq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return piq
}

// PaginationItems returns pagination query builder for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) PaginationItemsX(req model.PaginationReq) any {
	return piq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PlanIntroduceQuery.
func (piq *PlanIntroduceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := piq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PointLogQuery.
func (plq *PointLogQuery) Pagination(req model.PaginationReq) *PointLogQuery {
	plq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return plq
}

// PaginationItems returns pagination query builder for PointLogQuery.
func (plq *PointLogQuery) PaginationItemsX(req model.PaginationReq) any {
	return plq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PointLogQuery.
func (plq *PointLogQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := plq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionAchievementQuery.
func (paq *PromotionAchievementQuery) Pagination(req model.PaginationReq) *PromotionAchievementQuery {
	paq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return paq
}

// PaginationItems returns pagination query builder for PromotionAchievementQuery.
func (paq *PromotionAchievementQuery) PaginationItemsX(req model.PaginationReq) any {
	return paq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionAchievementQuery.
func (paq *PromotionAchievementQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := paq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionBankCardQuery.
func (pbcq *PromotionBankCardQuery) Pagination(req model.PaginationReq) *PromotionBankCardQuery {
	pbcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pbcq
}

// PaginationItems returns pagination query builder for PromotionBankCardQuery.
func (pbcq *PromotionBankCardQuery) PaginationItemsX(req model.PaginationReq) any {
	return pbcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionBankCardQuery.
func (pbcq *PromotionBankCardQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pbcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionCommissionQuery.
func (pcq *PromotionCommissionQuery) Pagination(req model.PaginationReq) *PromotionCommissionQuery {
	pcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pcq
}

// PaginationItems returns pagination query builder for PromotionCommissionQuery.
func (pcq *PromotionCommissionQuery) PaginationItemsX(req model.PaginationReq) any {
	return pcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionCommissionQuery.
func (pcq *PromotionCommissionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionCommissionPlanQuery.
func (pcpq *PromotionCommissionPlanQuery) Pagination(req model.PaginationReq) *PromotionCommissionPlanQuery {
	pcpq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pcpq
}

// PaginationItems returns pagination query builder for PromotionCommissionPlanQuery.
func (pcpq *PromotionCommissionPlanQuery) PaginationItemsX(req model.PaginationReq) any {
	return pcpq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionCommissionPlanQuery.
func (pcpq *PromotionCommissionPlanQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pcpq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionEarningsQuery.
func (peq *PromotionEarningsQuery) Pagination(req model.PaginationReq) *PromotionEarningsQuery {
	peq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return peq
}

// PaginationItems returns pagination query builder for PromotionEarningsQuery.
func (peq *PromotionEarningsQuery) PaginationItemsX(req model.PaginationReq) any {
	return peq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionEarningsQuery.
func (peq *PromotionEarningsQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := peq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionGrowthQuery.
func (pgq *PromotionGrowthQuery) Pagination(req model.PaginationReq) *PromotionGrowthQuery {
	pgq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pgq
}

// PaginationItems returns pagination query builder for PromotionGrowthQuery.
func (pgq *PromotionGrowthQuery) PaginationItemsX(req model.PaginationReq) any {
	return pgq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionGrowthQuery.
func (pgq *PromotionGrowthQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pgq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionLevelQuery.
func (plq *PromotionLevelQuery) Pagination(req model.PaginationReq) *PromotionLevelQuery {
	plq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return plq
}

// PaginationItems returns pagination query builder for PromotionLevelQuery.
func (plq *PromotionLevelQuery) PaginationItemsX(req model.PaginationReq) any {
	return plq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionLevelQuery.
func (plq *PromotionLevelQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := plq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionLevelTaskQuery.
func (pltq *PromotionLevelTaskQuery) Pagination(req model.PaginationReq) *PromotionLevelTaskQuery {
	pltq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pltq
}

// PaginationItems returns pagination query builder for PromotionLevelTaskQuery.
func (pltq *PromotionLevelTaskQuery) PaginationItemsX(req model.PaginationReq) any {
	return pltq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionLevelTaskQuery.
func (pltq *PromotionLevelTaskQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pltq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionMemberQuery.
func (pmq *PromotionMemberQuery) Pagination(req model.PaginationReq) *PromotionMemberQuery {
	pmq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pmq
}

// PaginationItems returns pagination query builder for PromotionMemberQuery.
func (pmq *PromotionMemberQuery) PaginationItemsX(req model.PaginationReq) any {
	return pmq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionMemberQuery.
func (pmq *PromotionMemberQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pmq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionMemberCommissionQuery.
func (pmcq *PromotionMemberCommissionQuery) Pagination(req model.PaginationReq) *PromotionMemberCommissionQuery {
	pmcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pmcq
}

// PaginationItems returns pagination query builder for PromotionMemberCommissionQuery.
func (pmcq *PromotionMemberCommissionQuery) PaginationItemsX(req model.PaginationReq) any {
	return pmcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionMemberCommissionQuery.
func (pmcq *PromotionMemberCommissionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pmcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionPersonQuery.
func (ppq *PromotionPersonQuery) Pagination(req model.PaginationReq) *PromotionPersonQuery {
	ppq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ppq
}

// PaginationItems returns pagination query builder for PromotionPersonQuery.
func (ppq *PromotionPersonQuery) PaginationItemsX(req model.PaginationReq) any {
	return ppq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionPersonQuery.
func (ppq *PromotionPersonQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ppq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionPrivilegeQuery.
func (ppq *PromotionPrivilegeQuery) Pagination(req model.PaginationReq) *PromotionPrivilegeQuery {
	ppq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ppq
}

// PaginationItems returns pagination query builder for PromotionPrivilegeQuery.
func (ppq *PromotionPrivilegeQuery) PaginationItemsX(req model.PaginationReq) any {
	return ppq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionPrivilegeQuery.
func (ppq *PromotionPrivilegeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ppq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionReferralsQuery.
func (prq *PromotionReferralsQuery) Pagination(req model.PaginationReq) *PromotionReferralsQuery {
	prq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return prq
}

// PaginationItems returns pagination query builder for PromotionReferralsQuery.
func (prq *PromotionReferralsQuery) PaginationItemsX(req model.PaginationReq) any {
	return prq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionReferralsQuery.
func (prq *PromotionReferralsQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := prq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionReferralsProgressQuery.
func (prpq *PromotionReferralsProgressQuery) Pagination(req model.PaginationReq) *PromotionReferralsProgressQuery {
	prpq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return prpq
}

// PaginationItems returns pagination query builder for PromotionReferralsProgressQuery.
func (prpq *PromotionReferralsProgressQuery) PaginationItemsX(req model.PaginationReq) any {
	return prpq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionReferralsProgressQuery.
func (prpq *PromotionReferralsProgressQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := prpq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionSettingQuery.
func (psq *PromotionSettingQuery) Pagination(req model.PaginationReq) *PromotionSettingQuery {
	psq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return psq
}

// PaginationItems returns pagination query builder for PromotionSettingQuery.
func (psq *PromotionSettingQuery) PaginationItemsX(req model.PaginationReq) any {
	return psq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionSettingQuery.
func (psq *PromotionSettingQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := psq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for PromotionWithdrawalQuery.
func (pwq *PromotionWithdrawalQuery) Pagination(req model.PaginationReq) *PromotionWithdrawalQuery {
	pwq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return pwq
}

// PaginationItems returns pagination query builder for PromotionWithdrawalQuery.
func (pwq *PromotionWithdrawalQuery) PaginationItemsX(req model.PaginationReq) any {
	return pwq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for PromotionWithdrawalQuery.
func (pwq *PromotionWithdrawalQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := pwq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for QuestionQuery.
func (qq *QuestionQuery) Pagination(req model.PaginationReq) *QuestionQuery {
	qq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return qq
}

// PaginationItems returns pagination query builder for QuestionQuery.
func (qq *QuestionQuery) PaginationItemsX(req model.PaginationReq) any {
	return qq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for QuestionQuery.
func (qq *QuestionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := qq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for QuestionCategoryQuery.
func (qcq *QuestionCategoryQuery) Pagination(req model.PaginationReq) *QuestionCategoryQuery {
	qcq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return qcq
}

// PaginationItems returns pagination query builder for QuestionCategoryQuery.
func (qcq *QuestionCategoryQuery) PaginationItemsX(req model.PaginationReq) any {
	return qcq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for QuestionCategoryQuery.
func (qcq *QuestionCategoryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := qcq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for ReserveQuery.
func (rq *ReserveQuery) Pagination(req model.PaginationReq) *ReserveQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for ReserveQuery.
func (rq *ReserveQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for ReserveQuery.
func (rq *ReserveQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderQuery.
func (rq *RiderQuery) Pagination(req model.PaginationReq) *RiderQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for RiderQuery.
func (rq *RiderQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RiderQuery.
func (rq *RiderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) Pagination(req model.PaginationReq) *RiderFollowUpQuery {
	rfuq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rfuq
}

// PaginationItems returns pagination query builder for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) PaginationItemsX(req model.PaginationReq) any {
	return rfuq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RiderFollowUpQuery.
func (rfuq *RiderFollowUpQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rfuq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RiderPhoneDeviceQuery.
func (rpdq *RiderPhoneDeviceQuery) Pagination(req model.PaginationReq) *RiderPhoneDeviceQuery {
	rpdq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rpdq
}

// PaginationItems returns pagination query builder for RiderPhoneDeviceQuery.
func (rpdq *RiderPhoneDeviceQuery) PaginationItemsX(req model.PaginationReq) any {
	return rpdq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RiderPhoneDeviceQuery.
func (rpdq *RiderPhoneDeviceQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rpdq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for RoleQuery.
func (rq *RoleQuery) Pagination(req model.PaginationReq) *RoleQuery {
	rq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return rq
}

// PaginationItems returns pagination query builder for RoleQuery.
func (rq *RoleQuery) PaginationItemsX(req model.PaginationReq) any {
	return rq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for RoleQuery.
func (rq *RoleQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := rq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SettingQuery.
func (sq *SettingQuery) Pagination(req model.PaginationReq) *SettingQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for SettingQuery.
func (sq *SettingQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SettingQuery.
func (sq *SettingQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StockQuery.
func (sq *StockQuery) Pagination(req model.PaginationReq) *StockQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for StockQuery.
func (sq *StockQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StockQuery.
func (sq *StockQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StockSummaryQuery.
func (ssq *StockSummaryQuery) Pagination(req model.PaginationReq) *StockSummaryQuery {
	ssq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ssq
}

// PaginationItems returns pagination query builder for StockSummaryQuery.
func (ssq *StockSummaryQuery) PaginationItemsX(req model.PaginationReq) any {
	return ssq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StockSummaryQuery.
func (ssq *StockSummaryQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ssq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StoreQuery.
func (sq *StoreQuery) Pagination(req model.PaginationReq) *StoreQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for StoreQuery.
func (sq *StoreQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StoreQuery.
func (sq *StoreQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for StoreGoodsQuery.
func (sgq *StoreGoodsQuery) Pagination(req model.PaginationReq) *StoreGoodsQuery {
	sgq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sgq
}

// PaginationItems returns pagination query builder for StoreGoodsQuery.
func (sgq *StoreGoodsQuery) PaginationItemsX(req model.PaginationReq) any {
	return sgq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for StoreGoodsQuery.
func (sgq *StoreGoodsQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sgq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeQuery.
func (sq *SubscribeQuery) Pagination(req model.PaginationReq) *SubscribeQuery {
	sq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return sq
}

// PaginationItems returns pagination query builder for SubscribeQuery.
func (sq *SubscribeQuery) PaginationItemsX(req model.PaginationReq) any {
	return sq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeQuery.
func (sq *SubscribeQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := sq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) Pagination(req model.PaginationReq) *SubscribeAlterQuery {
	saq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return saq
}

// PaginationItems returns pagination query builder for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) PaginationItemsX(req model.PaginationReq) any {
	return saq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeAlterQuery.
func (saq *SubscribeAlterQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := saq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribePauseQuery.
func (spq *SubscribePauseQuery) Pagination(req model.PaginationReq) *SubscribePauseQuery {
	spq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return spq
}

// PaginationItems returns pagination query builder for SubscribePauseQuery.
func (spq *SubscribePauseQuery) PaginationItemsX(req model.PaginationReq) any {
	return spq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribePauseQuery.
func (spq *SubscribePauseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := spq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) Pagination(req model.PaginationReq) *SubscribeReminderQuery {
	srq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return srq
}

// PaginationItems returns pagination query builder for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) PaginationItemsX(req model.PaginationReq) any {
	return srq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeReminderQuery.
func (srq *SubscribeReminderQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := srq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) Pagination(req model.PaginationReq) *SubscribeSuspendQuery {
	ssq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return ssq
}

// PaginationItems returns pagination query builder for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) PaginationItemsX(req model.PaginationReq) any {
	return ssq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for SubscribeSuspendQuery.
func (ssq *SubscribeSuspendQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := ssq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for VersionQuery.
func (vq *VersionQuery) Pagination(req model.PaginationReq) *VersionQuery {
	vq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return vq
}

// PaginationItems returns pagination query builder for VersionQuery.
func (vq *VersionQuery) PaginationItemsX(req model.PaginationReq) any {
	return vq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for VersionQuery.
func (vq *VersionQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := vq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}

// Pagination returns pagination query builder for WarehouseQuery.
func (wq *WarehouseQuery) Pagination(req model.PaginationReq) *WarehouseQuery {
	wq.Offset(req.GetOffset()).Limit(req.GetLimit())
	return wq
}

// PaginationItems returns pagination query builder for WarehouseQuery.
func (wq *WarehouseQuery) PaginationItemsX(req model.PaginationReq) any {
	return wq.Pagination(req).AllX(context.Background())
}

// PaginationResult returns pagination for WarehouseQuery.
func (wq *WarehouseQuery) PaginationResult(req model.PaginationReq) model.Pagination {
	query := wq.Clone()
	query.order = nil
	query.ctx.Limit = nil
	query.ctx.Offset = nil
	var result []struct {
		Count int `json:"count"`
	}
	query.Modify(func(s *sql.Selector) {
		s.SelectExpr(sql.Raw("COUNT(1) AS count"))
	}).ScanX(context.Background(), &result)
	total := result[0].Count
	return model.Pagination{
		Current: req.GetCurrent(),
		Pages:   req.GetPages(total),
		Total:   total,
	}
}
