// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks     []Hook
	mutation  *StoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StoreUpdate) SetUpdatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StoreUpdate) SetDeletedAt(t time.Time) *StoreUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableDeletedAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StoreUpdate) ClearDeletedAt() *StoreUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *StoreUpdate) SetLastModifier(m *model.Modifier) *StoreUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *StoreUpdate) ClearLastModifier() *StoreUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *StoreUpdate) SetRemark(s string) *StoreUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StoreUpdate) SetNillableRemark(s *string) *StoreUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *StoreUpdate) ClearRemark() *StoreUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetCityID sets the "city_id" field.
func (su *StoreUpdate) SetCityID(u uint64) *StoreUpdate {
	su.mutation.SetCityID(u)
	return su
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableCityID(u *uint64) *StoreUpdate {
	if u != nil {
		su.SetCityID(*u)
	}
	return su
}

// SetGroupID sets the "group_id" field.
func (su *StoreUpdate) SetGroupID(u uint64) *StoreUpdate {
	su.mutation.SetGroupID(u)
	return su
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableGroupID(u *uint64) *StoreUpdate {
	if u != nil {
		su.SetGroupID(*u)
	}
	return su
}

// ClearGroupID clears the value of the "group_id" field.
func (su *StoreUpdate) ClearGroupID() *StoreUpdate {
	su.mutation.ClearGroupID()
	return su
}

// SetEmployeeID sets the "employee_id" field.
func (su *StoreUpdate) SetEmployeeID(u uint64) *StoreUpdate {
	su.mutation.SetEmployeeID(u)
	return su
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEmployeeID(u *uint64) *StoreUpdate {
	if u != nil {
		su.SetEmployeeID(*u)
	}
	return su
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (su *StoreUpdate) ClearEmployeeID() *StoreUpdate {
	su.mutation.ClearEmployeeID()
	return su
}

// SetBranchID sets the "branch_id" field.
func (su *StoreUpdate) SetBranchID(u uint64) *StoreUpdate {
	su.mutation.SetBranchID(u)
	return su
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableBranchID(u *uint64) *StoreUpdate {
	if u != nil {
		su.SetBranchID(*u)
	}
	return su
}

// SetName sets the "name" field.
func (su *StoreUpdate) SetName(s string) *StoreUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StoreUpdate) SetNillableName(s *string) *StoreUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *StoreUpdate) SetStatus(u uint8) *StoreUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStatus(u *uint8) *StoreUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *StoreUpdate) AddStatus(u int8) *StoreUpdate {
	su.mutation.AddStatus(u)
	return su
}

// SetLng sets the "lng" field.
func (su *StoreUpdate) SetLng(f float64) *StoreUpdate {
	su.mutation.ResetLng()
	su.mutation.SetLng(f)
	return su
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLng(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLng(*f)
	}
	return su
}

// AddLng adds f to the "lng" field.
func (su *StoreUpdate) AddLng(f float64) *StoreUpdate {
	su.mutation.AddLng(f)
	return su
}

// SetLat sets the "lat" field.
func (su *StoreUpdate) SetLat(f float64) *StoreUpdate {
	su.mutation.ResetLat()
	su.mutation.SetLat(f)
	return su
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLat(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLat(*f)
	}
	return su
}

// AddLat adds f to the "lat" field.
func (su *StoreUpdate) AddLat(f float64) *StoreUpdate {
	su.mutation.AddLat(f)
	return su
}

// SetAddress sets the "address" field.
func (su *StoreUpdate) SetAddress(s string) *StoreUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *StoreUpdate) SetNillableAddress(s *string) *StoreUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// SetEbikeObtain sets the "ebike_obtain" field.
func (su *StoreUpdate) SetEbikeObtain(b bool) *StoreUpdate {
	su.mutation.SetEbikeObtain(b)
	return su
}

// SetNillableEbikeObtain sets the "ebike_obtain" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEbikeObtain(b *bool) *StoreUpdate {
	if b != nil {
		su.SetEbikeObtain(*b)
	}
	return su
}

// SetEbikeRepair sets the "ebike_repair" field.
func (su *StoreUpdate) SetEbikeRepair(b bool) *StoreUpdate {
	su.mutation.SetEbikeRepair(b)
	return su
}

// SetNillableEbikeRepair sets the "ebike_repair" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEbikeRepair(b *bool) *StoreUpdate {
	if b != nil {
		su.SetEbikeRepair(*b)
	}
	return su
}

// SetEbikeSale sets the "ebike_sale" field.
func (su *StoreUpdate) SetEbikeSale(b bool) *StoreUpdate {
	su.mutation.SetEbikeSale(b)
	return su
}

// SetNillableEbikeSale sets the "ebike_sale" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEbikeSale(b *bool) *StoreUpdate {
	if b != nil {
		su.SetEbikeSale(*b)
	}
	return su
}

// SetRest sets the "rest" field.
func (su *StoreUpdate) SetRest(b bool) *StoreUpdate {
	su.mutation.SetRest(b)
	return su
}

// SetNillableRest sets the "rest" field if the given value is not nil.
func (su *StoreUpdate) SetNillableRest(b *bool) *StoreUpdate {
	if b != nil {
		su.SetRest(*b)
	}
	return su
}

// SetBusinessHours sets the "business_hours" field.
func (su *StoreUpdate) SetBusinessHours(s string) *StoreUpdate {
	su.mutation.SetBusinessHours(s)
	return su
}

// SetNillableBusinessHours sets the "business_hours" field if the given value is not nil.
func (su *StoreUpdate) SetNillableBusinessHours(s *string) *StoreUpdate {
	if s != nil {
		su.SetBusinessHours(*s)
	}
	return su
}

// ClearBusinessHours clears the value of the "business_hours" field.
func (su *StoreUpdate) ClearBusinessHours() *StoreUpdate {
	su.mutation.ClearBusinessHours()
	return su
}

// SetPhotos sets the "photos" field.
func (su *StoreUpdate) SetPhotos(s []string) *StoreUpdate {
	su.mutation.SetPhotos(s)
	return su
}

// AppendPhotos appends s to the "photos" field.
func (su *StoreUpdate) AppendPhotos(s []string) *StoreUpdate {
	su.mutation.AppendPhotos(s)
	return su
}

// ClearPhotos clears the value of the "photos" field.
func (su *StoreUpdate) ClearPhotos() *StoreUpdate {
	su.mutation.ClearPhotos()
	return su
}

// SetPhone sets the "phone" field.
func (su *StoreUpdate) SetPhone(s string) *StoreUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (su *StoreUpdate) SetNillablePhone(s *string) *StoreUpdate {
	if s != nil {
		su.SetPhone(*s)
	}
	return su
}

// SetHeadPic sets the "head_pic" field.
func (su *StoreUpdate) SetHeadPic(s string) *StoreUpdate {
	su.mutation.SetHeadPic(s)
	return su
}

// SetNillableHeadPic sets the "head_pic" field if the given value is not nil.
func (su *StoreUpdate) SetNillableHeadPic(s *string) *StoreUpdate {
	if s != nil {
		su.SetHeadPic(*s)
	}
	return su
}

// SetCity sets the "city" edge to the City entity.
func (su *StoreUpdate) SetCity(c *City) *StoreUpdate {
	return su.SetCityID(c.ID)
}

// SetGroup sets the "group" edge to the StoreGroup entity.
func (su *StoreUpdate) SetGroup(s *StoreGroup) *StoreUpdate {
	return su.SetGroupID(s.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (su *StoreUpdate) SetBranch(b *Branch) *StoreUpdate {
	return su.SetBranchID(b.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (su *StoreUpdate) SetEmployee(e *Employee) *StoreUpdate {
	return su.SetEmployeeID(e.ID)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (su *StoreUpdate) AddStockIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddStockIDs(ids...)
	return su
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (su *StoreUpdate) AddStocks(s ...*Stock) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStockIDs(ids...)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (su *StoreUpdate) AddAttendanceIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddAttendanceIDs(ids...)
	return su
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (su *StoreUpdate) AddAttendances(a ...*Attendance) *StoreUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAttendanceIDs(ids...)
}

// AddExceptionIDs adds the "exceptions" edge to the Exception entity by IDs.
func (su *StoreUpdate) AddExceptionIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddExceptionIDs(ids...)
	return su
}

// AddExceptions adds the "exceptions" edges to the Exception entity.
func (su *StoreUpdate) AddExceptions(e ...*Exception) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddExceptionIDs(ids...)
}

// AddGoodIDs adds the "goods" edge to the StoreGoods entity by IDs.
func (su *StoreUpdate) AddGoodIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddGoodIDs(ids...)
	return su
}

// AddGoods adds the "goods" edges to the StoreGoods entity.
func (su *StoreUpdate) AddGoods(s ...*StoreGoods) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddGoodIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (su *StoreUpdate) AddEmployeeIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddEmployeeIDs(ids...)
	return su
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (su *StoreUpdate) AddEmployees(e ...*Employee) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEmployeeIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (su *StoreUpdate) ClearCity() *StoreUpdate {
	su.mutation.ClearCity()
	return su
}

// ClearGroup clears the "group" edge to the StoreGroup entity.
func (su *StoreUpdate) ClearGroup() *StoreUpdate {
	su.mutation.ClearGroup()
	return su
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (su *StoreUpdate) ClearBranch() *StoreUpdate {
	su.mutation.ClearBranch()
	return su
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (su *StoreUpdate) ClearEmployee() *StoreUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (su *StoreUpdate) ClearStocks() *StoreUpdate {
	su.mutation.ClearStocks()
	return su
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (su *StoreUpdate) RemoveStockIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveStockIDs(ids...)
	return su
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (su *StoreUpdate) RemoveStocks(s ...*Stock) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStockIDs(ids...)
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (su *StoreUpdate) ClearAttendances() *StoreUpdate {
	su.mutation.ClearAttendances()
	return su
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (su *StoreUpdate) RemoveAttendanceIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveAttendanceIDs(ids...)
	return su
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (su *StoreUpdate) RemoveAttendances(a ...*Attendance) *StoreUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAttendanceIDs(ids...)
}

// ClearExceptions clears all "exceptions" edges to the Exception entity.
func (su *StoreUpdate) ClearExceptions() *StoreUpdate {
	su.mutation.ClearExceptions()
	return su
}

// RemoveExceptionIDs removes the "exceptions" edge to Exception entities by IDs.
func (su *StoreUpdate) RemoveExceptionIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveExceptionIDs(ids...)
	return su
}

// RemoveExceptions removes "exceptions" edges to Exception entities.
func (su *StoreUpdate) RemoveExceptions(e ...*Exception) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveExceptionIDs(ids...)
}

// ClearGoods clears all "goods" edges to the StoreGoods entity.
func (su *StoreUpdate) ClearGoods() *StoreUpdate {
	su.mutation.ClearGoods()
	return su
}

// RemoveGoodIDs removes the "goods" edge to StoreGoods entities by IDs.
func (su *StoreUpdate) RemoveGoodIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveGoodIDs(ids...)
	return su
}

// RemoveGoods removes "goods" edges to StoreGoods entities.
func (su *StoreUpdate) RemoveGoods(s ...*StoreGoods) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveGoodIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (su *StoreUpdate) ClearEmployees() *StoreUpdate {
	su.mutation.ClearEmployees()
	return su
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (su *StoreUpdate) RemoveEmployeeIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveEmployeeIDs(ids...)
	return su
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (su *StoreUpdate) RemoveEmployees(e ...*Employee) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEmployeeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoreUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StoreUpdate) check() error {
	if v, ok := su.mutation.Phone(); ok {
		if err := store.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Store.phone": %w`, err)}
		}
	}
	if _, ok := su.mutation.CityID(); su.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.city"`)
	}
	if _, ok := su.mutation.BranchID(); su.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.branch"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StoreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(store.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(store.FieldDeletedAt, field.TypeTime)
	}
	if su.mutation.CreatorCleared() {
		_spec.ClearField(store.FieldCreator, field.TypeJSON)
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.SetField(store.FieldLastModifier, field.TypeJSON, value)
	}
	if su.mutation.LastModifierCleared() {
		_spec.ClearField(store.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(store.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(store.FieldRemark, field.TypeString)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(store.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(store.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := su.mutation.Lng(); ok {
		_spec.SetField(store.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLng(); ok {
		_spec.AddField(store.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.SetField(store.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.AddedLat(); ok {
		_spec.AddField(store.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(store.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.EbikeObtain(); ok {
		_spec.SetField(store.FieldEbikeObtain, field.TypeBool, value)
	}
	if value, ok := su.mutation.EbikeRepair(); ok {
		_spec.SetField(store.FieldEbikeRepair, field.TypeBool, value)
	}
	if value, ok := su.mutation.EbikeSale(); ok {
		_spec.SetField(store.FieldEbikeSale, field.TypeBool, value)
	}
	if value, ok := su.mutation.Rest(); ok {
		_spec.SetField(store.FieldRest, field.TypeBool, value)
	}
	if value, ok := su.mutation.BusinessHours(); ok {
		_spec.SetField(store.FieldBusinessHours, field.TypeString, value)
	}
	if su.mutation.BusinessHoursCleared() {
		_spec.ClearField(store.FieldBusinessHours, field.TypeString)
	}
	if value, ok := su.mutation.Photos(); ok {
		_spec.SetField(store.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, store.FieldPhotos, value)
		})
	}
	if su.mutation.PhotosCleared() {
		_spec.ClearField(store.FieldPhotos, field.TypeJSON)
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.SetField(store.FieldPhone, field.TypeString, value)
	}
	if value, ok := su.mutation.HeadPic(); ok {
		_spec.SetField(store.FieldHeadPic, field.TypeString, value)
	}
	if su.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.GroupTable,
			Columns: []string{store.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.GroupTable,
			Columns: []string{store.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStocksIDs(); len(nodes) > 0 && !su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !su.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedExceptionsIDs(); len(nodes) > 0 && !su.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExceptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedGoodsIDs(); len(nodes) > 0 && !su.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !su.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StoreUpdateOne) SetUpdatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StoreUpdateOne) SetDeletedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableDeletedAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StoreUpdateOne) ClearDeletedAt() *StoreUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *StoreUpdateOne) SetLastModifier(m *model.Modifier) *StoreUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *StoreUpdateOne) ClearLastModifier() *StoreUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StoreUpdateOne) SetRemark(s string) *StoreUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableRemark(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *StoreUpdateOne) ClearRemark() *StoreUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetCityID sets the "city_id" field.
func (suo *StoreUpdateOne) SetCityID(u uint64) *StoreUpdateOne {
	suo.mutation.SetCityID(u)
	return suo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableCityID(u *uint64) *StoreUpdateOne {
	if u != nil {
		suo.SetCityID(*u)
	}
	return suo
}

// SetGroupID sets the "group_id" field.
func (suo *StoreUpdateOne) SetGroupID(u uint64) *StoreUpdateOne {
	suo.mutation.SetGroupID(u)
	return suo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableGroupID(u *uint64) *StoreUpdateOne {
	if u != nil {
		suo.SetGroupID(*u)
	}
	return suo
}

// ClearGroupID clears the value of the "group_id" field.
func (suo *StoreUpdateOne) ClearGroupID() *StoreUpdateOne {
	suo.mutation.ClearGroupID()
	return suo
}

// SetEmployeeID sets the "employee_id" field.
func (suo *StoreUpdateOne) SetEmployeeID(u uint64) *StoreUpdateOne {
	suo.mutation.SetEmployeeID(u)
	return suo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEmployeeID(u *uint64) *StoreUpdateOne {
	if u != nil {
		suo.SetEmployeeID(*u)
	}
	return suo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (suo *StoreUpdateOne) ClearEmployeeID() *StoreUpdateOne {
	suo.mutation.ClearEmployeeID()
	return suo
}

// SetBranchID sets the "branch_id" field.
func (suo *StoreUpdateOne) SetBranchID(u uint64) *StoreUpdateOne {
	suo.mutation.SetBranchID(u)
	return suo
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableBranchID(u *uint64) *StoreUpdateOne {
	if u != nil {
		suo.SetBranchID(*u)
	}
	return suo
}

// SetName sets the "name" field.
func (suo *StoreUpdateOne) SetName(s string) *StoreUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableName(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *StoreUpdateOne) SetStatus(u uint8) *StoreUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStatus(u *uint8) *StoreUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *StoreUpdateOne) AddStatus(u int8) *StoreUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// SetLng sets the "lng" field.
func (suo *StoreUpdateOne) SetLng(f float64) *StoreUpdateOne {
	suo.mutation.ResetLng()
	suo.mutation.SetLng(f)
	return suo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLng(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLng(*f)
	}
	return suo
}

// AddLng adds f to the "lng" field.
func (suo *StoreUpdateOne) AddLng(f float64) *StoreUpdateOne {
	suo.mutation.AddLng(f)
	return suo
}

// SetLat sets the "lat" field.
func (suo *StoreUpdateOne) SetLat(f float64) *StoreUpdateOne {
	suo.mutation.ResetLat()
	suo.mutation.SetLat(f)
	return suo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLat(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLat(*f)
	}
	return suo
}

// AddLat adds f to the "lat" field.
func (suo *StoreUpdateOne) AddLat(f float64) *StoreUpdateOne {
	suo.mutation.AddLat(f)
	return suo
}

// SetAddress sets the "address" field.
func (suo *StoreUpdateOne) SetAddress(s string) *StoreUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableAddress(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// SetEbikeObtain sets the "ebike_obtain" field.
func (suo *StoreUpdateOne) SetEbikeObtain(b bool) *StoreUpdateOne {
	suo.mutation.SetEbikeObtain(b)
	return suo
}

// SetNillableEbikeObtain sets the "ebike_obtain" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEbikeObtain(b *bool) *StoreUpdateOne {
	if b != nil {
		suo.SetEbikeObtain(*b)
	}
	return suo
}

// SetEbikeRepair sets the "ebike_repair" field.
func (suo *StoreUpdateOne) SetEbikeRepair(b bool) *StoreUpdateOne {
	suo.mutation.SetEbikeRepair(b)
	return suo
}

// SetNillableEbikeRepair sets the "ebike_repair" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEbikeRepair(b *bool) *StoreUpdateOne {
	if b != nil {
		suo.SetEbikeRepair(*b)
	}
	return suo
}

// SetEbikeSale sets the "ebike_sale" field.
func (suo *StoreUpdateOne) SetEbikeSale(b bool) *StoreUpdateOne {
	suo.mutation.SetEbikeSale(b)
	return suo
}

// SetNillableEbikeSale sets the "ebike_sale" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEbikeSale(b *bool) *StoreUpdateOne {
	if b != nil {
		suo.SetEbikeSale(*b)
	}
	return suo
}

// SetRest sets the "rest" field.
func (suo *StoreUpdateOne) SetRest(b bool) *StoreUpdateOne {
	suo.mutation.SetRest(b)
	return suo
}

// SetNillableRest sets the "rest" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableRest(b *bool) *StoreUpdateOne {
	if b != nil {
		suo.SetRest(*b)
	}
	return suo
}

// SetBusinessHours sets the "business_hours" field.
func (suo *StoreUpdateOne) SetBusinessHours(s string) *StoreUpdateOne {
	suo.mutation.SetBusinessHours(s)
	return suo
}

// SetNillableBusinessHours sets the "business_hours" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableBusinessHours(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetBusinessHours(*s)
	}
	return suo
}

// ClearBusinessHours clears the value of the "business_hours" field.
func (suo *StoreUpdateOne) ClearBusinessHours() *StoreUpdateOne {
	suo.mutation.ClearBusinessHours()
	return suo
}

// SetPhotos sets the "photos" field.
func (suo *StoreUpdateOne) SetPhotos(s []string) *StoreUpdateOne {
	suo.mutation.SetPhotos(s)
	return suo
}

// AppendPhotos appends s to the "photos" field.
func (suo *StoreUpdateOne) AppendPhotos(s []string) *StoreUpdateOne {
	suo.mutation.AppendPhotos(s)
	return suo
}

// ClearPhotos clears the value of the "photos" field.
func (suo *StoreUpdateOne) ClearPhotos() *StoreUpdateOne {
	suo.mutation.ClearPhotos()
	return suo
}

// SetPhone sets the "phone" field.
func (suo *StoreUpdateOne) SetPhone(s string) *StoreUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillablePhone(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetPhone(*s)
	}
	return suo
}

// SetHeadPic sets the "head_pic" field.
func (suo *StoreUpdateOne) SetHeadPic(s string) *StoreUpdateOne {
	suo.mutation.SetHeadPic(s)
	return suo
}

// SetNillableHeadPic sets the "head_pic" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableHeadPic(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetHeadPic(*s)
	}
	return suo
}

// SetCity sets the "city" edge to the City entity.
func (suo *StoreUpdateOne) SetCity(c *City) *StoreUpdateOne {
	return suo.SetCityID(c.ID)
}

// SetGroup sets the "group" edge to the StoreGroup entity.
func (suo *StoreUpdateOne) SetGroup(s *StoreGroup) *StoreUpdateOne {
	return suo.SetGroupID(s.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (suo *StoreUpdateOne) SetBranch(b *Branch) *StoreUpdateOne {
	return suo.SetBranchID(b.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (suo *StoreUpdateOne) SetEmployee(e *Employee) *StoreUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (suo *StoreUpdateOne) AddStockIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddStockIDs(ids...)
	return suo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (suo *StoreUpdateOne) AddStocks(s ...*Stock) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStockIDs(ids...)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (suo *StoreUpdateOne) AddAttendanceIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddAttendanceIDs(ids...)
	return suo
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (suo *StoreUpdateOne) AddAttendances(a ...*Attendance) *StoreUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAttendanceIDs(ids...)
}

// AddExceptionIDs adds the "exceptions" edge to the Exception entity by IDs.
func (suo *StoreUpdateOne) AddExceptionIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddExceptionIDs(ids...)
	return suo
}

// AddExceptions adds the "exceptions" edges to the Exception entity.
func (suo *StoreUpdateOne) AddExceptions(e ...*Exception) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddExceptionIDs(ids...)
}

// AddGoodIDs adds the "goods" edge to the StoreGoods entity by IDs.
func (suo *StoreUpdateOne) AddGoodIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddGoodIDs(ids...)
	return suo
}

// AddGoods adds the "goods" edges to the StoreGoods entity.
func (suo *StoreUpdateOne) AddGoods(s ...*StoreGoods) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddGoodIDs(ids...)
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (suo *StoreUpdateOne) AddEmployeeIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddEmployeeIDs(ids...)
	return suo
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (suo *StoreUpdateOne) AddEmployees(e ...*Employee) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEmployeeIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (suo *StoreUpdateOne) ClearCity() *StoreUpdateOne {
	suo.mutation.ClearCity()
	return suo
}

// ClearGroup clears the "group" edge to the StoreGroup entity.
func (suo *StoreUpdateOne) ClearGroup() *StoreUpdateOne {
	suo.mutation.ClearGroup()
	return suo
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (suo *StoreUpdateOne) ClearBranch() *StoreUpdateOne {
	suo.mutation.ClearBranch()
	return suo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (suo *StoreUpdateOne) ClearEmployee() *StoreUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (suo *StoreUpdateOne) ClearStocks() *StoreUpdateOne {
	suo.mutation.ClearStocks()
	return suo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (suo *StoreUpdateOne) RemoveStockIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveStockIDs(ids...)
	return suo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (suo *StoreUpdateOne) RemoveStocks(s ...*Stock) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStockIDs(ids...)
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (suo *StoreUpdateOne) ClearAttendances() *StoreUpdateOne {
	suo.mutation.ClearAttendances()
	return suo
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (suo *StoreUpdateOne) RemoveAttendanceIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveAttendanceIDs(ids...)
	return suo
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (suo *StoreUpdateOne) RemoveAttendances(a ...*Attendance) *StoreUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAttendanceIDs(ids...)
}

// ClearExceptions clears all "exceptions" edges to the Exception entity.
func (suo *StoreUpdateOne) ClearExceptions() *StoreUpdateOne {
	suo.mutation.ClearExceptions()
	return suo
}

// RemoveExceptionIDs removes the "exceptions" edge to Exception entities by IDs.
func (suo *StoreUpdateOne) RemoveExceptionIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveExceptionIDs(ids...)
	return suo
}

// RemoveExceptions removes "exceptions" edges to Exception entities.
func (suo *StoreUpdateOne) RemoveExceptions(e ...*Exception) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveExceptionIDs(ids...)
}

// ClearGoods clears all "goods" edges to the StoreGoods entity.
func (suo *StoreUpdateOne) ClearGoods() *StoreUpdateOne {
	suo.mutation.ClearGoods()
	return suo
}

// RemoveGoodIDs removes the "goods" edge to StoreGoods entities by IDs.
func (suo *StoreUpdateOne) RemoveGoodIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveGoodIDs(ids...)
	return suo
}

// RemoveGoods removes "goods" edges to StoreGoods entities.
func (suo *StoreUpdateOne) RemoveGoods(s ...*StoreGoods) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveGoodIDs(ids...)
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (suo *StoreUpdateOne) ClearEmployees() *StoreUpdateOne {
	suo.mutation.ClearEmployees()
	return suo
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (suo *StoreUpdateOne) RemoveEmployeeIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveEmployeeIDs(ids...)
	return suo
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (suo *StoreUpdateOne) RemoveEmployees(e ...*Employee) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEmployeeIDs(ids...)
}

// Where appends a list predicates to the StoreUpdate builder.
func (suo *StoreUpdateOne) Where(ps ...predicate.Store) *StoreUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoreUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoreUpdateOne) check() error {
	if v, ok := suo.mutation.Phone(); ok {
		if err := store.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Store.phone": %w`, err)}
		}
	}
	if _, ok := suo.mutation.CityID(); suo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.city"`)
	}
	if _, ok := suo.mutation.BranchID(); suo.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.branch"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StoreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(store.Table, store.Columns, sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(store.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(store.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(store.FieldDeletedAt, field.TypeTime)
	}
	if suo.mutation.CreatorCleared() {
		_spec.ClearField(store.FieldCreator, field.TypeJSON)
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.SetField(store.FieldLastModifier, field.TypeJSON, value)
	}
	if suo.mutation.LastModifierCleared() {
		_spec.ClearField(store.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(store.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(store.FieldRemark, field.TypeString)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(store.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(store.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(store.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.Lng(); ok {
		_spec.SetField(store.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLng(); ok {
		_spec.AddField(store.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.SetField(store.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.AddedLat(); ok {
		_spec.AddField(store.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(store.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.EbikeObtain(); ok {
		_spec.SetField(store.FieldEbikeObtain, field.TypeBool, value)
	}
	if value, ok := suo.mutation.EbikeRepair(); ok {
		_spec.SetField(store.FieldEbikeRepair, field.TypeBool, value)
	}
	if value, ok := suo.mutation.EbikeSale(); ok {
		_spec.SetField(store.FieldEbikeSale, field.TypeBool, value)
	}
	if value, ok := suo.mutation.Rest(); ok {
		_spec.SetField(store.FieldRest, field.TypeBool, value)
	}
	if value, ok := suo.mutation.BusinessHours(); ok {
		_spec.SetField(store.FieldBusinessHours, field.TypeString, value)
	}
	if suo.mutation.BusinessHoursCleared() {
		_spec.ClearField(store.FieldBusinessHours, field.TypeString)
	}
	if value, ok := suo.mutation.Photos(); ok {
		_spec.SetField(store.FieldPhotos, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedPhotos(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, store.FieldPhotos, value)
		})
	}
	if suo.mutation.PhotosCleared() {
		_spec.ClearField(store.FieldPhotos, field.TypeJSON)
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.SetField(store.FieldPhone, field.TypeString, value)
	}
	if value, ok := suo.mutation.HeadPic(); ok {
		_spec.SetField(store.FieldHeadPic, field.TypeString, value)
	}
	if suo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.GroupTable,
			Columns: []string{store.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.GroupTable,
			Columns: []string{store.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !suo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedExceptionsIDs(); len(nodes) > 0 && !suo.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExceptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedGoodsIDs(); len(nodes) > 0 && !suo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.GoodsTable,
			Columns: []string{store.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !suo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   store.EmployeesTable,
			Columns: store.EmployeesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
