// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StoreUpdate is the builder for updating Store entities.
type StoreUpdate struct {
	config
	hooks    []Hook
	mutation *StoreMutation
}

// Where appends a list predicates to the StoreUpdate builder.
func (su *StoreUpdate) Where(ps ...predicate.Store) *StoreUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StoreUpdate) SetUpdatedAt(t time.Time) *StoreUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StoreUpdate) SetDeletedAt(t time.Time) *StoreUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StoreUpdate) SetNillableDeletedAt(t *time.Time) *StoreUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StoreUpdate) ClearDeletedAt() *StoreUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *StoreUpdate) SetLastModifier(m *model.Modifier) *StoreUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *StoreUpdate) ClearLastModifier() *StoreUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *StoreUpdate) SetRemark(s string) *StoreUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StoreUpdate) SetNillableRemark(s *string) *StoreUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *StoreUpdate) ClearRemark() *StoreUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetCityID sets the "city_id" field.
func (su *StoreUpdate) SetCityID(u uint64) *StoreUpdate {
	su.mutation.SetCityID(u)
	return su
}

// SetEmployeeID sets the "employee_id" field.
func (su *StoreUpdate) SetEmployeeID(u uint64) *StoreUpdate {
	su.mutation.SetEmployeeID(u)
	return su
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (su *StoreUpdate) SetNillableEmployeeID(u *uint64) *StoreUpdate {
	if u != nil {
		su.SetEmployeeID(*u)
	}
	return su
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (su *StoreUpdate) ClearEmployeeID() *StoreUpdate {
	su.mutation.ClearEmployeeID()
	return su
}

// SetBranchID sets the "branch_id" field.
func (su *StoreUpdate) SetBranchID(u uint64) *StoreUpdate {
	su.mutation.SetBranchID(u)
	return su
}

// SetName sets the "name" field.
func (su *StoreUpdate) SetName(s string) *StoreUpdate {
	su.mutation.SetName(s)
	return su
}

// SetStatus sets the "status" field.
func (su *StoreUpdate) SetStatus(u uint8) *StoreUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(u)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StoreUpdate) SetNillableStatus(u *uint8) *StoreUpdate {
	if u != nil {
		su.SetStatus(*u)
	}
	return su
}

// AddStatus adds u to the "status" field.
func (su *StoreUpdate) AddStatus(u int8) *StoreUpdate {
	su.mutation.AddStatus(u)
	return su
}

// SetLng sets the "lng" field.
func (su *StoreUpdate) SetLng(f float64) *StoreUpdate {
	su.mutation.ResetLng()
	su.mutation.SetLng(f)
	return su
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLng(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLng(*f)
	}
	return su
}

// AddLng adds f to the "lng" field.
func (su *StoreUpdate) AddLng(f float64) *StoreUpdate {
	su.mutation.AddLng(f)
	return su
}

// ClearLng clears the value of the "lng" field.
func (su *StoreUpdate) ClearLng() *StoreUpdate {
	su.mutation.ClearLng()
	return su
}

// SetLat sets the "lat" field.
func (su *StoreUpdate) SetLat(f float64) *StoreUpdate {
	su.mutation.ResetLat()
	su.mutation.SetLat(f)
	return su
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (su *StoreUpdate) SetNillableLat(f *float64) *StoreUpdate {
	if f != nil {
		su.SetLat(*f)
	}
	return su
}

// AddLat adds f to the "lat" field.
func (su *StoreUpdate) AddLat(f float64) *StoreUpdate {
	su.mutation.AddLat(f)
	return su
}

// ClearLat clears the value of the "lat" field.
func (su *StoreUpdate) ClearLat() *StoreUpdate {
	su.mutation.ClearLat()
	return su
}

// SetAddress sets the "address" field.
func (su *StoreUpdate) SetAddress(s string) *StoreUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (su *StoreUpdate) SetNillableAddress(s *string) *StoreUpdate {
	if s != nil {
		su.SetAddress(*s)
	}
	return su
}

// ClearAddress clears the value of the "address" field.
func (su *StoreUpdate) ClearAddress() *StoreUpdate {
	su.mutation.ClearAddress()
	return su
}

// SetCity sets the "city" edge to the City entity.
func (su *StoreUpdate) SetCity(c *City) *StoreUpdate {
	return su.SetCityID(c.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (su *StoreUpdate) SetBranch(b *Branch) *StoreUpdate {
	return su.SetBranchID(b.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (su *StoreUpdate) SetEmployee(e *Employee) *StoreUpdate {
	return su.SetEmployeeID(e.ID)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (su *StoreUpdate) AddStockIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddStockIDs(ids...)
	return su
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (su *StoreUpdate) AddStocks(s ...*Stock) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddStockIDs(ids...)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (su *StoreUpdate) AddAttendanceIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddAttendanceIDs(ids...)
	return su
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (su *StoreUpdate) AddAttendances(a ...*Attendance) *StoreUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAttendanceIDs(ids...)
}

// AddExceptionIDs adds the "exceptions" edge to the Exception entity by IDs.
func (su *StoreUpdate) AddExceptionIDs(ids ...uint64) *StoreUpdate {
	su.mutation.AddExceptionIDs(ids...)
	return su
}

// AddExceptions adds the "exceptions" edges to the Exception entity.
func (su *StoreUpdate) AddExceptions(e ...*Exception) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddExceptionIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (su *StoreUpdate) Mutation() *StoreMutation {
	return su.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (su *StoreUpdate) ClearCity() *StoreUpdate {
	su.mutation.ClearCity()
	return su
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (su *StoreUpdate) ClearBranch() *StoreUpdate {
	su.mutation.ClearBranch()
	return su
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (su *StoreUpdate) ClearEmployee() *StoreUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (su *StoreUpdate) ClearStocks() *StoreUpdate {
	su.mutation.ClearStocks()
	return su
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (su *StoreUpdate) RemoveStockIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveStockIDs(ids...)
	return su
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (su *StoreUpdate) RemoveStocks(s ...*Stock) *StoreUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveStockIDs(ids...)
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (su *StoreUpdate) ClearAttendances() *StoreUpdate {
	su.mutation.ClearAttendances()
	return su
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (su *StoreUpdate) RemoveAttendanceIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveAttendanceIDs(ids...)
	return su
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (su *StoreUpdate) RemoveAttendances(a ...*Attendance) *StoreUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAttendanceIDs(ids...)
}

// ClearExceptions clears all "exceptions" edges to the Exception entity.
func (su *StoreUpdate) ClearExceptions() *StoreUpdate {
	su.mutation.ClearExceptions()
	return su
}

// RemoveExceptionIDs removes the "exceptions" edge to Exception entities by IDs.
func (su *StoreUpdate) RemoveExceptionIDs(ids ...uint64) *StoreUpdate {
	su.mutation.RemoveExceptionIDs(ids...)
	return su
}

// RemoveExceptions removes "exceptions" edges to Exception entities.
func (su *StoreUpdate) RemoveExceptions(e ...*Exception) *StoreUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveExceptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StoreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StoreUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StoreUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StoreUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StoreUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StoreUpdate) check() error {
	if _, ok := su.mutation.CityID(); su.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.city"`)
	}
	if _, ok := su.mutation.BranchID(); su.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.branch"`)
	}
	return nil
}

func (su *StoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: store.FieldDeletedAt,
		})
	}
	if su.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: store.FieldCreator,
		})
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldLastModifier,
		})
	}
	if su.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: store.FieldLastModifier,
		})
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldRemark,
		})
	}
	if su.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: store.FieldRemark,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldName,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: store.FieldStatus,
		})
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: store.FieldStatus,
		})
	}
	if value, ok := su.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLng,
		})
	}
	if value, ok := su.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLng,
		})
	}
	if su.mutation.LngCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: store.FieldLng,
		})
	}
	if value, ok := su.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLat,
		})
	}
	if value, ok := su.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLat,
		})
	}
	if su.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: store.FieldLat,
		})
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldAddress,
		})
	}
	if su.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: store.FieldAddress,
		})
	}
	if su.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedStocksIDs(); len(nodes) > 0 && !su.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !su.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedExceptionsIDs(); len(nodes) > 0 && !su.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ExceptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StoreUpdateOne is the builder for updating a single Store entity.
type StoreUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StoreMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StoreUpdateOne) SetUpdatedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StoreUpdateOne) SetDeletedAt(t time.Time) *StoreUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableDeletedAt(t *time.Time) *StoreUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StoreUpdateOne) ClearDeletedAt() *StoreUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *StoreUpdateOne) SetLastModifier(m *model.Modifier) *StoreUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *StoreUpdateOne) ClearLastModifier() *StoreUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StoreUpdateOne) SetRemark(s string) *StoreUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableRemark(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *StoreUpdateOne) ClearRemark() *StoreUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetCityID sets the "city_id" field.
func (suo *StoreUpdateOne) SetCityID(u uint64) *StoreUpdateOne {
	suo.mutation.SetCityID(u)
	return suo
}

// SetEmployeeID sets the "employee_id" field.
func (suo *StoreUpdateOne) SetEmployeeID(u uint64) *StoreUpdateOne {
	suo.mutation.SetEmployeeID(u)
	return suo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableEmployeeID(u *uint64) *StoreUpdateOne {
	if u != nil {
		suo.SetEmployeeID(*u)
	}
	return suo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (suo *StoreUpdateOne) ClearEmployeeID() *StoreUpdateOne {
	suo.mutation.ClearEmployeeID()
	return suo
}

// SetBranchID sets the "branch_id" field.
func (suo *StoreUpdateOne) SetBranchID(u uint64) *StoreUpdateOne {
	suo.mutation.SetBranchID(u)
	return suo
}

// SetName sets the "name" field.
func (suo *StoreUpdateOne) SetName(s string) *StoreUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetStatus sets the "status" field.
func (suo *StoreUpdateOne) SetStatus(u uint8) *StoreUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(u)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableStatus(u *uint8) *StoreUpdateOne {
	if u != nil {
		suo.SetStatus(*u)
	}
	return suo
}

// AddStatus adds u to the "status" field.
func (suo *StoreUpdateOne) AddStatus(u int8) *StoreUpdateOne {
	suo.mutation.AddStatus(u)
	return suo
}

// SetLng sets the "lng" field.
func (suo *StoreUpdateOne) SetLng(f float64) *StoreUpdateOne {
	suo.mutation.ResetLng()
	suo.mutation.SetLng(f)
	return suo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLng(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLng(*f)
	}
	return suo
}

// AddLng adds f to the "lng" field.
func (suo *StoreUpdateOne) AddLng(f float64) *StoreUpdateOne {
	suo.mutation.AddLng(f)
	return suo
}

// ClearLng clears the value of the "lng" field.
func (suo *StoreUpdateOne) ClearLng() *StoreUpdateOne {
	suo.mutation.ClearLng()
	return suo
}

// SetLat sets the "lat" field.
func (suo *StoreUpdateOne) SetLat(f float64) *StoreUpdateOne {
	suo.mutation.ResetLat()
	suo.mutation.SetLat(f)
	return suo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableLat(f *float64) *StoreUpdateOne {
	if f != nil {
		suo.SetLat(*f)
	}
	return suo
}

// AddLat adds f to the "lat" field.
func (suo *StoreUpdateOne) AddLat(f float64) *StoreUpdateOne {
	suo.mutation.AddLat(f)
	return suo
}

// ClearLat clears the value of the "lat" field.
func (suo *StoreUpdateOne) ClearLat() *StoreUpdateOne {
	suo.mutation.ClearLat()
	return suo
}

// SetAddress sets the "address" field.
func (suo *StoreUpdateOne) SetAddress(s string) *StoreUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (suo *StoreUpdateOne) SetNillableAddress(s *string) *StoreUpdateOne {
	if s != nil {
		suo.SetAddress(*s)
	}
	return suo
}

// ClearAddress clears the value of the "address" field.
func (suo *StoreUpdateOne) ClearAddress() *StoreUpdateOne {
	suo.mutation.ClearAddress()
	return suo
}

// SetCity sets the "city" edge to the City entity.
func (suo *StoreUpdateOne) SetCity(c *City) *StoreUpdateOne {
	return suo.SetCityID(c.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (suo *StoreUpdateOne) SetBranch(b *Branch) *StoreUpdateOne {
	return suo.SetBranchID(b.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (suo *StoreUpdateOne) SetEmployee(e *Employee) *StoreUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (suo *StoreUpdateOne) AddStockIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddStockIDs(ids...)
	return suo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (suo *StoreUpdateOne) AddStocks(s ...*Stock) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddStockIDs(ids...)
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by IDs.
func (suo *StoreUpdateOne) AddAttendanceIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddAttendanceIDs(ids...)
	return suo
}

// AddAttendances adds the "attendances" edges to the Attendance entity.
func (suo *StoreUpdateOne) AddAttendances(a ...*Attendance) *StoreUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAttendanceIDs(ids...)
}

// AddExceptionIDs adds the "exceptions" edge to the Exception entity by IDs.
func (suo *StoreUpdateOne) AddExceptionIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.AddExceptionIDs(ids...)
	return suo
}

// AddExceptions adds the "exceptions" edges to the Exception entity.
func (suo *StoreUpdateOne) AddExceptions(e ...*Exception) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddExceptionIDs(ids...)
}

// Mutation returns the StoreMutation object of the builder.
func (suo *StoreUpdateOne) Mutation() *StoreMutation {
	return suo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (suo *StoreUpdateOne) ClearCity() *StoreUpdateOne {
	suo.mutation.ClearCity()
	return suo
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (suo *StoreUpdateOne) ClearBranch() *StoreUpdateOne {
	suo.mutation.ClearBranch()
	return suo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (suo *StoreUpdateOne) ClearEmployee() *StoreUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (suo *StoreUpdateOne) ClearStocks() *StoreUpdateOne {
	suo.mutation.ClearStocks()
	return suo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (suo *StoreUpdateOne) RemoveStockIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveStockIDs(ids...)
	return suo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (suo *StoreUpdateOne) RemoveStocks(s ...*Stock) *StoreUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveStockIDs(ids...)
}

// ClearAttendances clears all "attendances" edges to the Attendance entity.
func (suo *StoreUpdateOne) ClearAttendances() *StoreUpdateOne {
	suo.mutation.ClearAttendances()
	return suo
}

// RemoveAttendanceIDs removes the "attendances" edge to Attendance entities by IDs.
func (suo *StoreUpdateOne) RemoveAttendanceIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveAttendanceIDs(ids...)
	return suo
}

// RemoveAttendances removes "attendances" edges to Attendance entities.
func (suo *StoreUpdateOne) RemoveAttendances(a ...*Attendance) *StoreUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAttendanceIDs(ids...)
}

// ClearExceptions clears all "exceptions" edges to the Exception entity.
func (suo *StoreUpdateOne) ClearExceptions() *StoreUpdateOne {
	suo.mutation.ClearExceptions()
	return suo
}

// RemoveExceptionIDs removes the "exceptions" edge to Exception entities by IDs.
func (suo *StoreUpdateOne) RemoveExceptionIDs(ids ...uint64) *StoreUpdateOne {
	suo.mutation.RemoveExceptionIDs(ids...)
	return suo
}

// RemoveExceptions removes "exceptions" edges to Exception entities.
func (suo *StoreUpdateOne) RemoveExceptions(e ...*Exception) *StoreUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveExceptionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StoreUpdateOne) Select(field string, fields ...string) *StoreUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Store entity.
func (suo *StoreUpdateOne) Save(ctx context.Context) (*Store, error) {
	var (
		err  error
		node *Store
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StoreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Store)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StoreMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StoreUpdateOne) SaveX(ctx context.Context) *Store {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StoreUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StoreUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StoreUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if store.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized store.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := store.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StoreUpdateOne) check() error {
	if _, ok := suo.mutation.CityID(); suo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.city"`)
	}
	if _, ok := suo.mutation.BranchID(); suo.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Store.branch"`)
	}
	return nil
}

func (suo *StoreUpdateOne) sqlSave(ctx context.Context) (_node *Store, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   store.Table,
			Columns: store.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: store.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Store.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, store.FieldID)
		for _, f := range fields {
			if !store.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != store.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: store.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: store.FieldDeletedAt,
		})
	}
	if suo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: store.FieldCreator,
		})
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: store.FieldLastModifier,
		})
	}
	if suo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: store.FieldLastModifier,
		})
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldRemark,
		})
	}
	if suo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: store.FieldRemark,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldName,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: store.FieldStatus,
		})
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: store.FieldStatus,
		})
	}
	if value, ok := suo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLng,
		})
	}
	if value, ok := suo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLng,
		})
	}
	if suo.mutation.LngCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: store.FieldLng,
		})
	}
	if value, ok := suo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLat,
		})
	}
	if value, ok := suo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: store.FieldLat,
		})
	}
	if suo.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: store.FieldLat,
		})
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: store.FieldAddress,
		})
	}
	if suo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: store.FieldAddress,
		})
	}
	if suo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   store.CityTable,
			Columns: []string{store.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   store.BranchTable,
			Columns: []string{store.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   store.EmployeeTable,
			Columns: []string{store.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !suo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.StocksTable,
			Columns: []string{store.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAttendancesIDs(); len(nodes) > 0 && !suo.mutation.AttendancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AttendancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.AttendancesTable,
			Columns: []string{store.AttendancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: attendance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedExceptionsIDs(); len(nodes) > 0 && !suo.mutation.ExceptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ExceptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   store.ExceptionsTable,
			Columns: []string{store.ExceptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: exception.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Store{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{store.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
