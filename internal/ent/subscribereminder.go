// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
)

// SubscribeReminder is the model entity for the SubscribeReminder schema.
type SubscribeReminder struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// Type holds the value of the "type" field.
	// 催费类型
	Type subscribereminder.Type `json:"type,omitempty"`
	// Phone holds the value of the "phone" field.
	// 电话
	Phone string `json:"phone,omitempty"`
	// Name holds the value of the "name" field.
	// 姓名
	Name string `json:"name,omitempty"`
	// Success holds the value of the "success" field.
	// 是否成功
	Success bool `json:"success,omitempty"`
	// Days holds the value of the "days" field.
	// 剩余天数
	Days int `json:"days,omitempty"`
	// PlanName holds the value of the "plan_name" field.
	// 套餐名称
	PlanName string `json:"plan_name,omitempty"`
	// Date holds the value of the "date" field.
	// 发送日期
	Date string `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribeReminderQuery when eager-loading is set.
	Edges SubscribeReminderEdges `json:"edges"`
}

// SubscribeReminderEdges holds the relations/edges for other nodes in the graph.
type SubscribeReminderEdges struct {
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribeReminderEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[0] {
		if e.Subscribe == nil {
			// The edge subscribe was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscribeReminder) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribereminder.FieldSuccess:
			values[i] = new(sql.NullBool)
		case subscribereminder.FieldID, subscribereminder.FieldSubscribeID, subscribereminder.FieldDays:
			values[i] = new(sql.NullInt64)
		case subscribereminder.FieldType, subscribereminder.FieldPhone, subscribereminder.FieldName, subscribereminder.FieldPlanName, subscribereminder.FieldDate:
			values[i] = new(sql.NullString)
		case subscribereminder.FieldCreatedAt, subscribereminder.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubscribeReminder", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscribeReminder fields.
func (sr *SubscribeReminder) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribereminder.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = uint64(value.Int64)
		case subscribereminder.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case subscribereminder.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case subscribereminder.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				sr.SubscribeID = uint64(value.Int64)
			}
		case subscribereminder.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				sr.Type = subscribereminder.Type(value.String)
			}
		case subscribereminder.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				sr.Phone = value.String
			}
		case subscribereminder.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sr.Name = value.String
			}
		case subscribereminder.FieldSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field success", values[i])
			} else if value.Valid {
				sr.Success = value.Bool
			}
		case subscribereminder.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				sr.Days = int(value.Int64)
			}
		case subscribereminder.FieldPlanName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_name", values[i])
			} else if value.Valid {
				sr.PlanName = value.String
			}
		case subscribereminder.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				sr.Date = value.String
			}
		}
	}
	return nil
}

// QuerySubscribe queries the "subscribe" edge of the SubscribeReminder entity.
func (sr *SubscribeReminder) QuerySubscribe() *SubscribeQuery {
	return (&SubscribeReminderClient{config: sr.config}).QuerySubscribe(sr)
}

// Update returns a builder for updating this SubscribeReminder.
// Note that you need to call SubscribeReminder.Unwrap() before calling this method if this SubscribeReminder
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SubscribeReminder) Update() *SubscribeReminderUpdateOne {
	return (&SubscribeReminderClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the SubscribeReminder entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SubscribeReminder) Unwrap() *SubscribeReminder {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscribeReminder is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SubscribeReminder) String() string {
	var builder strings.Builder
	builder.WriteString("SubscribeReminder(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", sr.SubscribeID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", sr.Type))
	builder.WriteString(", phone=")
	builder.WriteString(sr.Phone)
	builder.WriteString(", name=")
	builder.WriteString(sr.Name)
	builder.WriteString(", success=")
	builder.WriteString(fmt.Sprintf("%v", sr.Success))
	builder.WriteString(", days=")
	builder.WriteString(fmt.Sprintf("%v", sr.Days))
	builder.WriteString(", plan_name=")
	builder.WriteString(sr.PlanName)
	builder.WriteString(", date=")
	builder.WriteString(sr.Date)
	builder.WriteByte(')')
	return builder.String()
}

// SubscribeReminders is a parsable slice of SubscribeReminder.
type SubscribeReminders []*SubscribeReminder

func (sr SubscribeReminders) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
