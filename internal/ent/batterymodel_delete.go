// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelDelete is the builder for deleting a BatteryModel entity.
type BatteryModelDelete struct {
	config
	hooks    []Hook
	mutation *BatteryModelMutation
}

// Where appends a list predicates to the BatteryModelDelete builder.
func (bmd *BatteryModelDelete) Where(ps ...predicate.BatteryModel) *BatteryModelDelete {
	bmd.mutation.Where(ps...)
	return bmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bmd *BatteryModelDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, BatteryModelMutation](ctx, bmd.sqlExec, bmd.mutation, bmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bmd *BatteryModelDelete) ExecX(ctx context.Context) int {
	n, err := bmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bmd *BatteryModelDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(batterymodel.Table, sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64))
	if ps := bmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bmd.mutation.done = true
	return affected, err
}

// BatteryModelDeleteOne is the builder for deleting a single BatteryModel entity.
type BatteryModelDeleteOne struct {
	bmd *BatteryModelDelete
}

// Where appends a list predicates to the BatteryModelDelete builder.
func (bmdo *BatteryModelDeleteOne) Where(ps ...predicate.BatteryModel) *BatteryModelDeleteOne {
	bmdo.bmd.mutation.Where(ps...)
	return bmdo
}

// Exec executes the deletion query.
func (bmdo *BatteryModelDeleteOne) Exec(ctx context.Context) error {
	n, err := bmdo.bmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{batterymodel.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bmdo *BatteryModelDeleteOne) ExecX(ctx context.Context) {
	if err := bmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
