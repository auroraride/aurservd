// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stocksummary"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StockSummaryUpdate is the builder for updating StockSummary entities.
type StockSummaryUpdate struct {
	config
	hooks     []Hook
	mutation  *StockSummaryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StockSummaryUpdate builder.
func (ssu *StockSummaryUpdate) Where(ps ...predicate.StockSummary) *StockSummaryUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ssu *StockSummaryUpdate) SetEnterpriseID(u uint64) *StockSummaryUpdate {
	ssu.mutation.SetEnterpriseID(u)
	return ssu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableEnterpriseID(u *uint64) *StockSummaryUpdate {
	if u != nil {
		ssu.SetEnterpriseID(*u)
	}
	return ssu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (ssu *StockSummaryUpdate) ClearEnterpriseID() *StockSummaryUpdate {
	ssu.mutation.ClearEnterpriseID()
	return ssu
}

// SetStationID sets the "station_id" field.
func (ssu *StockSummaryUpdate) SetStationID(u uint64) *StockSummaryUpdate {
	ssu.mutation.SetStationID(u)
	return ssu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableStationID(u *uint64) *StockSummaryUpdate {
	if u != nil {
		ssu.SetStationID(*u)
	}
	return ssu
}

// ClearStationID clears the value of the "station_id" field.
func (ssu *StockSummaryUpdate) ClearStationID() *StockSummaryUpdate {
	ssu.mutation.ClearStationID()
	return ssu
}

// SetStoreID sets the "store_id" field.
func (ssu *StockSummaryUpdate) SetStoreID(u uint64) *StockSummaryUpdate {
	ssu.mutation.SetStoreID(u)
	return ssu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableStoreID(u *uint64) *StockSummaryUpdate {
	if u != nil {
		ssu.SetStoreID(*u)
	}
	return ssu
}

// ClearStoreID clears the value of the "store_id" field.
func (ssu *StockSummaryUpdate) ClearStoreID() *StockSummaryUpdate {
	ssu.mutation.ClearStoreID()
	return ssu
}

// SetRiderID sets the "rider_id" field.
func (ssu *StockSummaryUpdate) SetRiderID(u uint64) *StockSummaryUpdate {
	ssu.mutation.SetRiderID(u)
	return ssu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableRiderID(u *uint64) *StockSummaryUpdate {
	if u != nil {
		ssu.SetRiderID(*u)
	}
	return ssu
}

// ClearRiderID clears the value of the "rider_id" field.
func (ssu *StockSummaryUpdate) ClearRiderID() *StockSummaryUpdate {
	ssu.mutation.ClearRiderID()
	return ssu
}

// SetCabinetID sets the "cabinet_id" field.
func (ssu *StockSummaryUpdate) SetCabinetID(u uint64) *StockSummaryUpdate {
	ssu.mutation.SetCabinetID(u)
	return ssu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableCabinetID(u *uint64) *StockSummaryUpdate {
	if u != nil {
		ssu.SetCabinetID(*u)
	}
	return ssu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (ssu *StockSummaryUpdate) ClearCabinetID() *StockSummaryUpdate {
	ssu.mutation.ClearCabinetID()
	return ssu
}

// SetDate sets the "date" field.
func (ssu *StockSummaryUpdate) SetDate(s string) *StockSummaryUpdate {
	ssu.mutation.SetDate(s)
	return ssu
}

// SetBatteryNum sets the "battery_num" field.
func (ssu *StockSummaryUpdate) SetBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBatteryNum()
	ssu.mutation.SetBatteryNum(i)
	return ssu
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBatteryNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBatteryNum(*i)
	}
	return ssu
}

// AddBatteryNum adds i to the "battery_num" field.
func (ssu *StockSummaryUpdate) AddBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBatteryNum(i)
	return ssu
}

// SetBatteryOutboundNum sets the "battery_outbound_num" field.
func (ssu *StockSummaryUpdate) SetBatteryOutboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBatteryOutboundNum()
	ssu.mutation.SetBatteryOutboundNum(i)
	return ssu
}

// SetNillableBatteryOutboundNum sets the "battery_outbound_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBatteryOutboundNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBatteryOutboundNum(*i)
	}
	return ssu
}

// AddBatteryOutboundNum adds i to the "battery_outbound_num" field.
func (ssu *StockSummaryUpdate) AddBatteryOutboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBatteryOutboundNum(i)
	return ssu
}

// SetBatteryInboundNum sets the "battery_inbound_num" field.
func (ssu *StockSummaryUpdate) SetBatteryInboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBatteryInboundNum()
	ssu.mutation.SetBatteryInboundNum(i)
	return ssu
}

// SetNillableBatteryInboundNum sets the "battery_inbound_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBatteryInboundNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBatteryInboundNum(*i)
	}
	return ssu
}

// AddBatteryInboundNum adds i to the "battery_inbound_num" field.
func (ssu *StockSummaryUpdate) AddBatteryInboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBatteryInboundNum(i)
	return ssu
}

// SetBikeNum sets the "bike_num" field.
func (ssu *StockSummaryUpdate) SetBikeNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBikeNum()
	ssu.mutation.SetBikeNum(i)
	return ssu
}

// SetNillableBikeNum sets the "bike_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBikeNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBikeNum(*i)
	}
	return ssu
}

// AddBikeNum adds i to the "bike_num" field.
func (ssu *StockSummaryUpdate) AddBikeNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBikeNum(i)
	return ssu
}

// SetBikeOutboundNum sets the "bike_outbound_num" field.
func (ssu *StockSummaryUpdate) SetBikeOutboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBikeOutboundNum()
	ssu.mutation.SetBikeOutboundNum(i)
	return ssu
}

// SetNillableBikeOutboundNum sets the "bike_outbound_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBikeOutboundNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBikeOutboundNum(*i)
	}
	return ssu
}

// AddBikeOutboundNum adds i to the "bike_outbound_num" field.
func (ssu *StockSummaryUpdate) AddBikeOutboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBikeOutboundNum(i)
	return ssu
}

// SetBikeInboundNum sets the "bike_inbound_num" field.
func (ssu *StockSummaryUpdate) SetBikeInboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetBikeInboundNum()
	ssu.mutation.SetBikeInboundNum(i)
	return ssu
}

// SetNillableBikeInboundNum sets the "bike_inbound_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableBikeInboundNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetBikeInboundNum(*i)
	}
	return ssu
}

// AddBikeInboundNum adds i to the "bike_inbound_num" field.
func (ssu *StockSummaryUpdate) AddBikeInboundNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddBikeInboundNum(i)
	return ssu
}

// SetCabinetBatteryNum sets the "cabinet_battery_num" field.
func (ssu *StockSummaryUpdate) SetCabinetBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetCabinetBatteryNum()
	ssu.mutation.SetCabinetBatteryNum(i)
	return ssu
}

// SetNillableCabinetBatteryNum sets the "cabinet_battery_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableCabinetBatteryNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetCabinetBatteryNum(*i)
	}
	return ssu
}

// AddCabinetBatteryNum adds i to the "cabinet_battery_num" field.
func (ssu *StockSummaryUpdate) AddCabinetBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddCabinetBatteryNum(i)
	return ssu
}

// SetRiderBatteryNum sets the "rider_battery_num" field.
func (ssu *StockSummaryUpdate) SetRiderBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.ResetRiderBatteryNum()
	ssu.mutation.SetRiderBatteryNum(i)
	return ssu
}

// SetNillableRiderBatteryNum sets the "rider_battery_num" field if the given value is not nil.
func (ssu *StockSummaryUpdate) SetNillableRiderBatteryNum(i *int) *StockSummaryUpdate {
	if i != nil {
		ssu.SetRiderBatteryNum(*i)
	}
	return ssu
}

// AddRiderBatteryNum adds i to the "rider_battery_num" field.
func (ssu *StockSummaryUpdate) AddRiderBatteryNum(i int) *StockSummaryUpdate {
	ssu.mutation.AddRiderBatteryNum(i)
	return ssu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ssu *StockSummaryUpdate) SetEnterprise(e *Enterprise) *StockSummaryUpdate {
	return ssu.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ssu *StockSummaryUpdate) SetStation(e *EnterpriseStation) *StockSummaryUpdate {
	return ssu.SetStationID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ssu *StockSummaryUpdate) SetStore(s *Store) *StockSummaryUpdate {
	return ssu.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssu *StockSummaryUpdate) SetRider(r *Rider) *StockSummaryUpdate {
	return ssu.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ssu *StockSummaryUpdate) SetCabinet(c *Cabinet) *StockSummaryUpdate {
	return ssu.SetCabinetID(c.ID)
}

// Mutation returns the StockSummaryMutation object of the builder.
func (ssu *StockSummaryUpdate) Mutation() *StockSummaryMutation {
	return ssu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ssu *StockSummaryUpdate) ClearEnterprise() *StockSummaryUpdate {
	ssu.mutation.ClearEnterprise()
	return ssu
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ssu *StockSummaryUpdate) ClearStation() *StockSummaryUpdate {
	ssu.mutation.ClearStation()
	return ssu
}

// ClearStore clears the "store" edge to the Store entity.
func (ssu *StockSummaryUpdate) ClearStore() *StockSummaryUpdate {
	ssu.mutation.ClearStore()
	return ssu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ssu *StockSummaryUpdate) ClearRider() *StockSummaryUpdate {
	ssu.mutation.ClearRider()
	return ssu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ssu *StockSummaryUpdate) ClearCabinet() *StockSummaryUpdate {
	ssu.mutation.ClearCabinet()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *StockSummaryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *StockSummaryUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *StockSummaryUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *StockSummaryUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *StockSummaryUpdate) check() error {
	if v, ok := ssu.mutation.Date(); ok {
		if err := stocksummary.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "StockSummary.date": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssu *StockSummaryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockSummaryUpdate {
	ssu.modifiers = append(ssu.modifiers, modifiers...)
	return ssu
}

func (ssu *StockSummaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stocksummary.Table, stocksummary.Columns, sqlgraph.NewFieldSpec(stocksummary.FieldID, field.TypeUint64))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Date(); ok {
		_spec.SetField(stocksummary.FieldDate, field.TypeString, value)
	}
	if value, ok := ssu.mutation.BatteryNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.BatteryOutboundNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBatteryOutboundNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.BatteryInboundNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryInboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBatteryInboundNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryInboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.BikeNum(); ok {
		_spec.SetField(stocksummary.FieldBikeNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBikeNum(); ok {
		_spec.AddField(stocksummary.FieldBikeNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.BikeOutboundNum(); ok {
		_spec.SetField(stocksummary.FieldBikeOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBikeOutboundNum(); ok {
		_spec.AddField(stocksummary.FieldBikeOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.BikeInboundNum(); ok {
		_spec.SetField(stocksummary.FieldBikeInboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedBikeInboundNum(); ok {
		_spec.AddField(stocksummary.FieldBikeInboundNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.CabinetBatteryNum(); ok {
		_spec.SetField(stocksummary.FieldCabinetBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedCabinetBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldCabinetBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.RiderBatteryNum(); ok {
		_spec.SetField(stocksummary.FieldRiderBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedRiderBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldRiderBatteryNum, field.TypeInt, value)
	}
	if ssu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ssu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocksummary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// StockSummaryUpdateOne is the builder for updating a single StockSummary entity.
type StockSummaryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StockSummaryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ssuo *StockSummaryUpdateOne) SetEnterpriseID(u uint64) *StockSummaryUpdateOne {
	ssuo.mutation.SetEnterpriseID(u)
	return ssuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableEnterpriseID(u *uint64) *StockSummaryUpdateOne {
	if u != nil {
		ssuo.SetEnterpriseID(*u)
	}
	return ssuo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (ssuo *StockSummaryUpdateOne) ClearEnterpriseID() *StockSummaryUpdateOne {
	ssuo.mutation.ClearEnterpriseID()
	return ssuo
}

// SetStationID sets the "station_id" field.
func (ssuo *StockSummaryUpdateOne) SetStationID(u uint64) *StockSummaryUpdateOne {
	ssuo.mutation.SetStationID(u)
	return ssuo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableStationID(u *uint64) *StockSummaryUpdateOne {
	if u != nil {
		ssuo.SetStationID(*u)
	}
	return ssuo
}

// ClearStationID clears the value of the "station_id" field.
func (ssuo *StockSummaryUpdateOne) ClearStationID() *StockSummaryUpdateOne {
	ssuo.mutation.ClearStationID()
	return ssuo
}

// SetStoreID sets the "store_id" field.
func (ssuo *StockSummaryUpdateOne) SetStoreID(u uint64) *StockSummaryUpdateOne {
	ssuo.mutation.SetStoreID(u)
	return ssuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableStoreID(u *uint64) *StockSummaryUpdateOne {
	if u != nil {
		ssuo.SetStoreID(*u)
	}
	return ssuo
}

// ClearStoreID clears the value of the "store_id" field.
func (ssuo *StockSummaryUpdateOne) ClearStoreID() *StockSummaryUpdateOne {
	ssuo.mutation.ClearStoreID()
	return ssuo
}

// SetRiderID sets the "rider_id" field.
func (ssuo *StockSummaryUpdateOne) SetRiderID(u uint64) *StockSummaryUpdateOne {
	ssuo.mutation.SetRiderID(u)
	return ssuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableRiderID(u *uint64) *StockSummaryUpdateOne {
	if u != nil {
		ssuo.SetRiderID(*u)
	}
	return ssuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (ssuo *StockSummaryUpdateOne) ClearRiderID() *StockSummaryUpdateOne {
	ssuo.mutation.ClearRiderID()
	return ssuo
}

// SetCabinetID sets the "cabinet_id" field.
func (ssuo *StockSummaryUpdateOne) SetCabinetID(u uint64) *StockSummaryUpdateOne {
	ssuo.mutation.SetCabinetID(u)
	return ssuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableCabinetID(u *uint64) *StockSummaryUpdateOne {
	if u != nil {
		ssuo.SetCabinetID(*u)
	}
	return ssuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (ssuo *StockSummaryUpdateOne) ClearCabinetID() *StockSummaryUpdateOne {
	ssuo.mutation.ClearCabinetID()
	return ssuo
}

// SetDate sets the "date" field.
func (ssuo *StockSummaryUpdateOne) SetDate(s string) *StockSummaryUpdateOne {
	ssuo.mutation.SetDate(s)
	return ssuo
}

// SetBatteryNum sets the "battery_num" field.
func (ssuo *StockSummaryUpdateOne) SetBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBatteryNum()
	ssuo.mutation.SetBatteryNum(i)
	return ssuo
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBatteryNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBatteryNum(*i)
	}
	return ssuo
}

// AddBatteryNum adds i to the "battery_num" field.
func (ssuo *StockSummaryUpdateOne) AddBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBatteryNum(i)
	return ssuo
}

// SetBatteryOutboundNum sets the "battery_outbound_num" field.
func (ssuo *StockSummaryUpdateOne) SetBatteryOutboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBatteryOutboundNum()
	ssuo.mutation.SetBatteryOutboundNum(i)
	return ssuo
}

// SetNillableBatteryOutboundNum sets the "battery_outbound_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBatteryOutboundNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBatteryOutboundNum(*i)
	}
	return ssuo
}

// AddBatteryOutboundNum adds i to the "battery_outbound_num" field.
func (ssuo *StockSummaryUpdateOne) AddBatteryOutboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBatteryOutboundNum(i)
	return ssuo
}

// SetBatteryInboundNum sets the "battery_inbound_num" field.
func (ssuo *StockSummaryUpdateOne) SetBatteryInboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBatteryInboundNum()
	ssuo.mutation.SetBatteryInboundNum(i)
	return ssuo
}

// SetNillableBatteryInboundNum sets the "battery_inbound_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBatteryInboundNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBatteryInboundNum(*i)
	}
	return ssuo
}

// AddBatteryInboundNum adds i to the "battery_inbound_num" field.
func (ssuo *StockSummaryUpdateOne) AddBatteryInboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBatteryInboundNum(i)
	return ssuo
}

// SetBikeNum sets the "bike_num" field.
func (ssuo *StockSummaryUpdateOne) SetBikeNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBikeNum()
	ssuo.mutation.SetBikeNum(i)
	return ssuo
}

// SetNillableBikeNum sets the "bike_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBikeNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBikeNum(*i)
	}
	return ssuo
}

// AddBikeNum adds i to the "bike_num" field.
func (ssuo *StockSummaryUpdateOne) AddBikeNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBikeNum(i)
	return ssuo
}

// SetBikeOutboundNum sets the "bike_outbound_num" field.
func (ssuo *StockSummaryUpdateOne) SetBikeOutboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBikeOutboundNum()
	ssuo.mutation.SetBikeOutboundNum(i)
	return ssuo
}

// SetNillableBikeOutboundNum sets the "bike_outbound_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBikeOutboundNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBikeOutboundNum(*i)
	}
	return ssuo
}

// AddBikeOutboundNum adds i to the "bike_outbound_num" field.
func (ssuo *StockSummaryUpdateOne) AddBikeOutboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBikeOutboundNum(i)
	return ssuo
}

// SetBikeInboundNum sets the "bike_inbound_num" field.
func (ssuo *StockSummaryUpdateOne) SetBikeInboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetBikeInboundNum()
	ssuo.mutation.SetBikeInboundNum(i)
	return ssuo
}

// SetNillableBikeInboundNum sets the "bike_inbound_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableBikeInboundNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetBikeInboundNum(*i)
	}
	return ssuo
}

// AddBikeInboundNum adds i to the "bike_inbound_num" field.
func (ssuo *StockSummaryUpdateOne) AddBikeInboundNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddBikeInboundNum(i)
	return ssuo
}

// SetCabinetBatteryNum sets the "cabinet_battery_num" field.
func (ssuo *StockSummaryUpdateOne) SetCabinetBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetCabinetBatteryNum()
	ssuo.mutation.SetCabinetBatteryNum(i)
	return ssuo
}

// SetNillableCabinetBatteryNum sets the "cabinet_battery_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableCabinetBatteryNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetCabinetBatteryNum(*i)
	}
	return ssuo
}

// AddCabinetBatteryNum adds i to the "cabinet_battery_num" field.
func (ssuo *StockSummaryUpdateOne) AddCabinetBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddCabinetBatteryNum(i)
	return ssuo
}

// SetRiderBatteryNum sets the "rider_battery_num" field.
func (ssuo *StockSummaryUpdateOne) SetRiderBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.ResetRiderBatteryNum()
	ssuo.mutation.SetRiderBatteryNum(i)
	return ssuo
}

// SetNillableRiderBatteryNum sets the "rider_battery_num" field if the given value is not nil.
func (ssuo *StockSummaryUpdateOne) SetNillableRiderBatteryNum(i *int) *StockSummaryUpdateOne {
	if i != nil {
		ssuo.SetRiderBatteryNum(*i)
	}
	return ssuo
}

// AddRiderBatteryNum adds i to the "rider_battery_num" field.
func (ssuo *StockSummaryUpdateOne) AddRiderBatteryNum(i int) *StockSummaryUpdateOne {
	ssuo.mutation.AddRiderBatteryNum(i)
	return ssuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ssuo *StockSummaryUpdateOne) SetEnterprise(e *Enterprise) *StockSummaryUpdateOne {
	return ssuo.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ssuo *StockSummaryUpdateOne) SetStation(e *EnterpriseStation) *StockSummaryUpdateOne {
	return ssuo.SetStationID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ssuo *StockSummaryUpdateOne) SetStore(s *Store) *StockSummaryUpdateOne {
	return ssuo.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssuo *StockSummaryUpdateOne) SetRider(r *Rider) *StockSummaryUpdateOne {
	return ssuo.SetRiderID(r.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ssuo *StockSummaryUpdateOne) SetCabinet(c *Cabinet) *StockSummaryUpdateOne {
	return ssuo.SetCabinetID(c.ID)
}

// Mutation returns the StockSummaryMutation object of the builder.
func (ssuo *StockSummaryUpdateOne) Mutation() *StockSummaryMutation {
	return ssuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ssuo *StockSummaryUpdateOne) ClearEnterprise() *StockSummaryUpdateOne {
	ssuo.mutation.ClearEnterprise()
	return ssuo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ssuo *StockSummaryUpdateOne) ClearStation() *StockSummaryUpdateOne {
	ssuo.mutation.ClearStation()
	return ssuo
}

// ClearStore clears the "store" edge to the Store entity.
func (ssuo *StockSummaryUpdateOne) ClearStore() *StockSummaryUpdateOne {
	ssuo.mutation.ClearStore()
	return ssuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ssuo *StockSummaryUpdateOne) ClearRider() *StockSummaryUpdateOne {
	ssuo.mutation.ClearRider()
	return ssuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ssuo *StockSummaryUpdateOne) ClearCabinet() *StockSummaryUpdateOne {
	ssuo.mutation.ClearCabinet()
	return ssuo
}

// Where appends a list predicates to the StockSummaryUpdate builder.
func (ssuo *StockSummaryUpdateOne) Where(ps ...predicate.StockSummary) *StockSummaryUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *StockSummaryUpdateOne) Select(field string, fields ...string) *StockSummaryUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated StockSummary entity.
func (ssuo *StockSummaryUpdateOne) Save(ctx context.Context) (*StockSummary, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *StockSummaryUpdateOne) SaveX(ctx context.Context) *StockSummary {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *StockSummaryUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *StockSummaryUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *StockSummaryUpdateOne) check() error {
	if v, ok := ssuo.mutation.Date(); ok {
		if err := stocksummary.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "StockSummary.date": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ssuo *StockSummaryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockSummaryUpdateOne {
	ssuo.modifiers = append(ssuo.modifiers, modifiers...)
	return ssuo
}

func (ssuo *StockSummaryUpdateOne) sqlSave(ctx context.Context) (_node *StockSummary, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stocksummary.Table, stocksummary.Columns, sqlgraph.NewFieldSpec(stocksummary.FieldID, field.TypeUint64))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StockSummary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stocksummary.FieldID)
		for _, f := range fields {
			if !stocksummary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stocksummary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Date(); ok {
		_spec.SetField(stocksummary.FieldDate, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.BatteryNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.BatteryOutboundNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBatteryOutboundNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.BatteryInboundNum(); ok {
		_spec.SetField(stocksummary.FieldBatteryInboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBatteryInboundNum(); ok {
		_spec.AddField(stocksummary.FieldBatteryInboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.BikeNum(); ok {
		_spec.SetField(stocksummary.FieldBikeNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBikeNum(); ok {
		_spec.AddField(stocksummary.FieldBikeNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.BikeOutboundNum(); ok {
		_spec.SetField(stocksummary.FieldBikeOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBikeOutboundNum(); ok {
		_spec.AddField(stocksummary.FieldBikeOutboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.BikeInboundNum(); ok {
		_spec.SetField(stocksummary.FieldBikeInboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedBikeInboundNum(); ok {
		_spec.AddField(stocksummary.FieldBikeInboundNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.CabinetBatteryNum(); ok {
		_spec.SetField(stocksummary.FieldCabinetBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedCabinetBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldCabinetBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.RiderBatteryNum(); ok {
		_spec.SetField(stocksummary.FieldRiderBatteryNum, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedRiderBatteryNum(); ok {
		_spec.AddField(stocksummary.FieldRiderBatteryNum, field.TypeInt, value)
	}
	if ssuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.EnterpriseTable,
			Columns: []string{stocksummary.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StationTable,
			Columns: []string{stocksummary.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.StoreTable,
			Columns: []string{stocksummary.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.RiderTable,
			Columns: []string{stocksummary.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stocksummary.CabinetTable,
			Columns: []string{stocksummary.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ssuo.modifiers...)
	_node = &StockSummary{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stocksummary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
