// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
)

// AssetAttributeValuesCreate is the builder for creating a AssetAttributeValues entity.
type AssetAttributeValuesCreate struct {
	config
	mutation *AssetAttributeValuesMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (aavc *AssetAttributeValuesCreate) SetCreatedAt(t time.Time) *AssetAttributeValuesCreate {
	aavc.mutation.SetCreatedAt(t)
	return aavc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aavc *AssetAttributeValuesCreate) SetNillableCreatedAt(t *time.Time) *AssetAttributeValuesCreate {
	if t != nil {
		aavc.SetCreatedAt(*t)
	}
	return aavc
}

// SetUpdatedAt sets the "updated_at" field.
func (aavc *AssetAttributeValuesCreate) SetUpdatedAt(t time.Time) *AssetAttributeValuesCreate {
	aavc.mutation.SetUpdatedAt(t)
	return aavc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aavc *AssetAttributeValuesCreate) SetNillableUpdatedAt(t *time.Time) *AssetAttributeValuesCreate {
	if t != nil {
		aavc.SetUpdatedAt(*t)
	}
	return aavc
}

// SetAttributeID sets the "attribute_id" field.
func (aavc *AssetAttributeValuesCreate) SetAttributeID(u uint64) *AssetAttributeValuesCreate {
	aavc.mutation.SetAttributeID(u)
	return aavc
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (aavc *AssetAttributeValuesCreate) SetNillableAttributeID(u *uint64) *AssetAttributeValuesCreate {
	if u != nil {
		aavc.SetAttributeID(*u)
	}
	return aavc
}

// SetAssetID sets the "asset_id" field.
func (aavc *AssetAttributeValuesCreate) SetAssetID(u uint64) *AssetAttributeValuesCreate {
	aavc.mutation.SetAssetID(u)
	return aavc
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (aavc *AssetAttributeValuesCreate) SetNillableAssetID(u *uint64) *AssetAttributeValuesCreate {
	if u != nil {
		aavc.SetAssetID(*u)
	}
	return aavc
}

// SetValue sets the "value" field.
func (aavc *AssetAttributeValuesCreate) SetValue(s string) *AssetAttributeValuesCreate {
	aavc.mutation.SetValue(s)
	return aavc
}

// SetAttribute sets the "attribute" edge to the AssetAttributes entity.
func (aavc *AssetAttributeValuesCreate) SetAttribute(a *AssetAttributes) *AssetAttributeValuesCreate {
	return aavc.SetAttributeID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (aavc *AssetAttributeValuesCreate) SetAsset(a *Asset) *AssetAttributeValuesCreate {
	return aavc.SetAssetID(a.ID)
}

// Mutation returns the AssetAttributeValuesMutation object of the builder.
func (aavc *AssetAttributeValuesCreate) Mutation() *AssetAttributeValuesMutation {
	return aavc.mutation
}

// Save creates the AssetAttributeValues in the database.
func (aavc *AssetAttributeValuesCreate) Save(ctx context.Context) (*AssetAttributeValues, error) {
	aavc.defaults()
	return withHooks(ctx, aavc.sqlSave, aavc.mutation, aavc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aavc *AssetAttributeValuesCreate) SaveX(ctx context.Context) *AssetAttributeValues {
	v, err := aavc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aavc *AssetAttributeValuesCreate) Exec(ctx context.Context) error {
	_, err := aavc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aavc *AssetAttributeValuesCreate) ExecX(ctx context.Context) {
	if err := aavc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aavc *AssetAttributeValuesCreate) defaults() {
	if _, ok := aavc.mutation.CreatedAt(); !ok {
		v := assetattributevalues.DefaultCreatedAt()
		aavc.mutation.SetCreatedAt(v)
	}
	if _, ok := aavc.mutation.UpdatedAt(); !ok {
		v := assetattributevalues.DefaultUpdatedAt()
		aavc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aavc *AssetAttributeValuesCreate) check() error {
	if _, ok := aavc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetAttributeValues.created_at"`)}
	}
	if _, ok := aavc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetAttributeValues.updated_at"`)}
	}
	if _, ok := aavc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AssetAttributeValues.value"`)}
	}
	if v, ok := aavc.mutation.Value(); ok {
		if err := assetattributevalues.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AssetAttributeValues.value": %w`, err)}
		}
	}
	return nil
}

func (aavc *AssetAttributeValuesCreate) sqlSave(ctx context.Context) (*AssetAttributeValues, error) {
	if err := aavc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aavc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aavc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	aavc.mutation.id = &_node.ID
	aavc.mutation.done = true
	return _node, nil
}

func (aavc *AssetAttributeValuesCreate) createSpec() (*AssetAttributeValues, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetAttributeValues{config: aavc.config}
		_spec = sqlgraph.NewCreateSpec(assetattributevalues.Table, sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = aavc.conflict
	if value, ok := aavc.mutation.CreatedAt(); ok {
		_spec.SetField(assetattributevalues.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aavc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributevalues.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aavc.mutation.Value(); ok {
		_spec.SetField(assetattributevalues.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := aavc.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AttributeTable,
			Columns: []string{assetattributevalues.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AttributeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aavc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AssetTable,
			Columns: []string{assetattributevalues.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetAttributeValues.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetAttributeValuesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aavc *AssetAttributeValuesCreate) OnConflict(opts ...sql.ConflictOption) *AssetAttributeValuesUpsertOne {
	aavc.conflict = opts
	return &AssetAttributeValuesUpsertOne{
		create: aavc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aavc *AssetAttributeValuesCreate) OnConflictColumns(columns ...string) *AssetAttributeValuesUpsertOne {
	aavc.conflict = append(aavc.conflict, sql.ConflictColumns(columns...))
	return &AssetAttributeValuesUpsertOne{
		create: aavc,
	}
}

type (
	// AssetAttributeValuesUpsertOne is the builder for "upsert"-ing
	//  one AssetAttributeValues node.
	AssetAttributeValuesUpsertOne struct {
		create *AssetAttributeValuesCreate
	}

	// AssetAttributeValuesUpsert is the "OnConflict" setter.
	AssetAttributeValuesUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributeValuesUpsert) SetUpdatedAt(v time.Time) *AssetAttributeValuesUpsert {
	u.Set(assetattributevalues.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsert) UpdateUpdatedAt() *AssetAttributeValuesUpsert {
	u.SetExcluded(assetattributevalues.FieldUpdatedAt)
	return u
}

// SetAttributeID sets the "attribute_id" field.
func (u *AssetAttributeValuesUpsert) SetAttributeID(v uint64) *AssetAttributeValuesUpsert {
	u.Set(assetattributevalues.FieldAttributeID, v)
	return u
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsert) UpdateAttributeID() *AssetAttributeValuesUpsert {
	u.SetExcluded(assetattributevalues.FieldAttributeID)
	return u
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AssetAttributeValuesUpsert) ClearAttributeID() *AssetAttributeValuesUpsert {
	u.SetNull(assetattributevalues.FieldAttributeID)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetAttributeValuesUpsert) SetAssetID(v uint64) *AssetAttributeValuesUpsert {
	u.Set(assetattributevalues.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsert) UpdateAssetID() *AssetAttributeValuesUpsert {
	u.SetExcluded(assetattributevalues.FieldAssetID)
	return u
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetAttributeValuesUpsert) ClearAssetID() *AssetAttributeValuesUpsert {
	u.SetNull(assetattributevalues.FieldAssetID)
	return u
}

// SetValue sets the "value" field.
func (u *AssetAttributeValuesUpsert) SetValue(v string) *AssetAttributeValuesUpsert {
	u.Set(assetattributevalues.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsert) UpdateValue() *AssetAttributeValuesUpsert {
	u.SetExcluded(assetattributevalues.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetAttributeValuesUpsertOne) UpdateNewValues() *AssetAttributeValuesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetattributevalues.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetAttributeValuesUpsertOne) Ignore() *AssetAttributeValuesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetAttributeValuesUpsertOne) DoNothing() *AssetAttributeValuesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetAttributeValuesCreate.OnConflict
// documentation for more info.
func (u *AssetAttributeValuesUpsertOne) Update(set func(*AssetAttributeValuesUpsert)) *AssetAttributeValuesUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetAttributeValuesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributeValuesUpsertOne) SetUpdatedAt(v time.Time) *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertOne) UpdateUpdatedAt() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAttributeID sets the "attribute_id" field.
func (u *AssetAttributeValuesUpsertOne) SetAttributeID(v uint64) *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetAttributeID(v)
	})
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertOne) UpdateAttributeID() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateAttributeID()
	})
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AssetAttributeValuesUpsertOne) ClearAttributeID() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.ClearAttributeID()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetAttributeValuesUpsertOne) SetAssetID(v uint64) *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertOne) UpdateAssetID() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetAttributeValuesUpsertOne) ClearAssetID() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.ClearAssetID()
	})
}

// SetValue sets the "value" field.
func (u *AssetAttributeValuesUpsertOne) SetValue(v string) *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertOne) UpdateValue() *AssetAttributeValuesUpsertOne {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *AssetAttributeValuesUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetAttributeValuesCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetAttributeValuesUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetAttributeValuesUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetAttributeValuesUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetAttributeValuesCreateBulk is the builder for creating many AssetAttributeValues entities in bulk.
type AssetAttributeValuesCreateBulk struct {
	config
	err      error
	builders []*AssetAttributeValuesCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetAttributeValues entities in the database.
func (aavcb *AssetAttributeValuesCreateBulk) Save(ctx context.Context) ([]*AssetAttributeValues, error) {
	if aavcb.err != nil {
		return nil, aavcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aavcb.builders))
	nodes := make([]*AssetAttributeValues, len(aavcb.builders))
	mutators := make([]Mutator, len(aavcb.builders))
	for i := range aavcb.builders {
		func(i int, root context.Context) {
			builder := aavcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetAttributeValuesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aavcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aavcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aavcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aavcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aavcb *AssetAttributeValuesCreateBulk) SaveX(ctx context.Context) []*AssetAttributeValues {
	v, err := aavcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aavcb *AssetAttributeValuesCreateBulk) Exec(ctx context.Context) error {
	_, err := aavcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aavcb *AssetAttributeValuesCreateBulk) ExecX(ctx context.Context) {
	if err := aavcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetAttributeValues.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetAttributeValuesUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aavcb *AssetAttributeValuesCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetAttributeValuesUpsertBulk {
	aavcb.conflict = opts
	return &AssetAttributeValuesUpsertBulk{
		create: aavcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aavcb *AssetAttributeValuesCreateBulk) OnConflictColumns(columns ...string) *AssetAttributeValuesUpsertBulk {
	aavcb.conflict = append(aavcb.conflict, sql.ConflictColumns(columns...))
	return &AssetAttributeValuesUpsertBulk{
		create: aavcb,
	}
}

// AssetAttributeValuesUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetAttributeValues nodes.
type AssetAttributeValuesUpsertBulk struct {
	create *AssetAttributeValuesCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetAttributeValuesUpsertBulk) UpdateNewValues() *AssetAttributeValuesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetattributevalues.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetAttributeValues.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetAttributeValuesUpsertBulk) Ignore() *AssetAttributeValuesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetAttributeValuesUpsertBulk) DoNothing() *AssetAttributeValuesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetAttributeValuesCreateBulk.OnConflict
// documentation for more info.
func (u *AssetAttributeValuesUpsertBulk) Update(set func(*AssetAttributeValuesUpsert)) *AssetAttributeValuesUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetAttributeValuesUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetAttributeValuesUpsertBulk) SetUpdatedAt(v time.Time) *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertBulk) UpdateUpdatedAt() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAttributeID sets the "attribute_id" field.
func (u *AssetAttributeValuesUpsertBulk) SetAttributeID(v uint64) *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetAttributeID(v)
	})
}

// UpdateAttributeID sets the "attribute_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertBulk) UpdateAttributeID() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateAttributeID()
	})
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (u *AssetAttributeValuesUpsertBulk) ClearAttributeID() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.ClearAttributeID()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetAttributeValuesUpsertBulk) SetAssetID(v uint64) *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertBulk) UpdateAssetID() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetAttributeValuesUpsertBulk) ClearAssetID() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.ClearAssetID()
	})
}

// SetValue sets the "value" field.
func (u *AssetAttributeValuesUpsertBulk) SetValue(v string) *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AssetAttributeValuesUpsertBulk) UpdateValue() *AssetAttributeValuesUpsertBulk {
	return u.Update(func(s *AssetAttributeValuesUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *AssetAttributeValuesUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetAttributeValuesCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetAttributeValuesCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetAttributeValuesUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
