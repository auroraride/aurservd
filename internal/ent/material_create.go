// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/material"
)

// MaterialCreate is the builder for creating a Material entity.
type MaterialCreate struct {
	config
	mutation *MaterialMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MaterialCreate) SetCreatedAt(t time.Time) *MaterialCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableCreatedAt(t *time.Time) *MaterialCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MaterialCreate) SetUpdatedAt(t time.Time) *MaterialCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableUpdatedAt(t *time.Time) *MaterialCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MaterialCreate) SetDeletedAt(t time.Time) *MaterialCreate {
	mc.mutation.SetDeletedAt(t)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableDeletedAt(t *time.Time) *MaterialCreate {
	if t != nil {
		mc.SetDeletedAt(*t)
	}
	return mc
}

// SetCreator sets the "creator" field.
func (mc *MaterialCreate) SetCreator(m *model.Modifier) *MaterialCreate {
	mc.mutation.SetCreator(m)
	return mc
}

// SetLastModifier sets the "last_modifier" field.
func (mc *MaterialCreate) SetLastModifier(m *model.Modifier) *MaterialCreate {
	mc.mutation.SetLastModifier(m)
	return mc
}

// SetRemark sets the "remark" field.
func (mc *MaterialCreate) SetRemark(s string) *MaterialCreate {
	mc.mutation.SetRemark(s)
	return mc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableRemark(s *string) *MaterialCreate {
	if s != nil {
		mc.SetRemark(*s)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MaterialCreate) SetName(s string) *MaterialCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetType sets the "type" field.
func (mc *MaterialCreate) SetType(u uint8) *MaterialCreate {
	mc.mutation.SetType(u)
	return mc
}

// SetStatement sets the "statement" field.
func (mc *MaterialCreate) SetStatement(s string) *MaterialCreate {
	mc.mutation.SetStatement(s)
	return mc
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (mc *MaterialCreate) SetNillableStatement(s *string) *MaterialCreate {
	if s != nil {
		mc.SetStatement(*s)
	}
	return mc
}

// SetAllot sets the "allot" field.
func (mc *MaterialCreate) SetAllot(b bool) *MaterialCreate {
	mc.mutation.SetAllot(b)
	return mc
}

// Mutation returns the MaterialMutation object of the builder.
func (mc *MaterialCreate) Mutation() *MaterialMutation {
	return mc.mutation
}

// Save creates the Material in the database.
func (mc *MaterialCreate) Save(ctx context.Context) (*Material, error) {
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MaterialCreate) SaveX(ctx context.Context) *Material {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MaterialCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MaterialCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MaterialCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if material.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized material.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := material.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if material.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized material.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := material.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MaterialCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Material.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Material.updated_at"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Material.name"`)}
	}
	if _, ok := mc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Material.type"`)}
	}
	if _, ok := mc.mutation.Allot(); !ok {
		return &ValidationError{Name: "allot", err: errors.New(`ent: missing required field "Material.allot"`)}
	}
	return nil
}

func (mc *MaterialCreate) sqlSave(ctx context.Context) (*Material, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MaterialCreate) createSpec() (*Material, *sqlgraph.CreateSpec) {
	var (
		_node = &Material{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(material.Table, sqlgraph.NewFieldSpec(material.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(material.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(material.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.SetField(material.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := mc.mutation.Creator(); ok {
		_spec.SetField(material.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := mc.mutation.LastModifier(); ok {
		_spec.SetField(material.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := mc.mutation.Remark(); ok {
		_spec.SetField(material.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(material.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.GetType(); ok {
		_spec.SetField(material.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := mc.mutation.Statement(); ok {
		_spec.SetField(material.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if value, ok := mc.mutation.Allot(); ok {
		_spec.SetField(material.FieldAllot, field.TypeBool, value)
		_node.Allot = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Material.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaterialUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MaterialCreate) OnConflict(opts ...sql.ConflictOption) *MaterialUpsertOne {
	mc.conflict = opts
	return &MaterialUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Material.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MaterialCreate) OnConflictColumns(columns ...string) *MaterialUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MaterialUpsertOne{
		create: mc,
	}
}

type (
	// MaterialUpsertOne is the builder for "upsert"-ing
	//  one Material node.
	MaterialUpsertOne struct {
		create *MaterialCreate
	}

	// MaterialUpsert is the "OnConflict" setter.
	MaterialUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *MaterialUpsert) SetUpdatedAt(v time.Time) *MaterialUpsert {
	u.Set(material.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateUpdatedAt() *MaterialUpsert {
	u.SetExcluded(material.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MaterialUpsert) SetDeletedAt(v time.Time) *MaterialUpsert {
	u.Set(material.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateDeletedAt() *MaterialUpsert {
	u.SetExcluded(material.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MaterialUpsert) ClearDeletedAt() *MaterialUpsert {
	u.SetNull(material.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *MaterialUpsert) SetLastModifier(v *model.Modifier) *MaterialUpsert {
	u.Set(material.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateLastModifier() *MaterialUpsert {
	u.SetExcluded(material.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *MaterialUpsert) ClearLastModifier() *MaterialUpsert {
	u.SetNull(material.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *MaterialUpsert) SetRemark(v string) *MaterialUpsert {
	u.Set(material.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateRemark() *MaterialUpsert {
	u.SetExcluded(material.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *MaterialUpsert) ClearRemark() *MaterialUpsert {
	u.SetNull(material.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *MaterialUpsert) SetName(v string) *MaterialUpsert {
	u.Set(material.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateName() *MaterialUpsert {
	u.SetExcluded(material.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *MaterialUpsert) SetType(v uint8) *MaterialUpsert {
	u.Set(material.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateType() *MaterialUpsert {
	u.SetExcluded(material.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *MaterialUpsert) AddType(v uint8) *MaterialUpsert {
	u.Add(material.FieldType, v)
	return u
}

// SetStatement sets the "statement" field.
func (u *MaterialUpsert) SetStatement(v string) *MaterialUpsert {
	u.Set(material.FieldStatement, v)
	return u
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateStatement() *MaterialUpsert {
	u.SetExcluded(material.FieldStatement)
	return u
}

// ClearStatement clears the value of the "statement" field.
func (u *MaterialUpsert) ClearStatement() *MaterialUpsert {
	u.SetNull(material.FieldStatement)
	return u
}

// SetAllot sets the "allot" field.
func (u *MaterialUpsert) SetAllot(v bool) *MaterialUpsert {
	u.Set(material.FieldAllot, v)
	return u
}

// UpdateAllot sets the "allot" field to the value that was provided on create.
func (u *MaterialUpsert) UpdateAllot() *MaterialUpsert {
	u.SetExcluded(material.FieldAllot)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Material.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MaterialUpsertOne) UpdateNewValues() *MaterialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(material.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(material.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Material.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MaterialUpsertOne) Ignore() *MaterialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaterialUpsertOne) DoNothing() *MaterialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaterialCreate.OnConflict
// documentation for more info.
func (u *MaterialUpsertOne) Update(set func(*MaterialUpsert)) *MaterialUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaterialUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MaterialUpsertOne) SetUpdatedAt(v time.Time) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateUpdatedAt() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MaterialUpsertOne) SetDeletedAt(v time.Time) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateDeletedAt() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MaterialUpsertOne) ClearDeletedAt() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *MaterialUpsertOne) SetLastModifier(v *model.Modifier) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateLastModifier() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *MaterialUpsertOne) ClearLastModifier() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *MaterialUpsertOne) SetRemark(v string) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateRemark() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *MaterialUpsertOne) ClearRemark() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *MaterialUpsertOne) SetName(v string) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateName() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MaterialUpsertOne) SetType(v uint8) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MaterialUpsertOne) AddType(v uint8) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateType() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateType()
	})
}

// SetStatement sets the "statement" field.
func (u *MaterialUpsertOne) SetStatement(v string) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateStatement() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateStatement()
	})
}

// ClearStatement clears the value of the "statement" field.
func (u *MaterialUpsertOne) ClearStatement() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearStatement()
	})
}

// SetAllot sets the "allot" field.
func (u *MaterialUpsertOne) SetAllot(v bool) *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.SetAllot(v)
	})
}

// UpdateAllot sets the "allot" field to the value that was provided on create.
func (u *MaterialUpsertOne) UpdateAllot() *MaterialUpsertOne {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateAllot()
	})
}

// Exec executes the query.
func (u *MaterialUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaterialCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaterialUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MaterialUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MaterialUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MaterialCreateBulk is the builder for creating many Material entities in bulk.
type MaterialCreateBulk struct {
	config
	err      error
	builders []*MaterialCreate
	conflict []sql.ConflictOption
}

// Save creates the Material entities in the database.
func (mcb *MaterialCreateBulk) Save(ctx context.Context) ([]*Material, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Material, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaterialMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MaterialCreateBulk) SaveX(ctx context.Context) []*Material {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MaterialCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MaterialCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Material.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaterialUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MaterialCreateBulk) OnConflict(opts ...sql.ConflictOption) *MaterialUpsertBulk {
	mcb.conflict = opts
	return &MaterialUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Material.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MaterialCreateBulk) OnConflictColumns(columns ...string) *MaterialUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MaterialUpsertBulk{
		create: mcb,
	}
}

// MaterialUpsertBulk is the builder for "upsert"-ing
// a bulk of Material nodes.
type MaterialUpsertBulk struct {
	create *MaterialCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Material.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MaterialUpsertBulk) UpdateNewValues() *MaterialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(material.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(material.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Material.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MaterialUpsertBulk) Ignore() *MaterialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaterialUpsertBulk) DoNothing() *MaterialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaterialCreateBulk.OnConflict
// documentation for more info.
func (u *MaterialUpsertBulk) Update(set func(*MaterialUpsert)) *MaterialUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaterialUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MaterialUpsertBulk) SetUpdatedAt(v time.Time) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateUpdatedAt() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MaterialUpsertBulk) SetDeletedAt(v time.Time) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateDeletedAt() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *MaterialUpsertBulk) ClearDeletedAt() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *MaterialUpsertBulk) SetLastModifier(v *model.Modifier) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateLastModifier() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *MaterialUpsertBulk) ClearLastModifier() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *MaterialUpsertBulk) SetRemark(v string) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateRemark() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *MaterialUpsertBulk) ClearRemark() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *MaterialUpsertBulk) SetName(v string) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateName() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *MaterialUpsertBulk) SetType(v uint8) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *MaterialUpsertBulk) AddType(v uint8) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateType() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateType()
	})
}

// SetStatement sets the "statement" field.
func (u *MaterialUpsertBulk) SetStatement(v string) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetStatement(v)
	})
}

// UpdateStatement sets the "statement" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateStatement() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateStatement()
	})
}

// ClearStatement clears the value of the "statement" field.
func (u *MaterialUpsertBulk) ClearStatement() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.ClearStatement()
	})
}

// SetAllot sets the "allot" field.
func (u *MaterialUpsertBulk) SetAllot(v bool) *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.SetAllot(v)
	})
}

// UpdateAllot sets the "allot" field to the value that was provided on create.
func (u *MaterialUpsertBulk) UpdateAllot() *MaterialUpsertBulk {
	return u.Update(func(s *MaterialUpsert) {
		s.UpdateAllot()
	})
}

// Exec executes the query.
func (u *MaterialUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MaterialCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaterialCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaterialUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
