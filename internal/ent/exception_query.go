// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// ExceptionQuery is the builder for querying Exception entities.
type ExceptionQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.Exception
	withCity     *CityQuery
	withEmployee *EmployeeQuery
	withStore    *StoreQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ExceptionQuery builder.
func (eq *ExceptionQuery) Where(ps ...predicate.Exception) *ExceptionQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *ExceptionQuery) Limit(limit int) *ExceptionQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *ExceptionQuery) Offset(offset int) *ExceptionQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *ExceptionQuery) Unique(unique bool) *ExceptionQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *ExceptionQuery) Order(o ...OrderFunc) *ExceptionQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryCity chains the current query on the "city" edge.
func (eq *ExceptionQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.CityTable, exception.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (eq *ExceptionQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, exception.EmployeeTable, exception.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (eq *ExceptionQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(exception.Table, exception.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, exception.StoreTable, exception.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Exception entity from the query.
// Returns a *NotFoundError when no Exception was found.
func (eq *ExceptionQuery) First(ctx context.Context) (*Exception, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{exception.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *ExceptionQuery) FirstX(ctx context.Context) *Exception {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Exception ID from the query.
// Returns a *NotFoundError when no Exception ID was found.
func (eq *ExceptionQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{exception.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *ExceptionQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Exception entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Exception entity is found.
// Returns a *NotFoundError when no Exception entities are found.
func (eq *ExceptionQuery) Only(ctx context.Context) (*Exception, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{exception.Label}
	default:
		return nil, &NotSingularError{exception.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *ExceptionQuery) OnlyX(ctx context.Context) *Exception {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Exception ID in the query.
// Returns a *NotSingularError when more than one Exception ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *ExceptionQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{exception.Label}
	default:
		err = &NotSingularError{exception.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *ExceptionQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Exceptions.
func (eq *ExceptionQuery) All(ctx context.Context) ([]*Exception, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Exception, *ExceptionQuery]()
	return withInterceptors[[]*Exception](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *ExceptionQuery) AllX(ctx context.Context) []*Exception {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Exception IDs.
func (eq *ExceptionQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(exception.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *ExceptionQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *ExceptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*ExceptionQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *ExceptionQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *ExceptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *ExceptionQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ExceptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *ExceptionQuery) Clone() *ExceptionQuery {
	if eq == nil {
		return nil
	}
	return &ExceptionQuery{
		config:       eq.config,
		ctx:          eq.ctx.Clone(),
		order:        append([]OrderFunc{}, eq.order...),
		inters:       append([]Interceptor{}, eq.inters...),
		predicates:   append([]predicate.Exception{}, eq.predicates...),
		withCity:     eq.withCity.Clone(),
		withEmployee: eq.withEmployee.Clone(),
		withStore:    eq.withStore.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExceptionQuery) WithCity(opts ...func(*CityQuery)) *ExceptionQuery {
	query := (&CityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCity = query
	return eq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExceptionQuery) WithEmployee(opts ...func(*EmployeeQuery)) *ExceptionQuery {
	query := (&EmployeeClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEmployee = query
	return eq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *ExceptionQuery) WithStore(opts ...func(*StoreQuery)) *ExceptionQuery {
	query := (&StoreClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStore = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Exception.Query().
//		GroupBy(exception.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *ExceptionQuery) GroupBy(field string, fields ...string) *ExceptionGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ExceptionGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = exception.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Exception.Query().
//		Select(exception.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *ExceptionQuery) Select(fields ...string) *ExceptionSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &ExceptionSelect{ExceptionQuery: eq}
	sbuild.label = exception.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ExceptionSelect configured with the given aggregations.
func (eq *ExceptionQuery) Aggregate(fns ...AggregateFunc) *ExceptionSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *ExceptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !exception.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *ExceptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Exception, error) {
	var (
		nodes       = []*Exception{}
		_spec       = eq.querySpec()
		loadedTypes = [3]bool{
			eq.withCity != nil,
			eq.withEmployee != nil,
			eq.withStore != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Exception).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Exception{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withCity; query != nil {
		if err := eq.loadCity(ctx, query, nodes, nil,
			func(n *Exception, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEmployee; query != nil {
		if err := eq.loadEmployee(ctx, query, nodes, nil,
			func(n *Exception, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStore; query != nil {
		if err := eq.loadStore(ctx, query, nodes, nil,
			func(n *Exception, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *ExceptionQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Exception, init func(*Exception), assign func(*Exception, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Exception)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *ExceptionQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Exception, init func(*Exception), assign func(*Exception, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Exception)
	for i := range nodes {
		fk := nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *ExceptionQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Exception, init func(*Exception), assign func(*Exception, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Exception)
	for i := range nodes {
		fk := nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (eq *ExceptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *ExceptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(exception.Table, exception.Columns, sqlgraph.NewFieldSpec(exception.FieldID, field.TypeUint64))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exception.FieldID)
		for i := range fields {
			if fields[i] != exception.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *ExceptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(exception.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = exception.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *ExceptionQuery) Modify(modifiers ...func(s *sql.Selector)) *ExceptionSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

type ExceptionQueryWith string

var (
	ExceptionQueryWithCity     ExceptionQueryWith = "City"
	ExceptionQueryWithEmployee ExceptionQueryWith = "Employee"
	ExceptionQueryWithStore    ExceptionQueryWith = "Store"
)

func (eq *ExceptionQuery) With(withEdges ...ExceptionQueryWith) *ExceptionQuery {
	for _, v := range withEdges {
		switch v {
		case ExceptionQueryWithCity:
			eq.WithCity()
		case ExceptionQueryWithEmployee:
			eq.WithEmployee()
		case ExceptionQueryWithStore:
			eq.WithStore()
		}
	}
	return eq
}

// ExceptionGroupBy is the group-by builder for Exception entities.
type ExceptionGroupBy struct {
	selector
	build *ExceptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *ExceptionGroupBy) Aggregate(fns ...AggregateFunc) *ExceptionGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *ExceptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExceptionQuery, *ExceptionGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *ExceptionGroupBy) sqlScan(ctx context.Context, root *ExceptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ExceptionSelect is the builder for selecting fields of Exception entities.
type ExceptionSelect struct {
	*ExceptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *ExceptionSelect) Aggregate(fns ...AggregateFunc) *ExceptionSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *ExceptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ExceptionQuery, *ExceptionSelect](ctx, es.ExceptionQuery, es, es.inters, v)
}

func (es *ExceptionSelect) sqlScan(ctx context.Context, root *ExceptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *ExceptionSelect) Modify(modifiers ...func(s *sql.Selector)) *ExceptionSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
