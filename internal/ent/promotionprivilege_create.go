// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
)

// PromotionPrivilegeCreate is the builder for creating a PromotionPrivilege entity.
type PromotionPrivilegeCreate struct {
	config
	mutation *PromotionPrivilegeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ppc *PromotionPrivilegeCreate) SetCreatedAt(t time.Time) *PromotionPrivilegeCreate {
	ppc.mutation.SetCreatedAt(t)
	return ppc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableCreatedAt(t *time.Time) *PromotionPrivilegeCreate {
	if t != nil {
		ppc.SetCreatedAt(*t)
	}
	return ppc
}

// SetUpdatedAt sets the "updated_at" field.
func (ppc *PromotionPrivilegeCreate) SetUpdatedAt(t time.Time) *PromotionPrivilegeCreate {
	ppc.mutation.SetUpdatedAt(t)
	return ppc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableUpdatedAt(t *time.Time) *PromotionPrivilegeCreate {
	if t != nil {
		ppc.SetUpdatedAt(*t)
	}
	return ppc
}

// SetDeletedAt sets the "deleted_at" field.
func (ppc *PromotionPrivilegeCreate) SetDeletedAt(t time.Time) *PromotionPrivilegeCreate {
	ppc.mutation.SetDeletedAt(t)
	return ppc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableDeletedAt(t *time.Time) *PromotionPrivilegeCreate {
	if t != nil {
		ppc.SetDeletedAt(*t)
	}
	return ppc
}

// SetCreator sets the "creator" field.
func (ppc *PromotionPrivilegeCreate) SetCreator(m *model.Modifier) *PromotionPrivilegeCreate {
	ppc.mutation.SetCreator(m)
	return ppc
}

// SetLastModifier sets the "last_modifier" field.
func (ppc *PromotionPrivilegeCreate) SetLastModifier(m *model.Modifier) *PromotionPrivilegeCreate {
	ppc.mutation.SetLastModifier(m)
	return ppc
}

// SetRemark sets the "remark" field.
func (ppc *PromotionPrivilegeCreate) SetRemark(s string) *PromotionPrivilegeCreate {
	ppc.mutation.SetRemark(s)
	return ppc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableRemark(s *string) *PromotionPrivilegeCreate {
	if s != nil {
		ppc.SetRemark(*s)
	}
	return ppc
}

// SetType sets the "type" field.
func (ppc *PromotionPrivilegeCreate) SetType(u uint8) *PromotionPrivilegeCreate {
	ppc.mutation.SetType(u)
	return ppc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableType(u *uint8) *PromotionPrivilegeCreate {
	if u != nil {
		ppc.SetType(*u)
	}
	return ppc
}

// SetName sets the "name" field.
func (ppc *PromotionPrivilegeCreate) SetName(s string) *PromotionPrivilegeCreate {
	ppc.mutation.SetName(s)
	return ppc
}

// SetDescription sets the "description" field.
func (ppc *PromotionPrivilegeCreate) SetDescription(s string) *PromotionPrivilegeCreate {
	ppc.mutation.SetDescription(s)
	return ppc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableDescription(s *string) *PromotionPrivilegeCreate {
	if s != nil {
		ppc.SetDescription(*s)
	}
	return ppc
}

// SetValue sets the "value" field.
func (ppc *PromotionPrivilegeCreate) SetValue(u uint64) *PromotionPrivilegeCreate {
	ppc.mutation.SetValue(u)
	return ppc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ppc *PromotionPrivilegeCreate) SetNillableValue(u *uint64) *PromotionPrivilegeCreate {
	if u != nil {
		ppc.SetValue(*u)
	}
	return ppc
}

// Mutation returns the PromotionPrivilegeMutation object of the builder.
func (ppc *PromotionPrivilegeCreate) Mutation() *PromotionPrivilegeMutation {
	return ppc.mutation
}

// Save creates the PromotionPrivilege in the database.
func (ppc *PromotionPrivilegeCreate) Save(ctx context.Context) (*PromotionPrivilege, error) {
	if err := ppc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PromotionPrivilegeCreate) SaveX(ctx context.Context) *PromotionPrivilege {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PromotionPrivilegeCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PromotionPrivilegeCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PromotionPrivilegeCreate) defaults() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		if promotionprivilege.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionprivilege.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionprivilege.DefaultCreatedAt()
		ppc.mutation.SetCreatedAt(v)
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		if promotionprivilege.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionprivilege.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionprivilege.DefaultUpdatedAt()
		ppc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ppc.mutation.GetType(); !ok {
		v := promotionprivilege.DefaultType
		ppc.mutation.SetType(v)
	}
	if _, ok := ppc.mutation.Value(); !ok {
		v := promotionprivilege.DefaultValue
		ppc.mutation.SetValue(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PromotionPrivilegeCreate) check() error {
	if _, ok := ppc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionPrivilege.created_at"`)}
	}
	if _, ok := ppc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionPrivilege.updated_at"`)}
	}
	if _, ok := ppc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PromotionPrivilege.type"`)}
	}
	if _, ok := ppc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PromotionPrivilege.name"`)}
	}
	return nil
}

func (ppc *PromotionPrivilegeCreate) sqlSave(ctx context.Context) (*PromotionPrivilege, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PromotionPrivilegeCreate) createSpec() (*PromotionPrivilege, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionPrivilege{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(promotionprivilege.Table, sqlgraph.NewFieldSpec(promotionprivilege.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ppc.conflict
	if value, ok := ppc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionprivilege.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ppc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionprivilege.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ppc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionprivilege.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ppc.mutation.Creator(); ok {
		_spec.SetField(promotionprivilege.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ppc.mutation.LastModifier(); ok {
		_spec.SetField(promotionprivilege.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ppc.mutation.Remark(); ok {
		_spec.SetField(promotionprivilege.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ppc.mutation.GetType(); ok {
		_spec.SetField(promotionprivilege.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := ppc.mutation.Name(); ok {
		_spec.SetField(promotionprivilege.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ppc.mutation.Description(); ok {
		_spec.SetField(promotionprivilege.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := ppc.mutation.Value(); ok {
		_spec.SetField(promotionprivilege.FieldValue, field.TypeUint64, value)
		_node.Value = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionPrivilege.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionPrivilegeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppc *PromotionPrivilegeCreate) OnConflict(opts ...sql.ConflictOption) *PromotionPrivilegeUpsertOne {
	ppc.conflict = opts
	return &PromotionPrivilegeUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *PromotionPrivilegeCreate) OnConflictColumns(columns ...string) *PromotionPrivilegeUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &PromotionPrivilegeUpsertOne{
		create: ppc,
	}
}

type (
	// PromotionPrivilegeUpsertOne is the builder for "upsert"-ing
	//  one PromotionPrivilege node.
	PromotionPrivilegeUpsertOne struct {
		create *PromotionPrivilegeCreate
	}

	// PromotionPrivilegeUpsert is the "OnConflict" setter.
	PromotionPrivilegeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionPrivilegeUpsert) SetUpdatedAt(v time.Time) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateUpdatedAt() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionPrivilegeUpsert) SetDeletedAt(v time.Time) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateDeletedAt() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionPrivilegeUpsert) ClearDeletedAt() *PromotionPrivilegeUpsert {
	u.SetNull(promotionprivilege.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionPrivilegeUpsert) SetLastModifier(v *model.Modifier) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateLastModifier() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionPrivilegeUpsert) ClearLastModifier() *PromotionPrivilegeUpsert {
	u.SetNull(promotionprivilege.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionPrivilegeUpsert) SetRemark(v string) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateRemark() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionPrivilegeUpsert) ClearRemark() *PromotionPrivilegeUpsert {
	u.SetNull(promotionprivilege.FieldRemark)
	return u
}

// SetType sets the "type" field.
func (u *PromotionPrivilegeUpsert) SetType(v uint8) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateType() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PromotionPrivilegeUpsert) AddType(v uint8) *PromotionPrivilegeUpsert {
	u.Add(promotionprivilege.FieldType, v)
	return u
}

// SetName sets the "name" field.
func (u *PromotionPrivilegeUpsert) SetName(v string) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateName() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PromotionPrivilegeUpsert) SetDescription(v string) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateDescription() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PromotionPrivilegeUpsert) ClearDescription() *PromotionPrivilegeUpsert {
	u.SetNull(promotionprivilege.FieldDescription)
	return u
}

// SetValue sets the "value" field.
func (u *PromotionPrivilegeUpsert) SetValue(v uint64) *PromotionPrivilegeUpsert {
	u.Set(promotionprivilege.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsert) UpdateValue() *PromotionPrivilegeUpsert {
	u.SetExcluded(promotionprivilege.FieldValue)
	return u
}

// AddValue adds v to the "value" field.
func (u *PromotionPrivilegeUpsert) AddValue(v uint64) *PromotionPrivilegeUpsert {
	u.Add(promotionprivilege.FieldValue, v)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *PromotionPrivilegeUpsert) ClearValue() *PromotionPrivilegeUpsert {
	u.SetNull(promotionprivilege.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionPrivilegeUpsertOne) UpdateNewValues() *PromotionPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionprivilege.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionprivilege.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionPrivilegeUpsertOne) Ignore() *PromotionPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionPrivilegeUpsertOne) DoNothing() *PromotionPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionPrivilegeCreate.OnConflict
// documentation for more info.
func (u *PromotionPrivilegeUpsertOne) Update(set func(*PromotionPrivilegeUpsert)) *PromotionPrivilegeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionPrivilegeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionPrivilegeUpsertOne) SetUpdatedAt(v time.Time) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateUpdatedAt() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionPrivilegeUpsertOne) SetDeletedAt(v time.Time) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateDeletedAt() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionPrivilegeUpsertOne) ClearDeletedAt() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionPrivilegeUpsertOne) SetLastModifier(v *model.Modifier) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateLastModifier() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionPrivilegeUpsertOne) ClearLastModifier() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionPrivilegeUpsertOne) SetRemark(v string) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateRemark() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionPrivilegeUpsertOne) ClearRemark() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *PromotionPrivilegeUpsertOne) SetType(v uint8) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionPrivilegeUpsertOne) AddType(v uint8) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateType() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PromotionPrivilegeUpsertOne) SetName(v string) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateName() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PromotionPrivilegeUpsertOne) SetDescription(v string) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateDescription() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PromotionPrivilegeUpsertOne) ClearDescription() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearDescription()
	})
}

// SetValue sets the "value" field.
func (u *PromotionPrivilegeUpsertOne) SetValue(v uint64) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *PromotionPrivilegeUpsertOne) AddValue(v uint64) *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertOne) UpdateValue() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *PromotionPrivilegeUpsertOne) ClearValue() *PromotionPrivilegeUpsertOne {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *PromotionPrivilegeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionPrivilegeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionPrivilegeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionPrivilegeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionPrivilegeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionPrivilegeCreateBulk is the builder for creating many PromotionPrivilege entities in bulk.
type PromotionPrivilegeCreateBulk struct {
	config
	builders []*PromotionPrivilegeCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionPrivilege entities in the database.
func (ppcb *PromotionPrivilegeCreateBulk) Save(ctx context.Context) ([]*PromotionPrivilege, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PromotionPrivilege, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionPrivilegeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PromotionPrivilegeCreateBulk) SaveX(ctx context.Context) []*PromotionPrivilege {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PromotionPrivilegeCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PromotionPrivilegeCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionPrivilege.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionPrivilegeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ppcb *PromotionPrivilegeCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionPrivilegeUpsertBulk {
	ppcb.conflict = opts
	return &PromotionPrivilegeUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *PromotionPrivilegeCreateBulk) OnConflictColumns(columns ...string) *PromotionPrivilegeUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionPrivilegeUpsertBulk{
		create: ppcb,
	}
}

// PromotionPrivilegeUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionPrivilege nodes.
type PromotionPrivilegeUpsertBulk struct {
	create *PromotionPrivilegeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionPrivilegeUpsertBulk) UpdateNewValues() *PromotionPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionprivilege.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionprivilege.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionPrivilege.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionPrivilegeUpsertBulk) Ignore() *PromotionPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionPrivilegeUpsertBulk) DoNothing() *PromotionPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionPrivilegeCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionPrivilegeUpsertBulk) Update(set func(*PromotionPrivilegeUpsert)) *PromotionPrivilegeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionPrivilegeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionPrivilegeUpsertBulk) SetUpdatedAt(v time.Time) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateUpdatedAt() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionPrivilegeUpsertBulk) SetDeletedAt(v time.Time) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateDeletedAt() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionPrivilegeUpsertBulk) ClearDeletedAt() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionPrivilegeUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateLastModifier() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionPrivilegeUpsertBulk) ClearLastModifier() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionPrivilegeUpsertBulk) SetRemark(v string) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateRemark() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionPrivilegeUpsertBulk) ClearRemark() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *PromotionPrivilegeUpsertBulk) SetType(v uint8) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionPrivilegeUpsertBulk) AddType(v uint8) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateType() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *PromotionPrivilegeUpsertBulk) SetName(v string) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateName() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PromotionPrivilegeUpsertBulk) SetDescription(v string) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateDescription() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PromotionPrivilegeUpsertBulk) ClearDescription() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearDescription()
	})
}

// SetValue sets the "value" field.
func (u *PromotionPrivilegeUpsertBulk) SetValue(v uint64) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.SetValue(v)
	})
}

// AddValue adds v to the "value" field.
func (u *PromotionPrivilegeUpsertBulk) AddValue(v uint64) *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.AddValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *PromotionPrivilegeUpsertBulk) UpdateValue() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *PromotionPrivilegeUpsertBulk) ClearValue() *PromotionPrivilegeUpsertBulk {
	return u.Update(func(s *PromotionPrivilegeUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *PromotionPrivilegeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionPrivilegeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionPrivilegeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionPrivilegeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
