// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribePause is the model entity for the SubscribePause schema.
type SubscribePause struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	// 操作店员ID
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	// 订阅ID
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	// 暂停开始时间
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	// 暂停结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// Days holds the value of the "days" field.
	// 暂停天数
	Days int `json:"days,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribePauseQuery when eager-loading is set.
	Edges SubscribePauseEdges `json:"edges"`
}

// SubscribePauseEdges holds the relations/edges for other nodes in the graph.
type SubscribePauseEdges struct {
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[2] {
		if e.Subscribe == nil {
			// The edge subscribe was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscribePause) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribepause.FieldCreator, subscribepause.FieldLastModifier:
			values[i] = new([]byte)
		case subscribepause.FieldID, subscribepause.FieldRiderID, subscribepause.FieldEmployeeID, subscribepause.FieldSubscribeID, subscribepause.FieldDays:
			values[i] = new(sql.NullInt64)
		case subscribepause.FieldRemark:
			values[i] = new(sql.NullString)
		case subscribepause.FieldCreatedAt, subscribepause.FieldUpdatedAt, subscribepause.FieldDeletedAt, subscribepause.FieldStartAt, subscribepause.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubscribePause", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscribePause fields.
func (sp *SubscribePause) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribepause.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint64(value.Int64)
		case subscribepause.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case subscribepause.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case subscribepause.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case subscribepause.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case subscribepause.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case subscribepause.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		case subscribepause.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				sp.RiderID = uint64(value.Int64)
			}
		case subscribepause.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				sp.EmployeeID = uint64(value.Int64)
			}
		case subscribepause.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				sp.SubscribeID = uint64(value.Int64)
			}
		case subscribepause.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				sp.StartAt = value.Time
			}
		case subscribepause.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				sp.EndAt = value.Time
			}
		case subscribepause.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				sp.Days = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryRider() *RiderQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryRider(sp)
}

// QueryEmployee queries the "employee" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryEmployee() *EmployeeQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryEmployee(sp)
}

// QuerySubscribe queries the "subscribe" edge of the SubscribePause entity.
func (sp *SubscribePause) QuerySubscribe() *SubscribeQuery {
	return (&SubscribePauseClient{config: sp.config}).QuerySubscribe(sp)
}

// Update returns a builder for updating this SubscribePause.
// Note that you need to call SubscribePause.Unwrap() before calling this method if this SubscribePause
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SubscribePause) Update() *SubscribePauseUpdateOne {
	return (&SubscribePauseClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the SubscribePause entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SubscribePause) Unwrap() *SubscribePause {
	tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscribePause is not a transactional entity")
	}
	sp.config.driver = tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SubscribePause) String() string {
	var builder strings.Builder
	builder.WriteString("SubscribePause(")
	builder.WriteString(fmt.Sprintf("id=%v", sp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	if v := sp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", sp.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", sp.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(sp.Remark)
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.RiderID))
	builder.WriteString(", employee_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.EmployeeID))
	builder.WriteString(", subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.SubscribeID))
	builder.WriteString(", start_at=")
	builder.WriteString(sp.StartAt.Format(time.ANSIC))
	builder.WriteString(", end_at=")
	builder.WriteString(sp.EndAt.Format(time.ANSIC))
	builder.WriteString(", days=")
	builder.WriteString(fmt.Sprintf("%v", sp.Days))
	builder.WriteByte(')')
	return builder.String()
}

// SubscribePauses is a parsable slice of SubscribePause.
type SubscribePauses []*SubscribePause

func (sp SubscribePauses) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
