// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribePause is the model entity for the SubscribePause schema.
type SubscribePause struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 店员ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 门店ID
	StoreID *uint64 `json:"store_id,omitempty"`
	// 门店ID
	EndStoreID *uint64 `json:"end_store_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 电柜ID
	EndCabinetID *uint64 `json:"end_cabinet_id,omitempty"`
	// 订阅ID
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// 寄存开始时间
	StartAt time.Time `json:"start_at,omitempty"`
	// 寄存结束时间
	EndAt time.Time `json:"end_at,omitempty"`
	// 寄存天数 = 天数差 - 重复天数
	Days int `json:"days,omitempty"`
	// 结束寄存店员ID
	EndEmployeeID *uint64 `json:"end_employee_id,omitempty"`
	// 超期天数
	OverdueDays int `json:"overdue_days,omitempty"`
	// 结束寄存管理员信息
	EndModifier *model.Modifier `json:"end_modifier,omitempty"`
	// 是否超期退租
	PauseOverdue bool `json:"pause_overdue,omitempty"`
	// 重复天数, 寄存过程中暂停扣费天数
	SuspendDays int `json:"suspend_days,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscribePauseQuery when eager-loading is set.
	Edges SubscribePauseEdges `json:"edges"`
}

// SubscribePauseEdges holds the relations/edges for other nodes in the graph.
type SubscribePauseEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// EndStore holds the value of the endStore edge.
	EndStore *Store `json:"endStore,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// EndCabinet holds the value of the endCabinet edge.
	EndCabinet *Cabinet `json:"endCabinet,omitempty"`
	// 订阅
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// EndEmployee holds the value of the end_employee edge.
	EndEmployee *Employee `json:"end_employee,omitempty"`
	// Suspends holds the value of the suspends edge.
	Suspends []*SubscribeSuspend `json:"suspends,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[2] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[3] {
		if e.Store == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// EndStoreOrErr returns the EndStore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) EndStoreOrErr() (*Store, error) {
	if e.loadedTypes[4] {
		if e.EndStore == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.EndStore, nil
	}
	return nil, &NotLoadedError{edge: "endStore"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[5] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// EndCabinetOrErr returns the EndCabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) EndCabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[6] {
		if e.EndCabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.EndCabinet, nil
	}
	return nil, &NotLoadedError{edge: "endCabinet"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[7] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// EndEmployeeOrErr returns the EndEmployee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscribePauseEdges) EndEmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[8] {
		if e.EndEmployee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.EndEmployee, nil
	}
	return nil, &NotLoadedError{edge: "end_employee"}
}

// SuspendsOrErr returns the Suspends value or an error if the edge
// was not loaded in eager-loading.
func (e SubscribePauseEdges) SuspendsOrErr() ([]*SubscribeSuspend, error) {
	if e.loadedTypes[9] {
		return e.Suspends, nil
	}
	return nil, &NotLoadedError{edge: "suspends"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscribePause) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscribepause.FieldCreator, subscribepause.FieldLastModifier, subscribepause.FieldEndModifier:
			values[i] = new([]byte)
		case subscribepause.FieldPauseOverdue:
			values[i] = new(sql.NullBool)
		case subscribepause.FieldID, subscribepause.FieldRiderID, subscribepause.FieldEmployeeID, subscribepause.FieldCityID, subscribepause.FieldStoreID, subscribepause.FieldEndStoreID, subscribepause.FieldCabinetID, subscribepause.FieldEndCabinetID, subscribepause.FieldSubscribeID, subscribepause.FieldDays, subscribepause.FieldEndEmployeeID, subscribepause.FieldOverdueDays, subscribepause.FieldSuspendDays:
			values[i] = new(sql.NullInt64)
		case subscribepause.FieldRemark:
			values[i] = new(sql.NullString)
		case subscribepause.FieldCreatedAt, subscribepause.FieldUpdatedAt, subscribepause.FieldDeletedAt, subscribepause.FieldStartAt, subscribepause.FieldEndAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SubscribePause", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscribePause fields.
func (sp *SubscribePause) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscribepause.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sp.ID = uint64(value.Int64)
		case subscribepause.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case subscribepause.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case subscribepause.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sp.DeletedAt = new(time.Time)
				*sp.DeletedAt = value.Time
			}
		case subscribepause.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case subscribepause.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case subscribepause.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				sp.Remark = value.String
			}
		case subscribepause.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				sp.RiderID = uint64(value.Int64)
			}
		case subscribepause.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				sp.EmployeeID = new(uint64)
				*sp.EmployeeID = uint64(value.Int64)
			}
		case subscribepause.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				sp.CityID = new(uint64)
				*sp.CityID = uint64(value.Int64)
			}
		case subscribepause.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				sp.StoreID = new(uint64)
				*sp.StoreID = uint64(value.Int64)
			}
		case subscribepause.FieldEndStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_store_id", values[i])
			} else if value.Valid {
				sp.EndStoreID = new(uint64)
				*sp.EndStoreID = uint64(value.Int64)
			}
		case subscribepause.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				sp.CabinetID = new(uint64)
				*sp.CabinetID = uint64(value.Int64)
			}
		case subscribepause.FieldEndCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_cabinet_id", values[i])
			} else if value.Valid {
				sp.EndCabinetID = new(uint64)
				*sp.EndCabinetID = uint64(value.Int64)
			}
		case subscribepause.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				sp.SubscribeID = uint64(value.Int64)
			}
		case subscribepause.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				sp.StartAt = value.Time
			}
		case subscribepause.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				sp.EndAt = value.Time
			}
		case subscribepause.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				sp.Days = int(value.Int64)
			}
		case subscribepause.FieldEndEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_employee_id", values[i])
			} else if value.Valid {
				sp.EndEmployeeID = new(uint64)
				*sp.EndEmployeeID = uint64(value.Int64)
			}
		case subscribepause.FieldOverdueDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field overdue_days", values[i])
			} else if value.Valid {
				sp.OverdueDays = int(value.Int64)
			}
		case subscribepause.FieldEndModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field end_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sp.EndModifier); err != nil {
					return fmt.Errorf("unmarshal field end_modifier: %w", err)
				}
			}
		case subscribepause.FieldPauseOverdue:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field pause_overdue", values[i])
			} else if value.Valid {
				sp.PauseOverdue = value.Bool
			}
		case subscribepause.FieldSuspendDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field suspend_days", values[i])
			} else if value.Valid {
				sp.SuspendDays = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryRider() *RiderQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryRider(sp)
}

// QueryEmployee queries the "employee" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryEmployee() *EmployeeQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryEmployee(sp)
}

// QueryCity queries the "city" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryCity() *CityQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryCity(sp)
}

// QueryStore queries the "store" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryStore() *StoreQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryStore(sp)
}

// QueryEndStore queries the "endStore" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryEndStore() *StoreQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryEndStore(sp)
}

// QueryCabinet queries the "cabinet" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryCabinet() *CabinetQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryCabinet(sp)
}

// QueryEndCabinet queries the "endCabinet" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryEndCabinet() *CabinetQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryEndCabinet(sp)
}

// QuerySubscribe queries the "subscribe" edge of the SubscribePause entity.
func (sp *SubscribePause) QuerySubscribe() *SubscribeQuery {
	return (&SubscribePauseClient{config: sp.config}).QuerySubscribe(sp)
}

// QueryEndEmployee queries the "end_employee" edge of the SubscribePause entity.
func (sp *SubscribePause) QueryEndEmployee() *EmployeeQuery {
	return (&SubscribePauseClient{config: sp.config}).QueryEndEmployee(sp)
}

// QuerySuspends queries the "suspends" edge of the SubscribePause entity.
func (sp *SubscribePause) QuerySuspends() *SubscribeSuspendQuery {
	return (&SubscribePauseClient{config: sp.config}).QuerySuspends(sp)
}

// Update returns a builder for updating this SubscribePause.
// Note that you need to call SubscribePause.Unwrap() before calling this method if this SubscribePause
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SubscribePause) Update() *SubscribePauseUpdateOne {
	return (&SubscribePauseClient{config: sp.config}).UpdateOne(sp)
}

// Unwrap unwraps the SubscribePause entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SubscribePause) Unwrap() *SubscribePause {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscribePause is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SubscribePause) String() string {
	var builder strings.Builder
	builder.WriteString("SubscribePause(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", sp.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", sp.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(sp.Remark)
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.RiderID))
	builder.WriteString(", ")
	if v := sp.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.StoreID; v != nil {
		builder.WriteString("store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.EndStoreID; v != nil {
		builder.WriteString("end_store_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.EndCabinetID; v != nil {
		builder.WriteString("end_cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.SubscribeID))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(sp.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(sp.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("days=")
	builder.WriteString(fmt.Sprintf("%v", sp.Days))
	builder.WriteString(", ")
	if v := sp.EndEmployeeID; v != nil {
		builder.WriteString("end_employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("overdue_days=")
	builder.WriteString(fmt.Sprintf("%v", sp.OverdueDays))
	builder.WriteString(", ")
	builder.WriteString("end_modifier=")
	builder.WriteString(fmt.Sprintf("%v", sp.EndModifier))
	builder.WriteString(", ")
	builder.WriteString("pause_overdue=")
	builder.WriteString(fmt.Sprintf("%v", sp.PauseOverdue))
	builder.WriteString(", ")
	builder.WriteString("suspend_days=")
	builder.WriteString(fmt.Sprintf("%v", sp.SuspendDays))
	builder.WriteByte(')')
	return builder.String()
}

// SubscribePauses is a parsable slice of SubscribePause.
type SubscribePauses []*SubscribePause

func (sp SubscribePauses) config(cfg config) {
	for _i := range sp {
		sp[_i].config = cfg
	}
}
