// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 认证状态
	Status uint8 `json:"status,omitempty"`
	// 是否封禁身份
	Banned bool `json:"banned,omitempty"`
	// 真实姓名
	Name string `json:"name,omitempty"`
	// 证件号码
	IDCardNumber string `json:"id_card_number,omitempty"`
	// 证件类别
	IDCardType uint8 `json:"id_card_type,omitempty"`
	// 证件人像面
	IDCardPortrait string `json:"id_card_portrait,omitempty"`
	// 证件国徽面
	IDCardNational string `json:"id_card_national,omitempty"`
	// 实名认证人脸照片
	AuthFace string `json:"auth_face,omitempty"`
	// 实名认证结果详情
	AuthResult *model.FaceVerifyResult `json:"auth_result,omitempty"`
	// 实名认证结果获取时间
	AuthAt *time.Time `json:"auth_at,omitempty"`
	// E签宝账户ID
	EsignAccountID string `json:"esign_account_id,omitempty"`
	// 百度人脸verify_token
	BaiduVerifyToken string `json:"baidu_verify_token,omitempty"`
	// 百度人脸log_id
	BaiduLogID string `json:"baidu_log_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonQuery when eager-loading is set.
	Edges PersonEdges `json:"edges"`
}

// PersonEdges holds the relations/edges for other nodes in the graph.
type PersonEdges struct {
	// Rider holds the value of the rider edge.
	Rider []*Rider `json:"rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) RiderOrErr() ([]*Rider, error) {
	if e.loadedTypes[0] {
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldCreator, person.FieldLastModifier, person.FieldAuthResult:
			values[i] = new([]byte)
		case person.FieldBanned:
			values[i] = new(sql.NullBool)
		case person.FieldID, person.FieldStatus, person.FieldIDCardType:
			values[i] = new(sql.NullInt64)
		case person.FieldRemark, person.FieldName, person.FieldIDCardNumber, person.FieldIDCardPortrait, person.FieldIDCardNational, person.FieldAuthFace, person.FieldEsignAccountID, person.FieldBaiduVerifyToken, person.FieldBaiduLogID:
			values[i] = new(sql.NullString)
		case person.FieldCreatedAt, person.FieldUpdatedAt, person.FieldDeletedAt, person.FieldAuthAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Person", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = uint64(value.Int64)
		case person.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case person.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case person.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pe.DeletedAt = new(time.Time)
				*pe.DeletedAt = value.Time
			}
		case person.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case person.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case person.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pe.Remark = value.String
			}
		case person.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pe.Status = uint8(value.Int64)
			}
		case person.FieldBanned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field banned", values[i])
			} else if value.Valid {
				pe.Banned = value.Bool
			}
		case person.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case person.FieldIDCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_number", values[i])
			} else if value.Valid {
				pe.IDCardNumber = value.String
			}
		case person.FieldIDCardType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_type", values[i])
			} else if value.Valid {
				pe.IDCardType = uint8(value.Int64)
			}
		case person.FieldIDCardPortrait:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_portrait", values[i])
			} else if value.Valid {
				pe.IDCardPortrait = value.String
			}
		case person.FieldIDCardNational:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id_card_national", values[i])
			} else if value.Valid {
				pe.IDCardNational = value.String
			}
		case person.FieldAuthFace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_face", values[i])
			} else if value.Valid {
				pe.AuthFace = value.String
			}
		case person.FieldAuthResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field auth_result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.AuthResult); err != nil {
					return fmt.Errorf("unmarshal field auth_result: %w", err)
				}
			}
		case person.FieldAuthAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field auth_at", values[i])
			} else if value.Valid {
				pe.AuthAt = new(time.Time)
				*pe.AuthAt = value.Time
			}
		case person.FieldEsignAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field esign_account_id", values[i])
			} else if value.Valid {
				pe.EsignAccountID = value.String
			}
		case person.FieldBaiduVerifyToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baidu_verify_token", values[i])
			} else if value.Valid {
				pe.BaiduVerifyToken = value.String
			}
		case person.FieldBaiduLogID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field baidu_log_id", values[i])
			} else if value.Valid {
				pe.BaiduLogID = value.String
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the Person entity.
func (pe *Person) QueryRider() *RiderQuery {
	return NewPersonClient(pe.config).QueryRider(pe)
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return NewPersonClient(pe.config).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	_tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = _tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pe.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pe.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pe.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pe.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pe.Remark)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pe.Status))
	builder.WriteString(", ")
	builder.WriteString("banned=")
	builder.WriteString(fmt.Sprintf("%v", pe.Banned))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ")
	builder.WriteString("id_card_number=")
	builder.WriteString(pe.IDCardNumber)
	builder.WriteString(", ")
	builder.WriteString("id_card_type=")
	builder.WriteString(fmt.Sprintf("%v", pe.IDCardType))
	builder.WriteString(", ")
	builder.WriteString("id_card_portrait=")
	builder.WriteString(pe.IDCardPortrait)
	builder.WriteString(", ")
	builder.WriteString("id_card_national=")
	builder.WriteString(pe.IDCardNational)
	builder.WriteString(", ")
	builder.WriteString("auth_face=")
	builder.WriteString(pe.AuthFace)
	builder.WriteString(", ")
	builder.WriteString("auth_result=")
	builder.WriteString(fmt.Sprintf("%v", pe.AuthResult))
	builder.WriteString(", ")
	if v := pe.AuthAt; v != nil {
		builder.WriteString("auth_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("esign_account_id=")
	builder.WriteString(pe.EsignAccountID)
	builder.WriteString(", ")
	builder.WriteString("baidu_verify_token=")
	builder.WriteString(pe.BaiduVerifyToken)
	builder.WriteString(", ")
	builder.WriteString("baidu_log_id=")
	builder.WriteString(pe.BaiduLogID)
	builder.WriteByte(')')
	return builder.String()
}

// Persons is a parsable slice of Person.
type Persons []*Person
