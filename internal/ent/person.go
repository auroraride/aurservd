// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/person"
)

// Person is the model entity for the Person schema.
type Person struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// LastModify holds the value of the "last_modify" field.
	// 最后修改人
	LastModify *time.Time `json:"last_modify,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark *string `json:"remark,omitempty"`
	// Status holds the value of the "status" field.
	// 认证状态
	Status uint8 `json:"status,omitempty"`
	// Block holds the value of the "block" field.
	// 封禁
	Block bool `json:"block,omitempty"`
	// Name holds the value of the "name" field.
	// 真实姓名
	Name string `json:"name,omitempty"`
	// IcNumber holds the value of the "ic_number" field.
	// 证件号码
	IcNumber string `json:"ic_number,omitempty"`
	// IcType holds the value of the "ic_type" field.
	// 证件类别
	IcType uint8 `json:"ic_type,omitempty"`
	// IcPortrait holds the value of the "ic_portrait" field.
	// 证件人像面
	IcPortrait string `json:"ic_portrait,omitempty"`
	// IcNational holds the value of the "ic_national" field.
	// 证件国徽面
	IcNational string `json:"ic_national,omitempty"`
	// FaceImg holds the value of the "face_img" field.
	// 人脸照片
	FaceImg string `json:"face_img,omitempty"`
	// FaceVerifyResult holds the value of the "face_verify_result" field.
	// 人脸识别验证结果详情
	FaceVerifyResult *model.FaceVerifyResult `json:"face_verify_result,omitempty"`
	// SuccessAt holds the value of the "success_at" field.
	// 认证通过时间
	SuccessAt *time.Time `json:"success_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonQuery when eager-loading is set.
	Edges PersonEdges `json:"edges"`
}

// PersonEdges holds the relations/edges for other nodes in the graph.
type PersonEdges struct {
	// Rider holds the value of the rider edge.
	Rider []*Rider `json:"rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading.
func (e PersonEdges) RiderOrErr() ([]*Rider, error) {
	if e.loadedTypes[0] {
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Person) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case person.FieldFaceVerifyResult:
			values[i] = new([]byte)
		case person.FieldBlock:
			values[i] = new(sql.NullBool)
		case person.FieldID, person.FieldStatus, person.FieldIcType:
			values[i] = new(sql.NullInt64)
		case person.FieldRemark, person.FieldName, person.FieldIcNumber, person.FieldIcPortrait, person.FieldIcNational, person.FieldFaceImg:
			values[i] = new(sql.NullString)
		case person.FieldCreatedAt, person.FieldUpdatedAt, person.FieldDeletedAt, person.FieldLastModify, person.FieldSuccessAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Person", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Person fields.
func (pe *Person) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case person.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pe.ID = uint64(value.Int64)
		case person.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pe.CreatedAt = value.Time
			}
		case person.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pe.UpdatedAt = value.Time
			}
		case person.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pe.DeletedAt = new(time.Time)
				*pe.DeletedAt = value.Time
			}
		case person.FieldLastModify:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_modify", values[i])
			} else if value.Valid {
				pe.LastModify = new(time.Time)
				*pe.LastModify = value.Time
			}
		case person.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pe.Remark = new(string)
				*pe.Remark = value.String
			}
		case person.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pe.Status = uint8(value.Int64)
			}
		case person.FieldBlock:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field block", values[i])
			} else if value.Valid {
				pe.Block = value.Bool
			}
		case person.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pe.Name = value.String
			}
		case person.FieldIcNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ic_number", values[i])
			} else if value.Valid {
				pe.IcNumber = value.String
			}
		case person.FieldIcType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ic_type", values[i])
			} else if value.Valid {
				pe.IcType = uint8(value.Int64)
			}
		case person.FieldIcPortrait:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ic_portrait", values[i])
			} else if value.Valid {
				pe.IcPortrait = value.String
			}
		case person.FieldIcNational:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ic_national", values[i])
			} else if value.Valid {
				pe.IcNational = value.String
			}
		case person.FieldFaceImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field face_img", values[i])
			} else if value.Valid {
				pe.FaceImg = value.String
			}
		case person.FieldFaceVerifyResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field face_verify_result", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pe.FaceVerifyResult); err != nil {
					return fmt.Errorf("unmarshal field face_verify_result: %w", err)
				}
			}
		case person.FieldSuccessAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field success_at", values[i])
			} else if value.Valid {
				pe.SuccessAt = new(time.Time)
				*pe.SuccessAt = value.Time
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the Person entity.
func (pe *Person) QueryRider() *RiderQuery {
	return (&PersonClient{config: pe.config}).QueryRider(pe)
}

// Update returns a builder for updating this Person.
// Note that you need to call Person.Unwrap() before calling this method if this Person
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Person) Update() *PersonUpdateOne {
	return (&PersonClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the Person entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pe *Person) Unwrap() *Person {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Person is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Person) String() string {
	var builder strings.Builder
	builder.WriteString("Person(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	if v := pe.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := pe.LastModify; v != nil {
		builder.WriteString(", last_modify=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := pe.Remark; v != nil {
		builder.WriteString(", remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", pe.Status))
	builder.WriteString(", block=")
	builder.WriteString(fmt.Sprintf("%v", pe.Block))
	builder.WriteString(", name=")
	builder.WriteString(pe.Name)
	builder.WriteString(", ic_number=")
	builder.WriteString(pe.IcNumber)
	builder.WriteString(", ic_type=")
	builder.WriteString(fmt.Sprintf("%v", pe.IcType))
	builder.WriteString(", ic_portrait=")
	builder.WriteString(pe.IcPortrait)
	builder.WriteString(", ic_national=")
	builder.WriteString(pe.IcNational)
	builder.WriteString(", face_img=")
	builder.WriteString(pe.FaceImg)
	builder.WriteString(", face_verify_result=")
	builder.WriteString(fmt.Sprintf("%v", pe.FaceVerifyResult))
	if v := pe.SuccessAt; v != nil {
		builder.WriteString(", success_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Persons is a parsable slice of Person.
type Persons []*Person

func (pe Persons) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
