// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// FeedbackCreate is the builder for creating a Feedback entity.
type FeedbackCreate struct {
	config
	mutation *FeedbackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FeedbackCreate) SetCreatedAt(t time.Time) *FeedbackCreate {
	fc.mutation.SetCreatedAt(t)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableCreatedAt(t *time.Time) *FeedbackCreate {
	if t != nil {
		fc.SetCreatedAt(*t)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FeedbackCreate) SetUpdatedAt(t time.Time) *FeedbackCreate {
	fc.mutation.SetUpdatedAt(t)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableUpdatedAt(t *time.Time) *FeedbackCreate {
	if t != nil {
		fc.SetUpdatedAt(*t)
	}
	return fc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (fc *FeedbackCreate) SetEnterpriseID(u uint64) *FeedbackCreate {
	fc.mutation.SetEnterpriseID(u)
	return fc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableEnterpriseID(u *uint64) *FeedbackCreate {
	if u != nil {
		fc.SetEnterpriseID(*u)
	}
	return fc
}

// SetAgentID sets the "agent_id" field.
func (fc *FeedbackCreate) SetAgentID(u uint64) *FeedbackCreate {
	fc.mutation.SetAgentID(u)
	return fc
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableAgentID(u *uint64) *FeedbackCreate {
	if u != nil {
		fc.SetAgentID(*u)
	}
	return fc
}

// SetRiderID sets the "rider_id" field.
func (fc *FeedbackCreate) SetRiderID(u uint64) *FeedbackCreate {
	fc.mutation.SetRiderID(u)
	return fc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableRiderID(u *uint64) *FeedbackCreate {
	if u != nil {
		fc.SetRiderID(*u)
	}
	return fc
}

// SetContent sets the "content" field.
func (fc *FeedbackCreate) SetContent(s string) *FeedbackCreate {
	fc.mutation.SetContent(s)
	return fc
}

// SetType sets the "type" field.
func (fc *FeedbackCreate) SetType(u uint8) *FeedbackCreate {
	fc.mutation.SetType(u)
	return fc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableType(u *uint8) *FeedbackCreate {
	if u != nil {
		fc.SetType(*u)
	}
	return fc
}

// SetSource sets the "source" field.
func (fc *FeedbackCreate) SetSource(u uint8) *FeedbackCreate {
	fc.mutation.SetSource(u)
	return fc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableSource(u *uint8) *FeedbackCreate {
	if u != nil {
		fc.SetSource(*u)
	}
	return fc
}

// SetURL sets the "url" field.
func (fc *FeedbackCreate) SetURL(s []string) *FeedbackCreate {
	fc.mutation.SetURL(s)
	return fc
}

// SetName sets the "name" field.
func (fc *FeedbackCreate) SetName(s string) *FeedbackCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillableName(s *string) *FeedbackCreate {
	if s != nil {
		fc.SetName(*s)
	}
	return fc
}

// SetPhone sets the "phone" field.
func (fc *FeedbackCreate) SetPhone(s string) *FeedbackCreate {
	fc.mutation.SetPhone(s)
	return fc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (fc *FeedbackCreate) SetNillablePhone(s *string) *FeedbackCreate {
	if s != nil {
		fc.SetPhone(*s)
	}
	return fc
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (fc *FeedbackCreate) SetEnterprise(e *Enterprise) *FeedbackCreate {
	return fc.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (fc *FeedbackCreate) SetAgent(a *Agent) *FeedbackCreate {
	return fc.SetAgentID(a.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (fc *FeedbackCreate) SetRider(r *Rider) *FeedbackCreate {
	return fc.SetRiderID(r.ID)
}

// Mutation returns the FeedbackMutation object of the builder.
func (fc *FeedbackCreate) Mutation() *FeedbackMutation {
	return fc.mutation
}

// Save creates the Feedback in the database.
func (fc *FeedbackCreate) Save(ctx context.Context) (*Feedback, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FeedbackCreate) SaveX(ctx context.Context) *Feedback {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FeedbackCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FeedbackCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FeedbackCreate) defaults() {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		v := feedback.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		v := feedback.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.GetType(); !ok {
		v := feedback.DefaultType
		fc.mutation.SetType(v)
	}
	if _, ok := fc.mutation.Source(); !ok {
		v := feedback.DefaultSource
		fc.mutation.SetSource(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FeedbackCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Feedback.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Feedback.updated_at"`)}
	}
	if _, ok := fc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Feedback.content"`)}
	}
	if _, ok := fc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Feedback.type"`)}
	}
	if _, ok := fc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Feedback.source"`)}
	}
	return nil
}

func (fc *FeedbackCreate) sqlSave(ctx context.Context) (*Feedback, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FeedbackCreate) createSpec() (*Feedback, *sqlgraph.CreateSpec) {
	var (
		_node = &Feedback{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(feedback.Table, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = fc.conflict
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.SetField(feedback.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.SetField(feedback.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.Content(); ok {
		_spec.SetField(feedback.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := fc.mutation.GetType(); ok {
		_spec.SetField(feedback.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := fc.mutation.Source(); ok {
		_spec.SetField(feedback.FieldSource, field.TypeUint8, value)
		_node.Source = value
	}
	if value, ok := fc.mutation.URL(); ok {
		_spec.SetField(feedback.FieldURL, field.TypeJSON, value)
		_node.URL = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(feedback.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Phone(); ok {
		_spec.SetField(feedback.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if nodes := fc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.EnterpriseTable,
			Columns: []string{feedback.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.AgentTable,
			Columns: []string{feedback.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   feedback.RiderTable,
			Columns: []string{feedback.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feedback.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedbackUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FeedbackCreate) OnConflict(opts ...sql.ConflictOption) *FeedbackUpsertOne {
	fc.conflict = opts
	return &FeedbackUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FeedbackCreate) OnConflictColumns(columns ...string) *FeedbackUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FeedbackUpsertOne{
		create: fc,
	}
}

type (
	// FeedbackUpsertOne is the builder for "upsert"-ing
	//  one Feedback node.
	FeedbackUpsertOne struct {
		create *FeedbackCreate
	}

	// FeedbackUpsert is the "OnConflict" setter.
	FeedbackUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsert) SetUpdatedAt(v time.Time) *FeedbackUpsert {
	u.Set(feedback.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateUpdatedAt() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldUpdatedAt)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *FeedbackUpsert) SetEnterpriseID(v uint64) *FeedbackUpsert {
	u.Set(feedback.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateEnterpriseID() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *FeedbackUpsert) ClearEnterpriseID() *FeedbackUpsert {
	u.SetNull(feedback.FieldEnterpriseID)
	return u
}

// SetAgentID sets the "agent_id" field.
func (u *FeedbackUpsert) SetAgentID(v uint64) *FeedbackUpsert {
	u.Set(feedback.FieldAgentID, v)
	return u
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateAgentID() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldAgentID)
	return u
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *FeedbackUpsert) ClearAgentID() *FeedbackUpsert {
	u.SetNull(feedback.FieldAgentID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *FeedbackUpsert) SetRiderID(v uint64) *FeedbackUpsert {
	u.Set(feedback.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateRiderID() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FeedbackUpsert) ClearRiderID() *FeedbackUpsert {
	u.SetNull(feedback.FieldRiderID)
	return u
}

// SetContent sets the "content" field.
func (u *FeedbackUpsert) SetContent(v string) *FeedbackUpsert {
	u.Set(feedback.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateContent() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldContent)
	return u
}

// SetType sets the "type" field.
func (u *FeedbackUpsert) SetType(v uint8) *FeedbackUpsert {
	u.Set(feedback.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateType() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *FeedbackUpsert) AddType(v uint8) *FeedbackUpsert {
	u.Add(feedback.FieldType, v)
	return u
}

// SetSource sets the "source" field.
func (u *FeedbackUpsert) SetSource(v uint8) *FeedbackUpsert {
	u.Set(feedback.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateSource() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldSource)
	return u
}

// AddSource adds v to the "source" field.
func (u *FeedbackUpsert) AddSource(v uint8) *FeedbackUpsert {
	u.Add(feedback.FieldSource, v)
	return u
}

// SetURL sets the "url" field.
func (u *FeedbackUpsert) SetURL(v []string) *FeedbackUpsert {
	u.Set(feedback.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateURL() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *FeedbackUpsert) ClearURL() *FeedbackUpsert {
	u.SetNull(feedback.FieldURL)
	return u
}

// SetName sets the "name" field.
func (u *FeedbackUpsert) SetName(v string) *FeedbackUpsert {
	u.Set(feedback.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdateName() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *FeedbackUpsert) ClearName() *FeedbackUpsert {
	u.SetNull(feedback.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *FeedbackUpsert) SetPhone(v string) *FeedbackUpsert {
	u.Set(feedback.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *FeedbackUpsert) UpdatePhone() *FeedbackUpsert {
	u.SetExcluded(feedback.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *FeedbackUpsert) ClearPhone() *FeedbackUpsert {
	u.SetNull(feedback.FieldPhone)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedbackUpsertOne) UpdateNewValues() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(feedback.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feedback.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FeedbackUpsertOne) Ignore() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedbackUpsertOne) DoNothing() *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedbackCreate.OnConflict
// documentation for more info.
func (u *FeedbackUpsertOne) Update(set func(*FeedbackUpsert)) *FeedbackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsertOne) SetUpdatedAt(v time.Time) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateUpdatedAt() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *FeedbackUpsertOne) SetEnterpriseID(v uint64) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateEnterpriseID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *FeedbackUpsertOne) ClearEnterpriseID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *FeedbackUpsertOne) SetAgentID(v uint64) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateAgentID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *FeedbackUpsertOne) ClearAgentID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearAgentID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *FeedbackUpsertOne) SetRiderID(v uint64) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateRiderID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FeedbackUpsertOne) ClearRiderID() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearRiderID()
	})
}

// SetContent sets the "content" field.
func (u *FeedbackUpsertOne) SetContent(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateContent() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateContent()
	})
}

// SetType sets the "type" field.
func (u *FeedbackUpsertOne) SetType(v uint8) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FeedbackUpsertOne) AddType(v uint8) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateType() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *FeedbackUpsertOne) SetSource(v uint8) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetSource(v)
	})
}

// AddSource adds v to the "source" field.
func (u *FeedbackUpsertOne) AddSource(v uint8) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.AddSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateSource() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateSource()
	})
}

// SetURL sets the "url" field.
func (u *FeedbackUpsertOne) SetURL(v []string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateURL() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *FeedbackUpsertOne) ClearURL() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearURL()
	})
}

// SetName sets the "name" field.
func (u *FeedbackUpsertOne) SetName(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdateName() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FeedbackUpsertOne) ClearName() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearName()
	})
}

// SetPhone sets the "phone" field.
func (u *FeedbackUpsertOne) SetPhone(v string) *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *FeedbackUpsertOne) UpdatePhone() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *FeedbackUpsertOne) ClearPhone() *FeedbackUpsertOne {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearPhone()
	})
}

// Exec executes the query.
func (u *FeedbackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedbackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedbackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FeedbackUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FeedbackUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FeedbackCreateBulk is the builder for creating many Feedback entities in bulk.
type FeedbackCreateBulk struct {
	config
	err      error
	builders []*FeedbackCreate
	conflict []sql.ConflictOption
}

// Save creates the Feedback entities in the database.
func (fcb *FeedbackCreateBulk) Save(ctx context.Context) ([]*Feedback, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Feedback, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FeedbackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) SaveX(ctx context.Context) []*Feedback {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FeedbackCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FeedbackCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Feedback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FeedbackUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FeedbackCreateBulk) OnConflict(opts ...sql.ConflictOption) *FeedbackUpsertBulk {
	fcb.conflict = opts
	return &FeedbackUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FeedbackCreateBulk) OnConflictColumns(columns ...string) *FeedbackUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FeedbackUpsertBulk{
		create: fcb,
	}
}

// FeedbackUpsertBulk is the builder for "upsert"-ing
// a bulk of Feedback nodes.
type FeedbackUpsertBulk struct {
	create *FeedbackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FeedbackUpsertBulk) UpdateNewValues() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(feedback.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Feedback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FeedbackUpsertBulk) Ignore() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FeedbackUpsertBulk) DoNothing() *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FeedbackCreateBulk.OnConflict
// documentation for more info.
func (u *FeedbackUpsertBulk) Update(set func(*FeedbackUpsert)) *FeedbackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FeedbackUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FeedbackUpsertBulk) SetUpdatedAt(v time.Time) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateUpdatedAt() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *FeedbackUpsertBulk) SetEnterpriseID(v uint64) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateEnterpriseID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *FeedbackUpsertBulk) ClearEnterpriseID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *FeedbackUpsertBulk) SetAgentID(v uint64) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateAgentID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *FeedbackUpsertBulk) ClearAgentID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearAgentID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *FeedbackUpsertBulk) SetRiderID(v uint64) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateRiderID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *FeedbackUpsertBulk) ClearRiderID() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearRiderID()
	})
}

// SetContent sets the "content" field.
func (u *FeedbackUpsertBulk) SetContent(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateContent() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateContent()
	})
}

// SetType sets the "type" field.
func (u *FeedbackUpsertBulk) SetType(v uint8) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FeedbackUpsertBulk) AddType(v uint8) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateType() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateType()
	})
}

// SetSource sets the "source" field.
func (u *FeedbackUpsertBulk) SetSource(v uint8) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetSource(v)
	})
}

// AddSource adds v to the "source" field.
func (u *FeedbackUpsertBulk) AddSource(v uint8) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.AddSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateSource() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateSource()
	})
}

// SetURL sets the "url" field.
func (u *FeedbackUpsertBulk) SetURL(v []string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateURL() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *FeedbackUpsertBulk) ClearURL() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearURL()
	})
}

// SetName sets the "name" field.
func (u *FeedbackUpsertBulk) SetName(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdateName() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *FeedbackUpsertBulk) ClearName() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearName()
	})
}

// SetPhone sets the "phone" field.
func (u *FeedbackUpsertBulk) SetPhone(v string) *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *FeedbackUpsertBulk) UpdatePhone() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *FeedbackUpsertBulk) ClearPhone() *FeedbackUpsertBulk {
	return u.Update(func(s *FeedbackUpsert) {
		s.ClearPhone()
	})
}

// Exec executes the query.
func (u *FeedbackUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FeedbackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FeedbackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FeedbackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
