// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikeallocate"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EbikeAllocateCreate is the builder for creating a EbikeAllocate entity.
type EbikeAllocateCreate struct {
	config
	mutation *EbikeAllocateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmployeeID sets the "employee_id" field.
func (eac *EbikeAllocateCreate) SetEmployeeID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetEmployeeID(u)
	return eac
}

// SetStoreID sets the "store_id" field.
func (eac *EbikeAllocateCreate) SetStoreID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetStoreID(u)
	return eac
}

// SetEbikeID sets the "ebike_id" field.
func (eac *EbikeAllocateCreate) SetEbikeID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetEbikeID(u)
	return eac
}

// SetBrandID sets the "brand_id" field.
func (eac *EbikeAllocateCreate) SetBrandID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetBrandID(u)
	return eac
}

// SetSubscribeID sets the "subscribe_id" field.
func (eac *EbikeAllocateCreate) SetSubscribeID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetSubscribeID(u)
	return eac
}

// SetRiderID sets the "rider_id" field.
func (eac *EbikeAllocateCreate) SetRiderID(u uint64) *EbikeAllocateCreate {
	eac.mutation.SetRiderID(u)
	return eac
}

// SetStatus sets the "status" field.
func (eac *EbikeAllocateCreate) SetStatus(u uint8) *EbikeAllocateCreate {
	eac.mutation.SetStatus(u)
	return eac
}

// SetInfo sets the "info" field.
func (eac *EbikeAllocateCreate) SetInfo(ma *model.EbikeAllocate) *EbikeAllocateCreate {
	eac.mutation.SetInfo(ma)
	return eac
}

// SetTime sets the "time" field.
func (eac *EbikeAllocateCreate) SetTime(t time.Time) *EbikeAllocateCreate {
	eac.mutation.SetTime(t)
	return eac
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (eac *EbikeAllocateCreate) SetEmployee(e *Employee) *EbikeAllocateCreate {
	return eac.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eac *EbikeAllocateCreate) SetStore(s *Store) *EbikeAllocateCreate {
	return eac.SetStoreID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (eac *EbikeAllocateCreate) SetEbike(e *Ebike) *EbikeAllocateCreate {
	return eac.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (eac *EbikeAllocateCreate) SetBrand(e *EbikeBrand) *EbikeAllocateCreate {
	return eac.SetBrandID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (eac *EbikeAllocateCreate) SetSubscribe(s *Subscribe) *EbikeAllocateCreate {
	return eac.SetSubscribeID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eac *EbikeAllocateCreate) SetRider(r *Rider) *EbikeAllocateCreate {
	return eac.SetRiderID(r.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (eac *EbikeAllocateCreate) SetContractID(id uint64) *EbikeAllocateCreate {
	eac.mutation.SetContractID(id)
	return eac
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (eac *EbikeAllocateCreate) SetNillableContractID(id *uint64) *EbikeAllocateCreate {
	if id != nil {
		eac = eac.SetContractID(*id)
	}
	return eac
}

// SetContract sets the "contract" edge to the Contract entity.
func (eac *EbikeAllocateCreate) SetContract(c *Contract) *EbikeAllocateCreate {
	return eac.SetContractID(c.ID)
}

// Mutation returns the EbikeAllocateMutation object of the builder.
func (eac *EbikeAllocateCreate) Mutation() *EbikeAllocateMutation {
	return eac.mutation
}

// Save creates the EbikeAllocate in the database.
func (eac *EbikeAllocateCreate) Save(ctx context.Context) (*EbikeAllocate, error) {
	var (
		err  error
		node *EbikeAllocate
	)
	if len(eac.hooks) == 0 {
		if err = eac.check(); err != nil {
			return nil, err
		}
		node, err = eac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeAllocateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eac.check(); err != nil {
				return nil, err
			}
			eac.mutation = mutation
			if node, err = eac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(eac.hooks) - 1; i >= 0; i-- {
			if eac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EbikeAllocate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EbikeAllocateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eac *EbikeAllocateCreate) SaveX(ctx context.Context) *EbikeAllocate {
	v, err := eac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eac *EbikeAllocateCreate) Exec(ctx context.Context) error {
	_, err := eac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eac *EbikeAllocateCreate) ExecX(ctx context.Context) {
	if err := eac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eac *EbikeAllocateCreate) check() error {
	if _, ok := eac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "EbikeAllocate.employee_id"`)}
	}
	if _, ok := eac.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "EbikeAllocate.store_id"`)}
	}
	if _, ok := eac.mutation.EbikeID(); !ok {
		return &ValidationError{Name: "ebike_id", err: errors.New(`ent: missing required field "EbikeAllocate.ebike_id"`)}
	}
	if _, ok := eac.mutation.BrandID(); !ok {
		return &ValidationError{Name: "brand_id", err: errors.New(`ent: missing required field "EbikeAllocate.brand_id"`)}
	}
	if _, ok := eac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "EbikeAllocate.subscribe_id"`)}
	}
	if _, ok := eac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "EbikeAllocate.rider_id"`)}
	}
	if _, ok := eac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "EbikeAllocate.status"`)}
	}
	if _, ok := eac.mutation.Info(); !ok {
		return &ValidationError{Name: "info", err: errors.New(`ent: missing required field "EbikeAllocate.info"`)}
	}
	if _, ok := eac.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "EbikeAllocate.time"`)}
	}
	if _, ok := eac.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "EbikeAllocate.employee"`)}
	}
	if _, ok := eac.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store", err: errors.New(`ent: missing required edge "EbikeAllocate.store"`)}
	}
	if _, ok := eac.mutation.EbikeID(); !ok {
		return &ValidationError{Name: "ebike", err: errors.New(`ent: missing required edge "EbikeAllocate.ebike"`)}
	}
	if _, ok := eac.mutation.BrandID(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required edge "EbikeAllocate.brand"`)}
	}
	if _, ok := eac.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "EbikeAllocate.subscribe"`)}
	}
	if _, ok := eac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "EbikeAllocate.rider"`)}
	}
	return nil
}

func (eac *EbikeAllocateCreate) sqlSave(ctx context.Context) (*EbikeAllocate, error) {
	_node, _spec := eac.createSpec()
	if err := sqlgraph.CreateNode(ctx, eac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (eac *EbikeAllocateCreate) createSpec() (*EbikeAllocate, *sqlgraph.CreateSpec) {
	var (
		_node = &EbikeAllocate{config: eac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ebikeallocate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikeallocate.FieldID,
			},
		}
	)
	_spec.OnConflict = eac.conflict
	if value, ok := eac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: ebikeallocate.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := eac.mutation.Info(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebikeallocate.FieldInfo,
		})
		_node.Info = value
	}
	if value, ok := eac.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikeallocate.FieldTime,
		})
		_node.Time = value
	}
	if nodes := eac.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EmployeeTable,
			Columns: []string{ebikeallocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.StoreTable,
			Columns: []string{ebikeallocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EbikeTable,
			Columns: []string{ebikeallocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EbikeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.BrandTable,
			Columns: []string{ebikeallocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.SubscribeTable,
			Columns: []string{ebikeallocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.RiderTable,
			Columns: []string{ebikeallocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eac.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ebikeallocate.ContractTable,
			Columns: []string{ebikeallocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeAllocate.Create().
//		SetEmployeeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeAllocateUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (eac *EbikeAllocateCreate) OnConflict(opts ...sql.ConflictOption) *EbikeAllocateUpsertOne {
	eac.conflict = opts
	return &EbikeAllocateUpsertOne{
		create: eac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eac *EbikeAllocateCreate) OnConflictColumns(columns ...string) *EbikeAllocateUpsertOne {
	eac.conflict = append(eac.conflict, sql.ConflictColumns(columns...))
	return &EbikeAllocateUpsertOne{
		create: eac,
	}
}

type (
	// EbikeAllocateUpsertOne is the builder for "upsert"-ing
	//  one EbikeAllocate node.
	EbikeAllocateUpsertOne struct {
		create *EbikeAllocateCreate
	}

	// EbikeAllocateUpsert is the "OnConflict" setter.
	EbikeAllocateUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmployeeID sets the "employee_id" field.
func (u *EbikeAllocateUpsert) SetEmployeeID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateEmployeeID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldEmployeeID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *EbikeAllocateUpsert) SetStoreID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateStoreID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldStoreID)
	return u
}

// SetEbikeID sets the "ebike_id" field.
func (u *EbikeAllocateUpsert) SetEbikeID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldEbikeID, v)
	return u
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateEbikeID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldEbikeID)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeAllocateUpsert) SetBrandID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateBrandID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldBrandID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EbikeAllocateUpsert) SetSubscribeID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateSubscribeID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldSubscribeID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeAllocateUpsert) SetRiderID(v uint64) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateRiderID() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldRiderID)
	return u
}

// SetStatus sets the "status" field.
func (u *EbikeAllocateUpsert) SetStatus(v uint8) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateStatus() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *EbikeAllocateUpsert) AddStatus(v uint8) *EbikeAllocateUpsert {
	u.Add(ebikeallocate.FieldStatus, v)
	return u
}

// SetInfo sets the "info" field.
func (u *EbikeAllocateUpsert) SetInfo(v *model.EbikeAllocate) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldInfo, v)
	return u
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateInfo() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldInfo)
	return u
}

// SetTime sets the "time" field.
func (u *EbikeAllocateUpsert) SetTime(v time.Time) *EbikeAllocateUpsert {
	u.Set(ebikeallocate.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *EbikeAllocateUpsert) UpdateTime() *EbikeAllocateUpsert {
	u.SetExcluded(ebikeallocate.FieldTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeAllocateUpsertOne) UpdateNewValues() *EbikeAllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EbikeAllocateUpsertOne) Ignore() *EbikeAllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeAllocateUpsertOne) DoNothing() *EbikeAllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeAllocateCreate.OnConflict
// documentation for more info.
func (u *EbikeAllocateUpsertOne) Update(set func(*EbikeAllocateUpsert)) *EbikeAllocateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeAllocateUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *EbikeAllocateUpsertOne) SetEmployeeID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateEmployeeID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *EbikeAllocateUpsertOne) SetStoreID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateStoreID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateStoreID()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *EbikeAllocateUpsertOne) SetEbikeID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateEbikeID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateEbikeID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeAllocateUpsertOne) SetBrandID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateBrandID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateBrandID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EbikeAllocateUpsertOne) SetSubscribeID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateSubscribeID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeAllocateUpsertOne) SetRiderID(v uint64) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateRiderID() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateRiderID()
	})
}

// SetStatus sets the "status" field.
func (u *EbikeAllocateUpsertOne) SetStatus(v uint8) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *EbikeAllocateUpsertOne) AddStatus(v uint8) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateStatus() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateStatus()
	})
}

// SetInfo sets the "info" field.
func (u *EbikeAllocateUpsertOne) SetInfo(v *model.EbikeAllocate) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateInfo() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateInfo()
	})
}

// SetTime sets the "time" field.
func (u *EbikeAllocateUpsertOne) SetTime(v time.Time) *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *EbikeAllocateUpsertOne) UpdateTime() *EbikeAllocateUpsertOne {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateTime()
	})
}

// Exec executes the query.
func (u *EbikeAllocateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeAllocateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeAllocateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EbikeAllocateUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EbikeAllocateUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EbikeAllocateCreateBulk is the builder for creating many EbikeAllocate entities in bulk.
type EbikeAllocateCreateBulk struct {
	config
	builders []*EbikeAllocateCreate
	conflict []sql.ConflictOption
}

// Save creates the EbikeAllocate entities in the database.
func (eacb *EbikeAllocateCreateBulk) Save(ctx context.Context) ([]*EbikeAllocate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eacb.builders))
	nodes := make([]*EbikeAllocate, len(eacb.builders))
	mutators := make([]Mutator, len(eacb.builders))
	for i := range eacb.builders {
		func(i int, root context.Context) {
			builder := eacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EbikeAllocateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eacb *EbikeAllocateCreateBulk) SaveX(ctx context.Context) []*EbikeAllocate {
	v, err := eacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eacb *EbikeAllocateCreateBulk) Exec(ctx context.Context) error {
	_, err := eacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eacb *EbikeAllocateCreateBulk) ExecX(ctx context.Context) {
	if err := eacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeAllocate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeAllocateUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (eacb *EbikeAllocateCreateBulk) OnConflict(opts ...sql.ConflictOption) *EbikeAllocateUpsertBulk {
	eacb.conflict = opts
	return &EbikeAllocateUpsertBulk{
		create: eacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (eacb *EbikeAllocateCreateBulk) OnConflictColumns(columns ...string) *EbikeAllocateUpsertBulk {
	eacb.conflict = append(eacb.conflict, sql.ConflictColumns(columns...))
	return &EbikeAllocateUpsertBulk{
		create: eacb,
	}
}

// EbikeAllocateUpsertBulk is the builder for "upsert"-ing
// a bulk of EbikeAllocate nodes.
type EbikeAllocateUpsertBulk struct {
	create *EbikeAllocateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeAllocateUpsertBulk) UpdateNewValues() *EbikeAllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeAllocate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EbikeAllocateUpsertBulk) Ignore() *EbikeAllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeAllocateUpsertBulk) DoNothing() *EbikeAllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeAllocateCreateBulk.OnConflict
// documentation for more info.
func (u *EbikeAllocateUpsertBulk) Update(set func(*EbikeAllocateUpsert)) *EbikeAllocateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeAllocateUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *EbikeAllocateUpsertBulk) SetEmployeeID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateEmployeeID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *EbikeAllocateUpsertBulk) SetStoreID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateStoreID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateStoreID()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *EbikeAllocateUpsertBulk) SetEbikeID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateEbikeID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateEbikeID()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeAllocateUpsertBulk) SetBrandID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateBrandID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateBrandID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *EbikeAllocateUpsertBulk) SetSubscribeID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateSubscribeID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EbikeAllocateUpsertBulk) SetRiderID(v uint64) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateRiderID() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateRiderID()
	})
}

// SetStatus sets the "status" field.
func (u *EbikeAllocateUpsertBulk) SetStatus(v uint8) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *EbikeAllocateUpsertBulk) AddStatus(v uint8) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateStatus() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateStatus()
	})
}

// SetInfo sets the "info" field.
func (u *EbikeAllocateUpsertBulk) SetInfo(v *model.EbikeAllocate) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetInfo(v)
	})
}

// UpdateInfo sets the "info" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateInfo() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateInfo()
	})
}

// SetTime sets the "time" field.
func (u *EbikeAllocateUpsertBulk) SetTime(v time.Time) *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *EbikeAllocateUpsertBulk) UpdateTime() *EbikeAllocateUpsertBulk {
	return u.Update(func(s *EbikeAllocateUpsert) {
		s.UpdateTime()
	})
}

// Exec executes the query.
func (u *EbikeAllocateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EbikeAllocateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeAllocateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeAllocateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
