// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
)

// EbikeBrandAttributeCreate is the builder for creating a EbikeBrandAttribute entity.
type EbikeBrandAttributeCreate struct {
	config
	mutation *EbikeBrandAttributeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ebac *EbikeBrandAttributeCreate) SetCreatedAt(t time.Time) *EbikeBrandAttributeCreate {
	ebac.mutation.SetCreatedAt(t)
	return ebac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ebac *EbikeBrandAttributeCreate) SetNillableCreatedAt(t *time.Time) *EbikeBrandAttributeCreate {
	if t != nil {
		ebac.SetCreatedAt(*t)
	}
	return ebac
}

// SetUpdatedAt sets the "updated_at" field.
func (ebac *EbikeBrandAttributeCreate) SetUpdatedAt(t time.Time) *EbikeBrandAttributeCreate {
	ebac.mutation.SetUpdatedAt(t)
	return ebac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ebac *EbikeBrandAttributeCreate) SetNillableUpdatedAt(t *time.Time) *EbikeBrandAttributeCreate {
	if t != nil {
		ebac.SetUpdatedAt(*t)
	}
	return ebac
}

// SetDeletedAt sets the "deleted_at" field.
func (ebac *EbikeBrandAttributeCreate) SetDeletedAt(t time.Time) *EbikeBrandAttributeCreate {
	ebac.mutation.SetDeletedAt(t)
	return ebac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebac *EbikeBrandAttributeCreate) SetNillableDeletedAt(t *time.Time) *EbikeBrandAttributeCreate {
	if t != nil {
		ebac.SetDeletedAt(*t)
	}
	return ebac
}

// SetCreator sets the "creator" field.
func (ebac *EbikeBrandAttributeCreate) SetCreator(m *model.Modifier) *EbikeBrandAttributeCreate {
	ebac.mutation.SetCreator(m)
	return ebac
}

// SetLastModifier sets the "last_modifier" field.
func (ebac *EbikeBrandAttributeCreate) SetLastModifier(m *model.Modifier) *EbikeBrandAttributeCreate {
	ebac.mutation.SetLastModifier(m)
	return ebac
}

// SetRemark sets the "remark" field.
func (ebac *EbikeBrandAttributeCreate) SetRemark(s string) *EbikeBrandAttributeCreate {
	ebac.mutation.SetRemark(s)
	return ebac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebac *EbikeBrandAttributeCreate) SetNillableRemark(s *string) *EbikeBrandAttributeCreate {
	if s != nil {
		ebac.SetRemark(*s)
	}
	return ebac
}

// SetName sets the "name" field.
func (ebac *EbikeBrandAttributeCreate) SetName(s string) *EbikeBrandAttributeCreate {
	ebac.mutation.SetName(s)
	return ebac
}

// SetValue sets the "value" field.
func (ebac *EbikeBrandAttributeCreate) SetValue(s string) *EbikeBrandAttributeCreate {
	ebac.mutation.SetValue(s)
	return ebac
}

// SetBrandID sets the "brand_id" field.
func (ebac *EbikeBrandAttributeCreate) SetBrandID(u uint64) *EbikeBrandAttributeCreate {
	ebac.mutation.SetBrandID(u)
	return ebac
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (ebac *EbikeBrandAttributeCreate) SetNillableBrandID(u *uint64) *EbikeBrandAttributeCreate {
	if u != nil {
		ebac.SetBrandID(*u)
	}
	return ebac
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ebac *EbikeBrandAttributeCreate) SetBrand(e *EbikeBrand) *EbikeBrandAttributeCreate {
	return ebac.SetBrandID(e.ID)
}

// Mutation returns the EbikeBrandAttributeMutation object of the builder.
func (ebac *EbikeBrandAttributeCreate) Mutation() *EbikeBrandAttributeMutation {
	return ebac.mutation
}

// Save creates the EbikeBrandAttribute in the database.
func (ebac *EbikeBrandAttributeCreate) Save(ctx context.Context) (*EbikeBrandAttribute, error) {
	if err := ebac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ebac.sqlSave, ebac.mutation, ebac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ebac *EbikeBrandAttributeCreate) SaveX(ctx context.Context) *EbikeBrandAttribute {
	v, err := ebac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebac *EbikeBrandAttributeCreate) Exec(ctx context.Context) error {
	_, err := ebac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebac *EbikeBrandAttributeCreate) ExecX(ctx context.Context) {
	if err := ebac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebac *EbikeBrandAttributeCreate) defaults() error {
	if _, ok := ebac.mutation.CreatedAt(); !ok {
		if ebikebrandattribute.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrandattribute.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrandattribute.DefaultCreatedAt()
		ebac.mutation.SetCreatedAt(v)
	}
	if _, ok := ebac.mutation.UpdatedAt(); !ok {
		if ebikebrandattribute.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrandattribute.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrandattribute.DefaultUpdatedAt()
		ebac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ebac *EbikeBrandAttributeCreate) check() error {
	if _, ok := ebac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EbikeBrandAttribute.created_at"`)}
	}
	if _, ok := ebac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EbikeBrandAttribute.updated_at"`)}
	}
	if _, ok := ebac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EbikeBrandAttribute.name"`)}
	}
	if _, ok := ebac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "EbikeBrandAttribute.value"`)}
	}
	return nil
}

func (ebac *EbikeBrandAttributeCreate) sqlSave(ctx context.Context) (*EbikeBrandAttribute, error) {
	if err := ebac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ebac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ebac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ebac.mutation.id = &_node.ID
	ebac.mutation.done = true
	return _node, nil
}

func (ebac *EbikeBrandAttributeCreate) createSpec() (*EbikeBrandAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &EbikeBrandAttribute{config: ebac.config}
		_spec = sqlgraph.NewCreateSpec(ebikebrandattribute.Table, sqlgraph.NewFieldSpec(ebikebrandattribute.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ebac.conflict
	if value, ok := ebac.mutation.CreatedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ebac.mutation.UpdatedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ebac.mutation.DeletedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ebac.mutation.Creator(); ok {
		_spec.SetField(ebikebrandattribute.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ebac.mutation.LastModifier(); ok {
		_spec.SetField(ebikebrandattribute.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ebac.mutation.Remark(); ok {
		_spec.SetField(ebikebrandattribute.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ebac.mutation.Name(); ok {
		_spec.SetField(ebikebrandattribute.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ebac.mutation.Value(); ok {
		_spec.SetField(ebikebrandattribute.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := ebac.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ebikebrandattribute.BrandTable,
			Columns: []string{ebikebrandattribute.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeBrandAttribute.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeBrandAttributeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebac *EbikeBrandAttributeCreate) OnConflict(opts ...sql.ConflictOption) *EbikeBrandAttributeUpsertOne {
	ebac.conflict = opts
	return &EbikeBrandAttributeUpsertOne{
		create: ebac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebac *EbikeBrandAttributeCreate) OnConflictColumns(columns ...string) *EbikeBrandAttributeUpsertOne {
	ebac.conflict = append(ebac.conflict, sql.ConflictColumns(columns...))
	return &EbikeBrandAttributeUpsertOne{
		create: ebac,
	}
}

type (
	// EbikeBrandAttributeUpsertOne is the builder for "upsert"-ing
	//  one EbikeBrandAttribute node.
	EbikeBrandAttributeUpsertOne struct {
		create *EbikeBrandAttributeCreate
	}

	// EbikeBrandAttributeUpsert is the "OnConflict" setter.
	EbikeBrandAttributeUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandAttributeUpsert) SetUpdatedAt(v time.Time) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateUpdatedAt() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandAttributeUpsert) SetDeletedAt(v time.Time) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateDeletedAt() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandAttributeUpsert) ClearDeletedAt() *EbikeBrandAttributeUpsert {
	u.SetNull(ebikebrandattribute.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandAttributeUpsert) SetLastModifier(v *model.Modifier) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateLastModifier() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandAttributeUpsert) ClearLastModifier() *EbikeBrandAttributeUpsert {
	u.SetNull(ebikebrandattribute.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandAttributeUpsert) SetRemark(v string) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateRemark() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandAttributeUpsert) ClearRemark() *EbikeBrandAttributeUpsert {
	u.SetNull(ebikebrandattribute.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *EbikeBrandAttributeUpsert) SetName(v string) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateName() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldName)
	return u
}

// SetValue sets the "value" field.
func (u *EbikeBrandAttributeUpsert) SetValue(v string) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateValue() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldValue)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeBrandAttributeUpsert) SetBrandID(v uint64) *EbikeBrandAttributeUpsert {
	u.Set(ebikebrandattribute.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsert) UpdateBrandID() *EbikeBrandAttributeUpsert {
	u.SetExcluded(ebikebrandattribute.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EbikeBrandAttributeUpsert) ClearBrandID() *EbikeBrandAttributeUpsert {
	u.SetNull(ebikebrandattribute.FieldBrandID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeBrandAttributeUpsertOne) UpdateNewValues() *EbikeBrandAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ebikebrandattribute.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(ebikebrandattribute.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EbikeBrandAttributeUpsertOne) Ignore() *EbikeBrandAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeBrandAttributeUpsertOne) DoNothing() *EbikeBrandAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeBrandAttributeCreate.OnConflict
// documentation for more info.
func (u *EbikeBrandAttributeUpsertOne) Update(set func(*EbikeBrandAttributeUpsert)) *EbikeBrandAttributeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeBrandAttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandAttributeUpsertOne) SetUpdatedAt(v time.Time) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateUpdatedAt() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandAttributeUpsertOne) SetDeletedAt(v time.Time) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateDeletedAt() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandAttributeUpsertOne) ClearDeletedAt() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandAttributeUpsertOne) SetLastModifier(v *model.Modifier) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateLastModifier() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandAttributeUpsertOne) ClearLastModifier() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandAttributeUpsertOne) SetRemark(v string) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateRemark() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandAttributeUpsertOne) ClearRemark() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *EbikeBrandAttributeUpsertOne) SetName(v string) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateName() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *EbikeBrandAttributeUpsertOne) SetValue(v string) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateValue() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateValue()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeBrandAttributeUpsertOne) SetBrandID(v uint64) *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertOne) UpdateBrandID() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EbikeBrandAttributeUpsertOne) ClearBrandID() *EbikeBrandAttributeUpsertOne {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearBrandID()
	})
}

// Exec executes the query.
func (u *EbikeBrandAttributeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeBrandAttributeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeBrandAttributeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EbikeBrandAttributeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EbikeBrandAttributeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EbikeBrandAttributeCreateBulk is the builder for creating many EbikeBrandAttribute entities in bulk.
type EbikeBrandAttributeCreateBulk struct {
	config
	err      error
	builders []*EbikeBrandAttributeCreate
	conflict []sql.ConflictOption
}

// Save creates the EbikeBrandAttribute entities in the database.
func (ebacb *EbikeBrandAttributeCreateBulk) Save(ctx context.Context) ([]*EbikeBrandAttribute, error) {
	if ebacb.err != nil {
		return nil, ebacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ebacb.builders))
	nodes := make([]*EbikeBrandAttribute, len(ebacb.builders))
	mutators := make([]Mutator, len(ebacb.builders))
	for i := range ebacb.builders {
		func(i int, root context.Context) {
			builder := ebacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EbikeBrandAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ebacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ebacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ebacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ebacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ebacb *EbikeBrandAttributeCreateBulk) SaveX(ctx context.Context) []*EbikeBrandAttribute {
	v, err := ebacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebacb *EbikeBrandAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := ebacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebacb *EbikeBrandAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := ebacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeBrandAttribute.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeBrandAttributeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebacb *EbikeBrandAttributeCreateBulk) OnConflict(opts ...sql.ConflictOption) *EbikeBrandAttributeUpsertBulk {
	ebacb.conflict = opts
	return &EbikeBrandAttributeUpsertBulk{
		create: ebacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebacb *EbikeBrandAttributeCreateBulk) OnConflictColumns(columns ...string) *EbikeBrandAttributeUpsertBulk {
	ebacb.conflict = append(ebacb.conflict, sql.ConflictColumns(columns...))
	return &EbikeBrandAttributeUpsertBulk{
		create: ebacb,
	}
}

// EbikeBrandAttributeUpsertBulk is the builder for "upsert"-ing
// a bulk of EbikeBrandAttribute nodes.
type EbikeBrandAttributeUpsertBulk struct {
	create *EbikeBrandAttributeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeBrandAttributeUpsertBulk) UpdateNewValues() *EbikeBrandAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ebikebrandattribute.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(ebikebrandattribute.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeBrandAttribute.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EbikeBrandAttributeUpsertBulk) Ignore() *EbikeBrandAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeBrandAttributeUpsertBulk) DoNothing() *EbikeBrandAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeBrandAttributeCreateBulk.OnConflict
// documentation for more info.
func (u *EbikeBrandAttributeUpsertBulk) Update(set func(*EbikeBrandAttributeUpsert)) *EbikeBrandAttributeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeBrandAttributeUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandAttributeUpsertBulk) SetUpdatedAt(v time.Time) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateUpdatedAt() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandAttributeUpsertBulk) SetDeletedAt(v time.Time) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateDeletedAt() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandAttributeUpsertBulk) ClearDeletedAt() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandAttributeUpsertBulk) SetLastModifier(v *model.Modifier) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateLastModifier() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandAttributeUpsertBulk) ClearLastModifier() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandAttributeUpsertBulk) SetRemark(v string) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateRemark() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandAttributeUpsertBulk) ClearRemark() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *EbikeBrandAttributeUpsertBulk) SetName(v string) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateName() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *EbikeBrandAttributeUpsertBulk) SetValue(v string) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateValue() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateValue()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *EbikeBrandAttributeUpsertBulk) SetBrandID(v uint64) *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *EbikeBrandAttributeUpsertBulk) UpdateBrandID() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *EbikeBrandAttributeUpsertBulk) ClearBrandID() *EbikeBrandAttributeUpsertBulk {
	return u.Update(func(s *EbikeBrandAttributeUpsert) {
		s.ClearBrandID()
	})
}

// Exec executes the query.
func (u *EbikeBrandAttributeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EbikeBrandAttributeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeBrandAttributeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeBrandAttributeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
