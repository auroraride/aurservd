// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
)

// AssetRole is the model entity for the AssetRole schema.
type AssetRole struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 角色
	Name string `json:"name,omitempty"`
	// 权限列表
	Permissions []string `json:"permissions,omitempty"`
	// 是否内置角色
	Buildin bool `json:"buildin,omitempty"`
	// 是否超级管理员
	Super bool `json:"super,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetRoleQuery when eager-loading is set.
	Edges        AssetRoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetRoleEdges holds the relations/edges for other nodes in the graph.
type AssetRoleEdges struct {
	// AssetManagers holds the value of the asset_managers edge.
	AssetManagers []*AssetManager `json:"asset_managers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetManagersOrErr returns the AssetManagers value or an error if the edge
// was not loaded in eager-loading.
func (e AssetRoleEdges) AssetManagersOrErr() ([]*AssetManager, error) {
	if e.loadedTypes[0] {
		return e.AssetManagers, nil
	}
	return nil, &NotLoadedError{edge: "asset_managers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetRole) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetrole.FieldPermissions:
			values[i] = new([]byte)
		case assetrole.FieldBuildin, assetrole.FieldSuper:
			values[i] = new(sql.NullBool)
		case assetrole.FieldID:
			values[i] = new(sql.NullInt64)
		case assetrole.FieldName:
			values[i] = new(sql.NullString)
		case assetrole.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetRole fields.
func (ar *AssetRole) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = uint64(value.Int64)
		case assetrole.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case assetrole.FieldPermissions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ar.Permissions); err != nil {
					return fmt.Errorf("unmarshal field permissions: %w", err)
				}
			}
		case assetrole.FieldBuildin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field buildin", values[i])
			} else if value.Valid {
				ar.Buildin = value.Bool
			}
		case assetrole.FieldSuper:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field super", values[i])
			} else if value.Valid {
				ar.Super = value.Bool
			}
		case assetrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetRole.
// This includes values selected through modifiers, order, etc.
func (ar *AssetRole) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryAssetManagers queries the "asset_managers" edge of the AssetRole entity.
func (ar *AssetRole) QueryAssetManagers() *AssetManagerQuery {
	return NewAssetRoleClient(ar.config).QueryAssetManagers(ar)
}

// Update returns a builder for updating this AssetRole.
// Note that you need to call AssetRole.Unwrap() before calling this method if this AssetRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AssetRole) Update() *AssetRoleUpdateOne {
	return NewAssetRoleClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AssetRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AssetRole) Unwrap() *AssetRole {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetRole is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AssetRole) String() string {
	var builder strings.Builder
	builder.WriteString("AssetRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(fmt.Sprintf("%v", ar.Permissions))
	builder.WriteString(", ")
	builder.WriteString("buildin=")
	builder.WriteString(fmt.Sprintf("%v", ar.Buildin))
	builder.WriteString(", ")
	builder.WriteString("super=")
	builder.WriteString(fmt.Sprintf("%v", ar.Super))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AssetRoles is a parsable slice of AssetRole.
type AssetRoles []*AssetRole
