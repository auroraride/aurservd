// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/riderphonedevice"
)

// RiderPhoneDeviceCreate is the builder for creating a RiderPhoneDevice entity.
type RiderPhoneDeviceCreate struct {
	config
	mutation *RiderPhoneDeviceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rpdc *RiderPhoneDeviceCreate) SetCreatedAt(t time.Time) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetCreatedAt(t)
	return rpdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableCreatedAt(t *time.Time) *RiderPhoneDeviceCreate {
	if t != nil {
		rpdc.SetCreatedAt(*t)
	}
	return rpdc
}

// SetUpdatedAt sets the "updated_at" field.
func (rpdc *RiderPhoneDeviceCreate) SetUpdatedAt(t time.Time) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetUpdatedAt(t)
	return rpdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableUpdatedAt(t *time.Time) *RiderPhoneDeviceCreate {
	if t != nil {
		rpdc.SetUpdatedAt(*t)
	}
	return rpdc
}

// SetDeletedAt sets the "deleted_at" field.
func (rpdc *RiderPhoneDeviceCreate) SetDeletedAt(t time.Time) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetDeletedAt(t)
	return rpdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableDeletedAt(t *time.Time) *RiderPhoneDeviceCreate {
	if t != nil {
		rpdc.SetDeletedAt(*t)
	}
	return rpdc
}

// SetDeviceSn sets the "device_sn" field.
func (rpdc *RiderPhoneDeviceCreate) SetDeviceSn(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetDeviceSn(s)
	return rpdc
}

// SetNillableDeviceSn sets the "device_sn" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableDeviceSn(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetDeviceSn(*s)
	}
	return rpdc
}

// SetModel sets the "model" field.
func (rpdc *RiderPhoneDeviceCreate) SetModel(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetModel(s)
	return rpdc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableModel(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetModel(*s)
	}
	return rpdc
}

// SetBrand sets the "brand" field.
func (rpdc *RiderPhoneDeviceCreate) SetBrand(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetBrand(s)
	return rpdc
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableBrand(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetBrand(*s)
	}
	return rpdc
}

// SetOsVersion sets the "os_version" field.
func (rpdc *RiderPhoneDeviceCreate) SetOsVersion(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetOsVersion(s)
	return rpdc
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableOsVersion(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetOsVersion(*s)
	}
	return rpdc
}

// SetOsName sets the "os_name" field.
func (rpdc *RiderPhoneDeviceCreate) SetOsName(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetOsName(s)
	return rpdc
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableOsName(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetOsName(*s)
	}
	return rpdc
}

// SetScreenWidth sets the "screen_width" field.
func (rpdc *RiderPhoneDeviceCreate) SetScreenWidth(u uint64) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetScreenWidth(u)
	return rpdc
}

// SetNillableScreenWidth sets the "screen_width" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableScreenWidth(u *uint64) *RiderPhoneDeviceCreate {
	if u != nil {
		rpdc.SetScreenWidth(*u)
	}
	return rpdc
}

// SetScreenHeight sets the "screen_height" field.
func (rpdc *RiderPhoneDeviceCreate) SetScreenHeight(u uint64) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetScreenHeight(u)
	return rpdc
}

// SetNillableScreenHeight sets the "screen_height" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableScreenHeight(u *uint64) *RiderPhoneDeviceCreate {
	if u != nil {
		rpdc.SetScreenHeight(*u)
	}
	return rpdc
}

// SetImei sets the "imei" field.
func (rpdc *RiderPhoneDeviceCreate) SetImei(s string) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetImei(s)
	return rpdc
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (rpdc *RiderPhoneDeviceCreate) SetNillableImei(s *string) *RiderPhoneDeviceCreate {
	if s != nil {
		rpdc.SetImei(*s)
	}
	return rpdc
}

// SetRiderID sets the "rider_id" field.
func (rpdc *RiderPhoneDeviceCreate) SetRiderID(u uint64) *RiderPhoneDeviceCreate {
	rpdc.mutation.SetRiderID(u)
	return rpdc
}

// Mutation returns the RiderPhoneDeviceMutation object of the builder.
func (rpdc *RiderPhoneDeviceCreate) Mutation() *RiderPhoneDeviceMutation {
	return rpdc.mutation
}

// Save creates the RiderPhoneDevice in the database.
func (rpdc *RiderPhoneDeviceCreate) Save(ctx context.Context) (*RiderPhoneDevice, error) {
	rpdc.defaults()
	return withHooks(ctx, rpdc.sqlSave, rpdc.mutation, rpdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rpdc *RiderPhoneDeviceCreate) SaveX(ctx context.Context) *RiderPhoneDevice {
	v, err := rpdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpdc *RiderPhoneDeviceCreate) Exec(ctx context.Context) error {
	_, err := rpdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdc *RiderPhoneDeviceCreate) ExecX(ctx context.Context) {
	if err := rpdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdc *RiderPhoneDeviceCreate) defaults() {
	if _, ok := rpdc.mutation.CreatedAt(); !ok {
		v := riderphonedevice.DefaultCreatedAt()
		rpdc.mutation.SetCreatedAt(v)
	}
	if _, ok := rpdc.mutation.UpdatedAt(); !ok {
		v := riderphonedevice.DefaultUpdatedAt()
		rpdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpdc *RiderPhoneDeviceCreate) check() error {
	if _, ok := rpdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RiderPhoneDevice.created_at"`)}
	}
	if _, ok := rpdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RiderPhoneDevice.updated_at"`)}
	}
	if _, ok := rpdc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "RiderPhoneDevice.rider_id"`)}
	}
	return nil
}

func (rpdc *RiderPhoneDeviceCreate) sqlSave(ctx context.Context) (*RiderPhoneDevice, error) {
	if err := rpdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rpdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rpdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	rpdc.mutation.id = &_node.ID
	rpdc.mutation.done = true
	return _node, nil
}

func (rpdc *RiderPhoneDeviceCreate) createSpec() (*RiderPhoneDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &RiderPhoneDevice{config: rpdc.config}
		_spec = sqlgraph.NewCreateSpec(riderphonedevice.Table, sqlgraph.NewFieldSpec(riderphonedevice.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = rpdc.conflict
	if value, ok := rpdc.mutation.CreatedAt(); ok {
		_spec.SetField(riderphonedevice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rpdc.mutation.UpdatedAt(); ok {
		_spec.SetField(riderphonedevice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rpdc.mutation.DeletedAt(); ok {
		_spec.SetField(riderphonedevice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rpdc.mutation.DeviceSn(); ok {
		_spec.SetField(riderphonedevice.FieldDeviceSn, field.TypeString, value)
		_node.DeviceSn = value
	}
	if value, ok := rpdc.mutation.Model(); ok {
		_spec.SetField(riderphonedevice.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := rpdc.mutation.Brand(); ok {
		_spec.SetField(riderphonedevice.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := rpdc.mutation.OsVersion(); ok {
		_spec.SetField(riderphonedevice.FieldOsVersion, field.TypeString, value)
		_node.OsVersion = value
	}
	if value, ok := rpdc.mutation.OsName(); ok {
		_spec.SetField(riderphonedevice.FieldOsName, field.TypeString, value)
		_node.OsName = value
	}
	if value, ok := rpdc.mutation.ScreenWidth(); ok {
		_spec.SetField(riderphonedevice.FieldScreenWidth, field.TypeUint64, value)
		_node.ScreenWidth = value
	}
	if value, ok := rpdc.mutation.ScreenHeight(); ok {
		_spec.SetField(riderphonedevice.FieldScreenHeight, field.TypeUint64, value)
		_node.ScreenHeight = value
	}
	if value, ok := rpdc.mutation.Imei(); ok {
		_spec.SetField(riderphonedevice.FieldImei, field.TypeString, value)
		_node.Imei = value
	}
	if value, ok := rpdc.mutation.RiderID(); ok {
		_spec.SetField(riderphonedevice.FieldRiderID, field.TypeUint64, value)
		_node.RiderID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RiderPhoneDevice.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderPhoneDeviceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rpdc *RiderPhoneDeviceCreate) OnConflict(opts ...sql.ConflictOption) *RiderPhoneDeviceUpsertOne {
	rpdc.conflict = opts
	return &RiderPhoneDeviceUpsertOne{
		create: rpdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpdc *RiderPhoneDeviceCreate) OnConflictColumns(columns ...string) *RiderPhoneDeviceUpsertOne {
	rpdc.conflict = append(rpdc.conflict, sql.ConflictColumns(columns...))
	return &RiderPhoneDeviceUpsertOne{
		create: rpdc,
	}
}

type (
	// RiderPhoneDeviceUpsertOne is the builder for "upsert"-ing
	//  one RiderPhoneDevice node.
	RiderPhoneDeviceUpsertOne struct {
		create *RiderPhoneDeviceCreate
	}

	// RiderPhoneDeviceUpsert is the "OnConflict" setter.
	RiderPhoneDeviceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderPhoneDeviceUpsert) SetUpdatedAt(v time.Time) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateUpdatedAt() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderPhoneDeviceUpsert) SetDeletedAt(v time.Time) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateDeletedAt() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderPhoneDeviceUpsert) ClearDeletedAt() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldDeletedAt)
	return u
}

// SetDeviceSn sets the "device_sn" field.
func (u *RiderPhoneDeviceUpsert) SetDeviceSn(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldDeviceSn, v)
	return u
}

// UpdateDeviceSn sets the "device_sn" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateDeviceSn() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldDeviceSn)
	return u
}

// ClearDeviceSn clears the value of the "device_sn" field.
func (u *RiderPhoneDeviceUpsert) ClearDeviceSn() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldDeviceSn)
	return u
}

// SetModel sets the "model" field.
func (u *RiderPhoneDeviceUpsert) SetModel(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateModel() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *RiderPhoneDeviceUpsert) ClearModel() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldModel)
	return u
}

// SetBrand sets the "brand" field.
func (u *RiderPhoneDeviceUpsert) SetBrand(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldBrand, v)
	return u
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateBrand() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldBrand)
	return u
}

// ClearBrand clears the value of the "brand" field.
func (u *RiderPhoneDeviceUpsert) ClearBrand() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldBrand)
	return u
}

// SetOsVersion sets the "os_version" field.
func (u *RiderPhoneDeviceUpsert) SetOsVersion(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldOsVersion, v)
	return u
}

// UpdateOsVersion sets the "os_version" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateOsVersion() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldOsVersion)
	return u
}

// ClearOsVersion clears the value of the "os_version" field.
func (u *RiderPhoneDeviceUpsert) ClearOsVersion() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldOsVersion)
	return u
}

// SetOsName sets the "os_name" field.
func (u *RiderPhoneDeviceUpsert) SetOsName(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldOsName, v)
	return u
}

// UpdateOsName sets the "os_name" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateOsName() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldOsName)
	return u
}

// ClearOsName clears the value of the "os_name" field.
func (u *RiderPhoneDeviceUpsert) ClearOsName() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldOsName)
	return u
}

// SetScreenWidth sets the "screen_width" field.
func (u *RiderPhoneDeviceUpsert) SetScreenWidth(v uint64) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldScreenWidth, v)
	return u
}

// UpdateScreenWidth sets the "screen_width" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateScreenWidth() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldScreenWidth)
	return u
}

// AddScreenWidth adds v to the "screen_width" field.
func (u *RiderPhoneDeviceUpsert) AddScreenWidth(v uint64) *RiderPhoneDeviceUpsert {
	u.Add(riderphonedevice.FieldScreenWidth, v)
	return u
}

// ClearScreenWidth clears the value of the "screen_width" field.
func (u *RiderPhoneDeviceUpsert) ClearScreenWidth() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldScreenWidth)
	return u
}

// SetScreenHeight sets the "screen_height" field.
func (u *RiderPhoneDeviceUpsert) SetScreenHeight(v uint64) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldScreenHeight, v)
	return u
}

// UpdateScreenHeight sets the "screen_height" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateScreenHeight() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldScreenHeight)
	return u
}

// AddScreenHeight adds v to the "screen_height" field.
func (u *RiderPhoneDeviceUpsert) AddScreenHeight(v uint64) *RiderPhoneDeviceUpsert {
	u.Add(riderphonedevice.FieldScreenHeight, v)
	return u
}

// ClearScreenHeight clears the value of the "screen_height" field.
func (u *RiderPhoneDeviceUpsert) ClearScreenHeight() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldScreenHeight)
	return u
}

// SetImei sets the "imei" field.
func (u *RiderPhoneDeviceUpsert) SetImei(v string) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldImei, v)
	return u
}

// UpdateImei sets the "imei" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateImei() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldImei)
	return u
}

// ClearImei clears the value of the "imei" field.
func (u *RiderPhoneDeviceUpsert) ClearImei() *RiderPhoneDeviceUpsert {
	u.SetNull(riderphonedevice.FieldImei)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *RiderPhoneDeviceUpsert) SetRiderID(v uint64) *RiderPhoneDeviceUpsert {
	u.Set(riderphonedevice.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsert) UpdateRiderID() *RiderPhoneDeviceUpsert {
	u.SetExcluded(riderphonedevice.FieldRiderID)
	return u
}

// AddRiderID adds v to the "rider_id" field.
func (u *RiderPhoneDeviceUpsert) AddRiderID(v uint64) *RiderPhoneDeviceUpsert {
	u.Add(riderphonedevice.FieldRiderID, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderPhoneDeviceUpsertOne) UpdateNewValues() *RiderPhoneDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(riderphonedevice.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RiderPhoneDeviceUpsertOne) Ignore() *RiderPhoneDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderPhoneDeviceUpsertOne) DoNothing() *RiderPhoneDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderPhoneDeviceCreate.OnConflict
// documentation for more info.
func (u *RiderPhoneDeviceUpsertOne) Update(set func(*RiderPhoneDeviceUpsert)) *RiderPhoneDeviceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderPhoneDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderPhoneDeviceUpsertOne) SetUpdatedAt(v time.Time) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateUpdatedAt() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderPhoneDeviceUpsertOne) SetDeletedAt(v time.Time) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateDeletedAt() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderPhoneDeviceUpsertOne) ClearDeletedAt() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetDeviceSn sets the "device_sn" field.
func (u *RiderPhoneDeviceUpsertOne) SetDeviceSn(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetDeviceSn(v)
	})
}

// UpdateDeviceSn sets the "device_sn" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateDeviceSn() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateDeviceSn()
	})
}

// ClearDeviceSn clears the value of the "device_sn" field.
func (u *RiderPhoneDeviceUpsertOne) ClearDeviceSn() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearDeviceSn()
	})
}

// SetModel sets the "model" field.
func (u *RiderPhoneDeviceUpsertOne) SetModel(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateModel() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *RiderPhoneDeviceUpsertOne) ClearModel() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearModel()
	})
}

// SetBrand sets the "brand" field.
func (u *RiderPhoneDeviceUpsertOne) SetBrand(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateBrand() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateBrand()
	})
}

// ClearBrand clears the value of the "brand" field.
func (u *RiderPhoneDeviceUpsertOne) ClearBrand() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearBrand()
	})
}

// SetOsVersion sets the "os_version" field.
func (u *RiderPhoneDeviceUpsertOne) SetOsVersion(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetOsVersion(v)
	})
}

// UpdateOsVersion sets the "os_version" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateOsVersion() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateOsVersion()
	})
}

// ClearOsVersion clears the value of the "os_version" field.
func (u *RiderPhoneDeviceUpsertOne) ClearOsVersion() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearOsVersion()
	})
}

// SetOsName sets the "os_name" field.
func (u *RiderPhoneDeviceUpsertOne) SetOsName(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetOsName(v)
	})
}

// UpdateOsName sets the "os_name" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateOsName() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateOsName()
	})
}

// ClearOsName clears the value of the "os_name" field.
func (u *RiderPhoneDeviceUpsertOne) ClearOsName() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearOsName()
	})
}

// SetScreenWidth sets the "screen_width" field.
func (u *RiderPhoneDeviceUpsertOne) SetScreenWidth(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetScreenWidth(v)
	})
}

// AddScreenWidth adds v to the "screen_width" field.
func (u *RiderPhoneDeviceUpsertOne) AddScreenWidth(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddScreenWidth(v)
	})
}

// UpdateScreenWidth sets the "screen_width" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateScreenWidth() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateScreenWidth()
	})
}

// ClearScreenWidth clears the value of the "screen_width" field.
func (u *RiderPhoneDeviceUpsertOne) ClearScreenWidth() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearScreenWidth()
	})
}

// SetScreenHeight sets the "screen_height" field.
func (u *RiderPhoneDeviceUpsertOne) SetScreenHeight(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetScreenHeight(v)
	})
}

// AddScreenHeight adds v to the "screen_height" field.
func (u *RiderPhoneDeviceUpsertOne) AddScreenHeight(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddScreenHeight(v)
	})
}

// UpdateScreenHeight sets the "screen_height" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateScreenHeight() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateScreenHeight()
	})
}

// ClearScreenHeight clears the value of the "screen_height" field.
func (u *RiderPhoneDeviceUpsertOne) ClearScreenHeight() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearScreenHeight()
	})
}

// SetImei sets the "imei" field.
func (u *RiderPhoneDeviceUpsertOne) SetImei(v string) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetImei(v)
	})
}

// UpdateImei sets the "imei" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateImei() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateImei()
	})
}

// ClearImei clears the value of the "imei" field.
func (u *RiderPhoneDeviceUpsertOne) ClearImei() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearImei()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *RiderPhoneDeviceUpsertOne) SetRiderID(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetRiderID(v)
	})
}

// AddRiderID adds v to the "rider_id" field.
func (u *RiderPhoneDeviceUpsertOne) AddRiderID(v uint64) *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertOne) UpdateRiderID() *RiderPhoneDeviceUpsertOne {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateRiderID()
	})
}

// Exec executes the query.
func (u *RiderPhoneDeviceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderPhoneDeviceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderPhoneDeviceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RiderPhoneDeviceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RiderPhoneDeviceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RiderPhoneDeviceCreateBulk is the builder for creating many RiderPhoneDevice entities in bulk.
type RiderPhoneDeviceCreateBulk struct {
	config
	err      error
	builders []*RiderPhoneDeviceCreate
	conflict []sql.ConflictOption
}

// Save creates the RiderPhoneDevice entities in the database.
func (rpdcb *RiderPhoneDeviceCreateBulk) Save(ctx context.Context) ([]*RiderPhoneDevice, error) {
	if rpdcb.err != nil {
		return nil, rpdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rpdcb.builders))
	nodes := make([]*RiderPhoneDevice, len(rpdcb.builders))
	mutators := make([]Mutator, len(rpdcb.builders))
	for i := range rpdcb.builders {
		func(i int, root context.Context) {
			builder := rpdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiderPhoneDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rpdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rpdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rpdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rpdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rpdcb *RiderPhoneDeviceCreateBulk) SaveX(ctx context.Context) []*RiderPhoneDevice {
	v, err := rpdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rpdcb *RiderPhoneDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := rpdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdcb *RiderPhoneDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := rpdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RiderPhoneDevice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderPhoneDeviceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rpdcb *RiderPhoneDeviceCreateBulk) OnConflict(opts ...sql.ConflictOption) *RiderPhoneDeviceUpsertBulk {
	rpdcb.conflict = opts
	return &RiderPhoneDeviceUpsertBulk{
		create: rpdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rpdcb *RiderPhoneDeviceCreateBulk) OnConflictColumns(columns ...string) *RiderPhoneDeviceUpsertBulk {
	rpdcb.conflict = append(rpdcb.conflict, sql.ConflictColumns(columns...))
	return &RiderPhoneDeviceUpsertBulk{
		create: rpdcb,
	}
}

// RiderPhoneDeviceUpsertBulk is the builder for "upsert"-ing
// a bulk of RiderPhoneDevice nodes.
type RiderPhoneDeviceUpsertBulk struct {
	create *RiderPhoneDeviceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderPhoneDeviceUpsertBulk) UpdateNewValues() *RiderPhoneDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(riderphonedevice.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RiderPhoneDevice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RiderPhoneDeviceUpsertBulk) Ignore() *RiderPhoneDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderPhoneDeviceUpsertBulk) DoNothing() *RiderPhoneDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderPhoneDeviceCreateBulk.OnConflict
// documentation for more info.
func (u *RiderPhoneDeviceUpsertBulk) Update(set func(*RiderPhoneDeviceUpsert)) *RiderPhoneDeviceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderPhoneDeviceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderPhoneDeviceUpsertBulk) SetUpdatedAt(v time.Time) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateUpdatedAt() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderPhoneDeviceUpsertBulk) SetDeletedAt(v time.Time) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateDeletedAt() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearDeletedAt() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetDeviceSn sets the "device_sn" field.
func (u *RiderPhoneDeviceUpsertBulk) SetDeviceSn(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetDeviceSn(v)
	})
}

// UpdateDeviceSn sets the "device_sn" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateDeviceSn() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateDeviceSn()
	})
}

// ClearDeviceSn clears the value of the "device_sn" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearDeviceSn() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearDeviceSn()
	})
}

// SetModel sets the "model" field.
func (u *RiderPhoneDeviceUpsertBulk) SetModel(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateModel() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearModel() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearModel()
	})
}

// SetBrand sets the "brand" field.
func (u *RiderPhoneDeviceUpsertBulk) SetBrand(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateBrand() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateBrand()
	})
}

// ClearBrand clears the value of the "brand" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearBrand() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearBrand()
	})
}

// SetOsVersion sets the "os_version" field.
func (u *RiderPhoneDeviceUpsertBulk) SetOsVersion(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetOsVersion(v)
	})
}

// UpdateOsVersion sets the "os_version" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateOsVersion() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateOsVersion()
	})
}

// ClearOsVersion clears the value of the "os_version" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearOsVersion() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearOsVersion()
	})
}

// SetOsName sets the "os_name" field.
func (u *RiderPhoneDeviceUpsertBulk) SetOsName(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetOsName(v)
	})
}

// UpdateOsName sets the "os_name" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateOsName() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateOsName()
	})
}

// ClearOsName clears the value of the "os_name" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearOsName() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearOsName()
	})
}

// SetScreenWidth sets the "screen_width" field.
func (u *RiderPhoneDeviceUpsertBulk) SetScreenWidth(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetScreenWidth(v)
	})
}

// AddScreenWidth adds v to the "screen_width" field.
func (u *RiderPhoneDeviceUpsertBulk) AddScreenWidth(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddScreenWidth(v)
	})
}

// UpdateScreenWidth sets the "screen_width" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateScreenWidth() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateScreenWidth()
	})
}

// ClearScreenWidth clears the value of the "screen_width" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearScreenWidth() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearScreenWidth()
	})
}

// SetScreenHeight sets the "screen_height" field.
func (u *RiderPhoneDeviceUpsertBulk) SetScreenHeight(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetScreenHeight(v)
	})
}

// AddScreenHeight adds v to the "screen_height" field.
func (u *RiderPhoneDeviceUpsertBulk) AddScreenHeight(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddScreenHeight(v)
	})
}

// UpdateScreenHeight sets the "screen_height" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateScreenHeight() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateScreenHeight()
	})
}

// ClearScreenHeight clears the value of the "screen_height" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearScreenHeight() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearScreenHeight()
	})
}

// SetImei sets the "imei" field.
func (u *RiderPhoneDeviceUpsertBulk) SetImei(v string) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetImei(v)
	})
}

// UpdateImei sets the "imei" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateImei() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateImei()
	})
}

// ClearImei clears the value of the "imei" field.
func (u *RiderPhoneDeviceUpsertBulk) ClearImei() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.ClearImei()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *RiderPhoneDeviceUpsertBulk) SetRiderID(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.SetRiderID(v)
	})
}

// AddRiderID adds v to the "rider_id" field.
func (u *RiderPhoneDeviceUpsertBulk) AddRiderID(v uint64) *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.AddRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *RiderPhoneDeviceUpsertBulk) UpdateRiderID() *RiderPhoneDeviceUpsertBulk {
	return u.Update(func(s *RiderPhoneDeviceUpsert) {
		s.UpdateRiderID()
	})
}

// Exec executes the query.
func (u *RiderPhoneDeviceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RiderPhoneDeviceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderPhoneDeviceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderPhoneDeviceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
