// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
)

// Goods is the model entity for the Goods schema.
type Goods struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 商品编号
	Sn string `json:"sn,omitempty"`
	// 商品名称
	Name string `json:"name,omitempty"`
	// 商品类别 1:电车
	Type uint8 `json:"type,omitempty"`
	// 商品标签
	Lables []string `json:"lables,omitempty"`
	// 商品价格
	Price float64 `json:"price,omitempty"`
	// 商品权重
	Weight int `json:"weight,omitempty"`
	// 列表头图
	HeadPic string `json:"head_pic,omitempty"`
	// 商品图片
	Photos []string `json:"photos,omitempty"`
	// 商品介绍
	Intro []string `json:"intro,omitempty"`
	// 商品状态 0下架 1上架
	Status uint8 `json:"status,omitempty"`
	// 分期方案
	Installment [][]float64 `json:"installment,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoodsQuery when eager-loading is set.
	Edges        GoodsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GoodsEdges holds the relations/edges for other nodes in the graph.
type GoodsEdges struct {
	// Stores holds the value of the stores edge.
	Stores []*StoreGoods `json:"stores,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StoresOrErr returns the Stores value or an error if the edge
// was not loaded in eager-loading.
func (e GoodsEdges) StoresOrErr() ([]*StoreGoods, error) {
	if e.loadedTypes[0] {
		return e.Stores, nil
	}
	return nil, &NotLoadedError{edge: "stores"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Goods) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goods.FieldCreator, goods.FieldLastModifier, goods.FieldLables, goods.FieldPhotos, goods.FieldIntro, goods.FieldInstallment:
			values[i] = new([]byte)
		case goods.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case goods.FieldID, goods.FieldType, goods.FieldWeight, goods.FieldStatus:
			values[i] = new(sql.NullInt64)
		case goods.FieldRemark, goods.FieldSn, goods.FieldName, goods.FieldHeadPic:
			values[i] = new(sql.NullString)
		case goods.FieldCreatedAt, goods.FieldUpdatedAt, goods.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Goods fields.
func (_go *Goods) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goods.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_go.ID = uint64(value.Int64)
		case goods.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_go.CreatedAt = value.Time
			}
		case goods.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_go.UpdatedAt = value.Time
			}
		case goods.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_go.DeletedAt = new(time.Time)
				*_go.DeletedAt = value.Time
			}
		case goods.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case goods.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case goods.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				_go.Remark = value.String
			}
		case goods.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				_go.Sn = value.String
			}
		case goods.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_go.Name = value.String
			}
		case goods.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				_go.Type = uint8(value.Int64)
			}
		case goods.FieldLables:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field lables", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.Lables); err != nil {
					return fmt.Errorf("unmarshal field lables: %w", err)
				}
			}
		case goods.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				_go.Price = value.Float64
			}
		case goods.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				_go.Weight = int(value.Int64)
			}
		case goods.FieldHeadPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field head_pic", values[i])
			} else if value.Valid {
				_go.HeadPic = value.String
			}
		case goods.FieldPhotos:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field photos", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.Photos); err != nil {
					return fmt.Errorf("unmarshal field photos: %w", err)
				}
			}
		case goods.FieldIntro:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field intro", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.Intro); err != nil {
					return fmt.Errorf("unmarshal field intro: %w", err)
				}
			}
		case goods.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_go.Status = uint8(value.Int64)
			}
		case goods.FieldInstallment:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field installment", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_go.Installment); err != nil {
					return fmt.Errorf("unmarshal field installment: %w", err)
				}
			}
		default:
			_go.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Goods.
// This includes values selected through modifiers, order, etc.
func (_go *Goods) Value(name string) (ent.Value, error) {
	return _go.selectValues.Get(name)
}

// QueryStores queries the "stores" edge of the Goods entity.
func (_go *Goods) QueryStores() *StoreGoodsQuery {
	return NewGoodsClient(_go.config).QueryStores(_go)
}

// Update returns a builder for updating this Goods.
// Note that you need to call Goods.Unwrap() before calling this method if this Goods
// was returned from a transaction, and the transaction was committed or rolled back.
func (_go *Goods) Update() *GoodsUpdateOne {
	return NewGoodsClient(_go.config).UpdateOne(_go)
}

// Unwrap unwraps the Goods entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_go *Goods) Unwrap() *Goods {
	_tx, ok := _go.config.driver.(*txDriver)
	if !ok {
		panic("ent: Goods is not a transactional entity")
	}
	_go.config.driver = _tx.drv
	return _go
}

// String implements the fmt.Stringer.
func (_go *Goods) String() string {
	var builder strings.Builder
	builder.WriteString("Goods(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _go.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_go.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_go.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _go.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", _go.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", _go.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(_go.Remark)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(_go.Sn)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_go.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", _go.Type))
	builder.WriteString(", ")
	builder.WriteString("lables=")
	builder.WriteString(fmt.Sprintf("%v", _go.Lables))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", _go.Price))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", _go.Weight))
	builder.WriteString(", ")
	builder.WriteString("head_pic=")
	builder.WriteString(_go.HeadPic)
	builder.WriteString(", ")
	builder.WriteString("photos=")
	builder.WriteString(fmt.Sprintf("%v", _go.Photos))
	builder.WriteString(", ")
	builder.WriteString("intro=")
	builder.WriteString(fmt.Sprintf("%v", _go.Intro))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _go.Status))
	builder.WriteString(", ")
	builder.WriteString("installment=")
	builder.WriteString(fmt.Sprintf("%v", _go.Installment))
	builder.WriteByte(')')
	return builder.String()
}

// GoodsSlice is a parsable slice of Goods.
type GoodsSlice []*Goods
