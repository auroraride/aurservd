// Code generated by ent, DO NOT EDIT.

package assettransfer

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assettransfer type in the database.
	Label = "asset_transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldFromLocationType holds the string denoting the from_location_type field in the database.
	FieldFromLocationType = "from_location_type"
	// FieldFromLocationID holds the string denoting the from_location_id field in the database.
	FieldFromLocationID = "from_location_id"
	// FieldToLocationType holds the string denoting the to_location_type field in the database.
	FieldToLocationType = "to_location_type"
	// FieldToLocationID holds the string denoting the to_location_id field in the database.
	FieldToLocationID = "to_location_id"
	// FieldOutNum holds the string denoting the out_num field in the database.
	FieldOutNum = "out_num"
	// FieldInNum holds the string denoting the in_num field in the database.
	FieldInNum = "in_num"
	// FieldOutOperateID holds the string denoting the out_operate_id field in the database.
	FieldOutOperateID = "out_operate_id"
	// FieldOutOperateType holds the string denoting the out_operate_type field in the database.
	FieldOutOperateType = "out_operate_type"
	// FieldOutTimeAt holds the string denoting the out_time_at field in the database.
	FieldOutTimeAt = "out_time_at"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// EdgeTransferDetails holds the string denoting the transfer_details edge name in mutations.
	EdgeTransferDetails = "transfer_details"
	// EdgeFromLocationStore holds the string denoting the from_location_store edge name in mutations.
	EdgeFromLocationStore = "from_location_store"
	// EdgeFromLocationCabinet holds the string denoting the from_location_cabinet edge name in mutations.
	EdgeFromLocationCabinet = "from_location_cabinet"
	// EdgeFromLocationStation holds the string denoting the from_location_station edge name in mutations.
	EdgeFromLocationStation = "from_location_station"
	// EdgeFromLocationRider holds the string denoting the from_location_rider edge name in mutations.
	EdgeFromLocationRider = "from_location_rider"
	// EdgeFromLocationOperator holds the string denoting the from_location_operator edge name in mutations.
	EdgeFromLocationOperator = "from_location_operator"
	// EdgeFromLocationWarehouse holds the string denoting the from_location_warehouse edge name in mutations.
	EdgeFromLocationWarehouse = "from_location_warehouse"
	// EdgeToLocationStore holds the string denoting the to_location_store edge name in mutations.
	EdgeToLocationStore = "to_location_store"
	// EdgeToLocationCabinet holds the string denoting the to_location_cabinet edge name in mutations.
	EdgeToLocationCabinet = "to_location_cabinet"
	// EdgeToLocationStation holds the string denoting the to_location_station edge name in mutations.
	EdgeToLocationStation = "to_location_station"
	// EdgeToLocationRider holds the string denoting the to_location_rider edge name in mutations.
	EdgeToLocationRider = "to_location_rider"
	// EdgeToLocationOperator holds the string denoting the to_location_operator edge name in mutations.
	EdgeToLocationOperator = "to_location_operator"
	// EdgeToLocationWarehouse holds the string denoting the to_location_warehouse edge name in mutations.
	EdgeToLocationWarehouse = "to_location_warehouse"
	// EdgeOutOperateManager holds the string denoting the out_operate_manager edge name in mutations.
	EdgeOutOperateManager = "out_operate_manager"
	// EdgeOutOperateStore holds the string denoting the out_operate_store edge name in mutations.
	EdgeOutOperateStore = "out_operate_store"
	// EdgeOutOperateAgent holds the string denoting the out_operate_agent edge name in mutations.
	EdgeOutOperateAgent = "out_operate_agent"
	// EdgeOutOperateMaintainer holds the string denoting the out_operate_maintainer edge name in mutations.
	EdgeOutOperateMaintainer = "out_operate_maintainer"
	// EdgeOutOperateCabinet holds the string denoting the out_operate_cabinet edge name in mutations.
	EdgeOutOperateCabinet = "out_operate_cabinet"
	// EdgeOutOperateRider holds the string denoting the out_operate_rider edge name in mutations.
	EdgeOutOperateRider = "out_operate_rider"
	// Table holds the table name of the assettransfer in the database.
	Table = "asset_transfer"
	// TransferDetailsTable is the table that holds the transfer_details relation/edge.
	TransferDetailsTable = "asset_transfer_details"
	// TransferDetailsInverseTable is the table name for the AssetTransferDetails entity.
	// It exists in this package in order to avoid circular dependency with the "assettransferdetails" package.
	TransferDetailsInverseTable = "asset_transfer_details"
	// TransferDetailsColumn is the table column denoting the transfer_details relation/edge.
	TransferDetailsColumn = "transfer_id"
	// FromLocationStoreTable is the table that holds the from_location_store relation/edge.
	FromLocationStoreTable = "asset_transfer"
	// FromLocationStoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	FromLocationStoreInverseTable = "store"
	// FromLocationStoreColumn is the table column denoting the from_location_store relation/edge.
	FromLocationStoreColumn = "from_location_id"
	// FromLocationCabinetTable is the table that holds the from_location_cabinet relation/edge.
	FromLocationCabinetTable = "asset_transfer"
	// FromLocationCabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	FromLocationCabinetInverseTable = "cabinet"
	// FromLocationCabinetColumn is the table column denoting the from_location_cabinet relation/edge.
	FromLocationCabinetColumn = "from_location_id"
	// FromLocationStationTable is the table that holds the from_location_station relation/edge.
	FromLocationStationTable = "asset_transfer"
	// FromLocationStationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	FromLocationStationInverseTable = "enterprise_station"
	// FromLocationStationColumn is the table column denoting the from_location_station relation/edge.
	FromLocationStationColumn = "from_location_id"
	// FromLocationRiderTable is the table that holds the from_location_rider relation/edge.
	FromLocationRiderTable = "asset_transfer"
	// FromLocationRiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	FromLocationRiderInverseTable = "rider"
	// FromLocationRiderColumn is the table column denoting the from_location_rider relation/edge.
	FromLocationRiderColumn = "from_location_id"
	// FromLocationOperatorTable is the table that holds the from_location_operator relation/edge.
	FromLocationOperatorTable = "asset_transfer"
	// FromLocationOperatorInverseTable is the table name for the Maintainer entity.
	// It exists in this package in order to avoid circular dependency with the "maintainer" package.
	FromLocationOperatorInverseTable = "maintainer"
	// FromLocationOperatorColumn is the table column denoting the from_location_operator relation/edge.
	FromLocationOperatorColumn = "from_location_id"
	// FromLocationWarehouseTable is the table that holds the from_location_warehouse relation/edge.
	FromLocationWarehouseTable = "asset_transfer"
	// FromLocationWarehouseInverseTable is the table name for the Warehouse entity.
	// It exists in this package in order to avoid circular dependency with the "warehouse" package.
	FromLocationWarehouseInverseTable = "warehouse"
	// FromLocationWarehouseColumn is the table column denoting the from_location_warehouse relation/edge.
	FromLocationWarehouseColumn = "from_location_id"
	// ToLocationStoreTable is the table that holds the to_location_store relation/edge.
	ToLocationStoreTable = "asset_transfer"
	// ToLocationStoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	ToLocationStoreInverseTable = "store"
	// ToLocationStoreColumn is the table column denoting the to_location_store relation/edge.
	ToLocationStoreColumn = "to_location_id"
	// ToLocationCabinetTable is the table that holds the to_location_cabinet relation/edge.
	ToLocationCabinetTable = "asset_transfer"
	// ToLocationCabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	ToLocationCabinetInverseTable = "cabinet"
	// ToLocationCabinetColumn is the table column denoting the to_location_cabinet relation/edge.
	ToLocationCabinetColumn = "to_location_id"
	// ToLocationStationTable is the table that holds the to_location_station relation/edge.
	ToLocationStationTable = "asset_transfer"
	// ToLocationStationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	ToLocationStationInverseTable = "enterprise_station"
	// ToLocationStationColumn is the table column denoting the to_location_station relation/edge.
	ToLocationStationColumn = "to_location_id"
	// ToLocationRiderTable is the table that holds the to_location_rider relation/edge.
	ToLocationRiderTable = "asset_transfer"
	// ToLocationRiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	ToLocationRiderInverseTable = "rider"
	// ToLocationRiderColumn is the table column denoting the to_location_rider relation/edge.
	ToLocationRiderColumn = "to_location_id"
	// ToLocationOperatorTable is the table that holds the to_location_operator relation/edge.
	ToLocationOperatorTable = "asset_transfer"
	// ToLocationOperatorInverseTable is the table name for the Maintainer entity.
	// It exists in this package in order to avoid circular dependency with the "maintainer" package.
	ToLocationOperatorInverseTable = "maintainer"
	// ToLocationOperatorColumn is the table column denoting the to_location_operator relation/edge.
	ToLocationOperatorColumn = "to_location_id"
	// ToLocationWarehouseTable is the table that holds the to_location_warehouse relation/edge.
	ToLocationWarehouseTable = "asset_transfer"
	// ToLocationWarehouseInverseTable is the table name for the Warehouse entity.
	// It exists in this package in order to avoid circular dependency with the "warehouse" package.
	ToLocationWarehouseInverseTable = "warehouse"
	// ToLocationWarehouseColumn is the table column denoting the to_location_warehouse relation/edge.
	ToLocationWarehouseColumn = "to_location_id"
	// OutOperateManagerTable is the table that holds the out_operate_manager relation/edge.
	OutOperateManagerTable = "asset_transfer"
	// OutOperateManagerInverseTable is the table name for the Manager entity.
	// It exists in this package in order to avoid circular dependency with the "manager" package.
	OutOperateManagerInverseTable = "manager"
	// OutOperateManagerColumn is the table column denoting the out_operate_manager relation/edge.
	OutOperateManagerColumn = "out_operate_id"
	// OutOperateStoreTable is the table that holds the out_operate_store relation/edge.
	OutOperateStoreTable = "asset_transfer"
	// OutOperateStoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	OutOperateStoreInverseTable = "store"
	// OutOperateStoreColumn is the table column denoting the out_operate_store relation/edge.
	OutOperateStoreColumn = "out_operate_id"
	// OutOperateAgentTable is the table that holds the out_operate_agent relation/edge.
	OutOperateAgentTable = "asset_transfer"
	// OutOperateAgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OutOperateAgentInverseTable = "agent"
	// OutOperateAgentColumn is the table column denoting the out_operate_agent relation/edge.
	OutOperateAgentColumn = "out_operate_id"
	// OutOperateMaintainerTable is the table that holds the out_operate_maintainer relation/edge.
	OutOperateMaintainerTable = "asset_transfer"
	// OutOperateMaintainerInverseTable is the table name for the Maintainer entity.
	// It exists in this package in order to avoid circular dependency with the "maintainer" package.
	OutOperateMaintainerInverseTable = "maintainer"
	// OutOperateMaintainerColumn is the table column denoting the out_operate_maintainer relation/edge.
	OutOperateMaintainerColumn = "out_operate_id"
	// OutOperateCabinetTable is the table that holds the out_operate_cabinet relation/edge.
	OutOperateCabinetTable = "asset_transfer"
	// OutOperateCabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	OutOperateCabinetInverseTable = "cabinet"
	// OutOperateCabinetColumn is the table column denoting the out_operate_cabinet relation/edge.
	OutOperateCabinetColumn = "out_operate_id"
	// OutOperateRiderTable is the table that holds the out_operate_rider relation/edge.
	OutOperateRiderTable = "asset_transfer"
	// OutOperateRiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	OutOperateRiderInverseTable = "rider"
	// OutOperateRiderColumn is the table column denoting the out_operate_rider relation/edge.
	OutOperateRiderColumn = "out_operate_id"
)

// Columns holds all SQL columns for assettransfer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStatus,
	FieldSn,
	FieldFromLocationType,
	FieldFromLocationID,
	FieldToLocationType,
	FieldToLocationID,
	FieldOutNum,
	FieldInNum,
	FieldOutOperateID,
	FieldOutOperateType,
	FieldOutTimeAt,
	FieldReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the AssetTransfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByFromLocationType orders the results by the from_location_type field.
func ByFromLocationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLocationType, opts...).ToFunc()
}

// ByFromLocationID orders the results by the from_location_id field.
func ByFromLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLocationID, opts...).ToFunc()
}

// ByToLocationType orders the results by the to_location_type field.
func ByToLocationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLocationType, opts...).ToFunc()
}

// ByToLocationID orders the results by the to_location_id field.
func ByToLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLocationID, opts...).ToFunc()
}

// ByOutNum orders the results by the out_num field.
func ByOutNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutNum, opts...).ToFunc()
}

// ByInNum orders the results by the in_num field.
func ByInNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInNum, opts...).ToFunc()
}

// ByOutOperateID orders the results by the out_operate_id field.
func ByOutOperateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutOperateID, opts...).ToFunc()
}

// ByOutOperateType orders the results by the out_operate_type field.
func ByOutOperateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutOperateType, opts...).ToFunc()
}

// ByOutTimeAt orders the results by the out_time_at field.
func ByOutTimeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTimeAt, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByTransferDetailsCount orders the results by transfer_details count.
func ByTransferDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransferDetailsStep(), opts...)
	}
}

// ByTransferDetails orders the results by transfer_details terms.
func ByTransferDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransferDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFromLocationStoreField orders the results by from_location_store field.
func ByFromLocationStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromLocationCabinetField orders the results by from_location_cabinet field.
func ByFromLocationCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromLocationStationField orders the results by from_location_station field.
func ByFromLocationStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromLocationRiderField orders the results by from_location_rider field.
func ByFromLocationRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromLocationOperatorField orders the results by from_location_operator field.
func ByFromLocationOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationOperatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByFromLocationWarehouseField orders the results by from_location_warehouse field.
func ByFromLocationWarehouseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromLocationWarehouseStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationStoreField orders the results by to_location_store field.
func ByToLocationStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationCabinetField orders the results by to_location_cabinet field.
func ByToLocationCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationStationField orders the results by to_location_station field.
func ByToLocationStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationRiderField orders the results by to_location_rider field.
func ByToLocationRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationOperatorField orders the results by to_location_operator field.
func ByToLocationOperatorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationOperatorStep(), sql.OrderByField(field, opts...))
	}
}

// ByToLocationWarehouseField orders the results by to_location_warehouse field.
func ByToLocationWarehouseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToLocationWarehouseStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateManagerField orders the results by out_operate_manager field.
func ByOutOperateManagerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateManagerStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateStoreField orders the results by out_operate_store field.
func ByOutOperateStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateAgentField orders the results by out_operate_agent field.
func ByOutOperateAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateMaintainerField orders the results by out_operate_maintainer field.
func ByOutOperateMaintainerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateMaintainerStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateCabinetField orders the results by out_operate_cabinet field.
func ByOutOperateCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByOutOperateRiderField orders the results by out_operate_rider field.
func ByOutOperateRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOutOperateRiderStep(), sql.OrderByField(field, opts...))
	}
}
func newTransferDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransferDetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransferDetailsTable, TransferDetailsColumn),
	)
}
func newFromLocationStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationStoreTable, FromLocationStoreColumn),
	)
}
func newFromLocationCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationCabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationCabinetTable, FromLocationCabinetColumn),
	)
}
func newFromLocationStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationStationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationStationTable, FromLocationStationColumn),
	)
}
func newFromLocationRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationRiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationRiderTable, FromLocationRiderColumn),
	)
}
func newFromLocationOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationOperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationOperatorTable, FromLocationOperatorColumn),
	)
}
func newFromLocationWarehouseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromLocationWarehouseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, FromLocationWarehouseTable, FromLocationWarehouseColumn),
	)
}
func newToLocationStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationStoreTable, ToLocationStoreColumn),
	)
}
func newToLocationCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationCabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationCabinetTable, ToLocationCabinetColumn),
	)
}
func newToLocationStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationStationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationStationTable, ToLocationStationColumn),
	)
}
func newToLocationRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationRiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationRiderTable, ToLocationRiderColumn),
	)
}
func newToLocationOperatorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationOperatorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationOperatorTable, ToLocationOperatorColumn),
	)
}
func newToLocationWarehouseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToLocationWarehouseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ToLocationWarehouseTable, ToLocationWarehouseColumn),
	)
}
func newOutOperateManagerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateManagerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateManagerTable, OutOperateManagerColumn),
	)
}
func newOutOperateStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateStoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateStoreTable, OutOperateStoreColumn),
	)
}
func newOutOperateAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateAgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateAgentTable, OutOperateAgentColumn),
	)
}
func newOutOperateMaintainerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateMaintainerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateMaintainerTable, OutOperateMaintainerColumn),
	)
}
func newOutOperateCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateCabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateCabinetTable, OutOperateCabinetColumn),
	)
}
func newOutOperateRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OutOperateRiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OutOperateRiderTable, OutOperateRiderColumn),
	)
}
