// Code generated by ent, DO NOT EDIT.

package assettransfer

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assettransfer type in the database.
	Label = "asset_transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldFromLocationType holds the string denoting the from_location_type field in the database.
	FieldFromLocationType = "from_location_type"
	// FieldFromLocationID holds the string denoting the from_location_id field in the database.
	FieldFromLocationID = "from_location_id"
	// FieldToLocationType holds the string denoting the to_location_type field in the database.
	FieldToLocationType = "to_location_type"
	// FieldToLocationID holds the string denoting the to_location_id field in the database.
	FieldToLocationID = "to_location_id"
	// FieldOutNum holds the string denoting the out_num field in the database.
	FieldOutNum = "out_num"
	// FieldInNum holds the string denoting the in_num field in the database.
	FieldInNum = "in_num"
	// FieldOutUserID holds the string denoting the out_user_id field in the database.
	FieldOutUserID = "out_user_id"
	// FieldOutRoleType holds the string denoting the out_role_type field in the database.
	FieldOutRoleType = "out_role_type"
	// FieldInUserID holds the string denoting the in_user_id field in the database.
	FieldInUserID = "in_user_id"
	// FieldInRoleType holds the string denoting the in_role_type field in the database.
	FieldInRoleType = "in_role_type"
	// FieldOutTimeAt holds the string denoting the out_time_at field in the database.
	FieldOutTimeAt = "out_time_at"
	// FieldInTimeAt holds the string denoting the in_time_at field in the database.
	FieldInTimeAt = "in_time_at"
	// FieldTransferType holds the string denoting the transfer_type field in the database.
	FieldTransferType = "transfer_type"
	// EdgeDetails holds the string denoting the details edge name in mutations.
	EdgeDetails = "details"
	// Table holds the table name of the assettransfer in the database.
	Table = "asset_transfer"
	// DetailsTable is the table that holds the details relation/edge.
	DetailsTable = "asset_transfer_details"
	// DetailsInverseTable is the table name for the AssetTransferDetails entity.
	// It exists in this package in order to avoid circular dependency with the "assettransferdetails" package.
	DetailsInverseTable = "asset_transfer_details"
	// DetailsColumn is the table column denoting the details relation/edge.
	DetailsColumn = "transfer_id"
)

// Columns holds all SQL columns for assettransfer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStatus,
	FieldSn,
	FieldFromLocationType,
	FieldFromLocationID,
	FieldToLocationType,
	FieldToLocationID,
	FieldOutNum,
	FieldInNum,
	FieldOutUserID,
	FieldOutRoleType,
	FieldInUserID,
	FieldInRoleType,
	FieldOutTimeAt,
	FieldInTimeAt,
	FieldTransferType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the AssetTransfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByFromLocationType orders the results by the from_location_type field.
func ByFromLocationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLocationType, opts...).ToFunc()
}

// ByFromLocationID orders the results by the from_location_id field.
func ByFromLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromLocationID, opts...).ToFunc()
}

// ByToLocationType orders the results by the to_location_type field.
func ByToLocationType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLocationType, opts...).ToFunc()
}

// ByToLocationID orders the results by the to_location_id field.
func ByToLocationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToLocationID, opts...).ToFunc()
}

// ByOutNum orders the results by the out_num field.
func ByOutNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutNum, opts...).ToFunc()
}

// ByInNum orders the results by the in_num field.
func ByInNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInNum, opts...).ToFunc()
}

// ByOutUserID orders the results by the out_user_id field.
func ByOutUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutUserID, opts...).ToFunc()
}

// ByOutRoleType orders the results by the out_role_type field.
func ByOutRoleType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutRoleType, opts...).ToFunc()
}

// ByInUserID orders the results by the in_user_id field.
func ByInUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInUserID, opts...).ToFunc()
}

// ByInRoleType orders the results by the in_role_type field.
func ByInRoleType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInRoleType, opts...).ToFunc()
}

// ByOutTimeAt orders the results by the out_time_at field.
func ByOutTimeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTimeAt, opts...).ToFunc()
}

// ByInTimeAt orders the results by the in_time_at field.
func ByInTimeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInTimeAt, opts...).ToFunc()
}

// ByTransferType orders the results by the transfer_type field.
func ByTransferType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferType, opts...).ToFunc()
}

// ByDetailsCount orders the results by details count.
func ByDetailsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDetailsStep(), opts...)
	}
}

// ByDetails orders the results by details terms.
func ByDetails(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDetailsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDetailsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DetailsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DetailsTable, DetailsColumn),
	)
}
