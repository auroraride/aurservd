// Code generated by ent, DO NOT EDIT.

package assettransfer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldStatus, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldSn, v))
}

// FromLocationType applies equality check predicate on the "from_location_type" field. It's identical to FromLocationTypeEQ.
func FromLocationType(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldFromLocationType, v))
}

// FromLocationID applies equality check predicate on the "from_location_id" field. It's identical to FromLocationIDEQ.
func FromLocationID(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldFromLocationID, v))
}

// ToLocationType applies equality check predicate on the "to_location_type" field. It's identical to ToLocationTypeEQ.
func ToLocationType(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldToLocationType, v))
}

// ToLocationID applies equality check predicate on the "to_location_id" field. It's identical to ToLocationIDEQ.
func ToLocationID(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldToLocationID, v))
}

// OutNum applies equality check predicate on the "out_num" field. It's identical to OutNumEQ.
func OutNum(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutNum, v))
}

// InNum applies equality check predicate on the "in_num" field. It's identical to InNumEQ.
func InNum(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldInNum, v))
}

// OutOperateID applies equality check predicate on the "out_operate_id" field. It's identical to OutOperateIDEQ.
func OutOperateID(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutOperateID, v))
}

// OutOperateType applies equality check predicate on the "out_operate_type" field. It's identical to OutOperateTypeEQ.
func OutOperateType(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutOperateType, v))
}

// OutTimeAt applies equality check predicate on the "out_time_at" field. It's identical to OutTimeAtEQ.
func OutTimeAt(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutTimeAt, v))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldReason, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldStatus, v))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContainsFold(FieldSn, v))
}

// FromLocationTypeEQ applies the EQ predicate on the "from_location_type" field.
func FromLocationTypeEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldFromLocationType, v))
}

// FromLocationTypeNEQ applies the NEQ predicate on the "from_location_type" field.
func FromLocationTypeNEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldFromLocationType, v))
}

// FromLocationTypeIn applies the In predicate on the "from_location_type" field.
func FromLocationTypeIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldFromLocationType, vs...))
}

// FromLocationTypeNotIn applies the NotIn predicate on the "from_location_type" field.
func FromLocationTypeNotIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldFromLocationType, vs...))
}

// FromLocationTypeGT applies the GT predicate on the "from_location_type" field.
func FromLocationTypeGT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldFromLocationType, v))
}

// FromLocationTypeGTE applies the GTE predicate on the "from_location_type" field.
func FromLocationTypeGTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldFromLocationType, v))
}

// FromLocationTypeLT applies the LT predicate on the "from_location_type" field.
func FromLocationTypeLT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldFromLocationType, v))
}

// FromLocationTypeLTE applies the LTE predicate on the "from_location_type" field.
func FromLocationTypeLTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldFromLocationType, v))
}

// FromLocationTypeIsNil applies the IsNil predicate on the "from_location_type" field.
func FromLocationTypeIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldFromLocationType))
}

// FromLocationTypeNotNil applies the NotNil predicate on the "from_location_type" field.
func FromLocationTypeNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldFromLocationType))
}

// FromLocationIDEQ applies the EQ predicate on the "from_location_id" field.
func FromLocationIDEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldFromLocationID, v))
}

// FromLocationIDNEQ applies the NEQ predicate on the "from_location_id" field.
func FromLocationIDNEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldFromLocationID, v))
}

// FromLocationIDIn applies the In predicate on the "from_location_id" field.
func FromLocationIDIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldFromLocationID, vs...))
}

// FromLocationIDNotIn applies the NotIn predicate on the "from_location_id" field.
func FromLocationIDNotIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldFromLocationID, vs...))
}

// FromLocationIDIsNil applies the IsNil predicate on the "from_location_id" field.
func FromLocationIDIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldFromLocationID))
}

// FromLocationIDNotNil applies the NotNil predicate on the "from_location_id" field.
func FromLocationIDNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldFromLocationID))
}

// ToLocationTypeEQ applies the EQ predicate on the "to_location_type" field.
func ToLocationTypeEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldToLocationType, v))
}

// ToLocationTypeNEQ applies the NEQ predicate on the "to_location_type" field.
func ToLocationTypeNEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldToLocationType, v))
}

// ToLocationTypeIn applies the In predicate on the "to_location_type" field.
func ToLocationTypeIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldToLocationType, vs...))
}

// ToLocationTypeNotIn applies the NotIn predicate on the "to_location_type" field.
func ToLocationTypeNotIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldToLocationType, vs...))
}

// ToLocationTypeGT applies the GT predicate on the "to_location_type" field.
func ToLocationTypeGT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldToLocationType, v))
}

// ToLocationTypeGTE applies the GTE predicate on the "to_location_type" field.
func ToLocationTypeGTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldToLocationType, v))
}

// ToLocationTypeLT applies the LT predicate on the "to_location_type" field.
func ToLocationTypeLT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldToLocationType, v))
}

// ToLocationTypeLTE applies the LTE predicate on the "to_location_type" field.
func ToLocationTypeLTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldToLocationType, v))
}

// ToLocationTypeIsNil applies the IsNil predicate on the "to_location_type" field.
func ToLocationTypeIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldToLocationType))
}

// ToLocationTypeNotNil applies the NotNil predicate on the "to_location_type" field.
func ToLocationTypeNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldToLocationType))
}

// ToLocationIDEQ applies the EQ predicate on the "to_location_id" field.
func ToLocationIDEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldToLocationID, v))
}

// ToLocationIDNEQ applies the NEQ predicate on the "to_location_id" field.
func ToLocationIDNEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldToLocationID, v))
}

// ToLocationIDIn applies the In predicate on the "to_location_id" field.
func ToLocationIDIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldToLocationID, vs...))
}

// ToLocationIDNotIn applies the NotIn predicate on the "to_location_id" field.
func ToLocationIDNotIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldToLocationID, vs...))
}

// ToLocationIDIsNil applies the IsNil predicate on the "to_location_id" field.
func ToLocationIDIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldToLocationID))
}

// ToLocationIDNotNil applies the NotNil predicate on the "to_location_id" field.
func ToLocationIDNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldToLocationID))
}

// OutNumEQ applies the EQ predicate on the "out_num" field.
func OutNumEQ(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutNum, v))
}

// OutNumNEQ applies the NEQ predicate on the "out_num" field.
func OutNumNEQ(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldOutNum, v))
}

// OutNumIn applies the In predicate on the "out_num" field.
func OutNumIn(vs ...uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldOutNum, vs...))
}

// OutNumNotIn applies the NotIn predicate on the "out_num" field.
func OutNumNotIn(vs ...uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldOutNum, vs...))
}

// OutNumGT applies the GT predicate on the "out_num" field.
func OutNumGT(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldOutNum, v))
}

// OutNumGTE applies the GTE predicate on the "out_num" field.
func OutNumGTE(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldOutNum, v))
}

// OutNumLT applies the LT predicate on the "out_num" field.
func OutNumLT(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldOutNum, v))
}

// OutNumLTE applies the LTE predicate on the "out_num" field.
func OutNumLTE(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldOutNum, v))
}

// OutNumIsNil applies the IsNil predicate on the "out_num" field.
func OutNumIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldOutNum))
}

// OutNumNotNil applies the NotNil predicate on the "out_num" field.
func OutNumNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldOutNum))
}

// InNumEQ applies the EQ predicate on the "in_num" field.
func InNumEQ(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldInNum, v))
}

// InNumNEQ applies the NEQ predicate on the "in_num" field.
func InNumNEQ(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldInNum, v))
}

// InNumIn applies the In predicate on the "in_num" field.
func InNumIn(vs ...uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldInNum, vs...))
}

// InNumNotIn applies the NotIn predicate on the "in_num" field.
func InNumNotIn(vs ...uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldInNum, vs...))
}

// InNumGT applies the GT predicate on the "in_num" field.
func InNumGT(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldInNum, v))
}

// InNumGTE applies the GTE predicate on the "in_num" field.
func InNumGTE(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldInNum, v))
}

// InNumLT applies the LT predicate on the "in_num" field.
func InNumLT(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldInNum, v))
}

// InNumLTE applies the LTE predicate on the "in_num" field.
func InNumLTE(v uint) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldInNum, v))
}

// InNumIsNil applies the IsNil predicate on the "in_num" field.
func InNumIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldInNum))
}

// InNumNotNil applies the NotNil predicate on the "in_num" field.
func InNumNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldInNum))
}

// OutOperateIDEQ applies the EQ predicate on the "out_operate_id" field.
func OutOperateIDEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutOperateID, v))
}

// OutOperateIDNEQ applies the NEQ predicate on the "out_operate_id" field.
func OutOperateIDNEQ(v uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldOutOperateID, v))
}

// OutOperateIDIn applies the In predicate on the "out_operate_id" field.
func OutOperateIDIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldOutOperateID, vs...))
}

// OutOperateIDNotIn applies the NotIn predicate on the "out_operate_id" field.
func OutOperateIDNotIn(vs ...uint64) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldOutOperateID, vs...))
}

// OutOperateIDIsNil applies the IsNil predicate on the "out_operate_id" field.
func OutOperateIDIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldOutOperateID))
}

// OutOperateIDNotNil applies the NotNil predicate on the "out_operate_id" field.
func OutOperateIDNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldOutOperateID))
}

// OutOperateTypeEQ applies the EQ predicate on the "out_operate_type" field.
func OutOperateTypeEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutOperateType, v))
}

// OutOperateTypeNEQ applies the NEQ predicate on the "out_operate_type" field.
func OutOperateTypeNEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldOutOperateType, v))
}

// OutOperateTypeIn applies the In predicate on the "out_operate_type" field.
func OutOperateTypeIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldOutOperateType, vs...))
}

// OutOperateTypeNotIn applies the NotIn predicate on the "out_operate_type" field.
func OutOperateTypeNotIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldOutOperateType, vs...))
}

// OutOperateTypeGT applies the GT predicate on the "out_operate_type" field.
func OutOperateTypeGT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldOutOperateType, v))
}

// OutOperateTypeGTE applies the GTE predicate on the "out_operate_type" field.
func OutOperateTypeGTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldOutOperateType, v))
}

// OutOperateTypeLT applies the LT predicate on the "out_operate_type" field.
func OutOperateTypeLT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldOutOperateType, v))
}

// OutOperateTypeLTE applies the LTE predicate on the "out_operate_type" field.
func OutOperateTypeLTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldOutOperateType, v))
}

// OutOperateTypeIsNil applies the IsNil predicate on the "out_operate_type" field.
func OutOperateTypeIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldOutOperateType))
}

// OutOperateTypeNotNil applies the NotNil predicate on the "out_operate_type" field.
func OutOperateTypeNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldOutOperateType))
}

// OutTimeAtEQ applies the EQ predicate on the "out_time_at" field.
func OutTimeAtEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldOutTimeAt, v))
}

// OutTimeAtNEQ applies the NEQ predicate on the "out_time_at" field.
func OutTimeAtNEQ(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldOutTimeAt, v))
}

// OutTimeAtIn applies the In predicate on the "out_time_at" field.
func OutTimeAtIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldOutTimeAt, vs...))
}

// OutTimeAtNotIn applies the NotIn predicate on the "out_time_at" field.
func OutTimeAtNotIn(vs ...time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldOutTimeAt, vs...))
}

// OutTimeAtGT applies the GT predicate on the "out_time_at" field.
func OutTimeAtGT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldOutTimeAt, v))
}

// OutTimeAtGTE applies the GTE predicate on the "out_time_at" field.
func OutTimeAtGTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldOutTimeAt, v))
}

// OutTimeAtLT applies the LT predicate on the "out_time_at" field.
func OutTimeAtLT(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldOutTimeAt, v))
}

// OutTimeAtLTE applies the LTE predicate on the "out_time_at" field.
func OutTimeAtLTE(v time.Time) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldOutTimeAt, v))
}

// OutTimeAtIsNil applies the IsNil predicate on the "out_time_at" field.
func OutTimeAtIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldOutTimeAt))
}

// OutTimeAtNotNil applies the NotNil predicate on the "out_time_at" field.
func OutTimeAtNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldOutTimeAt))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldContainsFold(FieldReason, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldLTE(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.FieldNotNull(FieldType))
}

// HasTransferDetails applies the HasEdge predicate on the "transfer_details" edge.
func HasTransferDetails() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransferDetailsTable, TransferDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransferDetailsWith applies the HasEdge predicate on the "transfer_details" edge with a given conditions (other predicates).
func HasTransferDetailsWith(preds ...predicate.AssetTransferDetails) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newTransferDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationStore applies the HasEdge predicate on the "from_location_store" edge.
func HasFromLocationStore() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationStoreTable, FromLocationStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationStoreWith applies the HasEdge predicate on the "from_location_store" edge with a given conditions (other predicates).
func HasFromLocationStoreWith(preds ...predicate.Store) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationCabinet applies the HasEdge predicate on the "from_location_cabinet" edge.
func HasFromLocationCabinet() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationCabinetTable, FromLocationCabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationCabinetWith applies the HasEdge predicate on the "from_location_cabinet" edge with a given conditions (other predicates).
func HasFromLocationCabinetWith(preds ...predicate.Cabinet) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationStation applies the HasEdge predicate on the "from_location_station" edge.
func HasFromLocationStation() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationStationTable, FromLocationStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationStationWith applies the HasEdge predicate on the "from_location_station" edge with a given conditions (other predicates).
func HasFromLocationStationWith(preds ...predicate.EnterpriseStation) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationRider applies the HasEdge predicate on the "from_location_rider" edge.
func HasFromLocationRider() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationRiderTable, FromLocationRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationRiderWith applies the HasEdge predicate on the "from_location_rider" edge with a given conditions (other predicates).
func HasFromLocationRiderWith(preds ...predicate.Rider) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationOperator applies the HasEdge predicate on the "from_location_operator" edge.
func HasFromLocationOperator() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationOperatorTable, FromLocationOperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationOperatorWith applies the HasEdge predicate on the "from_location_operator" edge with a given conditions (other predicates).
func HasFromLocationOperatorWith(preds ...predicate.Maintainer) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFromLocationWarehouse applies the HasEdge predicate on the "from_location_warehouse" edge.
func HasFromLocationWarehouse() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FromLocationWarehouseTable, FromLocationWarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromLocationWarehouseWith applies the HasEdge predicate on the "from_location_warehouse" edge with a given conditions (other predicates).
func HasFromLocationWarehouseWith(preds ...predicate.Warehouse) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newFromLocationWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationStore applies the HasEdge predicate on the "to_location_store" edge.
func HasToLocationStore() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationStoreTable, ToLocationStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationStoreWith applies the HasEdge predicate on the "to_location_store" edge with a given conditions (other predicates).
func HasToLocationStoreWith(preds ...predicate.Store) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationCabinet applies the HasEdge predicate on the "to_location_cabinet" edge.
func HasToLocationCabinet() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationCabinetTable, ToLocationCabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationCabinetWith applies the HasEdge predicate on the "to_location_cabinet" edge with a given conditions (other predicates).
func HasToLocationCabinetWith(preds ...predicate.Cabinet) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationStation applies the HasEdge predicate on the "to_location_station" edge.
func HasToLocationStation() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationStationTable, ToLocationStationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationStationWith applies the HasEdge predicate on the "to_location_station" edge with a given conditions (other predicates).
func HasToLocationStationWith(preds ...predicate.EnterpriseStation) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationRider applies the HasEdge predicate on the "to_location_rider" edge.
func HasToLocationRider() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationRiderTable, ToLocationRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationRiderWith applies the HasEdge predicate on the "to_location_rider" edge with a given conditions (other predicates).
func HasToLocationRiderWith(preds ...predicate.Rider) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationOperator applies the HasEdge predicate on the "to_location_operator" edge.
func HasToLocationOperator() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationOperatorTable, ToLocationOperatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationOperatorWith applies the HasEdge predicate on the "to_location_operator" edge with a given conditions (other predicates).
func HasToLocationOperatorWith(preds ...predicate.Maintainer) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationOperatorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToLocationWarehouse applies the HasEdge predicate on the "to_location_warehouse" edge.
func HasToLocationWarehouse() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ToLocationWarehouseTable, ToLocationWarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToLocationWarehouseWith applies the HasEdge predicate on the "to_location_warehouse" edge with a given conditions (other predicates).
func HasToLocationWarehouseWith(preds ...predicate.Warehouse) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newToLocationWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateManager applies the HasEdge predicate on the "out_operate_manager" edge.
func HasOutOperateManager() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateManagerTable, OutOperateManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateManagerWith applies the HasEdge predicate on the "out_operate_manager" edge with a given conditions (other predicates).
func HasOutOperateManagerWith(preds ...predicate.AssetManager) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateStore applies the HasEdge predicate on the "out_operate_store" edge.
func HasOutOperateStore() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateStoreTable, OutOperateStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateStoreWith applies the HasEdge predicate on the "out_operate_store" edge with a given conditions (other predicates).
func HasOutOperateStoreWith(preds ...predicate.Store) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateAgent applies the HasEdge predicate on the "out_operate_agent" edge.
func HasOutOperateAgent() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateAgentTable, OutOperateAgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateAgentWith applies the HasEdge predicate on the "out_operate_agent" edge with a given conditions (other predicates).
func HasOutOperateAgentWith(preds ...predicate.Agent) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateMaintainer applies the HasEdge predicate on the "out_operate_maintainer" edge.
func HasOutOperateMaintainer() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateMaintainerTable, OutOperateMaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateMaintainerWith applies the HasEdge predicate on the "out_operate_maintainer" edge with a given conditions (other predicates).
func HasOutOperateMaintainerWith(preds ...predicate.Maintainer) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateCabinet applies the HasEdge predicate on the "out_operate_cabinet" edge.
func HasOutOperateCabinet() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateCabinetTable, OutOperateCabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateCabinetWith applies the HasEdge predicate on the "out_operate_cabinet" edge with a given conditions (other predicates).
func HasOutOperateCabinetWith(preds ...predicate.Cabinet) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOutOperateRider applies the HasEdge predicate on the "out_operate_rider" edge.
func HasOutOperateRider() predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OutOperateRiderTable, OutOperateRiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOutOperateRiderWith applies the HasEdge predicate on the "out_operate_rider" edge with a given conditions (other predicates).
func HasOutOperateRiderWith(preds ...predicate.Rider) predicate.AssetTransfer {
	return predicate.AssetTransfer(func(s *sql.Selector) {
		step := newOutOperateRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetTransfer) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetTransfer) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetTransfer) predicate.AssetTransfer {
	return predicate.AssetTransfer(sql.NotPredicates(p))
}
