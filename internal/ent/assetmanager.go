// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
)

// AssetManager is the model entity for the AssetManager schema.
type AssetManager struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 姓名
	Name string `json:"name,omitempty"`
	// 账户/手机号
	Phone string `json:"phone,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 角色ID
	RoleID *uint64 `json:"role_id,omitempty"`
	// 仓管小程序人员是否启用
	MiniEnable bool `json:"mini_enable,omitempty"`
	// 仓管小程序人员限制范围(km)
	MiniLimit uint `json:"mini_limit,omitempty"`
	// 最后登录时间
	LastSigninAt *time.Time `json:"last_signin_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetManagerQuery when eager-loading is set.
	Edges        AssetManagerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetManagerEdges holds the relations/edges for other nodes in the graph.
type AssetManagerEdges struct {
	// Role holds the value of the role edge.
	Role *AssetRole `json:"role,omitempty"`
	// Warehouses holds the value of the warehouses edge.
	Warehouses []*Warehouse `json:"warehouses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetManagerEdges) RoleOrErr() (*AssetRole, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: assetrole.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// WarehousesOrErr returns the Warehouses value or an error if the edge
// was not loaded in eager-loading.
func (e AssetManagerEdges) WarehousesOrErr() ([]*Warehouse, error) {
	if e.loadedTypes[1] {
		return e.Warehouses, nil
	}
	return nil, &NotLoadedError{edge: "warehouses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetManager) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetmanager.FieldCreator, assetmanager.FieldLastModifier:
			values[i] = new([]byte)
		case assetmanager.FieldMiniEnable:
			values[i] = new(sql.NullBool)
		case assetmanager.FieldID, assetmanager.FieldRoleID, assetmanager.FieldMiniLimit:
			values[i] = new(sql.NullInt64)
		case assetmanager.FieldRemark, assetmanager.FieldName, assetmanager.FieldPhone, assetmanager.FieldPassword:
			values[i] = new(sql.NullString)
		case assetmanager.FieldCreatedAt, assetmanager.FieldUpdatedAt, assetmanager.FieldDeletedAt, assetmanager.FieldLastSigninAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetManager fields.
func (am *AssetManager) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetmanager.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			am.ID = uint64(value.Int64)
		case assetmanager.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case assetmanager.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		case assetmanager.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				am.DeletedAt = new(time.Time)
				*am.DeletedAt = value.Time
			}
		case assetmanager.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assetmanager.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assetmanager.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				am.Remark = value.String
			}
		case assetmanager.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				am.Name = value.String
			}
		case assetmanager.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				am.Phone = value.String
			}
		case assetmanager.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				am.Password = value.String
			}
		case assetmanager.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				am.RoleID = new(uint64)
				*am.RoleID = uint64(value.Int64)
			}
		case assetmanager.FieldMiniEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field mini_enable", values[i])
			} else if value.Valid {
				am.MiniEnable = value.Bool
			}
		case assetmanager.FieldMiniLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mini_limit", values[i])
			} else if value.Valid {
				am.MiniLimit = uint(value.Int64)
			}
		case assetmanager.FieldLastSigninAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_signin_at", values[i])
			} else if value.Valid {
				am.LastSigninAt = new(time.Time)
				*am.LastSigninAt = value.Time
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetManager.
// This includes values selected through modifiers, order, etc.
func (am *AssetManager) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the AssetManager entity.
func (am *AssetManager) QueryRole() *AssetRoleQuery {
	return NewAssetManagerClient(am.config).QueryRole(am)
}

// QueryWarehouses queries the "warehouses" edge of the AssetManager entity.
func (am *AssetManager) QueryWarehouses() *WarehouseQuery {
	return NewAssetManagerClient(am.config).QueryWarehouses(am)
}

// Update returns a builder for updating this AssetManager.
// Note that you need to call AssetManager.Unwrap() before calling this method if this AssetManager
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AssetManager) Update() *AssetManagerUpdateOne {
	return NewAssetManagerClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AssetManager entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AssetManager) Unwrap() *AssetManager {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetManager is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AssetManager) String() string {
	var builder strings.Builder
	builder.WriteString("AssetManager(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := am.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", am.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", am.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(am.Remark)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(am.Name)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(am.Phone)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(am.Password)
	builder.WriteString(", ")
	if v := am.RoleID; v != nil {
		builder.WriteString("role_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("mini_enable=")
	builder.WriteString(fmt.Sprintf("%v", am.MiniEnable))
	builder.WriteString(", ")
	builder.WriteString("mini_limit=")
	builder.WriteString(fmt.Sprintf("%v", am.MiniLimit))
	builder.WriteString(", ")
	if v := am.LastSigninAt; v != nil {
		builder.WriteString("last_signin_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// AssetManagers is a parsable slice of AssetManager.
type AssetManagers []*AssetManager
