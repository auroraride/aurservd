// Code generated by ent, DO NOT EDIT.

package batterymodel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the batterymodel type in the database.
	Label = "battery_model"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldVoltage holds the string denoting the voltage field in the database.
	FieldVoltage = "voltage"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// EdgeCabinets holds the string denoting the cabinets edge name in mutations.
	EdgeCabinets = "cabinets"
	// Table holds the table name of the batterymodel in the database.
	Table = "battery_model"
	// CabinetsTable is the table that holds the cabinets relation/edge. The primary key declared below.
	CabinetsTable = "cabinet_models"
	// CabinetsInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetsInverseTable = "cabinet"
)

// Columns holds all SQL columns for batterymodel fields.
var Columns = []string{
	FieldID,
	FieldModel,
	FieldCreatedAt,
	FieldType,
	FieldVoltage,
	FieldCapacity,
}

var (
	// CabinetsPrimaryKey and CabinetsColumn2 are the table columns denoting the
	// primary key for the cabinets relation (M2M).
	CabinetsPrimaryKey = []string{"cabinet_id", "battery_model_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
)

// OrderOption defines the ordering options for the BatteryModel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByVoltage orders the results by the voltage field.
func ByVoltage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoltage, opts...).ToFunc()
}

// ByCapacity orders the results by the capacity field.
func ByCapacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCapacity, opts...).ToFunc()
}

// ByCabinetsCount orders the results by cabinets count.
func ByCabinetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCabinetsStep(), opts...)
	}
}

// ByCabinets orders the results by cabinets terms.
func ByCabinets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCabinetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CabinetsTable, CabinetsPrimaryKey...),
	)
}
