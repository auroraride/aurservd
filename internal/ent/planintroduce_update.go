// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// PlanIntroduceUpdate is the builder for updating PlanIntroduce entities.
type PlanIntroduceUpdate struct {
	config
	hooks     []Hook
	mutation  *PlanIntroduceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlanIntroduceUpdate builder.
func (piu *PlanIntroduceUpdate) Where(ps ...predicate.PlanIntroduce) *PlanIntroduceUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetUpdatedAt sets the "updated_at" field.
func (piu *PlanIntroduceUpdate) SetUpdatedAt(t time.Time) *PlanIntroduceUpdate {
	piu.mutation.SetUpdatedAt(t)
	return piu
}

// SetBrandID sets the "brand_id" field.
func (piu *PlanIntroduceUpdate) SetBrandID(u uint64) *PlanIntroduceUpdate {
	piu.mutation.SetBrandID(u)
	return piu
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (piu *PlanIntroduceUpdate) SetNillableBrandID(u *uint64) *PlanIntroduceUpdate {
	if u != nil {
		piu.SetBrandID(*u)
	}
	return piu
}

// ClearBrandID clears the value of the "brand_id" field.
func (piu *PlanIntroduceUpdate) ClearBrandID() *PlanIntroduceUpdate {
	piu.mutation.ClearBrandID()
	return piu
}

// SetModel sets the "model" field.
func (piu *PlanIntroduceUpdate) SetModel(s string) *PlanIntroduceUpdate {
	piu.mutation.SetModel(s)
	return piu
}

// SetImage sets the "image" field.
func (piu *PlanIntroduceUpdate) SetImage(s string) *PlanIntroduceUpdate {
	piu.mutation.SetImage(s)
	return piu
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (piu *PlanIntroduceUpdate) SetBrand(e *EbikeBrand) *PlanIntroduceUpdate {
	return piu.SetBrandID(e.ID)
}

// Mutation returns the PlanIntroduceMutation object of the builder.
func (piu *PlanIntroduceUpdate) Mutation() *PlanIntroduceMutation {
	return piu.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (piu *PlanIntroduceUpdate) ClearBrand() *PlanIntroduceUpdate {
	piu.mutation.ClearBrand()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PlanIntroduceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	piu.defaults()
	if len(piu.hooks) == 0 {
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanIntroduceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			if piu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PlanIntroduceUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PlanIntroduceUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PlanIntroduceUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *PlanIntroduceUpdate) defaults() {
	if _, ok := piu.mutation.UpdatedAt(); !ok {
		v := planintroduce.UpdateDefaultUpdatedAt()
		piu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piu *PlanIntroduceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanIntroduceUpdate {
	piu.modifiers = append(piu.modifiers, modifiers...)
	return piu
}

func (piu *PlanIntroduceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planintroduce.Table,
			Columns: planintroduce.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: planintroduce.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planintroduce.FieldUpdatedAt,
		})
	}
	if value, ok := piu.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planintroduce.FieldModel,
		})
	}
	if value, ok := piu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planintroduce.FieldImage,
		})
	}
	if piu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = piu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planintroduce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PlanIntroduceUpdateOne is the builder for updating a single PlanIntroduce entity.
type PlanIntroduceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlanIntroduceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (piuo *PlanIntroduceUpdateOne) SetUpdatedAt(t time.Time) *PlanIntroduceUpdateOne {
	piuo.mutation.SetUpdatedAt(t)
	return piuo
}

// SetBrandID sets the "brand_id" field.
func (piuo *PlanIntroduceUpdateOne) SetBrandID(u uint64) *PlanIntroduceUpdateOne {
	piuo.mutation.SetBrandID(u)
	return piuo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (piuo *PlanIntroduceUpdateOne) SetNillableBrandID(u *uint64) *PlanIntroduceUpdateOne {
	if u != nil {
		piuo.SetBrandID(*u)
	}
	return piuo
}

// ClearBrandID clears the value of the "brand_id" field.
func (piuo *PlanIntroduceUpdateOne) ClearBrandID() *PlanIntroduceUpdateOne {
	piuo.mutation.ClearBrandID()
	return piuo
}

// SetModel sets the "model" field.
func (piuo *PlanIntroduceUpdateOne) SetModel(s string) *PlanIntroduceUpdateOne {
	piuo.mutation.SetModel(s)
	return piuo
}

// SetImage sets the "image" field.
func (piuo *PlanIntroduceUpdateOne) SetImage(s string) *PlanIntroduceUpdateOne {
	piuo.mutation.SetImage(s)
	return piuo
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (piuo *PlanIntroduceUpdateOne) SetBrand(e *EbikeBrand) *PlanIntroduceUpdateOne {
	return piuo.SetBrandID(e.ID)
}

// Mutation returns the PlanIntroduceMutation object of the builder.
func (piuo *PlanIntroduceUpdateOne) Mutation() *PlanIntroduceMutation {
	return piuo.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (piuo *PlanIntroduceUpdateOne) ClearBrand() *PlanIntroduceUpdateOne {
	piuo.mutation.ClearBrand()
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PlanIntroduceUpdateOne) Select(field string, fields ...string) *PlanIntroduceUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PlanIntroduce entity.
func (piuo *PlanIntroduceUpdateOne) Save(ctx context.Context) (*PlanIntroduce, error) {
	var (
		err  error
		node *PlanIntroduce
	)
	piuo.defaults()
	if len(piuo.hooks) == 0 {
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlanIntroduceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			if piuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = piuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, piuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PlanIntroduce)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PlanIntroduceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PlanIntroduceUpdateOne) SaveX(ctx context.Context) *PlanIntroduce {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PlanIntroduceUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PlanIntroduceUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *PlanIntroduceUpdateOne) defaults() {
	if _, ok := piuo.mutation.UpdatedAt(); !ok {
		v := planintroduce.UpdateDefaultUpdatedAt()
		piuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piuo *PlanIntroduceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlanIntroduceUpdateOne {
	piuo.modifiers = append(piuo.modifiers, modifiers...)
	return piuo
}

func (piuo *PlanIntroduceUpdateOne) sqlSave(ctx context.Context) (_node *PlanIntroduce, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   planintroduce.Table,
			Columns: planintroduce.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: planintroduce.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlanIntroduce.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, planintroduce.FieldID)
		for _, f := range fields {
			if !planintroduce.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != planintroduce.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: planintroduce.FieldUpdatedAt,
		})
	}
	if value, ok := piuo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planintroduce.FieldModel,
		})
	}
	if value, ok := piuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: planintroduce.FieldImage,
		})
	}
	if piuo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = piuo.modifiers
	_node = &PlanIntroduce{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{planintroduce.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
