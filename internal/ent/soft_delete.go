// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderalter"
	"github.com/auroraride/aurservd/internal/ent/orderarrearage"
	"github.com/auroraride/aurservd/internal/ent/orderpause"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// SoftDelete returns an soft delete builder for BatteryModel.
func (c *BatteryModelClient) SoftDelete() *BatteryModelUpdate {
	mutation := newBatteryModelMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BatteryModelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BatteryModelClient) SoftDeleteOne(bm *BatteryModel) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModel(bm))
	mutation.SetDeletedAt(time.Now())
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BatteryModelClient) SoftDeleteOneID(id uint64) *BatteryModelUpdateOne {
	mutation := newBatteryModelMutation(c.config, OpUpdateOne, withBatteryModelID(id))
	mutation.SetDeletedAt(time.Now())
	return &BatteryModelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for BatteryModel.
func (c *BatteryModelClient) QueryNotDeleted() *BatteryModelQuery {
	return c.Query().Where(batterymodel.DeletedAtIsNil())
}

// GetNotDeleted returns a BatteryModel not deleted entity by its id.
func (c *BatteryModelClient) GetNotDeleted(ctx context.Context, id uint64) (*BatteryModel, error) {
	return c.Query().Where(batterymodel.ID(id), batterymodel.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BatteryModelClient) GetNotDeletedX(ctx context.Context, id uint64) *BatteryModel {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Branch.
func (c *BranchClient) SoftDelete() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchClient) SoftDeleteOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchClient) SoftDeleteOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Branch.
func (c *BranchClient) QueryNotDeleted() *BranchQuery {
	return c.Query().Where(branch.DeletedAtIsNil())
}

// GetNotDeleted returns a Branch not deleted entity by its id.
func (c *BranchClient) GetNotDeleted(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id), branch.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchClient) GetNotDeletedX(ctx context.Context, id uint64) *Branch {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for BranchContract.
func (c *BranchContractClient) SoftDelete() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchContractClient) SoftDeleteOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchContractClient) SoftDeleteOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for BranchContract.
func (c *BranchContractClient) QueryNotDeleted() *BranchContractQuery {
	return c.Query().Where(branchcontract.DeletedAtIsNil())
}

// GetNotDeleted returns a BranchContract not deleted entity by its id.
func (c *BranchContractClient) GetNotDeleted(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id), branchcontract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetNotDeletedX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Cabinet.
func (c *CabinetClient) SoftDelete() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetClient) SoftDeleteOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetClient) SoftDeleteOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Cabinet.
func (c *CabinetClient) QueryNotDeleted() *CabinetQuery {
	return c.Query().Where(cabinet.DeletedAtIsNil())
}

// GetNotDeleted returns a Cabinet not deleted entity by its id.
func (c *CabinetClient) GetNotDeleted(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id), cabinet.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetNotDeletedX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for CabinetFault.
func (c *CabinetFaultClient) SoftDelete() *CabinetFaultUpdate {
	mutation := newCabinetFaultMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetFaultClient) SoftDeleteOne(cf *CabinetFault) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(cf))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetFaultClient) SoftDeleteOneID(id uint64) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFaultID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for CabinetFault.
func (c *CabinetFaultClient) QueryNotDeleted() *CabinetFaultQuery {
	return c.Query().Where(cabinetfault.DeletedAtIsNil())
}

// GetNotDeleted returns a CabinetFault not deleted entity by its id.
func (c *CabinetFaultClient) GetNotDeleted(ctx context.Context, id uint64) (*CabinetFault, error) {
	return c.Query().Where(cabinetfault.ID(id), cabinetfault.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetFaultClient) GetNotDeletedX(ctx context.Context, id uint64) *CabinetFault {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for City.
func (c *CityClient) SoftDelete() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CityClient) SoftDeleteOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CityClient) SoftDeleteOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for City.
func (c *CityClient) QueryNotDeleted() *CityQuery {
	return c.Query().Where(city.DeletedAtIsNil())
}

// GetNotDeleted returns a City not deleted entity by its id.
func (c *CityClient) GetNotDeleted(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id), city.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CityClient) GetNotDeletedX(ctx context.Context, id uint64) *City {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Commission.
func (c *CommissionClient) SoftDelete() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CommissionClient) SoftDeleteOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CommissionClient) SoftDeleteOneID(id uint64) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Commission.
func (c *CommissionClient) QueryNotDeleted() *CommissionQuery {
	return c.Query().Where(commission.DeletedAtIsNil())
}

// GetNotDeleted returns a Commission not deleted entity by its id.
func (c *CommissionClient) GetNotDeleted(ctx context.Context, id uint64) (*Commission, error) {
	return c.Query().Where(commission.ID(id), commission.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetNotDeletedX(ctx context.Context, id uint64) *Commission {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Contract.
func (c *ContractClient) SoftDelete() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ContractClient) SoftDeleteOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ContractClient) SoftDeleteOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Contract.
func (c *ContractClient) QueryNotDeleted() *ContractQuery {
	return c.Query().Where(contract.DeletedAtIsNil())
}

// GetNotDeleted returns a Contract not deleted entity by its id.
func (c *ContractClient) GetNotDeleted(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id), contract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ContractClient) GetNotDeletedX(ctx context.Context, id uint64) *Contract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Enterprise.
func (c *EnterpriseClient) SoftDelete() *EnterpriseUpdate {
	mutation := newEnterpriseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseClient) SoftDeleteOne(e *Enterprise) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(e))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseClient) SoftDeleteOneID(id uint64) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterpriseID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Enterprise.
func (c *EnterpriseClient) QueryNotDeleted() *EnterpriseQuery {
	return c.Query().Where(enterprise.DeletedAtIsNil())
}

// GetNotDeleted returns a Enterprise not deleted entity by its id.
func (c *EnterpriseClient) GetNotDeleted(ctx context.Context, id uint64) (*Enterprise, error) {
	return c.Query().Where(enterprise.ID(id), enterprise.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseClient) GetNotDeletedX(ctx context.Context, id uint64) *Enterprise {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Manager.
func (c *ManagerClient) SoftDelete() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ManagerClient) SoftDeleteOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ManagerClient) SoftDeleteOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Manager.
func (c *ManagerClient) QueryNotDeleted() *ManagerQuery {
	return c.Query().Where(manager.DeletedAtIsNil())
}

// GetNotDeleted returns a Manager not deleted entity by its id.
func (c *ManagerClient) GetNotDeleted(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id), manager.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetNotDeletedX(ctx context.Context, id uint64) *Manager {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Order.
func (c *OrderClient) SoftDelete() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderClient) SoftDeleteOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderClient) SoftDeleteOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Order.
func (c *OrderClient) QueryNotDeleted() *OrderQuery {
	return c.Query().Where(order.DeletedAtIsNil())
}

// GetNotDeleted returns a Order not deleted entity by its id.
func (c *OrderClient) GetNotDeleted(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id), order.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderClient) GetNotDeletedX(ctx context.Context, id uint64) *Order {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for OrderAlter.
func (c *OrderAlterClient) SoftDelete() *OrderAlterUpdate {
	mutation := newOrderAlterMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderAlterClient) SoftDeleteOne(oa *OrderAlter) *OrderAlterUpdateOne {
	mutation := newOrderAlterMutation(c.config, OpUpdateOne, withOrderAlter(oa))
	mutation.SetDeletedAt(time.Now())
	return &OrderAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderAlterClient) SoftDeleteOneID(id uint64) *OrderAlterUpdateOne {
	mutation := newOrderAlterMutation(c.config, OpUpdateOne, withOrderAlterID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for OrderAlter.
func (c *OrderAlterClient) QueryNotDeleted() *OrderAlterQuery {
	return c.Query().Where(orderalter.DeletedAtIsNil())
}

// GetNotDeleted returns a OrderAlter not deleted entity by its id.
func (c *OrderAlterClient) GetNotDeleted(ctx context.Context, id uint64) (*OrderAlter, error) {
	return c.Query().Where(orderalter.ID(id), orderalter.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderAlterClient) GetNotDeletedX(ctx context.Context, id uint64) *OrderAlter {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for OrderArrearage.
func (c *OrderArrearageClient) SoftDelete() *OrderArrearageUpdate {
	mutation := newOrderArrearageMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderArrearageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderArrearageClient) SoftDeleteOne(oa *OrderArrearage) *OrderArrearageUpdateOne {
	mutation := newOrderArrearageMutation(c.config, OpUpdateOne, withOrderArrearage(oa))
	mutation.SetDeletedAt(time.Now())
	return &OrderArrearageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderArrearageClient) SoftDeleteOneID(id uint64) *OrderArrearageUpdateOne {
	mutation := newOrderArrearageMutation(c.config, OpUpdateOne, withOrderArrearageID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderArrearageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for OrderArrearage.
func (c *OrderArrearageClient) QueryNotDeleted() *OrderArrearageQuery {
	return c.Query().Where(orderarrearage.DeletedAtIsNil())
}

// GetNotDeleted returns a OrderArrearage not deleted entity by its id.
func (c *OrderArrearageClient) GetNotDeleted(ctx context.Context, id uint64) (*OrderArrearage, error) {
	return c.Query().Where(orderarrearage.ID(id), orderarrearage.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderArrearageClient) GetNotDeletedX(ctx context.Context, id uint64) *OrderArrearage {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for OrderPause.
func (c *OrderPauseClient) SoftDelete() *OrderPauseUpdate {
	mutation := newOrderPauseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderPauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderPauseClient) SoftDeleteOne(op *OrderPause) *OrderPauseUpdateOne {
	mutation := newOrderPauseMutation(c.config, OpUpdateOne, withOrderPause(op))
	mutation.SetDeletedAt(time.Now())
	return &OrderPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderPauseClient) SoftDeleteOneID(id uint64) *OrderPauseUpdateOne {
	mutation := newOrderPauseMutation(c.config, OpUpdateOne, withOrderPauseID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderPauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for OrderPause.
func (c *OrderPauseClient) QueryNotDeleted() *OrderPauseQuery {
	return c.Query().Where(orderpause.DeletedAtIsNil())
}

// GetNotDeleted returns a OrderPause not deleted entity by its id.
func (c *OrderPauseClient) GetNotDeleted(ctx context.Context, id uint64) (*OrderPause, error) {
	return c.Query().Where(orderpause.ID(id), orderpause.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderPauseClient) GetNotDeletedX(ctx context.Context, id uint64) *OrderPause {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Person.
func (c *PersonClient) SoftDelete() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PersonClient) SoftDeleteOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PersonClient) SoftDeleteOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Person.
func (c *PersonClient) QueryNotDeleted() *PersonQuery {
	return c.Query().Where(person.DeletedAtIsNil())
}

// GetNotDeleted returns a Person not deleted entity by its id.
func (c *PersonClient) GetNotDeleted(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id), person.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PersonClient) GetNotDeletedX(ctx context.Context, id uint64) *Person {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Plan.
func (c *PlanClient) SoftDelete() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PlanClient) SoftDeleteOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PlanClient) SoftDeleteOneID(id uint64) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Plan.
func (c *PlanClient) QueryNotDeleted() *PlanQuery {
	return c.Query().Where(plan.DeletedAtIsNil())
}

// GetNotDeleted returns a Plan not deleted entity by its id.
func (c *PlanClient) GetNotDeleted(ctx context.Context, id uint64) (*Plan, error) {
	return c.Query().Where(plan.ID(id), plan.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PlanClient) GetNotDeletedX(ctx context.Context, id uint64) *Plan {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Rider.
func (c *RiderClient) SoftDelete() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderClient) SoftDeleteOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderClient) SoftDeleteOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Rider.
func (c *RiderClient) QueryNotDeleted() *RiderQuery {
	return c.Query().Where(rider.DeletedAtIsNil())
}

// GetNotDeleted returns a Rider not deleted entity by its id.
func (c *RiderClient) GetNotDeleted(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id), rider.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderClient) GetNotDeletedX(ctx context.Context, id uint64) *Rider {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Store.
func (c *StoreClient) SoftDelete() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StoreClient) SoftDeleteOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StoreClient) SoftDeleteOneID(id uint64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Store.
func (c *StoreClient) QueryNotDeleted() *StoreQuery {
	return c.Query().Where(store.DeletedAtIsNil())
}

// GetNotDeleted returns a Store not deleted entity by its id.
func (c *StoreClient) GetNotDeleted(ctx context.Context, id uint64) (*Store, error) {
	return c.Query().Where(store.ID(id), store.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StoreClient) GetNotDeletedX(ctx context.Context, id uint64) *Store {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}
