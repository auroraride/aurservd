// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/auroraride/aurservd/internal/ent/activity"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetec"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/contracttemplate"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/fault"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/instructions"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/promotionachievement"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
	"github.com/auroraride/aurservd/internal/ent/promotionprivilege"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/question"
	"github.com/auroraride/aurservd/internal/ent/questioncategory"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/riderphonedevice"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/version"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// SoftDelete returns an soft delete builder for Activity.
func (c *ActivityClient) SoftDelete() *ActivityUpdate {
	mutation := newActivityMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ActivityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ActivityClient) SoftDeleteOne(a *Activity) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivity(a))
	mutation.SetDeletedAt(time.Now())
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ActivityClient) SoftDeleteOneID(id uint64) *ActivityUpdateOne {
	mutation := newActivityMutation(c.config, OpUpdateOne, withActivityID(id))
	mutation.SetDeletedAt(time.Now())
	return &ActivityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Activity.
func (c *ActivityClient) QueryNotDeleted() *ActivityQuery {
	return c.Query().Where(activity.DeletedAtIsNil())
}

// GetNotDeleted returns a Activity not deleted entity by its id.
func (c *ActivityClient) GetNotDeleted(ctx context.Context, id uint64) (*Activity, error) {
	return c.Query().Where(activity.ID(id), activity.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ActivityClient) GetNotDeletedX(ctx context.Context, id uint64) *Activity {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Agent.
func (c *AgentClient) SoftDelete() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AgentClient) SoftDeleteOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AgentClient) SoftDeleteOneID(id uint64) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Agent.
func (c *AgentClient) QueryNotDeleted() *AgentQuery {
	return c.Query().Where(agent.DeletedAtIsNil())
}

// GetNotDeleted returns a Agent not deleted entity by its id.
func (c *AgentClient) GetNotDeleted(ctx context.Context, id uint64) (*Agent, error) {
	return c.Query().Where(agent.ID(id), agent.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AgentClient) GetNotDeletedX(ctx context.Context, id uint64) *Agent {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Agreement.
func (c *AgreementClient) SoftDelete() *AgreementUpdate {
	mutation := newAgreementMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AgreementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AgreementClient) SoftDeleteOne(a *Agreement) *AgreementUpdateOne {
	mutation := newAgreementMutation(c.config, OpUpdateOne, withAgreement(a))
	mutation.SetDeletedAt(time.Now())
	return &AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AgreementClient) SoftDeleteOneID(id uint64) *AgreementUpdateOne {
	mutation := newAgreementMutation(c.config, OpUpdateOne, withAgreementID(id))
	mutation.SetDeletedAt(time.Now())
	return &AgreementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Agreement.
func (c *AgreementClient) QueryNotDeleted() *AgreementQuery {
	return c.Query().Where(agreement.DeletedAtIsNil())
}

// GetNotDeleted returns a Agreement not deleted entity by its id.
func (c *AgreementClient) GetNotDeleted(ctx context.Context, id uint64) (*Agreement, error) {
	return c.Query().Where(agreement.ID(id), agreement.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AgreementClient) GetNotDeletedX(ctx context.Context, id uint64) *Agreement {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Asset.
func (c *AssetClient) SoftDelete() *AssetUpdate {
	mutation := newAssetMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetClient) SoftDeleteOne(a *Asset) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(a))
	mutation.SetDeletedAt(time.Now())
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetClient) SoftDeleteOneID(id uint64) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAssetID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Asset.
func (c *AssetClient) QueryNotDeleted() *AssetQuery {
	return c.Query().Where(asset.DeletedAtIsNil())
}

// GetNotDeleted returns a Asset not deleted entity by its id.
func (c *AssetClient) GetNotDeleted(ctx context.Context, id uint64) (*Asset, error) {
	return c.Query().Where(asset.ID(id), asset.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetClient) GetNotDeletedX(ctx context.Context, id uint64) *Asset {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetCheck.
func (c *AssetCheckClient) SoftDelete() *AssetCheckUpdate {
	mutation := newAssetCheckMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetCheckClient) SoftDeleteOne(ac *AssetCheck) *AssetCheckUpdateOne {
	mutation := newAssetCheckMutation(c.config, OpUpdateOne, withAssetCheck(ac))
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetCheckClient) SoftDeleteOneID(id uint64) *AssetCheckUpdateOne {
	mutation := newAssetCheckMutation(c.config, OpUpdateOne, withAssetCheckID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetCheck.
func (c *AssetCheckClient) QueryNotDeleted() *AssetCheckQuery {
	return c.Query().Where(assetcheck.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetCheck not deleted entity by its id.
func (c *AssetCheckClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetCheck, error) {
	return c.Query().Where(assetcheck.ID(id), assetcheck.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetCheckClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetCheck {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetCheckDetails.
func (c *AssetCheckDetailsClient) SoftDelete() *AssetCheckDetailsUpdate {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetCheckDetailsClient) SoftDeleteOne(acd *AssetCheckDetails) *AssetCheckDetailsUpdateOne {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdateOne, withAssetCheckDetails(acd))
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetCheckDetailsClient) SoftDeleteOneID(id uint64) *AssetCheckDetailsUpdateOne {
	mutation := newAssetCheckDetailsMutation(c.config, OpUpdateOne, withAssetCheckDetailsID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetCheckDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetCheckDetails.
func (c *AssetCheckDetailsClient) QueryNotDeleted() *AssetCheckDetailsQuery {
	return c.Query().Where(assetcheckdetails.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetCheckDetails not deleted entity by its id.
func (c *AssetCheckDetailsClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetCheckDetails, error) {
	return c.Query().Where(assetcheckdetails.ID(id), assetcheckdetails.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetCheckDetailsClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetCheckDetails {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetMaintenance.
func (c *AssetMaintenanceClient) SoftDelete() *AssetMaintenanceUpdate {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetMaintenanceClient) SoftDeleteOne(am *AssetMaintenance) *AssetMaintenanceUpdateOne {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdateOne, withAssetMaintenance(am))
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetMaintenanceClient) SoftDeleteOneID(id uint64) *AssetMaintenanceUpdateOne {
	mutation := newAssetMaintenanceMutation(c.config, OpUpdateOne, withAssetMaintenanceID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetMaintenance.
func (c *AssetMaintenanceClient) QueryNotDeleted() *AssetMaintenanceQuery {
	return c.Query().Where(assetmaintenance.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetMaintenance not deleted entity by its id.
func (c *AssetMaintenanceClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetMaintenance, error) {
	return c.Query().Where(assetmaintenance.ID(id), assetmaintenance.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetMaintenanceClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetMaintenance {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) SoftDelete() *AssetMaintenanceDetailsUpdate {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetMaintenanceDetailsClient) SoftDeleteOne(amd *AssetMaintenanceDetails) *AssetMaintenanceDetailsUpdateOne {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdateOne, withAssetMaintenanceDetails(amd))
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetMaintenanceDetailsClient) SoftDeleteOneID(id uint64) *AssetMaintenanceDetailsUpdateOne {
	mutation := newAssetMaintenanceDetailsMutation(c.config, OpUpdateOne, withAssetMaintenanceDetailsID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetMaintenanceDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetMaintenanceDetails.
func (c *AssetMaintenanceDetailsClient) QueryNotDeleted() *AssetMaintenanceDetailsQuery {
	return c.Query().Where(assetmaintenancedetails.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetMaintenanceDetails not deleted entity by its id.
func (c *AssetMaintenanceDetailsClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetMaintenanceDetails, error) {
	return c.Query().Where(assetmaintenancedetails.ID(id), assetmaintenancedetails.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetMaintenanceDetailsClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetMaintenanceDetails {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetManager.
func (c *AssetManagerClient) SoftDelete() *AssetManagerUpdate {
	mutation := newAssetManagerMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetManagerClient) SoftDeleteOne(am *AssetManager) *AssetManagerUpdateOne {
	mutation := newAssetManagerMutation(c.config, OpUpdateOne, withAssetManager(am))
	mutation.SetDeletedAt(time.Now())
	return &AssetManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetManagerClient) SoftDeleteOneID(id uint64) *AssetManagerUpdateOne {
	mutation := newAssetManagerMutation(c.config, OpUpdateOne, withAssetManagerID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetManager.
func (c *AssetManagerClient) QueryNotDeleted() *AssetManagerQuery {
	return c.Query().Where(assetmanager.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetManager not deleted entity by its id.
func (c *AssetManagerClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetManager, error) {
	return c.Query().Where(assetmanager.ID(id), assetmanager.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetManagerClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetManager {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetTransfer.
func (c *AssetTransferClient) SoftDelete() *AssetTransferUpdate {
	mutation := newAssetTransferMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetTransferClient) SoftDeleteOne(at *AssetTransfer) *AssetTransferUpdateOne {
	mutation := newAssetTransferMutation(c.config, OpUpdateOne, withAssetTransfer(at))
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetTransferClient) SoftDeleteOneID(id uint64) *AssetTransferUpdateOne {
	mutation := newAssetTransferMutation(c.config, OpUpdateOne, withAssetTransferID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetTransfer.
func (c *AssetTransferClient) QueryNotDeleted() *AssetTransferQuery {
	return c.Query().Where(assettransfer.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetTransfer not deleted entity by its id.
func (c *AssetTransferClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetTransfer, error) {
	return c.Query().Where(assettransfer.ID(id), assettransfer.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetTransferClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetTransfer {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for AssetTransferDetails.
func (c *AssetTransferDetailsClient) SoftDelete() *AssetTransferDetailsUpdate {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssetTransferDetailsClient) SoftDeleteOne(atd *AssetTransferDetails) *AssetTransferDetailsUpdateOne {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdateOne, withAssetTransferDetails(atd))
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssetTransferDetailsClient) SoftDeleteOneID(id uint64) *AssetTransferDetailsUpdateOne {
	mutation := newAssetTransferDetailsMutation(c.config, OpUpdateOne, withAssetTransferDetailsID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssetTransferDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for AssetTransferDetails.
func (c *AssetTransferDetailsClient) QueryNotDeleted() *AssetTransferDetailsQuery {
	return c.Query().Where(assettransferdetails.DeletedAtIsNil())
}

// GetNotDeleted returns a AssetTransferDetails not deleted entity by its id.
func (c *AssetTransferDetailsClient) GetNotDeleted(ctx context.Context, id uint64) (*AssetTransferDetails, error) {
	return c.Query().Where(assettransferdetails.ID(id), assettransferdetails.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssetTransferDetailsClient) GetNotDeletedX(ctx context.Context, id uint64) *AssetTransferDetails {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Assistance.
func (c *AssistanceClient) SoftDelete() *AssistanceUpdate {
	mutation := newAssistanceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssistanceClient) SoftDeleteOne(a *Assistance) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistance(a))
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssistanceClient) SoftDeleteOneID(id uint64) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistanceID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Assistance.
func (c *AssistanceClient) QueryNotDeleted() *AssistanceQuery {
	return c.Query().Where(assistance.DeletedAtIsNil())
}

// GetNotDeleted returns a Assistance not deleted entity by its id.
func (c *AssistanceClient) GetNotDeleted(ctx context.Context, id uint64) (*Assistance, error) {
	return c.Query().Where(assistance.ID(id), assistance.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssistanceClient) GetNotDeletedX(ctx context.Context, id uint64) *Assistance {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Attendance.
func (c *AttendanceClient) SoftDelete() *AttendanceUpdate {
	mutation := newAttendanceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AttendanceClient) SoftDeleteOne(a *Attendance) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(a))
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AttendanceClient) SoftDeleteOneID(id uint64) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendanceID(id))
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Attendance.
func (c *AttendanceClient) QueryNotDeleted() *AttendanceQuery {
	return c.Query().Where(attendance.DeletedAtIsNil())
}

// GetNotDeleted returns a Attendance not deleted entity by its id.
func (c *AttendanceClient) GetNotDeleted(ctx context.Context, id uint64) (*Attendance, error) {
	return c.Query().Where(attendance.ID(id), attendance.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AttendanceClient) GetNotDeletedX(ctx context.Context, id uint64) *Attendance {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Battery.
func (c *BatteryClient) SoftDelete() *BatteryUpdate {
	mutation := newBatteryMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BatteryClient) SoftDeleteOne(b *Battery) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(b))
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BatteryClient) SoftDeleteOneID(id uint64) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBatteryID(id))
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Battery.
func (c *BatteryClient) QueryNotDeleted() *BatteryQuery {
	return c.Query().Where(battery.DeletedAtIsNil())
}

// GetNotDeleted returns a Battery not deleted entity by its id.
func (c *BatteryClient) GetNotDeleted(ctx context.Context, id uint64) (*Battery, error) {
	return c.Query().Where(battery.ID(id), battery.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BatteryClient) GetNotDeletedX(ctx context.Context, id uint64) *Battery {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Branch.
func (c *BranchClient) SoftDelete() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchClient) SoftDeleteOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchClient) SoftDeleteOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Branch.
func (c *BranchClient) QueryNotDeleted() *BranchQuery {
	return c.Query().Where(branch.DeletedAtIsNil())
}

// GetNotDeleted returns a Branch not deleted entity by its id.
func (c *BranchClient) GetNotDeleted(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id), branch.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchClient) GetNotDeletedX(ctx context.Context, id uint64) *Branch {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for BranchContract.
func (c *BranchContractClient) SoftDelete() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchContractClient) SoftDeleteOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchContractClient) SoftDeleteOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for BranchContract.
func (c *BranchContractClient) QueryNotDeleted() *BranchContractQuery {
	return c.Query().Where(branchcontract.DeletedAtIsNil())
}

// GetNotDeleted returns a BranchContract not deleted entity by its id.
func (c *BranchContractClient) GetNotDeleted(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id), branchcontract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetNotDeletedX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Business.
func (c *BusinessClient) SoftDelete() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BusinessClient) SoftDeleteOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BusinessClient) SoftDeleteOneID(id uint64) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Business.
func (c *BusinessClient) QueryNotDeleted() *BusinessQuery {
	return c.Query().Where(business.DeletedAtIsNil())
}

// GetNotDeleted returns a Business not deleted entity by its id.
func (c *BusinessClient) GetNotDeleted(ctx context.Context, id uint64) (*Business, error) {
	return c.Query().Where(business.ID(id), business.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetNotDeletedX(ctx context.Context, id uint64) *Business {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Cabinet.
func (c *CabinetClient) SoftDelete() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetClient) SoftDeleteOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetClient) SoftDeleteOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Cabinet.
func (c *CabinetClient) QueryNotDeleted() *CabinetQuery {
	return c.Query().Where(cabinet.DeletedAtIsNil())
}

// GetNotDeleted returns a Cabinet not deleted entity by its id.
func (c *CabinetClient) GetNotDeleted(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id), cabinet.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetNotDeletedX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for CabinetEc.
func (c *CabinetEcClient) SoftDelete() *CabinetEcUpdate {
	mutation := newCabinetEcMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetEcUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetEcClient) SoftDeleteOne(ce *CabinetEc) *CabinetEcUpdateOne {
	mutation := newCabinetEcMutation(c.config, OpUpdateOne, withCabinetEc(ce))
	mutation.SetDeletedAt(time.Now())
	return &CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetEcClient) SoftDeleteOneID(id uint64) *CabinetEcUpdateOne {
	mutation := newCabinetEcMutation(c.config, OpUpdateOne, withCabinetEcID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetEcUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for CabinetEc.
func (c *CabinetEcClient) QueryNotDeleted() *CabinetEcQuery {
	return c.Query().Where(cabinetec.DeletedAtIsNil())
}

// GetNotDeleted returns a CabinetEc not deleted entity by its id.
func (c *CabinetEcClient) GetNotDeleted(ctx context.Context, id uint64) (*CabinetEc, error) {
	return c.Query().Where(cabinetec.ID(id), cabinetec.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetEcClient) GetNotDeletedX(ctx context.Context, id uint64) *CabinetEc {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for CabinetFault.
func (c *CabinetFaultClient) SoftDelete() *CabinetFaultUpdate {
	mutation := newCabinetFaultMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetFaultClient) SoftDeleteOne(cf *CabinetFault) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(cf))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetFaultClient) SoftDeleteOneID(id uint64) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFaultID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for CabinetFault.
func (c *CabinetFaultClient) QueryNotDeleted() *CabinetFaultQuery {
	return c.Query().Where(cabinetfault.DeletedAtIsNil())
}

// GetNotDeleted returns a CabinetFault not deleted entity by its id.
func (c *CabinetFaultClient) GetNotDeleted(ctx context.Context, id uint64) (*CabinetFault, error) {
	return c.Query().Where(cabinetfault.ID(id), cabinetfault.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetFaultClient) GetNotDeletedX(ctx context.Context, id uint64) *CabinetFault {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for City.
func (c *CityClient) SoftDelete() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CityClient) SoftDeleteOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CityClient) SoftDeleteOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for City.
func (c *CityClient) QueryNotDeleted() *CityQuery {
	return c.Query().Where(city.DeletedAtIsNil())
}

// GetNotDeleted returns a City not deleted entity by its id.
func (c *CityClient) GetNotDeleted(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id), city.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CityClient) GetNotDeletedX(ctx context.Context, id uint64) *City {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Commission.
func (c *CommissionClient) SoftDelete() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CommissionClient) SoftDeleteOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CommissionClient) SoftDeleteOneID(id uint64) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Commission.
func (c *CommissionClient) QueryNotDeleted() *CommissionQuery {
	return c.Query().Where(commission.DeletedAtIsNil())
}

// GetNotDeleted returns a Commission not deleted entity by its id.
func (c *CommissionClient) GetNotDeleted(ctx context.Context, id uint64) (*Commission, error) {
	return c.Query().Where(commission.ID(id), commission.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetNotDeletedX(ctx context.Context, id uint64) *Commission {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Contract.
func (c *ContractClient) SoftDelete() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ContractClient) SoftDeleteOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ContractClient) SoftDeleteOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Contract.
func (c *ContractClient) QueryNotDeleted() *ContractQuery {
	return c.Query().Where(contract.DeletedAtIsNil())
}

// GetNotDeleted returns a Contract not deleted entity by its id.
func (c *ContractClient) GetNotDeleted(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id), contract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ContractClient) GetNotDeletedX(ctx context.Context, id uint64) *Contract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for ContractTemplate.
func (c *ContractTemplateClient) SoftDelete() *ContractTemplateUpdate {
	mutation := newContractTemplateMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ContractTemplateUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ContractTemplateClient) SoftDeleteOne(ct *ContractTemplate) *ContractTemplateUpdateOne {
	mutation := newContractTemplateMutation(c.config, OpUpdateOne, withContractTemplate(ct))
	mutation.SetDeletedAt(time.Now())
	return &ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ContractTemplateClient) SoftDeleteOneID(id uint64) *ContractTemplateUpdateOne {
	mutation := newContractTemplateMutation(c.config, OpUpdateOne, withContractTemplateID(id))
	mutation.SetDeletedAt(time.Now())
	return &ContractTemplateUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for ContractTemplate.
func (c *ContractTemplateClient) QueryNotDeleted() *ContractTemplateQuery {
	return c.Query().Where(contracttemplate.DeletedAtIsNil())
}

// GetNotDeleted returns a ContractTemplate not deleted entity by its id.
func (c *ContractTemplateClient) GetNotDeleted(ctx context.Context, id uint64) (*ContractTemplate, error) {
	return c.Query().Where(contracttemplate.ID(id), contracttemplate.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ContractTemplateClient) GetNotDeletedX(ctx context.Context, id uint64) *ContractTemplate {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EbikeBrand.
func (c *EbikeBrandClient) SoftDelete() *EbikeBrandUpdate {
	mutation := newEbikeBrandMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EbikeBrandClient) SoftDeleteOne(eb *EbikeBrand) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrand(eb))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EbikeBrandClient) SoftDeleteOneID(id uint64) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrandID(id))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EbikeBrand.
func (c *EbikeBrandClient) QueryNotDeleted() *EbikeBrandQuery {
	return c.Query().Where(ebikebrand.DeletedAtIsNil())
}

// GetNotDeleted returns a EbikeBrand not deleted entity by its id.
func (c *EbikeBrandClient) GetNotDeleted(ctx context.Context, id uint64) (*EbikeBrand, error) {
	return c.Query().Where(ebikebrand.ID(id), ebikebrand.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EbikeBrandClient) GetNotDeletedX(ctx context.Context, id uint64) *EbikeBrand {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) SoftDelete() *EbikeBrandAttributeUpdate {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandAttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EbikeBrandAttributeClient) SoftDeleteOne(eba *EbikeBrandAttribute) *EbikeBrandAttributeUpdateOne {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdateOne, withEbikeBrandAttribute(eba))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EbikeBrandAttributeClient) SoftDeleteOneID(id uint64) *EbikeBrandAttributeUpdateOne {
	mutation := newEbikeBrandAttributeMutation(c.config, OpUpdateOne, withEbikeBrandAttributeID(id))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandAttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EbikeBrandAttribute.
func (c *EbikeBrandAttributeClient) QueryNotDeleted() *EbikeBrandAttributeQuery {
	return c.Query().Where(ebikebrandattribute.DeletedAtIsNil())
}

// GetNotDeleted returns a EbikeBrandAttribute not deleted entity by its id.
func (c *EbikeBrandAttributeClient) GetNotDeleted(ctx context.Context, id uint64) (*EbikeBrandAttribute, error) {
	return c.Query().Where(ebikebrandattribute.ID(id), ebikebrandattribute.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EbikeBrandAttributeClient) GetNotDeletedX(ctx context.Context, id uint64) *EbikeBrandAttribute {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Employee.
func (c *EmployeeClient) SoftDelete() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EmployeeClient) SoftDeleteOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EmployeeClient) SoftDeleteOneID(id uint64) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Employee.
func (c *EmployeeClient) QueryNotDeleted() *EmployeeQuery {
	return c.Query().Where(employee.DeletedAtIsNil())
}

// GetNotDeleted returns a Employee not deleted entity by its id.
func (c *EmployeeClient) GetNotDeleted(ctx context.Context, id uint64) (*Employee, error) {
	return c.Query().Where(employee.ID(id), employee.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetNotDeletedX(ctx context.Context, id uint64) *Employee {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Enterprise.
func (c *EnterpriseClient) SoftDelete() *EnterpriseUpdate {
	mutation := newEnterpriseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseClient) SoftDeleteOne(e *Enterprise) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(e))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseClient) SoftDeleteOneID(id uint64) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterpriseID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Enterprise.
func (c *EnterpriseClient) QueryNotDeleted() *EnterpriseQuery {
	return c.Query().Where(enterprise.DeletedAtIsNil())
}

// GetNotDeleted returns a Enterprise not deleted entity by its id.
func (c *EnterpriseClient) GetNotDeleted(ctx context.Context, id uint64) (*Enterprise, error) {
	return c.Query().Where(enterprise.ID(id), enterprise.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseClient) GetNotDeletedX(ctx context.Context, id uint64) *Enterprise {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseBill.
func (c *EnterpriseBillClient) SoftDelete() *EnterpriseBillUpdate {
	mutation := newEnterpriseBillMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseBillClient) SoftDeleteOne(eb *EnterpriseBill) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBill(eb))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseBillClient) SoftDeleteOneID(id uint64) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBillID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseBill.
func (c *EnterpriseBillClient) QueryNotDeleted() *EnterpriseBillQuery {
	return c.Query().Where(enterprisebill.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseBill not deleted entity by its id.
func (c *EnterpriseBillClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseBill, error) {
	return c.Query().Where(enterprisebill.ID(id), enterprisebill.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseBillClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseBill {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseContract.
func (c *EnterpriseContractClient) SoftDelete() *EnterpriseContractUpdate {
	mutation := newEnterpriseContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseContractClient) SoftDeleteOne(ec *EnterpriseContract) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContract(ec))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseContractClient) SoftDeleteOneID(id uint64) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseContract.
func (c *EnterpriseContractClient) QueryNotDeleted() *EnterpriseContractQuery {
	return c.Query().Where(enterprisecontract.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseContract not deleted entity by its id.
func (c *EnterpriseContractClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseContract, error) {
	return c.Query().Where(enterprisecontract.ID(id), enterprisecontract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseContractClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseContract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterprisePrice.
func (c *EnterprisePriceClient) SoftDelete() *EnterprisePriceUpdate {
	mutation := newEnterprisePriceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterprisePriceClient) SoftDeleteOne(ep *EnterprisePrice) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePrice(ep))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterprisePriceClient) SoftDeleteOneID(id uint64) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePriceID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterprisePrice.
func (c *EnterprisePriceClient) QueryNotDeleted() *EnterprisePriceQuery {
	return c.Query().Where(enterpriseprice.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterprisePrice not deleted entity by its id.
func (c *EnterprisePriceClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterprisePrice, error) {
	return c.Query().Where(enterpriseprice.ID(id), enterpriseprice.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterprisePriceClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterprisePrice {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) SoftDelete() *EnterpriseStatementUpdate {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseStatementClient) SoftDeleteOne(es *EnterpriseStatement) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatement(es))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseStatementClient) SoftDeleteOneID(id uint64) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatementID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryNotDeleted() *EnterpriseStatementQuery {
	return c.Query().Where(enterprisestatement.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseStatement not deleted entity by its id.
func (c *EnterpriseStatementClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseStatement, error) {
	return c.Query().Where(enterprisestatement.ID(id), enterprisestatement.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseStatementClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseStatement {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseStation.
func (c *EnterpriseStationClient) SoftDelete() *EnterpriseStationUpdate {
	mutation := newEnterpriseStationMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseStationClient) SoftDeleteOne(es *EnterpriseStation) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStation(es))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseStationClient) SoftDeleteOneID(id uint64) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStationID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseStation.
func (c *EnterpriseStationClient) QueryNotDeleted() *EnterpriseStationQuery {
	return c.Query().Where(enterprisestation.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseStation not deleted entity by its id.
func (c *EnterpriseStationClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseStation, error) {
	return c.Query().Where(enterprisestation.ID(id), enterprisestation.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseStationClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseStation {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Exception.
func (c *ExceptionClient) SoftDelete() *ExceptionUpdate {
	mutation := newExceptionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExceptionClient) SoftDeleteOne(e *Exception) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withException(e))
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExceptionClient) SoftDeleteOneID(id uint64) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withExceptionID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Exception.
func (c *ExceptionClient) QueryNotDeleted() *ExceptionQuery {
	return c.Query().Where(exception.DeletedAtIsNil())
}

// GetNotDeleted returns a Exception not deleted entity by its id.
func (c *ExceptionClient) GetNotDeleted(ctx context.Context, id uint64) (*Exception, error) {
	return c.Query().Where(exception.ID(id), exception.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExceptionClient) GetNotDeletedX(ctx context.Context, id uint64) *Exception {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Exchange.
func (c *ExchangeClient) SoftDelete() *ExchangeUpdate {
	mutation := newExchangeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExchangeClient) SoftDeleteOne(e *Exchange) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(e))
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExchangeClient) SoftDeleteOneID(id uint64) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchangeID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Exchange.
func (c *ExchangeClient) QueryNotDeleted() *ExchangeQuery {
	return c.Query().Where(exchange.DeletedAtIsNil())
}

// GetNotDeleted returns a Exchange not deleted entity by its id.
func (c *ExchangeClient) GetNotDeleted(ctx context.Context, id uint64) (*Exchange, error) {
	return c.Query().Where(exchange.ID(id), exchange.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExchangeClient) GetNotDeletedX(ctx context.Context, id uint64) *Exchange {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Export.
func (c *ExportClient) SoftDelete() *ExportUpdate {
	mutation := newExportMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExportClient) SoftDeleteOne(e *Export) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExport(e))
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExportClient) SoftDeleteOneID(id uint64) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExportID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Export.
func (c *ExportClient) QueryNotDeleted() *ExportQuery {
	return c.Query().Where(export.DeletedAtIsNil())
}

// GetNotDeleted returns a Export not deleted entity by its id.
func (c *ExportClient) GetNotDeleted(ctx context.Context, id uint64) (*Export, error) {
	return c.Query().Where(export.ID(id), export.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExportClient) GetNotDeletedX(ctx context.Context, id uint64) *Export {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Fault.
func (c *FaultClient) SoftDelete() *FaultUpdate {
	mutation := newFaultMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &FaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *FaultClient) SoftDeleteOne(f *Fault) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFault(f))
	mutation.SetDeletedAt(time.Now())
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *FaultClient) SoftDeleteOneID(id uint64) *FaultUpdateOne {
	mutation := newFaultMutation(c.config, OpUpdateOne, withFaultID(id))
	mutation.SetDeletedAt(time.Now())
	return &FaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Fault.
func (c *FaultClient) QueryNotDeleted() *FaultQuery {
	return c.Query().Where(fault.DeletedAtIsNil())
}

// GetNotDeleted returns a Fault not deleted entity by its id.
func (c *FaultClient) GetNotDeleted(ctx context.Context, id uint64) (*Fault, error) {
	return c.Query().Where(fault.ID(id), fault.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *FaultClient) GetNotDeletedX(ctx context.Context, id uint64) *Fault {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Goods.
func (c *GoodsClient) SoftDelete() *GoodsUpdate {
	mutation := newGoodsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &GoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *GoodsClient) SoftDeleteOne(_go *Goods) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoods(_go))
	mutation.SetDeletedAt(time.Now())
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *GoodsClient) SoftDeleteOneID(id uint64) *GoodsUpdateOne {
	mutation := newGoodsMutation(c.config, OpUpdateOne, withGoodsID(id))
	mutation.SetDeletedAt(time.Now())
	return &GoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Goods.
func (c *GoodsClient) QueryNotDeleted() *GoodsQuery {
	return c.Query().Where(goods.DeletedAtIsNil())
}

// GetNotDeleted returns a Goods not deleted entity by its id.
func (c *GoodsClient) GetNotDeleted(ctx context.Context, id uint64) (*Goods, error) {
	return c.Query().Where(goods.ID(id), goods.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *GoodsClient) GetNotDeletedX(ctx context.Context, id uint64) *Goods {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Instructions.
func (c *InstructionsClient) SoftDelete() *InstructionsUpdate {
	mutation := newInstructionsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &InstructionsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *InstructionsClient) SoftDeleteOne(i *Instructions) *InstructionsUpdateOne {
	mutation := newInstructionsMutation(c.config, OpUpdateOne, withInstructions(i))
	mutation.SetDeletedAt(time.Now())
	return &InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *InstructionsClient) SoftDeleteOneID(id uint64) *InstructionsUpdateOne {
	mutation := newInstructionsMutation(c.config, OpUpdateOne, withInstructionsID(id))
	mutation.SetDeletedAt(time.Now())
	return &InstructionsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Instructions.
func (c *InstructionsClient) QueryNotDeleted() *InstructionsQuery {
	return c.Query().Where(instructions.DeletedAtIsNil())
}

// GetNotDeleted returns a Instructions not deleted entity by its id.
func (c *InstructionsClient) GetNotDeleted(ctx context.Context, id uint64) (*Instructions, error) {
	return c.Query().Where(instructions.ID(id), instructions.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *InstructionsClient) GetNotDeletedX(ctx context.Context, id uint64) *Instructions {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Inventory.
func (c *InventoryClient) SoftDelete() *InventoryUpdate {
	mutation := newInventoryMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *InventoryClient) SoftDeleteOne(i *Inventory) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(i))
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *InventoryClient) SoftDeleteOneID(id uint64) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventoryID(id))
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Inventory.
func (c *InventoryClient) QueryNotDeleted() *InventoryQuery {
	return c.Query().Where(inventory.DeletedAtIsNil())
}

// GetNotDeleted returns a Inventory not deleted entity by its id.
func (c *InventoryClient) GetNotDeleted(ctx context.Context, id uint64) (*Inventory, error) {
	return c.Query().Where(inventory.ID(id), inventory.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *InventoryClient) GetNotDeletedX(ctx context.Context, id uint64) *Inventory {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Manager.
func (c *ManagerClient) SoftDelete() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ManagerClient) SoftDeleteOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ManagerClient) SoftDeleteOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Manager.
func (c *ManagerClient) QueryNotDeleted() *ManagerQuery {
	return c.Query().Where(manager.DeletedAtIsNil())
}

// GetNotDeleted returns a Manager not deleted entity by its id.
func (c *ManagerClient) GetNotDeleted(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id), manager.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetNotDeletedX(ctx context.Context, id uint64) *Manager {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Material.
func (c *MaterialClient) SoftDelete() *MaterialUpdate {
	mutation := newMaterialMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &MaterialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *MaterialClient) SoftDeleteOne(m *Material) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterial(m))
	mutation.SetDeletedAt(time.Now())
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *MaterialClient) SoftDeleteOneID(id uint64) *MaterialUpdateOne {
	mutation := newMaterialMutation(c.config, OpUpdateOne, withMaterialID(id))
	mutation.SetDeletedAt(time.Now())
	return &MaterialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Material.
func (c *MaterialClient) QueryNotDeleted() *MaterialQuery {
	return c.Query().Where(material.DeletedAtIsNil())
}

// GetNotDeleted returns a Material not deleted entity by its id.
func (c *MaterialClient) GetNotDeleted(ctx context.Context, id uint64) (*Material, error) {
	return c.Query().Where(material.ID(id), material.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *MaterialClient) GetNotDeletedX(ctx context.Context, id uint64) *Material {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Order.
func (c *OrderClient) SoftDelete() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderClient) SoftDeleteOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderClient) SoftDeleteOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Order.
func (c *OrderClient) QueryNotDeleted() *OrderQuery {
	return c.Query().Where(order.DeletedAtIsNil())
}

// GetNotDeleted returns a Order not deleted entity by its id.
func (c *OrderClient) GetNotDeleted(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id), order.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderClient) GetNotDeletedX(ctx context.Context, id uint64) *Order {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for OrderRefund.
func (c *OrderRefundClient) SoftDelete() *OrderRefundUpdate {
	mutation := newOrderRefundMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderRefundClient) SoftDeleteOne(or *OrderRefund) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefund(or))
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderRefundClient) SoftDeleteOneID(id uint64) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefundID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for OrderRefund.
func (c *OrderRefundClient) QueryNotDeleted() *OrderRefundQuery {
	return c.Query().Where(orderrefund.DeletedAtIsNil())
}

// GetNotDeleted returns a OrderRefund not deleted entity by its id.
func (c *OrderRefundClient) GetNotDeleted(ctx context.Context, id uint64) (*OrderRefund, error) {
	return c.Query().Where(orderrefund.ID(id), orderrefund.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderRefundClient) GetNotDeletedX(ctx context.Context, id uint64) *OrderRefund {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Person.
func (c *PersonClient) SoftDelete() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PersonClient) SoftDeleteOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PersonClient) SoftDeleteOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Person.
func (c *PersonClient) QueryNotDeleted() *PersonQuery {
	return c.Query().Where(person.DeletedAtIsNil())
}

// GetNotDeleted returns a Person not deleted entity by its id.
func (c *PersonClient) GetNotDeleted(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id), person.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PersonClient) GetNotDeletedX(ctx context.Context, id uint64) *Person {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Plan.
func (c *PlanClient) SoftDelete() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PlanClient) SoftDeleteOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PlanClient) SoftDeleteOneID(id uint64) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Plan.
func (c *PlanClient) QueryNotDeleted() *PlanQuery {
	return c.Query().Where(plan.DeletedAtIsNil())
}

// GetNotDeleted returns a Plan not deleted entity by its id.
func (c *PlanClient) GetNotDeleted(ctx context.Context, id uint64) (*Plan, error) {
	return c.Query().Where(plan.ID(id), plan.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PlanClient) GetNotDeletedX(ctx context.Context, id uint64) *Plan {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionAchievement.
func (c *PromotionAchievementClient) SoftDelete() *PromotionAchievementUpdate {
	mutation := newPromotionAchievementMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionAchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionAchievementClient) SoftDeleteOne(pa *PromotionAchievement) *PromotionAchievementUpdateOne {
	mutation := newPromotionAchievementMutation(c.config, OpUpdateOne, withPromotionAchievement(pa))
	mutation.SetDeletedAt(time.Now())
	return &PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionAchievementClient) SoftDeleteOneID(id uint64) *PromotionAchievementUpdateOne {
	mutation := newPromotionAchievementMutation(c.config, OpUpdateOne, withPromotionAchievementID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionAchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionAchievement.
func (c *PromotionAchievementClient) QueryNotDeleted() *PromotionAchievementQuery {
	return c.Query().Where(promotionachievement.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionAchievement not deleted entity by its id.
func (c *PromotionAchievementClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionAchievement, error) {
	return c.Query().Where(promotionachievement.ID(id), promotionachievement.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionAchievementClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionAchievement {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionBankCard.
func (c *PromotionBankCardClient) SoftDelete() *PromotionBankCardUpdate {
	mutation := newPromotionBankCardMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionBankCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionBankCardClient) SoftDeleteOne(pbc *PromotionBankCard) *PromotionBankCardUpdateOne {
	mutation := newPromotionBankCardMutation(c.config, OpUpdateOne, withPromotionBankCard(pbc))
	mutation.SetDeletedAt(time.Now())
	return &PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionBankCardClient) SoftDeleteOneID(id uint64) *PromotionBankCardUpdateOne {
	mutation := newPromotionBankCardMutation(c.config, OpUpdateOne, withPromotionBankCardID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionBankCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionBankCard.
func (c *PromotionBankCardClient) QueryNotDeleted() *PromotionBankCardQuery {
	return c.Query().Where(promotionbankcard.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionBankCard not deleted entity by its id.
func (c *PromotionBankCardClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionBankCard, error) {
	return c.Query().Where(promotionbankcard.ID(id), promotionbankcard.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionBankCardClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionBankCard {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionCommission.
func (c *PromotionCommissionClient) SoftDelete() *PromotionCommissionUpdate {
	mutation := newPromotionCommissionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionCommissionClient) SoftDeleteOne(pc *PromotionCommission) *PromotionCommissionUpdateOne {
	mutation := newPromotionCommissionMutation(c.config, OpUpdateOne, withPromotionCommission(pc))
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionCommissionClient) SoftDeleteOneID(id uint64) *PromotionCommissionUpdateOne {
	mutation := newPromotionCommissionMutation(c.config, OpUpdateOne, withPromotionCommissionID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionCommission.
func (c *PromotionCommissionClient) QueryNotDeleted() *PromotionCommissionQuery {
	return c.Query().Where(promotioncommission.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionCommission not deleted entity by its id.
func (c *PromotionCommissionClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionCommission, error) {
	return c.Query().Where(promotioncommission.ID(id), promotioncommission.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionCommissionClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionCommission {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) SoftDelete() *PromotionCommissionPlanUpdate {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionPlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionCommissionPlanClient) SoftDeleteOne(pcp *PromotionCommissionPlan) *PromotionCommissionPlanUpdateOne {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdateOne, withPromotionCommissionPlan(pcp))
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionCommissionPlanClient) SoftDeleteOneID(id uint64) *PromotionCommissionPlanUpdateOne {
	mutation := newPromotionCommissionPlanMutation(c.config, OpUpdateOne, withPromotionCommissionPlanID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionCommissionPlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionCommissionPlan.
func (c *PromotionCommissionPlanClient) QueryNotDeleted() *PromotionCommissionPlanQuery {
	return c.Query().Where(promotioncommissionplan.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionCommissionPlan not deleted entity by its id.
func (c *PromotionCommissionPlanClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionCommissionPlan, error) {
	return c.Query().Where(promotioncommissionplan.ID(id), promotioncommissionplan.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionCommissionPlanClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionCommissionPlan {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionEarnings.
func (c *PromotionEarningsClient) SoftDelete() *PromotionEarningsUpdate {
	mutation := newPromotionEarningsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionEarningsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionEarningsClient) SoftDeleteOne(pe *PromotionEarnings) *PromotionEarningsUpdateOne {
	mutation := newPromotionEarningsMutation(c.config, OpUpdateOne, withPromotionEarnings(pe))
	mutation.SetDeletedAt(time.Now())
	return &PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionEarningsClient) SoftDeleteOneID(id uint64) *PromotionEarningsUpdateOne {
	mutation := newPromotionEarningsMutation(c.config, OpUpdateOne, withPromotionEarningsID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionEarningsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionEarnings.
func (c *PromotionEarningsClient) QueryNotDeleted() *PromotionEarningsQuery {
	return c.Query().Where(promotionearnings.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionEarnings not deleted entity by its id.
func (c *PromotionEarningsClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionEarnings, error) {
	return c.Query().Where(promotionearnings.ID(id), promotionearnings.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionEarningsClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionEarnings {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionGrowth.
func (c *PromotionGrowthClient) SoftDelete() *PromotionGrowthUpdate {
	mutation := newPromotionGrowthMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionGrowthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionGrowthClient) SoftDeleteOne(pg *PromotionGrowth) *PromotionGrowthUpdateOne {
	mutation := newPromotionGrowthMutation(c.config, OpUpdateOne, withPromotionGrowth(pg))
	mutation.SetDeletedAt(time.Now())
	return &PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionGrowthClient) SoftDeleteOneID(id uint64) *PromotionGrowthUpdateOne {
	mutation := newPromotionGrowthMutation(c.config, OpUpdateOne, withPromotionGrowthID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionGrowthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionGrowth.
func (c *PromotionGrowthClient) QueryNotDeleted() *PromotionGrowthQuery {
	return c.Query().Where(promotiongrowth.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionGrowth not deleted entity by its id.
func (c *PromotionGrowthClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionGrowth, error) {
	return c.Query().Where(promotiongrowth.ID(id), promotiongrowth.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionGrowthClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionGrowth {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionLevel.
func (c *PromotionLevelClient) SoftDelete() *PromotionLevelUpdate {
	mutation := newPromotionLevelMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionLevelClient) SoftDeleteOne(pl *PromotionLevel) *PromotionLevelUpdateOne {
	mutation := newPromotionLevelMutation(c.config, OpUpdateOne, withPromotionLevel(pl))
	mutation.SetDeletedAt(time.Now())
	return &PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionLevelClient) SoftDeleteOneID(id uint64) *PromotionLevelUpdateOne {
	mutation := newPromotionLevelMutation(c.config, OpUpdateOne, withPromotionLevelID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionLevel.
func (c *PromotionLevelClient) QueryNotDeleted() *PromotionLevelQuery {
	return c.Query().Where(promotionlevel.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionLevel not deleted entity by its id.
func (c *PromotionLevelClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionLevel, error) {
	return c.Query().Where(promotionlevel.ID(id), promotionlevel.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionLevelClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionLevel {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionMember.
func (c *PromotionMemberClient) SoftDelete() *PromotionMemberUpdate {
	mutation := newPromotionMemberMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionMemberClient) SoftDeleteOne(pm *PromotionMember) *PromotionMemberUpdateOne {
	mutation := newPromotionMemberMutation(c.config, OpUpdateOne, withPromotionMember(pm))
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionMemberClient) SoftDeleteOneID(id uint64) *PromotionMemberUpdateOne {
	mutation := newPromotionMemberMutation(c.config, OpUpdateOne, withPromotionMemberID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionMember.
func (c *PromotionMemberClient) QueryNotDeleted() *PromotionMemberQuery {
	return c.Query().Where(promotionmember.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionMember not deleted entity by its id.
func (c *PromotionMemberClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionMember, error) {
	return c.Query().Where(promotionmember.ID(id), promotionmember.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionMemberClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionMember {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) SoftDelete() *PromotionMemberCommissionUpdate {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberCommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionMemberCommissionClient) SoftDeleteOne(pmc *PromotionMemberCommission) *PromotionMemberCommissionUpdateOne {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdateOne, withPromotionMemberCommission(pmc))
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionMemberCommissionClient) SoftDeleteOneID(id uint64) *PromotionMemberCommissionUpdateOne {
	mutation := newPromotionMemberCommissionMutation(c.config, OpUpdateOne, withPromotionMemberCommissionID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionMemberCommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionMemberCommission.
func (c *PromotionMemberCommissionClient) QueryNotDeleted() *PromotionMemberCommissionQuery {
	return c.Query().Where(promotionmembercommission.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionMemberCommission not deleted entity by its id.
func (c *PromotionMemberCommissionClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionMemberCommission, error) {
	return c.Query().Where(promotionmembercommission.ID(id), promotionmembercommission.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionMemberCommissionClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionMemberCommission {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) SoftDelete() *PromotionPrivilegeUpdate {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionPrivilegeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionPrivilegeClient) SoftDeleteOne(pp *PromotionPrivilege) *PromotionPrivilegeUpdateOne {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdateOne, withPromotionPrivilege(pp))
	mutation.SetDeletedAt(time.Now())
	return &PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionPrivilegeClient) SoftDeleteOneID(id uint64) *PromotionPrivilegeUpdateOne {
	mutation := newPromotionPrivilegeMutation(c.config, OpUpdateOne, withPromotionPrivilegeID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionPrivilegeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionPrivilege.
func (c *PromotionPrivilegeClient) QueryNotDeleted() *PromotionPrivilegeQuery {
	return c.Query().Where(promotionprivilege.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionPrivilege not deleted entity by its id.
func (c *PromotionPrivilegeClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionPrivilege, error) {
	return c.Query().Where(promotionprivilege.ID(id), promotionprivilege.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionPrivilegeClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionPrivilege {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) SoftDelete() *PromotionWithdrawalUpdate {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PromotionWithdrawalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PromotionWithdrawalClient) SoftDeleteOne(pw *PromotionWithdrawal) *PromotionWithdrawalUpdateOne {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdateOne, withPromotionWithdrawal(pw))
	mutation.SetDeletedAt(time.Now())
	return &PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PromotionWithdrawalClient) SoftDeleteOneID(id uint64) *PromotionWithdrawalUpdateOne {
	mutation := newPromotionWithdrawalMutation(c.config, OpUpdateOne, withPromotionWithdrawalID(id))
	mutation.SetDeletedAt(time.Now())
	return &PromotionWithdrawalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PromotionWithdrawal.
func (c *PromotionWithdrawalClient) QueryNotDeleted() *PromotionWithdrawalQuery {
	return c.Query().Where(promotionwithdrawal.DeletedAtIsNil())
}

// GetNotDeleted returns a PromotionWithdrawal not deleted entity by its id.
func (c *PromotionWithdrawalClient) GetNotDeleted(ctx context.Context, id uint64) (*PromotionWithdrawal, error) {
	return c.Query().Where(promotionwithdrawal.ID(id), promotionwithdrawal.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PromotionWithdrawalClient) GetNotDeletedX(ctx context.Context, id uint64) *PromotionWithdrawal {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PurchaseOrder.
func (c *PurchaseOrderClient) SoftDelete() *PurchaseOrderUpdate {
	mutation := newPurchaseOrderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PurchaseOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PurchaseOrderClient) SoftDeleteOne(po *PurchaseOrder) *PurchaseOrderUpdateOne {
	mutation := newPurchaseOrderMutation(c.config, OpUpdateOne, withPurchaseOrder(po))
	mutation.SetDeletedAt(time.Now())
	return &PurchaseOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PurchaseOrderClient) SoftDeleteOneID(id uint64) *PurchaseOrderUpdateOne {
	mutation := newPurchaseOrderMutation(c.config, OpUpdateOne, withPurchaseOrderID(id))
	mutation.SetDeletedAt(time.Now())
	return &PurchaseOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PurchaseOrder.
func (c *PurchaseOrderClient) QueryNotDeleted() *PurchaseOrderQuery {
	return c.Query().Where(purchaseorder.DeletedAtIsNil())
}

// GetNotDeleted returns a PurchaseOrder not deleted entity by its id.
func (c *PurchaseOrderClient) GetNotDeleted(ctx context.Context, id uint64) (*PurchaseOrder, error) {
	return c.Query().Where(purchaseorder.ID(id), purchaseorder.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PurchaseOrderClient) GetNotDeletedX(ctx context.Context, id uint64) *PurchaseOrder {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for PurchasePayment.
func (c *PurchasePaymentClient) SoftDelete() *PurchasePaymentUpdate {
	mutation := newPurchasePaymentMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PurchasePaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PurchasePaymentClient) SoftDeleteOne(pp *PurchasePayment) *PurchasePaymentUpdateOne {
	mutation := newPurchasePaymentMutation(c.config, OpUpdateOne, withPurchasePayment(pp))
	mutation.SetDeletedAt(time.Now())
	return &PurchasePaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PurchasePaymentClient) SoftDeleteOneID(id uint64) *PurchasePaymentUpdateOne {
	mutation := newPurchasePaymentMutation(c.config, OpUpdateOne, withPurchasePaymentID(id))
	mutation.SetDeletedAt(time.Now())
	return &PurchasePaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for PurchasePayment.
func (c *PurchasePaymentClient) QueryNotDeleted() *PurchasePaymentQuery {
	return c.Query().Where(purchasepayment.DeletedAtIsNil())
}

// GetNotDeleted returns a PurchasePayment not deleted entity by its id.
func (c *PurchasePaymentClient) GetNotDeleted(ctx context.Context, id uint64) (*PurchasePayment, error) {
	return c.Query().Where(purchasepayment.ID(id), purchasepayment.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PurchasePaymentClient) GetNotDeletedX(ctx context.Context, id uint64) *PurchasePayment {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Question.
func (c *QuestionClient) SoftDelete() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *QuestionClient) SoftDeleteOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	mutation.SetDeletedAt(time.Now())
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *QuestionClient) SoftDeleteOneID(id uint64) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	mutation.SetDeletedAt(time.Now())
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Question.
func (c *QuestionClient) QueryNotDeleted() *QuestionQuery {
	return c.Query().Where(question.DeletedAtIsNil())
}

// GetNotDeleted returns a Question not deleted entity by its id.
func (c *QuestionClient) GetNotDeleted(ctx context.Context, id uint64) (*Question, error) {
	return c.Query().Where(question.ID(id), question.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetNotDeletedX(ctx context.Context, id uint64) *Question {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for QuestionCategory.
func (c *QuestionCategoryClient) SoftDelete() *QuestionCategoryUpdate {
	mutation := newQuestionCategoryMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &QuestionCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *QuestionCategoryClient) SoftDeleteOne(qc *QuestionCategory) *QuestionCategoryUpdateOne {
	mutation := newQuestionCategoryMutation(c.config, OpUpdateOne, withQuestionCategory(qc))
	mutation.SetDeletedAt(time.Now())
	return &QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *QuestionCategoryClient) SoftDeleteOneID(id uint64) *QuestionCategoryUpdateOne {
	mutation := newQuestionCategoryMutation(c.config, OpUpdateOne, withQuestionCategoryID(id))
	mutation.SetDeletedAt(time.Now())
	return &QuestionCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for QuestionCategory.
func (c *QuestionCategoryClient) QueryNotDeleted() *QuestionCategoryQuery {
	return c.Query().Where(questioncategory.DeletedAtIsNil())
}

// GetNotDeleted returns a QuestionCategory not deleted entity by its id.
func (c *QuestionCategoryClient) GetNotDeleted(ctx context.Context, id uint64) (*QuestionCategory, error) {
	return c.Query().Where(questioncategory.ID(id), questioncategory.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *QuestionCategoryClient) GetNotDeletedX(ctx context.Context, id uint64) *QuestionCategory {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Reserve.
func (c *ReserveClient) SoftDelete() *ReserveUpdate {
	mutation := newReserveMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ReserveClient) SoftDeleteOne(r *Reserve) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(r))
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ReserveClient) SoftDeleteOneID(id uint64) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserveID(id))
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Reserve.
func (c *ReserveClient) QueryNotDeleted() *ReserveQuery {
	return c.Query().Where(reserve.DeletedAtIsNil())
}

// GetNotDeleted returns a Reserve not deleted entity by its id.
func (c *ReserveClient) GetNotDeleted(ctx context.Context, id uint64) (*Reserve, error) {
	return c.Query().Where(reserve.ID(id), reserve.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ReserveClient) GetNotDeletedX(ctx context.Context, id uint64) *Reserve {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Rider.
func (c *RiderClient) SoftDelete() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderClient) SoftDeleteOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderClient) SoftDeleteOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Rider.
func (c *RiderClient) QueryNotDeleted() *RiderQuery {
	return c.Query().Where(rider.DeletedAtIsNil())
}

// GetNotDeleted returns a Rider not deleted entity by its id.
func (c *RiderClient) GetNotDeleted(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id), rider.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderClient) GetNotDeletedX(ctx context.Context, id uint64) *Rider {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for RiderFollowUp.
func (c *RiderFollowUpClient) SoftDelete() *RiderFollowUpUpdate {
	mutation := newRiderFollowUpMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderFollowUpClient) SoftDeleteOne(rfu *RiderFollowUp) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUp(rfu))
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderFollowUpClient) SoftDeleteOneID(id uint64) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUpID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for RiderFollowUp.
func (c *RiderFollowUpClient) QueryNotDeleted() *RiderFollowUpQuery {
	return c.Query().Where(riderfollowup.DeletedAtIsNil())
}

// GetNotDeleted returns a RiderFollowUp not deleted entity by its id.
func (c *RiderFollowUpClient) GetNotDeleted(ctx context.Context, id uint64) (*RiderFollowUp, error) {
	return c.Query().Where(riderfollowup.ID(id), riderfollowup.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderFollowUpClient) GetNotDeletedX(ctx context.Context, id uint64) *RiderFollowUp {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) SoftDelete() *RiderPhoneDeviceUpdate {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderPhoneDeviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderPhoneDeviceClient) SoftDeleteOne(rpd *RiderPhoneDevice) *RiderPhoneDeviceUpdateOne {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdateOne, withRiderPhoneDevice(rpd))
	mutation.SetDeletedAt(time.Now())
	return &RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderPhoneDeviceClient) SoftDeleteOneID(id uint64) *RiderPhoneDeviceUpdateOne {
	mutation := newRiderPhoneDeviceMutation(c.config, OpUpdateOne, withRiderPhoneDeviceID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderPhoneDeviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for RiderPhoneDevice.
func (c *RiderPhoneDeviceClient) QueryNotDeleted() *RiderPhoneDeviceQuery {
	return c.Query().Where(riderphonedevice.DeletedAtIsNil())
}

// GetNotDeleted returns a RiderPhoneDevice not deleted entity by its id.
func (c *RiderPhoneDeviceClient) GetNotDeleted(ctx context.Context, id uint64) (*RiderPhoneDevice, error) {
	return c.Query().Where(riderphonedevice.ID(id), riderphonedevice.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderPhoneDeviceClient) GetNotDeletedX(ctx context.Context, id uint64) *RiderPhoneDevice {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Store.
func (c *StoreClient) SoftDelete() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StoreClient) SoftDeleteOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StoreClient) SoftDeleteOneID(id uint64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Store.
func (c *StoreClient) QueryNotDeleted() *StoreQuery {
	return c.Query().Where(store.DeletedAtIsNil())
}

// GetNotDeleted returns a Store not deleted entity by its id.
func (c *StoreClient) GetNotDeleted(ctx context.Context, id uint64) (*Store, error) {
	return c.Query().Where(store.ID(id), store.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StoreClient) GetNotDeletedX(ctx context.Context, id uint64) *Store {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for StoreGoods.
func (c *StoreGoodsClient) SoftDelete() *StoreGoodsUpdate {
	mutation := newStoreGoodsMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StoreGoodsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StoreGoodsClient) SoftDeleteOne(sg *StoreGoods) *StoreGoodsUpdateOne {
	mutation := newStoreGoodsMutation(c.config, OpUpdateOne, withStoreGoods(sg))
	mutation.SetDeletedAt(time.Now())
	return &StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StoreGoodsClient) SoftDeleteOneID(id uint64) *StoreGoodsUpdateOne {
	mutation := newStoreGoodsMutation(c.config, OpUpdateOne, withStoreGoodsID(id))
	mutation.SetDeletedAt(time.Now())
	return &StoreGoodsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for StoreGoods.
func (c *StoreGoodsClient) QueryNotDeleted() *StoreGoodsQuery {
	return c.Query().Where(storegoods.DeletedAtIsNil())
}

// GetNotDeleted returns a StoreGoods not deleted entity by its id.
func (c *StoreGoodsClient) GetNotDeleted(ctx context.Context, id uint64) (*StoreGoods, error) {
	return c.Query().Where(storegoods.ID(id), storegoods.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StoreGoodsClient) GetNotDeletedX(ctx context.Context, id uint64) *StoreGoods {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for StoreGroup.
func (c *StoreGroupClient) SoftDelete() *StoreGroupUpdate {
	mutation := newStoreGroupMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StoreGroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StoreGroupClient) SoftDeleteOne(sg *StoreGroup) *StoreGroupUpdateOne {
	mutation := newStoreGroupMutation(c.config, OpUpdateOne, withStoreGroup(sg))
	mutation.SetDeletedAt(time.Now())
	return &StoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StoreGroupClient) SoftDeleteOneID(id uint64) *StoreGroupUpdateOne {
	mutation := newStoreGroupMutation(c.config, OpUpdateOne, withStoreGroupID(id))
	mutation.SetDeletedAt(time.Now())
	return &StoreGroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for StoreGroup.
func (c *StoreGroupClient) QueryNotDeleted() *StoreGroupQuery {
	return c.Query().Where(storegroup.DeletedAtIsNil())
}

// GetNotDeleted returns a StoreGroup not deleted entity by its id.
func (c *StoreGroupClient) GetNotDeleted(ctx context.Context, id uint64) (*StoreGroup, error) {
	return c.Query().Where(storegroup.ID(id), storegroup.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StoreGroupClient) GetNotDeletedX(ctx context.Context, id uint64) *StoreGroup {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Subscribe.
func (c *SubscribeClient) SoftDelete() *SubscribeUpdate {
	mutation := newSubscribeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *SubscribeClient) SoftDeleteOne(s *Subscribe) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribe(s))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *SubscribeClient) SoftDeleteOneID(id uint64) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribeID(id))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Subscribe.
func (c *SubscribeClient) QueryNotDeleted() *SubscribeQuery {
	return c.Query().Where(subscribe.DeletedAtIsNil())
}

// GetNotDeleted returns a Subscribe not deleted entity by its id.
func (c *SubscribeClient) GetNotDeleted(ctx context.Context, id uint64) (*Subscribe, error) {
	return c.Query().Where(subscribe.ID(id), subscribe.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *SubscribeClient) GetNotDeletedX(ctx context.Context, id uint64) *Subscribe {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for SubscribePause.
func (c *SubscribePauseClient) SoftDelete() *SubscribePauseUpdate {
	mutation := newSubscribePauseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *SubscribePauseClient) SoftDeleteOne(sp *SubscribePause) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePause(sp))
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *SubscribePauseClient) SoftDeleteOneID(id uint64) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePauseID(id))
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for SubscribePause.
func (c *SubscribePauseClient) QueryNotDeleted() *SubscribePauseQuery {
	return c.Query().Where(subscribepause.DeletedAtIsNil())
}

// GetNotDeleted returns a SubscribePause not deleted entity by its id.
func (c *SubscribePauseClient) GetNotDeleted(ctx context.Context, id uint64) (*SubscribePause, error) {
	return c.Query().Where(subscribepause.ID(id), subscribepause.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *SubscribePauseClient) GetNotDeletedX(ctx context.Context, id uint64) *SubscribePause {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Version.
func (c *VersionClient) SoftDelete() *VersionUpdate {
	mutation := newVersionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &VersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *VersionClient) SoftDeleteOne(v *Version) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersion(v))
	mutation.SetDeletedAt(time.Now())
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *VersionClient) SoftDeleteOneID(id uint64) *VersionUpdateOne {
	mutation := newVersionMutation(c.config, OpUpdateOne, withVersionID(id))
	mutation.SetDeletedAt(time.Now())
	return &VersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Version.
func (c *VersionClient) QueryNotDeleted() *VersionQuery {
	return c.Query().Where(version.DeletedAtIsNil())
}

// GetNotDeleted returns a Version not deleted entity by its id.
func (c *VersionClient) GetNotDeleted(ctx context.Context, id uint64) (*Version, error) {
	return c.Query().Where(version.ID(id), version.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *VersionClient) GetNotDeletedX(ctx context.Context, id uint64) *Version {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Warehouse.
func (c *WarehouseClient) SoftDelete() *WarehouseUpdate {
	mutation := newWarehouseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &WarehouseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *WarehouseClient) SoftDeleteOne(w *Warehouse) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouse(w))
	mutation.SetDeletedAt(time.Now())
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *WarehouseClient) SoftDeleteOneID(id uint64) *WarehouseUpdateOne {
	mutation := newWarehouseMutation(c.config, OpUpdateOne, withWarehouseID(id))
	mutation.SetDeletedAt(time.Now())
	return &WarehouseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Warehouse.
func (c *WarehouseClient) QueryNotDeleted() *WarehouseQuery {
	return c.Query().Where(warehouse.DeletedAtIsNil())
}

// GetNotDeleted returns a Warehouse not deleted entity by its id.
func (c *WarehouseClient) GetNotDeleted(ctx context.Context, id uint64) (*Warehouse, error) {
	return c.Query().Where(warehouse.ID(id), warehouse.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *WarehouseClient) GetNotDeletedX(ctx context.Context, id uint64) *Warehouse {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}
