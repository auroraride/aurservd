// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"time"

	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprepayment"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/export"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SoftDelete returns an soft delete builder for Agent.
func (c *AgentClient) SoftDelete() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AgentClient) SoftDeleteOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AgentClient) SoftDeleteOneID(id uint64) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	mutation.SetDeletedAt(time.Now())
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Agent.
func (c *AgentClient) QueryNotDeleted() *AgentQuery {
	return c.Query().Where(agent.DeletedAtIsNil())
}

// GetNotDeleted returns a Agent not deleted entity by its id.
func (c *AgentClient) GetNotDeleted(ctx context.Context, id uint64) (*Agent, error) {
	return c.Query().Where(agent.ID(id), agent.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AgentClient) GetNotDeletedX(ctx context.Context, id uint64) *Agent {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Assistance.
func (c *AssistanceClient) SoftDelete() *AssistanceUpdate {
	mutation := newAssistanceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AssistanceClient) SoftDeleteOne(a *Assistance) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistance(a))
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AssistanceClient) SoftDeleteOneID(id uint64) *AssistanceUpdateOne {
	mutation := newAssistanceMutation(c.config, OpUpdateOne, withAssistanceID(id))
	mutation.SetDeletedAt(time.Now())
	return &AssistanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Assistance.
func (c *AssistanceClient) QueryNotDeleted() *AssistanceQuery {
	return c.Query().Where(assistance.DeletedAtIsNil())
}

// GetNotDeleted returns a Assistance not deleted entity by its id.
func (c *AssistanceClient) GetNotDeleted(ctx context.Context, id uint64) (*Assistance, error) {
	return c.Query().Where(assistance.ID(id), assistance.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AssistanceClient) GetNotDeletedX(ctx context.Context, id uint64) *Assistance {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Attendance.
func (c *AttendanceClient) SoftDelete() *AttendanceUpdate {
	mutation := newAttendanceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *AttendanceClient) SoftDeleteOne(a *Attendance) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendance(a))
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *AttendanceClient) SoftDeleteOneID(id uint64) *AttendanceUpdateOne {
	mutation := newAttendanceMutation(c.config, OpUpdateOne, withAttendanceID(id))
	mutation.SetDeletedAt(time.Now())
	return &AttendanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Attendance.
func (c *AttendanceClient) QueryNotDeleted() *AttendanceQuery {
	return c.Query().Where(attendance.DeletedAtIsNil())
}

// GetNotDeleted returns a Attendance not deleted entity by its id.
func (c *AttendanceClient) GetNotDeleted(ctx context.Context, id uint64) (*Attendance, error) {
	return c.Query().Where(attendance.ID(id), attendance.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *AttendanceClient) GetNotDeletedX(ctx context.Context, id uint64) *Attendance {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Battery.
func (c *BatteryClient) SoftDelete() *BatteryUpdate {
	mutation := newBatteryMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BatteryClient) SoftDeleteOne(b *Battery) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBattery(b))
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BatteryClient) SoftDeleteOneID(id uint64) *BatteryUpdateOne {
	mutation := newBatteryMutation(c.config, OpUpdateOne, withBatteryID(id))
	mutation.SetDeletedAt(time.Now())
	return &BatteryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Battery.
func (c *BatteryClient) QueryNotDeleted() *BatteryQuery {
	return c.Query().Where(battery.DeletedAtIsNil())
}

// GetNotDeleted returns a Battery not deleted entity by its id.
func (c *BatteryClient) GetNotDeleted(ctx context.Context, id uint64) (*Battery, error) {
	return c.Query().Where(battery.ID(id), battery.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BatteryClient) GetNotDeletedX(ctx context.Context, id uint64) *Battery {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Branch.
func (c *BranchClient) SoftDelete() *BranchUpdate {
	mutation := newBranchMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchClient) SoftDeleteOne(b *Branch) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranch(b))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchClient) SoftDeleteOneID(id uint64) *BranchUpdateOne {
	mutation := newBranchMutation(c.config, OpUpdateOne, withBranchID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Branch.
func (c *BranchClient) QueryNotDeleted() *BranchQuery {
	return c.Query().Where(branch.DeletedAtIsNil())
}

// GetNotDeleted returns a Branch not deleted entity by its id.
func (c *BranchClient) GetNotDeleted(ctx context.Context, id uint64) (*Branch, error) {
	return c.Query().Where(branch.ID(id), branch.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchClient) GetNotDeletedX(ctx context.Context, id uint64) *Branch {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for BranchContract.
func (c *BranchContractClient) SoftDelete() *BranchContractUpdate {
	mutation := newBranchContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BranchContractClient) SoftDeleteOne(bc *BranchContract) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContract(bc))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BranchContractClient) SoftDeleteOneID(id uint64) *BranchContractUpdateOne {
	mutation := newBranchContractMutation(c.config, OpUpdateOne, withBranchContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &BranchContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for BranchContract.
func (c *BranchContractClient) QueryNotDeleted() *BranchContractQuery {
	return c.Query().Where(branchcontract.DeletedAtIsNil())
}

// GetNotDeleted returns a BranchContract not deleted entity by its id.
func (c *BranchContractClient) GetNotDeleted(ctx context.Context, id uint64) (*BranchContract, error) {
	return c.Query().Where(branchcontract.ID(id), branchcontract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BranchContractClient) GetNotDeletedX(ctx context.Context, id uint64) *BranchContract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Business.
func (c *BusinessClient) SoftDelete() *BusinessUpdate {
	mutation := newBusinessMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *BusinessClient) SoftDeleteOne(b *Business) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusiness(b))
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *BusinessClient) SoftDeleteOneID(id uint64) *BusinessUpdateOne {
	mutation := newBusinessMutation(c.config, OpUpdateOne, withBusinessID(id))
	mutation.SetDeletedAt(time.Now())
	return &BusinessUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Business.
func (c *BusinessClient) QueryNotDeleted() *BusinessQuery {
	return c.Query().Where(business.DeletedAtIsNil())
}

// GetNotDeleted returns a Business not deleted entity by its id.
func (c *BusinessClient) GetNotDeleted(ctx context.Context, id uint64) (*Business, error) {
	return c.Query().Where(business.ID(id), business.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *BusinessClient) GetNotDeletedX(ctx context.Context, id uint64) *Business {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Cabinet.
func (c *CabinetClient) SoftDelete() *CabinetUpdate {
	mutation := newCabinetMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetClient) SoftDeleteOne(ca *Cabinet) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinet(ca))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetClient) SoftDeleteOneID(id uint64) *CabinetUpdateOne {
	mutation := newCabinetMutation(c.config, OpUpdateOne, withCabinetID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Cabinet.
func (c *CabinetClient) QueryNotDeleted() *CabinetQuery {
	return c.Query().Where(cabinet.DeletedAtIsNil())
}

// GetNotDeleted returns a Cabinet not deleted entity by its id.
func (c *CabinetClient) GetNotDeleted(ctx context.Context, id uint64) (*Cabinet, error) {
	return c.Query().Where(cabinet.ID(id), cabinet.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetClient) GetNotDeletedX(ctx context.Context, id uint64) *Cabinet {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for CabinetFault.
func (c *CabinetFaultClient) SoftDelete() *CabinetFaultUpdate {
	mutation := newCabinetFaultMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CabinetFaultClient) SoftDeleteOne(cf *CabinetFault) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFault(cf))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CabinetFaultClient) SoftDeleteOneID(id uint64) *CabinetFaultUpdateOne {
	mutation := newCabinetFaultMutation(c.config, OpUpdateOne, withCabinetFaultID(id))
	mutation.SetDeletedAt(time.Now())
	return &CabinetFaultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for CabinetFault.
func (c *CabinetFaultClient) QueryNotDeleted() *CabinetFaultQuery {
	return c.Query().Where(cabinetfault.DeletedAtIsNil())
}

// GetNotDeleted returns a CabinetFault not deleted entity by its id.
func (c *CabinetFaultClient) GetNotDeleted(ctx context.Context, id uint64) (*CabinetFault, error) {
	return c.Query().Where(cabinetfault.ID(id), cabinetfault.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CabinetFaultClient) GetNotDeletedX(ctx context.Context, id uint64) *CabinetFault {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for City.
func (c *CityClient) SoftDelete() *CityUpdate {
	mutation := newCityMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CityClient) SoftDeleteOne(ci *City) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCity(ci))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CityClient) SoftDeleteOneID(id uint64) *CityUpdateOne {
	mutation := newCityMutation(c.config, OpUpdateOne, withCityID(id))
	mutation.SetDeletedAt(time.Now())
	return &CityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for City.
func (c *CityClient) QueryNotDeleted() *CityQuery {
	return c.Query().Where(city.DeletedAtIsNil())
}

// GetNotDeleted returns a City not deleted entity by its id.
func (c *CityClient) GetNotDeleted(ctx context.Context, id uint64) (*City, error) {
	return c.Query().Where(city.ID(id), city.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CityClient) GetNotDeletedX(ctx context.Context, id uint64) *City {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Commission.
func (c *CommissionClient) SoftDelete() *CommissionUpdate {
	mutation := newCommissionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *CommissionClient) SoftDeleteOne(co *Commission) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommission(co))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *CommissionClient) SoftDeleteOneID(id uint64) *CommissionUpdateOne {
	mutation := newCommissionMutation(c.config, OpUpdateOne, withCommissionID(id))
	mutation.SetDeletedAt(time.Now())
	return &CommissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Commission.
func (c *CommissionClient) QueryNotDeleted() *CommissionQuery {
	return c.Query().Where(commission.DeletedAtIsNil())
}

// GetNotDeleted returns a Commission not deleted entity by its id.
func (c *CommissionClient) GetNotDeleted(ctx context.Context, id uint64) (*Commission, error) {
	return c.Query().Where(commission.ID(id), commission.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *CommissionClient) GetNotDeletedX(ctx context.Context, id uint64) *Commission {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Contract.
func (c *ContractClient) SoftDelete() *ContractUpdate {
	mutation := newContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ContractClient) SoftDeleteOne(co *Contract) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContract(co))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ContractClient) SoftDeleteOneID(id uint64) *ContractUpdateOne {
	mutation := newContractMutation(c.config, OpUpdateOne, withContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &ContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Contract.
func (c *ContractClient) QueryNotDeleted() *ContractQuery {
	return c.Query().Where(contract.DeletedAtIsNil())
}

// GetNotDeleted returns a Contract not deleted entity by its id.
func (c *ContractClient) GetNotDeleted(ctx context.Context, id uint64) (*Contract, error) {
	return c.Query().Where(contract.ID(id), contract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ContractClient) GetNotDeletedX(ctx context.Context, id uint64) *Contract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EbikeBrand.
func (c *EbikeBrandClient) SoftDelete() *EbikeBrandUpdate {
	mutation := newEbikeBrandMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EbikeBrandClient) SoftDeleteOne(eb *EbikeBrand) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrand(eb))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EbikeBrandClient) SoftDeleteOneID(id uint64) *EbikeBrandUpdateOne {
	mutation := newEbikeBrandMutation(c.config, OpUpdateOne, withEbikeBrandID(id))
	mutation.SetDeletedAt(time.Now())
	return &EbikeBrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EbikeBrand.
func (c *EbikeBrandClient) QueryNotDeleted() *EbikeBrandQuery {
	return c.Query().Where(ebikebrand.DeletedAtIsNil())
}

// GetNotDeleted returns a EbikeBrand not deleted entity by its id.
func (c *EbikeBrandClient) GetNotDeleted(ctx context.Context, id uint64) (*EbikeBrand, error) {
	return c.Query().Where(ebikebrand.ID(id), ebikebrand.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EbikeBrandClient) GetNotDeletedX(ctx context.Context, id uint64) *EbikeBrand {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Employee.
func (c *EmployeeClient) SoftDelete() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EmployeeClient) SoftDeleteOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EmployeeClient) SoftDeleteOneID(id uint64) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	mutation.SetDeletedAt(time.Now())
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Employee.
func (c *EmployeeClient) QueryNotDeleted() *EmployeeQuery {
	return c.Query().Where(employee.DeletedAtIsNil())
}

// GetNotDeleted returns a Employee not deleted entity by its id.
func (c *EmployeeClient) GetNotDeleted(ctx context.Context, id uint64) (*Employee, error) {
	return c.Query().Where(employee.ID(id), employee.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetNotDeletedX(ctx context.Context, id uint64) *Employee {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Enterprise.
func (c *EnterpriseClient) SoftDelete() *EnterpriseUpdate {
	mutation := newEnterpriseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseClient) SoftDeleteOne(e *Enterprise) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterprise(e))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseClient) SoftDeleteOneID(id uint64) *EnterpriseUpdateOne {
	mutation := newEnterpriseMutation(c.config, OpUpdateOne, withEnterpriseID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Enterprise.
func (c *EnterpriseClient) QueryNotDeleted() *EnterpriseQuery {
	return c.Query().Where(enterprise.DeletedAtIsNil())
}

// GetNotDeleted returns a Enterprise not deleted entity by its id.
func (c *EnterpriseClient) GetNotDeleted(ctx context.Context, id uint64) (*Enterprise, error) {
	return c.Query().Where(enterprise.ID(id), enterprise.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseClient) GetNotDeletedX(ctx context.Context, id uint64) *Enterprise {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseBill.
func (c *EnterpriseBillClient) SoftDelete() *EnterpriseBillUpdate {
	mutation := newEnterpriseBillMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseBillClient) SoftDeleteOne(eb *EnterpriseBill) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBill(eb))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseBillClient) SoftDeleteOneID(id uint64) *EnterpriseBillUpdateOne {
	mutation := newEnterpriseBillMutation(c.config, OpUpdateOne, withEnterpriseBillID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseBillUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseBill.
func (c *EnterpriseBillClient) QueryNotDeleted() *EnterpriseBillQuery {
	return c.Query().Where(enterprisebill.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseBill not deleted entity by its id.
func (c *EnterpriseBillClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseBill, error) {
	return c.Query().Where(enterprisebill.ID(id), enterprisebill.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseBillClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseBill {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseContract.
func (c *EnterpriseContractClient) SoftDelete() *EnterpriseContractUpdate {
	mutation := newEnterpriseContractMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseContractClient) SoftDeleteOne(ec *EnterpriseContract) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContract(ec))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseContractClient) SoftDeleteOneID(id uint64) *EnterpriseContractUpdateOne {
	mutation := newEnterpriseContractMutation(c.config, OpUpdateOne, withEnterpriseContractID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseContractUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseContract.
func (c *EnterpriseContractClient) QueryNotDeleted() *EnterpriseContractQuery {
	return c.Query().Where(enterprisecontract.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseContract not deleted entity by its id.
func (c *EnterpriseContractClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseContract, error) {
	return c.Query().Where(enterprisecontract.ID(id), enterprisecontract.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseContractClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseContract {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) SoftDelete() *EnterprisePrepaymentUpdate {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePrepaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterprisePrepaymentClient) SoftDeleteOne(ep *EnterprisePrepayment) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepayment(ep))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterprisePrepaymentClient) SoftDeleteOneID(id uint64) *EnterprisePrepaymentUpdateOne {
	mutation := newEnterprisePrepaymentMutation(c.config, OpUpdateOne, withEnterprisePrepaymentID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePrepaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterprisePrepayment.
func (c *EnterprisePrepaymentClient) QueryNotDeleted() *EnterprisePrepaymentQuery {
	return c.Query().Where(enterpriseprepayment.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterprisePrepayment not deleted entity by its id.
func (c *EnterprisePrepaymentClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterprisePrepayment, error) {
	return c.Query().Where(enterpriseprepayment.ID(id), enterpriseprepayment.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterprisePrepaymentClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterprisePrepayment {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterprisePrice.
func (c *EnterprisePriceClient) SoftDelete() *EnterprisePriceUpdate {
	mutation := newEnterprisePriceMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterprisePriceClient) SoftDeleteOne(ep *EnterprisePrice) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePrice(ep))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterprisePriceClient) SoftDeleteOneID(id uint64) *EnterprisePriceUpdateOne {
	mutation := newEnterprisePriceMutation(c.config, OpUpdateOne, withEnterprisePriceID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterprisePriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterprisePrice.
func (c *EnterprisePriceClient) QueryNotDeleted() *EnterprisePriceQuery {
	return c.Query().Where(enterpriseprice.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterprisePrice not deleted entity by its id.
func (c *EnterprisePriceClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterprisePrice, error) {
	return c.Query().Where(enterpriseprice.ID(id), enterpriseprice.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterprisePriceClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterprisePrice {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) SoftDelete() *EnterpriseStatementUpdate {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseStatementClient) SoftDeleteOne(es *EnterpriseStatement) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatement(es))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseStatementClient) SoftDeleteOneID(id uint64) *EnterpriseStatementUpdateOne {
	mutation := newEnterpriseStatementMutation(c.config, OpUpdateOne, withEnterpriseStatementID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStatementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseStatement.
func (c *EnterpriseStatementClient) QueryNotDeleted() *EnterpriseStatementQuery {
	return c.Query().Where(enterprisestatement.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseStatement not deleted entity by its id.
func (c *EnterpriseStatementClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseStatement, error) {
	return c.Query().Where(enterprisestatement.ID(id), enterprisestatement.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseStatementClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseStatement {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for EnterpriseStation.
func (c *EnterpriseStationClient) SoftDelete() *EnterpriseStationUpdate {
	mutation := newEnterpriseStationMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *EnterpriseStationClient) SoftDeleteOne(es *EnterpriseStation) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStation(es))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *EnterpriseStationClient) SoftDeleteOneID(id uint64) *EnterpriseStationUpdateOne {
	mutation := newEnterpriseStationMutation(c.config, OpUpdateOne, withEnterpriseStationID(id))
	mutation.SetDeletedAt(time.Now())
	return &EnterpriseStationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for EnterpriseStation.
func (c *EnterpriseStationClient) QueryNotDeleted() *EnterpriseStationQuery {
	return c.Query().Where(enterprisestation.DeletedAtIsNil())
}

// GetNotDeleted returns a EnterpriseStation not deleted entity by its id.
func (c *EnterpriseStationClient) GetNotDeleted(ctx context.Context, id uint64) (*EnterpriseStation, error) {
	return c.Query().Where(enterprisestation.ID(id), enterprisestation.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *EnterpriseStationClient) GetNotDeletedX(ctx context.Context, id uint64) *EnterpriseStation {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Exception.
func (c *ExceptionClient) SoftDelete() *ExceptionUpdate {
	mutation := newExceptionMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExceptionClient) SoftDeleteOne(e *Exception) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withException(e))
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExceptionClient) SoftDeleteOneID(id uint64) *ExceptionUpdateOne {
	mutation := newExceptionMutation(c.config, OpUpdateOne, withExceptionID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExceptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Exception.
func (c *ExceptionClient) QueryNotDeleted() *ExceptionQuery {
	return c.Query().Where(exception.DeletedAtIsNil())
}

// GetNotDeleted returns a Exception not deleted entity by its id.
func (c *ExceptionClient) GetNotDeleted(ctx context.Context, id uint64) (*Exception, error) {
	return c.Query().Where(exception.ID(id), exception.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExceptionClient) GetNotDeletedX(ctx context.Context, id uint64) *Exception {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Exchange.
func (c *ExchangeClient) SoftDelete() *ExchangeUpdate {
	mutation := newExchangeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExchangeClient) SoftDeleteOne(e *Exchange) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchange(e))
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExchangeClient) SoftDeleteOneID(id uint64) *ExchangeUpdateOne {
	mutation := newExchangeMutation(c.config, OpUpdateOne, withExchangeID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExchangeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Exchange.
func (c *ExchangeClient) QueryNotDeleted() *ExchangeQuery {
	return c.Query().Where(exchange.DeletedAtIsNil())
}

// GetNotDeleted returns a Exchange not deleted entity by its id.
func (c *ExchangeClient) GetNotDeleted(ctx context.Context, id uint64) (*Exchange, error) {
	return c.Query().Where(exchange.ID(id), exchange.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExchangeClient) GetNotDeletedX(ctx context.Context, id uint64) *Exchange {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Export.
func (c *ExportClient) SoftDelete() *ExportUpdate {
	mutation := newExportMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ExportClient) SoftDeleteOne(e *Export) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExport(e))
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ExportClient) SoftDeleteOneID(id uint64) *ExportUpdateOne {
	mutation := newExportMutation(c.config, OpUpdateOne, withExportID(id))
	mutation.SetDeletedAt(time.Now())
	return &ExportUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Export.
func (c *ExportClient) QueryNotDeleted() *ExportQuery {
	return c.Query().Where(export.DeletedAtIsNil())
}

// GetNotDeleted returns a Export not deleted entity by its id.
func (c *ExportClient) GetNotDeleted(ctx context.Context, id uint64) (*Export, error) {
	return c.Query().Where(export.ID(id), export.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ExportClient) GetNotDeletedX(ctx context.Context, id uint64) *Export {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Feedback.
func (c *FeedbackClient) SoftDelete() *FeedbackUpdate {
	mutation := newFeedbackMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &FeedbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *FeedbackClient) SoftDeleteOne(f *Feedback) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedback(f))
	mutation.SetDeletedAt(time.Now())
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *FeedbackClient) SoftDeleteOneID(id uint64) *FeedbackUpdateOne {
	mutation := newFeedbackMutation(c.config, OpUpdateOne, withFeedbackID(id))
	mutation.SetDeletedAt(time.Now())
	return &FeedbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Feedback.
func (c *FeedbackClient) QueryNotDeleted() *FeedbackQuery {
	return c.Query().Where(feedback.DeletedAtIsNil())
}

// GetNotDeleted returns a Feedback not deleted entity by its id.
func (c *FeedbackClient) GetNotDeleted(ctx context.Context, id uint64) (*Feedback, error) {
	return c.Query().Where(feedback.ID(id), feedback.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *FeedbackClient) GetNotDeletedX(ctx context.Context, id uint64) *Feedback {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Inventory.
func (c *InventoryClient) SoftDelete() *InventoryUpdate {
	mutation := newInventoryMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *InventoryClient) SoftDeleteOne(i *Inventory) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventory(i))
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *InventoryClient) SoftDeleteOneID(id uint64) *InventoryUpdateOne {
	mutation := newInventoryMutation(c.config, OpUpdateOne, withInventoryID(id))
	mutation.SetDeletedAt(time.Now())
	return &InventoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Inventory.
func (c *InventoryClient) QueryNotDeleted() *InventoryQuery {
	return c.Query().Where(inventory.DeletedAtIsNil())
}

// GetNotDeleted returns a Inventory not deleted entity by its id.
func (c *InventoryClient) GetNotDeleted(ctx context.Context, id uint64) (*Inventory, error) {
	return c.Query().Where(inventory.ID(id), inventory.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *InventoryClient) GetNotDeletedX(ctx context.Context, id uint64) *Inventory {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Manager.
func (c *ManagerClient) SoftDelete() *ManagerUpdate {
	mutation := newManagerMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ManagerClient) SoftDeleteOne(m *Manager) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManager(m))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ManagerClient) SoftDeleteOneID(id uint64) *ManagerUpdateOne {
	mutation := newManagerMutation(c.config, OpUpdateOne, withManagerID(id))
	mutation.SetDeletedAt(time.Now())
	return &ManagerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Manager.
func (c *ManagerClient) QueryNotDeleted() *ManagerQuery {
	return c.Query().Where(manager.DeletedAtIsNil())
}

// GetNotDeleted returns a Manager not deleted entity by its id.
func (c *ManagerClient) GetNotDeleted(ctx context.Context, id uint64) (*Manager, error) {
	return c.Query().Where(manager.ID(id), manager.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ManagerClient) GetNotDeletedX(ctx context.Context, id uint64) *Manager {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Order.
func (c *OrderClient) SoftDelete() *OrderUpdate {
	mutation := newOrderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderClient) SoftDeleteOne(o *Order) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrder(o))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderClient) SoftDeleteOneID(id uint64) *OrderUpdateOne {
	mutation := newOrderMutation(c.config, OpUpdateOne, withOrderID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Order.
func (c *OrderClient) QueryNotDeleted() *OrderQuery {
	return c.Query().Where(order.DeletedAtIsNil())
}

// GetNotDeleted returns a Order not deleted entity by its id.
func (c *OrderClient) GetNotDeleted(ctx context.Context, id uint64) (*Order, error) {
	return c.Query().Where(order.ID(id), order.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderClient) GetNotDeletedX(ctx context.Context, id uint64) *Order {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for OrderRefund.
func (c *OrderRefundClient) SoftDelete() *OrderRefundUpdate {
	mutation := newOrderRefundMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *OrderRefundClient) SoftDeleteOne(or *OrderRefund) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefund(or))
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *OrderRefundClient) SoftDeleteOneID(id uint64) *OrderRefundUpdateOne {
	mutation := newOrderRefundMutation(c.config, OpUpdateOne, withOrderRefundID(id))
	mutation.SetDeletedAt(time.Now())
	return &OrderRefundUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for OrderRefund.
func (c *OrderRefundClient) QueryNotDeleted() *OrderRefundQuery {
	return c.Query().Where(orderrefund.DeletedAtIsNil())
}

// GetNotDeleted returns a OrderRefund not deleted entity by its id.
func (c *OrderRefundClient) GetNotDeleted(ctx context.Context, id uint64) (*OrderRefund, error) {
	return c.Query().Where(orderrefund.ID(id), orderrefund.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *OrderRefundClient) GetNotDeletedX(ctx context.Context, id uint64) *OrderRefund {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Person.
func (c *PersonClient) SoftDelete() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PersonClient) SoftDeleteOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PersonClient) SoftDeleteOneID(id uint64) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	mutation.SetDeletedAt(time.Now())
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Person.
func (c *PersonClient) QueryNotDeleted() *PersonQuery {
	return c.Query().Where(person.DeletedAtIsNil())
}

// GetNotDeleted returns a Person not deleted entity by its id.
func (c *PersonClient) GetNotDeleted(ctx context.Context, id uint64) (*Person, error) {
	return c.Query().Where(person.ID(id), person.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PersonClient) GetNotDeletedX(ctx context.Context, id uint64) *Person {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Plan.
func (c *PlanClient) SoftDelete() *PlanUpdate {
	mutation := newPlanMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *PlanClient) SoftDeleteOne(pl *Plan) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlan(pl))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *PlanClient) SoftDeleteOneID(id uint64) *PlanUpdateOne {
	mutation := newPlanMutation(c.config, OpUpdateOne, withPlanID(id))
	mutation.SetDeletedAt(time.Now())
	return &PlanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Plan.
func (c *PlanClient) QueryNotDeleted() *PlanQuery {
	return c.Query().Where(plan.DeletedAtIsNil())
}

// GetNotDeleted returns a Plan not deleted entity by its id.
func (c *PlanClient) GetNotDeleted(ctx context.Context, id uint64) (*Plan, error) {
	return c.Query().Where(plan.ID(id), plan.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *PlanClient) GetNotDeletedX(ctx context.Context, id uint64) *Plan {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Reserve.
func (c *ReserveClient) SoftDelete() *ReserveUpdate {
	mutation := newReserveMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *ReserveClient) SoftDeleteOne(r *Reserve) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserve(r))
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *ReserveClient) SoftDeleteOneID(id uint64) *ReserveUpdateOne {
	mutation := newReserveMutation(c.config, OpUpdateOne, withReserveID(id))
	mutation.SetDeletedAt(time.Now())
	return &ReserveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Reserve.
func (c *ReserveClient) QueryNotDeleted() *ReserveQuery {
	return c.Query().Where(reserve.DeletedAtIsNil())
}

// GetNotDeleted returns a Reserve not deleted entity by its id.
func (c *ReserveClient) GetNotDeleted(ctx context.Context, id uint64) (*Reserve, error) {
	return c.Query().Where(reserve.ID(id), reserve.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *ReserveClient) GetNotDeletedX(ctx context.Context, id uint64) *Reserve {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Rider.
func (c *RiderClient) SoftDelete() *RiderUpdate {
	mutation := newRiderMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderClient) SoftDeleteOne(r *Rider) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRider(r))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderClient) SoftDeleteOneID(id uint64) *RiderUpdateOne {
	mutation := newRiderMutation(c.config, OpUpdateOne, withRiderID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Rider.
func (c *RiderClient) QueryNotDeleted() *RiderQuery {
	return c.Query().Where(rider.DeletedAtIsNil())
}

// GetNotDeleted returns a Rider not deleted entity by its id.
func (c *RiderClient) GetNotDeleted(ctx context.Context, id uint64) (*Rider, error) {
	return c.Query().Where(rider.ID(id), rider.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderClient) GetNotDeletedX(ctx context.Context, id uint64) *Rider {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for RiderFollowUp.
func (c *RiderFollowUpClient) SoftDelete() *RiderFollowUpUpdate {
	mutation := newRiderFollowUpMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *RiderFollowUpClient) SoftDeleteOne(rfu *RiderFollowUp) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUp(rfu))
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *RiderFollowUpClient) SoftDeleteOneID(id uint64) *RiderFollowUpUpdateOne {
	mutation := newRiderFollowUpMutation(c.config, OpUpdateOne, withRiderFollowUpID(id))
	mutation.SetDeletedAt(time.Now())
	return &RiderFollowUpUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for RiderFollowUp.
func (c *RiderFollowUpClient) QueryNotDeleted() *RiderFollowUpQuery {
	return c.Query().Where(riderfollowup.DeletedAtIsNil())
}

// GetNotDeleted returns a RiderFollowUp not deleted entity by its id.
func (c *RiderFollowUpClient) GetNotDeleted(ctx context.Context, id uint64) (*RiderFollowUp, error) {
	return c.Query().Where(riderfollowup.ID(id), riderfollowup.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *RiderFollowUpClient) GetNotDeletedX(ctx context.Context, id uint64) *RiderFollowUp {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Stock.
func (c *StockClient) SoftDelete() *StockUpdate {
	mutation := newStockMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StockUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StockClient) SoftDeleteOne(s *Stock) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStock(s))
	mutation.SetDeletedAt(time.Now())
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StockClient) SoftDeleteOneID(id uint64) *StockUpdateOne {
	mutation := newStockMutation(c.config, OpUpdateOne, withStockID(id))
	mutation.SetDeletedAt(time.Now())
	return &StockUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Stock.
func (c *StockClient) QueryNotDeleted() *StockQuery {
	return c.Query().Where(stock.DeletedAtIsNil())
}

// GetNotDeleted returns a Stock not deleted entity by its id.
func (c *StockClient) GetNotDeleted(ctx context.Context, id uint64) (*Stock, error) {
	return c.Query().Where(stock.ID(id), stock.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StockClient) GetNotDeletedX(ctx context.Context, id uint64) *Stock {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Store.
func (c *StoreClient) SoftDelete() *StoreUpdate {
	mutation := newStoreMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *StoreClient) SoftDeleteOne(s *Store) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStore(s))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *StoreClient) SoftDeleteOneID(id uint64) *StoreUpdateOne {
	mutation := newStoreMutation(c.config, OpUpdateOne, withStoreID(id))
	mutation.SetDeletedAt(time.Now())
	return &StoreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Store.
func (c *StoreClient) QueryNotDeleted() *StoreQuery {
	return c.Query().Where(store.DeletedAtIsNil())
}

// GetNotDeleted returns a Store not deleted entity by its id.
func (c *StoreClient) GetNotDeleted(ctx context.Context, id uint64) (*Store, error) {
	return c.Query().Where(store.ID(id), store.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *StoreClient) GetNotDeletedX(ctx context.Context, id uint64) *Store {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for Subscribe.
func (c *SubscribeClient) SoftDelete() *SubscribeUpdate {
	mutation := newSubscribeMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *SubscribeClient) SoftDeleteOne(s *Subscribe) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribe(s))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *SubscribeClient) SoftDeleteOneID(id uint64) *SubscribeUpdateOne {
	mutation := newSubscribeMutation(c.config, OpUpdateOne, withSubscribeID(id))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for Subscribe.
func (c *SubscribeClient) QueryNotDeleted() *SubscribeQuery {
	return c.Query().Where(subscribe.DeletedAtIsNil())
}

// GetNotDeleted returns a Subscribe not deleted entity by its id.
func (c *SubscribeClient) GetNotDeleted(ctx context.Context, id uint64) (*Subscribe, error) {
	return c.Query().Where(subscribe.ID(id), subscribe.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *SubscribeClient) GetNotDeletedX(ctx context.Context, id uint64) *Subscribe {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for SubscribeAlter.
func (c *SubscribeAlterClient) SoftDelete() *SubscribeAlterUpdate {
	mutation := newSubscribeAlterMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &SubscribeAlterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *SubscribeAlterClient) SoftDeleteOne(sa *SubscribeAlter) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlter(sa))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *SubscribeAlterClient) SoftDeleteOneID(id uint64) *SubscribeAlterUpdateOne {
	mutation := newSubscribeAlterMutation(c.config, OpUpdateOne, withSubscribeAlterID(id))
	mutation.SetDeletedAt(time.Now())
	return &SubscribeAlterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for SubscribeAlter.
func (c *SubscribeAlterClient) QueryNotDeleted() *SubscribeAlterQuery {
	return c.Query().Where(subscribealter.DeletedAtIsNil())
}

// GetNotDeleted returns a SubscribeAlter not deleted entity by its id.
func (c *SubscribeAlterClient) GetNotDeleted(ctx context.Context, id uint64) (*SubscribeAlter, error) {
	return c.Query().Where(subscribealter.ID(id), subscribealter.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *SubscribeAlterClient) GetNotDeletedX(ctx context.Context, id uint64) *SubscribeAlter {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// SoftDelete returns an soft delete builder for SubscribePause.
func (c *SubscribePauseClient) SoftDelete() *SubscribePauseUpdate {
	mutation := newSubscribePauseMutation(c.config, OpUpdate)
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOne returns an soft delete builder for the given entity.
func (c *SubscribePauseClient) SoftDeleteOne(sp *SubscribePause) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePause(sp))
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// SoftDeleteOneID returns an soft delete builder for the given id.
func (c *SubscribePauseClient) SoftDeleteOneID(id uint64) *SubscribePauseUpdateOne {
	mutation := newSubscribePauseMutation(c.config, OpUpdateOne, withSubscribePauseID(id))
	mutation.SetDeletedAt(time.Now())
	return &SubscribePauseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// QueryNotDeleted returns a query not deleted builder for SubscribePause.
func (c *SubscribePauseClient) QueryNotDeleted() *SubscribePauseQuery {
	return c.Query().Where(subscribepause.DeletedAtIsNil())
}

// GetNotDeleted returns a SubscribePause not deleted entity by its id.
func (c *SubscribePauseClient) GetNotDeleted(ctx context.Context, id uint64) (*SubscribePause, error) {
	return c.Query().Where(subscribepause.ID(id), subscribepause.DeletedAtIsNil()).Only(ctx)
}

// GetNotDeletedX is like Get, but panics if an error occurs.
func (c *SubscribePauseClient) GetNotDeletedX(ctx context.Context, id uint64) *SubscribePause {
	obj, err := c.GetNotDeleted(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}
