// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseStatementCreate is the builder for creating a EnterpriseStatement entity.
type EnterpriseStatementCreate struct {
	config
	mutation *EnterpriseStatementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (esc *EnterpriseStatementCreate) SetCreatedAt(t time.Time) *EnterpriseStatementCreate {
	esc.mutation.SetCreatedAt(t)
	return esc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableCreatedAt(t *time.Time) *EnterpriseStatementCreate {
	if t != nil {
		esc.SetCreatedAt(*t)
	}
	return esc
}

// SetUpdatedAt sets the "updated_at" field.
func (esc *EnterpriseStatementCreate) SetUpdatedAt(t time.Time) *EnterpriseStatementCreate {
	esc.mutation.SetUpdatedAt(t)
	return esc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableUpdatedAt(t *time.Time) *EnterpriseStatementCreate {
	if t != nil {
		esc.SetUpdatedAt(*t)
	}
	return esc
}

// SetDeletedAt sets the "deleted_at" field.
func (esc *EnterpriseStatementCreate) SetDeletedAt(t time.Time) *EnterpriseStatementCreate {
	esc.mutation.SetDeletedAt(t)
	return esc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableDeletedAt(t *time.Time) *EnterpriseStatementCreate {
	if t != nil {
		esc.SetDeletedAt(*t)
	}
	return esc
}

// SetCreator sets the "creator" field.
func (esc *EnterpriseStatementCreate) SetCreator(m *model.Modifier) *EnterpriseStatementCreate {
	esc.mutation.SetCreator(m)
	return esc
}

// SetLastModifier sets the "last_modifier" field.
func (esc *EnterpriseStatementCreate) SetLastModifier(m *model.Modifier) *EnterpriseStatementCreate {
	esc.mutation.SetLastModifier(m)
	return esc
}

// SetRemark sets the "remark" field.
func (esc *EnterpriseStatementCreate) SetRemark(s string) *EnterpriseStatementCreate {
	esc.mutation.SetRemark(s)
	return esc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableRemark(s *string) *EnterpriseStatementCreate {
	if s != nil {
		esc.SetRemark(*s)
	}
	return esc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (esc *EnterpriseStatementCreate) SetEnterpriseID(u uint64) *EnterpriseStatementCreate {
	esc.mutation.SetEnterpriseID(u)
	return esc
}

// SetCost sets the "cost" field.
func (esc *EnterpriseStatementCreate) SetCost(f float64) *EnterpriseStatementCreate {
	esc.mutation.SetCost(f)
	return esc
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableCost(f *float64) *EnterpriseStatementCreate {
	if f != nil {
		esc.SetCost(*f)
	}
	return esc
}

// SetAmount sets the "amount" field.
func (esc *EnterpriseStatementCreate) SetAmount(f float64) *EnterpriseStatementCreate {
	esc.mutation.SetAmount(f)
	return esc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableAmount(f *float64) *EnterpriseStatementCreate {
	if f != nil {
		esc.SetAmount(*f)
	}
	return esc
}

// SetBalance sets the "balance" field.
func (esc *EnterpriseStatementCreate) SetBalance(f float64) *EnterpriseStatementCreate {
	esc.mutation.SetBalance(f)
	return esc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableBalance(f *float64) *EnterpriseStatementCreate {
	if f != nil {
		esc.SetBalance(*f)
	}
	return esc
}

// SetSettledAt sets the "settled_at" field.
func (esc *EnterpriseStatementCreate) SetSettledAt(t time.Time) *EnterpriseStatementCreate {
	esc.mutation.SetSettledAt(t)
	return esc
}

// SetNillableSettledAt sets the "settled_at" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableSettledAt(t *time.Time) *EnterpriseStatementCreate {
	if t != nil {
		esc.SetSettledAt(*t)
	}
	return esc
}

// SetDays sets the "days" field.
func (esc *EnterpriseStatementCreate) SetDays(i int) *EnterpriseStatementCreate {
	esc.mutation.SetDays(i)
	return esc
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableDays(i *int) *EnterpriseStatementCreate {
	if i != nil {
		esc.SetDays(*i)
	}
	return esc
}

// SetRiderNumber sets the "rider_number" field.
func (esc *EnterpriseStatementCreate) SetRiderNumber(i int) *EnterpriseStatementCreate {
	esc.mutation.SetRiderNumber(i)
	return esc
}

// SetNillableRiderNumber sets the "rider_number" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableRiderNumber(i *int) *EnterpriseStatementCreate {
	if i != nil {
		esc.SetRiderNumber(*i)
	}
	return esc
}

// SetBillTime sets the "bill_time" field.
func (esc *EnterpriseStatementCreate) SetBillTime(t time.Time) *EnterpriseStatementCreate {
	esc.mutation.SetBillTime(t)
	return esc
}

// SetNillableBillTime sets the "bill_time" field if the given value is not nil.
func (esc *EnterpriseStatementCreate) SetNillableBillTime(t *time.Time) *EnterpriseStatementCreate {
	if t != nil {
		esc.SetBillTime(*t)
	}
	return esc
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (esc *EnterpriseStatementCreate) AddSubscribeIDs(ids ...uint64) *EnterpriseStatementCreate {
	esc.mutation.AddSubscribeIDs(ids...)
	return esc
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (esc *EnterpriseStatementCreate) AddSubscribes(s ...*Subscribe) *EnterpriseStatementCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return esc.AddSubscribeIDs(ids...)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (esc *EnterpriseStatementCreate) SetEnterprise(e *Enterprise) *EnterpriseStatementCreate {
	return esc.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterpriseStatementMutation object of the builder.
func (esc *EnterpriseStatementCreate) Mutation() *EnterpriseStatementMutation {
	return esc.mutation
}

// Save creates the EnterpriseStatement in the database.
func (esc *EnterpriseStatementCreate) Save(ctx context.Context) (*EnterpriseStatement, error) {
	var (
		err  error
		node *EnterpriseStatement
	)
	if err := esc.defaults(); err != nil {
		return nil, err
	}
	if len(esc.hooks) == 0 {
		if err = esc.check(); err != nil {
			return nil, err
		}
		node, err = esc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esc.check(); err != nil {
				return nil, err
			}
			esc.mutation = mutation
			if node, err = esc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(esc.hooks) - 1; i >= 0; i-- {
			if esc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseStatement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseStatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EnterpriseStatementCreate) SaveX(ctx context.Context) *EnterpriseStatement {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EnterpriseStatementCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EnterpriseStatementCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EnterpriseStatementCreate) defaults() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		if enterprisestatement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestatement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestatement.DefaultCreatedAt()
		esc.mutation.SetCreatedAt(v)
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		if enterprisestatement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestatement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestatement.DefaultUpdatedAt()
		esc.mutation.SetUpdatedAt(v)
	}
	if _, ok := esc.mutation.Cost(); !ok {
		v := enterprisestatement.DefaultCost
		esc.mutation.SetCost(v)
	}
	if _, ok := esc.mutation.Amount(); !ok {
		v := enterprisestatement.DefaultAmount
		esc.mutation.SetAmount(v)
	}
	if _, ok := esc.mutation.Balance(); !ok {
		v := enterprisestatement.DefaultBalance
		esc.mutation.SetBalance(v)
	}
	if _, ok := esc.mutation.Days(); !ok {
		v := enterprisestatement.DefaultDays
		esc.mutation.SetDays(v)
	}
	if _, ok := esc.mutation.RiderNumber(); !ok {
		v := enterprisestatement.DefaultRiderNumber
		esc.mutation.SetRiderNumber(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esc *EnterpriseStatementCreate) check() error {
	if _, ok := esc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterpriseStatement.created_at"`)}
	}
	if _, ok := esc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterpriseStatement.updated_at"`)}
	}
	if _, ok := esc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "EnterpriseStatement.enterprise_id"`)}
	}
	if _, ok := esc.mutation.Cost(); !ok {
		return &ValidationError{Name: "cost", err: errors.New(`ent: missing required field "EnterpriseStatement.cost"`)}
	}
	if _, ok := esc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "EnterpriseStatement.amount"`)}
	}
	if _, ok := esc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "EnterpriseStatement.balance"`)}
	}
	if _, ok := esc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "EnterpriseStatement.days"`)}
	}
	if _, ok := esc.mutation.RiderNumber(); !ok {
		return &ValidationError{Name: "rider_number", err: errors.New(`ent: missing required field "EnterpriseStatement.rider_number"`)}
	}
	if _, ok := esc.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "EnterpriseStatement.enterprise"`)}
	}
	return nil
}

func (esc *EnterpriseStatementCreate) sqlSave(ctx context.Context) (*EnterpriseStatement, error) {
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (esc *EnterpriseStatementCreate) createSpec() (*EnterpriseStatement, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterpriseStatement{config: esc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enterprisestatement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		}
	)
	_spec.OnConflict = esc.conflict
	if value, ok := esc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := esc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := esc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := esc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestatement.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := esc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestatement.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := esc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestatement.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := esc.mutation.Cost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldCost,
		})
		_node.Cost = value
	}
	if value, ok := esc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := esc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := esc.mutation.SettledAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldSettledAt,
		})
		_node.SettledAt = &value
	}
	if value, ok := esc.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldDays,
		})
		_node.Days = value
	}
	if value, ok := esc.mutation.RiderNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldRiderNumber,
		})
		_node.RiderNumber = value
	}
	if value, ok := esc.mutation.BillTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldBillTime,
		})
		_node.BillTime = &value
	}
	if nodes := esc.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.SubscribesTable,
			Columns: []string{enterprisestatement.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseStatement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (esc *EnterpriseStatementCreate) OnConflict(opts ...sql.ConflictOption) *EnterpriseStatementUpsertOne {
	esc.conflict = opts
	return &EnterpriseStatementUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (esc *EnterpriseStatementCreate) OnConflictColumns(columns ...string) *EnterpriseStatementUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseStatementUpsertOne{
		create: esc,
	}
}

type (
	// EnterpriseStatementUpsertOne is the builder for "upsert"-ing
	//  one EnterpriseStatement node.
	EnterpriseStatementUpsertOne struct {
		create *EnterpriseStatementCreate
	}

	// EnterpriseStatementUpsert is the "OnConflict" setter.
	EnterpriseStatementUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseStatementUpsert) SetCreatedAt(v time.Time) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateCreatedAt() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseStatementUpsert) SetUpdatedAt(v time.Time) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateUpdatedAt() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseStatementUpsert) SetDeletedAt(v time.Time) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateDeletedAt() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseStatementUpsert) ClearDeletedAt() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *EnterpriseStatementUpsert) SetCreator(v *model.Modifier) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateCreator() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseStatementUpsert) ClearCreator() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseStatementUpsert) SetLastModifier(v *model.Modifier) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateLastModifier() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseStatementUpsert) ClearLastModifier() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EnterpriseStatementUpsert) SetRemark(v string) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateRemark() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseStatementUpsert) ClearRemark() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldRemark)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseStatementUpsert) SetEnterpriseID(v uint64) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateEnterpriseID() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldEnterpriseID)
	return u
}

// SetCost sets the "cost" field.
func (u *EnterpriseStatementUpsert) SetCost(v float64) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldCost, v)
	return u
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateCost() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldCost)
	return u
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseStatementUpsert) AddCost(v float64) *EnterpriseStatementUpsert {
	u.Add(enterprisestatement.FieldCost, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *EnterpriseStatementUpsert) SetAmount(v float64) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateAmount() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *EnterpriseStatementUpsert) AddAmount(v float64) *EnterpriseStatementUpsert {
	u.Add(enterprisestatement.FieldAmount, v)
	return u
}

// SetBalance sets the "balance" field.
func (u *EnterpriseStatementUpsert) SetBalance(v float64) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateBalance() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *EnterpriseStatementUpsert) AddBalance(v float64) *EnterpriseStatementUpsert {
	u.Add(enterprisestatement.FieldBalance, v)
	return u
}

// SetSettledAt sets the "settled_at" field.
func (u *EnterpriseStatementUpsert) SetSettledAt(v time.Time) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldSettledAt, v)
	return u
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateSettledAt() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldSettledAt)
	return u
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *EnterpriseStatementUpsert) ClearSettledAt() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldSettledAt)
	return u
}

// SetDays sets the "days" field.
func (u *EnterpriseStatementUpsert) SetDays(v int) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateDays() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *EnterpriseStatementUpsert) AddDays(v int) *EnterpriseStatementUpsert {
	u.Add(enterprisestatement.FieldDays, v)
	return u
}

// SetRiderNumber sets the "rider_number" field.
func (u *EnterpriseStatementUpsert) SetRiderNumber(v int) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldRiderNumber, v)
	return u
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateRiderNumber() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldRiderNumber)
	return u
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *EnterpriseStatementUpsert) AddRiderNumber(v int) *EnterpriseStatementUpsert {
	u.Add(enterprisestatement.FieldRiderNumber, v)
	return u
}

// SetBillTime sets the "bill_time" field.
func (u *EnterpriseStatementUpsert) SetBillTime(v time.Time) *EnterpriseStatementUpsert {
	u.Set(enterprisestatement.FieldBillTime, v)
	return u
}

// UpdateBillTime sets the "bill_time" field to the value that was provided on create.
func (u *EnterpriseStatementUpsert) UpdateBillTime() *EnterpriseStatementUpsert {
	u.SetExcluded(enterprisestatement.FieldBillTime)
	return u
}

// ClearBillTime clears the value of the "bill_time" field.
func (u *EnterpriseStatementUpsert) ClearBillTime() *EnterpriseStatementUpsert {
	u.SetNull(enterprisestatement.FieldBillTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterpriseStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseStatementUpsertOne) UpdateNewValues() *EnterpriseStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterprisestatement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(enterprisestatement.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EnterpriseStatement.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EnterpriseStatementUpsertOne) Ignore() *EnterpriseStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseStatementUpsertOne) DoNothing() *EnterpriseStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseStatementCreate.OnConflict
// documentation for more info.
func (u *EnterpriseStatementUpsertOne) Update(set func(*EnterpriseStatementUpsert)) *EnterpriseStatementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseStatementUpsertOne) SetCreatedAt(v time.Time) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateCreatedAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseStatementUpsertOne) SetUpdatedAt(v time.Time) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateUpdatedAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseStatementUpsertOne) SetDeletedAt(v time.Time) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateDeletedAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseStatementUpsertOne) ClearDeletedAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseStatementUpsertOne) SetCreator(v *model.Modifier) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateCreator() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseStatementUpsertOne) ClearCreator() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseStatementUpsertOne) SetLastModifier(v *model.Modifier) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateLastModifier() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseStatementUpsertOne) ClearLastModifier() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseStatementUpsertOne) SetRemark(v string) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateRemark() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseStatementUpsertOne) ClearRemark() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseStatementUpsertOne) SetEnterpriseID(v uint64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateEnterpriseID() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetCost sets the "cost" field.
func (u *EnterpriseStatementUpsertOne) SetCost(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseStatementUpsertOne) AddCost(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateCost() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCost()
	})
}

// SetAmount sets the "amount" field.
func (u *EnterpriseStatementUpsertOne) SetAmount(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *EnterpriseStatementUpsertOne) AddAmount(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateAmount() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateAmount()
	})
}

// SetBalance sets the "balance" field.
func (u *EnterpriseStatementUpsertOne) SetBalance(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *EnterpriseStatementUpsertOne) AddBalance(v float64) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateBalance() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateBalance()
	})
}

// SetSettledAt sets the "settled_at" field.
func (u *EnterpriseStatementUpsertOne) SetSettledAt(v time.Time) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetSettledAt(v)
	})
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateSettledAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateSettledAt()
	})
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *EnterpriseStatementUpsertOne) ClearSettledAt() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearSettledAt()
	})
}

// SetDays sets the "days" field.
func (u *EnterpriseStatementUpsertOne) SetDays(v int) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *EnterpriseStatementUpsertOne) AddDays(v int) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateDays() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateDays()
	})
}

// SetRiderNumber sets the "rider_number" field.
func (u *EnterpriseStatementUpsertOne) SetRiderNumber(v int) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetRiderNumber(v)
	})
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *EnterpriseStatementUpsertOne) AddRiderNumber(v int) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddRiderNumber(v)
	})
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateRiderNumber() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateRiderNumber()
	})
}

// SetBillTime sets the "bill_time" field.
func (u *EnterpriseStatementUpsertOne) SetBillTime(v time.Time) *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetBillTime(v)
	})
}

// UpdateBillTime sets the "bill_time" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertOne) UpdateBillTime() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateBillTime()
	})
}

// ClearBillTime clears the value of the "bill_time" field.
func (u *EnterpriseStatementUpsertOne) ClearBillTime() *EnterpriseStatementUpsertOne {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearBillTime()
	})
}

// Exec executes the query.
func (u *EnterpriseStatementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseStatementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseStatementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterpriseStatementUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterpriseStatementUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterpriseStatementCreateBulk is the builder for creating many EnterpriseStatement entities in bulk.
type EnterpriseStatementCreateBulk struct {
	config
	builders []*EnterpriseStatementCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterpriseStatement entities in the database.
func (escb *EnterpriseStatementCreateBulk) Save(ctx context.Context) ([]*EnterpriseStatement, error) {
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EnterpriseStatement, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterpriseStatementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EnterpriseStatementCreateBulk) SaveX(ctx context.Context) []*EnterpriseStatement {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EnterpriseStatementCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EnterpriseStatementCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseStatement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseStatementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (escb *EnterpriseStatementCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterpriseStatementUpsertBulk {
	escb.conflict = opts
	return &EnterpriseStatementUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseStatement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (escb *EnterpriseStatementCreateBulk) OnConflictColumns(columns ...string) *EnterpriseStatementUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseStatementUpsertBulk{
		create: escb,
	}
}

// EnterpriseStatementUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterpriseStatement nodes.
type EnterpriseStatementUpsertBulk struct {
	create *EnterpriseStatementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterpriseStatement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseStatementUpsertBulk) UpdateNewValues() *EnterpriseStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterprisestatement.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(enterprisestatement.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseStatement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EnterpriseStatementUpsertBulk) Ignore() *EnterpriseStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseStatementUpsertBulk) DoNothing() *EnterpriseStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseStatementCreateBulk.OnConflict
// documentation for more info.
func (u *EnterpriseStatementUpsertBulk) Update(set func(*EnterpriseStatementUpsert)) *EnterpriseStatementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseStatementUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseStatementUpsertBulk) SetCreatedAt(v time.Time) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateCreatedAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseStatementUpsertBulk) SetUpdatedAt(v time.Time) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateUpdatedAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseStatementUpsertBulk) SetDeletedAt(v time.Time) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateDeletedAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseStatementUpsertBulk) ClearDeletedAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseStatementUpsertBulk) SetCreator(v *model.Modifier) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateCreator() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseStatementUpsertBulk) ClearCreator() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseStatementUpsertBulk) SetLastModifier(v *model.Modifier) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateLastModifier() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseStatementUpsertBulk) ClearLastModifier() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseStatementUpsertBulk) SetRemark(v string) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateRemark() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseStatementUpsertBulk) ClearRemark() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearRemark()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseStatementUpsertBulk) SetEnterpriseID(v uint64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateEnterpriseID() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetCost sets the "cost" field.
func (u *EnterpriseStatementUpsertBulk) SetCost(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetCost(v)
	})
}

// AddCost adds v to the "cost" field.
func (u *EnterpriseStatementUpsertBulk) AddCost(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddCost(v)
	})
}

// UpdateCost sets the "cost" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateCost() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateCost()
	})
}

// SetAmount sets the "amount" field.
func (u *EnterpriseStatementUpsertBulk) SetAmount(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *EnterpriseStatementUpsertBulk) AddAmount(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateAmount() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateAmount()
	})
}

// SetBalance sets the "balance" field.
func (u *EnterpriseStatementUpsertBulk) SetBalance(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *EnterpriseStatementUpsertBulk) AddBalance(v float64) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateBalance() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateBalance()
	})
}

// SetSettledAt sets the "settled_at" field.
func (u *EnterpriseStatementUpsertBulk) SetSettledAt(v time.Time) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetSettledAt(v)
	})
}

// UpdateSettledAt sets the "settled_at" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateSettledAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateSettledAt()
	})
}

// ClearSettledAt clears the value of the "settled_at" field.
func (u *EnterpriseStatementUpsertBulk) ClearSettledAt() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearSettledAt()
	})
}

// SetDays sets the "days" field.
func (u *EnterpriseStatementUpsertBulk) SetDays(v int) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *EnterpriseStatementUpsertBulk) AddDays(v int) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateDays() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateDays()
	})
}

// SetRiderNumber sets the "rider_number" field.
func (u *EnterpriseStatementUpsertBulk) SetRiderNumber(v int) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetRiderNumber(v)
	})
}

// AddRiderNumber adds v to the "rider_number" field.
func (u *EnterpriseStatementUpsertBulk) AddRiderNumber(v int) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.AddRiderNumber(v)
	})
}

// UpdateRiderNumber sets the "rider_number" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateRiderNumber() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateRiderNumber()
	})
}

// SetBillTime sets the "bill_time" field.
func (u *EnterpriseStatementUpsertBulk) SetBillTime(v time.Time) *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.SetBillTime(v)
	})
}

// UpdateBillTime sets the "bill_time" field to the value that was provided on create.
func (u *EnterpriseStatementUpsertBulk) UpdateBillTime() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.UpdateBillTime()
	})
}

// ClearBillTime clears the value of the "bill_time" field.
func (u *EnterpriseStatementUpsertBulk) ClearBillTime() *EnterpriseStatementUpsertBulk {
	return u.Update(func(s *EnterpriseStatementUpsert) {
		s.ClearBillTime()
	})
}

// Exec executes the query.
func (u *EnterpriseStatementUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterpriseStatementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseStatementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseStatementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
