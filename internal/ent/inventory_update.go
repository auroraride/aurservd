// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/inventory"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// InventoryUpdate is the builder for updating Inventory entities.
type InventoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iu *InventoryUpdate) Where(ps ...predicate.Inventory) *InventoryUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InventoryUpdate) SetUpdatedAt(t time.Time) *InventoryUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *InventoryUpdate) SetDeletedAt(t time.Time) *InventoryUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableDeletedAt(t *time.Time) *InventoryUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *InventoryUpdate) ClearDeletedAt() *InventoryUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// SetLastModifier sets the "last_modifier" field.
func (iu *InventoryUpdate) SetLastModifier(m *model.Modifier) *InventoryUpdate {
	iu.mutation.SetLastModifier(m)
	return iu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (iu *InventoryUpdate) ClearLastModifier() *InventoryUpdate {
	iu.mutation.ClearLastModifier()
	return iu
}

// SetRemark sets the "remark" field.
func (iu *InventoryUpdate) SetRemark(s string) *InventoryUpdate {
	iu.mutation.SetRemark(s)
	return iu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableRemark(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetRemark(*s)
	}
	return iu
}

// ClearRemark clears the value of the "remark" field.
func (iu *InventoryUpdate) ClearRemark() *InventoryUpdate {
	iu.mutation.ClearRemark()
	return iu
}

// SetName sets the "name" field.
func (iu *InventoryUpdate) SetName(s string) *InventoryUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableName(s *string) *InventoryUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetCount sets the "count" field.
func (iu *InventoryUpdate) SetCount(b bool) *InventoryUpdate {
	iu.mutation.SetCount(b)
	return iu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableCount(b *bool) *InventoryUpdate {
	if b != nil {
		iu.SetCount(*b)
	}
	return iu
}

// SetTransfer sets the "transfer" field.
func (iu *InventoryUpdate) SetTransfer(b bool) *InventoryUpdate {
	iu.mutation.SetTransfer(b)
	return iu
}

// SetNillableTransfer sets the "transfer" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillableTransfer(b *bool) *InventoryUpdate {
	if b != nil {
		iu.SetTransfer(*b)
	}
	return iu
}

// SetPurchase sets the "purchase" field.
func (iu *InventoryUpdate) SetPurchase(b bool) *InventoryUpdate {
	iu.mutation.SetPurchase(b)
	return iu
}

// SetNillablePurchase sets the "purchase" field if the given value is not nil.
func (iu *InventoryUpdate) SetNillablePurchase(b *bool) *InventoryUpdate {
	if b != nil {
		iu.SetPurchase(*b)
	}
	return iu
}

// Mutation returns the InventoryMutation object of the builder.
func (iu *InventoryUpdate) Mutation() *InventoryMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InventoryUpdate) Save(ctx context.Context) (int, error) {
	if err := iu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InventoryUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InventoryUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InventoryUpdate) defaults() error {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		if inventory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized inventory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := inventory.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iu *InventoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdate {
	iu.modifiers = append(iu.modifiers, modifiers...)
	return iu
}

func (iu *InventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeUint64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeTime)
	}
	if iu.mutation.CreatorCleared() {
		_spec.ClearField(inventory.FieldCreator, field.TypeJSON)
	}
	if value, ok := iu.mutation.LastModifier(); ok {
		_spec.SetField(inventory.FieldLastModifier, field.TypeJSON, value)
	}
	if iu.mutation.LastModifierCleared() {
		_spec.ClearField(inventory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := iu.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
	}
	if iu.mutation.RemarkCleared() {
		_spec.ClearField(inventory.FieldRemark, field.TypeString)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Count(); ok {
		_spec.SetField(inventory.FieldCount, field.TypeBool, value)
	}
	if value, ok := iu.mutation.Transfer(); ok {
		_spec.SetField(inventory.FieldTransfer, field.TypeBool, value)
	}
	if value, ok := iu.mutation.Purchase(); ok {
		_spec.SetField(inventory.FieldPurchase, field.TypeBool, value)
	}
	_spec.AddModifiers(iu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InventoryUpdateOne is the builder for updating a single Inventory entity.
type InventoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InventoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InventoryUpdateOne) SetUpdatedAt(t time.Time) *InventoryUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *InventoryUpdateOne) SetDeletedAt(t time.Time) *InventoryUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableDeletedAt(t *time.Time) *InventoryUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *InventoryUpdateOne) ClearDeletedAt() *InventoryUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// SetLastModifier sets the "last_modifier" field.
func (iuo *InventoryUpdateOne) SetLastModifier(m *model.Modifier) *InventoryUpdateOne {
	iuo.mutation.SetLastModifier(m)
	return iuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (iuo *InventoryUpdateOne) ClearLastModifier() *InventoryUpdateOne {
	iuo.mutation.ClearLastModifier()
	return iuo
}

// SetRemark sets the "remark" field.
func (iuo *InventoryUpdateOne) SetRemark(s string) *InventoryUpdateOne {
	iuo.mutation.SetRemark(s)
	return iuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableRemark(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetRemark(*s)
	}
	return iuo
}

// ClearRemark clears the value of the "remark" field.
func (iuo *InventoryUpdateOne) ClearRemark() *InventoryUpdateOne {
	iuo.mutation.ClearRemark()
	return iuo
}

// SetName sets the "name" field.
func (iuo *InventoryUpdateOne) SetName(s string) *InventoryUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableName(s *string) *InventoryUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetCount sets the "count" field.
func (iuo *InventoryUpdateOne) SetCount(b bool) *InventoryUpdateOne {
	iuo.mutation.SetCount(b)
	return iuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableCount(b *bool) *InventoryUpdateOne {
	if b != nil {
		iuo.SetCount(*b)
	}
	return iuo
}

// SetTransfer sets the "transfer" field.
func (iuo *InventoryUpdateOne) SetTransfer(b bool) *InventoryUpdateOne {
	iuo.mutation.SetTransfer(b)
	return iuo
}

// SetNillableTransfer sets the "transfer" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillableTransfer(b *bool) *InventoryUpdateOne {
	if b != nil {
		iuo.SetTransfer(*b)
	}
	return iuo
}

// SetPurchase sets the "purchase" field.
func (iuo *InventoryUpdateOne) SetPurchase(b bool) *InventoryUpdateOne {
	iuo.mutation.SetPurchase(b)
	return iuo
}

// SetNillablePurchase sets the "purchase" field if the given value is not nil.
func (iuo *InventoryUpdateOne) SetNillablePurchase(b *bool) *InventoryUpdateOne {
	if b != nil {
		iuo.SetPurchase(*b)
	}
	return iuo
}

// Mutation returns the InventoryMutation object of the builder.
func (iuo *InventoryUpdateOne) Mutation() *InventoryMutation {
	return iuo.mutation
}

// Where appends a list predicates to the InventoryUpdate builder.
func (iuo *InventoryUpdateOne) Where(ps ...predicate.Inventory) *InventoryUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InventoryUpdateOne) Select(field string, fields ...string) *InventoryUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Inventory entity.
func (iuo *InventoryUpdateOne) Save(ctx context.Context) (*Inventory, error) {
	if err := iuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InventoryUpdateOne) SaveX(ctx context.Context) *Inventory {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InventoryUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InventoryUpdateOne) defaults() error {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		if inventory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized inventory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := inventory.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iuo *InventoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InventoryUpdateOne {
	iuo.modifiers = append(iuo.modifiers, modifiers...)
	return iuo
}

func (iuo *InventoryUpdateOne) sqlSave(ctx context.Context) (_node *Inventory, err error) {
	_spec := sqlgraph.NewUpdateSpec(inventory.Table, inventory.Columns, sqlgraph.NewFieldSpec(inventory.FieldID, field.TypeUint64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Inventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inventory.FieldID)
		for _, f := range fields {
			if !inventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(inventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.SetField(inventory.FieldDeletedAt, field.TypeTime, value)
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.ClearField(inventory.FieldDeletedAt, field.TypeTime)
	}
	if iuo.mutation.CreatorCleared() {
		_spec.ClearField(inventory.FieldCreator, field.TypeJSON)
	}
	if value, ok := iuo.mutation.LastModifier(); ok {
		_spec.SetField(inventory.FieldLastModifier, field.TypeJSON, value)
	}
	if iuo.mutation.LastModifierCleared() {
		_spec.ClearField(inventory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := iuo.mutation.Remark(); ok {
		_spec.SetField(inventory.FieldRemark, field.TypeString, value)
	}
	if iuo.mutation.RemarkCleared() {
		_spec.ClearField(inventory.FieldRemark, field.TypeString)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(inventory.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Count(); ok {
		_spec.SetField(inventory.FieldCount, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.Transfer(); ok {
		_spec.SetField(inventory.FieldTransfer, field.TypeBool, value)
	}
	if value, ok := iuo.mutation.Purchase(); ok {
		_spec.SetField(inventory.FieldPurchase, field.TypeBool, value)
	}
	_spec.AddModifiers(iuo.modifiers...)
	_node = &Inventory{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
