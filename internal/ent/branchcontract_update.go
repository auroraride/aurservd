// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BranchContractUpdate is the builder for updating BranchContract entities.
type BranchContractUpdate struct {
	config
	hooks     []Hook
	mutation  *BranchContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BranchContractUpdate builder.
func (bcu *BranchContractUpdate) Where(ps ...predicate.BranchContract) *BranchContractUpdate {
	bcu.mutation.Where(ps...)
	return bcu
}

// SetUpdatedAt sets the "updated_at" field.
func (bcu *BranchContractUpdate) SetUpdatedAt(t time.Time) *BranchContractUpdate {
	bcu.mutation.SetUpdatedAt(t)
	return bcu
}

// SetDeletedAt sets the "deleted_at" field.
func (bcu *BranchContractUpdate) SetDeletedAt(t time.Time) *BranchContractUpdate {
	bcu.mutation.SetDeletedAt(t)
	return bcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcu *BranchContractUpdate) SetNillableDeletedAt(t *time.Time) *BranchContractUpdate {
	if t != nil {
		bcu.SetDeletedAt(*t)
	}
	return bcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcu *BranchContractUpdate) ClearDeletedAt() *BranchContractUpdate {
	bcu.mutation.ClearDeletedAt()
	return bcu
}

// SetLastModifier sets the "last_modifier" field.
func (bcu *BranchContractUpdate) SetLastModifier(m *model.Modifier) *BranchContractUpdate {
	bcu.mutation.SetLastModifier(m)
	return bcu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bcu *BranchContractUpdate) ClearLastModifier() *BranchContractUpdate {
	bcu.mutation.ClearLastModifier()
	return bcu
}

// SetRemark sets the "remark" field.
func (bcu *BranchContractUpdate) SetRemark(s string) *BranchContractUpdate {
	bcu.mutation.SetRemark(s)
	return bcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bcu *BranchContractUpdate) SetNillableRemark(s *string) *BranchContractUpdate {
	if s != nil {
		bcu.SetRemark(*s)
	}
	return bcu
}

// ClearRemark clears the value of the "remark" field.
func (bcu *BranchContractUpdate) ClearRemark() *BranchContractUpdate {
	bcu.mutation.ClearRemark()
	return bcu
}

// SetBranchID sets the "branch_id" field.
func (bcu *BranchContractUpdate) SetBranchID(u uint64) *BranchContractUpdate {
	bcu.mutation.SetBranchID(u)
	return bcu
}

// SetLandlordName sets the "landlord_name" field.
func (bcu *BranchContractUpdate) SetLandlordName(s string) *BranchContractUpdate {
	bcu.mutation.SetLandlordName(s)
	return bcu
}

// SetIDCardNumber sets the "id_card_number" field.
func (bcu *BranchContractUpdate) SetIDCardNumber(s string) *BranchContractUpdate {
	bcu.mutation.SetIDCardNumber(s)
	return bcu
}

// SetPhone sets the "phone" field.
func (bcu *BranchContractUpdate) SetPhone(s string) *BranchContractUpdate {
	bcu.mutation.SetPhone(s)
	return bcu
}

// SetBankNumber sets the "bank_number" field.
func (bcu *BranchContractUpdate) SetBankNumber(s string) *BranchContractUpdate {
	bcu.mutation.SetBankNumber(s)
	return bcu
}

// SetPledge sets the "pledge" field.
func (bcu *BranchContractUpdate) SetPledge(f float64) *BranchContractUpdate {
	bcu.mutation.ResetPledge()
	bcu.mutation.SetPledge(f)
	return bcu
}

// AddPledge adds f to the "pledge" field.
func (bcu *BranchContractUpdate) AddPledge(f float64) *BranchContractUpdate {
	bcu.mutation.AddPledge(f)
	return bcu
}

// SetRent sets the "rent" field.
func (bcu *BranchContractUpdate) SetRent(f float64) *BranchContractUpdate {
	bcu.mutation.ResetRent()
	bcu.mutation.SetRent(f)
	return bcu
}

// AddRent adds f to the "rent" field.
func (bcu *BranchContractUpdate) AddRent(f float64) *BranchContractUpdate {
	bcu.mutation.AddRent(f)
	return bcu
}

// SetLease sets the "lease" field.
func (bcu *BranchContractUpdate) SetLease(u uint) *BranchContractUpdate {
	bcu.mutation.ResetLease()
	bcu.mutation.SetLease(u)
	return bcu
}

// AddLease adds u to the "lease" field.
func (bcu *BranchContractUpdate) AddLease(u int) *BranchContractUpdate {
	bcu.mutation.AddLease(u)
	return bcu
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (bcu *BranchContractUpdate) SetElectricityPledge(f float64) *BranchContractUpdate {
	bcu.mutation.ResetElectricityPledge()
	bcu.mutation.SetElectricityPledge(f)
	return bcu
}

// AddElectricityPledge adds f to the "electricity_pledge" field.
func (bcu *BranchContractUpdate) AddElectricityPledge(f float64) *BranchContractUpdate {
	bcu.mutation.AddElectricityPledge(f)
	return bcu
}

// SetElectricity sets the "electricity" field.
func (bcu *BranchContractUpdate) SetElectricity(s string) *BranchContractUpdate {
	bcu.mutation.SetElectricity(s)
	return bcu
}

// SetArea sets the "area" field.
func (bcu *BranchContractUpdate) SetArea(f float64) *BranchContractUpdate {
	bcu.mutation.ResetArea()
	bcu.mutation.SetArea(f)
	return bcu
}

// AddArea adds f to the "area" field.
func (bcu *BranchContractUpdate) AddArea(f float64) *BranchContractUpdate {
	bcu.mutation.AddArea(f)
	return bcu
}

// SetStartTime sets the "start_time" field.
func (bcu *BranchContractUpdate) SetStartTime(t time.Time) *BranchContractUpdate {
	bcu.mutation.SetStartTime(t)
	return bcu
}

// SetEndTime sets the "end_time" field.
func (bcu *BranchContractUpdate) SetEndTime(t time.Time) *BranchContractUpdate {
	bcu.mutation.SetEndTime(t)
	return bcu
}

// SetFile sets the "file" field.
func (bcu *BranchContractUpdate) SetFile(s string) *BranchContractUpdate {
	bcu.mutation.SetFile(s)
	return bcu
}

// SetSheets sets the "sheets" field.
func (bcu *BranchContractUpdate) SetSheets(s []string) *BranchContractUpdate {
	bcu.mutation.SetSheets(s)
	return bcu
}

// AppendSheets appends s to the "sheets" field.
func (bcu *BranchContractUpdate) AppendSheets(s []string) *BranchContractUpdate {
	bcu.mutation.AppendSheets(s)
	return bcu
}

// SetBranch sets the "branch" edge to the Branch entity.
func (bcu *BranchContractUpdate) SetBranch(b *Branch) *BranchContractUpdate {
	return bcu.SetBranchID(b.ID)
}

// Mutation returns the BranchContractMutation object of the builder.
func (bcu *BranchContractUpdate) Mutation() *BranchContractMutation {
	return bcu.mutation
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (bcu *BranchContractUpdate) ClearBranch() *BranchContractUpdate {
	bcu.mutation.ClearBranch()
	return bcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bcu *BranchContractUpdate) Save(ctx context.Context) (int, error) {
	if err := bcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bcu.sqlSave, bcu.mutation, bcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcu *BranchContractUpdate) SaveX(ctx context.Context) int {
	affected, err := bcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bcu *BranchContractUpdate) Exec(ctx context.Context) error {
	_, err := bcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcu *BranchContractUpdate) ExecX(ctx context.Context) {
	if err := bcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcu *BranchContractUpdate) defaults() error {
	if _, ok := bcu.mutation.UpdatedAt(); !ok {
		if branchcontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized branchcontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := branchcontract.UpdateDefaultUpdatedAt()
		bcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcu *BranchContractUpdate) check() error {
	if _, ok := bcu.mutation.BranchID(); bcu.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BranchContract.branch"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bcu *BranchContractUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BranchContractUpdate {
	bcu.modifiers = append(bcu.modifiers, modifiers...)
	return bcu
}

func (bcu *BranchContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(branchcontract.Table, branchcontract.Columns, sqlgraph.NewFieldSpec(branchcontract.FieldID, field.TypeUint64))
	if ps := bcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcu.mutation.UpdatedAt(); ok {
		_spec.SetField(branchcontract.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.DeletedAt(); ok {
		_spec.SetField(branchcontract.FieldDeletedAt, field.TypeTime, value)
	}
	if bcu.mutation.DeletedAtCleared() {
		_spec.ClearField(branchcontract.FieldDeletedAt, field.TypeTime)
	}
	if bcu.mutation.CreatorCleared() {
		_spec.ClearField(branchcontract.FieldCreator, field.TypeJSON)
	}
	if value, ok := bcu.mutation.LastModifier(); ok {
		_spec.SetField(branchcontract.FieldLastModifier, field.TypeJSON, value)
	}
	if bcu.mutation.LastModifierCleared() {
		_spec.ClearField(branchcontract.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bcu.mutation.Remark(); ok {
		_spec.SetField(branchcontract.FieldRemark, field.TypeString, value)
	}
	if bcu.mutation.RemarkCleared() {
		_spec.ClearField(branchcontract.FieldRemark, field.TypeString)
	}
	if value, ok := bcu.mutation.LandlordName(); ok {
		_spec.SetField(branchcontract.FieldLandlordName, field.TypeString, value)
	}
	if value, ok := bcu.mutation.IDCardNumber(); ok {
		_spec.SetField(branchcontract.FieldIDCardNumber, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Phone(); ok {
		_spec.SetField(branchcontract.FieldPhone, field.TypeString, value)
	}
	if value, ok := bcu.mutation.BankNumber(); ok {
		_spec.SetField(branchcontract.FieldBankNumber, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Pledge(); ok {
		_spec.SetField(branchcontract.FieldPledge, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.AddedPledge(); ok {
		_spec.AddField(branchcontract.FieldPledge, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.Rent(); ok {
		_spec.SetField(branchcontract.FieldRent, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.AddedRent(); ok {
		_spec.AddField(branchcontract.FieldRent, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.Lease(); ok {
		_spec.SetField(branchcontract.FieldLease, field.TypeUint, value)
	}
	if value, ok := bcu.mutation.AddedLease(); ok {
		_spec.AddField(branchcontract.FieldLease, field.TypeUint, value)
	}
	if value, ok := bcu.mutation.ElectricityPledge(); ok {
		_spec.SetField(branchcontract.FieldElectricityPledge, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.AddedElectricityPledge(); ok {
		_spec.AddField(branchcontract.FieldElectricityPledge, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.Electricity(); ok {
		_spec.SetField(branchcontract.FieldElectricity, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Area(); ok {
		_spec.SetField(branchcontract.FieldArea, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.AddedArea(); ok {
		_spec.AddField(branchcontract.FieldArea, field.TypeFloat64, value)
	}
	if value, ok := bcu.mutation.StartTime(); ok {
		_spec.SetField(branchcontract.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.EndTime(); ok {
		_spec.SetField(branchcontract.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := bcu.mutation.File(); ok {
		_spec.SetField(branchcontract.FieldFile, field.TypeString, value)
	}
	if value, ok := bcu.mutation.Sheets(); ok {
		_spec.SetField(branchcontract.FieldSheets, field.TypeJSON, value)
	}
	if value, ok := bcu.mutation.AppendedSheets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, branchcontract.FieldSheets, value)
		})
	}
	if bcu.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcu.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branchcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bcu.mutation.done = true
	return n, nil
}

// BranchContractUpdateOne is the builder for updating a single BranchContract entity.
type BranchContractUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BranchContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bcuo *BranchContractUpdateOne) SetUpdatedAt(t time.Time) *BranchContractUpdateOne {
	bcuo.mutation.SetUpdatedAt(t)
	return bcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bcuo *BranchContractUpdateOne) SetDeletedAt(t time.Time) *BranchContractUpdateOne {
	bcuo.mutation.SetDeletedAt(t)
	return bcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcuo *BranchContractUpdateOne) SetNillableDeletedAt(t *time.Time) *BranchContractUpdateOne {
	if t != nil {
		bcuo.SetDeletedAt(*t)
	}
	return bcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bcuo *BranchContractUpdateOne) ClearDeletedAt() *BranchContractUpdateOne {
	bcuo.mutation.ClearDeletedAt()
	return bcuo
}

// SetLastModifier sets the "last_modifier" field.
func (bcuo *BranchContractUpdateOne) SetLastModifier(m *model.Modifier) *BranchContractUpdateOne {
	bcuo.mutation.SetLastModifier(m)
	return bcuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bcuo *BranchContractUpdateOne) ClearLastModifier() *BranchContractUpdateOne {
	bcuo.mutation.ClearLastModifier()
	return bcuo
}

// SetRemark sets the "remark" field.
func (bcuo *BranchContractUpdateOne) SetRemark(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetRemark(s)
	return bcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bcuo *BranchContractUpdateOne) SetNillableRemark(s *string) *BranchContractUpdateOne {
	if s != nil {
		bcuo.SetRemark(*s)
	}
	return bcuo
}

// ClearRemark clears the value of the "remark" field.
func (bcuo *BranchContractUpdateOne) ClearRemark() *BranchContractUpdateOne {
	bcuo.mutation.ClearRemark()
	return bcuo
}

// SetBranchID sets the "branch_id" field.
func (bcuo *BranchContractUpdateOne) SetBranchID(u uint64) *BranchContractUpdateOne {
	bcuo.mutation.SetBranchID(u)
	return bcuo
}

// SetLandlordName sets the "landlord_name" field.
func (bcuo *BranchContractUpdateOne) SetLandlordName(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetLandlordName(s)
	return bcuo
}

// SetIDCardNumber sets the "id_card_number" field.
func (bcuo *BranchContractUpdateOne) SetIDCardNumber(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetIDCardNumber(s)
	return bcuo
}

// SetPhone sets the "phone" field.
func (bcuo *BranchContractUpdateOne) SetPhone(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetPhone(s)
	return bcuo
}

// SetBankNumber sets the "bank_number" field.
func (bcuo *BranchContractUpdateOne) SetBankNumber(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetBankNumber(s)
	return bcuo
}

// SetPledge sets the "pledge" field.
func (bcuo *BranchContractUpdateOne) SetPledge(f float64) *BranchContractUpdateOne {
	bcuo.mutation.ResetPledge()
	bcuo.mutation.SetPledge(f)
	return bcuo
}

// AddPledge adds f to the "pledge" field.
func (bcuo *BranchContractUpdateOne) AddPledge(f float64) *BranchContractUpdateOne {
	bcuo.mutation.AddPledge(f)
	return bcuo
}

// SetRent sets the "rent" field.
func (bcuo *BranchContractUpdateOne) SetRent(f float64) *BranchContractUpdateOne {
	bcuo.mutation.ResetRent()
	bcuo.mutation.SetRent(f)
	return bcuo
}

// AddRent adds f to the "rent" field.
func (bcuo *BranchContractUpdateOne) AddRent(f float64) *BranchContractUpdateOne {
	bcuo.mutation.AddRent(f)
	return bcuo
}

// SetLease sets the "lease" field.
func (bcuo *BranchContractUpdateOne) SetLease(u uint) *BranchContractUpdateOne {
	bcuo.mutation.ResetLease()
	bcuo.mutation.SetLease(u)
	return bcuo
}

// AddLease adds u to the "lease" field.
func (bcuo *BranchContractUpdateOne) AddLease(u int) *BranchContractUpdateOne {
	bcuo.mutation.AddLease(u)
	return bcuo
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (bcuo *BranchContractUpdateOne) SetElectricityPledge(f float64) *BranchContractUpdateOne {
	bcuo.mutation.ResetElectricityPledge()
	bcuo.mutation.SetElectricityPledge(f)
	return bcuo
}

// AddElectricityPledge adds f to the "electricity_pledge" field.
func (bcuo *BranchContractUpdateOne) AddElectricityPledge(f float64) *BranchContractUpdateOne {
	bcuo.mutation.AddElectricityPledge(f)
	return bcuo
}

// SetElectricity sets the "electricity" field.
func (bcuo *BranchContractUpdateOne) SetElectricity(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetElectricity(s)
	return bcuo
}

// SetArea sets the "area" field.
func (bcuo *BranchContractUpdateOne) SetArea(f float64) *BranchContractUpdateOne {
	bcuo.mutation.ResetArea()
	bcuo.mutation.SetArea(f)
	return bcuo
}

// AddArea adds f to the "area" field.
func (bcuo *BranchContractUpdateOne) AddArea(f float64) *BranchContractUpdateOne {
	bcuo.mutation.AddArea(f)
	return bcuo
}

// SetStartTime sets the "start_time" field.
func (bcuo *BranchContractUpdateOne) SetStartTime(t time.Time) *BranchContractUpdateOne {
	bcuo.mutation.SetStartTime(t)
	return bcuo
}

// SetEndTime sets the "end_time" field.
func (bcuo *BranchContractUpdateOne) SetEndTime(t time.Time) *BranchContractUpdateOne {
	bcuo.mutation.SetEndTime(t)
	return bcuo
}

// SetFile sets the "file" field.
func (bcuo *BranchContractUpdateOne) SetFile(s string) *BranchContractUpdateOne {
	bcuo.mutation.SetFile(s)
	return bcuo
}

// SetSheets sets the "sheets" field.
func (bcuo *BranchContractUpdateOne) SetSheets(s []string) *BranchContractUpdateOne {
	bcuo.mutation.SetSheets(s)
	return bcuo
}

// AppendSheets appends s to the "sheets" field.
func (bcuo *BranchContractUpdateOne) AppendSheets(s []string) *BranchContractUpdateOne {
	bcuo.mutation.AppendSheets(s)
	return bcuo
}

// SetBranch sets the "branch" edge to the Branch entity.
func (bcuo *BranchContractUpdateOne) SetBranch(b *Branch) *BranchContractUpdateOne {
	return bcuo.SetBranchID(b.ID)
}

// Mutation returns the BranchContractMutation object of the builder.
func (bcuo *BranchContractUpdateOne) Mutation() *BranchContractMutation {
	return bcuo.mutation
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (bcuo *BranchContractUpdateOne) ClearBranch() *BranchContractUpdateOne {
	bcuo.mutation.ClearBranch()
	return bcuo
}

// Where appends a list predicates to the BranchContractUpdate builder.
func (bcuo *BranchContractUpdateOne) Where(ps ...predicate.BranchContract) *BranchContractUpdateOne {
	bcuo.mutation.Where(ps...)
	return bcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bcuo *BranchContractUpdateOne) Select(field string, fields ...string) *BranchContractUpdateOne {
	bcuo.fields = append([]string{field}, fields...)
	return bcuo
}

// Save executes the query and returns the updated BranchContract entity.
func (bcuo *BranchContractUpdateOne) Save(ctx context.Context) (*BranchContract, error) {
	if err := bcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bcuo.sqlSave, bcuo.mutation, bcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bcuo *BranchContractUpdateOne) SaveX(ctx context.Context) *BranchContract {
	node, err := bcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bcuo *BranchContractUpdateOne) Exec(ctx context.Context) error {
	_, err := bcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcuo *BranchContractUpdateOne) ExecX(ctx context.Context) {
	if err := bcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcuo *BranchContractUpdateOne) defaults() error {
	if _, ok := bcuo.mutation.UpdatedAt(); !ok {
		if branchcontract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized branchcontract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := branchcontract.UpdateDefaultUpdatedAt()
		bcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcuo *BranchContractUpdateOne) check() error {
	if _, ok := bcuo.mutation.BranchID(); bcuo.mutation.BranchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "BranchContract.branch"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bcuo *BranchContractUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BranchContractUpdateOne {
	bcuo.modifiers = append(bcuo.modifiers, modifiers...)
	return bcuo
}

func (bcuo *BranchContractUpdateOne) sqlSave(ctx context.Context) (_node *BranchContract, err error) {
	if err := bcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(branchcontract.Table, branchcontract.Columns, sqlgraph.NewFieldSpec(branchcontract.FieldID, field.TypeUint64))
	id, ok := bcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BranchContract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branchcontract.FieldID)
		for _, f := range fields {
			if !branchcontract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != branchcontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(branchcontract.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.DeletedAt(); ok {
		_spec.SetField(branchcontract.FieldDeletedAt, field.TypeTime, value)
	}
	if bcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(branchcontract.FieldDeletedAt, field.TypeTime)
	}
	if bcuo.mutation.CreatorCleared() {
		_spec.ClearField(branchcontract.FieldCreator, field.TypeJSON)
	}
	if value, ok := bcuo.mutation.LastModifier(); ok {
		_spec.SetField(branchcontract.FieldLastModifier, field.TypeJSON, value)
	}
	if bcuo.mutation.LastModifierCleared() {
		_spec.ClearField(branchcontract.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bcuo.mutation.Remark(); ok {
		_spec.SetField(branchcontract.FieldRemark, field.TypeString, value)
	}
	if bcuo.mutation.RemarkCleared() {
		_spec.ClearField(branchcontract.FieldRemark, field.TypeString)
	}
	if value, ok := bcuo.mutation.LandlordName(); ok {
		_spec.SetField(branchcontract.FieldLandlordName, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.IDCardNumber(); ok {
		_spec.SetField(branchcontract.FieldIDCardNumber, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Phone(); ok {
		_spec.SetField(branchcontract.FieldPhone, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.BankNumber(); ok {
		_spec.SetField(branchcontract.FieldBankNumber, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Pledge(); ok {
		_spec.SetField(branchcontract.FieldPledge, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.AddedPledge(); ok {
		_spec.AddField(branchcontract.FieldPledge, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.Rent(); ok {
		_spec.SetField(branchcontract.FieldRent, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.AddedRent(); ok {
		_spec.AddField(branchcontract.FieldRent, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.Lease(); ok {
		_spec.SetField(branchcontract.FieldLease, field.TypeUint, value)
	}
	if value, ok := bcuo.mutation.AddedLease(); ok {
		_spec.AddField(branchcontract.FieldLease, field.TypeUint, value)
	}
	if value, ok := bcuo.mutation.ElectricityPledge(); ok {
		_spec.SetField(branchcontract.FieldElectricityPledge, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.AddedElectricityPledge(); ok {
		_spec.AddField(branchcontract.FieldElectricityPledge, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.Electricity(); ok {
		_spec.SetField(branchcontract.FieldElectricity, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Area(); ok {
		_spec.SetField(branchcontract.FieldArea, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.AddedArea(); ok {
		_spec.AddField(branchcontract.FieldArea, field.TypeFloat64, value)
	}
	if value, ok := bcuo.mutation.StartTime(); ok {
		_spec.SetField(branchcontract.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.EndTime(); ok {
		_spec.SetField(branchcontract.FieldEndTime, field.TypeTime, value)
	}
	if value, ok := bcuo.mutation.File(); ok {
		_spec.SetField(branchcontract.FieldFile, field.TypeString, value)
	}
	if value, ok := bcuo.mutation.Sheets(); ok {
		_spec.SetField(branchcontract.FieldSheets, field.TypeJSON, value)
	}
	if value, ok := bcuo.mutation.AppendedSheets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, branchcontract.FieldSheets, value)
		})
	}
	if bcuo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bcuo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bcuo.modifiers...)
	_node = &BranchContract{config: bcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{branchcontract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bcuo.mutation.done = true
	return _node, nil
}
