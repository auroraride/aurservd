// Code generated by ent, DO NOT EDIT.

package stocksummary

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldID, id))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldEnterpriseID, v))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStationID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStoreID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldDate, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldModel, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldNum, v))
}

// TodayNum applies equality check predicate on the "today_num" field. It's identical to TodayNumEQ.
func TodayNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldTodayNum, v))
}

// OutboundNum applies equality check predicate on the "outbound_num" field. It's identical to OutboundNumEQ.
func OutboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldOutboundNum, v))
}

// InboundNum applies equality check predicate on the "inbound_num" field. It's identical to InboundNumEQ.
func InboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInboundNum, v))
}

// InCabinetNum applies equality check predicate on the "in_cabinet_num" field. It's identical to InCabinetNumEQ.
func InCabinetNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInCabinetNum, v))
}

// InRiderNum applies equality check predicate on the "in_rider_num" field. It's identical to InRiderNumEQ.
func InRiderNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInRiderNum, v))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldEnterpriseID))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldStationID, vs...))
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldStationID))
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldStationID))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldStoreID))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldRiderID))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldCabinetID, vs...))
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldCabinetID))
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldCabinetID))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContainsFold(FieldDate, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContainsFold(FieldModel, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldNum, v))
}

// TodayNumEQ applies the EQ predicate on the "today_num" field.
func TodayNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldTodayNum, v))
}

// TodayNumNEQ applies the NEQ predicate on the "today_num" field.
func TodayNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldTodayNum, v))
}

// TodayNumIn applies the In predicate on the "today_num" field.
func TodayNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldTodayNum, vs...))
}

// TodayNumNotIn applies the NotIn predicate on the "today_num" field.
func TodayNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldTodayNum, vs...))
}

// TodayNumGT applies the GT predicate on the "today_num" field.
func TodayNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldTodayNum, v))
}

// TodayNumGTE applies the GTE predicate on the "today_num" field.
func TodayNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldTodayNum, v))
}

// TodayNumLT applies the LT predicate on the "today_num" field.
func TodayNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldTodayNum, v))
}

// TodayNumLTE applies the LTE predicate on the "today_num" field.
func TodayNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldTodayNum, v))
}

// OutboundNumEQ applies the EQ predicate on the "outbound_num" field.
func OutboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldOutboundNum, v))
}

// OutboundNumNEQ applies the NEQ predicate on the "outbound_num" field.
func OutboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldOutboundNum, v))
}

// OutboundNumIn applies the In predicate on the "outbound_num" field.
func OutboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldOutboundNum, vs...))
}

// OutboundNumNotIn applies the NotIn predicate on the "outbound_num" field.
func OutboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldOutboundNum, vs...))
}

// OutboundNumGT applies the GT predicate on the "outbound_num" field.
func OutboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldOutboundNum, v))
}

// OutboundNumGTE applies the GTE predicate on the "outbound_num" field.
func OutboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldOutboundNum, v))
}

// OutboundNumLT applies the LT predicate on the "outbound_num" field.
func OutboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldOutboundNum, v))
}

// OutboundNumLTE applies the LTE predicate on the "outbound_num" field.
func OutboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldOutboundNum, v))
}

// InboundNumEQ applies the EQ predicate on the "inbound_num" field.
func InboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInboundNum, v))
}

// InboundNumNEQ applies the NEQ predicate on the "inbound_num" field.
func InboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldInboundNum, v))
}

// InboundNumIn applies the In predicate on the "inbound_num" field.
func InboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldInboundNum, vs...))
}

// InboundNumNotIn applies the NotIn predicate on the "inbound_num" field.
func InboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldInboundNum, vs...))
}

// InboundNumGT applies the GT predicate on the "inbound_num" field.
func InboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldInboundNum, v))
}

// InboundNumGTE applies the GTE predicate on the "inbound_num" field.
func InboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldInboundNum, v))
}

// InboundNumLT applies the LT predicate on the "inbound_num" field.
func InboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldInboundNum, v))
}

// InboundNumLTE applies the LTE predicate on the "inbound_num" field.
func InboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldInboundNum, v))
}

// InCabinetNumEQ applies the EQ predicate on the "in_cabinet_num" field.
func InCabinetNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInCabinetNum, v))
}

// InCabinetNumNEQ applies the NEQ predicate on the "in_cabinet_num" field.
func InCabinetNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldInCabinetNum, v))
}

// InCabinetNumIn applies the In predicate on the "in_cabinet_num" field.
func InCabinetNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldInCabinetNum, vs...))
}

// InCabinetNumNotIn applies the NotIn predicate on the "in_cabinet_num" field.
func InCabinetNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldInCabinetNum, vs...))
}

// InCabinetNumGT applies the GT predicate on the "in_cabinet_num" field.
func InCabinetNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldInCabinetNum, v))
}

// InCabinetNumGTE applies the GTE predicate on the "in_cabinet_num" field.
func InCabinetNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldInCabinetNum, v))
}

// InCabinetNumLT applies the LT predicate on the "in_cabinet_num" field.
func InCabinetNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldInCabinetNum, v))
}

// InCabinetNumLTE applies the LTE predicate on the "in_cabinet_num" field.
func InCabinetNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldInCabinetNum, v))
}

// InRiderNumEQ applies the EQ predicate on the "in_rider_num" field.
func InRiderNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldInRiderNum, v))
}

// InRiderNumNEQ applies the NEQ predicate on the "in_rider_num" field.
func InRiderNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldInRiderNum, v))
}

// InRiderNumIn applies the In predicate on the "in_rider_num" field.
func InRiderNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldInRiderNum, vs...))
}

// InRiderNumNotIn applies the NotIn predicate on the "in_rider_num" field.
func InRiderNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldInRiderNum, vs...))
}

// InRiderNumGT applies the GT predicate on the "in_rider_num" field.
func InRiderNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldInRiderNum, v))
}

// InRiderNumGTE applies the GTE predicate on the "in_rider_num" field.
func InRiderNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldInRiderNum, v))
}

// InRiderNumLT applies the LT predicate on the "in_rider_num" field.
func InRiderNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldInRiderNum, v))
}

// InRiderNumLTE applies the LTE predicate on the "in_rider_num" field.
func InRiderNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldInRiderNum, v))
}

// MaterialEQ applies the EQ predicate on the "material" field.
func MaterialEQ(v Material) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldMaterial, v))
}

// MaterialNEQ applies the NEQ predicate on the "material" field.
func MaterialNEQ(v Material) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldMaterial, v))
}

// MaterialIn applies the In predicate on the "material" field.
func MaterialIn(vs ...Material) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldMaterial, vs...))
}

// MaterialNotIn applies the NotIn predicate on the "material" field.
func MaterialNotIn(vs ...Material) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldMaterial, vs...))
}

// MaterialIsNil applies the IsNil predicate on the "material" field.
func MaterialIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldMaterial))
}

// MaterialNotNil applies the NotNil predicate on the "material" field.
func MaterialNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldMaterial))
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		p(s.Not())
	})
}
