// Code generated by ent, DO NOT EDIT.

package stocksummary

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldID, id))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldEnterpriseID, v))
}

// StationID applies equality check predicate on the "station_id" field. It's identical to StationIDEQ.
func StationID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStationID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStoreID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetID, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldDate, v))
}

// BatteryNum applies equality check predicate on the "battery_num" field. It's identical to BatteryNumEQ.
func BatteryNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryNum, v))
}

// BatteryOutboundNum applies equality check predicate on the "battery_outbound_num" field. It's identical to BatteryOutboundNumEQ.
func BatteryOutboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryOutboundNum, v))
}

// BatteryInboundNum applies equality check predicate on the "battery_inbound_num" field. It's identical to BatteryInboundNumEQ.
func BatteryInboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryInboundNum, v))
}

// BikeNum applies equality check predicate on the "bike_num" field. It's identical to BikeNumEQ.
func BikeNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeNum, v))
}

// BikeOutboundNum applies equality check predicate on the "bike_outbound_num" field. It's identical to BikeOutboundNumEQ.
func BikeOutboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeOutboundNum, v))
}

// BikeInboundNum applies equality check predicate on the "bike_inbound_num" field. It's identical to BikeInboundNumEQ.
func BikeInboundNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeInboundNum, v))
}

// CabinetBatteryNum applies equality check predicate on the "cabinet_battery_num" field. It's identical to CabinetBatteryNumEQ.
func CabinetBatteryNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetBatteryNum, v))
}

// RiderBatteryNum applies equality check predicate on the "rider_battery_num" field. It's identical to RiderBatteryNumEQ.
func RiderBatteryNum(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderBatteryNum, v))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldEnterpriseID))
}

// StationIDEQ applies the EQ predicate on the "station_id" field.
func StationIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStationID, v))
}

// StationIDNEQ applies the NEQ predicate on the "station_id" field.
func StationIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldStationID, v))
}

// StationIDIn applies the In predicate on the "station_id" field.
func StationIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldStationID, vs...))
}

// StationIDNotIn applies the NotIn predicate on the "station_id" field.
func StationIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldStationID, vs...))
}

// StationIDIsNil applies the IsNil predicate on the "station_id" field.
func StationIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldStationID))
}

// StationIDNotNil applies the NotNil predicate on the "station_id" field.
func StationIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldStationID))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldStoreID))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldRiderID))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldCabinetID, vs...))
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIsNull(FieldCabinetID))
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotNull(FieldCabinetID))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldContainsFold(FieldDate, v))
}

// BatteryNumEQ applies the EQ predicate on the "battery_num" field.
func BatteryNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryNum, v))
}

// BatteryNumNEQ applies the NEQ predicate on the "battery_num" field.
func BatteryNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBatteryNum, v))
}

// BatteryNumIn applies the In predicate on the "battery_num" field.
func BatteryNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBatteryNum, vs...))
}

// BatteryNumNotIn applies the NotIn predicate on the "battery_num" field.
func BatteryNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBatteryNum, vs...))
}

// BatteryNumGT applies the GT predicate on the "battery_num" field.
func BatteryNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBatteryNum, v))
}

// BatteryNumGTE applies the GTE predicate on the "battery_num" field.
func BatteryNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBatteryNum, v))
}

// BatteryNumLT applies the LT predicate on the "battery_num" field.
func BatteryNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBatteryNum, v))
}

// BatteryNumLTE applies the LTE predicate on the "battery_num" field.
func BatteryNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBatteryNum, v))
}

// BatteryOutboundNumEQ applies the EQ predicate on the "battery_outbound_num" field.
func BatteryOutboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryOutboundNum, v))
}

// BatteryOutboundNumNEQ applies the NEQ predicate on the "battery_outbound_num" field.
func BatteryOutboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBatteryOutboundNum, v))
}

// BatteryOutboundNumIn applies the In predicate on the "battery_outbound_num" field.
func BatteryOutboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBatteryOutboundNum, vs...))
}

// BatteryOutboundNumNotIn applies the NotIn predicate on the "battery_outbound_num" field.
func BatteryOutboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBatteryOutboundNum, vs...))
}

// BatteryOutboundNumGT applies the GT predicate on the "battery_outbound_num" field.
func BatteryOutboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBatteryOutboundNum, v))
}

// BatteryOutboundNumGTE applies the GTE predicate on the "battery_outbound_num" field.
func BatteryOutboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBatteryOutboundNum, v))
}

// BatteryOutboundNumLT applies the LT predicate on the "battery_outbound_num" field.
func BatteryOutboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBatteryOutboundNum, v))
}

// BatteryOutboundNumLTE applies the LTE predicate on the "battery_outbound_num" field.
func BatteryOutboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBatteryOutboundNum, v))
}

// BatteryInboundNumEQ applies the EQ predicate on the "battery_inbound_num" field.
func BatteryInboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBatteryInboundNum, v))
}

// BatteryInboundNumNEQ applies the NEQ predicate on the "battery_inbound_num" field.
func BatteryInboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBatteryInboundNum, v))
}

// BatteryInboundNumIn applies the In predicate on the "battery_inbound_num" field.
func BatteryInboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBatteryInboundNum, vs...))
}

// BatteryInboundNumNotIn applies the NotIn predicate on the "battery_inbound_num" field.
func BatteryInboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBatteryInboundNum, vs...))
}

// BatteryInboundNumGT applies the GT predicate on the "battery_inbound_num" field.
func BatteryInboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBatteryInboundNum, v))
}

// BatteryInboundNumGTE applies the GTE predicate on the "battery_inbound_num" field.
func BatteryInboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBatteryInboundNum, v))
}

// BatteryInboundNumLT applies the LT predicate on the "battery_inbound_num" field.
func BatteryInboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBatteryInboundNum, v))
}

// BatteryInboundNumLTE applies the LTE predicate on the "battery_inbound_num" field.
func BatteryInboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBatteryInboundNum, v))
}

// BikeNumEQ applies the EQ predicate on the "bike_num" field.
func BikeNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeNum, v))
}

// BikeNumNEQ applies the NEQ predicate on the "bike_num" field.
func BikeNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBikeNum, v))
}

// BikeNumIn applies the In predicate on the "bike_num" field.
func BikeNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBikeNum, vs...))
}

// BikeNumNotIn applies the NotIn predicate on the "bike_num" field.
func BikeNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBikeNum, vs...))
}

// BikeNumGT applies the GT predicate on the "bike_num" field.
func BikeNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBikeNum, v))
}

// BikeNumGTE applies the GTE predicate on the "bike_num" field.
func BikeNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBikeNum, v))
}

// BikeNumLT applies the LT predicate on the "bike_num" field.
func BikeNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBikeNum, v))
}

// BikeNumLTE applies the LTE predicate on the "bike_num" field.
func BikeNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBikeNum, v))
}

// BikeOutboundNumEQ applies the EQ predicate on the "bike_outbound_num" field.
func BikeOutboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeOutboundNum, v))
}

// BikeOutboundNumNEQ applies the NEQ predicate on the "bike_outbound_num" field.
func BikeOutboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBikeOutboundNum, v))
}

// BikeOutboundNumIn applies the In predicate on the "bike_outbound_num" field.
func BikeOutboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBikeOutboundNum, vs...))
}

// BikeOutboundNumNotIn applies the NotIn predicate on the "bike_outbound_num" field.
func BikeOutboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBikeOutboundNum, vs...))
}

// BikeOutboundNumGT applies the GT predicate on the "bike_outbound_num" field.
func BikeOutboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBikeOutboundNum, v))
}

// BikeOutboundNumGTE applies the GTE predicate on the "bike_outbound_num" field.
func BikeOutboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBikeOutboundNum, v))
}

// BikeOutboundNumLT applies the LT predicate on the "bike_outbound_num" field.
func BikeOutboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBikeOutboundNum, v))
}

// BikeOutboundNumLTE applies the LTE predicate on the "bike_outbound_num" field.
func BikeOutboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBikeOutboundNum, v))
}

// BikeInboundNumEQ applies the EQ predicate on the "bike_inbound_num" field.
func BikeInboundNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldBikeInboundNum, v))
}

// BikeInboundNumNEQ applies the NEQ predicate on the "bike_inbound_num" field.
func BikeInboundNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldBikeInboundNum, v))
}

// BikeInboundNumIn applies the In predicate on the "bike_inbound_num" field.
func BikeInboundNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldBikeInboundNum, vs...))
}

// BikeInboundNumNotIn applies the NotIn predicate on the "bike_inbound_num" field.
func BikeInboundNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldBikeInboundNum, vs...))
}

// BikeInboundNumGT applies the GT predicate on the "bike_inbound_num" field.
func BikeInboundNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldBikeInboundNum, v))
}

// BikeInboundNumGTE applies the GTE predicate on the "bike_inbound_num" field.
func BikeInboundNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldBikeInboundNum, v))
}

// BikeInboundNumLT applies the LT predicate on the "bike_inbound_num" field.
func BikeInboundNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldBikeInboundNum, v))
}

// BikeInboundNumLTE applies the LTE predicate on the "bike_inbound_num" field.
func BikeInboundNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldBikeInboundNum, v))
}

// CabinetBatteryNumEQ applies the EQ predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldCabinetBatteryNum, v))
}

// CabinetBatteryNumNEQ applies the NEQ predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldCabinetBatteryNum, v))
}

// CabinetBatteryNumIn applies the In predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldCabinetBatteryNum, vs...))
}

// CabinetBatteryNumNotIn applies the NotIn predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldCabinetBatteryNum, vs...))
}

// CabinetBatteryNumGT applies the GT predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldCabinetBatteryNum, v))
}

// CabinetBatteryNumGTE applies the GTE predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldCabinetBatteryNum, v))
}

// CabinetBatteryNumLT applies the LT predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldCabinetBatteryNum, v))
}

// CabinetBatteryNumLTE applies the LTE predicate on the "cabinet_battery_num" field.
func CabinetBatteryNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldCabinetBatteryNum, v))
}

// RiderBatteryNumEQ applies the EQ predicate on the "rider_battery_num" field.
func RiderBatteryNumEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldEQ(FieldRiderBatteryNum, v))
}

// RiderBatteryNumNEQ applies the NEQ predicate on the "rider_battery_num" field.
func RiderBatteryNumNEQ(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNEQ(FieldRiderBatteryNum, v))
}

// RiderBatteryNumIn applies the In predicate on the "rider_battery_num" field.
func RiderBatteryNumIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldIn(FieldRiderBatteryNum, vs...))
}

// RiderBatteryNumNotIn applies the NotIn predicate on the "rider_battery_num" field.
func RiderBatteryNumNotIn(vs ...int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldNotIn(FieldRiderBatteryNum, vs...))
}

// RiderBatteryNumGT applies the GT predicate on the "rider_battery_num" field.
func RiderBatteryNumGT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGT(FieldRiderBatteryNum, v))
}

// RiderBatteryNumGTE applies the GTE predicate on the "rider_battery_num" field.
func RiderBatteryNumGTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldGTE(FieldRiderBatteryNum, v))
}

// RiderBatteryNumLT applies the LT predicate on the "rider_battery_num" field.
func RiderBatteryNumLT(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLT(FieldRiderBatteryNum, v))
}

// RiderBatteryNumLTE applies the LTE predicate on the "rider_battery_num" field.
func RiderBatteryNumLTE(v int) predicate.StockSummary {
	return predicate.StockSummary(sql.FieldLTE(FieldRiderBatteryNum, v))
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		step := newCabinetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StockSummary) predicate.StockSummary {
	return predicate.StockSummary(func(s *sql.Selector) {
		p(s.Not())
	})
}
