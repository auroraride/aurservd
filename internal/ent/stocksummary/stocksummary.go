// Code generated by ent, DO NOT EDIT.

package stocksummary

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stocksummary type in the database.
	Label = "stock_summary"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldBatteryNum holds the string denoting the battery_num field in the database.
	FieldBatteryNum = "battery_num"
	// FieldBatteryOutboundNum holds the string denoting the battery_outbound_num field in the database.
	FieldBatteryOutboundNum = "battery_outbound_num"
	// FieldBatteryInboundNum holds the string denoting the battery_inbound_num field in the database.
	FieldBatteryInboundNum = "battery_inbound_num"
	// FieldBikeNum holds the string denoting the bike_num field in the database.
	FieldBikeNum = "bike_num"
	// FieldBikeOutboundNum holds the string denoting the bike_outbound_num field in the database.
	FieldBikeOutboundNum = "bike_outbound_num"
	// FieldBikeInboundNum holds the string denoting the bike_inbound_num field in the database.
	FieldBikeInboundNum = "bike_inbound_num"
	// FieldCabinetBatteryNum holds the string denoting the cabinet_battery_num field in the database.
	FieldCabinetBatteryNum = "cabinet_battery_num"
	// FieldRiderBatteryNum holds the string denoting the rider_battery_num field in the database.
	FieldRiderBatteryNum = "rider_battery_num"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// Table holds the table name of the stocksummary in the database.
	Table = "stock_summary"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "stock_summary"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "stock_summary"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "stock_summary"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "stock_summary"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "stock_summary"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
)

// Columns holds all SQL columns for stocksummary fields.
var Columns = []string{
	FieldID,
	FieldEnterpriseID,
	FieldStationID,
	FieldStoreID,
	FieldRiderID,
	FieldCabinetID,
	FieldDate,
	FieldBatteryNum,
	FieldBatteryOutboundNum,
	FieldBatteryInboundNum,
	FieldBikeNum,
	FieldBikeOutboundNum,
	FieldBikeInboundNum,
	FieldCabinetBatteryNum,
	FieldRiderBatteryNum,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DateValidator is a validator for the "date" field. It is called by the builders before save.
	DateValidator func(string) error
	// DefaultBatteryNum holds the default value on creation for the "battery_num" field.
	DefaultBatteryNum int
	// DefaultBatteryOutboundNum holds the default value on creation for the "battery_outbound_num" field.
	DefaultBatteryOutboundNum int
	// DefaultBatteryInboundNum holds the default value on creation for the "battery_inbound_num" field.
	DefaultBatteryInboundNum int
	// DefaultBikeNum holds the default value on creation for the "bike_num" field.
	DefaultBikeNum int
	// DefaultBikeOutboundNum holds the default value on creation for the "bike_outbound_num" field.
	DefaultBikeOutboundNum int
	// DefaultBikeInboundNum holds the default value on creation for the "bike_inbound_num" field.
	DefaultBikeInboundNum int
	// DefaultCabinetBatteryNum holds the default value on creation for the "cabinet_battery_num" field.
	DefaultCabinetBatteryNum int
	// DefaultRiderBatteryNum holds the default value on creation for the "rider_battery_num" field.
	DefaultRiderBatteryNum int
)

// OrderOption defines the ordering options for the StockSummary queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByBatteryNum orders the results by the battery_num field.
func ByBatteryNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryNum, opts...).ToFunc()
}

// ByBatteryOutboundNum orders the results by the battery_outbound_num field.
func ByBatteryOutboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryOutboundNum, opts...).ToFunc()
}

// ByBatteryInboundNum orders the results by the battery_inbound_num field.
func ByBatteryInboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryInboundNum, opts...).ToFunc()
}

// ByBikeNum orders the results by the bike_num field.
func ByBikeNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBikeNum, opts...).ToFunc()
}

// ByBikeOutboundNum orders the results by the bike_outbound_num field.
func ByBikeOutboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBikeOutboundNum, opts...).ToFunc()
}

// ByBikeInboundNum orders the results by the bike_inbound_num field.
func ByBikeInboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBikeInboundNum, opts...).ToFunc()
}

// ByCabinetBatteryNum orders the results by the cabinet_battery_num field.
func ByCabinetBatteryNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetBatteryNum, opts...).ToFunc()
}

// ByRiderBatteryNum orders the results by the rider_battery_num field.
func ByRiderBatteryNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderBatteryNum, opts...).ToFunc()
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
