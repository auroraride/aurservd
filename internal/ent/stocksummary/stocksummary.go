// Code generated by ent, DO NOT EDIT.

package stocksummary

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stocksummary type in the database.
	Label = "stock_summary"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldNum holds the string denoting the num field in the database.
	FieldNum = "num"
	// FieldTodayNum holds the string denoting the today_num field in the database.
	FieldTodayNum = "today_num"
	// FieldOutboundNum holds the string denoting the outbound_num field in the database.
	FieldOutboundNum = "outbound_num"
	// FieldInboundNum holds the string denoting the inbound_num field in the database.
	FieldInboundNum = "inbound_num"
	// FieldInRiderNum holds the string denoting the in_rider_num field in the database.
	FieldInRiderNum = "in_rider_num"
	// FieldMaterial holds the string denoting the material field in the database.
	FieldMaterial = "material"
	// EdgeEnterprise holds the string denoting the enterprise edge name in mutations.
	EdgeEnterprise = "enterprise"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// Table holds the table name of the stocksummary in the database.
	Table = "stock_summary"
	// EnterpriseTable is the table that holds the enterprise relation/edge.
	EnterpriseTable = "stock_summary"
	// EnterpriseInverseTable is the table name for the Enterprise entity.
	// It exists in this package in order to avoid circular dependency with the "enterprise" package.
	EnterpriseInverseTable = "enterprise"
	// EnterpriseColumn is the table column denoting the enterprise relation/edge.
	EnterpriseColumn = "enterprise_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "stock_summary"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "stock_summary"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "stock_summary"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "stock_summary"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
)

// Columns holds all SQL columns for stocksummary fields.
var Columns = []string{
	FieldID,
	FieldEnterpriseID,
	FieldStationID,
	FieldStoreID,
	FieldRiderID,
	FieldCabinetID,
	FieldDate,
	FieldModel,
	FieldNum,
	FieldTodayNum,
	FieldOutboundNum,
	FieldInboundNum,
	FieldInRiderNum,
	FieldMaterial,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DateValidator is a validator for the "date" field. It is called by the builders before save.
	DateValidator func(string) error
	// DefaultNum holds the default value on creation for the "num" field.
	DefaultNum int
	// DefaultTodayNum holds the default value on creation for the "today_num" field.
	DefaultTodayNum int
	// DefaultOutboundNum holds the default value on creation for the "outbound_num" field.
	DefaultOutboundNum int
	// DefaultInboundNum holds the default value on creation for the "inbound_num" field.
	DefaultInboundNum int
	// DefaultInRiderNum holds the default value on creation for the "in_rider_num" field.
	DefaultInRiderNum int
)

// Material defines the type for the "material" enum field.
type Material string

// Material values.
const (
	MaterialBattery Material = "battery"
	MaterialEbike   Material = "ebike"
	MaterialOthers  Material = "others"
)

func (m Material) String() string {
	return string(m)
}

// MaterialValidator is a validator for the "material" field enum values. It is called by the builders before save.
func MaterialValidator(m Material) error {
	switch m {
	case MaterialBattery, MaterialEbike, MaterialOthers:
		return nil
	default:
		return fmt.Errorf("stocksummary: invalid enum value for material field: %q", m)
	}
}

// OrderOption defines the ordering options for the StockSummary queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByNum orders the results by the num field.
func ByNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNum, opts...).ToFunc()
}

// ByTodayNum orders the results by the today_num field.
func ByTodayNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTodayNum, opts...).ToFunc()
}

// ByOutboundNum orders the results by the outbound_num field.
func ByOutboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutboundNum, opts...).ToFunc()
}

// ByInboundNum orders the results by the inbound_num field.
func ByInboundNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInboundNum, opts...).ToFunc()
}

// ByInRiderNum orders the results by the in_rider_num field.
func ByInRiderNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInRiderNum, opts...).ToFunc()
}

// ByMaterial orders the results by the material field.
func ByMaterial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaterial, opts...).ToFunc()
}

// ByEnterpriseField orders the results by enterprise field.
func ByEnterpriseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnterpriseStep(), sql.OrderByField(field, opts...))
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}
func newEnterpriseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnterpriseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
