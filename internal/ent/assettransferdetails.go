// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
)

// AssetTransferDetails is the model entity for the AssetTransferDetails schema.
type AssetTransferDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// AssetID holds the value of the "asset_id" field.
	AssetID *uint64 `json:"asset_id,omitempty"`
	// 调拨ID
	TransferID uint64 `json:"transfer_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetTransferDetailsQuery when eager-loading is set.
	Edges        AssetTransferDetailsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetTransferDetailsEdges holds the relations/edges for other nodes in the graph.
type AssetTransferDetailsEdges struct {
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// Transfer holds the value of the transfer edge.
	Transfer *AssetTransfer `json:"transfer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetTransferDetailsEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// TransferOrErr returns the Transfer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetTransferDetailsEdges) TransferOrErr() (*AssetTransfer, error) {
	if e.Transfer != nil {
		return e.Transfer, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: assettransfer.Label}
	}
	return nil, &NotLoadedError{edge: "transfer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetTransferDetails) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assettransferdetails.FieldCreator, assettransferdetails.FieldLastModifier:
			values[i] = new([]byte)
		case assettransferdetails.FieldID, assettransferdetails.FieldAssetID, assettransferdetails.FieldTransferID:
			values[i] = new(sql.NullInt64)
		case assettransferdetails.FieldRemark:
			values[i] = new(sql.NullString)
		case assettransferdetails.FieldCreatedAt, assettransferdetails.FieldUpdatedAt, assettransferdetails.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetTransferDetails fields.
func (atd *AssetTransferDetails) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assettransferdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			atd.ID = uint64(value.Int64)
		case assettransferdetails.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				atd.CreatedAt = value.Time
			}
		case assettransferdetails.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				atd.UpdatedAt = value.Time
			}
		case assettransferdetails.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				atd.DeletedAt = new(time.Time)
				*atd.DeletedAt = value.Time
			}
		case assettransferdetails.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &atd.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assettransferdetails.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &atd.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assettransferdetails.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				atd.Remark = value.String
			}
		case assettransferdetails.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value.Valid {
				atd.AssetID = new(uint64)
				*atd.AssetID = uint64(value.Int64)
			}
		case assettransferdetails.FieldTransferID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_id", values[i])
			} else if value.Valid {
				atd.TransferID = uint64(value.Int64)
			}
		default:
			atd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetTransferDetails.
// This includes values selected through modifiers, order, etc.
func (atd *AssetTransferDetails) Value(name string) (ent.Value, error) {
	return atd.selectValues.Get(name)
}

// QueryAsset queries the "asset" edge of the AssetTransferDetails entity.
func (atd *AssetTransferDetails) QueryAsset() *AssetQuery {
	return NewAssetTransferDetailsClient(atd.config).QueryAsset(atd)
}

// QueryTransfer queries the "transfer" edge of the AssetTransferDetails entity.
func (atd *AssetTransferDetails) QueryTransfer() *AssetTransferQuery {
	return NewAssetTransferDetailsClient(atd.config).QueryTransfer(atd)
}

// Update returns a builder for updating this AssetTransferDetails.
// Note that you need to call AssetTransferDetails.Unwrap() before calling this method if this AssetTransferDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (atd *AssetTransferDetails) Update() *AssetTransferDetailsUpdateOne {
	return NewAssetTransferDetailsClient(atd.config).UpdateOne(atd)
}

// Unwrap unwraps the AssetTransferDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (atd *AssetTransferDetails) Unwrap() *AssetTransferDetails {
	_tx, ok := atd.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetTransferDetails is not a transactional entity")
	}
	atd.config.driver = _tx.drv
	return atd
}

// String implements the fmt.Stringer.
func (atd *AssetTransferDetails) String() string {
	var builder strings.Builder
	builder.WriteString("AssetTransferDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", atd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(atd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(atd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := atd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", atd.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", atd.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(atd.Remark)
	builder.WriteString(", ")
	if v := atd.AssetID; v != nil {
		builder.WriteString("asset_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("transfer_id=")
	builder.WriteString(fmt.Sprintf("%v", atd.TransferID))
	builder.WriteByte(')')
	return builder.String()
}

// AssetTransferDetailsSlice is a parsable slice of AssetTransferDetails.
type AssetTransferDetailsSlice []*AssetTransferDetails
