// Code generated by ent, DO NOT EDIT.

package pushmessage

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the pushmessage type in the database.
	Label = "pushmessage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldPushType holds the string denoting the push_type field in the database.
	FieldPushType = "push_type"
	// FieldPushTime holds the string denoting the push_time field in the database.
	FieldPushTime = "push_time"
	// FieldIsHome holds the string denoting the is_home field in the database.
	FieldIsHome = "is_home"
	// FieldHomeContent holds the string denoting the home_content field in the database.
	FieldHomeContent = "home_content"
	// FieldMessageStatus holds the string denoting the message_status field in the database.
	FieldMessageStatus = "message_status"
	// FieldMessageType holds the string denoting the message_type field in the database.
	FieldMessageType = "message_type"
	// FieldThirdPartyID holds the string denoting the third_party_id field in the database.
	FieldThirdPartyID = "third_party_id"
	// Table holds the table name of the pushmessage in the database.
	Table = "pushmessage"
)

// Columns holds all SQL columns for pushmessage fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldTitle,
	FieldImage,
	FieldContent,
	FieldPushType,
	FieldPushTime,
	FieldIsHome,
	FieldHomeContent,
	FieldMessageStatus,
	FieldMessageType,
	FieldThirdPartyID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Pushmessage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByPushType orders the results by the push_type field.
func ByPushType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushType, opts...).ToFunc()
}

// ByPushTime orders the results by the push_time field.
func ByPushTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPushTime, opts...).ToFunc()
}

// ByIsHome orders the results by the is_home field.
func ByIsHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHome, opts...).ToFunc()
}

// ByHomeContent orders the results by the home_content field.
func ByHomeContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeContent, opts...).ToFunc()
}

// ByMessageStatus orders the results by the message_status field.
func ByMessageStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageStatus, opts...).ToFunc()
}

// ByMessageType orders the results by the message_type field.
func ByMessageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageType, opts...).ToFunc()
}

// ByThirdPartyID orders the results by the third_party_id field.
func ByThirdPartyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThirdPartyID, opts...).ToFunc()
}
