// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// EbikeQuery is the builder for querying Ebike entities.
type EbikeQuery struct {
	config
	ctx            *QueryContext
	order          []ebike.OrderOption
	inters         []Interceptor
	predicates     []predicate.Ebike
	withBrand      *EbikeBrandQuery
	withRider      *RiderQuery
	withStore      *StoreQuery
	withEnterprise *EnterpriseQuery
	withStation    *EnterpriseStationQuery
	withAllocates  *AllocateQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EbikeQuery builder.
func (eq *EbikeQuery) Where(ps ...predicate.Ebike) *EbikeQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EbikeQuery) Limit(limit int) *EbikeQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EbikeQuery) Offset(offset int) *EbikeQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EbikeQuery) Unique(unique bool) *EbikeQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EbikeQuery) Order(o ...ebike.OrderOption) *EbikeQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryBrand chains the current query on the "brand" edge.
func (eq *EbikeQuery) QueryBrand() *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.BrandTable, ebike.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (eq *EbikeQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.RiderTable, ebike.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (eq *EbikeQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StoreTable, ebike.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (eq *EbikeQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.EnterpriseTable, ebike.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (eq *EbikeQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebike.StationTable, ebike.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAllocates chains the current query on the "allocates" edge.
func (eq *EbikeQuery) QueryAllocates() *AllocateQuery {
	query := (&AllocateClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebike.Table, ebike.FieldID, selector),
			sqlgraph.To(allocate.Table, allocate.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ebike.AllocatesTable, ebike.AllocatesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Ebike entity from the query.
// Returns a *NotFoundError when no Ebike was found.
func (eq *EbikeQuery) First(ctx context.Context) (*Ebike, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ebike.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EbikeQuery) FirstX(ctx context.Context) *Ebike {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Ebike ID from the query.
// Returns a *NotFoundError when no Ebike ID was found.
func (eq *EbikeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ebike.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EbikeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Ebike entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Ebike entity is found.
// Returns a *NotFoundError when no Ebike entities are found.
func (eq *EbikeQuery) Only(ctx context.Context) (*Ebike, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ebike.Label}
	default:
		return nil, &NotSingularError{ebike.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EbikeQuery) OnlyX(ctx context.Context) *Ebike {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Ebike ID in the query.
// Returns a *NotSingularError when more than one Ebike ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EbikeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ebike.Label}
	default:
		err = &NotSingularError{ebike.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EbikeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Ebikes.
func (eq *EbikeQuery) All(ctx context.Context) ([]*Ebike, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Ebike, *EbikeQuery]()
	return withInterceptors[[]*Ebike](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EbikeQuery) AllX(ctx context.Context) []*Ebike {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Ebike IDs.
func (eq *EbikeQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(ebike.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EbikeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EbikeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EbikeQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EbikeQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EbikeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EbikeQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EbikeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EbikeQuery) Clone() *EbikeQuery {
	if eq == nil {
		return nil
	}
	return &EbikeQuery{
		config:         eq.config,
		ctx:            eq.ctx.Clone(),
		order:          append([]ebike.OrderOption{}, eq.order...),
		inters:         append([]Interceptor{}, eq.inters...),
		predicates:     append([]predicate.Ebike{}, eq.predicates...),
		withBrand:      eq.withBrand.Clone(),
		withRider:      eq.withRider.Clone(),
		withStore:      eq.withStore.Clone(),
		withEnterprise: eq.withEnterprise.Clone(),
		withStation:    eq.withStation.Clone(),
		withAllocates:  eq.withAllocates.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *EbikeQuery {
	query := (&EbikeBrandClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withBrand = query
	return eq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithRider(opts ...func(*RiderQuery)) *EbikeQuery {
	query := (&RiderClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withRider = query
	return eq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithStore(opts ...func(*StoreQuery)) *EbikeQuery {
	query := (&StoreClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStore = query
	return eq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *EbikeQuery {
	query := (&EnterpriseClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withEnterprise = query
	return eq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *EbikeQuery {
	query := (&EnterpriseStationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStation = query
	return eq
}

// WithAllocates tells the query-builder to eager-load the nodes that are connected to
// the "allocates" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EbikeQuery) WithAllocates(opts ...func(*AllocateQuery)) *EbikeQuery {
	query := (&AllocateClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAllocates = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Ebike.Query().
//		GroupBy(ebike.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EbikeQuery) GroupBy(field string, fields ...string) *EbikeGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EbikeGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = ebike.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Ebike.Query().
//		Select(ebike.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EbikeQuery) Select(fields ...string) *EbikeSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EbikeSelect{EbikeQuery: eq}
	sbuild.label = ebike.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EbikeSelect configured with the given aggregations.
func (eq *EbikeQuery) Aggregate(fns ...AggregateFunc) *EbikeSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EbikeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !ebike.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EbikeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Ebike, error) {
	var (
		nodes       = []*Ebike{}
		_spec       = eq.querySpec()
		loadedTypes = [6]bool{
			eq.withBrand != nil,
			eq.withRider != nil,
			eq.withStore != nil,
			eq.withEnterprise != nil,
			eq.withStation != nil,
			eq.withAllocates != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Ebike).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Ebike{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withBrand; query != nil {
		if err := eq.loadBrand(ctx, query, nodes, nil,
			func(n *Ebike, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withRider; query != nil {
		if err := eq.loadRider(ctx, query, nodes, nil,
			func(n *Ebike, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStore; query != nil {
		if err := eq.loadStore(ctx, query, nodes, nil,
			func(n *Ebike, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withEnterprise; query != nil {
		if err := eq.loadEnterprise(ctx, query, nodes, nil,
			func(n *Ebike, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStation; query != nil {
		if err := eq.loadStation(ctx, query, nodes, nil,
			func(n *Ebike, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAllocates; query != nil {
		if err := eq.loadAllocates(ctx, query, nodes,
			func(n *Ebike) { n.Edges.Allocates = []*Allocate{} },
			func(n *Ebike, e *Allocate) { n.Edges.Allocates = append(n.Edges.Allocates, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EbikeQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Ebike)
	for i := range nodes {
		fk := nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EbikeQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Ebike)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EbikeQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Ebike)
	for i := range nodes {
		if nodes[i].StoreID == nil {
			continue
		}
		fk := *nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EbikeQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Ebike)
	for i := range nodes {
		if nodes[i].EnterpriseID == nil {
			continue
		}
		fk := *nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EbikeQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Ebike)
	for i := range nodes {
		if nodes[i].StationID == nil {
			continue
		}
		fk := *nodes[i].StationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EbikeQuery) loadAllocates(ctx context.Context, query *AllocateQuery, nodes []*Ebike, init func(*Ebike), assign func(*Ebike, *Allocate)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Ebike)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(allocate.FieldEbikeID)
	}
	query.Where(predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(ebike.AllocatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EbikeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "ebike_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ebike_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EbikeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EbikeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ebike.Table, ebike.Columns, sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebike.FieldID)
		for i := range fields {
			if fields[i] != ebike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withBrand != nil {
			_spec.Node.AddColumnOnce(ebike.FieldBrandID)
		}
		if eq.withRider != nil {
			_spec.Node.AddColumnOnce(ebike.FieldRiderID)
		}
		if eq.withStore != nil {
			_spec.Node.AddColumnOnce(ebike.FieldStoreID)
		}
		if eq.withEnterprise != nil {
			_spec.Node.AddColumnOnce(ebike.FieldEnterpriseID)
		}
		if eq.withStation != nil {
			_spec.Node.AddColumnOnce(ebike.FieldStationID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EbikeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(ebike.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = ebike.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EbikeQuery) Modify(modifiers ...func(s *sql.Selector)) *EbikeSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

type EbikeQueryWith string

var (
	EbikeQueryWithBrand      EbikeQueryWith = "Brand"
	EbikeQueryWithRider      EbikeQueryWith = "Rider"
	EbikeQueryWithStore      EbikeQueryWith = "Store"
	EbikeQueryWithEnterprise EbikeQueryWith = "Enterprise"
	EbikeQueryWithStation    EbikeQueryWith = "Station"
	EbikeQueryWithAllocates  EbikeQueryWith = "Allocates"
)

func (eq *EbikeQuery) With(withEdges ...EbikeQueryWith) *EbikeQuery {
	for _, v := range withEdges {
		switch v {
		case EbikeQueryWithBrand:
			eq.WithBrand()
		case EbikeQueryWithRider:
			eq.WithRider()
		case EbikeQueryWithStore:
			eq.WithStore()
		case EbikeQueryWithEnterprise:
			eq.WithEnterprise()
		case EbikeQueryWithStation:
			eq.WithStation()
		case EbikeQueryWithAllocates:
			eq.WithAllocates()
		}
	}
	return eq
}

// EbikeGroupBy is the group-by builder for Ebike entities.
type EbikeGroupBy struct {
	selector
	build *EbikeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EbikeGroupBy) Aggregate(fns ...AggregateFunc) *EbikeGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EbikeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EbikeQuery, *EbikeGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EbikeGroupBy) sqlScan(ctx context.Context, root *EbikeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EbikeSelect is the builder for selecting fields of Ebike entities.
type EbikeSelect struct {
	*EbikeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EbikeSelect) Aggregate(fns ...AggregateFunc) *EbikeSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EbikeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EbikeQuery, *EbikeSelect](ctx, es.EbikeQuery, es, es.inters, v)
}

func (es *EbikeSelect) sqlScan(ctx context.Context, root *EbikeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EbikeSelect) Modify(modifiers ...func(s *sql.Selector)) *EbikeSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
