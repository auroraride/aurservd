// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetAttributeValuesUpdate is the builder for updating AssetAttributeValues entities.
type AssetAttributeValuesUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetAttributeValuesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetAttributeValuesUpdate builder.
func (aavu *AssetAttributeValuesUpdate) Where(ps ...predicate.AssetAttributeValues) *AssetAttributeValuesUpdate {
	aavu.mutation.Where(ps...)
	return aavu
}

// SetUpdatedAt sets the "updated_at" field.
func (aavu *AssetAttributeValuesUpdate) SetUpdatedAt(t time.Time) *AssetAttributeValuesUpdate {
	aavu.mutation.SetUpdatedAt(t)
	return aavu
}

// SetAttributeID sets the "attribute_id" field.
func (aavu *AssetAttributeValuesUpdate) SetAttributeID(u uint64) *AssetAttributeValuesUpdate {
	aavu.mutation.SetAttributeID(u)
	return aavu
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (aavu *AssetAttributeValuesUpdate) SetNillableAttributeID(u *uint64) *AssetAttributeValuesUpdate {
	if u != nil {
		aavu.SetAttributeID(*u)
	}
	return aavu
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (aavu *AssetAttributeValuesUpdate) ClearAttributeID() *AssetAttributeValuesUpdate {
	aavu.mutation.ClearAttributeID()
	return aavu
}

// SetAssetID sets the "asset_id" field.
func (aavu *AssetAttributeValuesUpdate) SetAssetID(u uint64) *AssetAttributeValuesUpdate {
	aavu.mutation.SetAssetID(u)
	return aavu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (aavu *AssetAttributeValuesUpdate) SetNillableAssetID(u *uint64) *AssetAttributeValuesUpdate {
	if u != nil {
		aavu.SetAssetID(*u)
	}
	return aavu
}

// ClearAssetID clears the value of the "asset_id" field.
func (aavu *AssetAttributeValuesUpdate) ClearAssetID() *AssetAttributeValuesUpdate {
	aavu.mutation.ClearAssetID()
	return aavu
}

// SetValue sets the "value" field.
func (aavu *AssetAttributeValuesUpdate) SetValue(s string) *AssetAttributeValuesUpdate {
	aavu.mutation.SetValue(s)
	return aavu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aavu *AssetAttributeValuesUpdate) SetNillableValue(s *string) *AssetAttributeValuesUpdate {
	if s != nil {
		aavu.SetValue(*s)
	}
	return aavu
}

// SetAttribute sets the "attribute" edge to the AssetAttributes entity.
func (aavu *AssetAttributeValuesUpdate) SetAttribute(a *AssetAttributes) *AssetAttributeValuesUpdate {
	return aavu.SetAttributeID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (aavu *AssetAttributeValuesUpdate) SetAsset(a *Asset) *AssetAttributeValuesUpdate {
	return aavu.SetAssetID(a.ID)
}

// Mutation returns the AssetAttributeValuesMutation object of the builder.
func (aavu *AssetAttributeValuesUpdate) Mutation() *AssetAttributeValuesMutation {
	return aavu.mutation
}

// ClearAttribute clears the "attribute" edge to the AssetAttributes entity.
func (aavu *AssetAttributeValuesUpdate) ClearAttribute() *AssetAttributeValuesUpdate {
	aavu.mutation.ClearAttribute()
	return aavu
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (aavu *AssetAttributeValuesUpdate) ClearAsset() *AssetAttributeValuesUpdate {
	aavu.mutation.ClearAsset()
	return aavu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aavu *AssetAttributeValuesUpdate) Save(ctx context.Context) (int, error) {
	aavu.defaults()
	return withHooks(ctx, aavu.sqlSave, aavu.mutation, aavu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aavu *AssetAttributeValuesUpdate) SaveX(ctx context.Context) int {
	affected, err := aavu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aavu *AssetAttributeValuesUpdate) Exec(ctx context.Context) error {
	_, err := aavu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aavu *AssetAttributeValuesUpdate) ExecX(ctx context.Context) {
	if err := aavu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aavu *AssetAttributeValuesUpdate) defaults() {
	if _, ok := aavu.mutation.UpdatedAt(); !ok {
		v := assetattributevalues.UpdateDefaultUpdatedAt()
		aavu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aavu *AssetAttributeValuesUpdate) check() error {
	if v, ok := aavu.mutation.Value(); ok {
		if err := assetattributevalues.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AssetAttributeValues.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aavu *AssetAttributeValuesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetAttributeValuesUpdate {
	aavu.modifiers = append(aavu.modifiers, modifiers...)
	return aavu
}

func (aavu *AssetAttributeValuesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aavu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetattributevalues.Table, assetattributevalues.Columns, sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64))
	if ps := aavu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aavu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributevalues.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aavu.mutation.Value(); ok {
		_spec.SetField(assetattributevalues.FieldValue, field.TypeString, value)
	}
	if aavu.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AttributeTable,
			Columns: []string{assetattributevalues.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aavu.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AttributeTable,
			Columns: []string{assetattributevalues.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aavu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AssetTable,
			Columns: []string{assetattributevalues.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aavu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AssetTable,
			Columns: []string{assetattributevalues.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aavu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aavu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetattributevalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aavu.mutation.done = true
	return n, nil
}

// AssetAttributeValuesUpdateOne is the builder for updating a single AssetAttributeValues entity.
type AssetAttributeValuesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetAttributeValuesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aavuo *AssetAttributeValuesUpdateOne) SetUpdatedAt(t time.Time) *AssetAttributeValuesUpdateOne {
	aavuo.mutation.SetUpdatedAt(t)
	return aavuo
}

// SetAttributeID sets the "attribute_id" field.
func (aavuo *AssetAttributeValuesUpdateOne) SetAttributeID(u uint64) *AssetAttributeValuesUpdateOne {
	aavuo.mutation.SetAttributeID(u)
	return aavuo
}

// SetNillableAttributeID sets the "attribute_id" field if the given value is not nil.
func (aavuo *AssetAttributeValuesUpdateOne) SetNillableAttributeID(u *uint64) *AssetAttributeValuesUpdateOne {
	if u != nil {
		aavuo.SetAttributeID(*u)
	}
	return aavuo
}

// ClearAttributeID clears the value of the "attribute_id" field.
func (aavuo *AssetAttributeValuesUpdateOne) ClearAttributeID() *AssetAttributeValuesUpdateOne {
	aavuo.mutation.ClearAttributeID()
	return aavuo
}

// SetAssetID sets the "asset_id" field.
func (aavuo *AssetAttributeValuesUpdateOne) SetAssetID(u uint64) *AssetAttributeValuesUpdateOne {
	aavuo.mutation.SetAssetID(u)
	return aavuo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (aavuo *AssetAttributeValuesUpdateOne) SetNillableAssetID(u *uint64) *AssetAttributeValuesUpdateOne {
	if u != nil {
		aavuo.SetAssetID(*u)
	}
	return aavuo
}

// ClearAssetID clears the value of the "asset_id" field.
func (aavuo *AssetAttributeValuesUpdateOne) ClearAssetID() *AssetAttributeValuesUpdateOne {
	aavuo.mutation.ClearAssetID()
	return aavuo
}

// SetValue sets the "value" field.
func (aavuo *AssetAttributeValuesUpdateOne) SetValue(s string) *AssetAttributeValuesUpdateOne {
	aavuo.mutation.SetValue(s)
	return aavuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aavuo *AssetAttributeValuesUpdateOne) SetNillableValue(s *string) *AssetAttributeValuesUpdateOne {
	if s != nil {
		aavuo.SetValue(*s)
	}
	return aavuo
}

// SetAttribute sets the "attribute" edge to the AssetAttributes entity.
func (aavuo *AssetAttributeValuesUpdateOne) SetAttribute(a *AssetAttributes) *AssetAttributeValuesUpdateOne {
	return aavuo.SetAttributeID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (aavuo *AssetAttributeValuesUpdateOne) SetAsset(a *Asset) *AssetAttributeValuesUpdateOne {
	return aavuo.SetAssetID(a.ID)
}

// Mutation returns the AssetAttributeValuesMutation object of the builder.
func (aavuo *AssetAttributeValuesUpdateOne) Mutation() *AssetAttributeValuesMutation {
	return aavuo.mutation
}

// ClearAttribute clears the "attribute" edge to the AssetAttributes entity.
func (aavuo *AssetAttributeValuesUpdateOne) ClearAttribute() *AssetAttributeValuesUpdateOne {
	aavuo.mutation.ClearAttribute()
	return aavuo
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (aavuo *AssetAttributeValuesUpdateOne) ClearAsset() *AssetAttributeValuesUpdateOne {
	aavuo.mutation.ClearAsset()
	return aavuo
}

// Where appends a list predicates to the AssetAttributeValuesUpdate builder.
func (aavuo *AssetAttributeValuesUpdateOne) Where(ps ...predicate.AssetAttributeValues) *AssetAttributeValuesUpdateOne {
	aavuo.mutation.Where(ps...)
	return aavuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aavuo *AssetAttributeValuesUpdateOne) Select(field string, fields ...string) *AssetAttributeValuesUpdateOne {
	aavuo.fields = append([]string{field}, fields...)
	return aavuo
}

// Save executes the query and returns the updated AssetAttributeValues entity.
func (aavuo *AssetAttributeValuesUpdateOne) Save(ctx context.Context) (*AssetAttributeValues, error) {
	aavuo.defaults()
	return withHooks(ctx, aavuo.sqlSave, aavuo.mutation, aavuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aavuo *AssetAttributeValuesUpdateOne) SaveX(ctx context.Context) *AssetAttributeValues {
	node, err := aavuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aavuo *AssetAttributeValuesUpdateOne) Exec(ctx context.Context) error {
	_, err := aavuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aavuo *AssetAttributeValuesUpdateOne) ExecX(ctx context.Context) {
	if err := aavuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aavuo *AssetAttributeValuesUpdateOne) defaults() {
	if _, ok := aavuo.mutation.UpdatedAt(); !ok {
		v := assetattributevalues.UpdateDefaultUpdatedAt()
		aavuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aavuo *AssetAttributeValuesUpdateOne) check() error {
	if v, ok := aavuo.mutation.Value(); ok {
		if err := assetattributevalues.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AssetAttributeValues.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aavuo *AssetAttributeValuesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetAttributeValuesUpdateOne {
	aavuo.modifiers = append(aavuo.modifiers, modifiers...)
	return aavuo
}

func (aavuo *AssetAttributeValuesUpdateOne) sqlSave(ctx context.Context) (_node *AssetAttributeValues, err error) {
	if err := aavuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetattributevalues.Table, assetattributevalues.Columns, sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64))
	id, ok := aavuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetAttributeValues.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aavuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetattributevalues.FieldID)
		for _, f := range fields {
			if !assetattributevalues.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetattributevalues.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aavuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aavuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributevalues.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aavuo.mutation.Value(); ok {
		_spec.SetField(assetattributevalues.FieldValue, field.TypeString, value)
	}
	if aavuo.mutation.AttributeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AttributeTable,
			Columns: []string{assetattributevalues.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aavuo.mutation.AttributeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AttributeTable,
			Columns: []string{assetattributevalues.AttributeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aavuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AssetTable,
			Columns: []string{assetattributevalues.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aavuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetattributevalues.AssetTable,
			Columns: []string{assetattributevalues.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aavuo.modifiers...)
	_node = &AssetAttributeValues{config: aavuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aavuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetattributevalues.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aavuo.mutation.done = true
	return _node, nil
}
