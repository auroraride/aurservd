// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseStatementUpdate is the builder for updating EnterpriseStatement entities.
type EnterpriseStatementUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseStatementMutation
}

// Where appends a list predicates to the EnterpriseStatementUpdate builder.
func (esu *EnterpriseStatementUpdate) Where(ps ...predicate.EnterpriseStatement) *EnterpriseStatementUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetUpdatedAt sets the "updated_at" field.
func (esu *EnterpriseStatementUpdate) SetUpdatedAt(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetUpdatedAt(t)
	return esu
}

// SetDeletedAt sets the "deleted_at" field.
func (esu *EnterpriseStatementUpdate) SetDeletedAt(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetDeletedAt(t)
	return esu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseStatementUpdate {
	if t != nil {
		esu.SetDeletedAt(*t)
	}
	return esu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esu *EnterpriseStatementUpdate) ClearDeletedAt() *EnterpriseStatementUpdate {
	esu.mutation.ClearDeletedAt()
	return esu
}

// SetLastModifier sets the "last_modifier" field.
func (esu *EnterpriseStatementUpdate) SetLastModifier(m *model.Modifier) *EnterpriseStatementUpdate {
	esu.mutation.SetLastModifier(m)
	return esu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (esu *EnterpriseStatementUpdate) ClearLastModifier() *EnterpriseStatementUpdate {
	esu.mutation.ClearLastModifier()
	return esu
}

// SetRemark sets the "remark" field.
func (esu *EnterpriseStatementUpdate) SetRemark(s string) *EnterpriseStatementUpdate {
	esu.mutation.SetRemark(s)
	return esu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableRemark(s *string) *EnterpriseStatementUpdate {
	if s != nil {
		esu.SetRemark(*s)
	}
	return esu
}

// ClearRemark clears the value of the "remark" field.
func (esu *EnterpriseStatementUpdate) ClearRemark() *EnterpriseStatementUpdate {
	esu.mutation.ClearRemark()
	return esu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (esu *EnterpriseStatementUpdate) SetEnterpriseID(u uint64) *EnterpriseStatementUpdate {
	esu.mutation.SetEnterpriseID(u)
	return esu
}

// SetCost sets the "cost" field.
func (esu *EnterpriseStatementUpdate) SetCost(f float64) *EnterpriseStatementUpdate {
	esu.mutation.ResetCost()
	esu.mutation.SetCost(f)
	return esu
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableCost(f *float64) *EnterpriseStatementUpdate {
	if f != nil {
		esu.SetCost(*f)
	}
	return esu
}

// AddCost adds f to the "cost" field.
func (esu *EnterpriseStatementUpdate) AddCost(f float64) *EnterpriseStatementUpdate {
	esu.mutation.AddCost(f)
	return esu
}

// SetBalance sets the "balance" field.
func (esu *EnterpriseStatementUpdate) SetBalance(f float64) *EnterpriseStatementUpdate {
	esu.mutation.ResetBalance()
	esu.mutation.SetBalance(f)
	return esu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableBalance(f *float64) *EnterpriseStatementUpdate {
	if f != nil {
		esu.SetBalance(*f)
	}
	return esu
}

// AddBalance adds f to the "balance" field.
func (esu *EnterpriseStatementUpdate) AddBalance(f float64) *EnterpriseStatementUpdate {
	esu.mutation.AddBalance(f)
	return esu
}

// SetSettledAt sets the "settled_at" field.
func (esu *EnterpriseStatementUpdate) SetSettledAt(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetSettledAt(t)
	return esu
}

// SetNillableSettledAt sets the "settled_at" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableSettledAt(t *time.Time) *EnterpriseStatementUpdate {
	if t != nil {
		esu.SetSettledAt(*t)
	}
	return esu
}

// ClearSettledAt clears the value of the "settled_at" field.
func (esu *EnterpriseStatementUpdate) ClearSettledAt() *EnterpriseStatementUpdate {
	esu.mutation.ClearSettledAt()
	return esu
}

// SetDays sets the "days" field.
func (esu *EnterpriseStatementUpdate) SetDays(i int) *EnterpriseStatementUpdate {
	esu.mutation.ResetDays()
	esu.mutation.SetDays(i)
	return esu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableDays(i *int) *EnterpriseStatementUpdate {
	if i != nil {
		esu.SetDays(*i)
	}
	return esu
}

// AddDays adds i to the "days" field.
func (esu *EnterpriseStatementUpdate) AddDays(i int) *EnterpriseStatementUpdate {
	esu.mutation.AddDays(i)
	return esu
}

// SetRiderNumber sets the "rider_number" field.
func (esu *EnterpriseStatementUpdate) SetRiderNumber(i int) *EnterpriseStatementUpdate {
	esu.mutation.ResetRiderNumber()
	esu.mutation.SetRiderNumber(i)
	return esu
}

// SetNillableRiderNumber sets the "rider_number" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableRiderNumber(i *int) *EnterpriseStatementUpdate {
	if i != nil {
		esu.SetRiderNumber(*i)
	}
	return esu
}

// AddRiderNumber adds i to the "rider_number" field.
func (esu *EnterpriseStatementUpdate) AddRiderNumber(i int) *EnterpriseStatementUpdate {
	esu.mutation.AddRiderNumber(i)
	return esu
}

// SetDate sets the "date" field.
func (esu *EnterpriseStatementUpdate) SetDate(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetDate(t)
	return esu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableDate(t *time.Time) *EnterpriseStatementUpdate {
	if t != nil {
		esu.SetDate(*t)
	}
	return esu
}

// ClearDate clears the value of the "date" field.
func (esu *EnterpriseStatementUpdate) ClearDate() *EnterpriseStatementUpdate {
	esu.mutation.ClearDate()
	return esu
}

// SetStart sets the "start" field.
func (esu *EnterpriseStatementUpdate) SetStart(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetStart(t)
	return esu
}

// SetEnd sets the "end" field.
func (esu *EnterpriseStatementUpdate) SetEnd(t time.Time) *EnterpriseStatementUpdate {
	esu.mutation.SetEnd(t)
	return esu
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (esu *EnterpriseStatementUpdate) SetNillableEnd(t *time.Time) *EnterpriseStatementUpdate {
	if t != nil {
		esu.SetEnd(*t)
	}
	return esu
}

// ClearEnd clears the value of the "end" field.
func (esu *EnterpriseStatementUpdate) ClearEnd() *EnterpriseStatementUpdate {
	esu.mutation.ClearEnd()
	return esu
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (esu *EnterpriseStatementUpdate) SetEnterprise(e *Enterprise) *EnterpriseStatementUpdate {
	return esu.SetEnterpriseID(e.ID)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (esu *EnterpriseStatementUpdate) AddBillIDs(ids ...uint64) *EnterpriseStatementUpdate {
	esu.mutation.AddBillIDs(ids...)
	return esu
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (esu *EnterpriseStatementUpdate) AddBills(e ...*EnterpriseBill) *EnterpriseStatementUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esu.AddBillIDs(ids...)
}

// Mutation returns the EnterpriseStatementMutation object of the builder.
func (esu *EnterpriseStatementUpdate) Mutation() *EnterpriseStatementMutation {
	return esu.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (esu *EnterpriseStatementUpdate) ClearEnterprise() *EnterpriseStatementUpdate {
	esu.mutation.ClearEnterprise()
	return esu
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (esu *EnterpriseStatementUpdate) ClearBills() *EnterpriseStatementUpdate {
	esu.mutation.ClearBills()
	return esu
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (esu *EnterpriseStatementUpdate) RemoveBillIDs(ids ...uint64) *EnterpriseStatementUpdate {
	esu.mutation.RemoveBillIDs(ids...)
	return esu
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (esu *EnterpriseStatementUpdate) RemoveBills(e ...*EnterpriseBill) *EnterpriseStatementUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esu.RemoveBillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EnterpriseStatementUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := esu.defaults(); err != nil {
		return 0, err
	}
	if len(esu.hooks) == 0 {
		if err = esu.check(); err != nil {
			return 0, err
		}
		affected, err = esu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esu.check(); err != nil {
				return 0, err
			}
			esu.mutation = mutation
			affected, err = esu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esu.hooks) - 1; i >= 0; i-- {
			if esu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EnterpriseStatementUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EnterpriseStatementUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EnterpriseStatementUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esu *EnterpriseStatementUpdate) defaults() error {
	if _, ok := esu.mutation.UpdatedAt(); !ok {
		if enterprisestatement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestatement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestatement.UpdateDefaultUpdatedAt()
		esu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esu *EnterpriseStatementUpdate) check() error {
	if _, ok := esu.mutation.EnterpriseID(); esu.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseStatement.enterprise"`)
	}
	return nil
}

func (esu *EnterpriseStatementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisestatement.Table,
			Columns: enterprisestatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		},
	}
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldUpdatedAt,
		})
	}
	if value, ok := esu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldDeletedAt,
		})
	}
	if esu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldDeletedAt,
		})
	}
	if esu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestatement.FieldCreator,
		})
	}
	if value, ok := esu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestatement.FieldLastModifier,
		})
	}
	if esu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestatement.FieldLastModifier,
		})
	}
	if value, ok := esu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestatement.FieldRemark,
		})
	}
	if esu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisestatement.FieldRemark,
		})
	}
	if value, ok := esu.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldCost,
		})
	}
	if value, ok := esu.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldCost,
		})
	}
	if value, ok := esu.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldBalance,
		})
	}
	if value, ok := esu.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldBalance,
		})
	}
	if value, ok := esu.mutation.SettledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldSettledAt,
		})
	}
	if esu.mutation.SettledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldSettledAt,
		})
	}
	if value, ok := esu.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldDays,
		})
	}
	if value, ok := esu.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldDays,
		})
	}
	if value, ok := esu.mutation.RiderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldRiderNumber,
		})
	}
	if value, ok := esu.mutation.AddedRiderNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldRiderNumber,
		})
	}
	if value, ok := esu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldDate,
		})
	}
	if esu.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldDate,
		})
	}
	if value, ok := esu.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldStart,
		})
	}
	if value, ok := esu.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldEnd,
		})
	}
	if esu.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldEnd,
		})
	}
	if esu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.RemovedBillsIDs(); len(nodes) > 0 && !esu.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisestatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseStatementUpdateOne is the builder for updating a single EnterpriseStatement entity.
type EnterpriseStatementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseStatementMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (esuo *EnterpriseStatementUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetUpdatedAt(t)
	return esuo
}

// SetDeletedAt sets the "deleted_at" field.
func (esuo *EnterpriseStatementUpdateOne) SetDeletedAt(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetDeletedAt(t)
	return esuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseStatementUpdateOne {
	if t != nil {
		esuo.SetDeletedAt(*t)
	}
	return esuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (esuo *EnterpriseStatementUpdateOne) ClearDeletedAt() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearDeletedAt()
	return esuo
}

// SetLastModifier sets the "last_modifier" field.
func (esuo *EnterpriseStatementUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetLastModifier(m)
	return esuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (esuo *EnterpriseStatementUpdateOne) ClearLastModifier() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearLastModifier()
	return esuo
}

// SetRemark sets the "remark" field.
func (esuo *EnterpriseStatementUpdateOne) SetRemark(s string) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetRemark(s)
	return esuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableRemark(s *string) *EnterpriseStatementUpdateOne {
	if s != nil {
		esuo.SetRemark(*s)
	}
	return esuo
}

// ClearRemark clears the value of the "remark" field.
func (esuo *EnterpriseStatementUpdateOne) ClearRemark() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearRemark()
	return esuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (esuo *EnterpriseStatementUpdateOne) SetEnterpriseID(u uint64) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetEnterpriseID(u)
	return esuo
}

// SetCost sets the "cost" field.
func (esuo *EnterpriseStatementUpdateOne) SetCost(f float64) *EnterpriseStatementUpdateOne {
	esuo.mutation.ResetCost()
	esuo.mutation.SetCost(f)
	return esuo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableCost(f *float64) *EnterpriseStatementUpdateOne {
	if f != nil {
		esuo.SetCost(*f)
	}
	return esuo
}

// AddCost adds f to the "cost" field.
func (esuo *EnterpriseStatementUpdateOne) AddCost(f float64) *EnterpriseStatementUpdateOne {
	esuo.mutation.AddCost(f)
	return esuo
}

// SetBalance sets the "balance" field.
func (esuo *EnterpriseStatementUpdateOne) SetBalance(f float64) *EnterpriseStatementUpdateOne {
	esuo.mutation.ResetBalance()
	esuo.mutation.SetBalance(f)
	return esuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableBalance(f *float64) *EnterpriseStatementUpdateOne {
	if f != nil {
		esuo.SetBalance(*f)
	}
	return esuo
}

// AddBalance adds f to the "balance" field.
func (esuo *EnterpriseStatementUpdateOne) AddBalance(f float64) *EnterpriseStatementUpdateOne {
	esuo.mutation.AddBalance(f)
	return esuo
}

// SetSettledAt sets the "settled_at" field.
func (esuo *EnterpriseStatementUpdateOne) SetSettledAt(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetSettledAt(t)
	return esuo
}

// SetNillableSettledAt sets the "settled_at" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableSettledAt(t *time.Time) *EnterpriseStatementUpdateOne {
	if t != nil {
		esuo.SetSettledAt(*t)
	}
	return esuo
}

// ClearSettledAt clears the value of the "settled_at" field.
func (esuo *EnterpriseStatementUpdateOne) ClearSettledAt() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearSettledAt()
	return esuo
}

// SetDays sets the "days" field.
func (esuo *EnterpriseStatementUpdateOne) SetDays(i int) *EnterpriseStatementUpdateOne {
	esuo.mutation.ResetDays()
	esuo.mutation.SetDays(i)
	return esuo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableDays(i *int) *EnterpriseStatementUpdateOne {
	if i != nil {
		esuo.SetDays(*i)
	}
	return esuo
}

// AddDays adds i to the "days" field.
func (esuo *EnterpriseStatementUpdateOne) AddDays(i int) *EnterpriseStatementUpdateOne {
	esuo.mutation.AddDays(i)
	return esuo
}

// SetRiderNumber sets the "rider_number" field.
func (esuo *EnterpriseStatementUpdateOne) SetRiderNumber(i int) *EnterpriseStatementUpdateOne {
	esuo.mutation.ResetRiderNumber()
	esuo.mutation.SetRiderNumber(i)
	return esuo
}

// SetNillableRiderNumber sets the "rider_number" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableRiderNumber(i *int) *EnterpriseStatementUpdateOne {
	if i != nil {
		esuo.SetRiderNumber(*i)
	}
	return esuo
}

// AddRiderNumber adds i to the "rider_number" field.
func (esuo *EnterpriseStatementUpdateOne) AddRiderNumber(i int) *EnterpriseStatementUpdateOne {
	esuo.mutation.AddRiderNumber(i)
	return esuo
}

// SetDate sets the "date" field.
func (esuo *EnterpriseStatementUpdateOne) SetDate(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetDate(t)
	return esuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableDate(t *time.Time) *EnterpriseStatementUpdateOne {
	if t != nil {
		esuo.SetDate(*t)
	}
	return esuo
}

// ClearDate clears the value of the "date" field.
func (esuo *EnterpriseStatementUpdateOne) ClearDate() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearDate()
	return esuo
}

// SetStart sets the "start" field.
func (esuo *EnterpriseStatementUpdateOne) SetStart(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetStart(t)
	return esuo
}

// SetEnd sets the "end" field.
func (esuo *EnterpriseStatementUpdateOne) SetEnd(t time.Time) *EnterpriseStatementUpdateOne {
	esuo.mutation.SetEnd(t)
	return esuo
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (esuo *EnterpriseStatementUpdateOne) SetNillableEnd(t *time.Time) *EnterpriseStatementUpdateOne {
	if t != nil {
		esuo.SetEnd(*t)
	}
	return esuo
}

// ClearEnd clears the value of the "end" field.
func (esuo *EnterpriseStatementUpdateOne) ClearEnd() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearEnd()
	return esuo
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (esuo *EnterpriseStatementUpdateOne) SetEnterprise(e *Enterprise) *EnterpriseStatementUpdateOne {
	return esuo.SetEnterpriseID(e.ID)
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by IDs.
func (esuo *EnterpriseStatementUpdateOne) AddBillIDs(ids ...uint64) *EnterpriseStatementUpdateOne {
	esuo.mutation.AddBillIDs(ids...)
	return esuo
}

// AddBills adds the "bills" edges to the EnterpriseBill entity.
func (esuo *EnterpriseStatementUpdateOne) AddBills(e ...*EnterpriseBill) *EnterpriseStatementUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esuo.AddBillIDs(ids...)
}

// Mutation returns the EnterpriseStatementMutation object of the builder.
func (esuo *EnterpriseStatementUpdateOne) Mutation() *EnterpriseStatementMutation {
	return esuo.mutation
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (esuo *EnterpriseStatementUpdateOne) ClearEnterprise() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearEnterprise()
	return esuo
}

// ClearBills clears all "bills" edges to the EnterpriseBill entity.
func (esuo *EnterpriseStatementUpdateOne) ClearBills() *EnterpriseStatementUpdateOne {
	esuo.mutation.ClearBills()
	return esuo
}

// RemoveBillIDs removes the "bills" edge to EnterpriseBill entities by IDs.
func (esuo *EnterpriseStatementUpdateOne) RemoveBillIDs(ids ...uint64) *EnterpriseStatementUpdateOne {
	esuo.mutation.RemoveBillIDs(ids...)
	return esuo
}

// RemoveBills removes "bills" edges to EnterpriseBill entities.
func (esuo *EnterpriseStatementUpdateOne) RemoveBills(e ...*EnterpriseBill) *EnterpriseStatementUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esuo.RemoveBillIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EnterpriseStatementUpdateOne) Select(field string, fields ...string) *EnterpriseStatementUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EnterpriseStatement entity.
func (esuo *EnterpriseStatementUpdateOne) Save(ctx context.Context) (*EnterpriseStatement, error) {
	var (
		err  error
		node *EnterpriseStatement
	)
	if err := esuo.defaults(); err != nil {
		return nil, err
	}
	if len(esuo.hooks) == 0 {
		if err = esuo.check(); err != nil {
			return nil, err
		}
		node, err = esuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseStatementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esuo.check(); err != nil {
				return nil, err
			}
			esuo.mutation = mutation
			node, err = esuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esuo.hooks) - 1; i >= 0; i-- {
			if esuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseStatement)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseStatementMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EnterpriseStatementUpdateOne) SaveX(ctx context.Context) *EnterpriseStatement {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EnterpriseStatementUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EnterpriseStatementUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esuo *EnterpriseStatementUpdateOne) defaults() error {
	if _, ok := esuo.mutation.UpdatedAt(); !ok {
		if enterprisestatement.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisestatement.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisestatement.UpdateDefaultUpdatedAt()
		esuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (esuo *EnterpriseStatementUpdateOne) check() error {
	if _, ok := esuo.mutation.EnterpriseID(); esuo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseStatement.enterprise"`)
	}
	return nil
}

func (esuo *EnterpriseStatementUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseStatement, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisestatement.Table,
			Columns: enterprisestatement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisestatement.FieldID,
			},
		},
	}
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseStatement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisestatement.FieldID)
		for _, f := range fields {
			if !enterprisestatement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprisestatement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldUpdatedAt,
		})
	}
	if value, ok := esuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldDeletedAt,
		})
	}
	if esuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldDeletedAt,
		})
	}
	if esuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestatement.FieldCreator,
		})
	}
	if value, ok := esuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterprisestatement.FieldLastModifier,
		})
	}
	if esuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterprisestatement.FieldLastModifier,
		})
	}
	if value, ok := esuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterprisestatement.FieldRemark,
		})
	}
	if esuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterprisestatement.FieldRemark,
		})
	}
	if value, ok := esuo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldCost,
		})
	}
	if value, ok := esuo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldCost,
		})
	}
	if value, ok := esuo.mutation.Balance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldBalance,
		})
	}
	if value, ok := esuo.mutation.AddedBalance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterprisestatement.FieldBalance,
		})
	}
	if value, ok := esuo.mutation.SettledAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldSettledAt,
		})
	}
	if esuo.mutation.SettledAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldSettledAt,
		})
	}
	if value, ok := esuo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldDays,
		})
	}
	if value, ok := esuo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldDays,
		})
	}
	if value, ok := esuo.mutation.RiderNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldRiderNumber,
		})
	}
	if value, ok := esuo.mutation.AddedRiderNumber(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: enterprisestatement.FieldRiderNumber,
		})
	}
	if value, ok := esuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldDate,
		})
	}
	if esuo.mutation.DateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldDate,
		})
	}
	if value, ok := esuo.mutation.Start(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldStart,
		})
	}
	if value, ok := esuo.mutation.End(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterprisestatement.FieldEnd,
		})
	}
	if esuo.mutation.EndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterprisestatement.FieldEnd,
		})
	}
	if esuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisestatement.EnterpriseTable,
			Columns: []string{enterprisestatement.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.RemovedBillsIDs(); len(nodes) > 0 && !esuo.mutation.BillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.BillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enterprisestatement.BillsTable,
			Columns: []string{enterprisestatement.BillsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisebill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnterpriseStatement{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisestatement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
