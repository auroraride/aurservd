// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BatteryFlowUpdate is the builder for updating BatteryFlow entities.
type BatteryFlowUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryFlowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryFlowUpdate builder.
func (bfu *BatteryFlowUpdate) Where(ps ...predicate.BatteryFlow) *BatteryFlowUpdate {
	bfu.mutation.Where(ps...)
	return bfu
}

// SetUpdatedAt sets the "updated_at" field.
func (bfu *BatteryFlowUpdate) SetUpdatedAt(t time.Time) *BatteryFlowUpdate {
	bfu.mutation.SetUpdatedAt(t)
	return bfu
}

// SetSubscribeID sets the "subscribe_id" field.
func (bfu *BatteryFlowUpdate) SetSubscribeID(u uint64) *BatteryFlowUpdate {
	bfu.mutation.SetSubscribeID(u)
	return bfu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableSubscribeID(u *uint64) *BatteryFlowUpdate {
	if u != nil {
		bfu.SetSubscribeID(*u)
	}
	return bfu
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (bfu *BatteryFlowUpdate) ClearSubscribeID() *BatteryFlowUpdate {
	bfu.mutation.ClearSubscribeID()
	return bfu
}

// SetBatteryID sets the "battery_id" field.
func (bfu *BatteryFlowUpdate) SetBatteryID(u uint64) *BatteryFlowUpdate {
	bfu.mutation.ResetBatteryID()
	bfu.mutation.SetBatteryID(u)
	return bfu
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableBatteryID(u *uint64) *BatteryFlowUpdate {
	if u != nil {
		bfu.SetBatteryID(*u)
	}
	return bfu
}

// AddBatteryID adds u to the "battery_id" field.
func (bfu *BatteryFlowUpdate) AddBatteryID(u int64) *BatteryFlowUpdate {
	bfu.mutation.AddBatteryID(u)
	return bfu
}

// SetSn sets the "sn" field.
func (bfu *BatteryFlowUpdate) SetSn(s string) *BatteryFlowUpdate {
	bfu.mutation.SetSn(s)
	return bfu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableSn(s *string) *BatteryFlowUpdate {
	if s != nil {
		bfu.SetSn(*s)
	}
	return bfu
}

// SetSoc sets the "soc" field.
func (bfu *BatteryFlowUpdate) SetSoc(f float64) *BatteryFlowUpdate {
	bfu.mutation.ResetSoc()
	bfu.mutation.SetSoc(f)
	return bfu
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableSoc(f *float64) *BatteryFlowUpdate {
	if f != nil {
		bfu.SetSoc(*f)
	}
	return bfu
}

// AddSoc adds f to the "soc" field.
func (bfu *BatteryFlowUpdate) AddSoc(f float64) *BatteryFlowUpdate {
	bfu.mutation.AddSoc(f)
	return bfu
}

// SetRiderID sets the "rider_id" field.
func (bfu *BatteryFlowUpdate) SetRiderID(u uint64) *BatteryFlowUpdate {
	bfu.mutation.SetRiderID(u)
	return bfu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableRiderID(u *uint64) *BatteryFlowUpdate {
	if u != nil {
		bfu.SetRiderID(*u)
	}
	return bfu
}

// ClearRiderID clears the value of the "rider_id" field.
func (bfu *BatteryFlowUpdate) ClearRiderID() *BatteryFlowUpdate {
	bfu.mutation.ClearRiderID()
	return bfu
}

// SetCabinetID sets the "cabinet_id" field.
func (bfu *BatteryFlowUpdate) SetCabinetID(u uint64) *BatteryFlowUpdate {
	bfu.mutation.SetCabinetID(u)
	return bfu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableCabinetID(u *uint64) *BatteryFlowUpdate {
	if u != nil {
		bfu.SetCabinetID(*u)
	}
	return bfu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (bfu *BatteryFlowUpdate) ClearCabinetID() *BatteryFlowUpdate {
	bfu.mutation.ClearCabinetID()
	return bfu
}

// SetSerial sets the "serial" field.
func (bfu *BatteryFlowUpdate) SetSerial(s string) *BatteryFlowUpdate {
	bfu.mutation.SetSerial(s)
	return bfu
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableSerial(s *string) *BatteryFlowUpdate {
	if s != nil {
		bfu.SetSerial(*s)
	}
	return bfu
}

// ClearSerial clears the value of the "serial" field.
func (bfu *BatteryFlowUpdate) ClearSerial() *BatteryFlowUpdate {
	bfu.mutation.ClearSerial()
	return bfu
}

// SetOrdinal sets the "ordinal" field.
func (bfu *BatteryFlowUpdate) SetOrdinal(i int) *BatteryFlowUpdate {
	bfu.mutation.ResetOrdinal()
	bfu.mutation.SetOrdinal(i)
	return bfu
}

// SetNillableOrdinal sets the "ordinal" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableOrdinal(i *int) *BatteryFlowUpdate {
	if i != nil {
		bfu.SetOrdinal(*i)
	}
	return bfu
}

// AddOrdinal adds i to the "ordinal" field.
func (bfu *BatteryFlowUpdate) AddOrdinal(i int) *BatteryFlowUpdate {
	bfu.mutation.AddOrdinal(i)
	return bfu
}

// ClearOrdinal clears the value of the "ordinal" field.
func (bfu *BatteryFlowUpdate) ClearOrdinal() *BatteryFlowUpdate {
	bfu.mutation.ClearOrdinal()
	return bfu
}

// SetGeom sets the "geom" field.
func (bfu *BatteryFlowUpdate) SetGeom(a *adapter.Geometry) *BatteryFlowUpdate {
	bfu.mutation.SetGeom(a)
	return bfu
}

// ClearGeom clears the value of the "geom" field.
func (bfu *BatteryFlowUpdate) ClearGeom() *BatteryFlowUpdate {
	bfu.mutation.ClearGeom()
	return bfu
}

// SetRemark sets the "remark" field.
func (bfu *BatteryFlowUpdate) SetRemark(s string) *BatteryFlowUpdate {
	bfu.mutation.SetRemark(s)
	return bfu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bfu *BatteryFlowUpdate) SetNillableRemark(s *string) *BatteryFlowUpdate {
	if s != nil {
		bfu.SetRemark(*s)
	}
	return bfu
}

// ClearRemark clears the value of the "remark" field.
func (bfu *BatteryFlowUpdate) ClearRemark() *BatteryFlowUpdate {
	bfu.mutation.ClearRemark()
	return bfu
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bfu *BatteryFlowUpdate) SetSubscribe(s *Subscribe) *BatteryFlowUpdate {
	return bfu.SetSubscribeID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bfu *BatteryFlowUpdate) SetCabinet(c *Cabinet) *BatteryFlowUpdate {
	return bfu.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (bfu *BatteryFlowUpdate) SetRider(r *Rider) *BatteryFlowUpdate {
	return bfu.SetRiderID(r.ID)
}

// Mutation returns the BatteryFlowMutation object of the builder.
func (bfu *BatteryFlowUpdate) Mutation() *BatteryFlowMutation {
	return bfu.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (bfu *BatteryFlowUpdate) ClearSubscribe() *BatteryFlowUpdate {
	bfu.mutation.ClearSubscribe()
	return bfu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (bfu *BatteryFlowUpdate) ClearCabinet() *BatteryFlowUpdate {
	bfu.mutation.ClearCabinet()
	return bfu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (bfu *BatteryFlowUpdate) ClearRider() *BatteryFlowUpdate {
	bfu.mutation.ClearRider()
	return bfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bfu *BatteryFlowUpdate) Save(ctx context.Context) (int, error) {
	bfu.defaults()
	return withHooks(ctx, bfu.sqlSave, bfu.mutation, bfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfu *BatteryFlowUpdate) SaveX(ctx context.Context) int {
	affected, err := bfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bfu *BatteryFlowUpdate) Exec(ctx context.Context) error {
	_, err := bfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfu *BatteryFlowUpdate) ExecX(ctx context.Context) {
	if err := bfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfu *BatteryFlowUpdate) defaults() {
	if _, ok := bfu.mutation.UpdatedAt(); !ok {
		v := batteryflow.UpdateDefaultUpdatedAt()
		bfu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bfu *BatteryFlowUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryFlowUpdate {
	bfu.modifiers = append(bfu.modifiers, modifiers...)
	return bfu
}

func (bfu *BatteryFlowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(batteryflow.Table, batteryflow.Columns, sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64))
	if ps := bfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfu.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bfu.mutation.BatteryID(); ok {
		_spec.SetField(batteryflow.FieldBatteryID, field.TypeUint64, value)
	}
	if value, ok := bfu.mutation.AddedBatteryID(); ok {
		_spec.AddField(batteryflow.FieldBatteryID, field.TypeUint64, value)
	}
	if value, ok := bfu.mutation.Sn(); ok {
		_spec.SetField(batteryflow.FieldSn, field.TypeString, value)
	}
	if value, ok := bfu.mutation.Soc(); ok {
		_spec.SetField(batteryflow.FieldSoc, field.TypeFloat64, value)
	}
	if value, ok := bfu.mutation.AddedSoc(); ok {
		_spec.AddField(batteryflow.FieldSoc, field.TypeFloat64, value)
	}
	if value, ok := bfu.mutation.Serial(); ok {
		_spec.SetField(batteryflow.FieldSerial, field.TypeString, value)
	}
	if bfu.mutation.SerialCleared() {
		_spec.ClearField(batteryflow.FieldSerial, field.TypeString)
	}
	if value, ok := bfu.mutation.Ordinal(); ok {
		_spec.SetField(batteryflow.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := bfu.mutation.AddedOrdinal(); ok {
		_spec.AddField(batteryflow.FieldOrdinal, field.TypeInt, value)
	}
	if bfu.mutation.OrdinalCleared() {
		_spec.ClearField(batteryflow.FieldOrdinal, field.TypeInt)
	}
	if value, ok := bfu.mutation.Geom(); ok {
		_spec.SetField(batteryflow.FieldGeom, field.TypeOther, value)
	}
	if bfu.mutation.GeomCleared() {
		_spec.ClearField(batteryflow.FieldGeom, field.TypeOther)
	}
	if value, ok := bfu.mutation.Remark(); ok {
		_spec.SetField(batteryflow.FieldRemark, field.TypeString, value)
	}
	if bfu.mutation.RemarkCleared() {
		_spec.ClearField(batteryflow.FieldRemark, field.TypeString)
	}
	if bfu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batteryflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bfu.mutation.done = true
	return n, nil
}

// BatteryFlowUpdateOne is the builder for updating a single BatteryFlow entity.
type BatteryFlowUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryFlowMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bfuo *BatteryFlowUpdateOne) SetUpdatedAt(t time.Time) *BatteryFlowUpdateOne {
	bfuo.mutation.SetUpdatedAt(t)
	return bfuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (bfuo *BatteryFlowUpdateOne) SetSubscribeID(u uint64) *BatteryFlowUpdateOne {
	bfuo.mutation.SetSubscribeID(u)
	return bfuo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableSubscribeID(u *uint64) *BatteryFlowUpdateOne {
	if u != nil {
		bfuo.SetSubscribeID(*u)
	}
	return bfuo
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (bfuo *BatteryFlowUpdateOne) ClearSubscribeID() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearSubscribeID()
	return bfuo
}

// SetBatteryID sets the "battery_id" field.
func (bfuo *BatteryFlowUpdateOne) SetBatteryID(u uint64) *BatteryFlowUpdateOne {
	bfuo.mutation.ResetBatteryID()
	bfuo.mutation.SetBatteryID(u)
	return bfuo
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableBatteryID(u *uint64) *BatteryFlowUpdateOne {
	if u != nil {
		bfuo.SetBatteryID(*u)
	}
	return bfuo
}

// AddBatteryID adds u to the "battery_id" field.
func (bfuo *BatteryFlowUpdateOne) AddBatteryID(u int64) *BatteryFlowUpdateOne {
	bfuo.mutation.AddBatteryID(u)
	return bfuo
}

// SetSn sets the "sn" field.
func (bfuo *BatteryFlowUpdateOne) SetSn(s string) *BatteryFlowUpdateOne {
	bfuo.mutation.SetSn(s)
	return bfuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableSn(s *string) *BatteryFlowUpdateOne {
	if s != nil {
		bfuo.SetSn(*s)
	}
	return bfuo
}

// SetSoc sets the "soc" field.
func (bfuo *BatteryFlowUpdateOne) SetSoc(f float64) *BatteryFlowUpdateOne {
	bfuo.mutation.ResetSoc()
	bfuo.mutation.SetSoc(f)
	return bfuo
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableSoc(f *float64) *BatteryFlowUpdateOne {
	if f != nil {
		bfuo.SetSoc(*f)
	}
	return bfuo
}

// AddSoc adds f to the "soc" field.
func (bfuo *BatteryFlowUpdateOne) AddSoc(f float64) *BatteryFlowUpdateOne {
	bfuo.mutation.AddSoc(f)
	return bfuo
}

// SetRiderID sets the "rider_id" field.
func (bfuo *BatteryFlowUpdateOne) SetRiderID(u uint64) *BatteryFlowUpdateOne {
	bfuo.mutation.SetRiderID(u)
	return bfuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableRiderID(u *uint64) *BatteryFlowUpdateOne {
	if u != nil {
		bfuo.SetRiderID(*u)
	}
	return bfuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (bfuo *BatteryFlowUpdateOne) ClearRiderID() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearRiderID()
	return bfuo
}

// SetCabinetID sets the "cabinet_id" field.
func (bfuo *BatteryFlowUpdateOne) SetCabinetID(u uint64) *BatteryFlowUpdateOne {
	bfuo.mutation.SetCabinetID(u)
	return bfuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableCabinetID(u *uint64) *BatteryFlowUpdateOne {
	if u != nil {
		bfuo.SetCabinetID(*u)
	}
	return bfuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (bfuo *BatteryFlowUpdateOne) ClearCabinetID() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearCabinetID()
	return bfuo
}

// SetSerial sets the "serial" field.
func (bfuo *BatteryFlowUpdateOne) SetSerial(s string) *BatteryFlowUpdateOne {
	bfuo.mutation.SetSerial(s)
	return bfuo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableSerial(s *string) *BatteryFlowUpdateOne {
	if s != nil {
		bfuo.SetSerial(*s)
	}
	return bfuo
}

// ClearSerial clears the value of the "serial" field.
func (bfuo *BatteryFlowUpdateOne) ClearSerial() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearSerial()
	return bfuo
}

// SetOrdinal sets the "ordinal" field.
func (bfuo *BatteryFlowUpdateOne) SetOrdinal(i int) *BatteryFlowUpdateOne {
	bfuo.mutation.ResetOrdinal()
	bfuo.mutation.SetOrdinal(i)
	return bfuo
}

// SetNillableOrdinal sets the "ordinal" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableOrdinal(i *int) *BatteryFlowUpdateOne {
	if i != nil {
		bfuo.SetOrdinal(*i)
	}
	return bfuo
}

// AddOrdinal adds i to the "ordinal" field.
func (bfuo *BatteryFlowUpdateOne) AddOrdinal(i int) *BatteryFlowUpdateOne {
	bfuo.mutation.AddOrdinal(i)
	return bfuo
}

// ClearOrdinal clears the value of the "ordinal" field.
func (bfuo *BatteryFlowUpdateOne) ClearOrdinal() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearOrdinal()
	return bfuo
}

// SetGeom sets the "geom" field.
func (bfuo *BatteryFlowUpdateOne) SetGeom(a *adapter.Geometry) *BatteryFlowUpdateOne {
	bfuo.mutation.SetGeom(a)
	return bfuo
}

// ClearGeom clears the value of the "geom" field.
func (bfuo *BatteryFlowUpdateOne) ClearGeom() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearGeom()
	return bfuo
}

// SetRemark sets the "remark" field.
func (bfuo *BatteryFlowUpdateOne) SetRemark(s string) *BatteryFlowUpdateOne {
	bfuo.mutation.SetRemark(s)
	return bfuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bfuo *BatteryFlowUpdateOne) SetNillableRemark(s *string) *BatteryFlowUpdateOne {
	if s != nil {
		bfuo.SetRemark(*s)
	}
	return bfuo
}

// ClearRemark clears the value of the "remark" field.
func (bfuo *BatteryFlowUpdateOne) ClearRemark() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearRemark()
	return bfuo
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bfuo *BatteryFlowUpdateOne) SetSubscribe(s *Subscribe) *BatteryFlowUpdateOne {
	return bfuo.SetSubscribeID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bfuo *BatteryFlowUpdateOne) SetCabinet(c *Cabinet) *BatteryFlowUpdateOne {
	return bfuo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (bfuo *BatteryFlowUpdateOne) SetRider(r *Rider) *BatteryFlowUpdateOne {
	return bfuo.SetRiderID(r.ID)
}

// Mutation returns the BatteryFlowMutation object of the builder.
func (bfuo *BatteryFlowUpdateOne) Mutation() *BatteryFlowMutation {
	return bfuo.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (bfuo *BatteryFlowUpdateOne) ClearSubscribe() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearSubscribe()
	return bfuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (bfuo *BatteryFlowUpdateOne) ClearCabinet() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearCabinet()
	return bfuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (bfuo *BatteryFlowUpdateOne) ClearRider() *BatteryFlowUpdateOne {
	bfuo.mutation.ClearRider()
	return bfuo
}

// Where appends a list predicates to the BatteryFlowUpdate builder.
func (bfuo *BatteryFlowUpdateOne) Where(ps ...predicate.BatteryFlow) *BatteryFlowUpdateOne {
	bfuo.mutation.Where(ps...)
	return bfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bfuo *BatteryFlowUpdateOne) Select(field string, fields ...string) *BatteryFlowUpdateOne {
	bfuo.fields = append([]string{field}, fields...)
	return bfuo
}

// Save executes the query and returns the updated BatteryFlow entity.
func (bfuo *BatteryFlowUpdateOne) Save(ctx context.Context) (*BatteryFlow, error) {
	bfuo.defaults()
	return withHooks(ctx, bfuo.sqlSave, bfuo.mutation, bfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bfuo *BatteryFlowUpdateOne) SaveX(ctx context.Context) *BatteryFlow {
	node, err := bfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bfuo *BatteryFlowUpdateOne) Exec(ctx context.Context) error {
	_, err := bfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfuo *BatteryFlowUpdateOne) ExecX(ctx context.Context) {
	if err := bfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfuo *BatteryFlowUpdateOne) defaults() {
	if _, ok := bfuo.mutation.UpdatedAt(); !ok {
		v := batteryflow.UpdateDefaultUpdatedAt()
		bfuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bfuo *BatteryFlowUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryFlowUpdateOne {
	bfuo.modifiers = append(bfuo.modifiers, modifiers...)
	return bfuo
}

func (bfuo *BatteryFlowUpdateOne) sqlSave(ctx context.Context) (_node *BatteryFlow, err error) {
	_spec := sqlgraph.NewUpdateSpec(batteryflow.Table, batteryflow.Columns, sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64))
	id, ok := bfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryFlow.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batteryflow.FieldID)
		for _, f := range fields {
			if !batteryflow.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batteryflow.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryflow.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bfuo.mutation.BatteryID(); ok {
		_spec.SetField(batteryflow.FieldBatteryID, field.TypeUint64, value)
	}
	if value, ok := bfuo.mutation.AddedBatteryID(); ok {
		_spec.AddField(batteryflow.FieldBatteryID, field.TypeUint64, value)
	}
	if value, ok := bfuo.mutation.Sn(); ok {
		_spec.SetField(batteryflow.FieldSn, field.TypeString, value)
	}
	if value, ok := bfuo.mutation.Soc(); ok {
		_spec.SetField(batteryflow.FieldSoc, field.TypeFloat64, value)
	}
	if value, ok := bfuo.mutation.AddedSoc(); ok {
		_spec.AddField(batteryflow.FieldSoc, field.TypeFloat64, value)
	}
	if value, ok := bfuo.mutation.Serial(); ok {
		_spec.SetField(batteryflow.FieldSerial, field.TypeString, value)
	}
	if bfuo.mutation.SerialCleared() {
		_spec.ClearField(batteryflow.FieldSerial, field.TypeString)
	}
	if value, ok := bfuo.mutation.Ordinal(); ok {
		_spec.SetField(batteryflow.FieldOrdinal, field.TypeInt, value)
	}
	if value, ok := bfuo.mutation.AddedOrdinal(); ok {
		_spec.AddField(batteryflow.FieldOrdinal, field.TypeInt, value)
	}
	if bfuo.mutation.OrdinalCleared() {
		_spec.ClearField(batteryflow.FieldOrdinal, field.TypeInt)
	}
	if value, ok := bfuo.mutation.Geom(); ok {
		_spec.SetField(batteryflow.FieldGeom, field.TypeOther, value)
	}
	if bfuo.mutation.GeomCleared() {
		_spec.ClearField(batteryflow.FieldGeom, field.TypeOther)
	}
	if value, ok := bfuo.mutation.Remark(); ok {
		_spec.SetField(batteryflow.FieldRemark, field.TypeString, value)
	}
	if bfuo.mutation.RemarkCleared() {
		_spec.ClearField(batteryflow.FieldRemark, field.TypeString)
	}
	if bfuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bfuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bfuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bfuo.modifiers...)
	_node = &BatteryFlow{config: bfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batteryflow.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bfuo.mutation.done = true
	return _node, nil
}
