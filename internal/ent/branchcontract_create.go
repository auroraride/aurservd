// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
)

// BranchContractCreate is the builder for creating a BranchContract entity.
type BranchContractCreate struct {
	config
	mutation *BranchContractMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bcc *BranchContractCreate) SetCreatedAt(t time.Time) *BranchContractCreate {
	bcc.mutation.SetCreatedAt(t)
	return bcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bcc *BranchContractCreate) SetNillableCreatedAt(t *time.Time) *BranchContractCreate {
	if t != nil {
		bcc.SetCreatedAt(*t)
	}
	return bcc
}

// SetUpdatedAt sets the "updated_at" field.
func (bcc *BranchContractCreate) SetUpdatedAt(t time.Time) *BranchContractCreate {
	bcc.mutation.SetUpdatedAt(t)
	return bcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bcc *BranchContractCreate) SetNillableUpdatedAt(t *time.Time) *BranchContractCreate {
	if t != nil {
		bcc.SetUpdatedAt(*t)
	}
	return bcc
}

// SetDeletedAt sets the "deleted_at" field.
func (bcc *BranchContractCreate) SetDeletedAt(t time.Time) *BranchContractCreate {
	bcc.mutation.SetDeletedAt(t)
	return bcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bcc *BranchContractCreate) SetNillableDeletedAt(t *time.Time) *BranchContractCreate {
	if t != nil {
		bcc.SetDeletedAt(*t)
	}
	return bcc
}

// SetCreator sets the "creator" field.
func (bcc *BranchContractCreate) SetCreator(m *model.Modifier) *BranchContractCreate {
	bcc.mutation.SetCreator(m)
	return bcc
}

// SetLastModifier sets the "last_modifier" field.
func (bcc *BranchContractCreate) SetLastModifier(m *model.Modifier) *BranchContractCreate {
	bcc.mutation.SetLastModifier(m)
	return bcc
}

// SetRemark sets the "remark" field.
func (bcc *BranchContractCreate) SetRemark(s string) *BranchContractCreate {
	bcc.mutation.SetRemark(s)
	return bcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bcc *BranchContractCreate) SetNillableRemark(s *string) *BranchContractCreate {
	if s != nil {
		bcc.SetRemark(*s)
	}
	return bcc
}

// SetBranchID sets the "branch_id" field.
func (bcc *BranchContractCreate) SetBranchID(u uint64) *BranchContractCreate {
	bcc.mutation.SetBranchID(u)
	return bcc
}

// SetLandlordName sets the "landlord_name" field.
func (bcc *BranchContractCreate) SetLandlordName(s string) *BranchContractCreate {
	bcc.mutation.SetLandlordName(s)
	return bcc
}

// SetIDCardNumber sets the "id_card_number" field.
func (bcc *BranchContractCreate) SetIDCardNumber(s string) *BranchContractCreate {
	bcc.mutation.SetIDCardNumber(s)
	return bcc
}

// SetPhone sets the "phone" field.
func (bcc *BranchContractCreate) SetPhone(s string) *BranchContractCreate {
	bcc.mutation.SetPhone(s)
	return bcc
}

// SetBankNumber sets the "bank_number" field.
func (bcc *BranchContractCreate) SetBankNumber(s string) *BranchContractCreate {
	bcc.mutation.SetBankNumber(s)
	return bcc
}

// SetPledge sets the "pledge" field.
func (bcc *BranchContractCreate) SetPledge(f float64) *BranchContractCreate {
	bcc.mutation.SetPledge(f)
	return bcc
}

// SetRent sets the "rent" field.
func (bcc *BranchContractCreate) SetRent(f float64) *BranchContractCreate {
	bcc.mutation.SetRent(f)
	return bcc
}

// SetLease sets the "lease" field.
func (bcc *BranchContractCreate) SetLease(u uint) *BranchContractCreate {
	bcc.mutation.SetLease(u)
	return bcc
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (bcc *BranchContractCreate) SetElectricityPledge(f float64) *BranchContractCreate {
	bcc.mutation.SetElectricityPledge(f)
	return bcc
}

// SetElectricity sets the "electricity" field.
func (bcc *BranchContractCreate) SetElectricity(s string) *BranchContractCreate {
	bcc.mutation.SetElectricity(s)
	return bcc
}

// SetArea sets the "area" field.
func (bcc *BranchContractCreate) SetArea(f float64) *BranchContractCreate {
	bcc.mutation.SetArea(f)
	return bcc
}

// SetStartTime sets the "start_time" field.
func (bcc *BranchContractCreate) SetStartTime(t time.Time) *BranchContractCreate {
	bcc.mutation.SetStartTime(t)
	return bcc
}

// SetEndTime sets the "end_time" field.
func (bcc *BranchContractCreate) SetEndTime(t time.Time) *BranchContractCreate {
	bcc.mutation.SetEndTime(t)
	return bcc
}

// SetFile sets the "file" field.
func (bcc *BranchContractCreate) SetFile(s string) *BranchContractCreate {
	bcc.mutation.SetFile(s)
	return bcc
}

// SetSheets sets the "sheets" field.
func (bcc *BranchContractCreate) SetSheets(s []string) *BranchContractCreate {
	bcc.mutation.SetSheets(s)
	return bcc
}

// SetBranch sets the "branch" edge to the Branch entity.
func (bcc *BranchContractCreate) SetBranch(b *Branch) *BranchContractCreate {
	return bcc.SetBranchID(b.ID)
}

// Mutation returns the BranchContractMutation object of the builder.
func (bcc *BranchContractCreate) Mutation() *BranchContractMutation {
	return bcc.mutation
}

// Save creates the BranchContract in the database.
func (bcc *BranchContractCreate) Save(ctx context.Context) (*BranchContract, error) {
	if err := bcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bcc.sqlSave, bcc.mutation, bcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bcc *BranchContractCreate) SaveX(ctx context.Context) *BranchContract {
	v, err := bcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcc *BranchContractCreate) Exec(ctx context.Context) error {
	_, err := bcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcc *BranchContractCreate) ExecX(ctx context.Context) {
	if err := bcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bcc *BranchContractCreate) defaults() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		if branchcontract.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized branchcontract.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := branchcontract.DefaultCreatedAt()
		bcc.mutation.SetCreatedAt(v)
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		if branchcontract.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized branchcontract.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := branchcontract.DefaultUpdatedAt()
		bcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bcc *BranchContractCreate) check() error {
	if _, ok := bcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BranchContract.created_at"`)}
	}
	if _, ok := bcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BranchContract.updated_at"`)}
	}
	if _, ok := bcc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch_id", err: errors.New(`ent: missing required field "BranchContract.branch_id"`)}
	}
	if _, ok := bcc.mutation.LandlordName(); !ok {
		return &ValidationError{Name: "landlord_name", err: errors.New(`ent: missing required field "BranchContract.landlord_name"`)}
	}
	if _, ok := bcc.mutation.IDCardNumber(); !ok {
		return &ValidationError{Name: "id_card_number", err: errors.New(`ent: missing required field "BranchContract.id_card_number"`)}
	}
	if _, ok := bcc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "BranchContract.phone"`)}
	}
	if _, ok := bcc.mutation.BankNumber(); !ok {
		return &ValidationError{Name: "bank_number", err: errors.New(`ent: missing required field "BranchContract.bank_number"`)}
	}
	if _, ok := bcc.mutation.Pledge(); !ok {
		return &ValidationError{Name: "pledge", err: errors.New(`ent: missing required field "BranchContract.pledge"`)}
	}
	if _, ok := bcc.mutation.Rent(); !ok {
		return &ValidationError{Name: "rent", err: errors.New(`ent: missing required field "BranchContract.rent"`)}
	}
	if _, ok := bcc.mutation.Lease(); !ok {
		return &ValidationError{Name: "lease", err: errors.New(`ent: missing required field "BranchContract.lease"`)}
	}
	if _, ok := bcc.mutation.ElectricityPledge(); !ok {
		return &ValidationError{Name: "electricity_pledge", err: errors.New(`ent: missing required field "BranchContract.electricity_pledge"`)}
	}
	if _, ok := bcc.mutation.Electricity(); !ok {
		return &ValidationError{Name: "electricity", err: errors.New(`ent: missing required field "BranchContract.electricity"`)}
	}
	if _, ok := bcc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "BranchContract.area"`)}
	}
	if _, ok := bcc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "BranchContract.start_time"`)}
	}
	if _, ok := bcc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "BranchContract.end_time"`)}
	}
	if _, ok := bcc.mutation.File(); !ok {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required field "BranchContract.file"`)}
	}
	if _, ok := bcc.mutation.Sheets(); !ok {
		return &ValidationError{Name: "sheets", err: errors.New(`ent: missing required field "BranchContract.sheets"`)}
	}
	if _, ok := bcc.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch", err: errors.New(`ent: missing required edge "BranchContract.branch"`)}
	}
	return nil
}

func (bcc *BranchContractCreate) sqlSave(ctx context.Context) (*BranchContract, error) {
	if err := bcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bcc.mutation.id = &_node.ID
	bcc.mutation.done = true
	return _node, nil
}

func (bcc *BranchContractCreate) createSpec() (*BranchContract, *sqlgraph.CreateSpec) {
	var (
		_node = &BranchContract{config: bcc.config}
		_spec = sqlgraph.NewCreateSpec(branchcontract.Table, sqlgraph.NewFieldSpec(branchcontract.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bcc.conflict
	if value, ok := bcc.mutation.CreatedAt(); ok {
		_spec.SetField(branchcontract.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bcc.mutation.UpdatedAt(); ok {
		_spec.SetField(branchcontract.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bcc.mutation.DeletedAt(); ok {
		_spec.SetField(branchcontract.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bcc.mutation.Creator(); ok {
		_spec.SetField(branchcontract.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := bcc.mutation.LastModifier(); ok {
		_spec.SetField(branchcontract.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := bcc.mutation.Remark(); ok {
		_spec.SetField(branchcontract.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := bcc.mutation.LandlordName(); ok {
		_spec.SetField(branchcontract.FieldLandlordName, field.TypeString, value)
		_node.LandlordName = value
	}
	if value, ok := bcc.mutation.IDCardNumber(); ok {
		_spec.SetField(branchcontract.FieldIDCardNumber, field.TypeString, value)
		_node.IDCardNumber = value
	}
	if value, ok := bcc.mutation.Phone(); ok {
		_spec.SetField(branchcontract.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := bcc.mutation.BankNumber(); ok {
		_spec.SetField(branchcontract.FieldBankNumber, field.TypeString, value)
		_node.BankNumber = value
	}
	if value, ok := bcc.mutation.Pledge(); ok {
		_spec.SetField(branchcontract.FieldPledge, field.TypeFloat64, value)
		_node.Pledge = value
	}
	if value, ok := bcc.mutation.Rent(); ok {
		_spec.SetField(branchcontract.FieldRent, field.TypeFloat64, value)
		_node.Rent = value
	}
	if value, ok := bcc.mutation.Lease(); ok {
		_spec.SetField(branchcontract.FieldLease, field.TypeUint, value)
		_node.Lease = value
	}
	if value, ok := bcc.mutation.ElectricityPledge(); ok {
		_spec.SetField(branchcontract.FieldElectricityPledge, field.TypeFloat64, value)
		_node.ElectricityPledge = value
	}
	if value, ok := bcc.mutation.Electricity(); ok {
		_spec.SetField(branchcontract.FieldElectricity, field.TypeString, value)
		_node.Electricity = value
	}
	if value, ok := bcc.mutation.Area(); ok {
		_spec.SetField(branchcontract.FieldArea, field.TypeFloat64, value)
		_node.Area = value
	}
	if value, ok := bcc.mutation.StartTime(); ok {
		_spec.SetField(branchcontract.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := bcc.mutation.EndTime(); ok {
		_spec.SetField(branchcontract.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := bcc.mutation.File(); ok {
		_spec.SetField(branchcontract.FieldFile, field.TypeString, value)
		_node.File = value
	}
	if value, ok := bcc.mutation.Sheets(); ok {
		_spec.SetField(branchcontract.FieldSheets, field.TypeJSON, value)
		_node.Sheets = value
	}
	if nodes := bcc.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branchcontract.BranchTable,
			Columns: []string{branchcontract.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BranchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BranchContract.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcc *BranchContractCreate) OnConflict(opts ...sql.ConflictOption) *BranchContractUpsertOne {
	bcc.conflict = opts
	return &BranchContractUpsertOne{
		create: bcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcc *BranchContractCreate) OnConflictColumns(columns ...string) *BranchContractUpsertOne {
	bcc.conflict = append(bcc.conflict, sql.ConflictColumns(columns...))
	return &BranchContractUpsertOne{
		create: bcc,
	}
}

type (
	// BranchContractUpsertOne is the builder for "upsert"-ing
	//  one BranchContract node.
	BranchContractUpsertOne struct {
		create *BranchContractCreate
	}

	// BranchContractUpsert is the "OnConflict" setter.
	BranchContractUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchContractUpsert) SetUpdatedAt(v time.Time) *BranchContractUpsert {
	u.Set(branchcontract.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateUpdatedAt() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BranchContractUpsert) SetDeletedAt(v time.Time) *BranchContractUpsert {
	u.Set(branchcontract.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateDeletedAt() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BranchContractUpsert) ClearDeletedAt() *BranchContractUpsert {
	u.SetNull(branchcontract.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BranchContractUpsert) SetLastModifier(v *model.Modifier) *BranchContractUpsert {
	u.Set(branchcontract.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateLastModifier() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BranchContractUpsert) ClearLastModifier() *BranchContractUpsert {
	u.SetNull(branchcontract.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BranchContractUpsert) SetRemark(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateRemark() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BranchContractUpsert) ClearRemark() *BranchContractUpsert {
	u.SetNull(branchcontract.FieldRemark)
	return u
}

// SetBranchID sets the "branch_id" field.
func (u *BranchContractUpsert) SetBranchID(v uint64) *BranchContractUpsert {
	u.Set(branchcontract.FieldBranchID, v)
	return u
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateBranchID() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldBranchID)
	return u
}

// SetLandlordName sets the "landlord_name" field.
func (u *BranchContractUpsert) SetLandlordName(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldLandlordName, v)
	return u
}

// UpdateLandlordName sets the "landlord_name" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateLandlordName() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldLandlordName)
	return u
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *BranchContractUpsert) SetIDCardNumber(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldIDCardNumber, v)
	return u
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateIDCardNumber() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldIDCardNumber)
	return u
}

// SetPhone sets the "phone" field.
func (u *BranchContractUpsert) SetPhone(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdatePhone() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldPhone)
	return u
}

// SetBankNumber sets the "bank_number" field.
func (u *BranchContractUpsert) SetBankNumber(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldBankNumber, v)
	return u
}

// UpdateBankNumber sets the "bank_number" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateBankNumber() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldBankNumber)
	return u
}

// SetPledge sets the "pledge" field.
func (u *BranchContractUpsert) SetPledge(v float64) *BranchContractUpsert {
	u.Set(branchcontract.FieldPledge, v)
	return u
}

// UpdatePledge sets the "pledge" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdatePledge() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldPledge)
	return u
}

// AddPledge adds v to the "pledge" field.
func (u *BranchContractUpsert) AddPledge(v float64) *BranchContractUpsert {
	u.Add(branchcontract.FieldPledge, v)
	return u
}

// SetRent sets the "rent" field.
func (u *BranchContractUpsert) SetRent(v float64) *BranchContractUpsert {
	u.Set(branchcontract.FieldRent, v)
	return u
}

// UpdateRent sets the "rent" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateRent() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldRent)
	return u
}

// AddRent adds v to the "rent" field.
func (u *BranchContractUpsert) AddRent(v float64) *BranchContractUpsert {
	u.Add(branchcontract.FieldRent, v)
	return u
}

// SetLease sets the "lease" field.
func (u *BranchContractUpsert) SetLease(v uint) *BranchContractUpsert {
	u.Set(branchcontract.FieldLease, v)
	return u
}

// UpdateLease sets the "lease" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateLease() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldLease)
	return u
}

// AddLease adds v to the "lease" field.
func (u *BranchContractUpsert) AddLease(v uint) *BranchContractUpsert {
	u.Add(branchcontract.FieldLease, v)
	return u
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (u *BranchContractUpsert) SetElectricityPledge(v float64) *BranchContractUpsert {
	u.Set(branchcontract.FieldElectricityPledge, v)
	return u
}

// UpdateElectricityPledge sets the "electricity_pledge" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateElectricityPledge() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldElectricityPledge)
	return u
}

// AddElectricityPledge adds v to the "electricity_pledge" field.
func (u *BranchContractUpsert) AddElectricityPledge(v float64) *BranchContractUpsert {
	u.Add(branchcontract.FieldElectricityPledge, v)
	return u
}

// SetElectricity sets the "electricity" field.
func (u *BranchContractUpsert) SetElectricity(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldElectricity, v)
	return u
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateElectricity() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldElectricity)
	return u
}

// SetArea sets the "area" field.
func (u *BranchContractUpsert) SetArea(v float64) *BranchContractUpsert {
	u.Set(branchcontract.FieldArea, v)
	return u
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateArea() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldArea)
	return u
}

// AddArea adds v to the "area" field.
func (u *BranchContractUpsert) AddArea(v float64) *BranchContractUpsert {
	u.Add(branchcontract.FieldArea, v)
	return u
}

// SetStartTime sets the "start_time" field.
func (u *BranchContractUpsert) SetStartTime(v time.Time) *BranchContractUpsert {
	u.Set(branchcontract.FieldStartTime, v)
	return u
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateStartTime() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldStartTime)
	return u
}

// SetEndTime sets the "end_time" field.
func (u *BranchContractUpsert) SetEndTime(v time.Time) *BranchContractUpsert {
	u.Set(branchcontract.FieldEndTime, v)
	return u
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateEndTime() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldEndTime)
	return u
}

// SetFile sets the "file" field.
func (u *BranchContractUpsert) SetFile(v string) *BranchContractUpsert {
	u.Set(branchcontract.FieldFile, v)
	return u
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateFile() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldFile)
	return u
}

// SetSheets sets the "sheets" field.
func (u *BranchContractUpsert) SetSheets(v []string) *BranchContractUpsert {
	u.Set(branchcontract.FieldSheets, v)
	return u
}

// UpdateSheets sets the "sheets" field to the value that was provided on create.
func (u *BranchContractUpsert) UpdateSheets() *BranchContractUpsert {
	u.SetExcluded(branchcontract.FieldSheets)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BranchContractUpsertOne) UpdateNewValues() *BranchContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(branchcontract.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(branchcontract.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BranchContractUpsertOne) Ignore() *BranchContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchContractUpsertOne) DoNothing() *BranchContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchContractCreate.OnConflict
// documentation for more info.
func (u *BranchContractUpsertOne) Update(set func(*BranchContractUpsert)) *BranchContractUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchContractUpsertOne) SetUpdatedAt(v time.Time) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateUpdatedAt() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BranchContractUpsertOne) SetDeletedAt(v time.Time) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateDeletedAt() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BranchContractUpsertOne) ClearDeletedAt() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BranchContractUpsertOne) SetLastModifier(v *model.Modifier) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateLastModifier() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BranchContractUpsertOne) ClearLastModifier() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BranchContractUpsertOne) SetRemark(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateRemark() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BranchContractUpsertOne) ClearRemark() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearRemark()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *BranchContractUpsertOne) SetBranchID(v uint64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateBranchID() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateBranchID()
	})
}

// SetLandlordName sets the "landlord_name" field.
func (u *BranchContractUpsertOne) SetLandlordName(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLandlordName(v)
	})
}

// UpdateLandlordName sets the "landlord_name" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateLandlordName() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLandlordName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *BranchContractUpsertOne) SetIDCardNumber(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateIDCardNumber() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateIDCardNumber()
	})
}

// SetPhone sets the "phone" field.
func (u *BranchContractUpsertOne) SetPhone(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdatePhone() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdatePhone()
	})
}

// SetBankNumber sets the "bank_number" field.
func (u *BranchContractUpsertOne) SetBankNumber(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetBankNumber(v)
	})
}

// UpdateBankNumber sets the "bank_number" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateBankNumber() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateBankNumber()
	})
}

// SetPledge sets the "pledge" field.
func (u *BranchContractUpsertOne) SetPledge(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetPledge(v)
	})
}

// AddPledge adds v to the "pledge" field.
func (u *BranchContractUpsertOne) AddPledge(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddPledge(v)
	})
}

// UpdatePledge sets the "pledge" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdatePledge() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdatePledge()
	})
}

// SetRent sets the "rent" field.
func (u *BranchContractUpsertOne) SetRent(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetRent(v)
	})
}

// AddRent adds v to the "rent" field.
func (u *BranchContractUpsertOne) AddRent(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddRent(v)
	})
}

// UpdateRent sets the "rent" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateRent() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateRent()
	})
}

// SetLease sets the "lease" field.
func (u *BranchContractUpsertOne) SetLease(v uint) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLease(v)
	})
}

// AddLease adds v to the "lease" field.
func (u *BranchContractUpsertOne) AddLease(v uint) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddLease(v)
	})
}

// UpdateLease sets the "lease" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateLease() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLease()
	})
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (u *BranchContractUpsertOne) SetElectricityPledge(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetElectricityPledge(v)
	})
}

// AddElectricityPledge adds v to the "electricity_pledge" field.
func (u *BranchContractUpsertOne) AddElectricityPledge(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddElectricityPledge(v)
	})
}

// UpdateElectricityPledge sets the "electricity_pledge" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateElectricityPledge() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateElectricityPledge()
	})
}

// SetElectricity sets the "electricity" field.
func (u *BranchContractUpsertOne) SetElectricity(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetElectricity(v)
	})
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateElectricity() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateElectricity()
	})
}

// SetArea sets the "area" field.
func (u *BranchContractUpsertOne) SetArea(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetArea(v)
	})
}

// AddArea adds v to the "area" field.
func (u *BranchContractUpsertOne) AddArea(v float64) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateArea() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateArea()
	})
}

// SetStartTime sets the "start_time" field.
func (u *BranchContractUpsertOne) SetStartTime(v time.Time) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateStartTime() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *BranchContractUpsertOne) SetEndTime(v time.Time) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateEndTime() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateEndTime()
	})
}

// SetFile sets the "file" field.
func (u *BranchContractUpsertOne) SetFile(v string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateFile() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateFile()
	})
}

// SetSheets sets the "sheets" field.
func (u *BranchContractUpsertOne) SetSheets(v []string) *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetSheets(v)
	})
}

// UpdateSheets sets the "sheets" field to the value that was provided on create.
func (u *BranchContractUpsertOne) UpdateSheets() *BranchContractUpsertOne {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateSheets()
	})
}

// Exec executes the query.
func (u *BranchContractUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchContractCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchContractUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BranchContractUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BranchContractUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BranchContractCreateBulk is the builder for creating many BranchContract entities in bulk.
type BranchContractCreateBulk struct {
	config
	err      error
	builders []*BranchContractCreate
	conflict []sql.ConflictOption
}

// Save creates the BranchContract entities in the database.
func (bccb *BranchContractCreateBulk) Save(ctx context.Context) ([]*BranchContract, error) {
	if bccb.err != nil {
		return nil, bccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bccb.builders))
	nodes := make([]*BranchContract, len(bccb.builders))
	mutators := make([]Mutator, len(bccb.builders))
	for i := range bccb.builders {
		func(i int, root context.Context) {
			builder := bccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BranchContractMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bccb *BranchContractCreateBulk) SaveX(ctx context.Context) []*BranchContract {
	v, err := bccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bccb *BranchContractCreateBulk) Exec(ctx context.Context) error {
	_, err := bccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bccb *BranchContractCreateBulk) ExecX(ctx context.Context) {
	if err := bccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BranchContract.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchContractUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bccb *BranchContractCreateBulk) OnConflict(opts ...sql.ConflictOption) *BranchContractUpsertBulk {
	bccb.conflict = opts
	return &BranchContractUpsertBulk{
		create: bccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bccb *BranchContractCreateBulk) OnConflictColumns(columns ...string) *BranchContractUpsertBulk {
	bccb.conflict = append(bccb.conflict, sql.ConflictColumns(columns...))
	return &BranchContractUpsertBulk{
		create: bccb,
	}
}

// BranchContractUpsertBulk is the builder for "upsert"-ing
// a bulk of BranchContract nodes.
type BranchContractUpsertBulk struct {
	create *BranchContractCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BranchContractUpsertBulk) UpdateNewValues() *BranchContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(branchcontract.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(branchcontract.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BranchContract.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BranchContractUpsertBulk) Ignore() *BranchContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchContractUpsertBulk) DoNothing() *BranchContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchContractCreateBulk.OnConflict
// documentation for more info.
func (u *BranchContractUpsertBulk) Update(set func(*BranchContractUpsert)) *BranchContractUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchContractUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchContractUpsertBulk) SetUpdatedAt(v time.Time) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateUpdatedAt() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BranchContractUpsertBulk) SetDeletedAt(v time.Time) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateDeletedAt() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BranchContractUpsertBulk) ClearDeletedAt() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BranchContractUpsertBulk) SetLastModifier(v *model.Modifier) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateLastModifier() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BranchContractUpsertBulk) ClearLastModifier() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BranchContractUpsertBulk) SetRemark(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateRemark() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BranchContractUpsertBulk) ClearRemark() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.ClearRemark()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *BranchContractUpsertBulk) SetBranchID(v uint64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateBranchID() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateBranchID()
	})
}

// SetLandlordName sets the "landlord_name" field.
func (u *BranchContractUpsertBulk) SetLandlordName(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLandlordName(v)
	})
}

// UpdateLandlordName sets the "landlord_name" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateLandlordName() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLandlordName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *BranchContractUpsertBulk) SetIDCardNumber(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateIDCardNumber() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateIDCardNumber()
	})
}

// SetPhone sets the "phone" field.
func (u *BranchContractUpsertBulk) SetPhone(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdatePhone() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdatePhone()
	})
}

// SetBankNumber sets the "bank_number" field.
func (u *BranchContractUpsertBulk) SetBankNumber(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetBankNumber(v)
	})
}

// UpdateBankNumber sets the "bank_number" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateBankNumber() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateBankNumber()
	})
}

// SetPledge sets the "pledge" field.
func (u *BranchContractUpsertBulk) SetPledge(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetPledge(v)
	})
}

// AddPledge adds v to the "pledge" field.
func (u *BranchContractUpsertBulk) AddPledge(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddPledge(v)
	})
}

// UpdatePledge sets the "pledge" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdatePledge() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdatePledge()
	})
}

// SetRent sets the "rent" field.
func (u *BranchContractUpsertBulk) SetRent(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetRent(v)
	})
}

// AddRent adds v to the "rent" field.
func (u *BranchContractUpsertBulk) AddRent(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddRent(v)
	})
}

// UpdateRent sets the "rent" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateRent() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateRent()
	})
}

// SetLease sets the "lease" field.
func (u *BranchContractUpsertBulk) SetLease(v uint) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetLease(v)
	})
}

// AddLease adds v to the "lease" field.
func (u *BranchContractUpsertBulk) AddLease(v uint) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddLease(v)
	})
}

// UpdateLease sets the "lease" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateLease() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateLease()
	})
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (u *BranchContractUpsertBulk) SetElectricityPledge(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetElectricityPledge(v)
	})
}

// AddElectricityPledge adds v to the "electricity_pledge" field.
func (u *BranchContractUpsertBulk) AddElectricityPledge(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddElectricityPledge(v)
	})
}

// UpdateElectricityPledge sets the "electricity_pledge" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateElectricityPledge() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateElectricityPledge()
	})
}

// SetElectricity sets the "electricity" field.
func (u *BranchContractUpsertBulk) SetElectricity(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetElectricity(v)
	})
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateElectricity() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateElectricity()
	})
}

// SetArea sets the "area" field.
func (u *BranchContractUpsertBulk) SetArea(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetArea(v)
	})
}

// AddArea adds v to the "area" field.
func (u *BranchContractUpsertBulk) AddArea(v float64) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.AddArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateArea() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateArea()
	})
}

// SetStartTime sets the "start_time" field.
func (u *BranchContractUpsertBulk) SetStartTime(v time.Time) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetStartTime(v)
	})
}

// UpdateStartTime sets the "start_time" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateStartTime() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateStartTime()
	})
}

// SetEndTime sets the "end_time" field.
func (u *BranchContractUpsertBulk) SetEndTime(v time.Time) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetEndTime(v)
	})
}

// UpdateEndTime sets the "end_time" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateEndTime() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateEndTime()
	})
}

// SetFile sets the "file" field.
func (u *BranchContractUpsertBulk) SetFile(v string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetFile(v)
	})
}

// UpdateFile sets the "file" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateFile() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateFile()
	})
}

// SetSheets sets the "sheets" field.
func (u *BranchContractUpsertBulk) SetSheets(v []string) *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.SetSheets(v)
	})
}

// UpdateSheets sets the "sheets" field to the value that was provided on create.
func (u *BranchContractUpsertBulk) UpdateSheets() *BranchContractUpsertBulk {
	return u.Update(func(s *BranchContractUpsert) {
		s.UpdateSheets()
	})
}

// Exec executes the query.
func (u *BranchContractUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BranchContractCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchContractCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchContractUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
