// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CouponQuery is the builder for querying Coupon entities.
type CouponQuery struct {
	config
	limit        *int
	offset       *int
	unique       *bool
	order        []OrderFunc
	fields       []string
	predicates   []predicate.Coupon
	withRider    *RiderQuery
	withAssembly *CouponAssemblyQuery
	withPlan     *PlanQuery
	withTemplate *CouponTemplateQuery
	withOrder    *OrderQuery
	withCities   *CityQuery
	withPlans    *PlanQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CouponQuery builder.
func (cq *CouponQuery) Where(ps ...predicate.Coupon) *CouponQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit adds a limit step to the query.
func (cq *CouponQuery) Limit(limit int) *CouponQuery {
	cq.limit = &limit
	return cq
}

// Offset adds an offset step to the query.
func (cq *CouponQuery) Offset(offset int) *CouponQuery {
	cq.offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CouponQuery) Unique(unique bool) *CouponQuery {
	cq.unique = &unique
	return cq
}

// Order adds an order step to the query.
func (cq *CouponQuery) Order(o ...OrderFunc) *CouponQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryRider chains the current query on the "rider" edge.
func (cq *CouponQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.RiderTable, coupon.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssembly chains the current query on the "assembly" edge.
func (cq *CouponQuery) QueryAssembly() *CouponAssemblyQuery {
	query := &CouponAssemblyQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(couponassembly.Table, couponassembly.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.AssemblyTable, coupon.AssemblyColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlan chains the current query on the "plan" edge.
func (cq *CouponQuery) QueryPlan() *PlanQuery {
	query := &PlanQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, coupon.PlanTable, coupon.PlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplate chains the current query on the "template" edge.
func (cq *CouponQuery) QueryTemplate() *CouponTemplateQuery {
	query := &CouponTemplateQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(coupontemplate.Table, coupontemplate.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.TemplateTable, coupon.TemplateColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (cq *CouponQuery) QueryOrder() *OrderQuery {
	query := &OrderQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, coupon.OrderTable, coupon.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCities chains the current query on the "cities" edge.
func (cq *CouponQuery) QueryCities() *CityQuery {
	query := &CityQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, coupon.CitiesTable, coupon.CitiesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlans chains the current query on the "plans" edge.
func (cq *CouponQuery) QueryPlans() *PlanQuery {
	query := &PlanQuery{config: cq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(coupon.Table, coupon.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, coupon.PlansTable, coupon.PlansPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Coupon entity from the query.
// Returns a *NotFoundError when no Coupon was found.
func (cq *CouponQuery) First(ctx context.Context) (*Coupon, error) {
	nodes, err := cq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{coupon.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CouponQuery) FirstX(ctx context.Context) *Coupon {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Coupon ID from the query.
// Returns a *NotFoundError when no Coupon ID was found.
func (cq *CouponQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{coupon.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CouponQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Coupon entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Coupon entity is found.
// Returns a *NotFoundError when no Coupon entities are found.
func (cq *CouponQuery) Only(ctx context.Context) (*Coupon, error) {
	nodes, err := cq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{coupon.Label}
	default:
		return nil, &NotSingularError{coupon.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CouponQuery) OnlyX(ctx context.Context) *Coupon {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Coupon ID in the query.
// Returns a *NotSingularError when more than one Coupon ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CouponQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{coupon.Label}
	default:
		err = &NotSingularError{coupon.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CouponQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Coupons.
func (cq *CouponQuery) All(ctx context.Context) ([]*Coupon, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cq *CouponQuery) AllX(ctx context.Context) []*Coupon {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Coupon IDs.
func (cq *CouponQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := cq.Select(coupon.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CouponQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CouponQuery) Count(ctx context.Context) (int, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CouponQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CouponQuery) Exist(ctx context.Context) (bool, error) {
	if err := cq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CouponQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CouponQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CouponQuery) Clone() *CouponQuery {
	if cq == nil {
		return nil
	}
	return &CouponQuery{
		config:       cq.config,
		limit:        cq.limit,
		offset:       cq.offset,
		order:        append([]OrderFunc{}, cq.order...),
		predicates:   append([]predicate.Coupon{}, cq.predicates...),
		withRider:    cq.withRider.Clone(),
		withAssembly: cq.withAssembly.Clone(),
		withPlan:     cq.withPlan.Clone(),
		withTemplate: cq.withTemplate.Clone(),
		withOrder:    cq.withOrder.Clone(),
		withCities:   cq.withCities.Clone(),
		withPlans:    cq.withPlans.Clone(),
		// clone intermediate query.
		sql:    cq.sql.Clone(),
		path:   cq.path,
		unique: cq.unique,
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithRider(opts ...func(*RiderQuery)) *CouponQuery {
	query := &RiderQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withRider = query
	return cq
}

// WithAssembly tells the query-builder to eager-load the nodes that are connected to
// the "assembly" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithAssembly(opts ...func(*CouponAssemblyQuery)) *CouponQuery {
	query := &CouponAssemblyQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withAssembly = query
	return cq
}

// WithPlan tells the query-builder to eager-load the nodes that are connected to
// the "plan" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithPlan(opts ...func(*PlanQuery)) *CouponQuery {
	query := &PlanQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withPlan = query
	return cq
}

// WithTemplate tells the query-builder to eager-load the nodes that are connected to
// the "template" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithTemplate(opts ...func(*CouponTemplateQuery)) *CouponQuery {
	query := &CouponTemplateQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withTemplate = query
	return cq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithOrder(opts ...func(*OrderQuery)) *CouponQuery {
	query := &OrderQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withOrder = query
	return cq
}

// WithCities tells the query-builder to eager-load the nodes that are connected to
// the "cities" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithCities(opts ...func(*CityQuery)) *CouponQuery {
	query := &CityQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withCities = query
	return cq
}

// WithPlans tells the query-builder to eager-load the nodes that are connected to
// the "plans" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CouponQuery) WithPlans(opts ...func(*PlanQuery)) *CouponQuery {
	query := &PlanQuery{config: cq.config}
	for _, opt := range opts {
		opt(query)
	}
	cq.withPlans = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Coupon.Query().
//		GroupBy(coupon.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CouponQuery) GroupBy(field string, fields ...string) *CouponGroupBy {
	grbuild := &CouponGroupBy{config: cq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cq.sqlQuery(ctx), nil
	}
	grbuild.label = coupon.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Coupon.Query().
//		Select(coupon.FieldCreatedAt).
//		Scan(ctx, &v)
func (cq *CouponQuery) Select(fields ...string) *CouponSelect {
	cq.fields = append(cq.fields, fields...)
	selbuild := &CouponSelect{CouponQuery: cq}
	selbuild.label = coupon.Label
	selbuild.flds, selbuild.scan = &cq.fields, selbuild.Scan
	return selbuild
}

func (cq *CouponQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cq.fields {
		if !coupon.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CouponQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Coupon, error) {
	var (
		nodes       = []*Coupon{}
		_spec       = cq.querySpec()
		loadedTypes = [7]bool{
			cq.withRider != nil,
			cq.withAssembly != nil,
			cq.withPlan != nil,
			cq.withTemplate != nil,
			cq.withOrder != nil,
			cq.withCities != nil,
			cq.withPlans != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Coupon).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Coupon{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withRider; query != nil {
		if err := cq.loadRider(ctx, query, nodes, nil,
			func(n *Coupon, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAssembly; query != nil {
		if err := cq.loadAssembly(ctx, query, nodes, nil,
			func(n *Coupon, e *CouponAssembly) { n.Edges.Assembly = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPlan; query != nil {
		if err := cq.loadPlan(ctx, query, nodes, nil,
			func(n *Coupon, e *Plan) { n.Edges.Plan = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTemplate; query != nil {
		if err := cq.loadTemplate(ctx, query, nodes, nil,
			func(n *Coupon, e *CouponTemplate) { n.Edges.Template = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withOrder; query != nil {
		if err := cq.loadOrder(ctx, query, nodes, nil,
			func(n *Coupon, e *Order) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withCities; query != nil {
		if err := cq.loadCities(ctx, query, nodes,
			func(n *Coupon) { n.Edges.Cities = []*City{} },
			func(n *Coupon, e *City) { n.Edges.Cities = append(n.Edges.Cities, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withPlans; query != nil {
		if err := cq.loadPlans(ctx, query, nodes,
			func(n *Coupon) { n.Edges.Plans = []*Plan{} },
			func(n *Coupon, e *Plan) { n.Edges.Plans = append(n.Edges.Plans, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CouponQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Coupon)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadAssembly(ctx context.Context, query *CouponAssemblyQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *CouponAssembly)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Coupon)
	for i := range nodes {
		fk := nodes[i].AssemblyID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(couponassembly.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "assembly_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadPlan(ctx context.Context, query *PlanQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *Plan)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Coupon)
	for i := range nodes {
		if nodes[i].PlanID == nil {
			continue
		}
		fk := *nodes[i].PlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadTemplate(ctx context.Context, query *CouponTemplateQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *CouponTemplate)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Coupon)
	for i := range nodes {
		fk := nodes[i].TemplateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(coupontemplate.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "template_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadOrder(ctx context.Context, query *OrderQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *Order)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Coupon)
	for i := range nodes {
		if nodes[i].OrderID == nil {
			continue
		}
		fk := *nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadCities(ctx context.Context, query *CityQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *City)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Coupon)
	nids := make(map[uint64]map[*Coupon]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(coupon.CitiesTable)
		s.Join(joinT).On(s.C(city.FieldID), joinT.C(coupon.CitiesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(coupon.CitiesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(coupon.CitiesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Coupon]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "cities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (cq *CouponQuery) loadPlans(ctx context.Context, query *PlanQuery, nodes []*Coupon, init func(*Coupon), assign func(*Coupon, *Plan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Coupon)
	nids := make(map[uint64]map[*Coupon]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(coupon.PlansTable)
		s.Join(joinT).On(s.C(plan.FieldID), joinT.C(coupon.PlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(coupon.PlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(coupon.PlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Coupon]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "plans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (cq *CouponQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.fields
	if len(cq.fields) > 0 {
		_spec.Unique = cq.unique != nil && *cq.unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CouponQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (cq *CouponQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupon.Table,
			Columns: coupon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupon.FieldID,
			},
		},
		From:   cq.sql,
		Unique: true,
	}
	if unique := cq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupon.FieldID)
		for i := range fields {
			if fields[i] != coupon.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CouponQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(coupon.Table)
	columns := cq.fields
	if len(columns) == 0 {
		columns = coupon.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.unique != nil && *cq.unique {
		selector.Distinct()
	}
	for _, m := range cq.modifiers {
		m(selector)
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cq *CouponQuery) Modify(modifiers ...func(s *sql.Selector)) *CouponSelect {
	cq.modifiers = append(cq.modifiers, modifiers...)
	return cq.Select()
}

// CouponGroupBy is the group-by builder for Coupon entities.
type CouponGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CouponGroupBy) Aggregate(fns ...AggregateFunc) *CouponGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cgb *CouponGroupBy) Scan(ctx context.Context, v any) error {
	query, err := cgb.path(ctx)
	if err != nil {
		return err
	}
	cgb.sql = query
	return cgb.sqlScan(ctx, v)
}

func (cgb *CouponGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range cgb.fields {
		if !coupon.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cgb *CouponGroupBy) sqlQuery() *sql.Selector {
	selector := cgb.sql.Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cgb.fields)+len(cgb.fns))
		for _, f := range cgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cgb.fields...)...)
}

// CouponSelect is the builder for selecting fields of Coupon entities.
type CouponSelect struct {
	*CouponQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CouponSelect) Scan(ctx context.Context, v any) error {
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	cs.sql = cs.CouponQuery.sqlQuery(ctx)
	return cs.sqlScan(ctx, v)
}

func (cs *CouponSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := cs.sql.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cs *CouponSelect) Modify(modifiers ...func(s *sql.Selector)) *CouponSelect {
	cs.modifiers = append(cs.modifiers, modifiers...)
	return cs
}
