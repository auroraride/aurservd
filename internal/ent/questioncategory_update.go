// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/question"
	"github.com/auroraride/aurservd/internal/ent/questioncategory"
)

// QuestionCategoryUpdate is the builder for updating QuestionCategory entities.
type QuestionCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *QuestionCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the QuestionCategoryUpdate builder.
func (qcu *QuestionCategoryUpdate) Where(ps ...predicate.QuestionCategory) *QuestionCategoryUpdate {
	qcu.mutation.Where(ps...)
	return qcu
}

// SetUpdatedAt sets the "updated_at" field.
func (qcu *QuestionCategoryUpdate) SetUpdatedAt(t time.Time) *QuestionCategoryUpdate {
	qcu.mutation.SetUpdatedAt(t)
	return qcu
}

// SetDeletedAt sets the "deleted_at" field.
func (qcu *QuestionCategoryUpdate) SetDeletedAt(t time.Time) *QuestionCategoryUpdate {
	qcu.mutation.SetDeletedAt(t)
	return qcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableDeletedAt(t *time.Time) *QuestionCategoryUpdate {
	if t != nil {
		qcu.SetDeletedAt(*t)
	}
	return qcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qcu *QuestionCategoryUpdate) ClearDeletedAt() *QuestionCategoryUpdate {
	qcu.mutation.ClearDeletedAt()
	return qcu
}

// SetLastModifier sets the "last_modifier" field.
func (qcu *QuestionCategoryUpdate) SetLastModifier(m *model.Modifier) *QuestionCategoryUpdate {
	qcu.mutation.SetLastModifier(m)
	return qcu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (qcu *QuestionCategoryUpdate) ClearLastModifier() *QuestionCategoryUpdate {
	qcu.mutation.ClearLastModifier()
	return qcu
}

// SetRemark sets the "remark" field.
func (qcu *QuestionCategoryUpdate) SetRemark(s string) *QuestionCategoryUpdate {
	qcu.mutation.SetRemark(s)
	return qcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableRemark(s *string) *QuestionCategoryUpdate {
	if s != nil {
		qcu.SetRemark(*s)
	}
	return qcu
}

// ClearRemark clears the value of the "remark" field.
func (qcu *QuestionCategoryUpdate) ClearRemark() *QuestionCategoryUpdate {
	qcu.mutation.ClearRemark()
	return qcu
}

// SetName sets the "name" field.
func (qcu *QuestionCategoryUpdate) SetName(s string) *QuestionCategoryUpdate {
	qcu.mutation.SetName(s)
	return qcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableName(s *string) *QuestionCategoryUpdate {
	if s != nil {
		qcu.SetName(*s)
	}
	return qcu
}

// SetSort sets the "sort" field.
func (qcu *QuestionCategoryUpdate) SetSort(u uint64) *QuestionCategoryUpdate {
	qcu.mutation.ResetSort()
	qcu.mutation.SetSort(u)
	return qcu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (qcu *QuestionCategoryUpdate) SetNillableSort(u *uint64) *QuestionCategoryUpdate {
	if u != nil {
		qcu.SetSort(*u)
	}
	return qcu
}

// AddSort adds u to the "sort" field.
func (qcu *QuestionCategoryUpdate) AddSort(u int64) *QuestionCategoryUpdate {
	qcu.mutation.AddSort(u)
	return qcu
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcu *QuestionCategoryUpdate) AddQuestionIDs(ids ...uint64) *QuestionCategoryUpdate {
	qcu.mutation.AddQuestionIDs(ids...)
	return qcu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcu *QuestionCategoryUpdate) AddQuestions(q ...*Question) *QuestionCategoryUpdate {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionCategoryMutation object of the builder.
func (qcu *QuestionCategoryUpdate) Mutation() *QuestionCategoryMutation {
	return qcu.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcu *QuestionCategoryUpdate) ClearQuestions() *QuestionCategoryUpdate {
	qcu.mutation.ClearQuestions()
	return qcu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcu *QuestionCategoryUpdate) RemoveQuestionIDs(ids ...uint64) *QuestionCategoryUpdate {
	qcu.mutation.RemoveQuestionIDs(ids...)
	return qcu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcu *QuestionCategoryUpdate) RemoveQuestions(q ...*Question) *QuestionCategoryUpdate {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qcu *QuestionCategoryUpdate) Save(ctx context.Context) (int, error) {
	if err := qcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, qcu.sqlSave, qcu.mutation, qcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcu *QuestionCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := qcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qcu *QuestionCategoryUpdate) Exec(ctx context.Context) error {
	_, err := qcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcu *QuestionCategoryUpdate) ExecX(ctx context.Context) {
	if err := qcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcu *QuestionCategoryUpdate) defaults() error {
	if _, ok := qcu.mutation.UpdatedAt(); !ok {
		if questioncategory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncategory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := questioncategory.UpdateDefaultUpdatedAt()
		qcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qcu *QuestionCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuestionCategoryUpdate {
	qcu.modifiers = append(qcu.modifiers, modifiers...)
	return qcu
}

func (qcu *QuestionCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(questioncategory.Table, questioncategory.Columns, sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64))
	if ps := qcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcu.mutation.UpdatedAt(); ok {
		_spec.SetField(questioncategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcu.mutation.DeletedAt(); ok {
		_spec.SetField(questioncategory.FieldDeletedAt, field.TypeTime, value)
	}
	if qcu.mutation.DeletedAtCleared() {
		_spec.ClearField(questioncategory.FieldDeletedAt, field.TypeTime)
	}
	if qcu.mutation.CreatorCleared() {
		_spec.ClearField(questioncategory.FieldCreator, field.TypeJSON)
	}
	if value, ok := qcu.mutation.LastModifier(); ok {
		_spec.SetField(questioncategory.FieldLastModifier, field.TypeJSON, value)
	}
	if qcu.mutation.LastModifierCleared() {
		_spec.ClearField(questioncategory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := qcu.mutation.Remark(); ok {
		_spec.SetField(questioncategory.FieldRemark, field.TypeString, value)
	}
	if qcu.mutation.RemarkCleared() {
		_spec.ClearField(questioncategory.FieldRemark, field.TypeString)
	}
	if value, ok := qcu.mutation.Name(); ok {
		_spec.SetField(questioncategory.FieldName, field.TypeString, value)
	}
	if value, ok := qcu.mutation.Sort(); ok {
		_spec.SetField(questioncategory.FieldSort, field.TypeUint64, value)
	}
	if value, ok := qcu.mutation.AddedSort(); ok {
		_spec.AddField(questioncategory.FieldSort, field.TypeUint64, value)
	}
	if qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(qcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, qcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questioncategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qcu.mutation.done = true
	return n, nil
}

// QuestionCategoryUpdateOne is the builder for updating a single QuestionCategory entity.
type QuestionCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *QuestionCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (qcuo *QuestionCategoryUpdateOne) SetUpdatedAt(t time.Time) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetUpdatedAt(t)
	return qcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (qcuo *QuestionCategoryUpdateOne) SetDeletedAt(t time.Time) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetDeletedAt(t)
	return qcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionCategoryUpdateOne {
	if t != nil {
		qcuo.SetDeletedAt(*t)
	}
	return qcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qcuo *QuestionCategoryUpdateOne) ClearDeletedAt() *QuestionCategoryUpdateOne {
	qcuo.mutation.ClearDeletedAt()
	return qcuo
}

// SetLastModifier sets the "last_modifier" field.
func (qcuo *QuestionCategoryUpdateOne) SetLastModifier(m *model.Modifier) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetLastModifier(m)
	return qcuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (qcuo *QuestionCategoryUpdateOne) ClearLastModifier() *QuestionCategoryUpdateOne {
	qcuo.mutation.ClearLastModifier()
	return qcuo
}

// SetRemark sets the "remark" field.
func (qcuo *QuestionCategoryUpdateOne) SetRemark(s string) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetRemark(s)
	return qcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableRemark(s *string) *QuestionCategoryUpdateOne {
	if s != nil {
		qcuo.SetRemark(*s)
	}
	return qcuo
}

// ClearRemark clears the value of the "remark" field.
func (qcuo *QuestionCategoryUpdateOne) ClearRemark() *QuestionCategoryUpdateOne {
	qcuo.mutation.ClearRemark()
	return qcuo
}

// SetName sets the "name" field.
func (qcuo *QuestionCategoryUpdateOne) SetName(s string) *QuestionCategoryUpdateOne {
	qcuo.mutation.SetName(s)
	return qcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableName(s *string) *QuestionCategoryUpdateOne {
	if s != nil {
		qcuo.SetName(*s)
	}
	return qcuo
}

// SetSort sets the "sort" field.
func (qcuo *QuestionCategoryUpdateOne) SetSort(u uint64) *QuestionCategoryUpdateOne {
	qcuo.mutation.ResetSort()
	qcuo.mutation.SetSort(u)
	return qcuo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (qcuo *QuestionCategoryUpdateOne) SetNillableSort(u *uint64) *QuestionCategoryUpdateOne {
	if u != nil {
		qcuo.SetSort(*u)
	}
	return qcuo
}

// AddSort adds u to the "sort" field.
func (qcuo *QuestionCategoryUpdateOne) AddSort(u int64) *QuestionCategoryUpdateOne {
	qcuo.mutation.AddSort(u)
	return qcuo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qcuo *QuestionCategoryUpdateOne) AddQuestionIDs(ids ...uint64) *QuestionCategoryUpdateOne {
	qcuo.mutation.AddQuestionIDs(ids...)
	return qcuo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qcuo *QuestionCategoryUpdateOne) AddQuestions(q ...*Question) *QuestionCategoryUpdateOne {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.AddQuestionIDs(ids...)
}

// Mutation returns the QuestionCategoryMutation object of the builder.
func (qcuo *QuestionCategoryUpdateOne) Mutation() *QuestionCategoryMutation {
	return qcuo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qcuo *QuestionCategoryUpdateOne) ClearQuestions() *QuestionCategoryUpdateOne {
	qcuo.mutation.ClearQuestions()
	return qcuo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qcuo *QuestionCategoryUpdateOne) RemoveQuestionIDs(ids ...uint64) *QuestionCategoryUpdateOne {
	qcuo.mutation.RemoveQuestionIDs(ids...)
	return qcuo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qcuo *QuestionCategoryUpdateOne) RemoveQuestions(q ...*Question) *QuestionCategoryUpdateOne {
	ids := make([]uint64, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qcuo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the QuestionCategoryUpdate builder.
func (qcuo *QuestionCategoryUpdateOne) Where(ps ...predicate.QuestionCategory) *QuestionCategoryUpdateOne {
	qcuo.mutation.Where(ps...)
	return qcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qcuo *QuestionCategoryUpdateOne) Select(field string, fields ...string) *QuestionCategoryUpdateOne {
	qcuo.fields = append([]string{field}, fields...)
	return qcuo
}

// Save executes the query and returns the updated QuestionCategory entity.
func (qcuo *QuestionCategoryUpdateOne) Save(ctx context.Context) (*QuestionCategory, error) {
	if err := qcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, qcuo.sqlSave, qcuo.mutation, qcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qcuo *QuestionCategoryUpdateOne) SaveX(ctx context.Context) *QuestionCategory {
	node, err := qcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qcuo *QuestionCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := qcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcuo *QuestionCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := qcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qcuo *QuestionCategoryUpdateOne) defaults() error {
	if _, ok := qcuo.mutation.UpdatedAt(); !ok {
		if questioncategory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized questioncategory.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := questioncategory.UpdateDefaultUpdatedAt()
		qcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qcuo *QuestionCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuestionCategoryUpdateOne {
	qcuo.modifiers = append(qcuo.modifiers, modifiers...)
	return qcuo
}

func (qcuo *QuestionCategoryUpdateOne) sqlSave(ctx context.Context) (_node *QuestionCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(questioncategory.Table, questioncategory.Columns, sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64))
	id, ok := qcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questioncategory.FieldID)
		for _, f := range fields {
			if !questioncategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questioncategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(questioncategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qcuo.mutation.DeletedAt(); ok {
		_spec.SetField(questioncategory.FieldDeletedAt, field.TypeTime, value)
	}
	if qcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(questioncategory.FieldDeletedAt, field.TypeTime)
	}
	if qcuo.mutation.CreatorCleared() {
		_spec.ClearField(questioncategory.FieldCreator, field.TypeJSON)
	}
	if value, ok := qcuo.mutation.LastModifier(); ok {
		_spec.SetField(questioncategory.FieldLastModifier, field.TypeJSON, value)
	}
	if qcuo.mutation.LastModifierCleared() {
		_spec.ClearField(questioncategory.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := qcuo.mutation.Remark(); ok {
		_spec.SetField(questioncategory.FieldRemark, field.TypeString, value)
	}
	if qcuo.mutation.RemarkCleared() {
		_spec.ClearField(questioncategory.FieldRemark, field.TypeString)
	}
	if value, ok := qcuo.mutation.Name(); ok {
		_spec.SetField(questioncategory.FieldName, field.TypeString, value)
	}
	if value, ok := qcuo.mutation.Sort(); ok {
		_spec.SetField(questioncategory.FieldSort, field.TypeUint64, value)
	}
	if value, ok := qcuo.mutation.AddedSort(); ok {
		_spec.AddField(questioncategory.FieldSort, field.TypeUint64, value)
	}
	if qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qcuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qcuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questioncategory.QuestionsTable,
			Columns: []string{questioncategory.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(qcuo.modifiers...)
	_node = &QuestionCategory{config: qcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questioncategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qcuo.mutation.done = true
	return _node, nil
}
