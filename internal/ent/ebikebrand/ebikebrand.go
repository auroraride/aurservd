// Code generated by ent, DO NOT EDIT.

package ebikebrand

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ebikebrand type in the database.
	Label = "ebike_brand"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldMainPic holds the string denoting the main_pic field in the database.
	FieldMainPic = "main_pic"
	// EdgeBrandAttribute holds the string denoting the brand_attribute edge name in mutations.
	EdgeBrandAttribute = "brand_attribute"
	// EdgePlans holds the string denoting the plans edge name in mutations.
	EdgePlans = "plans"
	// Table holds the table name of the ebikebrand in the database.
	Table = "ebike_brand"
	// BrandAttributeTable is the table that holds the brand_attribute relation/edge.
	BrandAttributeTable = "ebike_brand_attribute"
	// BrandAttributeInverseTable is the table name for the EbikeBrandAttribute entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrandattribute" package.
	BrandAttributeInverseTable = "ebike_brand_attribute"
	// BrandAttributeColumn is the table column denoting the brand_attribute relation/edge.
	BrandAttributeColumn = "brand_id"
	// PlansTable is the table that holds the plans relation/edge.
	PlansTable = "plan"
	// PlansInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlansInverseTable = "plan"
	// PlansColumn is the table column denoting the plans relation/edge.
	PlansColumn = "brand_id"
)

// Columns holds all SQL columns for ebikebrand fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldName,
	FieldCover,
	FieldMainPic,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the EbikeBrand queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCover orders the results by the cover field.
func ByCover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCover, opts...).ToFunc()
}

// ByBrandAttributeCount orders the results by brand_attribute count.
func ByBrandAttributeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBrandAttributeStep(), opts...)
	}
}

// ByBrandAttribute orders the results by brand_attribute terms.
func ByBrandAttribute(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandAttributeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlansCount orders the results by plans count.
func ByPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlansStep(), opts...)
	}
}

// ByPlans orders the results by plans terms.
func ByPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBrandAttributeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandAttributeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BrandAttributeTable, BrandAttributeColumn),
	)
}
func newPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlansTable, PlansColumn),
	)
}
