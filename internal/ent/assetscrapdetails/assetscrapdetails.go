// Code generated by ent, DO NOT EDIT.

package assetscrapdetails

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assetscrapdetails type in the database.
	Label = "asset_scrap_details"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldMaterialID holds the string denoting the material_id field in the database.
	FieldMaterialID = "material_id"
	// FieldAssetID holds the string denoting the asset_id field in the database.
	FieldAssetID = "asset_id"
	// FieldScrapID holds the string denoting the scrap_id field in the database.
	FieldScrapID = "scrap_id"
	// EdgeMaterial holds the string denoting the material edge name in mutations.
	EdgeMaterial = "material"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// EdgeScrap holds the string denoting the scrap edge name in mutations.
	EdgeScrap = "scrap"
	// Table holds the table name of the assetscrapdetails in the database.
	Table = "asset_scrap_details"
	// MaterialTable is the table that holds the material relation/edge.
	MaterialTable = "asset_scrap_details"
	// MaterialInverseTable is the table name for the Material entity.
	// It exists in this package in order to avoid circular dependency with the "material" package.
	MaterialInverseTable = "material"
	// MaterialColumn is the table column denoting the material relation/edge.
	MaterialColumn = "material_id"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "asset_scrap_details"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "asset"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "asset_id"
	// ScrapTable is the table that holds the scrap relation/edge.
	ScrapTable = "asset_scrap_details"
	// ScrapInverseTable is the table name for the AssetScrap entity.
	// It exists in this package in order to avoid circular dependency with the "assetscrap" package.
	ScrapInverseTable = "asset_scrap"
	// ScrapColumn is the table column denoting the scrap relation/edge.
	ScrapColumn = "scrap_id"
)

// Columns holds all SQL columns for assetscrapdetails fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldMaterialID,
	FieldAssetID,
	FieldScrapID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the AssetScrapDetails queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMaterialID orders the results by the material_id field.
func ByMaterialID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaterialID, opts...).ToFunc()
}

// ByAssetID orders the results by the asset_id field.
func ByAssetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetID, opts...).ToFunc()
}

// ByScrapID orders the results by the scrap_id field.
func ByScrapID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScrapID, opts...).ToFunc()
}

// ByMaterialField orders the results by material field.
func ByMaterialField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMaterialStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssetField orders the results by asset field.
func ByAssetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetStep(), sql.OrderByField(field, opts...))
	}
}

// ByScrapField orders the results by scrap field.
func ByScrapField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScrapStep(), sql.OrderByField(field, opts...))
	}
}
func newMaterialStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MaterialInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MaterialTable, MaterialColumn),
	)
}
func newAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
	)
}
func newScrapStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScrapInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScrapTable, ScrapColumn),
	)
}
