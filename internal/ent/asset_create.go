// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetCreate is the builder for creating a Asset entity.
type AssetCreate struct {
	config
	mutation *AssetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AssetCreate) SetCreatedAt(t time.Time) *AssetCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableCreatedAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AssetCreate) SetUpdatedAt(t time.Time) *AssetCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableUpdatedAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AssetCreate) SetDeletedAt(t time.Time) *AssetCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableDeletedAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AssetCreate) SetCreator(m *model.Modifier) *AssetCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AssetCreate) SetLastModifier(m *model.Modifier) *AssetCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AssetCreate) SetRemark(s string) *AssetCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AssetCreate) SetNillableRemark(s *string) *AssetCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetBrandID sets the "brand_id" field.
func (ac *AssetCreate) SetBrandID(u uint64) *AssetCreate {
	ac.mutation.SetBrandID(u)
	return ac
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableBrandID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetBrandID(*u)
	}
	return ac
}

// SetModelID sets the "model_id" field.
func (ac *AssetCreate) SetModelID(u uint64) *AssetCreate {
	ac.mutation.SetModelID(u)
	return ac
}

// SetNillableModelID sets the "model_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableModelID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetModelID(*u)
	}
	return ac
}

// SetCityID sets the "city_id" field.
func (ac *AssetCreate) SetCityID(u uint64) *AssetCreate {
	ac.mutation.SetCityID(u)
	return ac
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableCityID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetCityID(*u)
	}
	return ac
}

// SetMaterialID sets the "material_id" field.
func (ac *AssetCreate) SetMaterialID(u uint64) *AssetCreate {
	ac.mutation.SetMaterialID(u)
	return ac
}

// SetNillableMaterialID sets the "material_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableMaterialID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetMaterialID(*u)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *AssetCreate) SetType(u uint8) *AssetCreate {
	ac.mutation.SetType(u)
	return ac
}

// SetName sets the "name" field.
func (ac *AssetCreate) SetName(s string) *AssetCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetSn sets the "sn" field.
func (ac *AssetCreate) SetSn(s string) *AssetCreate {
	ac.mutation.SetSn(s)
	return ac
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (ac *AssetCreate) SetNillableSn(s *string) *AssetCreate {
	if s != nil {
		ac.SetSn(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AssetCreate) SetStatus(u uint8) *AssetCreate {
	ac.mutation.SetStatus(u)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AssetCreate) SetNillableStatus(u *uint8) *AssetCreate {
	if u != nil {
		ac.SetStatus(*u)
	}
	return ac
}

// SetEnable sets the "enable" field.
func (ac *AssetCreate) SetEnable(b bool) *AssetCreate {
	ac.mutation.SetEnable(b)
	return ac
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ac *AssetCreate) SetNillableEnable(b *bool) *AssetCreate {
	if b != nil {
		ac.SetEnable(*b)
	}
	return ac
}

// SetLocationsType sets the "locations_type" field.
func (ac *AssetCreate) SetLocationsType(u uint8) *AssetCreate {
	ac.mutation.SetLocationsType(u)
	return ac
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (ac *AssetCreate) SetNillableLocationsType(u *uint8) *AssetCreate {
	if u != nil {
		ac.SetLocationsType(*u)
	}
	return ac
}

// SetLocationsID sets the "locations_id" field.
func (ac *AssetCreate) SetLocationsID(u uint64) *AssetCreate {
	ac.mutation.SetLocationsID(u)
	return ac
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableLocationsID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetLocationsID(*u)
	}
	return ac
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (ac *AssetCreate) SetRtoRiderID(u uint64) *AssetCreate {
	ac.mutation.SetRtoRiderID(u)
	return ac
}

// SetNillableRtoRiderID sets the "rto_rider_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableRtoRiderID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetRtoRiderID(*u)
	}
	return ac
}

// SetCheckAt sets the "check_at" field.
func (ac *AssetCreate) SetCheckAt(t time.Time) *AssetCreate {
	ac.mutation.SetCheckAt(t)
	return ac
}

// SetNillableCheckAt sets the "check_at" field if the given value is not nil.
func (ac *AssetCreate) SetNillableCheckAt(t *time.Time) *AssetCreate {
	if t != nil {
		ac.SetCheckAt(*t)
	}
	return ac
}

// SetBrandName sets the "brand_name" field.
func (ac *AssetCreate) SetBrandName(s string) *AssetCreate {
	ac.mutation.SetBrandName(s)
	return ac
}

// SetNillableBrandName sets the "brand_name" field if the given value is not nil.
func (ac *AssetCreate) SetNillableBrandName(s *string) *AssetCreate {
	if s != nil {
		ac.SetBrandName(*s)
	}
	return ac
}

// SetSubscribeID sets the "subscribe_id" field.
func (ac *AssetCreate) SetSubscribeID(u uint64) *AssetCreate {
	ac.mutation.SetSubscribeID(u)
	return ac
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (ac *AssetCreate) SetNillableSubscribeID(u *uint64) *AssetCreate {
	if u != nil {
		ac.SetSubscribeID(*u)
	}
	return ac
}

// SetOrdinal sets the "ordinal" field.
func (ac *AssetCreate) SetOrdinal(i int) *AssetCreate {
	ac.mutation.SetOrdinal(i)
	return ac
}

// SetNillableOrdinal sets the "ordinal" field if the given value is not nil.
func (ac *AssetCreate) SetNillableOrdinal(i *int) *AssetCreate {
	if i != nil {
		ac.SetOrdinal(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AssetCreate) SetID(u uint64) *AssetCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ac *AssetCreate) SetBrand(e *EbikeBrand) *AssetCreate {
	return ac.SetBrandID(e.ID)
}

// SetModel sets the "model" edge to the BatteryModel entity.
func (ac *AssetCreate) SetModel(b *BatteryModel) *AssetCreate {
	return ac.SetModelID(b.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ac *AssetCreate) SetCity(c *City) *AssetCreate {
	return ac.SetCityID(c.ID)
}

// SetMaterial sets the "material" edge to the Material entity.
func (ac *AssetCreate) SetMaterial(m *Material) *AssetCreate {
	return ac.SetMaterialID(m.ID)
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (ac *AssetCreate) AddValueIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddValueIDs(ids...)
	return ac
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (ac *AssetCreate) AddValues(a ...*AssetAttributeValues) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddValueIDs(ids...)
}

// AddScrapDetailIDs adds the "scrap_details" edge to the AssetScrapDetails entity by IDs.
func (ac *AssetCreate) AddScrapDetailIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddScrapDetailIDs(ids...)
	return ac
}

// AddScrapDetails adds the "scrap_details" edges to the AssetScrapDetails entity.
func (ac *AssetCreate) AddScrapDetails(a ...*AssetScrapDetails) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddScrapDetailIDs(ids...)
}

// AddTransferDetailIDs adds the "transfer_details" edge to the AssetTransferDetails entity by IDs.
func (ac *AssetCreate) AddTransferDetailIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddTransferDetailIDs(ids...)
	return ac
}

// AddTransferDetails adds the "transfer_details" edges to the AssetTransferDetails entity.
func (ac *AssetCreate) AddTransferDetails(a ...*AssetTransferDetails) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddTransferDetailIDs(ids...)
}

// AddMaintenanceDetailIDs adds the "maintenance_details" edge to the AssetMaintenanceDetails entity by IDs.
func (ac *AssetCreate) AddMaintenanceDetailIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddMaintenanceDetailIDs(ids...)
	return ac
}

// AddMaintenanceDetails adds the "maintenance_details" edges to the AssetMaintenanceDetails entity.
func (ac *AssetCreate) AddMaintenanceDetails(a ...*AssetMaintenanceDetails) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddMaintenanceDetailIDs(ids...)
}

// AddCheckDetailIDs adds the "check_details" edge to the AssetCheckDetails entity by IDs.
func (ac *AssetCreate) AddCheckDetailIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddCheckDetailIDs(ids...)
	return ac
}

// AddCheckDetails adds the "check_details" edges to the AssetCheckDetails entity.
func (ac *AssetCreate) AddCheckDetails(a ...*AssetCheckDetails) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddCheckDetailIDs(ids...)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ac *AssetCreate) SetSubscribe(s *Subscribe) *AssetCreate {
	return ac.SetSubscribeID(s.ID)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (ac *AssetCreate) SetWarehouseID(id uint64) *AssetCreate {
	ac.mutation.SetWarehouseID(id)
	return ac
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableWarehouseID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetWarehouseID(*id)
	}
	return ac
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (ac *AssetCreate) SetWarehouse(w *Warehouse) *AssetCreate {
	return ac.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (ac *AssetCreate) SetStoreID(id uint64) *AssetCreate {
	ac.mutation.SetStoreID(id)
	return ac
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableStoreID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetStoreID(*id)
	}
	return ac
}

// SetStore sets the "store" edge to the Store entity.
func (ac *AssetCreate) SetStore(s *Store) *AssetCreate {
	return ac.SetStoreID(s.ID)
}

// SetCabinetID sets the "cabinet" edge to the Cabinet entity by ID.
func (ac *AssetCreate) SetCabinetID(id uint64) *AssetCreate {
	ac.mutation.SetCabinetID(id)
	return ac
}

// SetNillableCabinetID sets the "cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableCabinetID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetCabinetID(*id)
	}
	return ac
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ac *AssetCreate) SetCabinet(c *Cabinet) *AssetCreate {
	return ac.SetCabinetID(c.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (ac *AssetCreate) SetStationID(id uint64) *AssetCreate {
	ac.mutation.SetStationID(id)
	return ac
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableStationID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetStationID(*id)
	}
	return ac
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ac *AssetCreate) SetStation(e *EnterpriseStation) *AssetCreate {
	return ac.SetStationID(e.ID)
}

// SetRiderID sets the "rider" edge to the Rider entity by ID.
func (ac *AssetCreate) SetRiderID(id uint64) *AssetCreate {
	ac.mutation.SetRiderID(id)
	return ac
}

// SetNillableRiderID sets the "rider" edge to the Rider entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableRiderID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetRiderID(*id)
	}
	return ac
}

// SetRider sets the "rider" edge to the Rider entity.
func (ac *AssetCreate) SetRider(r *Rider) *AssetCreate {
	return ac.SetRiderID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Maintainer entity by ID.
func (ac *AssetCreate) SetOperatorID(id uint64) *AssetCreate {
	ac.mutation.SetOperatorID(id)
	return ac
}

// SetNillableOperatorID sets the "operator" edge to the Maintainer entity by ID if the given value is not nil.
func (ac *AssetCreate) SetNillableOperatorID(id *uint64) *AssetCreate {
	if id != nil {
		ac = ac.SetOperatorID(*id)
	}
	return ac
}

// SetOperator sets the "operator" edge to the Maintainer entity.
func (ac *AssetCreate) SetOperator(m *Maintainer) *AssetCreate {
	return ac.SetOperatorID(m.ID)
}

// AddEbikeAllocateIDs adds the "ebike_allocates" edge to the Allocate entity by IDs.
func (ac *AssetCreate) AddEbikeAllocateIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddEbikeAllocateIDs(ids...)
	return ac
}

// AddEbikeAllocates adds the "ebike_allocates" edges to the Allocate entity.
func (ac *AssetCreate) AddEbikeAllocates(a ...*Allocate) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddEbikeAllocateIDs(ids...)
}

// AddBatteryAllocateIDs adds the "battery_allocates" edge to the Allocate entity by IDs.
func (ac *AssetCreate) AddBatteryAllocateIDs(ids ...uint64) *AssetCreate {
	ac.mutation.AddBatteryAllocateIDs(ids...)
	return ac
}

// AddBatteryAllocates adds the "battery_allocates" edges to the Allocate entity.
func (ac *AssetCreate) AddBatteryAllocates(a ...*Allocate) *AssetCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddBatteryAllocateIDs(ids...)
}

// SetRtoRider sets the "rto_rider" edge to the Rider entity.
func (ac *AssetCreate) SetRtoRider(r *Rider) *AssetCreate {
	return ac.SetRtoRiderID(r.ID)
}

// Mutation returns the AssetMutation object of the builder.
func (ac *AssetCreate) Mutation() *AssetMutation {
	return ac.mutation
}

// Save creates the Asset in the database.
func (ac *AssetCreate) Save(ctx context.Context) (*Asset, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AssetCreate) SaveX(ctx context.Context) *Asset {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AssetCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AssetCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AssetCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if asset.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized asset.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := asset.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if asset.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized asset.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := asset.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Status(); !ok {
		v := asset.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.Enable(); !ok {
		v := asset.DefaultEnable
		ac.mutation.SetEnable(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AssetCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Asset.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Asset.updated_at"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Asset.type"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Asset.name"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Asset.status"`)}
	}
	if _, ok := ac.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Asset.enable"`)}
	}
	return nil
}

func (ac *AssetCreate) sqlSave(ctx context.Context) (*Asset, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AssetCreate) createSpec() (*Asset, *sqlgraph.CreateSpec) {
	var (
		_node = &Asset{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(asset.Table, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(asset.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(asset.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(asset.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Sn(); ok {
		_spec.SetField(asset.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(asset.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Enable(); ok {
		_spec.SetField(asset.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := ac.mutation.LocationsType(); ok {
		_spec.SetField(asset.FieldLocationsType, field.TypeUint8, value)
		_node.LocationsType = value
	}
	if value, ok := ac.mutation.CheckAt(); ok {
		_spec.SetField(asset.FieldCheckAt, field.TypeTime, value)
		_node.CheckAt = &value
	}
	if value, ok := ac.mutation.BrandName(); ok {
		_spec.SetField(asset.FieldBrandName, field.TypeString, value)
		_node.BrandName = value
	}
	if value, ok := ac.mutation.Ordinal(); ok {
		_spec.SetField(asset.FieldOrdinal, field.TypeInt, value)
		_node.Ordinal = &value
	}
	if nodes := ac.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.BrandTable,
			Columns: []string{asset.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.ModelTable,
			Columns: []string{asset.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.CityTable,
			Columns: []string{asset.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MaterialIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.MaterialTable,
			Columns: []string{asset.MaterialColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(material.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MaterialID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ValuesTable,
			Columns: []string{asset.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ScrapDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ScrapDetailsTable,
			Columns: []string{asset.ScrapDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrapdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.TransferDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.TransferDetailsTable,
			Columns: []string{asset.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MaintenanceDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.MaintenanceDetailsTable,
			Columns: []string{asset.MaintenanceDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CheckDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CheckDetailsTable,
			Columns: []string{asset.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   asset.SubscribeTable,
			Columns: []string{asset.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.WarehouseTable,
			Columns: []string{asset.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.StoreTable,
			Columns: []string{asset.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.CabinetTable,
			Columns: []string{asset.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.StationTable,
			Columns: []string{asset.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.RiderTable,
			Columns: []string{asset.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OperatorTable,
			Columns: []string{asset.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EbikeAllocatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EbikeAllocatesTable,
			Columns: []string{asset.EbikeAllocatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.BatteryAllocatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BatteryAllocatesTable,
			Columns: []string{asset.BatteryAllocatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RtoRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   asset.RtoRiderTable,
			Columns: []string{asset.RtoRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RtoRiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Asset.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AssetCreate) OnConflict(opts ...sql.ConflictOption) *AssetUpsertOne {
	ac.conflict = opts
	return &AssetUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AssetCreate) OnConflictColumns(columns ...string) *AssetUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AssetUpsertOne{
		create: ac,
	}
}

type (
	// AssetUpsertOne is the builder for "upsert"-ing
	//  one Asset node.
	AssetUpsertOne struct {
		create *AssetCreate
	}

	// AssetUpsert is the "OnConflict" setter.
	AssetUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetUpsert) SetUpdatedAt(v time.Time) *AssetUpsert {
	u.Set(asset.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetUpsert) UpdateUpdatedAt() *AssetUpsert {
	u.SetExcluded(asset.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetUpsert) SetDeletedAt(v time.Time) *AssetUpsert {
	u.Set(asset.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetUpsert) UpdateDeletedAt() *AssetUpsert {
	u.SetExcluded(asset.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetUpsert) ClearDeletedAt() *AssetUpsert {
	u.SetNull(asset.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetUpsert) SetLastModifier(v *model.Modifier) *AssetUpsert {
	u.Set(asset.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetUpsert) UpdateLastModifier() *AssetUpsert {
	u.SetExcluded(asset.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetUpsert) ClearLastModifier() *AssetUpsert {
	u.SetNull(asset.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetUpsert) SetRemark(v string) *AssetUpsert {
	u.Set(asset.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetUpsert) UpdateRemark() *AssetUpsert {
	u.SetExcluded(asset.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetUpsert) ClearRemark() *AssetUpsert {
	u.SetNull(asset.FieldRemark)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *AssetUpsert) SetBrandID(v uint64) *AssetUpsert {
	u.Set(asset.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateBrandID() *AssetUpsert {
	u.SetExcluded(asset.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AssetUpsert) ClearBrandID() *AssetUpsert {
	u.SetNull(asset.FieldBrandID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *AssetUpsert) SetModelID(v uint64) *AssetUpsert {
	u.Set(asset.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateModelID() *AssetUpsert {
	u.SetExcluded(asset.FieldModelID)
	return u
}

// ClearModelID clears the value of the "model_id" field.
func (u *AssetUpsert) ClearModelID() *AssetUpsert {
	u.SetNull(asset.FieldModelID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *AssetUpsert) SetCityID(v uint64) *AssetUpsert {
	u.Set(asset.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateCityID() *AssetUpsert {
	u.SetExcluded(asset.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *AssetUpsert) ClearCityID() *AssetUpsert {
	u.SetNull(asset.FieldCityID)
	return u
}

// SetMaterialID sets the "material_id" field.
func (u *AssetUpsert) SetMaterialID(v uint64) *AssetUpsert {
	u.Set(asset.FieldMaterialID, v)
	return u
}

// UpdateMaterialID sets the "material_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateMaterialID() *AssetUpsert {
	u.SetExcluded(asset.FieldMaterialID)
	return u
}

// ClearMaterialID clears the value of the "material_id" field.
func (u *AssetUpsert) ClearMaterialID() *AssetUpsert {
	u.SetNull(asset.FieldMaterialID)
	return u
}

// SetType sets the "type" field.
func (u *AssetUpsert) SetType(v uint8) *AssetUpsert {
	u.Set(asset.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsert) UpdateType() *AssetUpsert {
	u.SetExcluded(asset.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *AssetUpsert) AddType(v uint8) *AssetUpsert {
	u.Add(asset.FieldType, v)
	return u
}

// SetName sets the "name" field.
func (u *AssetUpsert) SetName(v string) *AssetUpsert {
	u.Set(asset.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetUpsert) UpdateName() *AssetUpsert {
	u.SetExcluded(asset.FieldName)
	return u
}

// SetSn sets the "sn" field.
func (u *AssetUpsert) SetSn(v string) *AssetUpsert {
	u.Set(asset.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetUpsert) UpdateSn() *AssetUpsert {
	u.SetExcluded(asset.FieldSn)
	return u
}

// ClearSn clears the value of the "sn" field.
func (u *AssetUpsert) ClearSn() *AssetUpsert {
	u.SetNull(asset.FieldSn)
	return u
}

// SetStatus sets the "status" field.
func (u *AssetUpsert) SetStatus(v uint8) *AssetUpsert {
	u.Set(asset.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetUpsert) UpdateStatus() *AssetUpsert {
	u.SetExcluded(asset.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssetUpsert) AddStatus(v uint8) *AssetUpsert {
	u.Add(asset.FieldStatus, v)
	return u
}

// SetEnable sets the "enable" field.
func (u *AssetUpsert) SetEnable(v bool) *AssetUpsert {
	u.Set(asset.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AssetUpsert) UpdateEnable() *AssetUpsert {
	u.SetExcluded(asset.FieldEnable)
	return u
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetUpsert) SetLocationsType(v uint8) *AssetUpsert {
	u.Set(asset.FieldLocationsType, v)
	return u
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetUpsert) UpdateLocationsType() *AssetUpsert {
	u.SetExcluded(asset.FieldLocationsType)
	return u
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetUpsert) AddLocationsType(v uint8) *AssetUpsert {
	u.Add(asset.FieldLocationsType, v)
	return u
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetUpsert) ClearLocationsType() *AssetUpsert {
	u.SetNull(asset.FieldLocationsType)
	return u
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetUpsert) SetLocationsID(v uint64) *AssetUpsert {
	u.Set(asset.FieldLocationsID, v)
	return u
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateLocationsID() *AssetUpsert {
	u.SetExcluded(asset.FieldLocationsID)
	return u
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetUpsert) ClearLocationsID() *AssetUpsert {
	u.SetNull(asset.FieldLocationsID)
	return u
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *AssetUpsert) SetRtoRiderID(v uint64) *AssetUpsert {
	u.Set(asset.FieldRtoRiderID, v)
	return u
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateRtoRiderID() *AssetUpsert {
	u.SetExcluded(asset.FieldRtoRiderID)
	return u
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *AssetUpsert) ClearRtoRiderID() *AssetUpsert {
	u.SetNull(asset.FieldRtoRiderID)
	return u
}

// SetCheckAt sets the "check_at" field.
func (u *AssetUpsert) SetCheckAt(v time.Time) *AssetUpsert {
	u.Set(asset.FieldCheckAt, v)
	return u
}

// UpdateCheckAt sets the "check_at" field to the value that was provided on create.
func (u *AssetUpsert) UpdateCheckAt() *AssetUpsert {
	u.SetExcluded(asset.FieldCheckAt)
	return u
}

// ClearCheckAt clears the value of the "check_at" field.
func (u *AssetUpsert) ClearCheckAt() *AssetUpsert {
	u.SetNull(asset.FieldCheckAt)
	return u
}

// SetBrandName sets the "brand_name" field.
func (u *AssetUpsert) SetBrandName(v string) *AssetUpsert {
	u.Set(asset.FieldBrandName, v)
	return u
}

// UpdateBrandName sets the "brand_name" field to the value that was provided on create.
func (u *AssetUpsert) UpdateBrandName() *AssetUpsert {
	u.SetExcluded(asset.FieldBrandName)
	return u
}

// ClearBrandName clears the value of the "brand_name" field.
func (u *AssetUpsert) ClearBrandName() *AssetUpsert {
	u.SetNull(asset.FieldBrandName)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssetUpsert) SetSubscribeID(v uint64) *AssetUpsert {
	u.Set(asset.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssetUpsert) UpdateSubscribeID() *AssetUpsert {
	u.SetExcluded(asset.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *AssetUpsert) ClearSubscribeID() *AssetUpsert {
	u.SetNull(asset.FieldSubscribeID)
	return u
}

// SetOrdinal sets the "ordinal" field.
func (u *AssetUpsert) SetOrdinal(v int) *AssetUpsert {
	u.Set(asset.FieldOrdinal, v)
	return u
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *AssetUpsert) UpdateOrdinal() *AssetUpsert {
	u.SetExcluded(asset.FieldOrdinal)
	return u
}

// AddOrdinal adds v to the "ordinal" field.
func (u *AssetUpsert) AddOrdinal(v int) *AssetUpsert {
	u.Add(asset.FieldOrdinal, v)
	return u
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *AssetUpsert) ClearOrdinal() *AssetUpsert {
	u.SetNull(asset.FieldOrdinal)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asset.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AssetUpsertOne) UpdateNewValues() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(asset.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(asset.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(asset.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Asset.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetUpsertOne) Ignore() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetUpsertOne) DoNothing() *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCreate.OnConflict
// documentation for more info.
func (u *AssetUpsertOne) Update(set func(*AssetUpsert)) *AssetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetUpsertOne) SetUpdatedAt(v time.Time) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateUpdatedAt() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetUpsertOne) SetDeletedAt(v time.Time) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateDeletedAt() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetUpsertOne) ClearDeletedAt() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetUpsertOne) SetLastModifier(v *model.Modifier) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateLastModifier() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetUpsertOne) ClearLastModifier() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetUpsertOne) SetRemark(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateRemark() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetUpsertOne) ClearRemark() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *AssetUpsertOne) SetBrandID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateBrandID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AssetUpsertOne) ClearBrandID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearBrandID()
	})
}

// SetModelID sets the "model_id" field.
func (u *AssetUpsertOne) SetModelID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateModelID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateModelID()
	})
}

// ClearModelID clears the value of the "model_id" field.
func (u *AssetUpsertOne) ClearModelID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearModelID()
	})
}

// SetCityID sets the "city_id" field.
func (u *AssetUpsertOne) SetCityID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateCityID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *AssetUpsertOne) ClearCityID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearCityID()
	})
}

// SetMaterialID sets the "material_id" field.
func (u *AssetUpsertOne) SetMaterialID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetMaterialID(v)
	})
}

// UpdateMaterialID sets the "material_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateMaterialID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateMaterialID()
	})
}

// ClearMaterialID clears the value of the "material_id" field.
func (u *AssetUpsertOne) ClearMaterialID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearMaterialID()
	})
}

// SetType sets the "type" field.
func (u *AssetUpsertOne) SetType(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AssetUpsertOne) AddType(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateType() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *AssetUpsertOne) SetName(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateName() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateName()
	})
}

// SetSn sets the "sn" field.
func (u *AssetUpsertOne) SetSn(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateSn() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetUpsertOne) ClearSn() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearSn()
	})
}

// SetStatus sets the "status" field.
func (u *AssetUpsertOne) SetStatus(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetUpsertOne) AddStatus(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateStatus() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *AssetUpsertOne) SetEnable(v bool) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateEnable() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateEnable()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetUpsertOne) SetLocationsType(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetUpsertOne) AddLocationsType(v uint8) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateLocationsType() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetUpsertOne) ClearLocationsType() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetUpsertOne) SetLocationsID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateLocationsID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetUpsertOne) ClearLocationsID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLocationsID()
	})
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *AssetUpsertOne) SetRtoRiderID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetRtoRiderID(v)
	})
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateRtoRiderID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateRtoRiderID()
	})
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *AssetUpsertOne) ClearRtoRiderID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearRtoRiderID()
	})
}

// SetCheckAt sets the "check_at" field.
func (u *AssetUpsertOne) SetCheckAt(v time.Time) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetCheckAt(v)
	})
}

// UpdateCheckAt sets the "check_at" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateCheckAt() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateCheckAt()
	})
}

// ClearCheckAt clears the value of the "check_at" field.
func (u *AssetUpsertOne) ClearCheckAt() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearCheckAt()
	})
}

// SetBrandName sets the "brand_name" field.
func (u *AssetUpsertOne) SetBrandName(v string) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetBrandName(v)
	})
}

// UpdateBrandName sets the "brand_name" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateBrandName() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateBrandName()
	})
}

// ClearBrandName clears the value of the "brand_name" field.
func (u *AssetUpsertOne) ClearBrandName() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearBrandName()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssetUpsertOne) SetSubscribeID(v uint64) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateSubscribeID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *AssetUpsertOne) ClearSubscribeID() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearSubscribeID()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *AssetUpsertOne) SetOrdinal(v int) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *AssetUpsertOne) AddOrdinal(v int) *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *AssetUpsertOne) UpdateOrdinal() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateOrdinal()
	})
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *AssetUpsertOne) ClearOrdinal() *AssetUpsertOne {
	return u.Update(func(s *AssetUpsert) {
		s.ClearOrdinal()
	})
}

// Exec executes the query.
func (u *AssetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetCreateBulk is the builder for creating many Asset entities in bulk.
type AssetCreateBulk struct {
	config
	err      error
	builders []*AssetCreate
	conflict []sql.ConflictOption
}

// Save creates the Asset entities in the database.
func (acb *AssetCreateBulk) Save(ctx context.Context) ([]*Asset, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Asset, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AssetCreateBulk) SaveX(ctx context.Context) []*Asset {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AssetCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AssetCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Asset.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AssetCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetUpsertBulk {
	acb.conflict = opts
	return &AssetUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AssetCreateBulk) OnConflictColumns(columns ...string) *AssetUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AssetUpsertBulk{
		create: acb,
	}
}

// AssetUpsertBulk is the builder for "upsert"-ing
// a bulk of Asset nodes.
type AssetUpsertBulk struct {
	create *AssetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(asset.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AssetUpsertBulk) UpdateNewValues() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(asset.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(asset.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(asset.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Asset.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetUpsertBulk) Ignore() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetUpsertBulk) DoNothing() *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCreateBulk.OnConflict
// documentation for more info.
func (u *AssetUpsertBulk) Update(set func(*AssetUpsert)) *AssetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetUpsertBulk) SetUpdatedAt(v time.Time) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateUpdatedAt() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetUpsertBulk) SetDeletedAt(v time.Time) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateDeletedAt() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetUpsertBulk) ClearDeletedAt() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetUpsertBulk) SetLastModifier(v *model.Modifier) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateLastModifier() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetUpsertBulk) ClearLastModifier() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetUpsertBulk) SetRemark(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateRemark() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetUpsertBulk) ClearRemark() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearRemark()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *AssetUpsertBulk) SetBrandID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateBrandID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *AssetUpsertBulk) ClearBrandID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearBrandID()
	})
}

// SetModelID sets the "model_id" field.
func (u *AssetUpsertBulk) SetModelID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateModelID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateModelID()
	})
}

// ClearModelID clears the value of the "model_id" field.
func (u *AssetUpsertBulk) ClearModelID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearModelID()
	})
}

// SetCityID sets the "city_id" field.
func (u *AssetUpsertBulk) SetCityID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateCityID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *AssetUpsertBulk) ClearCityID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearCityID()
	})
}

// SetMaterialID sets the "material_id" field.
func (u *AssetUpsertBulk) SetMaterialID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetMaterialID(v)
	})
}

// UpdateMaterialID sets the "material_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateMaterialID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateMaterialID()
	})
}

// ClearMaterialID clears the value of the "material_id" field.
func (u *AssetUpsertBulk) ClearMaterialID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearMaterialID()
	})
}

// SetType sets the "type" field.
func (u *AssetUpsertBulk) SetType(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *AssetUpsertBulk) AddType(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateType() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *AssetUpsertBulk) SetName(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateName() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateName()
	})
}

// SetSn sets the "sn" field.
func (u *AssetUpsertBulk) SetSn(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateSn() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetUpsertBulk) ClearSn() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearSn()
	})
}

// SetStatus sets the "status" field.
func (u *AssetUpsertBulk) SetStatus(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetUpsertBulk) AddStatus(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateStatus() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *AssetUpsertBulk) SetEnable(v bool) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateEnable() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateEnable()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetUpsertBulk) SetLocationsType(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetUpsertBulk) AddLocationsType(v uint8) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateLocationsType() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetUpsertBulk) ClearLocationsType() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetUpsertBulk) SetLocationsID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateLocationsID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetUpsertBulk) ClearLocationsID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearLocationsID()
	})
}

// SetRtoRiderID sets the "rto_rider_id" field.
func (u *AssetUpsertBulk) SetRtoRiderID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetRtoRiderID(v)
	})
}

// UpdateRtoRiderID sets the "rto_rider_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateRtoRiderID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateRtoRiderID()
	})
}

// ClearRtoRiderID clears the value of the "rto_rider_id" field.
func (u *AssetUpsertBulk) ClearRtoRiderID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearRtoRiderID()
	})
}

// SetCheckAt sets the "check_at" field.
func (u *AssetUpsertBulk) SetCheckAt(v time.Time) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetCheckAt(v)
	})
}

// UpdateCheckAt sets the "check_at" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateCheckAt() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateCheckAt()
	})
}

// ClearCheckAt clears the value of the "check_at" field.
func (u *AssetUpsertBulk) ClearCheckAt() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearCheckAt()
	})
}

// SetBrandName sets the "brand_name" field.
func (u *AssetUpsertBulk) SetBrandName(v string) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetBrandName(v)
	})
}

// UpdateBrandName sets the "brand_name" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateBrandName() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateBrandName()
	})
}

// ClearBrandName clears the value of the "brand_name" field.
func (u *AssetUpsertBulk) ClearBrandName() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearBrandName()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *AssetUpsertBulk) SetSubscribeID(v uint64) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateSubscribeID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *AssetUpsertBulk) ClearSubscribeID() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearSubscribeID()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *AssetUpsertBulk) SetOrdinal(v int) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *AssetUpsertBulk) AddOrdinal(v int) *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *AssetUpsertBulk) UpdateOrdinal() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.UpdateOrdinal()
	})
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *AssetUpsertBulk) ClearOrdinal() *AssetUpsertBulk {
	return u.Update(func(s *AssetUpsert) {
		s.ClearOrdinal()
	})
}

// Exec executes the query.
func (u *AssetUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
