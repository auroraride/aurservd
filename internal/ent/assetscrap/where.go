// Code generated by ent, DO NOT EDIT.

package assetscrap

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldRemark, v))
}

// ScrapReasonType applies equality check predicate on the "scrap_reason_type" field. It's identical to ScrapReasonTypeEQ.
func ScrapReasonType(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapReasonType, v))
}

// ScrapAt applies equality check predicate on the "scrap_at" field. It's identical to ScrapAtEQ.
func ScrapAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapAt, v))
}

// ScrapOperateID applies equality check predicate on the "scrap_operate_id" field. It's identical to ScrapOperateIDEQ.
func ScrapOperateID(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapOperateID, v))
}

// ScrapOperateRoleType applies equality check predicate on the "scrap_operate_role_type" field. It's identical to ScrapOperateRoleTypeEQ.
func ScrapOperateRoleType(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapOperateRoleType, v))
}

// ScrapBatch applies equality check predicate on the "scrap_batch" field. It's identical to ScrapBatchEQ.
func ScrapBatch(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapBatch, v))
}

// AssetID applies equality check predicate on the "asset_id" field. It's identical to AssetIDEQ.
func AssetID(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldAssetID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContainsFold(FieldRemark, v))
}

// ScrapReasonTypeEQ applies the EQ predicate on the "scrap_reason_type" field.
func ScrapReasonTypeEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapReasonType, v))
}

// ScrapReasonTypeNEQ applies the NEQ predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapReasonType, v))
}

// ScrapReasonTypeIn applies the In predicate on the "scrap_reason_type" field.
func ScrapReasonTypeIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapReasonType, vs...))
}

// ScrapReasonTypeNotIn applies the NotIn predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNotIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapReasonType, vs...))
}

// ScrapReasonTypeGT applies the GT predicate on the "scrap_reason_type" field.
func ScrapReasonTypeGT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldScrapReasonType, v))
}

// ScrapReasonTypeGTE applies the GTE predicate on the "scrap_reason_type" field.
func ScrapReasonTypeGTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldScrapReasonType, v))
}

// ScrapReasonTypeLT applies the LT predicate on the "scrap_reason_type" field.
func ScrapReasonTypeLT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldScrapReasonType, v))
}

// ScrapReasonTypeLTE applies the LTE predicate on the "scrap_reason_type" field.
func ScrapReasonTypeLTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldScrapReasonType, v))
}

// ScrapReasonTypeIsNil applies the IsNil predicate on the "scrap_reason_type" field.
func ScrapReasonTypeIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapReasonType))
}

// ScrapReasonTypeNotNil applies the NotNil predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapReasonType))
}

// ScrapAtEQ applies the EQ predicate on the "scrap_at" field.
func ScrapAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapAt, v))
}

// ScrapAtNEQ applies the NEQ predicate on the "scrap_at" field.
func ScrapAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapAt, v))
}

// ScrapAtIn applies the In predicate on the "scrap_at" field.
func ScrapAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapAt, vs...))
}

// ScrapAtNotIn applies the NotIn predicate on the "scrap_at" field.
func ScrapAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapAt, vs...))
}

// ScrapAtGT applies the GT predicate on the "scrap_at" field.
func ScrapAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldScrapAt, v))
}

// ScrapAtGTE applies the GTE predicate on the "scrap_at" field.
func ScrapAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldScrapAt, v))
}

// ScrapAtLT applies the LT predicate on the "scrap_at" field.
func ScrapAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldScrapAt, v))
}

// ScrapAtLTE applies the LTE predicate on the "scrap_at" field.
func ScrapAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldScrapAt, v))
}

// ScrapAtIsNil applies the IsNil predicate on the "scrap_at" field.
func ScrapAtIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapAt))
}

// ScrapAtNotNil applies the NotNil predicate on the "scrap_at" field.
func ScrapAtNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapAt))
}

// ScrapOperateIDEQ applies the EQ predicate on the "scrap_operate_id" field.
func ScrapOperateIDEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapOperateID, v))
}

// ScrapOperateIDNEQ applies the NEQ predicate on the "scrap_operate_id" field.
func ScrapOperateIDNEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapOperateID, v))
}

// ScrapOperateIDIn applies the In predicate on the "scrap_operate_id" field.
func ScrapOperateIDIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapOperateID, vs...))
}

// ScrapOperateIDNotIn applies the NotIn predicate on the "scrap_operate_id" field.
func ScrapOperateIDNotIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapOperateID, vs...))
}

// ScrapOperateIDIsNil applies the IsNil predicate on the "scrap_operate_id" field.
func ScrapOperateIDIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapOperateID))
}

// ScrapOperateIDNotNil applies the NotNil predicate on the "scrap_operate_id" field.
func ScrapOperateIDNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapOperateID))
}

// ScrapOperateRoleTypeEQ applies the EQ predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeNEQ applies the NEQ predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeNEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeIn applies the In predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapOperateRoleType, vs...))
}

// ScrapOperateRoleTypeNotIn applies the NotIn predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeNotIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapOperateRoleType, vs...))
}

// ScrapOperateRoleTypeGT applies the GT predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeGT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeGTE applies the GTE predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeGTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeLT applies the LT predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeLT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeLTE applies the LTE predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeLTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldScrapOperateRoleType, v))
}

// ScrapOperateRoleTypeIsNil applies the IsNil predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapOperateRoleType))
}

// ScrapOperateRoleTypeNotNil applies the NotNil predicate on the "scrap_operate_role_type" field.
func ScrapOperateRoleTypeNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapOperateRoleType))
}

// ScrapBatchEQ applies the EQ predicate on the "scrap_batch" field.
func ScrapBatchEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapBatch, v))
}

// ScrapBatchNEQ applies the NEQ predicate on the "scrap_batch" field.
func ScrapBatchNEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapBatch, v))
}

// ScrapBatchIn applies the In predicate on the "scrap_batch" field.
func ScrapBatchIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapBatch, vs...))
}

// ScrapBatchNotIn applies the NotIn predicate on the "scrap_batch" field.
func ScrapBatchNotIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapBatch, vs...))
}

// ScrapBatchGT applies the GT predicate on the "scrap_batch" field.
func ScrapBatchGT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldScrapBatch, v))
}

// ScrapBatchGTE applies the GTE predicate on the "scrap_batch" field.
func ScrapBatchGTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldScrapBatch, v))
}

// ScrapBatchLT applies the LT predicate on the "scrap_batch" field.
func ScrapBatchLT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldScrapBatch, v))
}

// ScrapBatchLTE applies the LTE predicate on the "scrap_batch" field.
func ScrapBatchLTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldScrapBatch, v))
}

// ScrapBatchContains applies the Contains predicate on the "scrap_batch" field.
func ScrapBatchContains(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContains(FieldScrapBatch, v))
}

// ScrapBatchHasPrefix applies the HasPrefix predicate on the "scrap_batch" field.
func ScrapBatchHasPrefix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasPrefix(FieldScrapBatch, v))
}

// ScrapBatchHasSuffix applies the HasSuffix predicate on the "scrap_batch" field.
func ScrapBatchHasSuffix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasSuffix(FieldScrapBatch, v))
}

// ScrapBatchIsNil applies the IsNil predicate on the "scrap_batch" field.
func ScrapBatchIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapBatch))
}

// ScrapBatchNotNil applies the NotNil predicate on the "scrap_batch" field.
func ScrapBatchNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapBatch))
}

// ScrapBatchEqualFold applies the EqualFold predicate on the "scrap_batch" field.
func ScrapBatchEqualFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEqualFold(FieldScrapBatch, v))
}

// ScrapBatchContainsFold applies the ContainsFold predicate on the "scrap_batch" field.
func ScrapBatchContainsFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContainsFold(FieldScrapBatch, v))
}

// AssetIDEQ applies the EQ predicate on the "asset_id" field.
func AssetIDEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldAssetID, v))
}

// AssetIDNEQ applies the NEQ predicate on the "asset_id" field.
func AssetIDNEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldAssetID, v))
}

// AssetIDIn applies the In predicate on the "asset_id" field.
func AssetIDIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldAssetID, vs...))
}

// AssetIDNotIn applies the NotIn predicate on the "asset_id" field.
func AssetIDNotIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldAssetID, vs...))
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.Manager) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaintainer applies the HasEdge predicate on the "maintainer" edge.
func HasMaintainer() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintainerWith applies the HasEdge predicate on the "maintainer" edge with a given conditions (other predicates).
func HasMaintainerWith(preds ...predicate.Maintainer) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAsset applies the HasEdge predicate on the "asset" edge.
func HasAsset() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AssetTable, AssetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAssetWith applies the HasEdge predicate on the "asset" edge with a given conditions (other predicates).
func HasAssetWith(preds ...predicate.Asset) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newAssetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.NotPredicates(p))
}
