// Code generated by ent, DO NOT EDIT.

package assetscrap

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldRemark, v))
}

// ReasonType applies equality check predicate on the "reason_type" field. It's identical to ReasonTypeEQ.
func ReasonType(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldReasonType, v))
}

// ScrapAt applies equality check predicate on the "scrap_at" field. It's identical to ScrapAtEQ.
func ScrapAt(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapAt, v))
}

// OperateID applies equality check predicate on the "operate_id" field. It's identical to OperateIDEQ.
func OperateID(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldOperateID, v))
}

// OperateRoleType applies equality check predicate on the "operate_role_type" field. It's identical to OperateRoleTypeEQ.
func OperateRoleType(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldOperateRoleType, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldSn, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldNum, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContainsFold(FieldRemark, v))
}

// ReasonTypeEQ applies the EQ predicate on the "reason_type" field.
func ReasonTypeEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldReasonType, v))
}

// ReasonTypeNEQ applies the NEQ predicate on the "reason_type" field.
func ReasonTypeNEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldReasonType, v))
}

// ReasonTypeIn applies the In predicate on the "reason_type" field.
func ReasonTypeIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldReasonType, vs...))
}

// ReasonTypeNotIn applies the NotIn predicate on the "reason_type" field.
func ReasonTypeNotIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldReasonType, vs...))
}

// ReasonTypeGT applies the GT predicate on the "reason_type" field.
func ReasonTypeGT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldReasonType, v))
}

// ReasonTypeGTE applies the GTE predicate on the "reason_type" field.
func ReasonTypeGTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldReasonType, v))
}

// ReasonTypeLT applies the LT predicate on the "reason_type" field.
func ReasonTypeLT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldReasonType, v))
}

// ReasonTypeLTE applies the LTE predicate on the "reason_type" field.
func ReasonTypeLTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldReasonType, v))
}

// ReasonTypeIsNil applies the IsNil predicate on the "reason_type" field.
func ReasonTypeIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldReasonType))
}

// ReasonTypeNotNil applies the NotNil predicate on the "reason_type" field.
func ReasonTypeNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldReasonType))
}

// ScrapAtEQ applies the EQ predicate on the "scrap_at" field.
func ScrapAtEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldScrapAt, v))
}

// ScrapAtNEQ applies the NEQ predicate on the "scrap_at" field.
func ScrapAtNEQ(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldScrapAt, v))
}

// ScrapAtIn applies the In predicate on the "scrap_at" field.
func ScrapAtIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldScrapAt, vs...))
}

// ScrapAtNotIn applies the NotIn predicate on the "scrap_at" field.
func ScrapAtNotIn(vs ...time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldScrapAt, vs...))
}

// ScrapAtGT applies the GT predicate on the "scrap_at" field.
func ScrapAtGT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldScrapAt, v))
}

// ScrapAtGTE applies the GTE predicate on the "scrap_at" field.
func ScrapAtGTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldScrapAt, v))
}

// ScrapAtLT applies the LT predicate on the "scrap_at" field.
func ScrapAtLT(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldScrapAt, v))
}

// ScrapAtLTE applies the LTE predicate on the "scrap_at" field.
func ScrapAtLTE(v time.Time) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldScrapAt, v))
}

// ScrapAtIsNil applies the IsNil predicate on the "scrap_at" field.
func ScrapAtIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldScrapAt))
}

// ScrapAtNotNil applies the NotNil predicate on the "scrap_at" field.
func ScrapAtNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldScrapAt))
}

// OperateIDEQ applies the EQ predicate on the "operate_id" field.
func OperateIDEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldOperateID, v))
}

// OperateIDNEQ applies the NEQ predicate on the "operate_id" field.
func OperateIDNEQ(v uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldOperateID, v))
}

// OperateIDIn applies the In predicate on the "operate_id" field.
func OperateIDIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldOperateID, vs...))
}

// OperateIDNotIn applies the NotIn predicate on the "operate_id" field.
func OperateIDNotIn(vs ...uint64) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldOperateID, vs...))
}

// OperateIDIsNil applies the IsNil predicate on the "operate_id" field.
func OperateIDIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldOperateID))
}

// OperateIDNotNil applies the NotNil predicate on the "operate_id" field.
func OperateIDNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldOperateID))
}

// OperateRoleTypeEQ applies the EQ predicate on the "operate_role_type" field.
func OperateRoleTypeEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldOperateRoleType, v))
}

// OperateRoleTypeNEQ applies the NEQ predicate on the "operate_role_type" field.
func OperateRoleTypeNEQ(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldOperateRoleType, v))
}

// OperateRoleTypeIn applies the In predicate on the "operate_role_type" field.
func OperateRoleTypeIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldOperateRoleType, vs...))
}

// OperateRoleTypeNotIn applies the NotIn predicate on the "operate_role_type" field.
func OperateRoleTypeNotIn(vs ...uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldOperateRoleType, vs...))
}

// OperateRoleTypeGT applies the GT predicate on the "operate_role_type" field.
func OperateRoleTypeGT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldOperateRoleType, v))
}

// OperateRoleTypeGTE applies the GTE predicate on the "operate_role_type" field.
func OperateRoleTypeGTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldOperateRoleType, v))
}

// OperateRoleTypeLT applies the LT predicate on the "operate_role_type" field.
func OperateRoleTypeLT(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldOperateRoleType, v))
}

// OperateRoleTypeLTE applies the LTE predicate on the "operate_role_type" field.
func OperateRoleTypeLTE(v uint8) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldOperateRoleType, v))
}

// OperateRoleTypeIsNil applies the IsNil predicate on the "operate_role_type" field.
func OperateRoleTypeIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldOperateRoleType))
}

// OperateRoleTypeNotNil applies the NotNil predicate on the "operate_role_type" field.
func OperateRoleTypeNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldOperateRoleType))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldHasSuffix(FieldSn, v))
}

// SnIsNil applies the IsNil predicate on the "sn" field.
func SnIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldSn))
}

// SnNotNil applies the NotNil predicate on the "sn" field.
func SnNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldSn))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldContainsFold(FieldSn, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v uint) predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldLTE(FieldNum, v))
}

// NumIsNil applies the IsNil predicate on the "num" field.
func NumIsNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldIsNull(FieldNum))
}

// NumNotNil applies the NotNil predicate on the "num" field.
func NumNotNil() predicate.AssetScrap {
	return predicate.AssetScrap(sql.FieldNotNull(FieldNum))
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.AssetManager) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMaintainer applies the HasEdge predicate on the "maintainer" edge.
func HasMaintainer() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MaintainerTable, MaintainerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMaintainerWith applies the HasEdge predicate on the "maintainer" edge with a given conditions (other predicates).
func HasMaintainerWith(preds ...predicate.Maintainer) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newMaintainerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScrapDetails applies the HasEdge predicate on the "scrap_details" edge.
func HasScrapDetails() predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ScrapDetailsTable, ScrapDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScrapDetailsWith applies the HasEdge predicate on the "scrap_details" edge with a given conditions (other predicates).
func HasScrapDetailsWith(preds ...predicate.AssetScrapDetails) predicate.AssetScrap {
	return predicate.AssetScrap(func(s *sql.Selector) {
		step := newScrapDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetScrap) predicate.AssetScrap {
	return predicate.AssetScrap(sql.NotPredicates(p))
}
