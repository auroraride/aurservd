// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CouponTemplateUpdate is the builder for updating CouponTemplate entities.
type CouponTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponTemplateUpdate builder.
func (ctu *CouponTemplateUpdate) Where(ps ...predicate.CouponTemplate) *CouponTemplateUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CouponTemplateUpdate) SetUpdatedAt(t time.Time) *CouponTemplateUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetEnable sets the "enable" field.
func (ctu *CouponTemplateUpdate) SetEnable(b bool) *CouponTemplateUpdate {
	ctu.mutation.SetEnable(b)
	return ctu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctu *CouponTemplateUpdate) SetNillableEnable(b *bool) *CouponTemplateUpdate {
	if b != nil {
		ctu.SetEnable(*b)
	}
	return ctu
}

// SetName sets the "name" field.
func (ctu *CouponTemplateUpdate) SetName(s string) *CouponTemplateUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetMeta sets the "meta" field.
func (ctu *CouponTemplateUpdate) SetMeta(mtm *model.CouponTemplateMeta) *CouponTemplateUpdate {
	ctu.mutation.SetMeta(mtm)
	return ctu
}

// Mutation returns the CouponTemplateMutation object of the builder.
func (ctu *CouponTemplateUpdate) Mutation() *CouponTemplateMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CouponTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ctu.defaults()
	if len(ctu.hooks) == 0 {
		affected, err = ctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctu.mutation = mutation
			affected, err = ctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctu.hooks) - 1; i >= 0; i-- {
			if ctu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CouponTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CouponTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CouponTemplateUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CouponTemplateUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := coupontemplate.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *CouponTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponTemplateUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *CouponTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupontemplate.Table,
			Columns: coupontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupontemplate.FieldID,
			},
		},
	}
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupontemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ctu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coupontemplate.FieldEnable,
		})
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupontemplate.FieldName,
		})
	}
	if value, ok := ctu.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: coupontemplate.FieldMeta,
		})
	}
	_spec.Modifiers = ctu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponTemplateUpdateOne is the builder for updating a single CouponTemplate entity.
type CouponTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CouponTemplateUpdateOne) SetUpdatedAt(t time.Time) *CouponTemplateUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetEnable sets the "enable" field.
func (ctuo *CouponTemplateUpdateOne) SetEnable(b bool) *CouponTemplateUpdateOne {
	ctuo.mutation.SetEnable(b)
	return ctuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctuo *CouponTemplateUpdateOne) SetNillableEnable(b *bool) *CouponTemplateUpdateOne {
	if b != nil {
		ctuo.SetEnable(*b)
	}
	return ctuo
}

// SetName sets the "name" field.
func (ctuo *CouponTemplateUpdateOne) SetName(s string) *CouponTemplateUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetMeta sets the "meta" field.
func (ctuo *CouponTemplateUpdateOne) SetMeta(mtm *model.CouponTemplateMeta) *CouponTemplateUpdateOne {
	ctuo.mutation.SetMeta(mtm)
	return ctuo
}

// Mutation returns the CouponTemplateMutation object of the builder.
func (ctuo *CouponTemplateUpdateOne) Mutation() *CouponTemplateMutation {
	return ctuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CouponTemplateUpdateOne) Select(field string, fields ...string) *CouponTemplateUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CouponTemplate entity.
func (ctuo *CouponTemplateUpdateOne) Save(ctx context.Context) (*CouponTemplate, error) {
	var (
		err  error
		node *CouponTemplate
	)
	ctuo.defaults()
	if len(ctuo.hooks) == 0 {
		node, err = ctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctuo.mutation = mutation
			node, err = ctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctuo.hooks) - 1; i >= 0; i-- {
			if ctuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CouponTemplateUpdateOne) SaveX(ctx context.Context) *CouponTemplate {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CouponTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CouponTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CouponTemplateUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := coupontemplate.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *CouponTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponTemplateUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *CouponTemplateUpdateOne) sqlSave(ctx context.Context) (_node *CouponTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   coupontemplate.Table,
			Columns: coupontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupontemplate.FieldID,
			},
		},
	}
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupontemplate.FieldID)
		for _, f := range fields {
			if !coupontemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupontemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupontemplate.FieldUpdatedAt,
		})
	}
	if value, ok := ctuo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coupontemplate.FieldEnable,
		})
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupontemplate.FieldName,
		})
	}
	if value, ok := ctuo.mutation.Meta(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: coupontemplate.FieldMeta,
		})
	}
	_spec.Modifiers = ctuo.modifiers
	_node = &CouponTemplate{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
