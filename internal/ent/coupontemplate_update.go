// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CouponTemplateUpdate is the builder for updating CouponTemplate entities.
type CouponTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponTemplateUpdate builder.
func (ctu *CouponTemplateUpdate) Where(ps ...predicate.CouponTemplate) *CouponTemplateUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CouponTemplateUpdate) SetUpdatedAt(t time.Time) *CouponTemplateUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetLastModifier sets the "last_modifier" field.
func (ctu *CouponTemplateUpdate) SetLastModifier(m *model.Modifier) *CouponTemplateUpdate {
	ctu.mutation.SetLastModifier(m)
	return ctu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ctu *CouponTemplateUpdate) ClearLastModifier() *CouponTemplateUpdate {
	ctu.mutation.ClearLastModifier()
	return ctu
}

// SetRemark sets the "remark" field.
func (ctu *CouponTemplateUpdate) SetRemark(s string) *CouponTemplateUpdate {
	ctu.mutation.SetRemark(s)
	return ctu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ctu *CouponTemplateUpdate) SetNillableRemark(s *string) *CouponTemplateUpdate {
	if s != nil {
		ctu.SetRemark(*s)
	}
	return ctu
}

// ClearRemark clears the value of the "remark" field.
func (ctu *CouponTemplateUpdate) ClearRemark() *CouponTemplateUpdate {
	ctu.mutation.ClearRemark()
	return ctu
}

// SetEnable sets the "enable" field.
func (ctu *CouponTemplateUpdate) SetEnable(b bool) *CouponTemplateUpdate {
	ctu.mutation.SetEnable(b)
	return ctu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctu *CouponTemplateUpdate) SetNillableEnable(b *bool) *CouponTemplateUpdate {
	if b != nil {
		ctu.SetEnable(*b)
	}
	return ctu
}

// SetName sets the "name" field.
func (ctu *CouponTemplateUpdate) SetName(s string) *CouponTemplateUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetMeta sets the "meta" field.
func (ctu *CouponTemplateUpdate) SetMeta(mtm *model.CouponTemplateMeta) *CouponTemplateUpdate {
	ctu.mutation.SetMeta(mtm)
	return ctu
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (ctu *CouponTemplateUpdate) AddCouponIDs(ids ...uint64) *CouponTemplateUpdate {
	ctu.mutation.AddCouponIDs(ids...)
	return ctu
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (ctu *CouponTemplateUpdate) AddCoupons(c ...*Coupon) *CouponTemplateUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.AddCouponIDs(ids...)
}

// Mutation returns the CouponTemplateMutation object of the builder.
func (ctu *CouponTemplateUpdate) Mutation() *CouponTemplateMutation {
	return ctu.mutation
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (ctu *CouponTemplateUpdate) ClearCoupons() *CouponTemplateUpdate {
	ctu.mutation.ClearCoupons()
	return ctu
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (ctu *CouponTemplateUpdate) RemoveCouponIDs(ids ...uint64) *CouponTemplateUpdate {
	ctu.mutation.RemoveCouponIDs(ids...)
	return ctu
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (ctu *CouponTemplateUpdate) RemoveCoupons(c ...*Coupon) *CouponTemplateUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctu.RemoveCouponIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CouponTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := ctu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, CouponTemplateMutation](ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CouponTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CouponTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CouponTemplateUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CouponTemplateUpdate) defaults() error {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		if coupontemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupontemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupontemplate.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *CouponTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponTemplateUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *CouponTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupontemplate.Table, coupontemplate.Columns, sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(coupontemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctu.mutation.CreatorCleared() {
		_spec.ClearField(coupontemplate.FieldCreator, field.TypeJSON)
	}
	if value, ok := ctu.mutation.LastModifier(); ok {
		_spec.SetField(coupontemplate.FieldLastModifier, field.TypeJSON, value)
	}
	if ctu.mutation.LastModifierCleared() {
		_spec.ClearField(coupontemplate.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ctu.mutation.Remark(); ok {
		_spec.SetField(coupontemplate.FieldRemark, field.TypeString, value)
	}
	if ctu.mutation.RemarkCleared() {
		_spec.ClearField(coupontemplate.FieldRemark, field.TypeString)
	}
	if value, ok := ctu.mutation.Enable(); ok {
		_spec.SetField(coupontemplate.FieldEnable, field.TypeBool, value)
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.SetField(coupontemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Meta(); ok {
		_spec.SetField(coupontemplate.FieldMeta, field.TypeJSON, value)
	}
	if ctu.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !ctu.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctu.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ctu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CouponTemplateUpdateOne is the builder for updating a single CouponTemplate entity.
type CouponTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CouponTemplateUpdateOne) SetUpdatedAt(t time.Time) *CouponTemplateUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetLastModifier sets the "last_modifier" field.
func (ctuo *CouponTemplateUpdateOne) SetLastModifier(m *model.Modifier) *CouponTemplateUpdateOne {
	ctuo.mutation.SetLastModifier(m)
	return ctuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ctuo *CouponTemplateUpdateOne) ClearLastModifier() *CouponTemplateUpdateOne {
	ctuo.mutation.ClearLastModifier()
	return ctuo
}

// SetRemark sets the "remark" field.
func (ctuo *CouponTemplateUpdateOne) SetRemark(s string) *CouponTemplateUpdateOne {
	ctuo.mutation.SetRemark(s)
	return ctuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ctuo *CouponTemplateUpdateOne) SetNillableRemark(s *string) *CouponTemplateUpdateOne {
	if s != nil {
		ctuo.SetRemark(*s)
	}
	return ctuo
}

// ClearRemark clears the value of the "remark" field.
func (ctuo *CouponTemplateUpdateOne) ClearRemark() *CouponTemplateUpdateOne {
	ctuo.mutation.ClearRemark()
	return ctuo
}

// SetEnable sets the "enable" field.
func (ctuo *CouponTemplateUpdateOne) SetEnable(b bool) *CouponTemplateUpdateOne {
	ctuo.mutation.SetEnable(b)
	return ctuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctuo *CouponTemplateUpdateOne) SetNillableEnable(b *bool) *CouponTemplateUpdateOne {
	if b != nil {
		ctuo.SetEnable(*b)
	}
	return ctuo
}

// SetName sets the "name" field.
func (ctuo *CouponTemplateUpdateOne) SetName(s string) *CouponTemplateUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetMeta sets the "meta" field.
func (ctuo *CouponTemplateUpdateOne) SetMeta(mtm *model.CouponTemplateMeta) *CouponTemplateUpdateOne {
	ctuo.mutation.SetMeta(mtm)
	return ctuo
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by IDs.
func (ctuo *CouponTemplateUpdateOne) AddCouponIDs(ids ...uint64) *CouponTemplateUpdateOne {
	ctuo.mutation.AddCouponIDs(ids...)
	return ctuo
}

// AddCoupons adds the "coupons" edges to the Coupon entity.
func (ctuo *CouponTemplateUpdateOne) AddCoupons(c ...*Coupon) *CouponTemplateUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.AddCouponIDs(ids...)
}

// Mutation returns the CouponTemplateMutation object of the builder.
func (ctuo *CouponTemplateUpdateOne) Mutation() *CouponTemplateMutation {
	return ctuo.mutation
}

// ClearCoupons clears all "coupons" edges to the Coupon entity.
func (ctuo *CouponTemplateUpdateOne) ClearCoupons() *CouponTemplateUpdateOne {
	ctuo.mutation.ClearCoupons()
	return ctuo
}

// RemoveCouponIDs removes the "coupons" edge to Coupon entities by IDs.
func (ctuo *CouponTemplateUpdateOne) RemoveCouponIDs(ids ...uint64) *CouponTemplateUpdateOne {
	ctuo.mutation.RemoveCouponIDs(ids...)
	return ctuo
}

// RemoveCoupons removes "coupons" edges to Coupon entities.
func (ctuo *CouponTemplateUpdateOne) RemoveCoupons(c ...*Coupon) *CouponTemplateUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctuo.RemoveCouponIDs(ids...)
}

// Where appends a list predicates to the CouponTemplateUpdate builder.
func (ctuo *CouponTemplateUpdateOne) Where(ps ...predicate.CouponTemplate) *CouponTemplateUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CouponTemplateUpdateOne) Select(field string, fields ...string) *CouponTemplateUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CouponTemplate entity.
func (ctuo *CouponTemplateUpdateOne) Save(ctx context.Context) (*CouponTemplate, error) {
	if err := ctuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*CouponTemplate, CouponTemplateMutation](ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CouponTemplateUpdateOne) SaveX(ctx context.Context) *CouponTemplate {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CouponTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CouponTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CouponTemplateUpdateOne) defaults() error {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		if coupontemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupontemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupontemplate.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *CouponTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponTemplateUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *CouponTemplateUpdateOne) sqlSave(ctx context.Context) (_node *CouponTemplate, err error) {
	_spec := sqlgraph.NewUpdateSpec(coupontemplate.Table, coupontemplate.Columns, sqlgraph.NewFieldSpec(coupontemplate.FieldID, field.TypeUint64))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coupontemplate.FieldID)
		for _, f := range fields {
			if !coupontemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coupontemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(coupontemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if ctuo.mutation.CreatorCleared() {
		_spec.ClearField(coupontemplate.FieldCreator, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.LastModifier(); ok {
		_spec.SetField(coupontemplate.FieldLastModifier, field.TypeJSON, value)
	}
	if ctuo.mutation.LastModifierCleared() {
		_spec.ClearField(coupontemplate.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.Remark(); ok {
		_spec.SetField(coupontemplate.FieldRemark, field.TypeString, value)
	}
	if ctuo.mutation.RemarkCleared() {
		_spec.ClearField(coupontemplate.FieldRemark, field.TypeString)
	}
	if value, ok := ctuo.mutation.Enable(); ok {
		_spec.SetField(coupontemplate.FieldEnable, field.TypeBool, value)
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.SetField(coupontemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Meta(); ok {
		_spec.SetField(coupontemplate.FieldMeta, field.TypeJSON, value)
	}
	if ctuo.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.RemovedCouponsIDs(); len(nodes) > 0 && !ctuo.mutation.CouponsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ctuo.mutation.CouponsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   coupontemplate.CouponsTable,
			Columns: []string{coupontemplate.CouponsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupon.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ctuo.modifiers...)
	_node = &CouponTemplate{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coupontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
