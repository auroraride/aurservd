// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/pointlog"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PointLog is the model entity for the PointLog schema.
type PointLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	OrderID *uint64 `json:"order_id,omitempty"`
	// 管理
	Modifier *model.Modifier `json:"modifier,omitempty"`
	// 店员
	EmployeeInfo *model.Employee `json:"employee_info,omitempty"`
	// 变动类型
	Type uint8 `json:"type,omitempty"`
	// 变动数量
	Points int64 `json:"points,omitempty"`
	// 变动结果
	After int64 `json:"after,omitempty"`
	// 原因
	Reason *string `json:"reason,omitempty"`
	// 其他信息
	Attach *model.PointLogAttach `json:"attach,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PointLogQuery when eager-loading is set.
	Edges PointLogEdges `json:"edges"`
}

// PointLogEdges holds the relations/edges for other nodes in the graph.
type PointLogEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointLogEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PointLogEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[1] {
		if e.Order == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PointLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pointlog.FieldModifier, pointlog.FieldEmployeeInfo, pointlog.FieldAttach:
			values[i] = new([]byte)
		case pointlog.FieldID, pointlog.FieldRiderID, pointlog.FieldOrderID, pointlog.FieldType, pointlog.FieldPoints, pointlog.FieldAfter:
			values[i] = new(sql.NullInt64)
		case pointlog.FieldReason:
			values[i] = new(sql.NullString)
		case pointlog.FieldCreatedAt, pointlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PointLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PointLog fields.
func (pl *PointLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pointlog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case pointlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case pointlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case pointlog.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				pl.RiderID = uint64(value.Int64)
			}
		case pointlog.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				pl.OrderID = new(uint64)
				*pl.OrderID = uint64(value.Int64)
			}
		case pointlog.FieldModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Modifier); err != nil {
					return fmt.Errorf("unmarshal field modifier: %w", err)
				}
			}
		case pointlog.FieldEmployeeInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field employee_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.EmployeeInfo); err != nil {
					return fmt.Errorf("unmarshal field employee_info: %w", err)
				}
			}
		case pointlog.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pl.Type = uint8(value.Int64)
			}
		case pointlog.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				pl.Points = value.Int64
			}
		case pointlog.FieldAfter:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field after", values[i])
			} else if value.Valid {
				pl.After = value.Int64
			}
		case pointlog.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				pl.Reason = new(string)
				*pl.Reason = value.String
			}
		case pointlog.FieldAttach:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attach", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Attach); err != nil {
					return fmt.Errorf("unmarshal field attach: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the PointLog entity.
func (pl *PointLog) QueryRider() *RiderQuery {
	return (&PointLogClient{config: pl.config}).QueryRider(pl)
}

// QueryOrder queries the "order" edge of the PointLog entity.
func (pl *PointLog) QueryOrder() *OrderQuery {
	return (&PointLogClient{config: pl.config}).QueryOrder(pl)
}

// Update returns a builder for updating this PointLog.
// Note that you need to call PointLog.Unwrap() before calling this method if this PointLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PointLog) Update() *PointLogUpdateOne {
	return (&PointLogClient{config: pl.config}).UpdateOne(pl)
}

// Unwrap unwraps the PointLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PointLog) Unwrap() *PointLog {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PointLog is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PointLog) String() string {
	var builder strings.Builder
	builder.WriteString("PointLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", pl.RiderID))
	builder.WriteString(", ")
	if v := pl.OrderID; v != nil {
		builder.WriteString("order_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("modifier=")
	builder.WriteString(fmt.Sprintf("%v", pl.Modifier))
	builder.WriteString(", ")
	builder.WriteString("employee_info=")
	builder.WriteString(fmt.Sprintf("%v", pl.EmployeeInfo))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pl.Type))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", pl.Points))
	builder.WriteString(", ")
	builder.WriteString("after=")
	builder.WriteString(fmt.Sprintf("%v", pl.After))
	builder.WriteString(", ")
	if v := pl.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("attach=")
	builder.WriteString(fmt.Sprintf("%v", pl.Attach))
	builder.WriteByte(')')
	return builder.String()
}

// PointLogs is a parsable slice of PointLog.
type PointLogs []*PointLog

func (pl PointLogs) config(cfg config) {
	for _i := range pl {
		pl[_i].config = cfg
	}
}
