// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetScrapDetailsQuery is the builder for querying AssetScrapDetails entities.
type AssetScrapDetailsQuery struct {
	config
	ctx          *QueryContext
	order        []assetscrapdetails.OrderOption
	inters       []Interceptor
	predicates   []predicate.AssetScrapDetails
	withMaterial *MaterialQuery
	withAsset    *AssetQuery
	withScrap    *AssetScrapQuery
	modifiers    []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetScrapDetailsQuery builder.
func (asdq *AssetScrapDetailsQuery) Where(ps ...predicate.AssetScrapDetails) *AssetScrapDetailsQuery {
	asdq.predicates = append(asdq.predicates, ps...)
	return asdq
}

// Limit the number of records to be returned by this query.
func (asdq *AssetScrapDetailsQuery) Limit(limit int) *AssetScrapDetailsQuery {
	asdq.ctx.Limit = &limit
	return asdq
}

// Offset to start from.
func (asdq *AssetScrapDetailsQuery) Offset(offset int) *AssetScrapDetailsQuery {
	asdq.ctx.Offset = &offset
	return asdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asdq *AssetScrapDetailsQuery) Unique(unique bool) *AssetScrapDetailsQuery {
	asdq.ctx.Unique = &unique
	return asdq
}

// Order specifies how the records should be ordered.
func (asdq *AssetScrapDetailsQuery) Order(o ...assetscrapdetails.OrderOption) *AssetScrapDetailsQuery {
	asdq.order = append(asdq.order, o...)
	return asdq
}

// QueryMaterial chains the current query on the "material" edge.
func (asdq *AssetScrapDetailsQuery) QueryMaterial() *MaterialQuery {
	query := (&MaterialClient{config: asdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, selector),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetscrapdetails.MaterialTable, assetscrapdetails.MaterialColumn),
		)
		fromU = sqlgraph.SetNeighbors(asdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (asdq *AssetScrapDetailsQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: asdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetscrapdetails.AssetTable, assetscrapdetails.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(asdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScrap chains the current query on the "scrap" edge.
func (asdq *AssetScrapDetailsQuery) QueryScrap() *AssetScrapQuery {
	query := (&AssetScrapClient{config: asdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := asdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := asdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetscrapdetails.Table, assetscrapdetails.FieldID, selector),
			sqlgraph.To(assetscrap.Table, assetscrap.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetscrapdetails.ScrapTable, assetscrapdetails.ScrapColumn),
		)
		fromU = sqlgraph.SetNeighbors(asdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetScrapDetails entity from the query.
// Returns a *NotFoundError when no AssetScrapDetails was found.
func (asdq *AssetScrapDetailsQuery) First(ctx context.Context) (*AssetScrapDetails, error) {
	nodes, err := asdq.Limit(1).All(setContextOp(ctx, asdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assetscrapdetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) FirstX(ctx context.Context) *AssetScrapDetails {
	node, err := asdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetScrapDetails ID from the query.
// Returns a *NotFoundError when no AssetScrapDetails ID was found.
func (asdq *AssetScrapDetailsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = asdq.Limit(1).IDs(setContextOp(ctx, asdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assetscrapdetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := asdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetScrapDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetScrapDetails entity is found.
// Returns a *NotFoundError when no AssetScrapDetails entities are found.
func (asdq *AssetScrapDetailsQuery) Only(ctx context.Context) (*AssetScrapDetails, error) {
	nodes, err := asdq.Limit(2).All(setContextOp(ctx, asdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assetscrapdetails.Label}
	default:
		return nil, &NotSingularError{assetscrapdetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) OnlyX(ctx context.Context) *AssetScrapDetails {
	node, err := asdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetScrapDetails ID in the query.
// Returns a *NotSingularError when more than one AssetScrapDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (asdq *AssetScrapDetailsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = asdq.Limit(2).IDs(setContextOp(ctx, asdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assetscrapdetails.Label}
	default:
		err = &NotSingularError{assetscrapdetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := asdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetScrapDetailsSlice.
func (asdq *AssetScrapDetailsQuery) All(ctx context.Context) ([]*AssetScrapDetails, error) {
	ctx = setContextOp(ctx, asdq.ctx, "All")
	if err := asdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetScrapDetails, *AssetScrapDetailsQuery]()
	return withInterceptors[[]*AssetScrapDetails](ctx, asdq, qr, asdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) AllX(ctx context.Context) []*AssetScrapDetails {
	nodes, err := asdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetScrapDetails IDs.
func (asdq *AssetScrapDetailsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if asdq.ctx.Unique == nil && asdq.path != nil {
		asdq.Unique(true)
	}
	ctx = setContextOp(ctx, asdq.ctx, "IDs")
	if err = asdq.Select(assetscrapdetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := asdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asdq *AssetScrapDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, asdq.ctx, "Count")
	if err := asdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, asdq, querierCount[*AssetScrapDetailsQuery](), asdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) CountX(ctx context.Context) int {
	count, err := asdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asdq *AssetScrapDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, asdq.ctx, "Exist")
	switch _, err := asdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (asdq *AssetScrapDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := asdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetScrapDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asdq *AssetScrapDetailsQuery) Clone() *AssetScrapDetailsQuery {
	if asdq == nil {
		return nil
	}
	return &AssetScrapDetailsQuery{
		config:       asdq.config,
		ctx:          asdq.ctx.Clone(),
		order:        append([]assetscrapdetails.OrderOption{}, asdq.order...),
		inters:       append([]Interceptor{}, asdq.inters...),
		predicates:   append([]predicate.AssetScrapDetails{}, asdq.predicates...),
		withMaterial: asdq.withMaterial.Clone(),
		withAsset:    asdq.withAsset.Clone(),
		withScrap:    asdq.withScrap.Clone(),
		// clone intermediate query.
		sql:  asdq.sql.Clone(),
		path: asdq.path,
	}
}

// WithMaterial tells the query-builder to eager-load the nodes that are connected to
// the "material" edge. The optional arguments are used to configure the query builder of the edge.
func (asdq *AssetScrapDetailsQuery) WithMaterial(opts ...func(*MaterialQuery)) *AssetScrapDetailsQuery {
	query := (&MaterialClient{config: asdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asdq.withMaterial = query
	return asdq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (asdq *AssetScrapDetailsQuery) WithAsset(opts ...func(*AssetQuery)) *AssetScrapDetailsQuery {
	query := (&AssetClient{config: asdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asdq.withAsset = query
	return asdq
}

// WithScrap tells the query-builder to eager-load the nodes that are connected to
// the "scrap" edge. The optional arguments are used to configure the query builder of the edge.
func (asdq *AssetScrapDetailsQuery) WithScrap(opts ...func(*AssetScrapQuery)) *AssetScrapDetailsQuery {
	query := (&AssetScrapClient{config: asdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	asdq.withScrap = query
	return asdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetScrapDetails.Query().
//		GroupBy(assetscrapdetails.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (asdq *AssetScrapDetailsQuery) GroupBy(field string, fields ...string) *AssetScrapDetailsGroupBy {
	asdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetScrapDetailsGroupBy{build: asdq}
	grbuild.flds = &asdq.ctx.Fields
	grbuild.label = assetscrapdetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetScrapDetails.Query().
//		Select(assetscrapdetails.FieldCreatedAt).
//		Scan(ctx, &v)
func (asdq *AssetScrapDetailsQuery) Select(fields ...string) *AssetScrapDetailsSelect {
	asdq.ctx.Fields = append(asdq.ctx.Fields, fields...)
	sbuild := &AssetScrapDetailsSelect{AssetScrapDetailsQuery: asdq}
	sbuild.label = assetscrapdetails.Label
	sbuild.flds, sbuild.scan = &asdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetScrapDetailsSelect configured with the given aggregations.
func (asdq *AssetScrapDetailsQuery) Aggregate(fns ...AggregateFunc) *AssetScrapDetailsSelect {
	return asdq.Select().Aggregate(fns...)
}

func (asdq *AssetScrapDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range asdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, asdq); err != nil {
				return err
			}
		}
	}
	for _, f := range asdq.ctx.Fields {
		if !assetscrapdetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asdq.path != nil {
		prev, err := asdq.path(ctx)
		if err != nil {
			return err
		}
		asdq.sql = prev
	}
	return nil
}

func (asdq *AssetScrapDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetScrapDetails, error) {
	var (
		nodes       = []*AssetScrapDetails{}
		_spec       = asdq.querySpec()
		loadedTypes = [3]bool{
			asdq.withMaterial != nil,
			asdq.withAsset != nil,
			asdq.withScrap != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetScrapDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetScrapDetails{config: asdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(asdq.modifiers) > 0 {
		_spec.Modifiers = asdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, asdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := asdq.withMaterial; query != nil {
		if err := asdq.loadMaterial(ctx, query, nodes, nil,
			func(n *AssetScrapDetails, e *Material) { n.Edges.Material = e }); err != nil {
			return nil, err
		}
	}
	if query := asdq.withAsset; query != nil {
		if err := asdq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetScrapDetails, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := asdq.withScrap; query != nil {
		if err := asdq.loadScrap(ctx, query, nodes, nil,
			func(n *AssetScrapDetails, e *AssetScrap) { n.Edges.Scrap = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (asdq *AssetScrapDetailsQuery) loadMaterial(ctx context.Context, query *MaterialQuery, nodes []*AssetScrapDetails, init func(*AssetScrapDetails), assign func(*AssetScrapDetails, *Material)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetScrapDetails)
	for i := range nodes {
		if nodes[i].MaterialID == nil {
			continue
		}
		fk := *nodes[i].MaterialID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(material.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "material_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (asdq *AssetScrapDetailsQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetScrapDetails, init func(*AssetScrapDetails), assign func(*AssetScrapDetails, *Asset)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetScrapDetails)
	for i := range nodes {
		fk := nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (asdq *AssetScrapDetailsQuery) loadScrap(ctx context.Context, query *AssetScrapQuery, nodes []*AssetScrapDetails, init func(*AssetScrapDetails), assign func(*AssetScrapDetails, *AssetScrap)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetScrapDetails)
	for i := range nodes {
		fk := nodes[i].ScrapID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assetscrap.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scrap_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (asdq *AssetScrapDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asdq.querySpec()
	if len(asdq.modifiers) > 0 {
		_spec.Modifiers = asdq.modifiers
	}
	_spec.Node.Columns = asdq.ctx.Fields
	if len(asdq.ctx.Fields) > 0 {
		_spec.Unique = asdq.ctx.Unique != nil && *asdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, asdq.driver, _spec)
}

func (asdq *AssetScrapDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assetscrapdetails.Table, assetscrapdetails.Columns, sqlgraph.NewFieldSpec(assetscrapdetails.FieldID, field.TypeUint64))
	_spec.From = asdq.sql
	if unique := asdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if asdq.path != nil {
		_spec.Unique = true
	}
	if fields := asdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetscrapdetails.FieldID)
		for i := range fields {
			if fields[i] != assetscrapdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if asdq.withMaterial != nil {
			_spec.Node.AddColumnOnce(assetscrapdetails.FieldMaterialID)
		}
		if asdq.withAsset != nil {
			_spec.Node.AddColumnOnce(assetscrapdetails.FieldAssetID)
		}
		if asdq.withScrap != nil {
			_spec.Node.AddColumnOnce(assetscrapdetails.FieldScrapID)
		}
	}
	if ps := asdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asdq *AssetScrapDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asdq.driver.Dialect())
	t1 := builder.Table(assetscrapdetails.Table)
	columns := asdq.ctx.Fields
	if len(columns) == 0 {
		columns = assetscrapdetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asdq.sql != nil {
		selector = asdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if asdq.ctx.Unique != nil && *asdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range asdq.modifiers {
		m(selector)
	}
	for _, p := range asdq.predicates {
		p(selector)
	}
	for _, p := range asdq.order {
		p(selector)
	}
	if offset := asdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (asdq *AssetScrapDetailsQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetScrapDetailsSelect {
	asdq.modifiers = append(asdq.modifiers, modifiers...)
	return asdq.Select()
}

type AssetScrapDetailsQueryWith string

var (
	AssetScrapDetailsQueryWithMaterial AssetScrapDetailsQueryWith = "Material"
	AssetScrapDetailsQueryWithAsset    AssetScrapDetailsQueryWith = "Asset"
	AssetScrapDetailsQueryWithScrap    AssetScrapDetailsQueryWith = "Scrap"
)

func (asdq *AssetScrapDetailsQuery) With(withEdges ...AssetScrapDetailsQueryWith) *AssetScrapDetailsQuery {
	for _, v := range withEdges {
		switch v {
		case AssetScrapDetailsQueryWithMaterial:
			asdq.WithMaterial()
		case AssetScrapDetailsQueryWithAsset:
			asdq.WithAsset()
		case AssetScrapDetailsQueryWithScrap:
			asdq.WithScrap()
		}
	}
	return asdq
}

// AssetScrapDetailsGroupBy is the group-by builder for AssetScrapDetails entities.
type AssetScrapDetailsGroupBy struct {
	selector
	build *AssetScrapDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asdgb *AssetScrapDetailsGroupBy) Aggregate(fns ...AggregateFunc) *AssetScrapDetailsGroupBy {
	asdgb.fns = append(asdgb.fns, fns...)
	return asdgb
}

// Scan applies the selector query and scans the result into the given value.
func (asdgb *AssetScrapDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, asdgb.build.ctx, "GroupBy")
	if err := asdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetScrapDetailsQuery, *AssetScrapDetailsGroupBy](ctx, asdgb.build, asdgb, asdgb.build.inters, v)
}

func (asdgb *AssetScrapDetailsGroupBy) sqlScan(ctx context.Context, root *AssetScrapDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(asdgb.fns))
	for _, fn := range asdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*asdgb.flds)+len(asdgb.fns))
		for _, f := range *asdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*asdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetScrapDetailsSelect is the builder for selecting fields of AssetScrapDetails entities.
type AssetScrapDetailsSelect struct {
	*AssetScrapDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (asds *AssetScrapDetailsSelect) Aggregate(fns ...AggregateFunc) *AssetScrapDetailsSelect {
	asds.fns = append(asds.fns, fns...)
	return asds
}

// Scan applies the selector query and scans the result into the given value.
func (asds *AssetScrapDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, asds.ctx, "Select")
	if err := asds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetScrapDetailsQuery, *AssetScrapDetailsSelect](ctx, asds.AssetScrapDetailsQuery, asds, asds.inters, v)
}

func (asds *AssetScrapDetailsSelect) sqlScan(ctx context.Context, root *AssetScrapDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(asds.fns))
	for _, fn := range asds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*asds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (asds *AssetScrapDetailsSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetScrapDetailsSelect {
	asds.modifiers = append(asds.modifiers, modifiers...)
	return asds
}
