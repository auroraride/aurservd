// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// Exception is the model entity for the Exception schema.
type Exception struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// CityID holds the value of the "city_id" field.
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	// 店员ID
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// Status holds the value of the "status" field.
	// 异常状态
	Status uint8 `json:"status,omitempty"`
	// StoreID holds the value of the "store_id" field.
	// 门店ID
	StoreID uint64 `json:"store_id,omitempty"`
	// Name holds the value of the "name" field.
	// 物资名称
	Name string `json:"name,omitempty"`
	// Voltage holds the value of the "voltage" field.
	// 电池型号(电压)
	Voltage *float64 `json:"voltage,omitempty"`
	// Num holds the value of the "num" field.
	// 异常数量
	Num int `json:"num,omitempty"`
	// Reason holds the value of the "reason" field.
	// 异常原因
	Reason string `json:"reason,omitempty"`
	// Description holds the value of the "description" field.
	// 异常描述
	Description string `json:"description,omitempty"`
	// Attachments holds the value of the "attachments" field.
	// 附件
	Attachments []string `json:"attachments,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExceptionQuery when eager-loading is set.
	Edges ExceptionEdges `json:"edges"`
}

// ExceptionEdges holds the relations/edges for other nodes in the graph.
type ExceptionEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExceptionEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExceptionEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExceptionEdges) StoreOrErr() (*Store, error) {
	if e.loadedTypes[2] {
		if e.Store == nil {
			// The edge store was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: store.Label}
		}
		return e.Store, nil
	}
	return nil, &NotLoadedError{edge: "store"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exception) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case exception.FieldCreator, exception.FieldLastModifier, exception.FieldAttachments:
			values[i] = new([]byte)
		case exception.FieldVoltage:
			values[i] = new(sql.NullFloat64)
		case exception.FieldID, exception.FieldCityID, exception.FieldEmployeeID, exception.FieldStatus, exception.FieldStoreID, exception.FieldNum:
			values[i] = new(sql.NullInt64)
		case exception.FieldRemark, exception.FieldName, exception.FieldReason, exception.FieldDescription:
			values[i] = new(sql.NullString)
		case exception.FieldCreatedAt, exception.FieldUpdatedAt, exception.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Exception", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exception fields.
func (e *Exception) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exception.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case exception.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case exception.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case exception.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case exception.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case exception.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case exception.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case exception.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				e.CityID = uint64(value.Int64)
			}
		case exception.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				e.EmployeeID = uint64(value.Int64)
			}
		case exception.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = uint8(value.Int64)
			}
		case exception.FieldStoreID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field store_id", values[i])
			} else if value.Valid {
				e.StoreID = uint64(value.Int64)
			}
		case exception.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case exception.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				e.Voltage = new(float64)
				*e.Voltage = value.Float64
			}
		case exception.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				e.Num = int(value.Int64)
			}
		case exception.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				e.Reason = value.String
			}
		case exception.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case exception.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Exception entity.
func (e *Exception) QueryCity() *CityQuery {
	return (&ExceptionClient{config: e.config}).QueryCity(e)
}

// QueryEmployee queries the "employee" edge of the Exception entity.
func (e *Exception) QueryEmployee() *EmployeeQuery {
	return (&ExceptionClient{config: e.config}).QueryEmployee(e)
}

// QueryStore queries the "store" edge of the Exception entity.
func (e *Exception) QueryStore() *StoreQuery {
	return (&ExceptionClient{config: e.config}).QueryStore(e)
}

// Update returns a builder for updating this Exception.
// Note that you need to call Exception.Unwrap() before calling this method if this Exception
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exception) Update() *ExceptionUpdateOne {
	return (&ExceptionClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Exception entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exception) Unwrap() *Exception {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exception is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exception) String() string {
	var builder strings.Builder
	builder.WriteString("Exception(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	if v := e.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CityID))
	builder.WriteString(", employee_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", store_id=")
	builder.WriteString(fmt.Sprintf("%v", e.StoreID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	if v := e.Voltage; v != nil {
		builder.WriteString(", voltage=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", num=")
	builder.WriteString(fmt.Sprintf("%v", e.Num))
	builder.WriteString(", reason=")
	builder.WriteString(e.Reason)
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteString(", attachments=")
	builder.WriteString(fmt.Sprintf("%v", e.Attachments))
	builder.WriteByte(')')
	return builder.String()
}

// Exceptions is a parsable slice of Exception.
type Exceptions []*Exception

func (e Exceptions) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
