// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseinvoice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// EnterpriseInvoiceUpdate is the builder for updating EnterpriseInvoice entities.
type EnterpriseInvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *EnterpriseInvoiceMutation
}

// Where appends a list predicates to the EnterpriseInvoiceUpdate builder.
func (eiu *EnterpriseInvoiceUpdate) Where(ps ...predicate.EnterpriseInvoice) *EnterpriseInvoiceUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetUpdatedAt sets the "updated_at" field.
func (eiu *EnterpriseInvoiceUpdate) SetUpdatedAt(t time.Time) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetUpdatedAt(t)
	return eiu
}

// SetDeletedAt sets the "deleted_at" field.
func (eiu *EnterpriseInvoiceUpdate) SetDeletedAt(t time.Time) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetDeletedAt(t)
	return eiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eiu *EnterpriseInvoiceUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseInvoiceUpdate {
	if t != nil {
		eiu.SetDeletedAt(*t)
	}
	return eiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eiu *EnterpriseInvoiceUpdate) ClearDeletedAt() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearDeletedAt()
	return eiu
}

// SetLastModifier sets the "last_modifier" field.
func (eiu *EnterpriseInvoiceUpdate) SetLastModifier(m *model.Modifier) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetLastModifier(m)
	return eiu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eiu *EnterpriseInvoiceUpdate) ClearLastModifier() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearLastModifier()
	return eiu
}

// SetRemark sets the "remark" field.
func (eiu *EnterpriseInvoiceUpdate) SetRemark(s string) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetRemark(s)
	return eiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eiu *EnterpriseInvoiceUpdate) SetNillableRemark(s *string) *EnterpriseInvoiceUpdate {
	if s != nil {
		eiu.SetRemark(*s)
	}
	return eiu
}

// ClearRemark clears the value of the "remark" field.
func (eiu *EnterpriseInvoiceUpdate) ClearRemark() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearRemark()
	return eiu
}

// SetStationID sets the "station_id" field.
func (eiu *EnterpriseInvoiceUpdate) SetStationID(u uint64) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetStationID(u)
	return eiu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (eiu *EnterpriseInvoiceUpdate) SetEnterpriseID(u uint64) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetEnterpriseID(u)
	return eiu
}

// SetRiderID sets the "rider_id" field.
func (eiu *EnterpriseInvoiceUpdate) SetRiderID(u uint64) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetRiderID(u)
	return eiu
}

// SetPrice sets the "price" field.
func (eiu *EnterpriseInvoiceUpdate) SetPrice(f float64) *EnterpriseInvoiceUpdate {
	eiu.mutation.ResetPrice()
	eiu.mutation.SetPrice(f)
	return eiu
}

// AddPrice adds f to the "price" field.
func (eiu *EnterpriseInvoiceUpdate) AddPrice(f float64) *EnterpriseInvoiceUpdate {
	eiu.mutation.AddPrice(f)
	return eiu
}

// SetStatementID sets the "statement_id" field.
func (eiu *EnterpriseInvoiceUpdate) SetStatementID(u uint64) *EnterpriseInvoiceUpdate {
	eiu.mutation.SetStatementID(u)
	return eiu
}

// SetNillableStatementID sets the "statement_id" field if the given value is not nil.
func (eiu *EnterpriseInvoiceUpdate) SetNillableStatementID(u *uint64) *EnterpriseInvoiceUpdate {
	if u != nil {
		eiu.SetStatementID(*u)
	}
	return eiu
}

// ClearStatementID clears the value of the "statement_id" field.
func (eiu *EnterpriseInvoiceUpdate) ClearStatementID() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearStatementID()
	return eiu
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (eiu *EnterpriseInvoiceUpdate) SetStation(e *EnterpriseStation) *EnterpriseInvoiceUpdate {
	return eiu.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (eiu *EnterpriseInvoiceUpdate) SetEnterprise(e *Enterprise) *EnterpriseInvoiceUpdate {
	return eiu.SetEnterpriseID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eiu *EnterpriseInvoiceUpdate) SetRider(r *Rider) *EnterpriseInvoiceUpdate {
	return eiu.SetRiderID(r.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (eiu *EnterpriseInvoiceUpdate) SetStatement(e *EnterpriseStatement) *EnterpriseInvoiceUpdate {
	return eiu.SetStatementID(e.ID)
}

// Mutation returns the EnterpriseInvoiceMutation object of the builder.
func (eiu *EnterpriseInvoiceUpdate) Mutation() *EnterpriseInvoiceMutation {
	return eiu.mutation
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (eiu *EnterpriseInvoiceUpdate) ClearStation() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearStation()
	return eiu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (eiu *EnterpriseInvoiceUpdate) ClearEnterprise() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearEnterprise()
	return eiu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eiu *EnterpriseInvoiceUpdate) ClearRider() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearRider()
	return eiu
}

// ClearStatement clears the "statement" edge to the EnterpriseStatement entity.
func (eiu *EnterpriseInvoiceUpdate) ClearStatement() *EnterpriseInvoiceUpdate {
	eiu.mutation.ClearStatement()
	return eiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *EnterpriseInvoiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eiu.defaults(); err != nil {
		return 0, err
	}
	if len(eiu.hooks) == 0 {
		if err = eiu.check(); err != nil {
			return 0, err
		}
		affected, err = eiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eiu.check(); err != nil {
				return 0, err
			}
			eiu.mutation = mutation
			affected, err = eiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eiu.hooks) - 1; i >= 0; i-- {
			if eiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *EnterpriseInvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *EnterpriseInvoiceUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *EnterpriseInvoiceUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiu *EnterpriseInvoiceUpdate) defaults() error {
	if _, ok := eiu.mutation.UpdatedAt(); !ok {
		if enterpriseinvoice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseinvoice.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseinvoice.UpdateDefaultUpdatedAt()
		eiu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eiu *EnterpriseInvoiceUpdate) check() error {
	if _, ok := eiu.mutation.StationID(); eiu.mutation.StationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.station"`)
	}
	if _, ok := eiu.mutation.EnterpriseID(); eiu.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.enterprise"`)
	}
	if _, ok := eiu.mutation.RiderID(); eiu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.rider"`)
	}
	return nil
}

func (eiu *EnterpriseInvoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterpriseinvoice.Table,
			Columns: enterpriseinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseinvoice.FieldID,
			},
		},
	}
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldUpdatedAt,
		})
	}
	if value, ok := eiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldDeletedAt,
		})
	}
	if eiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterpriseinvoice.FieldDeletedAt,
		})
	}
	if eiu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterpriseinvoice.FieldCreator,
		})
	}
	if value, ok := eiu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterpriseinvoice.FieldLastModifier,
		})
	}
	if eiu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterpriseinvoice.FieldLastModifier,
		})
	}
	if value, ok := eiu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterpriseinvoice.FieldRemark,
		})
	}
	if eiu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterpriseinvoice.FieldRemark,
		})
	}
	if value, ok := eiu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterpriseinvoice.FieldPrice,
		})
	}
	if value, ok := eiu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterpriseinvoice.FieldPrice,
		})
	}
	if eiu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.StationTable,
			Columns: []string{enterpriseinvoice.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.StationTable,
			Columns: []string{enterpriseinvoice.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.EnterpriseTable,
			Columns: []string{enterpriseinvoice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.EnterpriseTable,
			Columns: []string{enterpriseinvoice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.RiderTable,
			Columns: []string{enterpriseinvoice.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.RiderTable,
			Columns: []string{enterpriseinvoice.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiu.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.StatementTable,
			Columns: []string{enterpriseinvoice.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiu.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.StatementTable,
			Columns: []string{enterpriseinvoice.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseinvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EnterpriseInvoiceUpdateOne is the builder for updating a single EnterpriseInvoice entity.
type EnterpriseInvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnterpriseInvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetUpdatedAt(t)
	return eiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetDeletedAt(t time.Time) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetDeletedAt(t)
	return eiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eiuo *EnterpriseInvoiceUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseInvoiceUpdateOne {
	if t != nil {
		eiuo.SetDeletedAt(*t)
	}
	return eiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearDeletedAt() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearDeletedAt()
	return eiuo
}

// SetLastModifier sets the "last_modifier" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetLastModifier(m)
	return eiuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearLastModifier() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearLastModifier()
	return eiuo
}

// SetRemark sets the "remark" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetRemark(s string) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetRemark(s)
	return eiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eiuo *EnterpriseInvoiceUpdateOne) SetNillableRemark(s *string) *EnterpriseInvoiceUpdateOne {
	if s != nil {
		eiuo.SetRemark(*s)
	}
	return eiuo
}

// ClearRemark clears the value of the "remark" field.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearRemark() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearRemark()
	return eiuo
}

// SetStationID sets the "station_id" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetStationID(u uint64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetStationID(u)
	return eiuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetEnterpriseID(u uint64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetEnterpriseID(u)
	return eiuo
}

// SetRiderID sets the "rider_id" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetRiderID(u uint64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetRiderID(u)
	return eiuo
}

// SetPrice sets the "price" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetPrice(f float64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ResetPrice()
	eiuo.mutation.SetPrice(f)
	return eiuo
}

// AddPrice adds f to the "price" field.
func (eiuo *EnterpriseInvoiceUpdateOne) AddPrice(f float64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.AddPrice(f)
	return eiuo
}

// SetStatementID sets the "statement_id" field.
func (eiuo *EnterpriseInvoiceUpdateOne) SetStatementID(u uint64) *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.SetStatementID(u)
	return eiuo
}

// SetNillableStatementID sets the "statement_id" field if the given value is not nil.
func (eiuo *EnterpriseInvoiceUpdateOne) SetNillableStatementID(u *uint64) *EnterpriseInvoiceUpdateOne {
	if u != nil {
		eiuo.SetStatementID(*u)
	}
	return eiuo
}

// ClearStatementID clears the value of the "statement_id" field.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearStatementID() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearStatementID()
	return eiuo
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (eiuo *EnterpriseInvoiceUpdateOne) SetStation(e *EnterpriseStation) *EnterpriseInvoiceUpdateOne {
	return eiuo.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (eiuo *EnterpriseInvoiceUpdateOne) SetEnterprise(e *Enterprise) *EnterpriseInvoiceUpdateOne {
	return eiuo.SetEnterpriseID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eiuo *EnterpriseInvoiceUpdateOne) SetRider(r *Rider) *EnterpriseInvoiceUpdateOne {
	return eiuo.SetRiderID(r.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (eiuo *EnterpriseInvoiceUpdateOne) SetStatement(e *EnterpriseStatement) *EnterpriseInvoiceUpdateOne {
	return eiuo.SetStatementID(e.ID)
}

// Mutation returns the EnterpriseInvoiceMutation object of the builder.
func (eiuo *EnterpriseInvoiceUpdateOne) Mutation() *EnterpriseInvoiceMutation {
	return eiuo.mutation
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearStation() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearStation()
	return eiuo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearEnterprise() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearEnterprise()
	return eiuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearRider() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearRider()
	return eiuo
}

// ClearStatement clears the "statement" edge to the EnterpriseStatement entity.
func (eiuo *EnterpriseInvoiceUpdateOne) ClearStatement() *EnterpriseInvoiceUpdateOne {
	eiuo.mutation.ClearStatement()
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *EnterpriseInvoiceUpdateOne) Select(field string, fields ...string) *EnterpriseInvoiceUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated EnterpriseInvoice entity.
func (eiuo *EnterpriseInvoiceUpdateOne) Save(ctx context.Context) (*EnterpriseInvoice, error) {
	var (
		err  error
		node *EnterpriseInvoice
	)
	if err := eiuo.defaults(); err != nil {
		return nil, err
	}
	if len(eiuo.hooks) == 0 {
		if err = eiuo.check(); err != nil {
			return nil, err
		}
		node, err = eiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eiuo.check(); err != nil {
				return nil, err
			}
			eiuo.mutation = mutation
			node, err = eiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eiuo.hooks) - 1; i >= 0; i-- {
			if eiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseInvoice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseInvoiceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *EnterpriseInvoiceUpdateOne) SaveX(ctx context.Context) *EnterpriseInvoice {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *EnterpriseInvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *EnterpriseInvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiuo *EnterpriseInvoiceUpdateOne) defaults() error {
	if _, ok := eiuo.mutation.UpdatedAt(); !ok {
		if enterpriseinvoice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseinvoice.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseinvoice.UpdateDefaultUpdatedAt()
		eiuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eiuo *EnterpriseInvoiceUpdateOne) check() error {
	if _, ok := eiuo.mutation.StationID(); eiuo.mutation.StationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.station"`)
	}
	if _, ok := eiuo.mutation.EnterpriseID(); eiuo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.enterprise"`)
	}
	if _, ok := eiuo.mutation.RiderID(); eiuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseInvoice.rider"`)
	}
	return nil
}

func (eiuo *EnterpriseInvoiceUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseInvoice, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterpriseinvoice.Table,
			Columns: enterpriseinvoice.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseinvoice.FieldID,
			},
		},
	}
	id, ok := eiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseInvoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterpriseinvoice.FieldID)
		for _, f := range fields {
			if !enterpriseinvoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterpriseinvoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldUpdatedAt,
		})
	}
	if value, ok := eiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldDeletedAt,
		})
	}
	if eiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: enterpriseinvoice.FieldDeletedAt,
		})
	}
	if eiuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterpriseinvoice.FieldCreator,
		})
	}
	if value, ok := eiuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterpriseinvoice.FieldLastModifier,
		})
	}
	if eiuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: enterpriseinvoice.FieldLastModifier,
		})
	}
	if value, ok := eiuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterpriseinvoice.FieldRemark,
		})
	}
	if eiuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: enterpriseinvoice.FieldRemark,
		})
	}
	if value, ok := eiuo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterpriseinvoice.FieldPrice,
		})
	}
	if value, ok := eiuo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterpriseinvoice.FieldPrice,
		})
	}
	if eiuo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.StationTable,
			Columns: []string{enterpriseinvoice.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.StationTable,
			Columns: []string{enterpriseinvoice.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.EnterpriseTable,
			Columns: []string{enterpriseinvoice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.EnterpriseTable,
			Columns: []string{enterpriseinvoice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.RiderTable,
			Columns: []string{enterpriseinvoice.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.RiderTable,
			Columns: []string{enterpriseinvoice.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eiuo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.StatementTable,
			Columns: []string{enterpriseinvoice.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eiuo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.StatementTable,
			Columns: []string{enterpriseinvoice.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnterpriseInvoice{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseinvoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
