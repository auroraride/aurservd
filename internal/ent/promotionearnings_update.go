// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotionearnings"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionEarningsUpdate is the builder for updating PromotionEarnings entities.
type PromotionEarningsUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionEarningsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionEarningsUpdate builder.
func (peu *PromotionEarningsUpdate) Where(ps ...predicate.PromotionEarnings) *PromotionEarningsUpdate {
	peu.mutation.Where(ps...)
	return peu
}

// SetUpdatedAt sets the "updated_at" field.
func (peu *PromotionEarningsUpdate) SetUpdatedAt(t time.Time) *PromotionEarningsUpdate {
	peu.mutation.SetUpdatedAt(t)
	return peu
}

// SetDeletedAt sets the "deleted_at" field.
func (peu *PromotionEarningsUpdate) SetDeletedAt(t time.Time) *PromotionEarningsUpdate {
	peu.mutation.SetDeletedAt(t)
	return peu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableDeletedAt(t *time.Time) *PromotionEarningsUpdate {
	if t != nil {
		peu.SetDeletedAt(*t)
	}
	return peu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (peu *PromotionEarningsUpdate) ClearDeletedAt() *PromotionEarningsUpdate {
	peu.mutation.ClearDeletedAt()
	return peu
}

// SetLastModifier sets the "last_modifier" field.
func (peu *PromotionEarningsUpdate) SetLastModifier(m *model.Modifier) *PromotionEarningsUpdate {
	peu.mutation.SetLastModifier(m)
	return peu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (peu *PromotionEarningsUpdate) ClearLastModifier() *PromotionEarningsUpdate {
	peu.mutation.ClearLastModifier()
	return peu
}

// SetRemark sets the "remark" field.
func (peu *PromotionEarningsUpdate) SetRemark(s string) *PromotionEarningsUpdate {
	peu.mutation.SetRemark(s)
	return peu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableRemark(s *string) *PromotionEarningsUpdate {
	if s != nil {
		peu.SetRemark(*s)
	}
	return peu
}

// ClearRemark clears the value of the "remark" field.
func (peu *PromotionEarningsUpdate) ClearRemark() *PromotionEarningsUpdate {
	peu.mutation.ClearRemark()
	return peu
}

// SetCommissionID sets the "commission_id" field.
func (peu *PromotionEarningsUpdate) SetCommissionID(u uint64) *PromotionEarningsUpdate {
	peu.mutation.SetCommissionID(u)
	return peu
}

// SetMemberID sets the "member_id" field.
func (peu *PromotionEarningsUpdate) SetMemberID(u uint64) *PromotionEarningsUpdate {
	peu.mutation.SetMemberID(u)
	return peu
}

// SetRiderID sets the "rider_id" field.
func (peu *PromotionEarningsUpdate) SetRiderID(u uint64) *PromotionEarningsUpdate {
	peu.mutation.SetRiderID(u)
	return peu
}

// SetOrderID sets the "order_id" field.
func (peu *PromotionEarningsUpdate) SetOrderID(u uint64) *PromotionEarningsUpdate {
	peu.mutation.SetOrderID(u)
	return peu
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableOrderID(u *uint64) *PromotionEarningsUpdate {
	if u != nil {
		peu.SetOrderID(*u)
	}
	return peu
}

// ClearOrderID clears the value of the "order_id" field.
func (peu *PromotionEarningsUpdate) ClearOrderID() *PromotionEarningsUpdate {
	peu.mutation.ClearOrderID()
	return peu
}

// SetPlanID sets the "plan_id" field.
func (peu *PromotionEarningsUpdate) SetPlanID(u uint64) *PromotionEarningsUpdate {
	peu.mutation.SetPlanID(u)
	return peu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillablePlanID(u *uint64) *PromotionEarningsUpdate {
	if u != nil {
		peu.SetPlanID(*u)
	}
	return peu
}

// ClearPlanID clears the value of the "plan_id" field.
func (peu *PromotionEarningsUpdate) ClearPlanID() *PromotionEarningsUpdate {
	peu.mutation.ClearPlanID()
	return peu
}

// SetStatus sets the "status" field.
func (peu *PromotionEarningsUpdate) SetStatus(u uint8) *PromotionEarningsUpdate {
	peu.mutation.ResetStatus()
	peu.mutation.SetStatus(u)
	return peu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableStatus(u *uint8) *PromotionEarningsUpdate {
	if u != nil {
		peu.SetStatus(*u)
	}
	return peu
}

// AddStatus adds u to the "status" field.
func (peu *PromotionEarningsUpdate) AddStatus(u int8) *PromotionEarningsUpdate {
	peu.mutation.AddStatus(u)
	return peu
}

// SetAmount sets the "amount" field.
func (peu *PromotionEarningsUpdate) SetAmount(f float64) *PromotionEarningsUpdate {
	peu.mutation.ResetAmount()
	peu.mutation.SetAmount(f)
	return peu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableAmount(f *float64) *PromotionEarningsUpdate {
	if f != nil {
		peu.SetAmount(*f)
	}
	return peu
}

// AddAmount adds f to the "amount" field.
func (peu *PromotionEarningsUpdate) AddAmount(f float64) *PromotionEarningsUpdate {
	peu.mutation.AddAmount(f)
	return peu
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (peu *PromotionEarningsUpdate) SetCommissionRuleKey(s string) *PromotionEarningsUpdate {
	peu.mutation.SetCommissionRuleKey(s)
	return peu
}

// SetNillableCommissionRuleKey sets the "commission_rule_key" field if the given value is not nil.
func (peu *PromotionEarningsUpdate) SetNillableCommissionRuleKey(s *string) *PromotionEarningsUpdate {
	if s != nil {
		peu.SetCommissionRuleKey(*s)
	}
	return peu
}

// ClearCommissionRuleKey clears the value of the "commission_rule_key" field.
func (peu *PromotionEarningsUpdate) ClearCommissionRuleKey() *PromotionEarningsUpdate {
	peu.mutation.ClearCommissionRuleKey()
	return peu
}

// SetCommission sets the "commission" edge to the PromotionCommission entity.
func (peu *PromotionEarningsUpdate) SetCommission(p *PromotionCommission) *PromotionEarningsUpdate {
	return peu.SetCommissionID(p.ID)
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (peu *PromotionEarningsUpdate) SetMember(p *PromotionMember) *PromotionEarningsUpdate {
	return peu.SetMemberID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (peu *PromotionEarningsUpdate) SetRider(r *Rider) *PromotionEarningsUpdate {
	return peu.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (peu *PromotionEarningsUpdate) SetOrder(o *Order) *PromotionEarningsUpdate {
	return peu.SetOrderID(o.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (peu *PromotionEarningsUpdate) SetPlan(p *Plan) *PromotionEarningsUpdate {
	return peu.SetPlanID(p.ID)
}

// Mutation returns the PromotionEarningsMutation object of the builder.
func (peu *PromotionEarningsUpdate) Mutation() *PromotionEarningsMutation {
	return peu.mutation
}

// ClearCommission clears the "commission" edge to the PromotionCommission entity.
func (peu *PromotionEarningsUpdate) ClearCommission() *PromotionEarningsUpdate {
	peu.mutation.ClearCommission()
	return peu
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (peu *PromotionEarningsUpdate) ClearMember() *PromotionEarningsUpdate {
	peu.mutation.ClearMember()
	return peu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (peu *PromotionEarningsUpdate) ClearRider() *PromotionEarningsUpdate {
	peu.mutation.ClearRider()
	return peu
}

// ClearOrder clears the "order" edge to the Order entity.
func (peu *PromotionEarningsUpdate) ClearOrder() *PromotionEarningsUpdate {
	peu.mutation.ClearOrder()
	return peu
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (peu *PromotionEarningsUpdate) ClearPlan() *PromotionEarningsUpdate {
	peu.mutation.ClearPlan()
	return peu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (peu *PromotionEarningsUpdate) Save(ctx context.Context) (int, error) {
	if err := peu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, peu.sqlSave, peu.mutation, peu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peu *PromotionEarningsUpdate) SaveX(ctx context.Context) int {
	affected, err := peu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (peu *PromotionEarningsUpdate) Exec(ctx context.Context) error {
	_, err := peu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peu *PromotionEarningsUpdate) ExecX(ctx context.Context) {
	if err := peu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (peu *PromotionEarningsUpdate) defaults() error {
	if _, ok := peu.mutation.UpdatedAt(); !ok {
		if promotionearnings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionearnings.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionearnings.UpdateDefaultUpdatedAt()
		peu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (peu *PromotionEarningsUpdate) check() error {
	if _, ok := peu.mutation.CommissionID(); peu.mutation.CommissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.commission"`)
	}
	if _, ok := peu.mutation.MemberID(); peu.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.member"`)
	}
	if _, ok := peu.mutation.RiderID(); peu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (peu *PromotionEarningsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionEarningsUpdate {
	peu.modifiers = append(peu.modifiers, modifiers...)
	return peu
}

func (peu *PromotionEarningsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := peu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionearnings.Table, promotionearnings.Columns, sqlgraph.NewFieldSpec(promotionearnings.FieldID, field.TypeUint64))
	if ps := peu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionearnings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := peu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionearnings.FieldDeletedAt, field.TypeTime, value)
	}
	if peu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionearnings.FieldDeletedAt, field.TypeTime)
	}
	if peu.mutation.CreatorCleared() {
		_spec.ClearField(promotionearnings.FieldCreator, field.TypeJSON)
	}
	if value, ok := peu.mutation.LastModifier(); ok {
		_spec.SetField(promotionearnings.FieldLastModifier, field.TypeJSON, value)
	}
	if peu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionearnings.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := peu.mutation.Remark(); ok {
		_spec.SetField(promotionearnings.FieldRemark, field.TypeString, value)
	}
	if peu.mutation.RemarkCleared() {
		_spec.ClearField(promotionearnings.FieldRemark, field.TypeString)
	}
	if value, ok := peu.mutation.Status(); ok {
		_spec.SetField(promotionearnings.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := peu.mutation.AddedStatus(); ok {
		_spec.AddField(promotionearnings.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := peu.mutation.Amount(); ok {
		_spec.SetField(promotionearnings.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.AddedAmount(); ok {
		_spec.AddField(promotionearnings.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := peu.mutation.CommissionRuleKey(); ok {
		_spec.SetField(promotionearnings.FieldCommissionRuleKey, field.TypeString, value)
	}
	if peu.mutation.CommissionRuleKeyCleared() {
		_spec.ClearField(promotionearnings.FieldCommissionRuleKey, field.TypeString)
	}
	if peu.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.OrderTable,
			Columns: []string{promotionearnings.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.OrderTable,
			Columns: []string{promotionearnings.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.PlanTable,
			Columns: []string{promotionearnings.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.PlanTable,
			Columns: []string{promotionearnings.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(peu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, peu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionearnings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	peu.mutation.done = true
	return n, nil
}

// PromotionEarningsUpdateOne is the builder for updating a single PromotionEarnings entity.
type PromotionEarningsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionEarningsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (peuo *PromotionEarningsUpdateOne) SetUpdatedAt(t time.Time) *PromotionEarningsUpdateOne {
	peuo.mutation.SetUpdatedAt(t)
	return peuo
}

// SetDeletedAt sets the "deleted_at" field.
func (peuo *PromotionEarningsUpdateOne) SetDeletedAt(t time.Time) *PromotionEarningsUpdateOne {
	peuo.mutation.SetDeletedAt(t)
	return peuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionEarningsUpdateOne {
	if t != nil {
		peuo.SetDeletedAt(*t)
	}
	return peuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (peuo *PromotionEarningsUpdateOne) ClearDeletedAt() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearDeletedAt()
	return peuo
}

// SetLastModifier sets the "last_modifier" field.
func (peuo *PromotionEarningsUpdateOne) SetLastModifier(m *model.Modifier) *PromotionEarningsUpdateOne {
	peuo.mutation.SetLastModifier(m)
	return peuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (peuo *PromotionEarningsUpdateOne) ClearLastModifier() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearLastModifier()
	return peuo
}

// SetRemark sets the "remark" field.
func (peuo *PromotionEarningsUpdateOne) SetRemark(s string) *PromotionEarningsUpdateOne {
	peuo.mutation.SetRemark(s)
	return peuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableRemark(s *string) *PromotionEarningsUpdateOne {
	if s != nil {
		peuo.SetRemark(*s)
	}
	return peuo
}

// ClearRemark clears the value of the "remark" field.
func (peuo *PromotionEarningsUpdateOne) ClearRemark() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearRemark()
	return peuo
}

// SetCommissionID sets the "commission_id" field.
func (peuo *PromotionEarningsUpdateOne) SetCommissionID(u uint64) *PromotionEarningsUpdateOne {
	peuo.mutation.SetCommissionID(u)
	return peuo
}

// SetMemberID sets the "member_id" field.
func (peuo *PromotionEarningsUpdateOne) SetMemberID(u uint64) *PromotionEarningsUpdateOne {
	peuo.mutation.SetMemberID(u)
	return peuo
}

// SetRiderID sets the "rider_id" field.
func (peuo *PromotionEarningsUpdateOne) SetRiderID(u uint64) *PromotionEarningsUpdateOne {
	peuo.mutation.SetRiderID(u)
	return peuo
}

// SetOrderID sets the "order_id" field.
func (peuo *PromotionEarningsUpdateOne) SetOrderID(u uint64) *PromotionEarningsUpdateOne {
	peuo.mutation.SetOrderID(u)
	return peuo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableOrderID(u *uint64) *PromotionEarningsUpdateOne {
	if u != nil {
		peuo.SetOrderID(*u)
	}
	return peuo
}

// ClearOrderID clears the value of the "order_id" field.
func (peuo *PromotionEarningsUpdateOne) ClearOrderID() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearOrderID()
	return peuo
}

// SetPlanID sets the "plan_id" field.
func (peuo *PromotionEarningsUpdateOne) SetPlanID(u uint64) *PromotionEarningsUpdateOne {
	peuo.mutation.SetPlanID(u)
	return peuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillablePlanID(u *uint64) *PromotionEarningsUpdateOne {
	if u != nil {
		peuo.SetPlanID(*u)
	}
	return peuo
}

// ClearPlanID clears the value of the "plan_id" field.
func (peuo *PromotionEarningsUpdateOne) ClearPlanID() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearPlanID()
	return peuo
}

// SetStatus sets the "status" field.
func (peuo *PromotionEarningsUpdateOne) SetStatus(u uint8) *PromotionEarningsUpdateOne {
	peuo.mutation.ResetStatus()
	peuo.mutation.SetStatus(u)
	return peuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableStatus(u *uint8) *PromotionEarningsUpdateOne {
	if u != nil {
		peuo.SetStatus(*u)
	}
	return peuo
}

// AddStatus adds u to the "status" field.
func (peuo *PromotionEarningsUpdateOne) AddStatus(u int8) *PromotionEarningsUpdateOne {
	peuo.mutation.AddStatus(u)
	return peuo
}

// SetAmount sets the "amount" field.
func (peuo *PromotionEarningsUpdateOne) SetAmount(f float64) *PromotionEarningsUpdateOne {
	peuo.mutation.ResetAmount()
	peuo.mutation.SetAmount(f)
	return peuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableAmount(f *float64) *PromotionEarningsUpdateOne {
	if f != nil {
		peuo.SetAmount(*f)
	}
	return peuo
}

// AddAmount adds f to the "amount" field.
func (peuo *PromotionEarningsUpdateOne) AddAmount(f float64) *PromotionEarningsUpdateOne {
	peuo.mutation.AddAmount(f)
	return peuo
}

// SetCommissionRuleKey sets the "commission_rule_key" field.
func (peuo *PromotionEarningsUpdateOne) SetCommissionRuleKey(s string) *PromotionEarningsUpdateOne {
	peuo.mutation.SetCommissionRuleKey(s)
	return peuo
}

// SetNillableCommissionRuleKey sets the "commission_rule_key" field if the given value is not nil.
func (peuo *PromotionEarningsUpdateOne) SetNillableCommissionRuleKey(s *string) *PromotionEarningsUpdateOne {
	if s != nil {
		peuo.SetCommissionRuleKey(*s)
	}
	return peuo
}

// ClearCommissionRuleKey clears the value of the "commission_rule_key" field.
func (peuo *PromotionEarningsUpdateOne) ClearCommissionRuleKey() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearCommissionRuleKey()
	return peuo
}

// SetCommission sets the "commission" edge to the PromotionCommission entity.
func (peuo *PromotionEarningsUpdateOne) SetCommission(p *PromotionCommission) *PromotionEarningsUpdateOne {
	return peuo.SetCommissionID(p.ID)
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (peuo *PromotionEarningsUpdateOne) SetMember(p *PromotionMember) *PromotionEarningsUpdateOne {
	return peuo.SetMemberID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (peuo *PromotionEarningsUpdateOne) SetRider(r *Rider) *PromotionEarningsUpdateOne {
	return peuo.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (peuo *PromotionEarningsUpdateOne) SetOrder(o *Order) *PromotionEarningsUpdateOne {
	return peuo.SetOrderID(o.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (peuo *PromotionEarningsUpdateOne) SetPlan(p *Plan) *PromotionEarningsUpdateOne {
	return peuo.SetPlanID(p.ID)
}

// Mutation returns the PromotionEarningsMutation object of the builder.
func (peuo *PromotionEarningsUpdateOne) Mutation() *PromotionEarningsMutation {
	return peuo.mutation
}

// ClearCommission clears the "commission" edge to the PromotionCommission entity.
func (peuo *PromotionEarningsUpdateOne) ClearCommission() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearCommission()
	return peuo
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (peuo *PromotionEarningsUpdateOne) ClearMember() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearMember()
	return peuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (peuo *PromotionEarningsUpdateOne) ClearRider() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearRider()
	return peuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (peuo *PromotionEarningsUpdateOne) ClearOrder() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearOrder()
	return peuo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (peuo *PromotionEarningsUpdateOne) ClearPlan() *PromotionEarningsUpdateOne {
	peuo.mutation.ClearPlan()
	return peuo
}

// Where appends a list predicates to the PromotionEarningsUpdate builder.
func (peuo *PromotionEarningsUpdateOne) Where(ps ...predicate.PromotionEarnings) *PromotionEarningsUpdateOne {
	peuo.mutation.Where(ps...)
	return peuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (peuo *PromotionEarningsUpdateOne) Select(field string, fields ...string) *PromotionEarningsUpdateOne {
	peuo.fields = append([]string{field}, fields...)
	return peuo
}

// Save executes the query and returns the updated PromotionEarnings entity.
func (peuo *PromotionEarningsUpdateOne) Save(ctx context.Context) (*PromotionEarnings, error) {
	if err := peuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, peuo.sqlSave, peuo.mutation, peuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (peuo *PromotionEarningsUpdateOne) SaveX(ctx context.Context) *PromotionEarnings {
	node, err := peuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (peuo *PromotionEarningsUpdateOne) Exec(ctx context.Context) error {
	_, err := peuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (peuo *PromotionEarningsUpdateOne) ExecX(ctx context.Context) {
	if err := peuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (peuo *PromotionEarningsUpdateOne) defaults() error {
	if _, ok := peuo.mutation.UpdatedAt(); !ok {
		if promotionearnings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionearnings.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionearnings.UpdateDefaultUpdatedAt()
		peuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (peuo *PromotionEarningsUpdateOne) check() error {
	if _, ok := peuo.mutation.CommissionID(); peuo.mutation.CommissionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.commission"`)
	}
	if _, ok := peuo.mutation.MemberID(); peuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.member"`)
	}
	if _, ok := peuo.mutation.RiderID(); peuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionEarnings.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (peuo *PromotionEarningsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionEarningsUpdateOne {
	peuo.modifiers = append(peuo.modifiers, modifiers...)
	return peuo
}

func (peuo *PromotionEarningsUpdateOne) sqlSave(ctx context.Context) (_node *PromotionEarnings, err error) {
	if err := peuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionearnings.Table, promotionearnings.Columns, sqlgraph.NewFieldSpec(promotionearnings.FieldID, field.TypeUint64))
	id, ok := peuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionEarnings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := peuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionearnings.FieldID)
		for _, f := range fields {
			if !promotionearnings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionearnings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := peuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := peuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionearnings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := peuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionearnings.FieldDeletedAt, field.TypeTime, value)
	}
	if peuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionearnings.FieldDeletedAt, field.TypeTime)
	}
	if peuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionearnings.FieldCreator, field.TypeJSON)
	}
	if value, ok := peuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionearnings.FieldLastModifier, field.TypeJSON, value)
	}
	if peuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionearnings.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := peuo.mutation.Remark(); ok {
		_spec.SetField(promotionearnings.FieldRemark, field.TypeString, value)
	}
	if peuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionearnings.FieldRemark, field.TypeString)
	}
	if value, ok := peuo.mutation.Status(); ok {
		_spec.SetField(promotionearnings.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := peuo.mutation.AddedStatus(); ok {
		_spec.AddField(promotionearnings.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := peuo.mutation.Amount(); ok {
		_spec.SetField(promotionearnings.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.AddedAmount(); ok {
		_spec.AddField(promotionearnings.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := peuo.mutation.CommissionRuleKey(); ok {
		_spec.SetField(promotionearnings.FieldCommissionRuleKey, field.TypeString, value)
	}
	if peuo.mutation.CommissionRuleKeyCleared() {
		_spec.ClearField(promotionearnings.FieldCommissionRuleKey, field.TypeString)
	}
	if peuo.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.CommissionTable,
			Columns: []string{promotionearnings.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.MemberTable,
			Columns: []string{promotionearnings.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.RiderTable,
			Columns: []string{promotionearnings.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.OrderTable,
			Columns: []string{promotionearnings.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.OrderTable,
			Columns: []string{promotionearnings.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if peuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.PlanTable,
			Columns: []string{promotionearnings.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := peuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionearnings.PlanTable,
			Columns: []string{promotionearnings.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(peuo.modifiers...)
	_node = &PromotionEarnings{config: peuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, peuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionearnings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	peuo.mutation.done = true
	return _node, nil
}
