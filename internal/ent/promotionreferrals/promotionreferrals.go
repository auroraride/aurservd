// Code generated by ent, DO NOT EDIT.

package promotionreferrals

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionreferrals type in the database.
	Label = "promotion_referrals"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldReferringMemberID holds the string denoting the referring_member_id field in the database.
	FieldReferringMemberID = "referring_member_id"
	// FieldReferredMemberID holds the string denoting the referred_member_id field in the database.
	FieldReferredMemberID = "referred_member_id"
	// FieldReferralTime holds the string denoting the referral_time field in the database.
	FieldReferralTime = "referral_time"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeReferringMember holds the string denoting the referring_member edge name in mutations.
	EdgeReferringMember = "referring_member"
	// EdgeReferredMember holds the string denoting the referred_member edge name in mutations.
	EdgeReferredMember = "referred_member"
	// Table holds the table name of the promotionreferrals in the database.
	Table = "promotion_referrals"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "promotion_referrals"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "promotion_referrals"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// ReferringMemberTable is the table that holds the referring_member relation/edge.
	ReferringMemberTable = "promotion_referrals"
	// ReferringMemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	ReferringMemberInverseTable = "promotion_member"
	// ReferringMemberColumn is the table column denoting the referring_member relation/edge.
	ReferringMemberColumn = "referring_member_id"
	// ReferredMemberTable is the table that holds the referred_member relation/edge.
	ReferredMemberTable = "promotion_referrals"
	// ReferredMemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	ReferredMemberInverseTable = "promotion_member"
	// ReferredMemberColumn is the table column denoting the referred_member relation/edge.
	ReferredMemberColumn = "referred_member_id"
)

// Columns holds all SQL columns for promotionreferrals fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRiderID,
	FieldSubscribeID,
	FieldReferringMemberID,
	FieldReferredMemberID,
	FieldReferralTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PromotionReferrals queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByReferringMemberID orders the results by the referring_member_id field.
func ByReferringMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferringMemberID, opts...).ToFunc()
}

// ByReferredMemberID orders the results by the referred_member_id field.
func ByReferredMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferredMemberID, opts...).ToFunc()
}

// ByReferralTime orders the results by the referral_time field.
func ByReferralTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferralTime, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByReferringMemberField orders the results by referring_member field.
func ByReferringMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferringMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByReferredMemberField orders the results by referred_member field.
func ByReferredMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferredMemberStep(), sql.OrderByField(field, opts...))
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
	)
}
func newReferringMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferringMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReferringMemberTable, ReferringMemberColumn),
	)
}
func newReferredMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReferredMemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ReferredMemberTable, ReferredMemberColumn),
	)
}
