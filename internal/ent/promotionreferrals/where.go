// Code generated by ent, DO NOT EDIT.

package promotionreferrals

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldRemark, v))
}

// ReferringMemberID applies equality check predicate on the "referring_member_id" field. It's identical to ReferringMemberIDEQ.
func ReferringMemberID(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldReferringMemberID, v))
}

// ReferredMemberID applies equality check predicate on the "referred_member_id" field. It's identical to ReferredMemberIDEQ.
func ReferredMemberID(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldReferredMemberID, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldRiderID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldParentID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldContainsFold(FieldRemark, v))
}

// ReferringMemberIDEQ applies the EQ predicate on the "referring_member_id" field.
func ReferringMemberIDEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldReferringMemberID, v))
}

// ReferringMemberIDNEQ applies the NEQ predicate on the "referring_member_id" field.
func ReferringMemberIDNEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldReferringMemberID, v))
}

// ReferringMemberIDIn applies the In predicate on the "referring_member_id" field.
func ReferringMemberIDIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldReferringMemberID, vs...))
}

// ReferringMemberIDNotIn applies the NotIn predicate on the "referring_member_id" field.
func ReferringMemberIDNotIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldReferringMemberID, vs...))
}

// ReferringMemberIDIsNil applies the IsNil predicate on the "referring_member_id" field.
func ReferringMemberIDIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldReferringMemberID))
}

// ReferringMemberIDNotNil applies the NotNil predicate on the "referring_member_id" field.
func ReferringMemberIDNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldReferringMemberID))
}

// ReferredMemberIDEQ applies the EQ predicate on the "referred_member_id" field.
func ReferredMemberIDEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldReferredMemberID, v))
}

// ReferredMemberIDNEQ applies the NEQ predicate on the "referred_member_id" field.
func ReferredMemberIDNEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldReferredMemberID, v))
}

// ReferredMemberIDIn applies the In predicate on the "referred_member_id" field.
func ReferredMemberIDIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldReferredMemberID, vs...))
}

// ReferredMemberIDNotIn applies the NotIn predicate on the "referred_member_id" field.
func ReferredMemberIDNotIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldReferredMemberID, vs...))
}

// ReferredMemberIDIsNil applies the IsNil predicate on the "referred_member_id" field.
func ReferredMemberIDIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldReferredMemberID))
}

// ReferredMemberIDNotNil applies the NotNil predicate on the "referred_member_id" field.
func ReferredMemberIDNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldReferredMemberID))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDGT applies the GT predicate on the "rider_id" field.
func RiderIDGT(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGT(FieldRiderID, v))
}

// RiderIDGTE applies the GTE predicate on the "rider_id" field.
func RiderIDGTE(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldGTE(FieldRiderID, v))
}

// RiderIDLT applies the LT predicate on the "rider_id" field.
func RiderIDLT(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLT(FieldRiderID, v))
}

// RiderIDLTE applies the LTE predicate on the "rider_id" field.
func RiderIDLTE(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldLTE(FieldRiderID, v))
}

// RiderIDIsNil applies the IsNil predicate on the "rider_id" field.
func RiderIDIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldRiderID))
}

// RiderIDNotNil applies the NotNil predicate on the "rider_id" field.
func RiderIDNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldRiderID))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(sql.FieldNotNull(FieldParentID))
}

// HasReferringMember applies the HasEdge predicate on the "referring_member" edge.
func HasReferringMember() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReferringMemberTable, ReferringMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferringMemberWith applies the HasEdge predicate on the "referring_member" edge with a given conditions (other predicates).
func HasReferringMemberWith(preds ...predicate.PromotionMember) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := newReferringMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReferredMember applies the HasEdge predicate on the "referred_member" edge.
func HasReferredMember() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ReferredMemberTable, ReferredMemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReferredMemberWith applies the HasEdge predicate on the "referred_member" edge with a given conditions (other predicates).
func HasReferredMemberWith(preds ...predicate.PromotionMember) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := newReferredMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.PromotionReferrals) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.PromotionReferrals) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionReferrals) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionReferrals) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionReferrals) predicate.PromotionReferrals {
	return predicate.PromotionReferrals(func(s *sql.Selector) {
		p(s.Not())
	})
}
