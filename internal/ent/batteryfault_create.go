// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryfault"
)

// BatteryFaultCreate is the builder for creating a BatteryFault entity.
type BatteryFaultCreate struct {
	config
	mutation *BatteryFaultMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bfc *BatteryFaultCreate) SetCreatedAt(t time.Time) *BatteryFaultCreate {
	bfc.mutation.SetCreatedAt(t)
	return bfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bfc *BatteryFaultCreate) SetNillableCreatedAt(t *time.Time) *BatteryFaultCreate {
	if t != nil {
		bfc.SetCreatedAt(*t)
	}
	return bfc
}

// SetUpdatedAt sets the "updated_at" field.
func (bfc *BatteryFaultCreate) SetUpdatedAt(t time.Time) *BatteryFaultCreate {
	bfc.mutation.SetUpdatedAt(t)
	return bfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bfc *BatteryFaultCreate) SetNillableUpdatedAt(t *time.Time) *BatteryFaultCreate {
	if t != nil {
		bfc.SetUpdatedAt(*t)
	}
	return bfc
}

// SetSn sets the "sn" field.
func (bfc *BatteryFaultCreate) SetSn(s string) *BatteryFaultCreate {
	bfc.mutation.SetSn(s)
	return bfc
}

// SetBatteryID sets the "battery_id" field.
func (bfc *BatteryFaultCreate) SetBatteryID(u uint64) *BatteryFaultCreate {
	bfc.mutation.SetBatteryID(u)
	return bfc
}

// SetFault sets the "fault" field.
func (bfc *BatteryFaultCreate) SetFault(mf model.BatteryFault) *BatteryFaultCreate {
	bfc.mutation.SetFault(mf)
	return bfc
}

// SetBeginAt sets the "begin_at" field.
func (bfc *BatteryFaultCreate) SetBeginAt(t time.Time) *BatteryFaultCreate {
	bfc.mutation.SetBeginAt(t)
	return bfc
}

// SetNillableBeginAt sets the "begin_at" field if the given value is not nil.
func (bfc *BatteryFaultCreate) SetNillableBeginAt(t *time.Time) *BatteryFaultCreate {
	if t != nil {
		bfc.SetBeginAt(*t)
	}
	return bfc
}

// SetEndAt sets the "end_at" field.
func (bfc *BatteryFaultCreate) SetEndAt(t time.Time) *BatteryFaultCreate {
	bfc.mutation.SetEndAt(t)
	return bfc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (bfc *BatteryFaultCreate) SetNillableEndAt(t *time.Time) *BatteryFaultCreate {
	if t != nil {
		bfc.SetEndAt(*t)
	}
	return bfc
}

// SetBattery sets the "battery" edge to the Battery entity.
func (bfc *BatteryFaultCreate) SetBattery(b *Battery) *BatteryFaultCreate {
	return bfc.SetBatteryID(b.ID)
}

// Mutation returns the BatteryFaultMutation object of the builder.
func (bfc *BatteryFaultCreate) Mutation() *BatteryFaultMutation {
	return bfc.mutation
}

// Save creates the BatteryFault in the database.
func (bfc *BatteryFaultCreate) Save(ctx context.Context) (*BatteryFault, error) {
	bfc.defaults()
	return withHooks[*BatteryFault, BatteryFaultMutation](ctx, bfc.sqlSave, bfc.mutation, bfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bfc *BatteryFaultCreate) SaveX(ctx context.Context) *BatteryFault {
	v, err := bfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfc *BatteryFaultCreate) Exec(ctx context.Context) error {
	_, err := bfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfc *BatteryFaultCreate) ExecX(ctx context.Context) {
	if err := bfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfc *BatteryFaultCreate) defaults() {
	if _, ok := bfc.mutation.CreatedAt(); !ok {
		v := batteryfault.DefaultCreatedAt()
		bfc.mutation.SetCreatedAt(v)
	}
	if _, ok := bfc.mutation.UpdatedAt(); !ok {
		v := batteryfault.DefaultUpdatedAt()
		bfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bfc.mutation.BeginAt(); !ok {
		v := batteryfault.DefaultBeginAt()
		bfc.mutation.SetBeginAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfc *BatteryFaultCreate) check() error {
	if _, ok := bfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryFault.created_at"`)}
	}
	if _, ok := bfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatteryFault.updated_at"`)}
	}
	if _, ok := bfc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "BatteryFault.sn"`)}
	}
	if _, ok := bfc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery_id", err: errors.New(`ent: missing required field "BatteryFault.battery_id"`)}
	}
	if _, ok := bfc.mutation.Fault(); !ok {
		return &ValidationError{Name: "fault", err: errors.New(`ent: missing required field "BatteryFault.fault"`)}
	}
	if v, ok := bfc.mutation.Fault(); ok {
		if err := batteryfault.FaultValidator(v); err != nil {
			return &ValidationError{Name: "fault", err: fmt.Errorf(`ent: validator failed for field "BatteryFault.fault": %w`, err)}
		}
	}
	if _, ok := bfc.mutation.BeginAt(); !ok {
		return &ValidationError{Name: "begin_at", err: errors.New(`ent: missing required field "BatteryFault.begin_at"`)}
	}
	if _, ok := bfc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery", err: errors.New(`ent: missing required edge "BatteryFault.battery"`)}
	}
	return nil
}

func (bfc *BatteryFaultCreate) sqlSave(ctx context.Context) (*BatteryFault, error) {
	if err := bfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bfc.mutation.id = &_node.ID
	bfc.mutation.done = true
	return _node, nil
}

func (bfc *BatteryFaultCreate) createSpec() (*BatteryFault, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryFault{config: bfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: batteryfault.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batteryfault.FieldID,
			},
		}
	)
	_spec.OnConflict = bfc.conflict
	if value, ok := bfc.mutation.CreatedAt(); ok {
		_spec.SetField(batteryfault.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bfc.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryfault.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bfc.mutation.Sn(); ok {
		_spec.SetField(batteryfault.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := bfc.mutation.Fault(); ok {
		_spec.SetField(batteryfault.FieldFault, field.TypeEnum, value)
		_node.Fault = value
	}
	if value, ok := bfc.mutation.BeginAt(); ok {
		_spec.SetField(batteryfault.FieldBeginAt, field.TypeTime, value)
		_node.BeginAt = value
	}
	if value, ok := bfc.mutation.EndAt(); ok {
		_spec.SetField(batteryfault.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if nodes := bfc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryfault.BatteryTable,
			Columns: []string{batteryfault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: battery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryFault.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryFaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bfc *BatteryFaultCreate) OnConflict(opts ...sql.ConflictOption) *BatteryFaultUpsertOne {
	bfc.conflict = opts
	return &BatteryFaultUpsertOne{
		create: bfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfc *BatteryFaultCreate) OnConflictColumns(columns ...string) *BatteryFaultUpsertOne {
	bfc.conflict = append(bfc.conflict, sql.ConflictColumns(columns...))
	return &BatteryFaultUpsertOne{
		create: bfc,
	}
}

type (
	// BatteryFaultUpsertOne is the builder for "upsert"-ing
	//  one BatteryFault node.
	BatteryFaultUpsertOne struct {
		create *BatteryFaultCreate
	}

	// BatteryFaultUpsert is the "OnConflict" setter.
	BatteryFaultUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFaultUpsert) SetUpdatedAt(v time.Time) *BatteryFaultUpsert {
	u.Set(batteryfault.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFaultUpsert) UpdateUpdatedAt() *BatteryFaultUpsert {
	u.SetExcluded(batteryfault.FieldUpdatedAt)
	return u
}

// SetSn sets the "sn" field.
func (u *BatteryFaultUpsert) SetSn(v string) *BatteryFaultUpsert {
	u.Set(batteryfault.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFaultUpsert) UpdateSn() *BatteryFaultUpsert {
	u.SetExcluded(batteryfault.FieldSn)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFaultUpsert) SetBatteryID(v uint64) *BatteryFaultUpsert {
	u.Set(batteryfault.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFaultUpsert) UpdateBatteryID() *BatteryFaultUpsert {
	u.SetExcluded(batteryfault.FieldBatteryID)
	return u
}

// SetFault sets the "fault" field.
func (u *BatteryFaultUpsert) SetFault(v model.BatteryFault) *BatteryFaultUpsert {
	u.Set(batteryfault.FieldFault, v)
	return u
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *BatteryFaultUpsert) UpdateFault() *BatteryFaultUpsert {
	u.SetExcluded(batteryfault.FieldFault)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *BatteryFaultUpsert) SetEndAt(v time.Time) *BatteryFaultUpsert {
	u.Set(batteryfault.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *BatteryFaultUpsert) UpdateEndAt() *BatteryFaultUpsert {
	u.SetExcluded(batteryfault.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *BatteryFaultUpsert) ClearEndAt() *BatteryFaultUpsert {
	u.SetNull(batteryfault.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryFaultUpsertOne) UpdateNewValues() *BatteryFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batteryfault.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.BeginAt(); exists {
			s.SetIgnore(batteryfault.FieldBeginAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryFaultUpsertOne) Ignore() *BatteryFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryFaultUpsertOne) DoNothing() *BatteryFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryFaultCreate.OnConflict
// documentation for more info.
func (u *BatteryFaultUpsertOne) Update(set func(*BatteryFaultUpsert)) *BatteryFaultUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryFaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFaultUpsertOne) SetUpdatedAt(v time.Time) *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFaultUpsertOne) UpdateUpdatedAt() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryFaultUpsertOne) SetSn(v string) *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFaultUpsertOne) UpdateSn() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFaultUpsertOne) SetBatteryID(v uint64) *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFaultUpsertOne) UpdateBatteryID() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateBatteryID()
	})
}

// SetFault sets the "fault" field.
func (u *BatteryFaultUpsertOne) SetFault(v model.BatteryFault) *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *BatteryFaultUpsertOne) UpdateFault() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateFault()
	})
}

// SetEndAt sets the "end_at" field.
func (u *BatteryFaultUpsertOne) SetEndAt(v time.Time) *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *BatteryFaultUpsertOne) UpdateEndAt() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *BatteryFaultUpsertOne) ClearEndAt() *BatteryFaultUpsertOne {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *BatteryFaultUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryFaultCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryFaultUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryFaultUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryFaultUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryFaultCreateBulk is the builder for creating many BatteryFault entities in bulk.
type BatteryFaultCreateBulk struct {
	config
	builders []*BatteryFaultCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryFault entities in the database.
func (bfcb *BatteryFaultCreateBulk) Save(ctx context.Context) ([]*BatteryFault, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bfcb.builders))
	nodes := make([]*BatteryFault, len(bfcb.builders))
	mutators := make([]Mutator, len(bfcb.builders))
	for i := range bfcb.builders {
		func(i int, root context.Context) {
			builder := bfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryFaultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bfcb *BatteryFaultCreateBulk) SaveX(ctx context.Context) []*BatteryFault {
	v, err := bfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfcb *BatteryFaultCreateBulk) Exec(ctx context.Context) error {
	_, err := bfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfcb *BatteryFaultCreateBulk) ExecX(ctx context.Context) {
	if err := bfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryFault.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryFaultUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bfcb *BatteryFaultCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryFaultUpsertBulk {
	bfcb.conflict = opts
	return &BatteryFaultUpsertBulk{
		create: bfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfcb *BatteryFaultCreateBulk) OnConflictColumns(columns ...string) *BatteryFaultUpsertBulk {
	bfcb.conflict = append(bfcb.conflict, sql.ConflictColumns(columns...))
	return &BatteryFaultUpsertBulk{
		create: bfcb,
	}
}

// BatteryFaultUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryFault nodes.
type BatteryFaultUpsertBulk struct {
	create *BatteryFaultCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryFaultUpsertBulk) UpdateNewValues() *BatteryFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batteryfault.FieldCreatedAt)
			}
			if _, exists := b.mutation.BeginAt(); exists {
				s.SetIgnore(batteryfault.FieldBeginAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryFault.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryFaultUpsertBulk) Ignore() *BatteryFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryFaultUpsertBulk) DoNothing() *BatteryFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryFaultCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryFaultUpsertBulk) Update(set func(*BatteryFaultUpsert)) *BatteryFaultUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryFaultUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFaultUpsertBulk) SetUpdatedAt(v time.Time) *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFaultUpsertBulk) UpdateUpdatedAt() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryFaultUpsertBulk) SetSn(v string) *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFaultUpsertBulk) UpdateSn() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateSn()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFaultUpsertBulk) SetBatteryID(v uint64) *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFaultUpsertBulk) UpdateBatteryID() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateBatteryID()
	})
}

// SetFault sets the "fault" field.
func (u *BatteryFaultUpsertBulk) SetFault(v model.BatteryFault) *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetFault(v)
	})
}

// UpdateFault sets the "fault" field to the value that was provided on create.
func (u *BatteryFaultUpsertBulk) UpdateFault() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateFault()
	})
}

// SetEndAt sets the "end_at" field.
func (u *BatteryFaultUpsertBulk) SetEndAt(v time.Time) *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *BatteryFaultUpsertBulk) UpdateEndAt() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *BatteryFaultUpsertBulk) ClearEndAt() *BatteryFaultUpsertBulk {
	return u.Update(func(s *BatteryFaultUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *BatteryFaultUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryFaultCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryFaultCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryFaultUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
