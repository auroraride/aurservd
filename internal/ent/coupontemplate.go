// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
)

// CouponTemplate is the model entity for the CouponTemplate schema.
type CouponTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 详情
	Meta *model.CouponTemplateMeta `json:"meta,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CouponTemplateQuery when eager-loading is set.
	Edges CouponTemplateEdges `json:"edges"`
}

// CouponTemplateEdges holds the relations/edges for other nodes in the graph.
type CouponTemplateEdges struct {
	// Coupons holds the value of the coupons edge.
	Coupons []*Coupon `json:"coupons,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CouponsOrErr returns the Coupons value or an error if the edge
// was not loaded in eager-loading.
func (e CouponTemplateEdges) CouponsOrErr() ([]*Coupon, error) {
	if e.loadedTypes[0] {
		return e.Coupons, nil
	}
	return nil, &NotLoadedError{edge: "coupons"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CouponTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coupontemplate.FieldCreator, coupontemplate.FieldLastModifier, coupontemplate.FieldMeta:
			values[i] = new([]byte)
		case coupontemplate.FieldEnable:
			values[i] = new(sql.NullBool)
		case coupontemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case coupontemplate.FieldRemark, coupontemplate.FieldName:
			values[i] = new(sql.NullString)
		case coupontemplate.FieldCreatedAt, coupontemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CouponTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CouponTemplate fields.
func (ct *CouponTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coupontemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = uint64(value.Int64)
		case coupontemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case coupontemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case coupontemplate.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case coupontemplate.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case coupontemplate.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ct.Remark = value.String
			}
		case coupontemplate.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				ct.Enable = value.Bool
			}
		case coupontemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ct.Name = value.String
			}
		case coupontemplate.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryCoupons queries the "coupons" edge of the CouponTemplate entity.
func (ct *CouponTemplate) QueryCoupons() *CouponQuery {
	return NewCouponTemplateClient(ct.config).QueryCoupons(ct)
}

// Update returns a builder for updating this CouponTemplate.
// Note that you need to call CouponTemplate.Unwrap() before calling this method if this CouponTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CouponTemplate) Update() *CouponTemplateUpdateOne {
	return NewCouponTemplateClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CouponTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CouponTemplate) Unwrap() *CouponTemplate {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: CouponTemplate is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CouponTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("CouponTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ct.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ct.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ct.Remark)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", ct.Enable))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ct.Name)
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", ct.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// CouponTemplates is a parsable slice of CouponTemplate.
type CouponTemplates []*CouponTemplate
