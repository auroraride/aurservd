// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
)

// RiderFollowUpUpdate is the builder for updating RiderFollowUp entities.
type RiderFollowUpUpdate struct {
	config
	hooks    []Hook
	mutation *RiderFollowUpMutation
}

// Where appends a list predicates to the RiderFollowUpUpdate builder.
func (rfuu *RiderFollowUpUpdate) Where(ps ...predicate.RiderFollowUp) *RiderFollowUpUpdate {
	rfuu.mutation.Where(ps...)
	return rfuu
}

// SetUpdatedAt sets the "updated_at" field.
func (rfuu *RiderFollowUpUpdate) SetUpdatedAt(t time.Time) *RiderFollowUpUpdate {
	rfuu.mutation.SetUpdatedAt(t)
	return rfuu
}

// SetDeletedAt sets the "deleted_at" field.
func (rfuu *RiderFollowUpUpdate) SetDeletedAt(t time.Time) *RiderFollowUpUpdate {
	rfuu.mutation.SetDeletedAt(t)
	return rfuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rfuu *RiderFollowUpUpdate) SetNillableDeletedAt(t *time.Time) *RiderFollowUpUpdate {
	if t != nil {
		rfuu.SetDeletedAt(*t)
	}
	return rfuu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rfuu *RiderFollowUpUpdate) ClearDeletedAt() *RiderFollowUpUpdate {
	rfuu.mutation.ClearDeletedAt()
	return rfuu
}

// SetLastModifier sets the "last_modifier" field.
func (rfuu *RiderFollowUpUpdate) SetLastModifier(m *model.Modifier) *RiderFollowUpUpdate {
	rfuu.mutation.SetLastModifier(m)
	return rfuu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (rfuu *RiderFollowUpUpdate) ClearLastModifier() *RiderFollowUpUpdate {
	rfuu.mutation.ClearLastModifier()
	return rfuu
}

// SetRemark sets the "remark" field.
func (rfuu *RiderFollowUpUpdate) SetRemark(s string) *RiderFollowUpUpdate {
	rfuu.mutation.SetRemark(s)
	return rfuu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rfuu *RiderFollowUpUpdate) SetNillableRemark(s *string) *RiderFollowUpUpdate {
	if s != nil {
		rfuu.SetRemark(*s)
	}
	return rfuu
}

// ClearRemark clears the value of the "remark" field.
func (rfuu *RiderFollowUpUpdate) ClearRemark() *RiderFollowUpUpdate {
	rfuu.mutation.ClearRemark()
	return rfuu
}

// SetManagerID sets the "manager_id" field.
func (rfuu *RiderFollowUpUpdate) SetManagerID(u uint64) *RiderFollowUpUpdate {
	rfuu.mutation.SetManagerID(u)
	return rfuu
}

// SetRiderID sets the "rider_id" field.
func (rfuu *RiderFollowUpUpdate) SetRiderID(u uint64) *RiderFollowUpUpdate {
	rfuu.mutation.SetRiderID(u)
	return rfuu
}

// SetManager sets the "manager" edge to the Manager entity.
func (rfuu *RiderFollowUpUpdate) SetManager(m *Manager) *RiderFollowUpUpdate {
	return rfuu.SetManagerID(m.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (rfuu *RiderFollowUpUpdate) SetRider(r *Rider) *RiderFollowUpUpdate {
	return rfuu.SetRiderID(r.ID)
}

// Mutation returns the RiderFollowUpMutation object of the builder.
func (rfuu *RiderFollowUpUpdate) Mutation() *RiderFollowUpMutation {
	return rfuu.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (rfuu *RiderFollowUpUpdate) ClearManager() *RiderFollowUpUpdate {
	rfuu.mutation.ClearManager()
	return rfuu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (rfuu *RiderFollowUpUpdate) ClearRider() *RiderFollowUpUpdate {
	rfuu.mutation.ClearRider()
	return rfuu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rfuu *RiderFollowUpUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := rfuu.defaults(); err != nil {
		return 0, err
	}
	if len(rfuu.hooks) == 0 {
		if err = rfuu.check(); err != nil {
			return 0, err
		}
		affected, err = rfuu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderFollowUpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfuu.check(); err != nil {
				return 0, err
			}
			rfuu.mutation = mutation
			affected, err = rfuu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rfuu.hooks) - 1; i >= 0; i-- {
			if rfuu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfuu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rfuu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuu *RiderFollowUpUpdate) SaveX(ctx context.Context) int {
	affected, err := rfuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rfuu *RiderFollowUpUpdate) Exec(ctx context.Context) error {
	_, err := rfuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuu *RiderFollowUpUpdate) ExecX(ctx context.Context) {
	if err := rfuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfuu *RiderFollowUpUpdate) defaults() error {
	if _, ok := rfuu.mutation.UpdatedAt(); !ok {
		if riderfollowup.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderfollowup.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := riderfollowup.UpdateDefaultUpdatedAt()
		rfuu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rfuu *RiderFollowUpUpdate) check() error {
	if _, ok := rfuu.mutation.ManagerID(); rfuu.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RiderFollowUp.manager"`)
	}
	if _, ok := rfuu.mutation.RiderID(); rfuu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RiderFollowUp.rider"`)
	}
	return nil
}

func (rfuu *RiderFollowUpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   riderfollowup.Table,
			Columns: riderfollowup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: riderfollowup.FieldID,
			},
		},
	}
	if ps := rfuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: riderfollowup.FieldUpdatedAt,
		})
	}
	if value, ok := rfuu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: riderfollowup.FieldDeletedAt,
		})
	}
	if rfuu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: riderfollowup.FieldDeletedAt,
		})
	}
	if rfuu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: riderfollowup.FieldCreator,
		})
	}
	if value, ok := rfuu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: riderfollowup.FieldLastModifier,
		})
	}
	if rfuu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: riderfollowup.FieldLastModifier,
		})
	}
	if value, ok := rfuu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: riderfollowup.FieldRemark,
		})
	}
	if rfuu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: riderfollowup.FieldRemark,
		})
	}
	if rfuu.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuu.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfuu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rfuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderfollowup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RiderFollowUpUpdateOne is the builder for updating a single RiderFollowUp entity.
type RiderFollowUpUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RiderFollowUpMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rfuuo *RiderFollowUpUpdateOne) SetUpdatedAt(t time.Time) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetUpdatedAt(t)
	return rfuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rfuuo *RiderFollowUpUpdateOne) SetDeletedAt(t time.Time) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetDeletedAt(t)
	return rfuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rfuuo *RiderFollowUpUpdateOne) SetNillableDeletedAt(t *time.Time) *RiderFollowUpUpdateOne {
	if t != nil {
		rfuuo.SetDeletedAt(*t)
	}
	return rfuuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rfuuo *RiderFollowUpUpdateOne) ClearDeletedAt() *RiderFollowUpUpdateOne {
	rfuuo.mutation.ClearDeletedAt()
	return rfuuo
}

// SetLastModifier sets the "last_modifier" field.
func (rfuuo *RiderFollowUpUpdateOne) SetLastModifier(m *model.Modifier) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetLastModifier(m)
	return rfuuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (rfuuo *RiderFollowUpUpdateOne) ClearLastModifier() *RiderFollowUpUpdateOne {
	rfuuo.mutation.ClearLastModifier()
	return rfuuo
}

// SetRemark sets the "remark" field.
func (rfuuo *RiderFollowUpUpdateOne) SetRemark(s string) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetRemark(s)
	return rfuuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rfuuo *RiderFollowUpUpdateOne) SetNillableRemark(s *string) *RiderFollowUpUpdateOne {
	if s != nil {
		rfuuo.SetRemark(*s)
	}
	return rfuuo
}

// ClearRemark clears the value of the "remark" field.
func (rfuuo *RiderFollowUpUpdateOne) ClearRemark() *RiderFollowUpUpdateOne {
	rfuuo.mutation.ClearRemark()
	return rfuuo
}

// SetManagerID sets the "manager_id" field.
func (rfuuo *RiderFollowUpUpdateOne) SetManagerID(u uint64) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetManagerID(u)
	return rfuuo
}

// SetRiderID sets the "rider_id" field.
func (rfuuo *RiderFollowUpUpdateOne) SetRiderID(u uint64) *RiderFollowUpUpdateOne {
	rfuuo.mutation.SetRiderID(u)
	return rfuuo
}

// SetManager sets the "manager" edge to the Manager entity.
func (rfuuo *RiderFollowUpUpdateOne) SetManager(m *Manager) *RiderFollowUpUpdateOne {
	return rfuuo.SetManagerID(m.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (rfuuo *RiderFollowUpUpdateOne) SetRider(r *Rider) *RiderFollowUpUpdateOne {
	return rfuuo.SetRiderID(r.ID)
}

// Mutation returns the RiderFollowUpMutation object of the builder.
func (rfuuo *RiderFollowUpUpdateOne) Mutation() *RiderFollowUpMutation {
	return rfuuo.mutation
}

// ClearManager clears the "manager" edge to the Manager entity.
func (rfuuo *RiderFollowUpUpdateOne) ClearManager() *RiderFollowUpUpdateOne {
	rfuuo.mutation.ClearManager()
	return rfuuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (rfuuo *RiderFollowUpUpdateOne) ClearRider() *RiderFollowUpUpdateOne {
	rfuuo.mutation.ClearRider()
	return rfuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rfuuo *RiderFollowUpUpdateOne) Select(field string, fields ...string) *RiderFollowUpUpdateOne {
	rfuuo.fields = append([]string{field}, fields...)
	return rfuuo
}

// Save executes the query and returns the updated RiderFollowUp entity.
func (rfuuo *RiderFollowUpUpdateOne) Save(ctx context.Context) (*RiderFollowUp, error) {
	var (
		err  error
		node *RiderFollowUp
	)
	if err := rfuuo.defaults(); err != nil {
		return nil, err
	}
	if len(rfuuo.hooks) == 0 {
		if err = rfuuo.check(); err != nil {
			return nil, err
		}
		node, err = rfuuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderFollowUpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rfuuo.check(); err != nil {
				return nil, err
			}
			rfuuo.mutation = mutation
			node, err = rfuuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rfuuo.hooks) - 1; i >= 0; i-- {
			if rfuuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rfuuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rfuuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RiderFollowUp)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RiderFollowUpMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rfuuo *RiderFollowUpUpdateOne) SaveX(ctx context.Context) *RiderFollowUp {
	node, err := rfuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rfuuo *RiderFollowUpUpdateOne) Exec(ctx context.Context) error {
	_, err := rfuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rfuuo *RiderFollowUpUpdateOne) ExecX(ctx context.Context) {
	if err := rfuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rfuuo *RiderFollowUpUpdateOne) defaults() error {
	if _, ok := rfuuo.mutation.UpdatedAt(); !ok {
		if riderfollowup.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderfollowup.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := riderfollowup.UpdateDefaultUpdatedAt()
		rfuuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rfuuo *RiderFollowUpUpdateOne) check() error {
	if _, ok := rfuuo.mutation.ManagerID(); rfuuo.mutation.ManagerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RiderFollowUp.manager"`)
	}
	if _, ok := rfuuo.mutation.RiderID(); rfuuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RiderFollowUp.rider"`)
	}
	return nil
}

func (rfuuo *RiderFollowUpUpdateOne) sqlSave(ctx context.Context) (_node *RiderFollowUp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   riderfollowup.Table,
			Columns: riderfollowup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: riderfollowup.FieldID,
			},
		},
	}
	id, ok := rfuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RiderFollowUp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rfuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riderfollowup.FieldID)
		for _, f := range fields {
			if !riderfollowup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != riderfollowup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rfuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rfuuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: riderfollowup.FieldUpdatedAt,
		})
	}
	if value, ok := rfuuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: riderfollowup.FieldDeletedAt,
		})
	}
	if rfuuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: riderfollowup.FieldDeletedAt,
		})
	}
	if rfuuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: riderfollowup.FieldCreator,
		})
	}
	if value, ok := rfuuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: riderfollowup.FieldLastModifier,
		})
	}
	if rfuuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: riderfollowup.FieldLastModifier,
		})
	}
	if value, ok := rfuuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: riderfollowup.FieldRemark,
		})
	}
	if rfuuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: riderfollowup.FieldRemark,
		})
	}
	if rfuuo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuuo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   riderfollowup.ManagerTable,
			Columns: []string{riderfollowup.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: manager.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rfuuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rfuuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   riderfollowup.RiderTable,
			Columns: []string{riderfollowup.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RiderFollowUp{config: rfuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rfuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderfollowup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
