// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/exchange"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/app/actuator"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// ExchangeMutation represents an operation that mutates the Exchange nodes in the graph.
type ExchangeMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	creator           **model.Modifier
	last_modifier     **model.Modifier
	remark            *string
	uuid              *string
	success           *bool
	detail            **model.ExchangeCabinet
	info              **actuator.ExchangeInfo
	model             *string
	alternative       *bool
	start_at          *time.Time
	finish_at         *time.Time
	duration          *int
	addduration       *int
	clearedFields     map[string]struct{}
	subscribe         *uint64
	clearedsubscribe  bool
	city              *uint64
	clearedcity       bool
	store             *uint64
	clearedstore      bool
	enterprise        *uint64
	clearedenterprise bool
	station           *uint64
	clearedstation    bool
	cabinet           *uint64
	clearedcabinet    bool
	rider             *uint64
	clearedrider      bool
	employee          *uint64
	clearedemployee   bool
	done              bool
	oldValue          func(context.Context) (*Exchange, error)
	predicates        []predicate.Exchange
}

var _ ent.Mutation = (*ExchangeMutation)(nil)

// exchangeOption allows management of the mutation configuration using functional options.
type exchangeOption func(*ExchangeMutation)

// newExchangeMutation creates new mutation for the Exchange entity.
func newExchangeMutation(c config, op Op, opts ...exchangeOption) *ExchangeMutation {
	m := &ExchangeMutation{
		config:        c,
		op:            op,
		typ:           TypeExchange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExchangeID sets the ID field of the mutation.
func withExchangeID(id uint64) exchangeOption {
	return func(m *ExchangeMutation) {
		var (
			err   error
			once  sync.Once
			value *Exchange
		)
		m.oldValue = func(ctx context.Context) (*Exchange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Exchange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExchange sets the old Exchange of the mutation.
func withExchange(node *Exchange) exchangeOption {
	return func(m *ExchangeMutation) {
		m.oldValue = func(context.Context) (*Exchange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExchangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExchangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExchangeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExchangeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Exchange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ExchangeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ExchangeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ExchangeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ExchangeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ExchangeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ExchangeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ExchangeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ExchangeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ExchangeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[exchange.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ExchangeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[exchange.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ExchangeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, exchange.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *ExchangeMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *ExchangeMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *ExchangeMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[exchange.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *ExchangeMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[exchange.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *ExchangeMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, exchange.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *ExchangeMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *ExchangeMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *ExchangeMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[exchange.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *ExchangeMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[exchange.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *ExchangeMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, exchange.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *ExchangeMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ExchangeMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ExchangeMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[exchange.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ExchangeMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[exchange.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ExchangeMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, exchange.FieldRemark)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *ExchangeMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *ExchangeMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *ExchangeMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetCityID sets the "city_id" field.
func (m *ExchangeMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *ExchangeMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *ExchangeMutation) ResetCityID() {
	m.city = nil
}

// SetStoreID sets the "store_id" field.
func (m *ExchangeMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *ExchangeMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *ExchangeMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[exchange.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *ExchangeMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[exchange.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *ExchangeMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, exchange.FieldStoreID)
}

// SetEnterpriseID sets the "enterprise_id" field.
func (m *ExchangeMutation) SetEnterpriseID(u uint64) {
	m.enterprise = &u
}

// EnterpriseID returns the value of the "enterprise_id" field in the mutation.
func (m *ExchangeMutation) EnterpriseID() (r uint64, exists bool) {
	v := m.enterprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseID returns the old "enterprise_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldEnterpriseID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnterpriseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnterpriseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseID: %w", err)
	}
	return oldValue.EnterpriseID, nil
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (m *ExchangeMutation) ClearEnterpriseID() {
	m.enterprise = nil
	m.clearedFields[exchange.FieldEnterpriseID] = struct{}{}
}

// EnterpriseIDCleared returns if the "enterprise_id" field was cleared in this mutation.
func (m *ExchangeMutation) EnterpriseIDCleared() bool {
	_, ok := m.clearedFields[exchange.FieldEnterpriseID]
	return ok
}

// ResetEnterpriseID resets all changes to the "enterprise_id" field.
func (m *ExchangeMutation) ResetEnterpriseID() {
	m.enterprise = nil
	delete(m.clearedFields, exchange.FieldEnterpriseID)
}

// SetStationID sets the "station_id" field.
func (m *ExchangeMutation) SetStationID(u uint64) {
	m.station = &u
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *ExchangeMutation) StationID() (r uint64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldStationID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// ClearStationID clears the value of the "station_id" field.
func (m *ExchangeMutation) ClearStationID() {
	m.station = nil
	m.clearedFields[exchange.FieldStationID] = struct{}{}
}

// StationIDCleared returns if the "station_id" field was cleared in this mutation.
func (m *ExchangeMutation) StationIDCleared() bool {
	_, ok := m.clearedFields[exchange.FieldStationID]
	return ok
}

// ResetStationID resets all changes to the "station_id" field.
func (m *ExchangeMutation) ResetStationID() {
	m.station = nil
	delete(m.clearedFields, exchange.FieldStationID)
}

// SetRiderID sets the "rider_id" field.
func (m *ExchangeMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *ExchangeMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *ExchangeMutation) ResetRiderID() {
	m.rider = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *ExchangeMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *ExchangeMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *ExchangeMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[exchange.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *ExchangeMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[exchange.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *ExchangeMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, exchange.FieldEmployeeID)
}

// SetUUID sets the "uuid" field.
func (m *ExchangeMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *ExchangeMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *ExchangeMutation) ResetUUID() {
	m.uuid = nil
}

// SetCabinetID sets the "cabinet_id" field.
func (m *ExchangeMutation) SetCabinetID(u uint64) {
	m.cabinet = &u
}

// CabinetID returns the value of the "cabinet_id" field in the mutation.
func (m *ExchangeMutation) CabinetID() (r uint64, exists bool) {
	v := m.cabinet
	if v == nil {
		return
	}
	return *v, true
}

// OldCabinetID returns the old "cabinet_id" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldCabinetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCabinetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCabinetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCabinetID: %w", err)
	}
	return oldValue.CabinetID, nil
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (m *ExchangeMutation) ClearCabinetID() {
	m.cabinet = nil
	m.clearedFields[exchange.FieldCabinetID] = struct{}{}
}

// CabinetIDCleared returns if the "cabinet_id" field was cleared in this mutation.
func (m *ExchangeMutation) CabinetIDCleared() bool {
	_, ok := m.clearedFields[exchange.FieldCabinetID]
	return ok
}

// ResetCabinetID resets all changes to the "cabinet_id" field.
func (m *ExchangeMutation) ResetCabinetID() {
	m.cabinet = nil
	delete(m.clearedFields, exchange.FieldCabinetID)
}

// SetSuccess sets the "success" field.
func (m *ExchangeMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *ExchangeMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ResetSuccess resets all changes to the "success" field.
func (m *ExchangeMutation) ResetSuccess() {
	m.success = nil
}

// SetDetail sets the "detail" field.
func (m *ExchangeMutation) SetDetail(mc *model.ExchangeCabinet) {
	m.detail = &mc
}

// Detail returns the value of the "detail" field in the mutation.
func (m *ExchangeMutation) Detail() (r *model.ExchangeCabinet, exists bool) {
	v := m.detail
	if v == nil {
		return
	}
	return *v, true
}

// OldDetail returns the old "detail" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldDetail(ctx context.Context) (v *model.ExchangeCabinet, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDetail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDetail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDetail: %w", err)
	}
	return oldValue.Detail, nil
}

// ClearDetail clears the value of the "detail" field.
func (m *ExchangeMutation) ClearDetail() {
	m.detail = nil
	m.clearedFields[exchange.FieldDetail] = struct{}{}
}

// DetailCleared returns if the "detail" field was cleared in this mutation.
func (m *ExchangeMutation) DetailCleared() bool {
	_, ok := m.clearedFields[exchange.FieldDetail]
	return ok
}

// ResetDetail resets all changes to the "detail" field.
func (m *ExchangeMutation) ResetDetail() {
	m.detail = nil
	delete(m.clearedFields, exchange.FieldDetail)
}

// SetInfo sets the "info" field.
func (m *ExchangeMutation) SetInfo(ai *actuator.ExchangeInfo) {
	m.info = &ai
}

// Info returns the value of the "info" field in the mutation.
func (m *ExchangeMutation) Info() (r *actuator.ExchangeInfo, exists bool) {
	v := m.info
	if v == nil {
		return
	}
	return *v, true
}

// OldInfo returns the old "info" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldInfo(ctx context.Context) (v *actuator.ExchangeInfo, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfo: %w", err)
	}
	return oldValue.Info, nil
}

// ClearInfo clears the value of the "info" field.
func (m *ExchangeMutation) ClearInfo() {
	m.info = nil
	m.clearedFields[exchange.FieldInfo] = struct{}{}
}

// InfoCleared returns if the "info" field was cleared in this mutation.
func (m *ExchangeMutation) InfoCleared() bool {
	_, ok := m.clearedFields[exchange.FieldInfo]
	return ok
}

// ResetInfo resets all changes to the "info" field.
func (m *ExchangeMutation) ResetInfo() {
	m.info = nil
	delete(m.clearedFields, exchange.FieldInfo)
}

// SetModel sets the "model" field.
func (m *ExchangeMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *ExchangeMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ResetModel resets all changes to the "model" field.
func (m *ExchangeMutation) ResetModel() {
	m.model = nil
}

// SetAlternative sets the "alternative" field.
func (m *ExchangeMutation) SetAlternative(b bool) {
	m.alternative = &b
}

// Alternative returns the value of the "alternative" field in the mutation.
func (m *ExchangeMutation) Alternative() (r bool, exists bool) {
	v := m.alternative
	if v == nil {
		return
	}
	return *v, true
}

// OldAlternative returns the old "alternative" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldAlternative(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlternative is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlternative requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlternative: %w", err)
	}
	return oldValue.Alternative, nil
}

// ResetAlternative resets all changes to the "alternative" field.
func (m *ExchangeMutation) ResetAlternative() {
	m.alternative = nil
}

// SetStartAt sets the "start_at" field.
func (m *ExchangeMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *ExchangeMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ClearStartAt clears the value of the "start_at" field.
func (m *ExchangeMutation) ClearStartAt() {
	m.start_at = nil
	m.clearedFields[exchange.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *ExchangeMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[exchange.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *ExchangeMutation) ResetStartAt() {
	m.start_at = nil
	delete(m.clearedFields, exchange.FieldStartAt)
}

// SetFinishAt sets the "finish_at" field.
func (m *ExchangeMutation) SetFinishAt(t time.Time) {
	m.finish_at = &t
}

// FinishAt returns the value of the "finish_at" field in the mutation.
func (m *ExchangeMutation) FinishAt() (r time.Time, exists bool) {
	v := m.finish_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishAt returns the old "finish_at" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldFinishAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFinishAt: %w", err)
	}
	return oldValue.FinishAt, nil
}

// ClearFinishAt clears the value of the "finish_at" field.
func (m *ExchangeMutation) ClearFinishAt() {
	m.finish_at = nil
	m.clearedFields[exchange.FieldFinishAt] = struct{}{}
}

// FinishAtCleared returns if the "finish_at" field was cleared in this mutation.
func (m *ExchangeMutation) FinishAtCleared() bool {
	_, ok := m.clearedFields[exchange.FieldFinishAt]
	return ok
}

// ResetFinishAt resets all changes to the "finish_at" field.
func (m *ExchangeMutation) ResetFinishAt() {
	m.finish_at = nil
	delete(m.clearedFields, exchange.FieldFinishAt)
}

// SetDuration sets the "duration" field.
func (m *ExchangeMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ExchangeMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Exchange entity.
// If the Exchange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExchangeMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *ExchangeMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *ExchangeMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *ExchangeMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[exchange.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *ExchangeMutation) DurationCleared() bool {
	_, ok := m.clearedFields[exchange.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *ExchangeMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, exchange.FieldDuration)
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *ExchangeMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *ExchangeMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *ExchangeMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearCity clears the "city" edge to the City entity.
func (m *ExchangeMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *ExchangeMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *ExchangeMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *ExchangeMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *ExchangeMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *ExchangeMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (m *ExchangeMutation) ClearEnterprise() {
	m.clearedenterprise = true
}

// EnterpriseCleared reports if the "enterprise" edge to the Enterprise entity was cleared.
func (m *ExchangeMutation) EnterpriseCleared() bool {
	return m.EnterpriseIDCleared() || m.clearedenterprise
}

// EnterpriseIDs returns the "enterprise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnterpriseID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) EnterpriseIDs() (ids []uint64) {
	if id := m.enterprise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnterprise resets all changes to the "enterprise" edge.
func (m *ExchangeMutation) ResetEnterprise() {
	m.enterprise = nil
	m.clearedenterprise = false
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (m *ExchangeMutation) ClearStation() {
	m.clearedstation = true
}

// StationCleared reports if the "station" edge to the EnterpriseStation entity was cleared.
func (m *ExchangeMutation) StationCleared() bool {
	return m.StationIDCleared() || m.clearedstation
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) StationIDs() (ids []uint64) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *ExchangeMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (m *ExchangeMutation) ClearCabinet() {
	m.clearedcabinet = true
}

// CabinetCleared reports if the "cabinet" edge to the Cabinet entity was cleared.
func (m *ExchangeMutation) CabinetCleared() bool {
	return m.CabinetIDCleared() || m.clearedcabinet
}

// CabinetIDs returns the "cabinet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CabinetID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) CabinetIDs() (ids []uint64) {
	if id := m.cabinet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCabinet resets all changes to the "cabinet" edge.
func (m *ExchangeMutation) ResetCabinet() {
	m.cabinet = nil
	m.clearedcabinet = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *ExchangeMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *ExchangeMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *ExchangeMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *ExchangeMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *ExchangeMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *ExchangeMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *ExchangeMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// Where appends a list predicates to the ExchangeMutation builder.
func (m *ExchangeMutation) Where(ps ...predicate.Exchange) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ExchangeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Exchange).
func (m *ExchangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExchangeMutation) Fields() []string {
	fields := make([]string, 0, 23)
	if m.created_at != nil {
		fields = append(fields, exchange.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, exchange.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, exchange.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, exchange.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, exchange.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, exchange.FieldRemark)
	}
	if m.subscribe != nil {
		fields = append(fields, exchange.FieldSubscribeID)
	}
	if m.city != nil {
		fields = append(fields, exchange.FieldCityID)
	}
	if m.store != nil {
		fields = append(fields, exchange.FieldStoreID)
	}
	if m.enterprise != nil {
		fields = append(fields, exchange.FieldEnterpriseID)
	}
	if m.station != nil {
		fields = append(fields, exchange.FieldStationID)
	}
	if m.rider != nil {
		fields = append(fields, exchange.FieldRiderID)
	}
	if m.employee != nil {
		fields = append(fields, exchange.FieldEmployeeID)
	}
	if m.uuid != nil {
		fields = append(fields, exchange.FieldUUID)
	}
	if m.cabinet != nil {
		fields = append(fields, exchange.FieldCabinetID)
	}
	if m.success != nil {
		fields = append(fields, exchange.FieldSuccess)
	}
	if m.detail != nil {
		fields = append(fields, exchange.FieldDetail)
	}
	if m.info != nil {
		fields = append(fields, exchange.FieldInfo)
	}
	if m.model != nil {
		fields = append(fields, exchange.FieldModel)
	}
	if m.alternative != nil {
		fields = append(fields, exchange.FieldAlternative)
	}
	if m.start_at != nil {
		fields = append(fields, exchange.FieldStartAt)
	}
	if m.finish_at != nil {
		fields = append(fields, exchange.FieldFinishAt)
	}
	if m.duration != nil {
		fields = append(fields, exchange.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExchangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldCreatedAt:
		return m.CreatedAt()
	case exchange.FieldUpdatedAt:
		return m.UpdatedAt()
	case exchange.FieldDeletedAt:
		return m.DeletedAt()
	case exchange.FieldCreator:
		return m.Creator()
	case exchange.FieldLastModifier:
		return m.LastModifier()
	case exchange.FieldRemark:
		return m.Remark()
	case exchange.FieldSubscribeID:
		return m.SubscribeID()
	case exchange.FieldCityID:
		return m.CityID()
	case exchange.FieldStoreID:
		return m.StoreID()
	case exchange.FieldEnterpriseID:
		return m.EnterpriseID()
	case exchange.FieldStationID:
		return m.StationID()
	case exchange.FieldRiderID:
		return m.RiderID()
	case exchange.FieldEmployeeID:
		return m.EmployeeID()
	case exchange.FieldUUID:
		return m.UUID()
	case exchange.FieldCabinetID:
		return m.CabinetID()
	case exchange.FieldSuccess:
		return m.Success()
	case exchange.FieldDetail:
		return m.Detail()
	case exchange.FieldInfo:
		return m.Info()
	case exchange.FieldModel:
		return m.Model()
	case exchange.FieldAlternative:
		return m.Alternative()
	case exchange.FieldStartAt:
		return m.StartAt()
	case exchange.FieldFinishAt:
		return m.FinishAt()
	case exchange.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExchangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case exchange.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case exchange.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case exchange.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case exchange.FieldCreator:
		return m.OldCreator(ctx)
	case exchange.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case exchange.FieldRemark:
		return m.OldRemark(ctx)
	case exchange.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case exchange.FieldCityID:
		return m.OldCityID(ctx)
	case exchange.FieldStoreID:
		return m.OldStoreID(ctx)
	case exchange.FieldEnterpriseID:
		return m.OldEnterpriseID(ctx)
	case exchange.FieldStationID:
		return m.OldStationID(ctx)
	case exchange.FieldRiderID:
		return m.OldRiderID(ctx)
	case exchange.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case exchange.FieldUUID:
		return m.OldUUID(ctx)
	case exchange.FieldCabinetID:
		return m.OldCabinetID(ctx)
	case exchange.FieldSuccess:
		return m.OldSuccess(ctx)
	case exchange.FieldDetail:
		return m.OldDetail(ctx)
	case exchange.FieldInfo:
		return m.OldInfo(ctx)
	case exchange.FieldModel:
		return m.OldModel(ctx)
	case exchange.FieldAlternative:
		return m.OldAlternative(ctx)
	case exchange.FieldStartAt:
		return m.OldStartAt(ctx)
	case exchange.FieldFinishAt:
		return m.OldFinishAt(ctx)
	case exchange.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Exchange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case exchange.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case exchange.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case exchange.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case exchange.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case exchange.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case exchange.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case exchange.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case exchange.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case exchange.FieldEnterpriseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseID(v)
		return nil
	case exchange.FieldStationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	case exchange.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case exchange.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case exchange.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case exchange.FieldCabinetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCabinetID(v)
		return nil
	case exchange.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case exchange.FieldDetail:
		v, ok := value.(*model.ExchangeCabinet)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDetail(v)
		return nil
	case exchange.FieldInfo:
		v, ok := value.(*actuator.ExchangeInfo)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfo(v)
		return nil
	case exchange.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case exchange.FieldAlternative:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlternative(v)
		return nil
	case exchange.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case exchange.FieldFinishAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFinishAt(v)
		return nil
	case exchange.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExchangeMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, exchange.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExchangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case exchange.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExchangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case exchange.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Exchange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExchangeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(exchange.FieldDeletedAt) {
		fields = append(fields, exchange.FieldDeletedAt)
	}
	if m.FieldCleared(exchange.FieldCreator) {
		fields = append(fields, exchange.FieldCreator)
	}
	if m.FieldCleared(exchange.FieldLastModifier) {
		fields = append(fields, exchange.FieldLastModifier)
	}
	if m.FieldCleared(exchange.FieldRemark) {
		fields = append(fields, exchange.FieldRemark)
	}
	if m.FieldCleared(exchange.FieldStoreID) {
		fields = append(fields, exchange.FieldStoreID)
	}
	if m.FieldCleared(exchange.FieldEnterpriseID) {
		fields = append(fields, exchange.FieldEnterpriseID)
	}
	if m.FieldCleared(exchange.FieldStationID) {
		fields = append(fields, exchange.FieldStationID)
	}
	if m.FieldCleared(exchange.FieldEmployeeID) {
		fields = append(fields, exchange.FieldEmployeeID)
	}
	if m.FieldCleared(exchange.FieldCabinetID) {
		fields = append(fields, exchange.FieldCabinetID)
	}
	if m.FieldCleared(exchange.FieldDetail) {
		fields = append(fields, exchange.FieldDetail)
	}
	if m.FieldCleared(exchange.FieldInfo) {
		fields = append(fields, exchange.FieldInfo)
	}
	if m.FieldCleared(exchange.FieldStartAt) {
		fields = append(fields, exchange.FieldStartAt)
	}
	if m.FieldCleared(exchange.FieldFinishAt) {
		fields = append(fields, exchange.FieldFinishAt)
	}
	if m.FieldCleared(exchange.FieldDuration) {
		fields = append(fields, exchange.FieldDuration)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExchangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExchangeMutation) ClearField(name string) error {
	switch name {
	case exchange.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case exchange.FieldCreator:
		m.ClearCreator()
		return nil
	case exchange.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case exchange.FieldRemark:
		m.ClearRemark()
		return nil
	case exchange.FieldStoreID:
		m.ClearStoreID()
		return nil
	case exchange.FieldEnterpriseID:
		m.ClearEnterpriseID()
		return nil
	case exchange.FieldStationID:
		m.ClearStationID()
		return nil
	case exchange.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case exchange.FieldCabinetID:
		m.ClearCabinetID()
		return nil
	case exchange.FieldDetail:
		m.ClearDetail()
		return nil
	case exchange.FieldInfo:
		m.ClearInfo()
		return nil
	case exchange.FieldStartAt:
		m.ClearStartAt()
		return nil
	case exchange.FieldFinishAt:
		m.ClearFinishAt()
		return nil
	case exchange.FieldDuration:
		m.ClearDuration()
		return nil
	}
	return fmt.Errorf("unknown Exchange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExchangeMutation) ResetField(name string) error {
	switch name {
	case exchange.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case exchange.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case exchange.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case exchange.FieldCreator:
		m.ResetCreator()
		return nil
	case exchange.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case exchange.FieldRemark:
		m.ResetRemark()
		return nil
	case exchange.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case exchange.FieldCityID:
		m.ResetCityID()
		return nil
	case exchange.FieldStoreID:
		m.ResetStoreID()
		return nil
	case exchange.FieldEnterpriseID:
		m.ResetEnterpriseID()
		return nil
	case exchange.FieldStationID:
		m.ResetStationID()
		return nil
	case exchange.FieldRiderID:
		m.ResetRiderID()
		return nil
	case exchange.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case exchange.FieldUUID:
		m.ResetUUID()
		return nil
	case exchange.FieldCabinetID:
		m.ResetCabinetID()
		return nil
	case exchange.FieldSuccess:
		m.ResetSuccess()
		return nil
	case exchange.FieldDetail:
		m.ResetDetail()
		return nil
	case exchange.FieldInfo:
		m.ResetInfo()
		return nil
	case exchange.FieldModel:
		m.ResetModel()
		return nil
	case exchange.FieldAlternative:
		m.ResetAlternative()
		return nil
	case exchange.FieldStartAt:
		m.ResetStartAt()
		return nil
	case exchange.FieldFinishAt:
		m.ResetFinishAt()
		return nil
	case exchange.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Exchange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExchangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.subscribe != nil {
		edges = append(edges, exchange.EdgeSubscribe)
	}
	if m.city != nil {
		edges = append(edges, exchange.EdgeCity)
	}
	if m.store != nil {
		edges = append(edges, exchange.EdgeStore)
	}
	if m.enterprise != nil {
		edges = append(edges, exchange.EdgeEnterprise)
	}
	if m.station != nil {
		edges = append(edges, exchange.EdgeStation)
	}
	if m.cabinet != nil {
		edges = append(edges, exchange.EdgeCabinet)
	}
	if m.rider != nil {
		edges = append(edges, exchange.EdgeRider)
	}
	if m.employee != nil {
		edges = append(edges, exchange.EdgeEmployee)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExchangeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case exchange.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeEnterprise:
		if id := m.enterprise; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeCabinet:
		if id := m.cabinet; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case exchange.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExchangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExchangeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExchangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedsubscribe {
		edges = append(edges, exchange.EdgeSubscribe)
	}
	if m.clearedcity {
		edges = append(edges, exchange.EdgeCity)
	}
	if m.clearedstore {
		edges = append(edges, exchange.EdgeStore)
	}
	if m.clearedenterprise {
		edges = append(edges, exchange.EdgeEnterprise)
	}
	if m.clearedstation {
		edges = append(edges, exchange.EdgeStation)
	}
	if m.clearedcabinet {
		edges = append(edges, exchange.EdgeCabinet)
	}
	if m.clearedrider {
		edges = append(edges, exchange.EdgeRider)
	}
	if m.clearedemployee {
		edges = append(edges, exchange.EdgeEmployee)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExchangeMutation) EdgeCleared(name string) bool {
	switch name {
	case exchange.EdgeSubscribe:
		return m.clearedsubscribe
	case exchange.EdgeCity:
		return m.clearedcity
	case exchange.EdgeStore:
		return m.clearedstore
	case exchange.EdgeEnterprise:
		return m.clearedenterprise
	case exchange.EdgeStation:
		return m.clearedstation
	case exchange.EdgeCabinet:
		return m.clearedcabinet
	case exchange.EdgeRider:
		return m.clearedrider
	case exchange.EdgeEmployee:
		return m.clearedemployee
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExchangeMutation) ClearEdge(name string) error {
	switch name {
	case exchange.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case exchange.EdgeCity:
		m.ClearCity()
		return nil
	case exchange.EdgeStore:
		m.ClearStore()
		return nil
	case exchange.EdgeEnterprise:
		m.ClearEnterprise()
		return nil
	case exchange.EdgeStation:
		m.ClearStation()
		return nil
	case exchange.EdgeCabinet:
		m.ClearCabinet()
		return nil
	case exchange.EdgeRider:
		m.ClearRider()
		return nil
	case exchange.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Exchange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExchangeMutation) ResetEdge(name string) error {
	switch name {
	case exchange.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case exchange.EdgeCity:
		m.ResetCity()
		return nil
	case exchange.EdgeStore:
		m.ResetStore()
		return nil
	case exchange.EdgeEnterprise:
		m.ResetEnterprise()
		return nil
	case exchange.EdgeStation:
		m.ResetStation()
		return nil
	case exchange.EdgeCabinet:
		m.ResetCabinet()
		return nil
	case exchange.EdgeRider:
		m.ResetRider()
		return nil
	case exchange.EdgeEmployee:
		m.ResetEmployee()
		return nil
	}
	return fmt.Errorf("unknown Exchange edge %s", name)
}

