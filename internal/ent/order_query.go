// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// OrderQuery is the builder for querying Order entities.
type OrderQuery struct {
	config
	ctx            *QueryContext
	order          []OrderFunc
	inters         []Interceptor
	predicates     []predicate.Order
	withPlan       *PlanQuery
	withCity       *CityQuery
	withBrand      *EbikeBrandQuery
	withEbike      *EbikeQuery
	withRider      *RiderQuery
	withSubscribe  *SubscribeQuery
	withCommission *CommissionQuery
	withParent     *OrderQuery
	withChildren   *OrderQuery
	withRefund     *OrderRefundQuery
	withAssistance *AssistanceQuery
	withCoupons    *CouponQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderQuery builder.
func (oq *OrderQuery) Where(ps ...predicate.Order) *OrderQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit the number of records to be returned by this query.
func (oq *OrderQuery) Limit(limit int) *OrderQuery {
	oq.ctx.Limit = &limit
	return oq
}

// Offset to start from.
func (oq *OrderQuery) Offset(offset int) *OrderQuery {
	oq.ctx.Offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OrderQuery) Unique(unique bool) *OrderQuery {
	oq.ctx.Unique = &unique
	return oq
}

// Order specifies how the records should be ordered.
func (oq *OrderQuery) Order(o ...OrderFunc) *OrderQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryPlan chains the current query on the "plan" edge.
func (oq *OrderQuery) QueryPlan() *PlanQuery {
	query := (&PlanClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.PlanTable, order.PlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (oq *OrderQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.CityTable, order.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrand chains the current query on the "brand" edge.
func (oq *OrderQuery) QueryBrand() *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.BrandTable, order.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEbike chains the current query on the "ebike" edge.
func (oq *OrderQuery) QueryEbike() *EbikeQuery {
	query := (&EbikeClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, order.EbikeTable, order.EbikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (oq *OrderQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.RiderTable, order.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (oq *OrderQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.SubscribeTable, order.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommission chains the current query on the "commission" edge.
func (oq *OrderQuery) QueryCommission() *CommissionQuery {
	query := (&CommissionClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.CommissionTable, order.CommissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (oq *OrderQuery) QueryParent() *OrderQuery {
	query := (&OrderClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, order.ParentTable, order.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (oq *OrderQuery) QueryChildren() *OrderQuery {
	query := (&OrderClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.ChildrenTable, order.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRefund chains the current query on the "refund" edge.
func (oq *OrderQuery) QueryRefund() *OrderRefundQuery {
	query := (&OrderRefundClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(orderrefund.Table, orderrefund.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.RefundTable, order.RefundColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssistance chains the current query on the "assistance" edge.
func (oq *OrderQuery) QueryAssistance() *AssistanceQuery {
	query := (&AssistanceClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, order.AssistanceTable, order.AssistanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCoupons chains the current query on the "coupons" edge.
func (oq *OrderQuery) QueryCoupons() *CouponQuery {
	query := (&CouponClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(order.Table, order.FieldID, selector),
			sqlgraph.To(coupon.Table, coupon.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, order.CouponsTable, order.CouponsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Order entity from the query.
// Returns a *NotFoundError when no Order was found.
func (oq *OrderQuery) First(ctx context.Context) (*Order, error) {
	nodes, err := oq.Limit(1).All(setContextOp(ctx, oq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{order.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OrderQuery) FirstX(ctx context.Context) *Order {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Order ID from the query.
// Returns a *NotFoundError when no Order ID was found.
func (oq *OrderQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = oq.Limit(1).IDs(setContextOp(ctx, oq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{order.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OrderQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Order entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Order entity is found.
// Returns a *NotFoundError when no Order entities are found.
func (oq *OrderQuery) Only(ctx context.Context) (*Order, error) {
	nodes, err := oq.Limit(2).All(setContextOp(ctx, oq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{order.Label}
	default:
		return nil, &NotSingularError{order.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OrderQuery) OnlyX(ctx context.Context) *Order {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Order ID in the query.
// Returns a *NotSingularError when more than one Order ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OrderQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = oq.Limit(2).IDs(setContextOp(ctx, oq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{order.Label}
	default:
		err = &NotSingularError{order.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OrderQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Orders.
func (oq *OrderQuery) All(ctx context.Context) ([]*Order, error) {
	ctx = setContextOp(ctx, oq.ctx, "All")
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Order, *OrderQuery]()
	return withInterceptors[[]*Order](ctx, oq, qr, oq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oq *OrderQuery) AllX(ctx context.Context) []*Order {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Order IDs.
func (oq *OrderQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if oq.ctx.Unique == nil && oq.path != nil {
		oq.Unique(true)
	}
	ctx = setContextOp(ctx, oq.ctx, "IDs")
	if err = oq.Select(order.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OrderQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OrderQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, "Count")
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oq, querierCount[*OrderQuery](), oq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OrderQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OrderQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oq.ctx, "Exist")
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OrderQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OrderQuery) Clone() *OrderQuery {
	if oq == nil {
		return nil
	}
	return &OrderQuery{
		config:         oq.config,
		ctx:            oq.ctx.Clone(),
		order:          append([]OrderFunc{}, oq.order...),
		inters:         append([]Interceptor{}, oq.inters...),
		predicates:     append([]predicate.Order{}, oq.predicates...),
		withPlan:       oq.withPlan.Clone(),
		withCity:       oq.withCity.Clone(),
		withBrand:      oq.withBrand.Clone(),
		withEbike:      oq.withEbike.Clone(),
		withRider:      oq.withRider.Clone(),
		withSubscribe:  oq.withSubscribe.Clone(),
		withCommission: oq.withCommission.Clone(),
		withParent:     oq.withParent.Clone(),
		withChildren:   oq.withChildren.Clone(),
		withRefund:     oq.withRefund.Clone(),
		withAssistance: oq.withAssistance.Clone(),
		withCoupons:    oq.withCoupons.Clone(),
		// clone intermediate query.
		sql:  oq.sql.Clone(),
		path: oq.path,
	}
}

// WithPlan tells the query-builder to eager-load the nodes that are connected to
// the "plan" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithPlan(opts ...func(*PlanQuery)) *OrderQuery {
	query := (&PlanClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPlan = query
	return oq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithCity(opts ...func(*CityQuery)) *OrderQuery {
	query := (&CityClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withCity = query
	return oq
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *OrderQuery {
	query := (&EbikeBrandClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withBrand = query
	return oq
}

// WithEbike tells the query-builder to eager-load the nodes that are connected to
// the "ebike" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithEbike(opts ...func(*EbikeQuery)) *OrderQuery {
	query := (&EbikeClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withEbike = query
	return oq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithRider(opts ...func(*RiderQuery)) *OrderQuery {
	query := (&RiderClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withRider = query
	return oq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *OrderQuery {
	query := (&SubscribeClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withSubscribe = query
	return oq
}

// WithCommission tells the query-builder to eager-load the nodes that are connected to
// the "commission" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithCommission(opts ...func(*CommissionQuery)) *OrderQuery {
	query := (&CommissionClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withCommission = query
	return oq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithParent(opts ...func(*OrderQuery)) *OrderQuery {
	query := (&OrderClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withParent = query
	return oq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithChildren(opts ...func(*OrderQuery)) *OrderQuery {
	query := (&OrderClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withChildren = query
	return oq
}

// WithRefund tells the query-builder to eager-load the nodes that are connected to
// the "refund" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithRefund(opts ...func(*OrderRefundQuery)) *OrderQuery {
	query := (&OrderRefundClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withRefund = query
	return oq
}

// WithAssistance tells the query-builder to eager-load the nodes that are connected to
// the "assistance" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithAssistance(opts ...func(*AssistanceQuery)) *OrderQuery {
	query := (&AssistanceClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withAssistance = query
	return oq
}

// WithCoupons tells the query-builder to eager-load the nodes that are connected to
// the "coupons" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrderQuery) WithCoupons(opts ...func(*CouponQuery)) *OrderQuery {
	query := (&CouponClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withCoupons = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Order.Query().
//		GroupBy(order.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oq *OrderQuery) GroupBy(field string, fields ...string) *OrderGroupBy {
	oq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrderGroupBy{build: oq}
	grbuild.flds = &oq.ctx.Fields
	grbuild.label = order.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Order.Query().
//		Select(order.FieldCreatedAt).
//		Scan(ctx, &v)
func (oq *OrderQuery) Select(fields ...string) *OrderSelect {
	oq.ctx.Fields = append(oq.ctx.Fields, fields...)
	sbuild := &OrderSelect{OrderQuery: oq}
	sbuild.label = order.Label
	sbuild.flds, sbuild.scan = &oq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrderSelect configured with the given aggregations.
func (oq *OrderQuery) Aggregate(fns ...AggregateFunc) *OrderSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OrderQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oq); err != nil {
				return err
			}
		}
	}
	for _, f := range oq.ctx.Fields {
		if !order.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.sql = prev
	}
	return nil
}

func (oq *OrderQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Order, error) {
	var (
		nodes       = []*Order{}
		_spec       = oq.querySpec()
		loadedTypes = [12]bool{
			oq.withPlan != nil,
			oq.withCity != nil,
			oq.withBrand != nil,
			oq.withEbike != nil,
			oq.withRider != nil,
			oq.withSubscribe != nil,
			oq.withCommission != nil,
			oq.withParent != nil,
			oq.withChildren != nil,
			oq.withRefund != nil,
			oq.withAssistance != nil,
			oq.withCoupons != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Order).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Order{config: oq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oq.withPlan; query != nil {
		if err := oq.loadPlan(ctx, query, nodes, nil,
			func(n *Order, e *Plan) { n.Edges.Plan = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withCity; query != nil {
		if err := oq.loadCity(ctx, query, nodes, nil,
			func(n *Order, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withBrand; query != nil {
		if err := oq.loadBrand(ctx, query, nodes, nil,
			func(n *Order, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withEbike; query != nil {
		if err := oq.loadEbike(ctx, query, nodes, nil,
			func(n *Order, e *Ebike) { n.Edges.Ebike = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withRider; query != nil {
		if err := oq.loadRider(ctx, query, nodes, nil,
			func(n *Order, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withSubscribe; query != nil {
		if err := oq.loadSubscribe(ctx, query, nodes, nil,
			func(n *Order, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withCommission; query != nil {
		if err := oq.loadCommission(ctx, query, nodes, nil,
			func(n *Order, e *Commission) { n.Edges.Commission = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withParent; query != nil {
		if err := oq.loadParent(ctx, query, nodes, nil,
			func(n *Order, e *Order) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withChildren; query != nil {
		if err := oq.loadChildren(ctx, query, nodes,
			func(n *Order) { n.Edges.Children = []*Order{} },
			func(n *Order, e *Order) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withRefund; query != nil {
		if err := oq.loadRefund(ctx, query, nodes, nil,
			func(n *Order, e *OrderRefund) { n.Edges.Refund = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withAssistance; query != nil {
		if err := oq.loadAssistance(ctx, query, nodes, nil,
			func(n *Order, e *Assistance) { n.Edges.Assistance = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withCoupons; query != nil {
		if err := oq.loadCoupons(ctx, query, nodes,
			func(n *Order) { n.Edges.Coupons = []*Coupon{} },
			func(n *Order, e *Coupon) { n.Edges.Coupons = append(n.Edges.Coupons, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oq *OrderQuery) loadPlan(ctx context.Context, query *PlanQuery, nodes []*Order, init func(*Order), assign func(*Order, *Plan)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		if nodes[i].PlanID == nil {
			continue
		}
		fk := *nodes[i].PlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Order, init func(*Order), assign func(*Order, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*Order, init func(*Order), assign func(*Order, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		if nodes[i].BrandID == nil {
			continue
		}
		fk := *nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadEbike(ctx context.Context, query *EbikeQuery, nodes []*Order, init func(*Order), assign func(*Order, *Ebike)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		if nodes[i].EbikeID == nil {
			continue
		}
		fk := *nodes[i].EbikeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ebike.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ebike_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Order, init func(*Order), assign func(*Order, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*Order, init func(*Order), assign func(*Order, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		fk := nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadCommission(ctx context.Context, query *CommissionQuery, nodes []*Order, init func(*Order), assign func(*Order, *Commission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.InValues(order.CommissionColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadParent(ctx context.Context, query *OrderQuery, nodes []*Order, init func(*Order), assign func(*Order, *Order)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Order)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrderQuery) loadChildren(ctx context.Context, query *OrderQuery, nodes []*Order, init func(*Order), assign func(*Order, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(order.ChildrenColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadRefund(ctx context.Context, query *OrderRefundQuery, nodes []*Order, init func(*Order), assign func(*Order, *OrderRefund)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.OrderRefund(func(s *sql.Selector) {
		s.Where(sql.InValues(order.RefundColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadAssistance(ctx context.Context, query *AssistanceQuery, nodes []*Order, init func(*Order), assign func(*Order, *Assistance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.InValues(order.AssistanceColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "order_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrderQuery) loadCoupons(ctx context.Context, query *CouponQuery, nodes []*Order, init func(*Order), assign func(*Order, *Coupon)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Order)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Coupon(func(s *sql.Selector) {
		s.Where(sql.InValues(order.CouponsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrderID
		if fk == nil {
			return fmt.Errorf(`foreign-key "order_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oq *OrderQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oq.querySpec()
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	_spec.Node.Columns = oq.ctx.Fields
	if len(oq.ctx.Fields) > 0 {
		_spec.Unique = oq.ctx.Unique != nil && *oq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oq.driver, _spec)
}

func (oq *OrderQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64))
	_spec.From = oq.sql
	if unique := oq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oq.path != nil {
		_spec.Unique = true
	}
	if fields := oq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for i := range fields {
			if fields[i] != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oq *OrderQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oq.driver.Dialect())
	t1 := builder.Table(order.Table)
	columns := oq.ctx.Fields
	if len(columns) == 0 {
		columns = order.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oq.sql != nil {
		selector = oq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oq.ctx.Unique != nil && *oq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range oq.modifiers {
		m(selector)
	}
	for _, p := range oq.predicates {
		p(selector)
	}
	for _, p := range oq.order {
		p(selector)
	}
	if offset := oq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (oq *OrderQuery) Modify(modifiers ...func(s *sql.Selector)) *OrderSelect {
	oq.modifiers = append(oq.modifiers, modifiers...)
	return oq.Select()
}

type OrderQueryWith string

var (
	OrderQueryWithPlan       OrderQueryWith = "Plan"
	OrderQueryWithCity       OrderQueryWith = "City"
	OrderQueryWithBrand      OrderQueryWith = "Brand"
	OrderQueryWithEbike      OrderQueryWith = "Ebike"
	OrderQueryWithRider      OrderQueryWith = "Rider"
	OrderQueryWithSubscribe  OrderQueryWith = "Subscribe"
	OrderQueryWithCommission OrderQueryWith = "Commission"
	OrderQueryWithParent     OrderQueryWith = "Parent"
	OrderQueryWithChildren   OrderQueryWith = "Children"
	OrderQueryWithRefund     OrderQueryWith = "Refund"
	OrderQueryWithAssistance OrderQueryWith = "Assistance"
	OrderQueryWithCoupons    OrderQueryWith = "Coupons"
)

func (oq *OrderQuery) With(withEdges ...OrderQueryWith) *OrderQuery {
	for _, v := range withEdges {
		switch v {
		case OrderQueryWithPlan:
			oq.WithPlan()
		case OrderQueryWithCity:
			oq.WithCity()
		case OrderQueryWithBrand:
			oq.WithBrand()
		case OrderQueryWithEbike:
			oq.WithEbike()
		case OrderQueryWithRider:
			oq.WithRider()
		case OrderQueryWithSubscribe:
			oq.WithSubscribe()
		case OrderQueryWithCommission:
			oq.WithCommission()
		case OrderQueryWithParent:
			oq.WithParent()
		case OrderQueryWithChildren:
			oq.WithChildren()
		case OrderQueryWithRefund:
			oq.WithRefund()
		case OrderQueryWithAssistance:
			oq.WithAssistance()
		case OrderQueryWithCoupons:
			oq.WithCoupons()
		}
	}
	return oq
}

// OrderGroupBy is the group-by builder for Order entities.
type OrderGroupBy struct {
	selector
	build *OrderQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OrderGroupBy) Aggregate(fns ...AggregateFunc) *OrderGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the selector query and scans the result into the given value.
func (ogb *OrderGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogb.build.ctx, "GroupBy")
	if err := ogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderQuery, *OrderGroupBy](ctx, ogb.build, ogb, ogb.build.inters, v)
}

func (ogb *OrderGroupBy) sqlScan(ctx context.Context, root *OrderQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ogb.fns))
	for _, fn := range ogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ogb.flds)+len(ogb.fns))
		for _, f := range *ogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrderSelect is the builder for selecting fields of Order entities.
type OrderSelect struct {
	*OrderQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OrderSelect) Aggregate(fns ...AggregateFunc) *OrderSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OrderSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, os.ctx, "Select")
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrderQuery, *OrderSelect](ctx, os.OrderQuery, os, os.inters, v)
}

func (os *OrderSelect) sqlScan(ctx context.Context, root *OrderQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(os.fns))
	for _, fn := range os.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*os.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := os.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (os *OrderSelect) Modify(modifiers ...func(s *sql.Selector)) *OrderSelect {
	os.modifiers = append(os.modifiers, modifiers...)
	return os
}
