// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseBillUpdate is the builder for updating EnterpriseBill entities.
type EnterpriseBillUpdate struct {
	config
	hooks     []Hook
	mutation  *EnterpriseBillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EnterpriseBillUpdate builder.
func (ebu *EnterpriseBillUpdate) Where(ps ...predicate.EnterpriseBill) *EnterpriseBillUpdate {
	ebu.mutation.Where(ps...)
	return ebu
}

// SetUpdatedAt sets the "updated_at" field.
func (ebu *EnterpriseBillUpdate) SetUpdatedAt(t time.Time) *EnterpriseBillUpdate {
	ebu.mutation.SetUpdatedAt(t)
	return ebu
}

// SetDeletedAt sets the "deleted_at" field.
func (ebu *EnterpriseBillUpdate) SetDeletedAt(t time.Time) *EnterpriseBillUpdate {
	ebu.mutation.SetDeletedAt(t)
	return ebu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebu *EnterpriseBillUpdate) SetNillableDeletedAt(t *time.Time) *EnterpriseBillUpdate {
	if t != nil {
		ebu.SetDeletedAt(*t)
	}
	return ebu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ebu *EnterpriseBillUpdate) ClearDeletedAt() *EnterpriseBillUpdate {
	ebu.mutation.ClearDeletedAt()
	return ebu
}

// SetLastModifier sets the "last_modifier" field.
func (ebu *EnterpriseBillUpdate) SetLastModifier(m *model.Modifier) *EnterpriseBillUpdate {
	ebu.mutation.SetLastModifier(m)
	return ebu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ebu *EnterpriseBillUpdate) ClearLastModifier() *EnterpriseBillUpdate {
	ebu.mutation.ClearLastModifier()
	return ebu
}

// SetRemark sets the "remark" field.
func (ebu *EnterpriseBillUpdate) SetRemark(s string) *EnterpriseBillUpdate {
	ebu.mutation.SetRemark(s)
	return ebu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebu *EnterpriseBillUpdate) SetNillableRemark(s *string) *EnterpriseBillUpdate {
	if s != nil {
		ebu.SetRemark(*s)
	}
	return ebu
}

// ClearRemark clears the value of the "remark" field.
func (ebu *EnterpriseBillUpdate) ClearRemark() *EnterpriseBillUpdate {
	ebu.mutation.ClearRemark()
	return ebu
}

// SetRiderID sets the "rider_id" field.
func (ebu *EnterpriseBillUpdate) SetRiderID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetRiderID(u)
	return ebu
}

// SetCityID sets the "city_id" field.
func (ebu *EnterpriseBillUpdate) SetCityID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetCityID(u)
	return ebu
}

// SetStationID sets the "station_id" field.
func (ebu *EnterpriseBillUpdate) SetStationID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetStationID(u)
	return ebu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ebu *EnterpriseBillUpdate) SetNillableStationID(u *uint64) *EnterpriseBillUpdate {
	if u != nil {
		ebu.SetStationID(*u)
	}
	return ebu
}

// ClearStationID clears the value of the "station_id" field.
func (ebu *EnterpriseBillUpdate) ClearStationID() *EnterpriseBillUpdate {
	ebu.mutation.ClearStationID()
	return ebu
}

// SetSubscribeID sets the "subscribe_id" field.
func (ebu *EnterpriseBillUpdate) SetSubscribeID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetSubscribeID(u)
	return ebu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ebu *EnterpriseBillUpdate) SetEnterpriseID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetEnterpriseID(u)
	return ebu
}

// SetStatementID sets the "statement_id" field.
func (ebu *EnterpriseBillUpdate) SetStatementID(u uint64) *EnterpriseBillUpdate {
	ebu.mutation.SetStatementID(u)
	return ebu
}

// SetStart sets the "start" field.
func (ebu *EnterpriseBillUpdate) SetStart(t time.Time) *EnterpriseBillUpdate {
	ebu.mutation.SetStart(t)
	return ebu
}

// SetEnd sets the "end" field.
func (ebu *EnterpriseBillUpdate) SetEnd(t time.Time) *EnterpriseBillUpdate {
	ebu.mutation.SetEnd(t)
	return ebu
}

// SetDays sets the "days" field.
func (ebu *EnterpriseBillUpdate) SetDays(i int) *EnterpriseBillUpdate {
	ebu.mutation.ResetDays()
	ebu.mutation.SetDays(i)
	return ebu
}

// AddDays adds i to the "days" field.
func (ebu *EnterpriseBillUpdate) AddDays(i int) *EnterpriseBillUpdate {
	ebu.mutation.AddDays(i)
	return ebu
}

// SetPrice sets the "price" field.
func (ebu *EnterpriseBillUpdate) SetPrice(f float64) *EnterpriseBillUpdate {
	ebu.mutation.ResetPrice()
	ebu.mutation.SetPrice(f)
	return ebu
}

// AddPrice adds f to the "price" field.
func (ebu *EnterpriseBillUpdate) AddPrice(f float64) *EnterpriseBillUpdate {
	ebu.mutation.AddPrice(f)
	return ebu
}

// SetCost sets the "cost" field.
func (ebu *EnterpriseBillUpdate) SetCost(f float64) *EnterpriseBillUpdate {
	ebu.mutation.ResetCost()
	ebu.mutation.SetCost(f)
	return ebu
}

// AddCost adds f to the "cost" field.
func (ebu *EnterpriseBillUpdate) AddCost(f float64) *EnterpriseBillUpdate {
	ebu.mutation.AddCost(f)
	return ebu
}

// SetModel sets the "model" field.
func (ebu *EnterpriseBillUpdate) SetModel(s string) *EnterpriseBillUpdate {
	ebu.mutation.SetModel(s)
	return ebu
}

// SetRider sets the "rider" edge to the Rider entity.
func (ebu *EnterpriseBillUpdate) SetRider(r *Rider) *EnterpriseBillUpdate {
	return ebu.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ebu *EnterpriseBillUpdate) SetCity(c *City) *EnterpriseBillUpdate {
	return ebu.SetCityID(c.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ebu *EnterpriseBillUpdate) SetStation(e *EnterpriseStation) *EnterpriseBillUpdate {
	return ebu.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ebu *EnterpriseBillUpdate) SetEnterprise(e *Enterprise) *EnterpriseBillUpdate {
	return ebu.SetEnterpriseID(e.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (ebu *EnterpriseBillUpdate) SetStatement(e *EnterpriseStatement) *EnterpriseBillUpdate {
	return ebu.SetStatementID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ebu *EnterpriseBillUpdate) SetSubscribe(s *Subscribe) *EnterpriseBillUpdate {
	return ebu.SetSubscribeID(s.ID)
}

// Mutation returns the EnterpriseBillMutation object of the builder.
func (ebu *EnterpriseBillUpdate) Mutation() *EnterpriseBillMutation {
	return ebu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ebu *EnterpriseBillUpdate) ClearRider() *EnterpriseBillUpdate {
	ebu.mutation.ClearRider()
	return ebu
}

// ClearCity clears the "city" edge to the City entity.
func (ebu *EnterpriseBillUpdate) ClearCity() *EnterpriseBillUpdate {
	ebu.mutation.ClearCity()
	return ebu
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ebu *EnterpriseBillUpdate) ClearStation() *EnterpriseBillUpdate {
	ebu.mutation.ClearStation()
	return ebu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ebu *EnterpriseBillUpdate) ClearEnterprise() *EnterpriseBillUpdate {
	ebu.mutation.ClearEnterprise()
	return ebu
}

// ClearStatement clears the "statement" edge to the EnterpriseStatement entity.
func (ebu *EnterpriseBillUpdate) ClearStatement() *EnterpriseBillUpdate {
	ebu.mutation.ClearStatement()
	return ebu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (ebu *EnterpriseBillUpdate) ClearSubscribe() *EnterpriseBillUpdate {
	ebu.mutation.ClearSubscribe()
	return ebu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ebu *EnterpriseBillUpdate) Save(ctx context.Context) (int, error) {
	if err := ebu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, EnterpriseBillMutation](ctx, ebu.sqlSave, ebu.mutation, ebu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebu *EnterpriseBillUpdate) SaveX(ctx context.Context) int {
	affected, err := ebu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ebu *EnterpriseBillUpdate) Exec(ctx context.Context) error {
	_, err := ebu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebu *EnterpriseBillUpdate) ExecX(ctx context.Context) {
	if err := ebu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebu *EnterpriseBillUpdate) defaults() error {
	if _, ok := ebu.mutation.UpdatedAt(); !ok {
		if enterprisebill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisebill.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisebill.UpdateDefaultUpdatedAt()
		ebu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ebu *EnterpriseBillUpdate) check() error {
	if _, ok := ebu.mutation.RiderID(); ebu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.rider"`)
	}
	if _, ok := ebu.mutation.CityID(); ebu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.city"`)
	}
	if _, ok := ebu.mutation.EnterpriseID(); ebu.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.enterprise"`)
	}
	if _, ok := ebu.mutation.StatementID(); ebu.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.statement"`)
	}
	if _, ok := ebu.mutation.SubscribeID(); ebu.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebu *EnterpriseBillUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterpriseBillUpdate {
	ebu.modifiers = append(ebu.modifiers, modifiers...)
	return ebu
}

func (ebu *EnterpriseBillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ebu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisebill.Table,
			Columns: enterprisebill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		},
	}
	if ps := ebu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebu.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisebill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebu.mutation.DeletedAt(); ok {
		_spec.SetField(enterprisebill.FieldDeletedAt, field.TypeTime, value)
	}
	if ebu.mutation.DeletedAtCleared() {
		_spec.ClearField(enterprisebill.FieldDeletedAt, field.TypeTime)
	}
	if ebu.mutation.CreatorCleared() {
		_spec.ClearField(enterprisebill.FieldCreator, field.TypeJSON)
	}
	if value, ok := ebu.mutation.LastModifier(); ok {
		_spec.SetField(enterprisebill.FieldLastModifier, field.TypeJSON, value)
	}
	if ebu.mutation.LastModifierCleared() {
		_spec.ClearField(enterprisebill.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ebu.mutation.Remark(); ok {
		_spec.SetField(enterprisebill.FieldRemark, field.TypeString, value)
	}
	if ebu.mutation.RemarkCleared() {
		_spec.ClearField(enterprisebill.FieldRemark, field.TypeString)
	}
	if value, ok := ebu.mutation.Start(); ok {
		_spec.SetField(enterprisebill.FieldStart, field.TypeTime, value)
	}
	if value, ok := ebu.mutation.End(); ok {
		_spec.SetField(enterprisebill.FieldEnd, field.TypeTime, value)
	}
	if value, ok := ebu.mutation.Days(); ok {
		_spec.SetField(enterprisebill.FieldDays, field.TypeInt, value)
	}
	if value, ok := ebu.mutation.AddedDays(); ok {
		_spec.AddField(enterprisebill.FieldDays, field.TypeInt, value)
	}
	if value, ok := ebu.mutation.Price(); ok {
		_spec.SetField(enterprisebill.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ebu.mutation.AddedPrice(); ok {
		_spec.AddField(enterprisebill.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ebu.mutation.Cost(); ok {
		_spec.SetField(enterprisebill.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := ebu.mutation.AddedCost(); ok {
		_spec.AddField(enterprisebill.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := ebu.mutation.Model(); ok {
		_spec.SetField(enterprisebill.FieldModel, field.TypeString, value)
	}
	if ebu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ebu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisebill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ebu.mutation.done = true
	return n, nil
}

// EnterpriseBillUpdateOne is the builder for updating a single EnterpriseBill entity.
type EnterpriseBillUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EnterpriseBillMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ebuo *EnterpriseBillUpdateOne) SetUpdatedAt(t time.Time) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetUpdatedAt(t)
	return ebuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ebuo *EnterpriseBillUpdateOne) SetDeletedAt(t time.Time) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetDeletedAt(t)
	return ebuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebuo *EnterpriseBillUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterpriseBillUpdateOne {
	if t != nil {
		ebuo.SetDeletedAt(*t)
	}
	return ebuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ebuo *EnterpriseBillUpdateOne) ClearDeletedAt() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearDeletedAt()
	return ebuo
}

// SetLastModifier sets the "last_modifier" field.
func (ebuo *EnterpriseBillUpdateOne) SetLastModifier(m *model.Modifier) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetLastModifier(m)
	return ebuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ebuo *EnterpriseBillUpdateOne) ClearLastModifier() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearLastModifier()
	return ebuo
}

// SetRemark sets the "remark" field.
func (ebuo *EnterpriseBillUpdateOne) SetRemark(s string) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetRemark(s)
	return ebuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebuo *EnterpriseBillUpdateOne) SetNillableRemark(s *string) *EnterpriseBillUpdateOne {
	if s != nil {
		ebuo.SetRemark(*s)
	}
	return ebuo
}

// ClearRemark clears the value of the "remark" field.
func (ebuo *EnterpriseBillUpdateOne) ClearRemark() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearRemark()
	return ebuo
}

// SetRiderID sets the "rider_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetRiderID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetRiderID(u)
	return ebuo
}

// SetCityID sets the "city_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetCityID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetCityID(u)
	return ebuo
}

// SetStationID sets the "station_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetStationID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetStationID(u)
	return ebuo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (ebuo *EnterpriseBillUpdateOne) SetNillableStationID(u *uint64) *EnterpriseBillUpdateOne {
	if u != nil {
		ebuo.SetStationID(*u)
	}
	return ebuo
}

// ClearStationID clears the value of the "station_id" field.
func (ebuo *EnterpriseBillUpdateOne) ClearStationID() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearStationID()
	return ebuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetSubscribeID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetSubscribeID(u)
	return ebuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetEnterpriseID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetEnterpriseID(u)
	return ebuo
}

// SetStatementID sets the "statement_id" field.
func (ebuo *EnterpriseBillUpdateOne) SetStatementID(u uint64) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetStatementID(u)
	return ebuo
}

// SetStart sets the "start" field.
func (ebuo *EnterpriseBillUpdateOne) SetStart(t time.Time) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetStart(t)
	return ebuo
}

// SetEnd sets the "end" field.
func (ebuo *EnterpriseBillUpdateOne) SetEnd(t time.Time) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetEnd(t)
	return ebuo
}

// SetDays sets the "days" field.
func (ebuo *EnterpriseBillUpdateOne) SetDays(i int) *EnterpriseBillUpdateOne {
	ebuo.mutation.ResetDays()
	ebuo.mutation.SetDays(i)
	return ebuo
}

// AddDays adds i to the "days" field.
func (ebuo *EnterpriseBillUpdateOne) AddDays(i int) *EnterpriseBillUpdateOne {
	ebuo.mutation.AddDays(i)
	return ebuo
}

// SetPrice sets the "price" field.
func (ebuo *EnterpriseBillUpdateOne) SetPrice(f float64) *EnterpriseBillUpdateOne {
	ebuo.mutation.ResetPrice()
	ebuo.mutation.SetPrice(f)
	return ebuo
}

// AddPrice adds f to the "price" field.
func (ebuo *EnterpriseBillUpdateOne) AddPrice(f float64) *EnterpriseBillUpdateOne {
	ebuo.mutation.AddPrice(f)
	return ebuo
}

// SetCost sets the "cost" field.
func (ebuo *EnterpriseBillUpdateOne) SetCost(f float64) *EnterpriseBillUpdateOne {
	ebuo.mutation.ResetCost()
	ebuo.mutation.SetCost(f)
	return ebuo
}

// AddCost adds f to the "cost" field.
func (ebuo *EnterpriseBillUpdateOne) AddCost(f float64) *EnterpriseBillUpdateOne {
	ebuo.mutation.AddCost(f)
	return ebuo
}

// SetModel sets the "model" field.
func (ebuo *EnterpriseBillUpdateOne) SetModel(s string) *EnterpriseBillUpdateOne {
	ebuo.mutation.SetModel(s)
	return ebuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (ebuo *EnterpriseBillUpdateOne) SetRider(r *Rider) *EnterpriseBillUpdateOne {
	return ebuo.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ebuo *EnterpriseBillUpdateOne) SetCity(c *City) *EnterpriseBillUpdateOne {
	return ebuo.SetCityID(c.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (ebuo *EnterpriseBillUpdateOne) SetStation(e *EnterpriseStation) *EnterpriseBillUpdateOne {
	return ebuo.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (ebuo *EnterpriseBillUpdateOne) SetEnterprise(e *Enterprise) *EnterpriseBillUpdateOne {
	return ebuo.SetEnterpriseID(e.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (ebuo *EnterpriseBillUpdateOne) SetStatement(e *EnterpriseStatement) *EnterpriseBillUpdateOne {
	return ebuo.SetStatementID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ebuo *EnterpriseBillUpdateOne) SetSubscribe(s *Subscribe) *EnterpriseBillUpdateOne {
	return ebuo.SetSubscribeID(s.ID)
}

// Mutation returns the EnterpriseBillMutation object of the builder.
func (ebuo *EnterpriseBillUpdateOne) Mutation() *EnterpriseBillMutation {
	return ebuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ebuo *EnterpriseBillUpdateOne) ClearRider() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearRider()
	return ebuo
}

// ClearCity clears the "city" edge to the City entity.
func (ebuo *EnterpriseBillUpdateOne) ClearCity() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearCity()
	return ebuo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (ebuo *EnterpriseBillUpdateOne) ClearStation() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearStation()
	return ebuo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (ebuo *EnterpriseBillUpdateOne) ClearEnterprise() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearEnterprise()
	return ebuo
}

// ClearStatement clears the "statement" edge to the EnterpriseStatement entity.
func (ebuo *EnterpriseBillUpdateOne) ClearStatement() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearStatement()
	return ebuo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (ebuo *EnterpriseBillUpdateOne) ClearSubscribe() *EnterpriseBillUpdateOne {
	ebuo.mutation.ClearSubscribe()
	return ebuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ebuo *EnterpriseBillUpdateOne) Select(field string, fields ...string) *EnterpriseBillUpdateOne {
	ebuo.fields = append([]string{field}, fields...)
	return ebuo
}

// Save executes the query and returns the updated EnterpriseBill entity.
func (ebuo *EnterpriseBillUpdateOne) Save(ctx context.Context) (*EnterpriseBill, error) {
	if err := ebuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*EnterpriseBill, EnterpriseBillMutation](ctx, ebuo.sqlSave, ebuo.mutation, ebuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebuo *EnterpriseBillUpdateOne) SaveX(ctx context.Context) *EnterpriseBill {
	node, err := ebuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ebuo *EnterpriseBillUpdateOne) Exec(ctx context.Context) error {
	_, err := ebuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebuo *EnterpriseBillUpdateOne) ExecX(ctx context.Context) {
	if err := ebuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebuo *EnterpriseBillUpdateOne) defaults() error {
	if _, ok := ebuo.mutation.UpdatedAt(); !ok {
		if enterprisebill.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterprisebill.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterprisebill.UpdateDefaultUpdatedAt()
		ebuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ebuo *EnterpriseBillUpdateOne) check() error {
	if _, ok := ebuo.mutation.RiderID(); ebuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.rider"`)
	}
	if _, ok := ebuo.mutation.CityID(); ebuo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.city"`)
	}
	if _, ok := ebuo.mutation.EnterpriseID(); ebuo.mutation.EnterpriseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.enterprise"`)
	}
	if _, ok := ebuo.mutation.StatementID(); ebuo.mutation.StatementCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.statement"`)
	}
	if _, ok := ebuo.mutation.SubscribeID(); ebuo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnterpriseBill.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebuo *EnterpriseBillUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterpriseBillUpdateOne {
	ebuo.modifiers = append(ebuo.modifiers, modifiers...)
	return ebuo
}

func (ebuo *EnterpriseBillUpdateOne) sqlSave(ctx context.Context) (_node *EnterpriseBill, err error) {
	if err := ebuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enterprisebill.Table,
			Columns: enterprisebill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterprisebill.FieldID,
			},
		},
	}
	id, ok := ebuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterpriseBill.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ebuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisebill.FieldID)
		for _, f := range fields {
			if !enterprisebill.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterprisebill.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ebuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enterprisebill.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebuo.mutation.DeletedAt(); ok {
		_spec.SetField(enterprisebill.FieldDeletedAt, field.TypeTime, value)
	}
	if ebuo.mutation.DeletedAtCleared() {
		_spec.ClearField(enterprisebill.FieldDeletedAt, field.TypeTime)
	}
	if ebuo.mutation.CreatorCleared() {
		_spec.ClearField(enterprisebill.FieldCreator, field.TypeJSON)
	}
	if value, ok := ebuo.mutation.LastModifier(); ok {
		_spec.SetField(enterprisebill.FieldLastModifier, field.TypeJSON, value)
	}
	if ebuo.mutation.LastModifierCleared() {
		_spec.ClearField(enterprisebill.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ebuo.mutation.Remark(); ok {
		_spec.SetField(enterprisebill.FieldRemark, field.TypeString, value)
	}
	if ebuo.mutation.RemarkCleared() {
		_spec.ClearField(enterprisebill.FieldRemark, field.TypeString)
	}
	if value, ok := ebuo.mutation.Start(); ok {
		_spec.SetField(enterprisebill.FieldStart, field.TypeTime, value)
	}
	if value, ok := ebuo.mutation.End(); ok {
		_spec.SetField(enterprisebill.FieldEnd, field.TypeTime, value)
	}
	if value, ok := ebuo.mutation.Days(); ok {
		_spec.SetField(enterprisebill.FieldDays, field.TypeInt, value)
	}
	if value, ok := ebuo.mutation.AddedDays(); ok {
		_spec.AddField(enterprisebill.FieldDays, field.TypeInt, value)
	}
	if value, ok := ebuo.mutation.Price(); ok {
		_spec.SetField(enterprisebill.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ebuo.mutation.AddedPrice(); ok {
		_spec.AddField(enterprisebill.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ebuo.mutation.Cost(); ok {
		_spec.SetField(enterprisebill.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := ebuo.mutation.AddedCost(); ok {
		_spec.AddField(enterprisebill.FieldCost, field.TypeFloat64, value)
	}
	if value, ok := ebuo.mutation.Model(); ok {
		_spec.SetField(enterprisebill.FieldModel, field.TypeString, value)
	}
	if ebuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.RiderTable,
			Columns: []string{enterprisebill.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.CityTable,
			Columns: []string{enterprisebill.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterprisebill.StationTable,
			Columns: []string{enterprisebill.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.EnterpriseTable,
			Columns: []string{enterprisebill.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.StatementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.StatementTable,
			Columns: []string{enterprisebill.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ebuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterprisebill.SubscribeTable,
			Columns: []string{enterprisebill.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebuo.modifiers...)
	_node = &EnterpriseBill{config: ebuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ebuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterprisebill.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ebuo.mutation.done = true
	return _node, nil
}
