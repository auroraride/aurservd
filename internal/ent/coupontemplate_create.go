// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
)

// CouponTemplateCreate is the builder for creating a CouponTemplate entity.
type CouponTemplateCreate struct {
	config
	mutation *CouponTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ctc *CouponTemplateCreate) SetCreatedAt(t time.Time) *CouponTemplateCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *CouponTemplateCreate) SetNillableCreatedAt(t *time.Time) *CouponTemplateCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *CouponTemplateCreate) SetUpdatedAt(t time.Time) *CouponTemplateCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *CouponTemplateCreate) SetNillableUpdatedAt(t *time.Time) *CouponTemplateCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetEnable sets the "enable" field.
func (ctc *CouponTemplateCreate) SetEnable(b bool) *CouponTemplateCreate {
	ctc.mutation.SetEnable(b)
	return ctc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctc *CouponTemplateCreate) SetNillableEnable(b *bool) *CouponTemplateCreate {
	if b != nil {
		ctc.SetEnable(*b)
	}
	return ctc
}

// SetName sets the "name" field.
func (ctc *CouponTemplateCreate) SetName(s string) *CouponTemplateCreate {
	ctc.mutation.SetName(s)
	return ctc
}

// SetMeta sets the "meta" field.
func (ctc *CouponTemplateCreate) SetMeta(mtm *model.CouponTemplateMeta) *CouponTemplateCreate {
	ctc.mutation.SetMeta(mtm)
	return ctc
}

// Mutation returns the CouponTemplateMutation object of the builder.
func (ctc *CouponTemplateCreate) Mutation() *CouponTemplateMutation {
	return ctc.mutation
}

// Save creates the CouponTemplate in the database.
func (ctc *CouponTemplateCreate) Save(ctx context.Context) (*CouponTemplate, error) {
	var (
		err  error
		node *CouponTemplate
	)
	ctc.defaults()
	if len(ctc.hooks) == 0 {
		if err = ctc.check(); err != nil {
			return nil, err
		}
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctc.check(); err != nil {
				return nil, err
			}
			ctc.mutation = mutation
			if node, err = ctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			if ctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ctc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CouponTemplateCreate) SaveX(ctx context.Context) *CouponTemplate {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CouponTemplateCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CouponTemplateCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CouponTemplateCreate) defaults() {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := coupontemplate.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := coupontemplate.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.Enable(); !ok {
		v := coupontemplate.DefaultEnable
		ctc.mutation.SetEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CouponTemplateCreate) check() error {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CouponTemplate.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CouponTemplate.updated_at"`)}
	}
	if _, ok := ctc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "CouponTemplate.enable"`)}
	}
	if _, ok := ctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CouponTemplate.name"`)}
	}
	if _, ok := ctc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "CouponTemplate.meta"`)}
	}
	return nil
}

func (ctc *CouponTemplateCreate) sqlSave(ctx context.Context) (*CouponTemplate, error) {
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ctc *CouponTemplateCreate) createSpec() (*CouponTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &CouponTemplate{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coupontemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupontemplate.FieldID,
			},
		}
	)
	_spec.OnConflict = ctc.conflict
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupontemplate.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: coupontemplate.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ctc.mutation.Enable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: coupontemplate.FieldEnable,
		})
		_node.Enable = value
	}
	if value, ok := ctc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: coupontemplate.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ctc.mutation.Meta(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: coupontemplate.FieldMeta,
		})
		_node.Meta = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ctc *CouponTemplateCreate) OnConflict(opts ...sql.ConflictOption) *CouponTemplateUpsertOne {
	ctc.conflict = opts
	return &CouponTemplateUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctc *CouponTemplateCreate) OnConflictColumns(columns ...string) *CouponTemplateUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &CouponTemplateUpsertOne{
		create: ctc,
	}
}

type (
	// CouponTemplateUpsertOne is the builder for "upsert"-ing
	//  one CouponTemplate node.
	CouponTemplateUpsertOne struct {
		create *CouponTemplateCreate
	}

	// CouponTemplateUpsert is the "OnConflict" setter.
	CouponTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponTemplateUpsert) SetUpdatedAt(v time.Time) *CouponTemplateUpsert {
	u.Set(coupontemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponTemplateUpsert) UpdateUpdatedAt() *CouponTemplateUpsert {
	u.SetExcluded(coupontemplate.FieldUpdatedAt)
	return u
}

// SetEnable sets the "enable" field.
func (u *CouponTemplateUpsert) SetEnable(v bool) *CouponTemplateUpsert {
	u.Set(coupontemplate.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CouponTemplateUpsert) UpdateEnable() *CouponTemplateUpsert {
	u.SetExcluded(coupontemplate.FieldEnable)
	return u
}

// SetName sets the "name" field.
func (u *CouponTemplateUpsert) SetName(v string) *CouponTemplateUpsert {
	u.Set(coupontemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponTemplateUpsert) UpdateName() *CouponTemplateUpsert {
	u.SetExcluded(coupontemplate.FieldName)
	return u
}

// SetMeta sets the "meta" field.
func (u *CouponTemplateUpsert) SetMeta(v *model.CouponTemplateMeta) *CouponTemplateUpsert {
	u.Set(coupontemplate.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *CouponTemplateUpsert) UpdateMeta() *CouponTemplateUpsert {
	u.SetExcluded(coupontemplate.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponTemplateUpsertOne) UpdateNewValues() *CouponTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(coupontemplate.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponTemplateUpsertOne) Ignore() *CouponTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponTemplateUpsertOne) DoNothing() *CouponTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponTemplateCreate.OnConflict
// documentation for more info.
func (u *CouponTemplateUpsertOne) Update(set func(*CouponTemplateUpsert)) *CouponTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponTemplateUpsertOne) SetUpdatedAt(v time.Time) *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponTemplateUpsertOne) UpdateUpdatedAt() *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnable sets the "enable" field.
func (u *CouponTemplateUpsertOne) SetEnable(v bool) *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CouponTemplateUpsertOne) UpdateEnable() *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateEnable()
	})
}

// SetName sets the "name" field.
func (u *CouponTemplateUpsertOne) SetName(v string) *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponTemplateUpsertOne) UpdateName() *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateName()
	})
}

// SetMeta sets the "meta" field.
func (u *CouponTemplateUpsertOne) SetMeta(v *model.CouponTemplateMeta) *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *CouponTemplateUpsertOne) UpdateMeta() *CouponTemplateUpsertOne {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *CouponTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponTemplateUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponTemplateUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponTemplateCreateBulk is the builder for creating many CouponTemplate entities in bulk.
type CouponTemplateCreateBulk struct {
	config
	builders []*CouponTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the CouponTemplate entities in the database.
func (ctcb *CouponTemplateCreateBulk) Save(ctx context.Context) ([]*CouponTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CouponTemplate, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CouponTemplateCreateBulk) SaveX(ctx context.Context) []*CouponTemplate {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CouponTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CouponTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CouponTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ctcb *CouponTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponTemplateUpsertBulk {
	ctcb.conflict = opts
	return &CouponTemplateUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctcb *CouponTemplateCreateBulk) OnConflictColumns(columns ...string) *CouponTemplateUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &CouponTemplateUpsertBulk{
		create: ctcb,
	}
}

// CouponTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of CouponTemplate nodes.
type CouponTemplateUpsertBulk struct {
	create *CouponTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponTemplateUpsertBulk) UpdateNewValues() *CouponTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(coupontemplate.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CouponTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponTemplateUpsertBulk) Ignore() *CouponTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponTemplateUpsertBulk) DoNothing() *CouponTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *CouponTemplateUpsertBulk) Update(set func(*CouponTemplateUpsert)) *CouponTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponTemplateUpsertBulk) SetUpdatedAt(v time.Time) *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponTemplateUpsertBulk) UpdateUpdatedAt() *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetEnable sets the "enable" field.
func (u *CouponTemplateUpsertBulk) SetEnable(v bool) *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CouponTemplateUpsertBulk) UpdateEnable() *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateEnable()
	})
}

// SetName sets the "name" field.
func (u *CouponTemplateUpsertBulk) SetName(v string) *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CouponTemplateUpsertBulk) UpdateName() *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateName()
	})
}

// SetMeta sets the "meta" field.
func (u *CouponTemplateUpsertBulk) SetMeta(v *model.CouponTemplateMeta) *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *CouponTemplateUpsertBulk) UpdateMeta() *CouponTemplateUpsertBulk {
	return u.Update(func(s *CouponTemplateUpsert) {
		s.UpdateMeta()
	})
}

// Exec executes the query.
func (u *CouponTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
