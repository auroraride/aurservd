// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
)

// AssetScrapCreate is the builder for creating a AssetScrap entity.
type AssetScrapCreate struct {
	config
	mutation *AssetScrapMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (asc *AssetScrapCreate) SetCreatedAt(t time.Time) *AssetScrapCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableCreatedAt(t *time.Time) *AssetScrapCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AssetScrapCreate) SetUpdatedAt(t time.Time) *AssetScrapCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableUpdatedAt(t *time.Time) *AssetScrapCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetCreator sets the "creator" field.
func (asc *AssetScrapCreate) SetCreator(m *model.Modifier) *AssetScrapCreate {
	asc.mutation.SetCreator(m)
	return asc
}

// SetLastModifier sets the "last_modifier" field.
func (asc *AssetScrapCreate) SetLastModifier(m *model.Modifier) *AssetScrapCreate {
	asc.mutation.SetLastModifier(m)
	return asc
}

// SetRemark sets the "remark" field.
func (asc *AssetScrapCreate) SetRemark(s string) *AssetScrapCreate {
	asc.mutation.SetRemark(s)
	return asc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableRemark(s *string) *AssetScrapCreate {
	if s != nil {
		asc.SetRemark(*s)
	}
	return asc
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (asc *AssetScrapCreate) SetScrapReasonType(u uint8) *AssetScrapCreate {
	asc.mutation.SetScrapReasonType(u)
	return asc
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableScrapReasonType(u *uint8) *AssetScrapCreate {
	if u != nil {
		asc.SetScrapReasonType(*u)
	}
	return asc
}

// SetScrapAt sets the "scrap_at" field.
func (asc *AssetScrapCreate) SetScrapAt(t time.Time) *AssetScrapCreate {
	asc.mutation.SetScrapAt(t)
	return asc
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableScrapAt(t *time.Time) *AssetScrapCreate {
	if t != nil {
		asc.SetScrapAt(*t)
	}
	return asc
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (asc *AssetScrapCreate) SetScrapOperateID(u uint64) *AssetScrapCreate {
	asc.mutation.SetScrapOperateID(u)
	return asc
}

// SetNillableScrapOperateID sets the "scrap_operate_id" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableScrapOperateID(u *uint64) *AssetScrapCreate {
	if u != nil {
		asc.SetScrapOperateID(*u)
	}
	return asc
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (asc *AssetScrapCreate) SetScrapOperateRoleType(u uint8) *AssetScrapCreate {
	asc.mutation.SetScrapOperateRoleType(u)
	return asc
}

// SetNillableScrapOperateRoleType sets the "scrap_operate_role_type" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableScrapOperateRoleType(u *uint8) *AssetScrapCreate {
	if u != nil {
		asc.SetScrapOperateRoleType(*u)
	}
	return asc
}

// SetScrapBatch sets the "scrap_batch" field.
func (asc *AssetScrapCreate) SetScrapBatch(s string) *AssetScrapCreate {
	asc.mutation.SetScrapBatch(s)
	return asc
}

// SetNillableScrapBatch sets the "scrap_batch" field if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableScrapBatch(s *string) *AssetScrapCreate {
	if s != nil {
		asc.SetScrapBatch(*s)
	}
	return asc
}

// SetAssetID sets the "asset_id" field.
func (asc *AssetScrapCreate) SetAssetID(u uint64) *AssetScrapCreate {
	asc.mutation.SetAssetID(u)
	return asc
}

// SetManagerID sets the "manager" edge to the Manager entity by ID.
func (asc *AssetScrapCreate) SetManagerID(id uint64) *AssetScrapCreate {
	asc.mutation.SetManagerID(id)
	return asc
}

// SetNillableManagerID sets the "manager" edge to the Manager entity by ID if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableManagerID(id *uint64) *AssetScrapCreate {
	if id != nil {
		asc = asc.SetManagerID(*id)
	}
	return asc
}

// SetManager sets the "manager" edge to the Manager entity.
func (asc *AssetScrapCreate) SetManager(m *Manager) *AssetScrapCreate {
	return asc.SetManagerID(m.ID)
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (asc *AssetScrapCreate) SetEmployeeID(id uint64) *AssetScrapCreate {
	asc.mutation.SetEmployeeID(id)
	return asc
}

// SetNillableEmployeeID sets the "employee" edge to the Employee entity by ID if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableEmployeeID(id *uint64) *AssetScrapCreate {
	if id != nil {
		asc = asc.SetEmployeeID(*id)
	}
	return asc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (asc *AssetScrapCreate) SetEmployee(e *Employee) *AssetScrapCreate {
	return asc.SetEmployeeID(e.ID)
}

// SetMaintainerID sets the "maintainer" edge to the Maintainer entity by ID.
func (asc *AssetScrapCreate) SetMaintainerID(id uint64) *AssetScrapCreate {
	asc.mutation.SetMaintainerID(id)
	return asc
}

// SetNillableMaintainerID sets the "maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableMaintainerID(id *uint64) *AssetScrapCreate {
	if id != nil {
		asc = asc.SetMaintainerID(*id)
	}
	return asc
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (asc *AssetScrapCreate) SetMaintainer(m *Maintainer) *AssetScrapCreate {
	return asc.SetMaintainerID(m.ID)
}

// SetAgentID sets the "agent" edge to the Agent entity by ID.
func (asc *AssetScrapCreate) SetAgentID(id uint64) *AssetScrapCreate {
	asc.mutation.SetAgentID(id)
	return asc
}

// SetNillableAgentID sets the "agent" edge to the Agent entity by ID if the given value is not nil.
func (asc *AssetScrapCreate) SetNillableAgentID(id *uint64) *AssetScrapCreate {
	if id != nil {
		asc = asc.SetAgentID(*id)
	}
	return asc
}

// SetAgent sets the "agent" edge to the Agent entity.
func (asc *AssetScrapCreate) SetAgent(a *Agent) *AssetScrapCreate {
	return asc.SetAgentID(a.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asc *AssetScrapCreate) SetAsset(a *Asset) *AssetScrapCreate {
	return asc.SetAssetID(a.ID)
}

// Mutation returns the AssetScrapMutation object of the builder.
func (asc *AssetScrapCreate) Mutation() *AssetScrapMutation {
	return asc.mutation
}

// Save creates the AssetScrap in the database.
func (asc *AssetScrapCreate) Save(ctx context.Context) (*AssetScrap, error) {
	if err := asc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AssetScrapCreate) SaveX(ctx context.Context) *AssetScrap {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AssetScrapCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AssetScrapCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AssetScrapCreate) defaults() error {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		if assetscrap.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetscrap.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assetscrap.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		if assetscrap.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetscrap.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetscrap.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (asc *AssetScrapCreate) check() error {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetScrap.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetScrap.updated_at"`)}
	}
	if _, ok := asc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "asset_id", err: errors.New(`ent: missing required field "AssetScrap.asset_id"`)}
	}
	if _, ok := asc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "asset", err: errors.New(`ent: missing required edge "AssetScrap.asset"`)}
	}
	return nil
}

func (asc *AssetScrapCreate) sqlSave(ctx context.Context) (*AssetScrap, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AssetScrapCreate) createSpec() (*AssetScrap, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetScrap{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(assetscrap.Table, sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = asc.conflict
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(assetscrap.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrap.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.Creator(); ok {
		_spec.SetField(assetscrap.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := asc.mutation.LastModifier(); ok {
		_spec.SetField(assetscrap.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := asc.mutation.Remark(); ok {
		_spec.SetField(assetscrap.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := asc.mutation.ScrapReasonType(); ok {
		_spec.SetField(assetscrap.FieldScrapReasonType, field.TypeUint8, value)
		_node.ScrapReasonType = value
	}
	if value, ok := asc.mutation.ScrapAt(); ok {
		_spec.SetField(assetscrap.FieldScrapAt, field.TypeTime, value)
		_node.ScrapAt = value
	}
	if value, ok := asc.mutation.ScrapOperateRoleType(); ok {
		_spec.SetField(assetscrap.FieldScrapOperateRoleType, field.TypeUint8, value)
		_node.ScrapOperateRoleType = &value
	}
	if value, ok := asc.mutation.ScrapBatch(); ok {
		_spec.SetField(assetscrap.FieldScrapBatch, field.TypeString, value)
		_node.ScrapBatch = value
	}
	if nodes := asc.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.ManagerTable,
			Columns: []string{assetscrap.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScrapOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.EmployeeTable,
			Columns: []string{assetscrap.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScrapOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.MaintainerTable,
			Columns: []string{assetscrap.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScrapOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetscrap.AgentTable,
			Columns: []string{assetscrap.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScrapOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrap.AssetTable,
			Columns: []string{assetscrap.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetScrap.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetScrapUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (asc *AssetScrapCreate) OnConflict(opts ...sql.ConflictOption) *AssetScrapUpsertOne {
	asc.conflict = opts
	return &AssetScrapUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AssetScrapCreate) OnConflictColumns(columns ...string) *AssetScrapUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AssetScrapUpsertOne{
		create: asc,
	}
}

type (
	// AssetScrapUpsertOne is the builder for "upsert"-ing
	//  one AssetScrap node.
	AssetScrapUpsertOne struct {
		create *AssetScrapCreate
	}

	// AssetScrapUpsert is the "OnConflict" setter.
	AssetScrapUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapUpsert) SetUpdatedAt(v time.Time) *AssetScrapUpsert {
	u.Set(assetscrap.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateUpdatedAt() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetScrapUpsert) SetLastModifier(v *model.Modifier) *AssetScrapUpsert {
	u.Set(assetscrap.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateLastModifier() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetScrapUpsert) ClearLastModifier() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetScrapUpsert) SetRemark(v string) *AssetScrapUpsert {
	u.Set(assetscrap.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateRemark() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetScrapUpsert) ClearRemark() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldRemark)
	return u
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *AssetScrapUpsert) SetScrapReasonType(v uint8) *AssetScrapUpsert {
	u.Set(assetscrap.FieldScrapReasonType, v)
	return u
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateScrapReasonType() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldScrapReasonType)
	return u
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *AssetScrapUpsert) AddScrapReasonType(v uint8) *AssetScrapUpsert {
	u.Add(assetscrap.FieldScrapReasonType, v)
	return u
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *AssetScrapUpsert) ClearScrapReasonType() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldScrapReasonType)
	return u
}

// SetScrapAt sets the "scrap_at" field.
func (u *AssetScrapUpsert) SetScrapAt(v time.Time) *AssetScrapUpsert {
	u.Set(assetscrap.FieldScrapAt, v)
	return u
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateScrapAt() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldScrapAt)
	return u
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *AssetScrapUpsert) ClearScrapAt() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldScrapAt)
	return u
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (u *AssetScrapUpsert) SetScrapOperateID(v uint64) *AssetScrapUpsert {
	u.Set(assetscrap.FieldScrapOperateID, v)
	return u
}

// UpdateScrapOperateID sets the "scrap_operate_id" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateScrapOperateID() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldScrapOperateID)
	return u
}

// ClearScrapOperateID clears the value of the "scrap_operate_id" field.
func (u *AssetScrapUpsert) ClearScrapOperateID() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldScrapOperateID)
	return u
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (u *AssetScrapUpsert) SetScrapOperateRoleType(v uint8) *AssetScrapUpsert {
	u.Set(assetscrap.FieldScrapOperateRoleType, v)
	return u
}

// UpdateScrapOperateRoleType sets the "scrap_operate_role_type" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateScrapOperateRoleType() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldScrapOperateRoleType)
	return u
}

// AddScrapOperateRoleType adds v to the "scrap_operate_role_type" field.
func (u *AssetScrapUpsert) AddScrapOperateRoleType(v uint8) *AssetScrapUpsert {
	u.Add(assetscrap.FieldScrapOperateRoleType, v)
	return u
}

// ClearScrapOperateRoleType clears the value of the "scrap_operate_role_type" field.
func (u *AssetScrapUpsert) ClearScrapOperateRoleType() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldScrapOperateRoleType)
	return u
}

// SetScrapBatch sets the "scrap_batch" field.
func (u *AssetScrapUpsert) SetScrapBatch(v string) *AssetScrapUpsert {
	u.Set(assetscrap.FieldScrapBatch, v)
	return u
}

// UpdateScrapBatch sets the "scrap_batch" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateScrapBatch() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldScrapBatch)
	return u
}

// ClearScrapBatch clears the value of the "scrap_batch" field.
func (u *AssetScrapUpsert) ClearScrapBatch() *AssetScrapUpsert {
	u.SetNull(assetscrap.FieldScrapBatch)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapUpsert) SetAssetID(v uint64) *AssetScrapUpsert {
	u.Set(assetscrap.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapUpsert) UpdateAssetID() *AssetScrapUpsert {
	u.SetExcluded(assetscrap.FieldAssetID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetScrapUpsertOne) UpdateNewValues() *AssetScrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetscrap.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assetscrap.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetScrapUpsertOne) Ignore() *AssetScrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetScrapUpsertOne) DoNothing() *AssetScrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetScrapCreate.OnConflict
// documentation for more info.
func (u *AssetScrapUpsertOne) Update(set func(*AssetScrapUpsert)) *AssetScrapUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetScrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapUpsertOne) SetUpdatedAt(v time.Time) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateUpdatedAt() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetScrapUpsertOne) SetLastModifier(v *model.Modifier) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateLastModifier() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetScrapUpsertOne) ClearLastModifier() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetScrapUpsertOne) SetRemark(v string) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateRemark() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetScrapUpsertOne) ClearRemark() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearRemark()
	})
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *AssetScrapUpsertOne) SetScrapReasonType(v uint8) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapReasonType(v)
	})
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *AssetScrapUpsertOne) AddScrapReasonType(v uint8) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.AddScrapReasonType(v)
	})
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateScrapReasonType() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapReasonType()
	})
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *AssetScrapUpsertOne) ClearScrapReasonType() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapReasonType()
	})
}

// SetScrapAt sets the "scrap_at" field.
func (u *AssetScrapUpsertOne) SetScrapAt(v time.Time) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapAt(v)
	})
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateScrapAt() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapAt()
	})
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *AssetScrapUpsertOne) ClearScrapAt() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapAt()
	})
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (u *AssetScrapUpsertOne) SetScrapOperateID(v uint64) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapOperateID(v)
	})
}

// UpdateScrapOperateID sets the "scrap_operate_id" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateScrapOperateID() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapOperateID()
	})
}

// ClearScrapOperateID clears the value of the "scrap_operate_id" field.
func (u *AssetScrapUpsertOne) ClearScrapOperateID() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapOperateID()
	})
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertOne) SetScrapOperateRoleType(v uint8) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapOperateRoleType(v)
	})
}

// AddScrapOperateRoleType adds v to the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertOne) AddScrapOperateRoleType(v uint8) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.AddScrapOperateRoleType(v)
	})
}

// UpdateScrapOperateRoleType sets the "scrap_operate_role_type" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateScrapOperateRoleType() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapOperateRoleType()
	})
}

// ClearScrapOperateRoleType clears the value of the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertOne) ClearScrapOperateRoleType() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapOperateRoleType()
	})
}

// SetScrapBatch sets the "scrap_batch" field.
func (u *AssetScrapUpsertOne) SetScrapBatch(v string) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapBatch(v)
	})
}

// UpdateScrapBatch sets the "scrap_batch" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateScrapBatch() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapBatch()
	})
}

// ClearScrapBatch clears the value of the "scrap_batch" field.
func (u *AssetScrapUpsertOne) ClearScrapBatch() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapBatch()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapUpsertOne) SetAssetID(v uint64) *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapUpsertOne) UpdateAssetID() *AssetScrapUpsertOne {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateAssetID()
	})
}

// Exec executes the query.
func (u *AssetScrapUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetScrapCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetScrapUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetScrapUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetScrapUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetScrapCreateBulk is the builder for creating many AssetScrap entities in bulk.
type AssetScrapCreateBulk struct {
	config
	err      error
	builders []*AssetScrapCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetScrap entities in the database.
func (ascb *AssetScrapCreateBulk) Save(ctx context.Context) ([]*AssetScrap, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AssetScrap, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetScrapMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AssetScrapCreateBulk) SaveX(ctx context.Context) []*AssetScrap {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AssetScrapCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AssetScrapCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetScrap.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetScrapUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ascb *AssetScrapCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetScrapUpsertBulk {
	ascb.conflict = opts
	return &AssetScrapUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AssetScrapCreateBulk) OnConflictColumns(columns ...string) *AssetScrapUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AssetScrapUpsertBulk{
		create: ascb,
	}
}

// AssetScrapUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetScrap nodes.
type AssetScrapUpsertBulk struct {
	create *AssetScrapCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetScrapUpsertBulk) UpdateNewValues() *AssetScrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetscrap.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assetscrap.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetScrap.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetScrapUpsertBulk) Ignore() *AssetScrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetScrapUpsertBulk) DoNothing() *AssetScrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetScrapCreateBulk.OnConflict
// documentation for more info.
func (u *AssetScrapUpsertBulk) Update(set func(*AssetScrapUpsert)) *AssetScrapUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetScrapUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapUpsertBulk) SetUpdatedAt(v time.Time) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateUpdatedAt() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetScrapUpsertBulk) SetLastModifier(v *model.Modifier) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateLastModifier() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetScrapUpsertBulk) ClearLastModifier() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetScrapUpsertBulk) SetRemark(v string) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateRemark() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetScrapUpsertBulk) ClearRemark() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearRemark()
	})
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *AssetScrapUpsertBulk) SetScrapReasonType(v uint8) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapReasonType(v)
	})
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *AssetScrapUpsertBulk) AddScrapReasonType(v uint8) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.AddScrapReasonType(v)
	})
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateScrapReasonType() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapReasonType()
	})
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *AssetScrapUpsertBulk) ClearScrapReasonType() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapReasonType()
	})
}

// SetScrapAt sets the "scrap_at" field.
func (u *AssetScrapUpsertBulk) SetScrapAt(v time.Time) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapAt(v)
	})
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateScrapAt() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapAt()
	})
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *AssetScrapUpsertBulk) ClearScrapAt() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapAt()
	})
}

// SetScrapOperateID sets the "scrap_operate_id" field.
func (u *AssetScrapUpsertBulk) SetScrapOperateID(v uint64) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapOperateID(v)
	})
}

// UpdateScrapOperateID sets the "scrap_operate_id" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateScrapOperateID() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapOperateID()
	})
}

// ClearScrapOperateID clears the value of the "scrap_operate_id" field.
func (u *AssetScrapUpsertBulk) ClearScrapOperateID() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapOperateID()
	})
}

// SetScrapOperateRoleType sets the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertBulk) SetScrapOperateRoleType(v uint8) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapOperateRoleType(v)
	})
}

// AddScrapOperateRoleType adds v to the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertBulk) AddScrapOperateRoleType(v uint8) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.AddScrapOperateRoleType(v)
	})
}

// UpdateScrapOperateRoleType sets the "scrap_operate_role_type" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateScrapOperateRoleType() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapOperateRoleType()
	})
}

// ClearScrapOperateRoleType clears the value of the "scrap_operate_role_type" field.
func (u *AssetScrapUpsertBulk) ClearScrapOperateRoleType() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapOperateRoleType()
	})
}

// SetScrapBatch sets the "scrap_batch" field.
func (u *AssetScrapUpsertBulk) SetScrapBatch(v string) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetScrapBatch(v)
	})
}

// UpdateScrapBatch sets the "scrap_batch" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateScrapBatch() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateScrapBatch()
	})
}

// ClearScrapBatch clears the value of the "scrap_batch" field.
func (u *AssetScrapUpsertBulk) ClearScrapBatch() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.ClearScrapBatch()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapUpsertBulk) SetAssetID(v uint64) *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapUpsertBulk) UpdateAssetID() *AssetScrapUpsertBulk {
	return u.Update(func(s *AssetScrapUpsert) {
		s.UpdateAssetID()
	})
}

// Exec executes the query.
func (u *AssetScrapUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetScrapCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetScrapCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetScrapUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
