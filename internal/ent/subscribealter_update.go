// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
)

// SubscribeAlterUpdate is the builder for updating SubscribeAlter entities.
type SubscribeAlterUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscribeAlterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscribeAlterUpdate builder.
func (sau *SubscribeAlterUpdate) Where(ps ...predicate.SubscribeAlter) *SubscribeAlterUpdate {
	sau.mutation.Where(ps...)
	return sau
}

// SetUpdatedAt sets the "updated_at" field.
func (sau *SubscribeAlterUpdate) SetUpdatedAt(t time.Time) *SubscribeAlterUpdate {
	sau.mutation.SetUpdatedAt(t)
	return sau
}

// SetLastModifier sets the "last_modifier" field.
func (sau *SubscribeAlterUpdate) SetLastModifier(m *model.Modifier) *SubscribeAlterUpdate {
	sau.mutation.SetLastModifier(m)
	return sau
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (sau *SubscribeAlterUpdate) ClearLastModifier() *SubscribeAlterUpdate {
	sau.mutation.ClearLastModifier()
	return sau
}

// SetRemark sets the "remark" field.
func (sau *SubscribeAlterUpdate) SetRemark(s string) *SubscribeAlterUpdate {
	sau.mutation.SetRemark(s)
	return sau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableRemark(s *string) *SubscribeAlterUpdate {
	if s != nil {
		sau.SetRemark(*s)
	}
	return sau
}

// ClearRemark clears the value of the "remark" field.
func (sau *SubscribeAlterUpdate) ClearRemark() *SubscribeAlterUpdate {
	sau.mutation.ClearRemark()
	return sau
}

// SetRiderID sets the "rider_id" field.
func (sau *SubscribeAlterUpdate) SetRiderID(u uint64) *SubscribeAlterUpdate {
	sau.mutation.SetRiderID(u)
	return sau
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableRiderID(u *uint64) *SubscribeAlterUpdate {
	if u != nil {
		sau.SetRiderID(*u)
	}
	return sau
}

// SetManagerID sets the "manager_id" field.
func (sau *SubscribeAlterUpdate) SetManagerID(u uint64) *SubscribeAlterUpdate {
	sau.mutation.SetManagerID(u)
	return sau
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableManagerID(u *uint64) *SubscribeAlterUpdate {
	if u != nil {
		sau.SetManagerID(*u)
	}
	return sau
}

// ClearManagerID clears the value of the "manager_id" field.
func (sau *SubscribeAlterUpdate) ClearManagerID() *SubscribeAlterUpdate {
	sau.mutation.ClearManagerID()
	return sau
}

// SetEnterpriseID sets the "enterprise_id" field.
func (sau *SubscribeAlterUpdate) SetEnterpriseID(u uint64) *SubscribeAlterUpdate {
	sau.mutation.SetEnterpriseID(u)
	return sau
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableEnterpriseID(u *uint64) *SubscribeAlterUpdate {
	if u != nil {
		sau.SetEnterpriseID(*u)
	}
	return sau
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (sau *SubscribeAlterUpdate) ClearEnterpriseID() *SubscribeAlterUpdate {
	sau.mutation.ClearEnterpriseID()
	return sau
}

// SetAgentID sets the "agent_id" field.
func (sau *SubscribeAlterUpdate) SetAgentID(u uint64) *SubscribeAlterUpdate {
	sau.mutation.SetAgentID(u)
	return sau
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableAgentID(u *uint64) *SubscribeAlterUpdate {
	if u != nil {
		sau.SetAgentID(*u)
	}
	return sau
}

// ClearAgentID clears the value of the "agent_id" field.
func (sau *SubscribeAlterUpdate) ClearAgentID() *SubscribeAlterUpdate {
	sau.mutation.ClearAgentID()
	return sau
}

// SetSubscribeID sets the "subscribe_id" field.
func (sau *SubscribeAlterUpdate) SetSubscribeID(u uint64) *SubscribeAlterUpdate {
	sau.mutation.SetSubscribeID(u)
	return sau
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableSubscribeID(u *uint64) *SubscribeAlterUpdate {
	if u != nil {
		sau.SetSubscribeID(*u)
	}
	return sau
}

// SetDays sets the "days" field.
func (sau *SubscribeAlterUpdate) SetDays(i int) *SubscribeAlterUpdate {
	sau.mutation.ResetDays()
	sau.mutation.SetDays(i)
	return sau
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableDays(i *int) *SubscribeAlterUpdate {
	if i != nil {
		sau.SetDays(*i)
	}
	return sau
}

// AddDays adds i to the "days" field.
func (sau *SubscribeAlterUpdate) AddDays(i int) *SubscribeAlterUpdate {
	sau.mutation.AddDays(i)
	return sau
}

// SetStatus sets the "status" field.
func (sau *SubscribeAlterUpdate) SetStatus(i int) *SubscribeAlterUpdate {
	sau.mutation.ResetStatus()
	sau.mutation.SetStatus(i)
	return sau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableStatus(i *int) *SubscribeAlterUpdate {
	if i != nil {
		sau.SetStatus(*i)
	}
	return sau
}

// AddStatus adds i to the "status" field.
func (sau *SubscribeAlterUpdate) AddStatus(i int) *SubscribeAlterUpdate {
	sau.mutation.AddStatus(i)
	return sau
}

// SetReviewTime sets the "review_time" field.
func (sau *SubscribeAlterUpdate) SetReviewTime(t time.Time) *SubscribeAlterUpdate {
	sau.mutation.SetReviewTime(t)
	return sau
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableReviewTime(t *time.Time) *SubscribeAlterUpdate {
	if t != nil {
		sau.SetReviewTime(*t)
	}
	return sau
}

// ClearReviewTime clears the value of the "review_time" field.
func (sau *SubscribeAlterUpdate) ClearReviewTime() *SubscribeAlterUpdate {
	sau.mutation.ClearReviewTime()
	return sau
}

// SetSubscribeEndAt sets the "subscribe_end_at" field.
func (sau *SubscribeAlterUpdate) SetSubscribeEndAt(t time.Time) *SubscribeAlterUpdate {
	sau.mutation.SetSubscribeEndAt(t)
	return sau
}

// SetNillableSubscribeEndAt sets the "subscribe_end_at" field if the given value is not nil.
func (sau *SubscribeAlterUpdate) SetNillableSubscribeEndAt(t *time.Time) *SubscribeAlterUpdate {
	if t != nil {
		sau.SetSubscribeEndAt(*t)
	}
	return sau
}

// ClearSubscribeEndAt clears the value of the "subscribe_end_at" field.
func (sau *SubscribeAlterUpdate) ClearSubscribeEndAt() *SubscribeAlterUpdate {
	sau.mutation.ClearSubscribeEndAt()
	return sau
}

// SetRider sets the "rider" edge to the Rider entity.
func (sau *SubscribeAlterUpdate) SetRider(r *Rider) *SubscribeAlterUpdate {
	return sau.SetRiderID(r.ID)
}

// SetManager sets the "manager" edge to the Manager entity.
func (sau *SubscribeAlterUpdate) SetManager(m *Manager) *SubscribeAlterUpdate {
	return sau.SetManagerID(m.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (sau *SubscribeAlterUpdate) SetEnterprise(e *Enterprise) *SubscribeAlterUpdate {
	return sau.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (sau *SubscribeAlterUpdate) SetAgent(a *Agent) *SubscribeAlterUpdate {
	return sau.SetAgentID(a.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sau *SubscribeAlterUpdate) SetSubscribe(s *Subscribe) *SubscribeAlterUpdate {
	return sau.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeAlterMutation object of the builder.
func (sau *SubscribeAlterUpdate) Mutation() *SubscribeAlterMutation {
	return sau.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (sau *SubscribeAlterUpdate) ClearRider() *SubscribeAlterUpdate {
	sau.mutation.ClearRider()
	return sau
}

// ClearManager clears the "manager" edge to the Manager entity.
func (sau *SubscribeAlterUpdate) ClearManager() *SubscribeAlterUpdate {
	sau.mutation.ClearManager()
	return sau
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (sau *SubscribeAlterUpdate) ClearEnterprise() *SubscribeAlterUpdate {
	sau.mutation.ClearEnterprise()
	return sau
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (sau *SubscribeAlterUpdate) ClearAgent() *SubscribeAlterUpdate {
	sau.mutation.ClearAgent()
	return sau
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sau *SubscribeAlterUpdate) ClearSubscribe() *SubscribeAlterUpdate {
	sau.mutation.ClearSubscribe()
	return sau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sau *SubscribeAlterUpdate) Save(ctx context.Context) (int, error) {
	if err := sau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sau.sqlSave, sau.mutation, sau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sau *SubscribeAlterUpdate) SaveX(ctx context.Context) int {
	affected, err := sau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sau *SubscribeAlterUpdate) Exec(ctx context.Context) error {
	_, err := sau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sau *SubscribeAlterUpdate) ExecX(ctx context.Context) {
	if err := sau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sau *SubscribeAlterUpdate) defaults() error {
	if _, ok := sau.mutation.UpdatedAt(); !ok {
		if subscribealter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribealter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribealter.UpdateDefaultUpdatedAt()
		sau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sau *SubscribeAlterUpdate) check() error {
	if _, ok := sau.mutation.RiderID(); sau.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeAlter.rider"`)
	}
	if _, ok := sau.mutation.SubscribeID(); sau.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeAlter.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sau *SubscribeAlterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeAlterUpdate {
	sau.modifiers = append(sau.modifiers, modifiers...)
	return sau
}

func (sau *SubscribeAlterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribealter.Table, subscribealter.Columns, sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64))
	if ps := sau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sau.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribealter.FieldUpdatedAt, field.TypeTime, value)
	}
	if sau.mutation.CreatorCleared() {
		_spec.ClearField(subscribealter.FieldCreator, field.TypeJSON)
	}
	if value, ok := sau.mutation.LastModifier(); ok {
		_spec.SetField(subscribealter.FieldLastModifier, field.TypeJSON, value)
	}
	if sau.mutation.LastModifierCleared() {
		_spec.ClearField(subscribealter.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := sau.mutation.Remark(); ok {
		_spec.SetField(subscribealter.FieldRemark, field.TypeString, value)
	}
	if sau.mutation.RemarkCleared() {
		_spec.ClearField(subscribealter.FieldRemark, field.TypeString)
	}
	if value, ok := sau.mutation.Days(); ok {
		_spec.SetField(subscribealter.FieldDays, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedDays(); ok {
		_spec.AddField(subscribealter.FieldDays, field.TypeInt, value)
	}
	if value, ok := sau.mutation.Status(); ok {
		_spec.SetField(subscribealter.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sau.mutation.AddedStatus(); ok {
		_spec.AddField(subscribealter.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sau.mutation.ReviewTime(); ok {
		_spec.SetField(subscribealter.FieldReviewTime, field.TypeTime, value)
	}
	if sau.mutation.ReviewTimeCleared() {
		_spec.ClearField(subscribealter.FieldReviewTime, field.TypeTime)
	}
	if value, ok := sau.mutation.SubscribeEndAt(); ok {
		_spec.SetField(subscribealter.FieldSubscribeEndAt, field.TypeTime, value)
	}
	if sau.mutation.SubscribeEndAtCleared() {
		_spec.ClearField(subscribealter.FieldSubscribeEndAt, field.TypeTime)
	}
	if sau.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sau.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sau.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribealter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sau.mutation.done = true
	return n, nil
}

// SubscribeAlterUpdateOne is the builder for updating a single SubscribeAlter entity.
type SubscribeAlterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscribeAlterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sauo *SubscribeAlterUpdateOne) SetUpdatedAt(t time.Time) *SubscribeAlterUpdateOne {
	sauo.mutation.SetUpdatedAt(t)
	return sauo
}

// SetLastModifier sets the "last_modifier" field.
func (sauo *SubscribeAlterUpdateOne) SetLastModifier(m *model.Modifier) *SubscribeAlterUpdateOne {
	sauo.mutation.SetLastModifier(m)
	return sauo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (sauo *SubscribeAlterUpdateOne) ClearLastModifier() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearLastModifier()
	return sauo
}

// SetRemark sets the "remark" field.
func (sauo *SubscribeAlterUpdateOne) SetRemark(s string) *SubscribeAlterUpdateOne {
	sauo.mutation.SetRemark(s)
	return sauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableRemark(s *string) *SubscribeAlterUpdateOne {
	if s != nil {
		sauo.SetRemark(*s)
	}
	return sauo
}

// ClearRemark clears the value of the "remark" field.
func (sauo *SubscribeAlterUpdateOne) ClearRemark() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearRemark()
	return sauo
}

// SetRiderID sets the "rider_id" field.
func (sauo *SubscribeAlterUpdateOne) SetRiderID(u uint64) *SubscribeAlterUpdateOne {
	sauo.mutation.SetRiderID(u)
	return sauo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableRiderID(u *uint64) *SubscribeAlterUpdateOne {
	if u != nil {
		sauo.SetRiderID(*u)
	}
	return sauo
}

// SetManagerID sets the "manager_id" field.
func (sauo *SubscribeAlterUpdateOne) SetManagerID(u uint64) *SubscribeAlterUpdateOne {
	sauo.mutation.SetManagerID(u)
	return sauo
}

// SetNillableManagerID sets the "manager_id" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableManagerID(u *uint64) *SubscribeAlterUpdateOne {
	if u != nil {
		sauo.SetManagerID(*u)
	}
	return sauo
}

// ClearManagerID clears the value of the "manager_id" field.
func (sauo *SubscribeAlterUpdateOne) ClearManagerID() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearManagerID()
	return sauo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (sauo *SubscribeAlterUpdateOne) SetEnterpriseID(u uint64) *SubscribeAlterUpdateOne {
	sauo.mutation.SetEnterpriseID(u)
	return sauo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableEnterpriseID(u *uint64) *SubscribeAlterUpdateOne {
	if u != nil {
		sauo.SetEnterpriseID(*u)
	}
	return sauo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (sauo *SubscribeAlterUpdateOne) ClearEnterpriseID() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearEnterpriseID()
	return sauo
}

// SetAgentID sets the "agent_id" field.
func (sauo *SubscribeAlterUpdateOne) SetAgentID(u uint64) *SubscribeAlterUpdateOne {
	sauo.mutation.SetAgentID(u)
	return sauo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableAgentID(u *uint64) *SubscribeAlterUpdateOne {
	if u != nil {
		sauo.SetAgentID(*u)
	}
	return sauo
}

// ClearAgentID clears the value of the "agent_id" field.
func (sauo *SubscribeAlterUpdateOne) ClearAgentID() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearAgentID()
	return sauo
}

// SetSubscribeID sets the "subscribe_id" field.
func (sauo *SubscribeAlterUpdateOne) SetSubscribeID(u uint64) *SubscribeAlterUpdateOne {
	sauo.mutation.SetSubscribeID(u)
	return sauo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableSubscribeID(u *uint64) *SubscribeAlterUpdateOne {
	if u != nil {
		sauo.SetSubscribeID(*u)
	}
	return sauo
}

// SetDays sets the "days" field.
func (sauo *SubscribeAlterUpdateOne) SetDays(i int) *SubscribeAlterUpdateOne {
	sauo.mutation.ResetDays()
	sauo.mutation.SetDays(i)
	return sauo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableDays(i *int) *SubscribeAlterUpdateOne {
	if i != nil {
		sauo.SetDays(*i)
	}
	return sauo
}

// AddDays adds i to the "days" field.
func (sauo *SubscribeAlterUpdateOne) AddDays(i int) *SubscribeAlterUpdateOne {
	sauo.mutation.AddDays(i)
	return sauo
}

// SetStatus sets the "status" field.
func (sauo *SubscribeAlterUpdateOne) SetStatus(i int) *SubscribeAlterUpdateOne {
	sauo.mutation.ResetStatus()
	sauo.mutation.SetStatus(i)
	return sauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableStatus(i *int) *SubscribeAlterUpdateOne {
	if i != nil {
		sauo.SetStatus(*i)
	}
	return sauo
}

// AddStatus adds i to the "status" field.
func (sauo *SubscribeAlterUpdateOne) AddStatus(i int) *SubscribeAlterUpdateOne {
	sauo.mutation.AddStatus(i)
	return sauo
}

// SetReviewTime sets the "review_time" field.
func (sauo *SubscribeAlterUpdateOne) SetReviewTime(t time.Time) *SubscribeAlterUpdateOne {
	sauo.mutation.SetReviewTime(t)
	return sauo
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableReviewTime(t *time.Time) *SubscribeAlterUpdateOne {
	if t != nil {
		sauo.SetReviewTime(*t)
	}
	return sauo
}

// ClearReviewTime clears the value of the "review_time" field.
func (sauo *SubscribeAlterUpdateOne) ClearReviewTime() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearReviewTime()
	return sauo
}

// SetSubscribeEndAt sets the "subscribe_end_at" field.
func (sauo *SubscribeAlterUpdateOne) SetSubscribeEndAt(t time.Time) *SubscribeAlterUpdateOne {
	sauo.mutation.SetSubscribeEndAt(t)
	return sauo
}

// SetNillableSubscribeEndAt sets the "subscribe_end_at" field if the given value is not nil.
func (sauo *SubscribeAlterUpdateOne) SetNillableSubscribeEndAt(t *time.Time) *SubscribeAlterUpdateOne {
	if t != nil {
		sauo.SetSubscribeEndAt(*t)
	}
	return sauo
}

// ClearSubscribeEndAt clears the value of the "subscribe_end_at" field.
func (sauo *SubscribeAlterUpdateOne) ClearSubscribeEndAt() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearSubscribeEndAt()
	return sauo
}

// SetRider sets the "rider" edge to the Rider entity.
func (sauo *SubscribeAlterUpdateOne) SetRider(r *Rider) *SubscribeAlterUpdateOne {
	return sauo.SetRiderID(r.ID)
}

// SetManager sets the "manager" edge to the Manager entity.
func (sauo *SubscribeAlterUpdateOne) SetManager(m *Manager) *SubscribeAlterUpdateOne {
	return sauo.SetManagerID(m.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (sauo *SubscribeAlterUpdateOne) SetEnterprise(e *Enterprise) *SubscribeAlterUpdateOne {
	return sauo.SetEnterpriseID(e.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (sauo *SubscribeAlterUpdateOne) SetAgent(a *Agent) *SubscribeAlterUpdateOne {
	return sauo.SetAgentID(a.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sauo *SubscribeAlterUpdateOne) SetSubscribe(s *Subscribe) *SubscribeAlterUpdateOne {
	return sauo.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeAlterMutation object of the builder.
func (sauo *SubscribeAlterUpdateOne) Mutation() *SubscribeAlterMutation {
	return sauo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (sauo *SubscribeAlterUpdateOne) ClearRider() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearRider()
	return sauo
}

// ClearManager clears the "manager" edge to the Manager entity.
func (sauo *SubscribeAlterUpdateOne) ClearManager() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearManager()
	return sauo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (sauo *SubscribeAlterUpdateOne) ClearEnterprise() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearEnterprise()
	return sauo
}

// ClearAgent clears the "agent" edge to the Agent entity.
func (sauo *SubscribeAlterUpdateOne) ClearAgent() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearAgent()
	return sauo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sauo *SubscribeAlterUpdateOne) ClearSubscribe() *SubscribeAlterUpdateOne {
	sauo.mutation.ClearSubscribe()
	return sauo
}

// Where appends a list predicates to the SubscribeAlterUpdate builder.
func (sauo *SubscribeAlterUpdateOne) Where(ps ...predicate.SubscribeAlter) *SubscribeAlterUpdateOne {
	sauo.mutation.Where(ps...)
	return sauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sauo *SubscribeAlterUpdateOne) Select(field string, fields ...string) *SubscribeAlterUpdateOne {
	sauo.fields = append([]string{field}, fields...)
	return sauo
}

// Save executes the query and returns the updated SubscribeAlter entity.
func (sauo *SubscribeAlterUpdateOne) Save(ctx context.Context) (*SubscribeAlter, error) {
	if err := sauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sauo.sqlSave, sauo.mutation, sauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sauo *SubscribeAlterUpdateOne) SaveX(ctx context.Context) *SubscribeAlter {
	node, err := sauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sauo *SubscribeAlterUpdateOne) Exec(ctx context.Context) error {
	_, err := sauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sauo *SubscribeAlterUpdateOne) ExecX(ctx context.Context) {
	if err := sauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sauo *SubscribeAlterUpdateOne) defaults() error {
	if _, ok := sauo.mutation.UpdatedAt(); !ok {
		if subscribealter.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribealter.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribealter.UpdateDefaultUpdatedAt()
		sauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sauo *SubscribeAlterUpdateOne) check() error {
	if _, ok := sauo.mutation.RiderID(); sauo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeAlter.rider"`)
	}
	if _, ok := sauo.mutation.SubscribeID(); sauo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeAlter.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sauo *SubscribeAlterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeAlterUpdateOne {
	sauo.modifiers = append(sauo.modifiers, modifiers...)
	return sauo
}

func (sauo *SubscribeAlterUpdateOne) sqlSave(ctx context.Context) (_node *SubscribeAlter, err error) {
	if err := sauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribealter.Table, subscribealter.Columns, sqlgraph.NewFieldSpec(subscribealter.FieldID, field.TypeUint64))
	id, ok := sauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscribeAlter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribealter.FieldID)
		for _, f := range fields {
			if !subscribealter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribealter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sauo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribealter.FieldUpdatedAt, field.TypeTime, value)
	}
	if sauo.mutation.CreatorCleared() {
		_spec.ClearField(subscribealter.FieldCreator, field.TypeJSON)
	}
	if value, ok := sauo.mutation.LastModifier(); ok {
		_spec.SetField(subscribealter.FieldLastModifier, field.TypeJSON, value)
	}
	if sauo.mutation.LastModifierCleared() {
		_spec.ClearField(subscribealter.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := sauo.mutation.Remark(); ok {
		_spec.SetField(subscribealter.FieldRemark, field.TypeString, value)
	}
	if sauo.mutation.RemarkCleared() {
		_spec.ClearField(subscribealter.FieldRemark, field.TypeString)
	}
	if value, ok := sauo.mutation.Days(); ok {
		_spec.SetField(subscribealter.FieldDays, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedDays(); ok {
		_spec.AddField(subscribealter.FieldDays, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.Status(); ok {
		_spec.SetField(subscribealter.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.AddedStatus(); ok {
		_spec.AddField(subscribealter.FieldStatus, field.TypeInt, value)
	}
	if value, ok := sauo.mutation.ReviewTime(); ok {
		_spec.SetField(subscribealter.FieldReviewTime, field.TypeTime, value)
	}
	if sauo.mutation.ReviewTimeCleared() {
		_spec.ClearField(subscribealter.FieldReviewTime, field.TypeTime)
	}
	if value, ok := sauo.mutation.SubscribeEndAt(); ok {
		_spec.SetField(subscribealter.FieldSubscribeEndAt, field.TypeTime, value)
	}
	if sauo.mutation.SubscribeEndAtCleared() {
		_spec.ClearField(subscribealter.FieldSubscribeEndAt, field.TypeTime)
	}
	if sauo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.RiderTable,
			Columns: []string{subscribealter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.ManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.ManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.ManagerTable,
			Columns: []string{subscribealter.ManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.EnterpriseTable,
			Columns: []string{subscribealter.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.AgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribealter.AgentTable,
			Columns: []string{subscribealter.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sauo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sauo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribealter.SubscribeTable,
			Columns: []string{subscribealter.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sauo.modifiers...)
	_node = &SubscribeAlter{config: sauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribealter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sauo.mutation.done = true
	return _node, nil
}
