// Code generated by entc, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayway holds the string denoting the payway field in the database.
	FieldPayway = "payway"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldTradeNo holds the string denoting the trade_no field in the database.
	FieldTradeNo = "trade_no"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldPlanDetail holds the string denoting the plan_detail field in the database.
	FieldPlanDetail = "plan_detail"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldRefundAt holds the string denoting the refund_at field in the database.
	FieldRefundAt = "refund_at"
	// FieldPausedAt holds the string denoting the paused_at field in the database.
	FieldPausedAt = "paused_at"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeCommission holds the string denoting the commission edge name in mutations.
	EdgeCommission = "commission"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgePauses holds the string denoting the pauses edge name in mutations.
	EdgePauses = "pauses"
	// EdgeArrearages holds the string denoting the arrearages edge name in mutations.
	EdgeArrearages = "arrearages"
	// EdgeAlters holds the string denoting the alters edge name in mutations.
	EdgeAlters = "alters"
	// EdgeRefunds holds the string denoting the refunds edge name in mutations.
	EdgeRefunds = "refunds"
	// Table holds the table name of the order in the database.
	Table = "order"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "order"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "order"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plan"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
	// CommissionTable is the table that holds the commission relation/edge.
	CommissionTable = "commission"
	// CommissionInverseTable is the table name for the Commission entity.
	// It exists in this package in order to avoid circular dependency with the "commission" package.
	CommissionInverseTable = "commission"
	// CommissionColumn is the table column denoting the commission relation/edge.
	CommissionColumn = "order_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "order"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "order"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "order"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// PausesTable is the table that holds the pauses relation/edge.
	PausesTable = "order_pause"
	// PausesInverseTable is the table name for the OrderPause entity.
	// It exists in this package in order to avoid circular dependency with the "orderpause" package.
	PausesInverseTable = "order_pause"
	// PausesColumn is the table column denoting the pauses relation/edge.
	PausesColumn = "order_id"
	// ArrearagesTable is the table that holds the arrearages relation/edge.
	ArrearagesTable = "order_arrearage"
	// ArrearagesInverseTable is the table name for the OrderArrearage entity.
	// It exists in this package in order to avoid circular dependency with the "orderarrearage" package.
	ArrearagesInverseTable = "order_arrearage"
	// ArrearagesColumn is the table column denoting the arrearages relation/edge.
	ArrearagesColumn = "order_id"
	// AltersTable is the table that holds the alters relation/edge.
	AltersTable = "order_alter"
	// AltersInverseTable is the table name for the OrderAlter entity.
	// It exists in this package in order to avoid circular dependency with the "orderalter" package.
	AltersInverseTable = "order_alter"
	// AltersColumn is the table column denoting the alters relation/edge.
	AltersColumn = "order_id"
	// RefundsTable is the table that holds the refunds relation/edge.
	RefundsTable = "order_refund"
	// RefundsInverseTable is the table name for the OrderRefund entity.
	// It exists in this package in order to avoid circular dependency with the "orderrefund" package.
	RefundsInverseTable = "order_refund"
	// RefundsColumn is the table column denoting the refunds relation/edge.
	RefundsColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldRiderID,
	FieldPlanID,
	FieldCityID,
	FieldStatus,
	FieldPayway,
	FieldType,
	FieldOutTradeNo,
	FieldTradeNo,
	FieldAmount,
	FieldTotal,
	FieldPlanDetail,
	FieldParentID,
	FieldStartAt,
	FieldEndAt,
	FieldRefundAt,
	FieldPausedAt,
	FieldDays,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
//
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal float64
)
