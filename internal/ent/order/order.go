// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPayway holds the string denoting the payway field in the database.
	FieldPayway = "payway"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldOutTradeNo holds the string denoting the out_trade_no field in the database.
	FieldOutTradeNo = "out_trade_no"
	// FieldTradeNo holds the string denoting the trade_no field in the database.
	FieldTradeNo = "trade_no"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldRefundAt holds the string denoting the refund_at field in the database.
	FieldRefundAt = "refund_at"
	// FieldInitialDays holds the string denoting the initial_days field in the database.
	FieldInitialDays = "initial_days"
	// FieldPastDays holds the string denoting the past_days field in the database.
	FieldPastDays = "past_days"
	// FieldPoints holds the string denoting the points field in the database.
	FieldPoints = "points"
	// FieldPointRatio holds the string denoting the point_ratio field in the database.
	FieldPointRatio = "point_ratio"
	// FieldCouponAmount holds the string denoting the coupon_amount field in the database.
	FieldCouponAmount = "coupon_amount"
	// FieldDiscountNewly holds the string denoting the discount_newly field in the database.
	FieldDiscountNewly = "discount_newly"
	// FieldTradePayAt holds the string denoting the trade_pay_at field in the database.
	FieldTradePayAt = "trade_pay_at"
	// FieldAuthNo holds the string denoting the auth_no field in the database.
	FieldAuthNo = "auth_no"
	// FieldOutOrderNo holds the string denoting the out_order_no field in the database.
	FieldOutOrderNo = "out_order_no"
	// FieldOutRequestNo holds the string denoting the out_request_no field in the database.
	FieldOutRequestNo = "out_request_no"
	// FieldSubscribeEndAt holds the string denoting the subscribe_end_at field in the database.
	FieldSubscribeEndAt = "subscribe_end_at"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeCommission holds the string denoting the commission edge name in mutations.
	EdgeCommission = "commission"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeRefund holds the string denoting the refund edge name in mutations.
	EdgeRefund = "refund"
	// EdgeAssistance holds the string denoting the assistance edge name in mutations.
	EdgeAssistance = "assistance"
	// EdgeCoupons holds the string denoting the coupons edge name in mutations.
	EdgeCoupons = "coupons"
	// Table holds the table name of the order in the database.
	Table = "order"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "order"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plan"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "order"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "order"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "order"
	// EbikeInverseTable is the table name for the Ebike entity.
	// It exists in this package in order to avoid circular dependency with the "ebike" package.
	EbikeInverseTable = "ebike"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "order"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agent"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "order"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "order"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// CommissionTable is the table that holds the commission relation/edge.
	CommissionTable = "commission"
	// CommissionInverseTable is the table name for the Commission entity.
	// It exists in this package in order to avoid circular dependency with the "commission" package.
	CommissionInverseTable = "commission"
	// CommissionColumn is the table column denoting the commission relation/edge.
	CommissionColumn = "order_id"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "order"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "order"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_id"
	// RefundTable is the table that holds the refund relation/edge.
	RefundTable = "order_refund"
	// RefundInverseTable is the table name for the OrderRefund entity.
	// It exists in this package in order to avoid circular dependency with the "orderrefund" package.
	RefundInverseTable = "order_refund"
	// RefundColumn is the table column denoting the refund relation/edge.
	RefundColumn = "order_id"
	// AssistanceTable is the table that holds the assistance relation/edge.
	AssistanceTable = "assistance"
	// AssistanceInverseTable is the table name for the Assistance entity.
	// It exists in this package in order to avoid circular dependency with the "assistance" package.
	AssistanceInverseTable = "assistance"
	// AssistanceColumn is the table column denoting the assistance relation/edge.
	AssistanceColumn = "order_id"
	// CouponsTable is the table that holds the coupons relation/edge.
	CouponsTable = "coupon"
	// CouponsInverseTable is the table name for the Coupon entity.
	// It exists in this package in order to avoid circular dependency with the "coupon" package.
	CouponsInverseTable = "coupon"
	// CouponsColumn is the table column denoting the coupons relation/edge.
	CouponsColumn = "order_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldPlanID,
	FieldCityID,
	FieldBrandID,
	FieldEbikeID,
	FieldAgentID,
	FieldRiderID,
	FieldParentID,
	FieldSubscribeID,
	FieldStatus,
	FieldPayway,
	FieldType,
	FieldOutTradeNo,
	FieldTradeNo,
	FieldAmount,
	FieldTotal,
	FieldRefundAt,
	FieldInitialDays,
	FieldPastDays,
	FieldPoints,
	FieldPointRatio,
	FieldCouponAmount,
	FieldDiscountNewly,
	FieldTradePayAt,
	FieldAuthNo,
	FieldOutOrderNo,
	FieldOutRequestNo,
	FieldSubscribeEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultTotal holds the default value on creation for the "total" field.
	DefaultTotal float64
	// DefaultPoints holds the default value on creation for the "points" field.
	DefaultPoints int64
	// DefaultPointRatio holds the default value on creation for the "point_ratio" field.
	DefaultPointRatio float64
	// DefaultCouponAmount holds the default value on creation for the "coupon_amount" field.
	DefaultCouponAmount float64
	// DefaultDiscountNewly holds the default value on creation for the "discount_newly" field.
	DefaultDiscountNewly float64
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByEbikeID orders the results by the ebike_id field.
func ByEbikeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPayway orders the results by the payway field.
func ByPayway(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayway, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByOutTradeNo orders the results by the out_trade_no field.
func ByOutTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutTradeNo, opts...).ToFunc()
}

// ByTradeNo orders the results by the trade_no field.
func ByTradeNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradeNo, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// ByRefundAt orders the results by the refund_at field.
func ByRefundAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefundAt, opts...).ToFunc()
}

// ByInitialDays orders the results by the initial_days field.
func ByInitialDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInitialDays, opts...).ToFunc()
}

// ByPastDays orders the results by the past_days field.
func ByPastDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPastDays, opts...).ToFunc()
}

// ByPoints orders the results by the points field.
func ByPoints(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoints, opts...).ToFunc()
}

// ByPointRatio orders the results by the point_ratio field.
func ByPointRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointRatio, opts...).ToFunc()
}

// ByCouponAmount orders the results by the coupon_amount field.
func ByCouponAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCouponAmount, opts...).ToFunc()
}

// ByDiscountNewly orders the results by the discount_newly field.
func ByDiscountNewly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountNewly, opts...).ToFunc()
}

// ByTradePayAt orders the results by the trade_pay_at field.
func ByTradePayAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTradePayAt, opts...).ToFunc()
}

// ByAuthNo orders the results by the auth_no field.
func ByAuthNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthNo, opts...).ToFunc()
}

// ByOutOrderNo orders the results by the out_order_no field.
func ByOutOrderNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutOrderNo, opts...).ToFunc()
}

// ByOutRequestNo orders the results by the out_request_no field.
func ByOutRequestNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutRequestNo, opts...).ToFunc()
}

// BySubscribeEndAt orders the results by the subscribe_end_at field.
func BySubscribeEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeEndAt, opts...).ToFunc()
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByEbikeField orders the results by ebike field.
func ByEbikeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEbikeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommissionField orders the results by commission field.
func ByCommissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRefundField orders the results by refund field.
func ByRefundField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefundStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssistanceField orders the results by assistance field.
func ByAssistanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistanceStep(), sql.OrderByField(field, opts...))
	}
}

// ByCouponsCount orders the results by coupons count.
func ByCouponsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCouponsStep(), opts...)
	}
}

// ByCoupons orders the results by coupons terms.
func ByCoupons(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCouponsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlanTable, PlanColumn),
	)
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
	)
}
func newEbikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EbikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
	)
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RiderTable, RiderColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscribeTable, SubscribeColumn),
	)
}
func newCommissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, CommissionTable, CommissionColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newRefundStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RefundInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RefundTable, RefundColumn),
	)
}
func newAssistanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AssistanceTable, AssistanceColumn),
	)
}
func newCouponsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CouponsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CouponsTable, CouponsColumn),
	)
}
