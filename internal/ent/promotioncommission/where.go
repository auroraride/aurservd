// Code generated by ent, DO NOT EDIT.

package promotioncommission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldRemark, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldMemberID, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldName, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldEnable, v))
}

// AmountSum applies equality check predicate on the "amount_sum" field. It's identical to AmountSumEQ.
func AmountSum(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldAmountSum, v))
}

// FirstNewNum applies equality check predicate on the "first_new_num" field. It's identical to FirstNewNumEQ.
func FirstNewNum(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstNewNum, v))
}

// SecondNewNum applies equality check predicate on the "second_new_num" field. It's identical to SecondNewNumEQ.
func SecondNewNum(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondNewNum, v))
}

// FirstRenewNum applies equality check predicate on the "first_renew_num" field. It's identical to FirstRenewNumEQ.
func FirstRenewNum(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstRenewNum, v))
}

// SecondRenewNum applies equality check predicate on the "second_renew_num" field. It's identical to SecondRenewNumEQ.
func SecondRenewNum(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondRenewNum, v))
}

// FirstNewAmountSum applies equality check predicate on the "first_new_amount_sum" field. It's identical to FirstNewAmountSumEQ.
func FirstNewAmountSum(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstNewAmountSum, v))
}

// SecondNewAmountSum applies equality check predicate on the "second_new_amount_sum" field. It's identical to SecondNewAmountSumEQ.
func SecondNewAmountSum(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondNewAmountSum, v))
}

// FirstRenewAmountSum applies equality check predicate on the "first_renew_amount_sum" field. It's identical to FirstRenewAmountSumEQ.
func FirstRenewAmountSum(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstRenewAmountSum, v))
}

// SecondRenewAmountSum applies equality check predicate on the "second_renew_amount_sum" field. It's identical to SecondRenewAmountSumEQ.
func SecondRenewAmountSum(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondRenewAmountSum, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldDesc, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContainsFold(FieldRemark, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDIsNil applies the IsNil predicate on the "member_id" field.
func MemberIDIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldMemberID))
}

// MemberIDNotNil applies the NotNil predicate on the "member_id" field.
func MemberIDNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldMemberID))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContainsFold(FieldName, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldEnable, v))
}

// AmountSumEQ applies the EQ predicate on the "amount_sum" field.
func AmountSumEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldAmountSum, v))
}

// AmountSumNEQ applies the NEQ predicate on the "amount_sum" field.
func AmountSumNEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldAmountSum, v))
}

// AmountSumIn applies the In predicate on the "amount_sum" field.
func AmountSumIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldAmountSum, vs...))
}

// AmountSumNotIn applies the NotIn predicate on the "amount_sum" field.
func AmountSumNotIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldAmountSum, vs...))
}

// AmountSumGT applies the GT predicate on the "amount_sum" field.
func AmountSumGT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldAmountSum, v))
}

// AmountSumGTE applies the GTE predicate on the "amount_sum" field.
func AmountSumGTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldAmountSum, v))
}

// AmountSumLT applies the LT predicate on the "amount_sum" field.
func AmountSumLT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldAmountSum, v))
}

// AmountSumLTE applies the LTE predicate on the "amount_sum" field.
func AmountSumLTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldAmountSum, v))
}

// FirstNewNumEQ applies the EQ predicate on the "first_new_num" field.
func FirstNewNumEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstNewNum, v))
}

// FirstNewNumNEQ applies the NEQ predicate on the "first_new_num" field.
func FirstNewNumNEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldFirstNewNum, v))
}

// FirstNewNumIn applies the In predicate on the "first_new_num" field.
func FirstNewNumIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldFirstNewNum, vs...))
}

// FirstNewNumNotIn applies the NotIn predicate on the "first_new_num" field.
func FirstNewNumNotIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldFirstNewNum, vs...))
}

// FirstNewNumGT applies the GT predicate on the "first_new_num" field.
func FirstNewNumGT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldFirstNewNum, v))
}

// FirstNewNumGTE applies the GTE predicate on the "first_new_num" field.
func FirstNewNumGTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldFirstNewNum, v))
}

// FirstNewNumLT applies the LT predicate on the "first_new_num" field.
func FirstNewNumLT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldFirstNewNum, v))
}

// FirstNewNumLTE applies the LTE predicate on the "first_new_num" field.
func FirstNewNumLTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldFirstNewNum, v))
}

// SecondNewNumEQ applies the EQ predicate on the "second_new_num" field.
func SecondNewNumEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondNewNum, v))
}

// SecondNewNumNEQ applies the NEQ predicate on the "second_new_num" field.
func SecondNewNumNEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldSecondNewNum, v))
}

// SecondNewNumIn applies the In predicate on the "second_new_num" field.
func SecondNewNumIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldSecondNewNum, vs...))
}

// SecondNewNumNotIn applies the NotIn predicate on the "second_new_num" field.
func SecondNewNumNotIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldSecondNewNum, vs...))
}

// SecondNewNumGT applies the GT predicate on the "second_new_num" field.
func SecondNewNumGT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldSecondNewNum, v))
}

// SecondNewNumGTE applies the GTE predicate on the "second_new_num" field.
func SecondNewNumGTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldSecondNewNum, v))
}

// SecondNewNumLT applies the LT predicate on the "second_new_num" field.
func SecondNewNumLT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldSecondNewNum, v))
}

// SecondNewNumLTE applies the LTE predicate on the "second_new_num" field.
func SecondNewNumLTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldSecondNewNum, v))
}

// FirstRenewNumEQ applies the EQ predicate on the "first_renew_num" field.
func FirstRenewNumEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstRenewNum, v))
}

// FirstRenewNumNEQ applies the NEQ predicate on the "first_renew_num" field.
func FirstRenewNumNEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldFirstRenewNum, v))
}

// FirstRenewNumIn applies the In predicate on the "first_renew_num" field.
func FirstRenewNumIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldFirstRenewNum, vs...))
}

// FirstRenewNumNotIn applies the NotIn predicate on the "first_renew_num" field.
func FirstRenewNumNotIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldFirstRenewNum, vs...))
}

// FirstRenewNumGT applies the GT predicate on the "first_renew_num" field.
func FirstRenewNumGT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldFirstRenewNum, v))
}

// FirstRenewNumGTE applies the GTE predicate on the "first_renew_num" field.
func FirstRenewNumGTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldFirstRenewNum, v))
}

// FirstRenewNumLT applies the LT predicate on the "first_renew_num" field.
func FirstRenewNumLT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldFirstRenewNum, v))
}

// FirstRenewNumLTE applies the LTE predicate on the "first_renew_num" field.
func FirstRenewNumLTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldFirstRenewNum, v))
}

// SecondRenewNumEQ applies the EQ predicate on the "second_renew_num" field.
func SecondRenewNumEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondRenewNum, v))
}

// SecondRenewNumNEQ applies the NEQ predicate on the "second_renew_num" field.
func SecondRenewNumNEQ(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldSecondRenewNum, v))
}

// SecondRenewNumIn applies the In predicate on the "second_renew_num" field.
func SecondRenewNumIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldSecondRenewNum, vs...))
}

// SecondRenewNumNotIn applies the NotIn predicate on the "second_renew_num" field.
func SecondRenewNumNotIn(vs ...uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldSecondRenewNum, vs...))
}

// SecondRenewNumGT applies the GT predicate on the "second_renew_num" field.
func SecondRenewNumGT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldSecondRenewNum, v))
}

// SecondRenewNumGTE applies the GTE predicate on the "second_renew_num" field.
func SecondRenewNumGTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldSecondRenewNum, v))
}

// SecondRenewNumLT applies the LT predicate on the "second_renew_num" field.
func SecondRenewNumLT(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldSecondRenewNum, v))
}

// SecondRenewNumLTE applies the LTE predicate on the "second_renew_num" field.
func SecondRenewNumLTE(v uint64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldSecondRenewNum, v))
}

// FirstNewAmountSumEQ applies the EQ predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstNewAmountSum, v))
}

// FirstNewAmountSumNEQ applies the NEQ predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumNEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldFirstNewAmountSum, v))
}

// FirstNewAmountSumIn applies the In predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldFirstNewAmountSum, vs...))
}

// FirstNewAmountSumNotIn applies the NotIn predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumNotIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldFirstNewAmountSum, vs...))
}

// FirstNewAmountSumGT applies the GT predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumGT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldFirstNewAmountSum, v))
}

// FirstNewAmountSumGTE applies the GTE predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumGTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldFirstNewAmountSum, v))
}

// FirstNewAmountSumLT applies the LT predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumLT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldFirstNewAmountSum, v))
}

// FirstNewAmountSumLTE applies the LTE predicate on the "first_new_amount_sum" field.
func FirstNewAmountSumLTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldFirstNewAmountSum, v))
}

// SecondNewAmountSumEQ applies the EQ predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondNewAmountSum, v))
}

// SecondNewAmountSumNEQ applies the NEQ predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumNEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldSecondNewAmountSum, v))
}

// SecondNewAmountSumIn applies the In predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldSecondNewAmountSum, vs...))
}

// SecondNewAmountSumNotIn applies the NotIn predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumNotIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldSecondNewAmountSum, vs...))
}

// SecondNewAmountSumGT applies the GT predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumGT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldSecondNewAmountSum, v))
}

// SecondNewAmountSumGTE applies the GTE predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumGTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldSecondNewAmountSum, v))
}

// SecondNewAmountSumLT applies the LT predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumLT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldSecondNewAmountSum, v))
}

// SecondNewAmountSumLTE applies the LTE predicate on the "second_new_amount_sum" field.
func SecondNewAmountSumLTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldSecondNewAmountSum, v))
}

// FirstRenewAmountSumEQ applies the EQ predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldFirstRenewAmountSum, v))
}

// FirstRenewAmountSumNEQ applies the NEQ predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumNEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldFirstRenewAmountSum, v))
}

// FirstRenewAmountSumIn applies the In predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldFirstRenewAmountSum, vs...))
}

// FirstRenewAmountSumNotIn applies the NotIn predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumNotIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldFirstRenewAmountSum, vs...))
}

// FirstRenewAmountSumGT applies the GT predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumGT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldFirstRenewAmountSum, v))
}

// FirstRenewAmountSumGTE applies the GTE predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumGTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldFirstRenewAmountSum, v))
}

// FirstRenewAmountSumLT applies the LT predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumLT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldFirstRenewAmountSum, v))
}

// FirstRenewAmountSumLTE applies the LTE predicate on the "first_renew_amount_sum" field.
func FirstRenewAmountSumLTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldFirstRenewAmountSum, v))
}

// SecondRenewAmountSumEQ applies the EQ predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldSecondRenewAmountSum, v))
}

// SecondRenewAmountSumNEQ applies the NEQ predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumNEQ(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldSecondRenewAmountSum, v))
}

// SecondRenewAmountSumIn applies the In predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldSecondRenewAmountSum, vs...))
}

// SecondRenewAmountSumNotIn applies the NotIn predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumNotIn(vs ...float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldSecondRenewAmountSum, vs...))
}

// SecondRenewAmountSumGT applies the GT predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumGT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldSecondRenewAmountSum, v))
}

// SecondRenewAmountSumGTE applies the GTE predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumGTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldSecondRenewAmountSum, v))
}

// SecondRenewAmountSumLT applies the LT predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumLT(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldSecondRenewAmountSum, v))
}

// SecondRenewAmountSumLTE applies the LTE predicate on the "second_renew_amount_sum" field.
func SecondRenewAmountSumLTE(v float64) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldSecondRenewAmountSum, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldHasSuffix(FieldDesc, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldDesc))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldContainsFold(FieldDesc, v))
}

// HistoryIDIsNil applies the IsNil predicate on the "history_id" field.
func HistoryIDIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldHistoryID))
}

// HistoryIDNotNil applies the NotNil predicate on the "history_id" field.
func HistoryIDNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldHistoryID))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.FieldNotNull(FieldEndAt))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.PromotionCommission {
	return predicate.PromotionCommission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.PromotionMember) predicate.PromotionCommission {
	return predicate.PromotionCommission(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlans applies the HasEdge predicate on the "plans" edge.
func HasPlans() predicate.PromotionCommission {
	return predicate.PromotionCommission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlansTable, PlansColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlansWith applies the HasEdge predicate on the "plans" edge with a given conditions (other predicates).
func HasPlansWith(preds ...predicate.PromotionCommissionPlan) predicate.PromotionCommission {
	return predicate.PromotionCommission(func(s *sql.Selector) {
		step := newPlansStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PromotionCommission) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PromotionCommission) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PromotionCommission) predicate.PromotionCommission {
	return predicate.PromotionCommission(sql.NotPredicates(p))
}
