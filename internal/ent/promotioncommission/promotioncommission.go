// Code generated by ent, DO NOT EDIT.

package promotioncommission

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotioncommission type in the database.
	Label = "promotion_commission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRule holds the string denoting the rule field in the database.
	FieldRule = "rule"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldAmountSum holds the string denoting the amount_sum field in the database.
	FieldAmountSum = "amount_sum"
	// FieldFirstNewNum holds the string denoting the first_new_num field in the database.
	FieldFirstNewNum = "first_new_num"
	// FieldSecondNewNum holds the string denoting the second_new_num field in the database.
	FieldSecondNewNum = "second_new_num"
	// FieldFirstRenewNum holds the string denoting the first_renew_num field in the database.
	FieldFirstRenewNum = "first_renew_num"
	// FieldSecondRenewNum holds the string denoting the second_renew_num field in the database.
	FieldSecondRenewNum = "second_renew_num"
	// FieldFirstNewAmountSum holds the string denoting the first_new_amount_sum field in the database.
	FieldFirstNewAmountSum = "first_new_amount_sum"
	// FieldSecondNewAmountSum holds the string denoting the second_new_amount_sum field in the database.
	FieldSecondNewAmountSum = "second_new_amount_sum"
	// FieldFirstRenewAmountSum holds the string denoting the first_renew_amount_sum field in the database.
	FieldFirstRenewAmountSum = "first_renew_amount_sum"
	// FieldSecondRenewAmountSum holds the string denoting the second_renew_amount_sum field in the database.
	FieldSecondRenewAmountSum = "second_renew_amount_sum"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldHistoryID holds the string denoting the history_id field in the database.
	FieldHistoryID = "history_id"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgePlans holds the string denoting the plans edge name in mutations.
	EdgePlans = "plans"
	// Table holds the table name of the promotioncommission in the database.
	Table = "promotion_commission"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_commission"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// PlansTable is the table that holds the plans relation/edge.
	PlansTable = "promotion_commission_plan"
	// PlansInverseTable is the table name for the PromotionCommissionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "promotioncommissionplan" package.
	PlansInverseTable = "promotion_commission_plan"
	// PlansColumn is the table column denoting the plans relation/edge.
	PlansColumn = "commission_id"
)

// Columns holds all SQL columns for promotioncommission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldMemberID,
	FieldType,
	FieldName,
	FieldRule,
	FieldEnable,
	FieldAmountSum,
	FieldFirstNewNum,
	FieldSecondNewNum,
	FieldFirstRenewNum,
	FieldSecondRenewNum,
	FieldFirstNewAmountSum,
	FieldSecondNewAmountSum,
	FieldFirstRenewAmountSum,
	FieldSecondRenewAmountSum,
	FieldDesc,
	FieldHistoryID,
	FieldStartAt,
	FieldEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultAmountSum holds the default value on creation for the "amount_sum" field.
	DefaultAmountSum float64
	// DefaultFirstNewNum holds the default value on creation for the "first_new_num" field.
	DefaultFirstNewNum uint64
	// DefaultSecondNewNum holds the default value on creation for the "second_new_num" field.
	DefaultSecondNewNum uint64
	// DefaultFirstRenewNum holds the default value on creation for the "first_renew_num" field.
	DefaultFirstRenewNum uint64
	// DefaultSecondRenewNum holds the default value on creation for the "second_renew_num" field.
	DefaultSecondRenewNum uint64
	// DefaultFirstNewAmountSum holds the default value on creation for the "first_new_amount_sum" field.
	DefaultFirstNewAmountSum float64
	// DefaultSecondNewAmountSum holds the default value on creation for the "second_new_amount_sum" field.
	DefaultSecondNewAmountSum float64
	// DefaultFirstRenewAmountSum holds the default value on creation for the "first_renew_amount_sum" field.
	DefaultFirstRenewAmountSum float64
	// DefaultSecondRenewAmountSum holds the default value on creation for the "second_renew_amount_sum" field.
	DefaultSecondRenewAmountSum float64
)

// OrderOption defines the ordering options for the PromotionCommission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByAmountSum orders the results by the amount_sum field.
func ByAmountSum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountSum, opts...).ToFunc()
}

// ByFirstNewNum orders the results by the first_new_num field.
func ByFirstNewNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstNewNum, opts...).ToFunc()
}

// BySecondNewNum orders the results by the second_new_num field.
func BySecondNewNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondNewNum, opts...).ToFunc()
}

// ByFirstRenewNum orders the results by the first_renew_num field.
func ByFirstRenewNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstRenewNum, opts...).ToFunc()
}

// BySecondRenewNum orders the results by the second_renew_num field.
func BySecondRenewNum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondRenewNum, opts...).ToFunc()
}

// ByFirstNewAmountSum orders the results by the first_new_amount_sum field.
func ByFirstNewAmountSum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstNewAmountSum, opts...).ToFunc()
}

// BySecondNewAmountSum orders the results by the second_new_amount_sum field.
func BySecondNewAmountSum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondNewAmountSum, opts...).ToFunc()
}

// ByFirstRenewAmountSum orders the results by the first_renew_amount_sum field.
func ByFirstRenewAmountSum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstRenewAmountSum, opts...).ToFunc()
}

// BySecondRenewAmountSum orders the results by the second_renew_amount_sum field.
func BySecondRenewAmountSum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecondRenewAmountSum, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlansCount orders the results by plans count.
func ByPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlansStep(), opts...)
	}
}

// ByPlans orders the results by plans terms.
func ByPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}
func newPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlansTable, PlansColumn),
	)
}
