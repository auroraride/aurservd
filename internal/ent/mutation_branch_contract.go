// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/branchcontract"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// BranchContractMutation represents an operation that mutates the BranchContract nodes in the graph.
type BranchContractMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uint64
	created_at            *time.Time
	updated_at            *time.Time
	deleted_at            *time.Time
	creator               **model.Modifier
	last_modifier         **model.Modifier
	remark                *string
	landlord_name         *string
	id_card_number        *string
	phone                 *string
	bank_number           *string
	pledge                *float64
	addpledge             *float64
	rent                  *float64
	addrent               *float64
	lease                 *uint
	addlease              *int
	electricity_pledge    *float64
	addelectricity_pledge *float64
	electricity           *float64
	addelectricity        *float64
	area                  *float64
	addarea               *float64
	start_time            *time.Time
	end_time              *time.Time
	file                  *string
	sheets                *[]string
	clearedFields         map[string]struct{}
	branch                *uint64
	clearedbranch         bool
	done                  bool
	oldValue              func(context.Context) (*BranchContract, error)
	predicates            []predicate.BranchContract
}

var _ ent.Mutation = (*BranchContractMutation)(nil)

// branchcontractOption allows management of the mutation configuration using functional options.
type branchcontractOption func(*BranchContractMutation)

// newBranchContractMutation creates new mutation for the BranchContract entity.
func newBranchContractMutation(c config, op Op, opts ...branchcontractOption) *BranchContractMutation {
	m := &BranchContractMutation{
		config:        c,
		op:            op,
		typ:           TypeBranchContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBranchContractID sets the ID field of the mutation.
func withBranchContractID(id uint64) branchcontractOption {
	return func(m *BranchContractMutation) {
		var (
			err   error
			once  sync.Once
			value *BranchContract
		)
		m.oldValue = func(ctx context.Context) (*BranchContract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BranchContract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBranchContract sets the old BranchContract of the mutation.
func withBranchContract(node *BranchContract) branchcontractOption {
	return func(m *BranchContractMutation) {
		m.oldValue = func(context.Context) (*BranchContract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BranchContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BranchContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BranchContractMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BranchContractMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BranchContract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BranchContractMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BranchContractMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BranchContractMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BranchContractMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BranchContractMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BranchContractMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *BranchContractMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *BranchContractMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *BranchContractMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[branchcontract.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *BranchContractMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[branchcontract.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *BranchContractMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, branchcontract.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *BranchContractMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *BranchContractMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *BranchContractMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[branchcontract.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *BranchContractMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[branchcontract.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *BranchContractMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, branchcontract.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *BranchContractMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *BranchContractMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *BranchContractMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[branchcontract.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *BranchContractMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[branchcontract.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *BranchContractMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, branchcontract.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *BranchContractMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *BranchContractMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *BranchContractMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[branchcontract.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *BranchContractMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[branchcontract.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *BranchContractMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, branchcontract.FieldRemark)
}

// SetBranchID sets the "branch_id" field.
func (m *BranchContractMutation) SetBranchID(u uint64) {
	m.branch = &u
}

// BranchID returns the value of the "branch_id" field in the mutation.
func (m *BranchContractMutation) BranchID() (r uint64, exists bool) {
	v := m.branch
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branch_id" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldBranchID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// ResetBranchID resets all changes to the "branch_id" field.
func (m *BranchContractMutation) ResetBranchID() {
	m.branch = nil
}

// SetLandlordName sets the "landlord_name" field.
func (m *BranchContractMutation) SetLandlordName(s string) {
	m.landlord_name = &s
}

// LandlordName returns the value of the "landlord_name" field in the mutation.
func (m *BranchContractMutation) LandlordName() (r string, exists bool) {
	v := m.landlord_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLandlordName returns the old "landlord_name" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldLandlordName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLandlordName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLandlordName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLandlordName: %w", err)
	}
	return oldValue.LandlordName, nil
}

// ResetLandlordName resets all changes to the "landlord_name" field.
func (m *BranchContractMutation) ResetLandlordName() {
	m.landlord_name = nil
}

// SetIDCardNumber sets the "id_card_number" field.
func (m *BranchContractMutation) SetIDCardNumber(s string) {
	m.id_card_number = &s
}

// IDCardNumber returns the value of the "id_card_number" field in the mutation.
func (m *BranchContractMutation) IDCardNumber() (r string, exists bool) {
	v := m.id_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNumber returns the old "id_card_number" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldIDCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNumber: %w", err)
	}
	return oldValue.IDCardNumber, nil
}

// ResetIDCardNumber resets all changes to the "id_card_number" field.
func (m *BranchContractMutation) ResetIDCardNumber() {
	m.id_card_number = nil
}

// SetPhone sets the "phone" field.
func (m *BranchContractMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *BranchContractMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *BranchContractMutation) ResetPhone() {
	m.phone = nil
}

// SetBankNumber sets the "bank_number" field.
func (m *BranchContractMutation) SetBankNumber(s string) {
	m.bank_number = &s
}

// BankNumber returns the value of the "bank_number" field in the mutation.
func (m *BranchContractMutation) BankNumber() (r string, exists bool) {
	v := m.bank_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBankNumber returns the old "bank_number" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldBankNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankNumber: %w", err)
	}
	return oldValue.BankNumber, nil
}

// ResetBankNumber resets all changes to the "bank_number" field.
func (m *BranchContractMutation) ResetBankNumber() {
	m.bank_number = nil
}

// SetPledge sets the "pledge" field.
func (m *BranchContractMutation) SetPledge(f float64) {
	m.pledge = &f
	m.addpledge = nil
}

// Pledge returns the value of the "pledge" field in the mutation.
func (m *BranchContractMutation) Pledge() (r float64, exists bool) {
	v := m.pledge
	if v == nil {
		return
	}
	return *v, true
}

// OldPledge returns the old "pledge" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldPledge(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPledge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPledge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPledge: %w", err)
	}
	return oldValue.Pledge, nil
}

// AddPledge adds f to the "pledge" field.
func (m *BranchContractMutation) AddPledge(f float64) {
	if m.addpledge != nil {
		*m.addpledge += f
	} else {
		m.addpledge = &f
	}
}

// AddedPledge returns the value that was added to the "pledge" field in this mutation.
func (m *BranchContractMutation) AddedPledge() (r float64, exists bool) {
	v := m.addpledge
	if v == nil {
		return
	}
	return *v, true
}

// ResetPledge resets all changes to the "pledge" field.
func (m *BranchContractMutation) ResetPledge() {
	m.pledge = nil
	m.addpledge = nil
}

// SetRent sets the "rent" field.
func (m *BranchContractMutation) SetRent(f float64) {
	m.rent = &f
	m.addrent = nil
}

// Rent returns the value of the "rent" field in the mutation.
func (m *BranchContractMutation) Rent() (r float64, exists bool) {
	v := m.rent
	if v == nil {
		return
	}
	return *v, true
}

// OldRent returns the old "rent" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldRent(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRent: %w", err)
	}
	return oldValue.Rent, nil
}

// AddRent adds f to the "rent" field.
func (m *BranchContractMutation) AddRent(f float64) {
	if m.addrent != nil {
		*m.addrent += f
	} else {
		m.addrent = &f
	}
}

// AddedRent returns the value that was added to the "rent" field in this mutation.
func (m *BranchContractMutation) AddedRent() (r float64, exists bool) {
	v := m.addrent
	if v == nil {
		return
	}
	return *v, true
}

// ResetRent resets all changes to the "rent" field.
func (m *BranchContractMutation) ResetRent() {
	m.rent = nil
	m.addrent = nil
}

// SetLease sets the "lease" field.
func (m *BranchContractMutation) SetLease(u uint) {
	m.lease = &u
	m.addlease = nil
}

// Lease returns the value of the "lease" field in the mutation.
func (m *BranchContractMutation) Lease() (r uint, exists bool) {
	v := m.lease
	if v == nil {
		return
	}
	return *v, true
}

// OldLease returns the old "lease" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldLease(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLease is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLease requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLease: %w", err)
	}
	return oldValue.Lease, nil
}

// AddLease adds u to the "lease" field.
func (m *BranchContractMutation) AddLease(u int) {
	if m.addlease != nil {
		*m.addlease += u
	} else {
		m.addlease = &u
	}
}

// AddedLease returns the value that was added to the "lease" field in this mutation.
func (m *BranchContractMutation) AddedLease() (r int, exists bool) {
	v := m.addlease
	if v == nil {
		return
	}
	return *v, true
}

// ResetLease resets all changes to the "lease" field.
func (m *BranchContractMutation) ResetLease() {
	m.lease = nil
	m.addlease = nil
}

// SetElectricityPledge sets the "electricity_pledge" field.
func (m *BranchContractMutation) SetElectricityPledge(f float64) {
	m.electricity_pledge = &f
	m.addelectricity_pledge = nil
}

// ElectricityPledge returns the value of the "electricity_pledge" field in the mutation.
func (m *BranchContractMutation) ElectricityPledge() (r float64, exists bool) {
	v := m.electricity_pledge
	if v == nil {
		return
	}
	return *v, true
}

// OldElectricityPledge returns the old "electricity_pledge" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldElectricityPledge(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldElectricityPledge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldElectricityPledge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldElectricityPledge: %w", err)
	}
	return oldValue.ElectricityPledge, nil
}

// AddElectricityPledge adds f to the "electricity_pledge" field.
func (m *BranchContractMutation) AddElectricityPledge(f float64) {
	if m.addelectricity_pledge != nil {
		*m.addelectricity_pledge += f
	} else {
		m.addelectricity_pledge = &f
	}
}

// AddedElectricityPledge returns the value that was added to the "electricity_pledge" field in this mutation.
func (m *BranchContractMutation) AddedElectricityPledge() (r float64, exists bool) {
	v := m.addelectricity_pledge
	if v == nil {
		return
	}
	return *v, true
}

// ResetElectricityPledge resets all changes to the "electricity_pledge" field.
func (m *BranchContractMutation) ResetElectricityPledge() {
	m.electricity_pledge = nil
	m.addelectricity_pledge = nil
}

// SetElectricity sets the "electricity" field.
func (m *BranchContractMutation) SetElectricity(f float64) {
	m.electricity = &f
	m.addelectricity = nil
}

// Electricity returns the value of the "electricity" field in the mutation.
func (m *BranchContractMutation) Electricity() (r float64, exists bool) {
	v := m.electricity
	if v == nil {
		return
	}
	return *v, true
}

// OldElectricity returns the old "electricity" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldElectricity(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldElectricity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldElectricity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldElectricity: %w", err)
	}
	return oldValue.Electricity, nil
}

// AddElectricity adds f to the "electricity" field.
func (m *BranchContractMutation) AddElectricity(f float64) {
	if m.addelectricity != nil {
		*m.addelectricity += f
	} else {
		m.addelectricity = &f
	}
}

// AddedElectricity returns the value that was added to the "electricity" field in this mutation.
func (m *BranchContractMutation) AddedElectricity() (r float64, exists bool) {
	v := m.addelectricity
	if v == nil {
		return
	}
	return *v, true
}

// ResetElectricity resets all changes to the "electricity" field.
func (m *BranchContractMutation) ResetElectricity() {
	m.electricity = nil
	m.addelectricity = nil
}

// SetArea sets the "area" field.
func (m *BranchContractMutation) SetArea(f float64) {
	m.area = &f
	m.addarea = nil
}

// Area returns the value of the "area" field in the mutation.
func (m *BranchContractMutation) Area() (r float64, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldArea(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// AddArea adds f to the "area" field.
func (m *BranchContractMutation) AddArea(f float64) {
	if m.addarea != nil {
		*m.addarea += f
	} else {
		m.addarea = &f
	}
}

// AddedArea returns the value that was added to the "area" field in this mutation.
func (m *BranchContractMutation) AddedArea() (r float64, exists bool) {
	v := m.addarea
	if v == nil {
		return
	}
	return *v, true
}

// ResetArea resets all changes to the "area" field.
func (m *BranchContractMutation) ResetArea() {
	m.area = nil
	m.addarea = nil
}

// SetStartTime sets the "start_time" field.
func (m *BranchContractMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *BranchContractMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *BranchContractMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *BranchContractMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *BranchContractMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *BranchContractMutation) ResetEndTime() {
	m.end_time = nil
}

// SetFile sets the "file" field.
func (m *BranchContractMutation) SetFile(s string) {
	m.file = &s
}

// File returns the value of the "file" field in the mutation.
func (m *BranchContractMutation) File() (r string, exists bool) {
	v := m.file
	if v == nil {
		return
	}
	return *v, true
}

// OldFile returns the old "file" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldFile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFile: %w", err)
	}
	return oldValue.File, nil
}

// ResetFile resets all changes to the "file" field.
func (m *BranchContractMutation) ResetFile() {
	m.file = nil
}

// SetSheets sets the "sheets" field.
func (m *BranchContractMutation) SetSheets(s []string) {
	m.sheets = &s
}

// Sheets returns the value of the "sheets" field in the mutation.
func (m *BranchContractMutation) Sheets() (r []string, exists bool) {
	v := m.sheets
	if v == nil {
		return
	}
	return *v, true
}

// OldSheets returns the old "sheets" field's value of the BranchContract entity.
// If the BranchContract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BranchContractMutation) OldSheets(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSheets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSheets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSheets: %w", err)
	}
	return oldValue.Sheets, nil
}

// ResetSheets resets all changes to the "sheets" field.
func (m *BranchContractMutation) ResetSheets() {
	m.sheets = nil
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (m *BranchContractMutation) ClearBranch() {
	m.clearedbranch = true
}

// BranchCleared reports if the "branch" edge to the Branch entity was cleared.
func (m *BranchContractMutation) BranchCleared() bool {
	return m.clearedbranch
}

// BranchIDs returns the "branch" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BranchID instead. It exists only for internal usage by the builders.
func (m *BranchContractMutation) BranchIDs() (ids []uint64) {
	if id := m.branch; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBranch resets all changes to the "branch" edge.
func (m *BranchContractMutation) ResetBranch() {
	m.branch = nil
	m.clearedbranch = false
}

// Where appends a list predicates to the BranchContractMutation builder.
func (m *BranchContractMutation) Where(ps ...predicate.BranchContract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BranchContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BranchContract).
func (m *BranchContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BranchContractMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.created_at != nil {
		fields = append(fields, branchcontract.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, branchcontract.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, branchcontract.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, branchcontract.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, branchcontract.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, branchcontract.FieldRemark)
	}
	if m.branch != nil {
		fields = append(fields, branchcontract.FieldBranchID)
	}
	if m.landlord_name != nil {
		fields = append(fields, branchcontract.FieldLandlordName)
	}
	if m.id_card_number != nil {
		fields = append(fields, branchcontract.FieldIDCardNumber)
	}
	if m.phone != nil {
		fields = append(fields, branchcontract.FieldPhone)
	}
	if m.bank_number != nil {
		fields = append(fields, branchcontract.FieldBankNumber)
	}
	if m.pledge != nil {
		fields = append(fields, branchcontract.FieldPledge)
	}
	if m.rent != nil {
		fields = append(fields, branchcontract.FieldRent)
	}
	if m.lease != nil {
		fields = append(fields, branchcontract.FieldLease)
	}
	if m.electricity_pledge != nil {
		fields = append(fields, branchcontract.FieldElectricityPledge)
	}
	if m.electricity != nil {
		fields = append(fields, branchcontract.FieldElectricity)
	}
	if m.area != nil {
		fields = append(fields, branchcontract.FieldArea)
	}
	if m.start_time != nil {
		fields = append(fields, branchcontract.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, branchcontract.FieldEndTime)
	}
	if m.file != nil {
		fields = append(fields, branchcontract.FieldFile)
	}
	if m.sheets != nil {
		fields = append(fields, branchcontract.FieldSheets)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BranchContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case branchcontract.FieldCreatedAt:
		return m.CreatedAt()
	case branchcontract.FieldUpdatedAt:
		return m.UpdatedAt()
	case branchcontract.FieldDeletedAt:
		return m.DeletedAt()
	case branchcontract.FieldCreator:
		return m.Creator()
	case branchcontract.FieldLastModifier:
		return m.LastModifier()
	case branchcontract.FieldRemark:
		return m.Remark()
	case branchcontract.FieldBranchID:
		return m.BranchID()
	case branchcontract.FieldLandlordName:
		return m.LandlordName()
	case branchcontract.FieldIDCardNumber:
		return m.IDCardNumber()
	case branchcontract.FieldPhone:
		return m.Phone()
	case branchcontract.FieldBankNumber:
		return m.BankNumber()
	case branchcontract.FieldPledge:
		return m.Pledge()
	case branchcontract.FieldRent:
		return m.Rent()
	case branchcontract.FieldLease:
		return m.Lease()
	case branchcontract.FieldElectricityPledge:
		return m.ElectricityPledge()
	case branchcontract.FieldElectricity:
		return m.Electricity()
	case branchcontract.FieldArea:
		return m.Area()
	case branchcontract.FieldStartTime:
		return m.StartTime()
	case branchcontract.FieldEndTime:
		return m.EndTime()
	case branchcontract.FieldFile:
		return m.File()
	case branchcontract.FieldSheets:
		return m.Sheets()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BranchContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case branchcontract.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case branchcontract.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case branchcontract.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case branchcontract.FieldCreator:
		return m.OldCreator(ctx)
	case branchcontract.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case branchcontract.FieldRemark:
		return m.OldRemark(ctx)
	case branchcontract.FieldBranchID:
		return m.OldBranchID(ctx)
	case branchcontract.FieldLandlordName:
		return m.OldLandlordName(ctx)
	case branchcontract.FieldIDCardNumber:
		return m.OldIDCardNumber(ctx)
	case branchcontract.FieldPhone:
		return m.OldPhone(ctx)
	case branchcontract.FieldBankNumber:
		return m.OldBankNumber(ctx)
	case branchcontract.FieldPledge:
		return m.OldPledge(ctx)
	case branchcontract.FieldRent:
		return m.OldRent(ctx)
	case branchcontract.FieldLease:
		return m.OldLease(ctx)
	case branchcontract.FieldElectricityPledge:
		return m.OldElectricityPledge(ctx)
	case branchcontract.FieldElectricity:
		return m.OldElectricity(ctx)
	case branchcontract.FieldArea:
		return m.OldArea(ctx)
	case branchcontract.FieldStartTime:
		return m.OldStartTime(ctx)
	case branchcontract.FieldEndTime:
		return m.OldEndTime(ctx)
	case branchcontract.FieldFile:
		return m.OldFile(ctx)
	case branchcontract.FieldSheets:
		return m.OldSheets(ctx)
	}
	return nil, fmt.Errorf("unknown BranchContract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case branchcontract.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case branchcontract.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case branchcontract.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case branchcontract.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case branchcontract.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case branchcontract.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case branchcontract.FieldBranchID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case branchcontract.FieldLandlordName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLandlordName(v)
		return nil
	case branchcontract.FieldIDCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNumber(v)
		return nil
	case branchcontract.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case branchcontract.FieldBankNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankNumber(v)
		return nil
	case branchcontract.FieldPledge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPledge(v)
		return nil
	case branchcontract.FieldRent:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRent(v)
		return nil
	case branchcontract.FieldLease:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLease(v)
		return nil
	case branchcontract.FieldElectricityPledge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetElectricityPledge(v)
		return nil
	case branchcontract.FieldElectricity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetElectricity(v)
		return nil
	case branchcontract.FieldArea:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case branchcontract.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case branchcontract.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case branchcontract.FieldFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFile(v)
		return nil
	case branchcontract.FieldSheets:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSheets(v)
		return nil
	}
	return fmt.Errorf("unknown BranchContract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BranchContractMutation) AddedFields() []string {
	var fields []string
	if m.addpledge != nil {
		fields = append(fields, branchcontract.FieldPledge)
	}
	if m.addrent != nil {
		fields = append(fields, branchcontract.FieldRent)
	}
	if m.addlease != nil {
		fields = append(fields, branchcontract.FieldLease)
	}
	if m.addelectricity_pledge != nil {
		fields = append(fields, branchcontract.FieldElectricityPledge)
	}
	if m.addelectricity != nil {
		fields = append(fields, branchcontract.FieldElectricity)
	}
	if m.addarea != nil {
		fields = append(fields, branchcontract.FieldArea)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BranchContractMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case branchcontract.FieldPledge:
		return m.AddedPledge()
	case branchcontract.FieldRent:
		return m.AddedRent()
	case branchcontract.FieldLease:
		return m.AddedLease()
	case branchcontract.FieldElectricityPledge:
		return m.AddedElectricityPledge()
	case branchcontract.FieldElectricity:
		return m.AddedElectricity()
	case branchcontract.FieldArea:
		return m.AddedArea()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BranchContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	case branchcontract.FieldPledge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPledge(v)
		return nil
	case branchcontract.FieldRent:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRent(v)
		return nil
	case branchcontract.FieldLease:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLease(v)
		return nil
	case branchcontract.FieldElectricityPledge:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddElectricityPledge(v)
		return nil
	case branchcontract.FieldElectricity:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddElectricity(v)
		return nil
	case branchcontract.FieldArea:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArea(v)
		return nil
	}
	return fmt.Errorf("unknown BranchContract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BranchContractMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(branchcontract.FieldDeletedAt) {
		fields = append(fields, branchcontract.FieldDeletedAt)
	}
	if m.FieldCleared(branchcontract.FieldCreator) {
		fields = append(fields, branchcontract.FieldCreator)
	}
	if m.FieldCleared(branchcontract.FieldLastModifier) {
		fields = append(fields, branchcontract.FieldLastModifier)
	}
	if m.FieldCleared(branchcontract.FieldRemark) {
		fields = append(fields, branchcontract.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BranchContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BranchContractMutation) ClearField(name string) error {
	switch name {
	case branchcontract.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case branchcontract.FieldCreator:
		m.ClearCreator()
		return nil
	case branchcontract.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case branchcontract.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown BranchContract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BranchContractMutation) ResetField(name string) error {
	switch name {
	case branchcontract.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case branchcontract.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case branchcontract.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case branchcontract.FieldCreator:
		m.ResetCreator()
		return nil
	case branchcontract.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case branchcontract.FieldRemark:
		m.ResetRemark()
		return nil
	case branchcontract.FieldBranchID:
		m.ResetBranchID()
		return nil
	case branchcontract.FieldLandlordName:
		m.ResetLandlordName()
		return nil
	case branchcontract.FieldIDCardNumber:
		m.ResetIDCardNumber()
		return nil
	case branchcontract.FieldPhone:
		m.ResetPhone()
		return nil
	case branchcontract.FieldBankNumber:
		m.ResetBankNumber()
		return nil
	case branchcontract.FieldPledge:
		m.ResetPledge()
		return nil
	case branchcontract.FieldRent:
		m.ResetRent()
		return nil
	case branchcontract.FieldLease:
		m.ResetLease()
		return nil
	case branchcontract.FieldElectricityPledge:
		m.ResetElectricityPledge()
		return nil
	case branchcontract.FieldElectricity:
		m.ResetElectricity()
		return nil
	case branchcontract.FieldArea:
		m.ResetArea()
		return nil
	case branchcontract.FieldStartTime:
		m.ResetStartTime()
		return nil
	case branchcontract.FieldEndTime:
		m.ResetEndTime()
		return nil
	case branchcontract.FieldFile:
		m.ResetFile()
		return nil
	case branchcontract.FieldSheets:
		m.ResetSheets()
		return nil
	}
	return fmt.Errorf("unknown BranchContract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BranchContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.branch != nil {
		edges = append(edges, branchcontract.EdgeBranch)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BranchContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case branchcontract.EdgeBranch:
		if id := m.branch; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BranchContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BranchContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BranchContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedbranch {
		edges = append(edges, branchcontract.EdgeBranch)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BranchContractMutation) EdgeCleared(name string) bool {
	switch name {
	case branchcontract.EdgeBranch:
		return m.clearedbranch
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BranchContractMutation) ClearEdge(name string) error {
	switch name {
	case branchcontract.EdgeBranch:
		m.ClearBranch()
		return nil
	}
	return fmt.Errorf("unknown BranchContract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BranchContractMutation) ResetEdge(name string) error {
	switch name {
	case branchcontract.EdgeBranch:
		m.ResetBranch()
		return nil
	}
	return fmt.Errorf("unknown BranchContract edge %s", name)
}

