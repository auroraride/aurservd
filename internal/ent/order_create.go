// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrderCreate) SetUpdatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUpdatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrderCreate) SetDeletedAt(t time.Time) *OrderCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableDeletedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetCreator sets the "creator" field.
func (oc *OrderCreate) SetCreator(m *model.Modifier) *OrderCreate {
	oc.mutation.SetCreator(m)
	return oc
}

// SetLastModifier sets the "last_modifier" field.
func (oc *OrderCreate) SetLastModifier(m *model.Modifier) *OrderCreate {
	oc.mutation.SetLastModifier(m)
	return oc
}

// SetRemark sets the "remark" field.
func (oc *OrderCreate) SetRemark(s string) *OrderCreate {
	oc.mutation.SetRemark(s)
	return oc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRemark(s *string) *OrderCreate {
	if s != nil {
		oc.SetRemark(*s)
	}
	return oc
}

// SetPlanID sets the "plan_id" field.
func (oc *OrderCreate) SetPlanID(u uint64) *OrderCreate {
	oc.mutation.SetPlanID(u)
	return oc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePlanID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetPlanID(*u)
	}
	return oc
}

// SetCityID sets the "city_id" field.
func (oc *OrderCreate) SetCityID(u uint64) *OrderCreate {
	oc.mutation.SetCityID(u)
	return oc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCityID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetCityID(*u)
	}
	return oc
}

// SetRiderID sets the "rider_id" field.
func (oc *OrderCreate) SetRiderID(u uint64) *OrderCreate {
	oc.mutation.SetRiderID(u)
	return oc
}

// SetParentID sets the "parent_id" field.
func (oc *OrderCreate) SetParentID(u uint64) *OrderCreate {
	oc.mutation.SetParentID(u)
	return oc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableParentID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetParentID(*u)
	}
	return oc
}

// SetSubscribeID sets the "subscribe_id" field.
func (oc *OrderCreate) SetSubscribeID(u uint64) *OrderCreate {
	oc.mutation.SetSubscribeID(u)
	return oc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableSubscribeID(u *uint64) *OrderCreate {
	if u != nil {
		oc.SetSubscribeID(*u)
	}
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(u uint8) *OrderCreate {
	oc.mutation.SetStatus(u)
	return oc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oc *OrderCreate) SetNillableStatus(u *uint8) *OrderCreate {
	if u != nil {
		oc.SetStatus(*u)
	}
	return oc
}

// SetPayway sets the "payway" field.
func (oc *OrderCreate) SetPayway(u uint8) *OrderCreate {
	oc.mutation.SetPayway(u)
	return oc
}

// SetType sets the "type" field.
func (oc *OrderCreate) SetType(u uint) *OrderCreate {
	oc.mutation.SetType(u)
	return oc
}

// SetOutTradeNo sets the "out_trade_no" field.
func (oc *OrderCreate) SetOutTradeNo(s string) *OrderCreate {
	oc.mutation.SetOutTradeNo(s)
	return oc
}

// SetTradeNo sets the "trade_no" field.
func (oc *OrderCreate) SetTradeNo(s string) *OrderCreate {
	oc.mutation.SetTradeNo(s)
	return oc
}

// SetAmount sets the "amount" field.
func (oc *OrderCreate) SetAmount(f float64) *OrderCreate {
	oc.mutation.SetAmount(f)
	return oc
}

// SetTotal sets the "total" field.
func (oc *OrderCreate) SetTotal(f float64) *OrderCreate {
	oc.mutation.SetTotal(f)
	return oc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTotal(f *float64) *OrderCreate {
	if f != nil {
		oc.SetTotal(*f)
	}
	return oc
}

// SetRefundAt sets the "refund_at" field.
func (oc *OrderCreate) SetRefundAt(t time.Time) *OrderCreate {
	oc.mutation.SetRefundAt(t)
	return oc
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableRefundAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetRefundAt(*t)
	}
	return oc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (oc *OrderCreate) SetPlan(p *Plan) *OrderCreate {
	return oc.SetPlanID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (oc *OrderCreate) SetCity(c *City) *OrderCreate {
	return oc.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (oc *OrderCreate) SetRider(r *Rider) *OrderCreate {
	return oc.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (oc *OrderCreate) SetSubscribe(s *Subscribe) *OrderCreate {
	return oc.SetSubscribeID(s.ID)
}

// SetCommissionID sets the "commission" edge to the Commission entity by ID.
func (oc *OrderCreate) SetCommissionID(id uint64) *OrderCreate {
	oc.mutation.SetCommissionID(id)
	return oc
}

// SetNillableCommissionID sets the "commission" edge to the Commission entity by ID if the given value is not nil.
func (oc *OrderCreate) SetNillableCommissionID(id *uint64) *OrderCreate {
	if id != nil {
		oc = oc.SetCommissionID(*id)
	}
	return oc
}

// SetCommission sets the "commission" edge to the Commission entity.
func (oc *OrderCreate) SetCommission(c *Commission) *OrderCreate {
	return oc.SetCommissionID(c.ID)
}

// SetParent sets the "parent" edge to the Order entity.
func (oc *OrderCreate) SetParent(o *Order) *OrderCreate {
	return oc.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Order entity by IDs.
func (oc *OrderCreate) AddChildIDs(ids ...uint64) *OrderCreate {
	oc.mutation.AddChildIDs(ids...)
	return oc
}

// AddChildren adds the "children" edges to the Order entity.
func (oc *OrderCreate) AddChildren(o ...*Order) *OrderCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddChildIDs(ids...)
}

// AddRefundIDs adds the "refunds" edge to the OrderRefund entity by IDs.
func (oc *OrderCreate) AddRefundIDs(ids ...uint64) *OrderCreate {
	oc.mutation.AddRefundIDs(ids...)
	return oc
}

// AddRefunds adds the "refunds" edges to the OrderRefund entity.
func (oc *OrderCreate) AddRefunds(o ...*OrderRefund) *OrderCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddRefundIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			if node, err = oc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			if oc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if order.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		if order.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.Status(); !ok {
		v := order.DefaultStatus
		oc.mutation.SetStatus(v)
	}
	if _, ok := oc.mutation.Total(); !ok {
		v := order.DefaultTotal
		oc.mutation.SetTotal(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Order.updated_at"`)}
	}
	if _, ok := oc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Order.rider_id"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if _, ok := oc.mutation.Payway(); !ok {
		return &ValidationError{Name: "payway", err: errors.New(`ent: missing required field "Order.payway"`)}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Order.type"`)}
	}
	if _, ok := oc.mutation.OutTradeNo(); !ok {
		return &ValidationError{Name: "out_trade_no", err: errors.New(`ent: missing required field "Order.out_trade_no"`)}
	}
	if _, ok := oc.mutation.TradeNo(); !ok {
		return &ValidationError{Name: "trade_no", err: errors.New(`ent: missing required field "Order.trade_no"`)}
	}
	if _, ok := oc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Order.amount"`)}
	}
	if _, ok := oc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "Order.total"`)}
	}
	if _, ok := oc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Order.rider"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := oc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := oc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := oc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := oc.mutation.Payway(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldPayway,
		})
		_node.Payway = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: order.FieldType,
		})
		_node.Type = value
	}
	if value, ok := oc.mutation.OutTradeNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldOutTradeNo,
		})
		_node.OutTradeNo = value
	}
	if value, ok := oc.mutation.TradeNo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldTradeNo,
		})
		_node.TradeNo = value
	}
	if value, ok := oc.mutation.Amount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldAmount,
		})
		_node.Amount = value
	}
	if value, ok := oc.mutation.Total(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: order.FieldTotal,
		})
		_node.Total = value
	}
	if value, ok := oc.mutation.RefundAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldRefundAt,
		})
		_node.RefundAt = &value
	}
	if nodes := oc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.SubscribeTable,
			Columns: []string{order.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: commission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.RefundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsert) SetCreatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsert) SetUpdatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsert) SetDeletedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDeletedAt() *OrderUpsert {
	u.SetExcluded(order.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderUpsert) ClearDeletedAt() *OrderUpsert {
	u.SetNull(order.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrderUpsert) SetCreator(v *model.Modifier) *OrderUpsert {
	u.Set(order.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreator() *OrderUpsert {
	u.SetExcluded(order.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderUpsert) ClearCreator() *OrderUpsert {
	u.SetNull(order.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderUpsert) SetLastModifier(v *model.Modifier) *OrderUpsert {
	u.Set(order.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderUpsert) UpdateLastModifier() *OrderUpsert {
	u.SetExcluded(order.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderUpsert) ClearLastModifier() *OrderUpsert {
	u.SetNull(order.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderUpsert) SetRemark(v string) *OrderUpsert {
	u.Set(order.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRemark() *OrderUpsert {
	u.SetExcluded(order.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsert) ClearRemark() *OrderUpsert {
	u.SetNull(order.FieldRemark)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *OrderUpsert) SetPlanID(v uint64) *OrderUpsert {
	u.Set(order.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePlanID() *OrderUpsert {
	u.SetExcluded(order.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *OrderUpsert) ClearPlanID() *OrderUpsert {
	u.SetNull(order.FieldPlanID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *OrderUpsert) SetCityID(v uint64) *OrderUpsert {
	u.Set(order.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCityID() *OrderUpsert {
	u.SetExcluded(order.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *OrderUpsert) ClearCityID() *OrderUpsert {
	u.SetNull(order.FieldCityID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *OrderUpsert) SetRiderID(v uint64) *OrderUpsert {
	u.Set(order.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRiderID() *OrderUpsert {
	u.SetExcluded(order.FieldRiderID)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *OrderUpsert) SetParentID(v uint64) *OrderUpsert {
	u.Set(order.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateParentID() *OrderUpsert {
	u.SetExcluded(order.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrderUpsert) ClearParentID() *OrderUpsert {
	u.SetNull(order.FieldParentID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *OrderUpsert) SetSubscribeID(v uint64) *OrderUpsert {
	u.Set(order.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateSubscribeID() *OrderUpsert {
	u.SetExcluded(order.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *OrderUpsert) ClearSubscribeID() *OrderUpsert {
	u.SetNull(order.FieldSubscribeID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v uint8) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsert) AddStatus(v uint8) *OrderUpsert {
	u.Add(order.FieldStatus, v)
	return u
}

// SetPayway sets the "payway" field.
func (u *OrderUpsert) SetPayway(v uint8) *OrderUpsert {
	u.Set(order.FieldPayway, v)
	return u
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePayway() *OrderUpsert {
	u.SetExcluded(order.FieldPayway)
	return u
}

// AddPayway adds v to the "payway" field.
func (u *OrderUpsert) AddPayway(v uint8) *OrderUpsert {
	u.Add(order.FieldPayway, v)
	return u
}

// SetType sets the "type" field.
func (u *OrderUpsert) SetType(v uint) *OrderUpsert {
	u.Set(order.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsert) UpdateType() *OrderUpsert {
	u.SetExcluded(order.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *OrderUpsert) AddType(v uint) *OrderUpsert {
	u.Add(order.FieldType, v)
	return u
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *OrderUpsert) SetOutTradeNo(v string) *OrderUpsert {
	u.Set(order.FieldOutTradeNo, v)
	return u
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOutTradeNo() *OrderUpsert {
	u.SetExcluded(order.FieldOutTradeNo)
	return u
}

// SetTradeNo sets the "trade_no" field.
func (u *OrderUpsert) SetTradeNo(v string) *OrderUpsert {
	u.Set(order.FieldTradeNo, v)
	return u
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTradeNo() *OrderUpsert {
	u.SetExcluded(order.FieldTradeNo)
	return u
}

// SetAmount sets the "amount" field.
func (u *OrderUpsert) SetAmount(v float64) *OrderUpsert {
	u.Set(order.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderUpsert) UpdateAmount() *OrderUpsert {
	u.SetExcluded(order.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *OrderUpsert) AddAmount(v float64) *OrderUpsert {
	u.Add(order.FieldAmount, v)
	return u
}

// SetTotal sets the "total" field.
func (u *OrderUpsert) SetTotal(v float64) *OrderUpsert {
	u.Set(order.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTotal() *OrderUpsert {
	u.SetExcluded(order.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *OrderUpsert) AddTotal(v float64) *OrderUpsert {
	u.Add(order.FieldTotal, v)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsert) SetRefundAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateRefundAt() *OrderUpsert {
	u.SetExcluded(order.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsert) ClearRefundAt() *OrderUpsert {
	u.SetNull(order.FieldRefundAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(order.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(order.FieldCreator)
		}
		if _, exists := u.create.mutation.Payway(); exists {
			s.SetIgnore(order.FieldPayway)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(order.FieldType)
		}
		if _, exists := u.create.mutation.OutTradeNo(); exists {
			s.SetIgnore(order.FieldOutTradeNo)
		}
		if _, exists := u.create.mutation.TradeNo(); exists {
			s.SetIgnore(order.FieldTradeNo)
		}
		if _, exists := u.create.mutation.Amount(); exists {
			s.SetIgnore(order.FieldAmount)
		}
		if _, exists := u.create.mutation.Total(); exists {
			s.SetIgnore(order.FieldTotal)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Order.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertOne) SetCreatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertOne) SetUpdatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertOne) SetDeletedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDeletedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderUpsertOne) ClearDeletedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderUpsertOne) SetCreator(v *model.Modifier) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreator() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderUpsertOne) ClearCreator() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderUpsertOne) SetLastModifier(v *model.Modifier) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateLastModifier() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderUpsertOne) ClearLastModifier() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertOne) SetRemark(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRemark() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsertOne) ClearRemark() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemark()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *OrderUpsertOne) SetPlanID(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePlanID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *OrderUpsertOne) ClearPlanID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPlanID()
	})
}

// SetCityID sets the "city_id" field.
func (u *OrderUpsertOne) SetCityID(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCityID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *OrderUpsertOne) ClearCityID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderUpsertOne) SetRiderID(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRiderID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRiderID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrderUpsertOne) SetParentID(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateParentID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrderUpsertOne) ClearParentID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearParentID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *OrderUpsertOne) SetSubscribeID(v uint64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateSubscribeID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *OrderUpsertOne) ClearSubscribeID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearSubscribeID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v uint8) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertOne) AddStatus(v uint8) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPayway sets the "payway" field.
func (u *OrderUpsertOne) SetPayway(v uint8) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPayway(v)
	})
}

// AddPayway adds v to the "payway" field.
func (u *OrderUpsertOne) AddPayway(v uint8) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddPayway(v)
	})
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePayway() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePayway()
	})
}

// SetType sets the "type" field.
func (u *OrderUpsertOne) SetType(v uint) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *OrderUpsertOne) AddType(v uint) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateType()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *OrderUpsertOne) SetOutTradeNo(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOutTradeNo() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetTradeNo sets the "trade_no" field.
func (u *OrderUpsertOne) SetTradeNo(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTradeNo(v)
	})
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTradeNo() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTradeNo()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderUpsertOne) SetAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *OrderUpsertOne) AddAmount(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateAmount() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateAmount()
	})
}

// SetTotal sets the "total" field.
func (u *OrderUpsertOne) SetTotal(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *OrderUpsertOne) AddTotal(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTotal() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotal()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertOne) SetRefundAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertOne) ClearRefundAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(order.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(order.FieldCreator)
			}
			if _, exists := b.mutation.Payway(); exists {
				s.SetIgnore(order.FieldPayway)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(order.FieldType)
			}
			if _, exists := b.mutation.OutTradeNo(); exists {
				s.SetIgnore(order.FieldOutTradeNo)
			}
			if _, exists := b.mutation.TradeNo(); exists {
				s.SetIgnore(order.FieldTradeNo)
			}
			if _, exists := b.mutation.Amount(); exists {
				s.SetIgnore(order.FieldAmount)
			}
			if _, exists := b.mutation.Total(); exists {
				s.SetIgnore(order.FieldTotal)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertBulk) SetCreatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUpsertBulk) SetUpdatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUpsertBulk) SetDeletedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDeletedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderUpsertBulk) ClearDeletedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderUpsertBulk) SetCreator(v *model.Modifier) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreator() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderUpsertBulk) ClearCreator() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderUpsertBulk) SetLastModifier(v *model.Modifier) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateLastModifier() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderUpsertBulk) ClearLastModifier() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderUpsertBulk) SetRemark(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRemark() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderUpsertBulk) ClearRemark() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRemark()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *OrderUpsertBulk) SetPlanID(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePlanID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *OrderUpsertBulk) ClearPlanID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPlanID()
	})
}

// SetCityID sets the "city_id" field.
func (u *OrderUpsertBulk) SetCityID(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCityID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *OrderUpsertBulk) ClearCityID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderUpsertBulk) SetRiderID(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRiderID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRiderID()
	})
}

// SetParentID sets the "parent_id" field.
func (u *OrderUpsertBulk) SetParentID(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateParentID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *OrderUpsertBulk) ClearParentID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearParentID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *OrderUpsertBulk) SetSubscribeID(v uint64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateSubscribeID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *OrderUpsertBulk) ClearSubscribeID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearSubscribeID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v uint8) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertBulk) AddStatus(v uint8) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetPayway sets the "payway" field.
func (u *OrderUpsertBulk) SetPayway(v uint8) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPayway(v)
	})
}

// AddPayway adds v to the "payway" field.
func (u *OrderUpsertBulk) AddPayway(v uint8) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddPayway(v)
	})
}

// UpdatePayway sets the "payway" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePayway() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePayway()
	})
}

// SetType sets the "type" field.
func (u *OrderUpsertBulk) SetType(v uint) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *OrderUpsertBulk) AddType(v uint) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateType()
	})
}

// SetOutTradeNo sets the "out_trade_no" field.
func (u *OrderUpsertBulk) SetOutTradeNo(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOutTradeNo(v)
	})
}

// UpdateOutTradeNo sets the "out_trade_no" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOutTradeNo() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOutTradeNo()
	})
}

// SetTradeNo sets the "trade_no" field.
func (u *OrderUpsertBulk) SetTradeNo(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTradeNo(v)
	})
}

// UpdateTradeNo sets the "trade_no" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTradeNo() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTradeNo()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderUpsertBulk) SetAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *OrderUpsertBulk) AddAmount(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateAmount() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateAmount()
	})
}

// SetTotal sets the "total" field.
func (u *OrderUpsertBulk) SetTotal(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *OrderUpsertBulk) AddTotal(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTotal() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTotal()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderUpsertBulk) SetRefundAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderUpsertBulk) ClearRefundAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
