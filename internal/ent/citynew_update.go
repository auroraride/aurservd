// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/citynew"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CityNewUpdate is the builder for updating CityNew entities.
type CityNewUpdate struct {
	config
	hooks     []Hook
	mutation  *CityNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CityNewUpdate builder.
func (cnu *CityNewUpdate) Where(ps ...predicate.CityNew) *CityNewUpdate {
	cnu.mutation.Where(ps...)
	return cnu
}

// SetUpdatedAt sets the "updated_at" field.
func (cnu *CityNewUpdate) SetUpdatedAt(t time.Time) *CityNewUpdate {
	cnu.mutation.SetUpdatedAt(t)
	return cnu
}

// SetDeletedAt sets the "deleted_at" field.
func (cnu *CityNewUpdate) SetDeletedAt(t time.Time) *CityNewUpdate {
	cnu.mutation.SetDeletedAt(t)
	return cnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableDeletedAt(t *time.Time) *CityNewUpdate {
	if t != nil {
		cnu.SetDeletedAt(*t)
	}
	return cnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cnu *CityNewUpdate) ClearDeletedAt() *CityNewUpdate {
	cnu.mutation.ClearDeletedAt()
	return cnu
}

// SetLastModifier sets the "last_modifier" field.
func (cnu *CityNewUpdate) SetLastModifier(m *model.Modifier) *CityNewUpdate {
	cnu.mutation.SetLastModifier(m)
	return cnu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cnu *CityNewUpdate) ClearLastModifier() *CityNewUpdate {
	cnu.mutation.ClearLastModifier()
	return cnu
}

// SetRemark sets the "remark" field.
func (cnu *CityNewUpdate) SetRemark(s string) *CityNewUpdate {
	cnu.mutation.SetRemark(s)
	return cnu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableRemark(s *string) *CityNewUpdate {
	if s != nil {
		cnu.SetRemark(*s)
	}
	return cnu
}

// ClearRemark clears the value of the "remark" field.
func (cnu *CityNewUpdate) ClearRemark() *CityNewUpdate {
	cnu.mutation.ClearRemark()
	return cnu
}

// SetOpen sets the "open" field.
func (cnu *CityNewUpdate) SetOpen(b bool) *CityNewUpdate {
	cnu.mutation.SetOpen(b)
	return cnu
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableOpen(b *bool) *CityNewUpdate {
	if b != nil {
		cnu.SetOpen(*b)
	}
	return cnu
}

// ClearOpen clears the value of the "open" field.
func (cnu *CityNewUpdate) ClearOpen() *CityNewUpdate {
	cnu.mutation.ClearOpen()
	return cnu
}

// SetName sets the "name" field.
func (cnu *CityNewUpdate) SetName(s string) *CityNewUpdate {
	cnu.mutation.SetName(s)
	return cnu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableName(s *string) *CityNewUpdate {
	if s != nil {
		cnu.SetName(*s)
	}
	return cnu
}

// SetCode sets the "code" field.
func (cnu *CityNewUpdate) SetCode(s string) *CityNewUpdate {
	cnu.mutation.SetCode(s)
	return cnu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableCode(s *string) *CityNewUpdate {
	if s != nil {
		cnu.SetCode(*s)
	}
	return cnu
}

// SetParentID sets the "parent_id" field.
func (cnu *CityNewUpdate) SetParentID(u uint64) *CityNewUpdate {
	cnu.mutation.ResetParentID()
	cnu.mutation.SetParentID(u)
	return cnu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableParentID(u *uint64) *CityNewUpdate {
	if u != nil {
		cnu.SetParentID(*u)
	}
	return cnu
}

// AddParentID adds u to the "parent_id" field.
func (cnu *CityNewUpdate) AddParentID(u int64) *CityNewUpdate {
	cnu.mutation.AddParentID(u)
	return cnu
}

// ClearParentID clears the value of the "parent_id" field.
func (cnu *CityNewUpdate) ClearParentID() *CityNewUpdate {
	cnu.mutation.ClearParentID()
	return cnu
}

// SetLng sets the "lng" field.
func (cnu *CityNewUpdate) SetLng(f float64) *CityNewUpdate {
	cnu.mutation.ResetLng()
	cnu.mutation.SetLng(f)
	return cnu
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableLng(f *float64) *CityNewUpdate {
	if f != nil {
		cnu.SetLng(*f)
	}
	return cnu
}

// AddLng adds f to the "lng" field.
func (cnu *CityNewUpdate) AddLng(f float64) *CityNewUpdate {
	cnu.mutation.AddLng(f)
	return cnu
}

// ClearLng clears the value of the "lng" field.
func (cnu *CityNewUpdate) ClearLng() *CityNewUpdate {
	cnu.mutation.ClearLng()
	return cnu
}

// SetLat sets the "lat" field.
func (cnu *CityNewUpdate) SetLat(f float64) *CityNewUpdate {
	cnu.mutation.ResetLat()
	cnu.mutation.SetLat(f)
	return cnu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cnu *CityNewUpdate) SetNillableLat(f *float64) *CityNewUpdate {
	if f != nil {
		cnu.SetLat(*f)
	}
	return cnu
}

// AddLat adds f to the "lat" field.
func (cnu *CityNewUpdate) AddLat(f float64) *CityNewUpdate {
	cnu.mutation.AddLat(f)
	return cnu
}

// ClearLat clears the value of the "lat" field.
func (cnu *CityNewUpdate) ClearLat() *CityNewUpdate {
	cnu.mutation.ClearLat()
	return cnu
}

// Mutation returns the CityNewMutation object of the builder.
func (cnu *CityNewUpdate) Mutation() *CityNewMutation {
	return cnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnu *CityNewUpdate) Save(ctx context.Context) (int, error) {
	if err := cnu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cnu.sqlSave, cnu.mutation, cnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnu *CityNewUpdate) SaveX(ctx context.Context) int {
	affected, err := cnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnu *CityNewUpdate) Exec(ctx context.Context) error {
	_, err := cnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnu *CityNewUpdate) ExecX(ctx context.Context) {
	if err := cnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnu *CityNewUpdate) defaults() error {
	if _, ok := cnu.mutation.UpdatedAt(); !ok {
		if citynew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized citynew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := citynew.UpdateDefaultUpdatedAt()
		cnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cnu *CityNewUpdate) check() error {
	if v, ok := cnu.mutation.Name(); ok {
		if err := citynew.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CityNew.name": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.Code(); ok {
		if err := citynew.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CityNew.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cnu *CityNewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CityNewUpdate {
	cnu.modifiers = append(cnu.modifiers, modifiers...)
	return cnu
}

func (cnu *CityNewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cnu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(citynew.Table, citynew.Columns, sqlgraph.NewFieldSpec(citynew.FieldID, field.TypeUint64))
	if ps := cnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnu.mutation.UpdatedAt(); ok {
		_spec.SetField(citynew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cnu.mutation.DeletedAt(); ok {
		_spec.SetField(citynew.FieldDeletedAt, field.TypeTime, value)
	}
	if cnu.mutation.DeletedAtCleared() {
		_spec.ClearField(citynew.FieldDeletedAt, field.TypeTime)
	}
	if cnu.mutation.CreatorCleared() {
		_spec.ClearField(citynew.FieldCreator, field.TypeJSON)
	}
	if value, ok := cnu.mutation.LastModifier(); ok {
		_spec.SetField(citynew.FieldLastModifier, field.TypeJSON, value)
	}
	if cnu.mutation.LastModifierCleared() {
		_spec.ClearField(citynew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cnu.mutation.Remark(); ok {
		_spec.SetField(citynew.FieldRemark, field.TypeString, value)
	}
	if cnu.mutation.RemarkCleared() {
		_spec.ClearField(citynew.FieldRemark, field.TypeString)
	}
	if value, ok := cnu.mutation.Open(); ok {
		_spec.SetField(citynew.FieldOpen, field.TypeBool, value)
	}
	if cnu.mutation.OpenCleared() {
		_spec.ClearField(citynew.FieldOpen, field.TypeBool)
	}
	if value, ok := cnu.mutation.Name(); ok {
		_spec.SetField(citynew.FieldName, field.TypeString, value)
	}
	if value, ok := cnu.mutation.Code(); ok {
		_spec.SetField(citynew.FieldCode, field.TypeString, value)
	}
	if value, ok := cnu.mutation.ParentID(); ok {
		_spec.SetField(citynew.FieldParentID, field.TypeUint64, value)
	}
	if value, ok := cnu.mutation.AddedParentID(); ok {
		_spec.AddField(citynew.FieldParentID, field.TypeUint64, value)
	}
	if cnu.mutation.ParentIDCleared() {
		_spec.ClearField(citynew.FieldParentID, field.TypeUint64)
	}
	if value, ok := cnu.mutation.Lng(); ok {
		_spec.SetField(citynew.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := cnu.mutation.AddedLng(); ok {
		_spec.AddField(citynew.FieldLng, field.TypeFloat64, value)
	}
	if cnu.mutation.LngCleared() {
		_spec.ClearField(citynew.FieldLng, field.TypeFloat64)
	}
	if value, ok := cnu.mutation.Lat(); ok {
		_spec.SetField(citynew.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := cnu.mutation.AddedLat(); ok {
		_spec.AddField(citynew.FieldLat, field.TypeFloat64, value)
	}
	if cnu.mutation.LatCleared() {
		_spec.ClearField(citynew.FieldLat, field.TypeFloat64)
	}
	_spec.AddModifiers(cnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citynew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cnu.mutation.done = true
	return n, nil
}

// CityNewUpdateOne is the builder for updating a single CityNew entity.
type CityNewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CityNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cnuo *CityNewUpdateOne) SetUpdatedAt(t time.Time) *CityNewUpdateOne {
	cnuo.mutation.SetUpdatedAt(t)
	return cnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cnuo *CityNewUpdateOne) SetDeletedAt(t time.Time) *CityNewUpdateOne {
	cnuo.mutation.SetDeletedAt(t)
	return cnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableDeletedAt(t *time.Time) *CityNewUpdateOne {
	if t != nil {
		cnuo.SetDeletedAt(*t)
	}
	return cnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cnuo *CityNewUpdateOne) ClearDeletedAt() *CityNewUpdateOne {
	cnuo.mutation.ClearDeletedAt()
	return cnuo
}

// SetLastModifier sets the "last_modifier" field.
func (cnuo *CityNewUpdateOne) SetLastModifier(m *model.Modifier) *CityNewUpdateOne {
	cnuo.mutation.SetLastModifier(m)
	return cnuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cnuo *CityNewUpdateOne) ClearLastModifier() *CityNewUpdateOne {
	cnuo.mutation.ClearLastModifier()
	return cnuo
}

// SetRemark sets the "remark" field.
func (cnuo *CityNewUpdateOne) SetRemark(s string) *CityNewUpdateOne {
	cnuo.mutation.SetRemark(s)
	return cnuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableRemark(s *string) *CityNewUpdateOne {
	if s != nil {
		cnuo.SetRemark(*s)
	}
	return cnuo
}

// ClearRemark clears the value of the "remark" field.
func (cnuo *CityNewUpdateOne) ClearRemark() *CityNewUpdateOne {
	cnuo.mutation.ClearRemark()
	return cnuo
}

// SetOpen sets the "open" field.
func (cnuo *CityNewUpdateOne) SetOpen(b bool) *CityNewUpdateOne {
	cnuo.mutation.SetOpen(b)
	return cnuo
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableOpen(b *bool) *CityNewUpdateOne {
	if b != nil {
		cnuo.SetOpen(*b)
	}
	return cnuo
}

// ClearOpen clears the value of the "open" field.
func (cnuo *CityNewUpdateOne) ClearOpen() *CityNewUpdateOne {
	cnuo.mutation.ClearOpen()
	return cnuo
}

// SetName sets the "name" field.
func (cnuo *CityNewUpdateOne) SetName(s string) *CityNewUpdateOne {
	cnuo.mutation.SetName(s)
	return cnuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableName(s *string) *CityNewUpdateOne {
	if s != nil {
		cnuo.SetName(*s)
	}
	return cnuo
}

// SetCode sets the "code" field.
func (cnuo *CityNewUpdateOne) SetCode(s string) *CityNewUpdateOne {
	cnuo.mutation.SetCode(s)
	return cnuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableCode(s *string) *CityNewUpdateOne {
	if s != nil {
		cnuo.SetCode(*s)
	}
	return cnuo
}

// SetParentID sets the "parent_id" field.
func (cnuo *CityNewUpdateOne) SetParentID(u uint64) *CityNewUpdateOne {
	cnuo.mutation.ResetParentID()
	cnuo.mutation.SetParentID(u)
	return cnuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableParentID(u *uint64) *CityNewUpdateOne {
	if u != nil {
		cnuo.SetParentID(*u)
	}
	return cnuo
}

// AddParentID adds u to the "parent_id" field.
func (cnuo *CityNewUpdateOne) AddParentID(u int64) *CityNewUpdateOne {
	cnuo.mutation.AddParentID(u)
	return cnuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cnuo *CityNewUpdateOne) ClearParentID() *CityNewUpdateOne {
	cnuo.mutation.ClearParentID()
	return cnuo
}

// SetLng sets the "lng" field.
func (cnuo *CityNewUpdateOne) SetLng(f float64) *CityNewUpdateOne {
	cnuo.mutation.ResetLng()
	cnuo.mutation.SetLng(f)
	return cnuo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableLng(f *float64) *CityNewUpdateOne {
	if f != nil {
		cnuo.SetLng(*f)
	}
	return cnuo
}

// AddLng adds f to the "lng" field.
func (cnuo *CityNewUpdateOne) AddLng(f float64) *CityNewUpdateOne {
	cnuo.mutation.AddLng(f)
	return cnuo
}

// ClearLng clears the value of the "lng" field.
func (cnuo *CityNewUpdateOne) ClearLng() *CityNewUpdateOne {
	cnuo.mutation.ClearLng()
	return cnuo
}

// SetLat sets the "lat" field.
func (cnuo *CityNewUpdateOne) SetLat(f float64) *CityNewUpdateOne {
	cnuo.mutation.ResetLat()
	cnuo.mutation.SetLat(f)
	return cnuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cnuo *CityNewUpdateOne) SetNillableLat(f *float64) *CityNewUpdateOne {
	if f != nil {
		cnuo.SetLat(*f)
	}
	return cnuo
}

// AddLat adds f to the "lat" field.
func (cnuo *CityNewUpdateOne) AddLat(f float64) *CityNewUpdateOne {
	cnuo.mutation.AddLat(f)
	return cnuo
}

// ClearLat clears the value of the "lat" field.
func (cnuo *CityNewUpdateOne) ClearLat() *CityNewUpdateOne {
	cnuo.mutation.ClearLat()
	return cnuo
}

// Mutation returns the CityNewMutation object of the builder.
func (cnuo *CityNewUpdateOne) Mutation() *CityNewMutation {
	return cnuo.mutation
}

// Where appends a list predicates to the CityNewUpdate builder.
func (cnuo *CityNewUpdateOne) Where(ps ...predicate.CityNew) *CityNewUpdateOne {
	cnuo.mutation.Where(ps...)
	return cnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnuo *CityNewUpdateOne) Select(field string, fields ...string) *CityNewUpdateOne {
	cnuo.fields = append([]string{field}, fields...)
	return cnuo
}

// Save executes the query and returns the updated CityNew entity.
func (cnuo *CityNewUpdateOne) Save(ctx context.Context) (*CityNew, error) {
	if err := cnuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cnuo.sqlSave, cnuo.mutation, cnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cnuo *CityNewUpdateOne) SaveX(ctx context.Context) *CityNew {
	node, err := cnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnuo *CityNewUpdateOne) Exec(ctx context.Context) error {
	_, err := cnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnuo *CityNewUpdateOne) ExecX(ctx context.Context) {
	if err := cnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cnuo *CityNewUpdateOne) defaults() error {
	if _, ok := cnuo.mutation.UpdatedAt(); !ok {
		if citynew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized citynew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := citynew.UpdateDefaultUpdatedAt()
		cnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cnuo *CityNewUpdateOne) check() error {
	if v, ok := cnuo.mutation.Name(); ok {
		if err := citynew.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CityNew.name": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.Code(); ok {
		if err := citynew.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "CityNew.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cnuo *CityNewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CityNewUpdateOne {
	cnuo.modifiers = append(cnuo.modifiers, modifiers...)
	return cnuo
}

func (cnuo *CityNewUpdateOne) sqlSave(ctx context.Context) (_node *CityNew, err error) {
	if err := cnuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(citynew.Table, citynew.Columns, sqlgraph.NewFieldSpec(citynew.FieldID, field.TypeUint64))
	id, ok := cnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CityNew.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, citynew.FieldID)
		for _, f := range fields {
			if !citynew.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != citynew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(citynew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cnuo.mutation.DeletedAt(); ok {
		_spec.SetField(citynew.FieldDeletedAt, field.TypeTime, value)
	}
	if cnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(citynew.FieldDeletedAt, field.TypeTime)
	}
	if cnuo.mutation.CreatorCleared() {
		_spec.ClearField(citynew.FieldCreator, field.TypeJSON)
	}
	if value, ok := cnuo.mutation.LastModifier(); ok {
		_spec.SetField(citynew.FieldLastModifier, field.TypeJSON, value)
	}
	if cnuo.mutation.LastModifierCleared() {
		_spec.ClearField(citynew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cnuo.mutation.Remark(); ok {
		_spec.SetField(citynew.FieldRemark, field.TypeString, value)
	}
	if cnuo.mutation.RemarkCleared() {
		_spec.ClearField(citynew.FieldRemark, field.TypeString)
	}
	if value, ok := cnuo.mutation.Open(); ok {
		_spec.SetField(citynew.FieldOpen, field.TypeBool, value)
	}
	if cnuo.mutation.OpenCleared() {
		_spec.ClearField(citynew.FieldOpen, field.TypeBool)
	}
	if value, ok := cnuo.mutation.Name(); ok {
		_spec.SetField(citynew.FieldName, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.Code(); ok {
		_spec.SetField(citynew.FieldCode, field.TypeString, value)
	}
	if value, ok := cnuo.mutation.ParentID(); ok {
		_spec.SetField(citynew.FieldParentID, field.TypeUint64, value)
	}
	if value, ok := cnuo.mutation.AddedParentID(); ok {
		_spec.AddField(citynew.FieldParentID, field.TypeUint64, value)
	}
	if cnuo.mutation.ParentIDCleared() {
		_spec.ClearField(citynew.FieldParentID, field.TypeUint64)
	}
	if value, ok := cnuo.mutation.Lng(); ok {
		_spec.SetField(citynew.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := cnuo.mutation.AddedLng(); ok {
		_spec.AddField(citynew.FieldLng, field.TypeFloat64, value)
	}
	if cnuo.mutation.LngCleared() {
		_spec.ClearField(citynew.FieldLng, field.TypeFloat64)
	}
	if value, ok := cnuo.mutation.Lat(); ok {
		_spec.SetField(citynew.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := cnuo.mutation.AddedLat(); ok {
		_spec.AddField(citynew.FieldLat, field.TypeFloat64, value)
	}
	if cnuo.mutation.LatCleared() {
		_spec.ClearField(citynew.FieldLat, field.TypeFloat64)
	}
	_spec.AddModifiers(cnuo.modifiers...)
	_node = &CityNew{config: cnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{citynew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cnuo.mutation.done = true
	return _node, nil
}
