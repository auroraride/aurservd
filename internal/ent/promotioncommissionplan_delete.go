// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
)

// PromotionCommissionPlanDelete is the builder for deleting a PromotionCommissionPlan entity.
type PromotionCommissionPlanDelete struct {
	config
	hooks    []Hook
	mutation *PromotionCommissionPlanMutation
}

// Where appends a list predicates to the PromotionCommissionPlanDelete builder.
func (pcpd *PromotionCommissionPlanDelete) Where(ps ...predicate.PromotionCommissionPlan) *PromotionCommissionPlanDelete {
	pcpd.mutation.Where(ps...)
	return pcpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pcpd *PromotionCommissionPlanDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pcpd.sqlExec, pcpd.mutation, pcpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pcpd *PromotionCommissionPlanDelete) ExecX(ctx context.Context) int {
	n, err := pcpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pcpd *PromotionCommissionPlanDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotioncommissionplan.Table, sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64))
	if ps := pcpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pcpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pcpd.mutation.done = true
	return affected, err
}

// PromotionCommissionPlanDeleteOne is the builder for deleting a single PromotionCommissionPlan entity.
type PromotionCommissionPlanDeleteOne struct {
	pcpd *PromotionCommissionPlanDelete
}

// Where appends a list predicates to the PromotionCommissionPlanDelete builder.
func (pcpdo *PromotionCommissionPlanDeleteOne) Where(ps ...predicate.PromotionCommissionPlan) *PromotionCommissionPlanDeleteOne {
	pcpdo.pcpd.mutation.Where(ps...)
	return pcpdo
}

// Exec executes the deletion query.
func (pcpdo *PromotionCommissionPlanDeleteOne) Exec(ctx context.Context) error {
	n, err := pcpdo.pcpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotioncommissionplan.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pcpdo *PromotionCommissionPlanDeleteOne) ExecX(ctx context.Context) {
	if err := pcpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
