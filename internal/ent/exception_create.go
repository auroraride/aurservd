// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exception"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// ExceptionCreate is the builder for creating a Exception entity.
type ExceptionCreate struct {
	config
	mutation *ExceptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ec *ExceptionCreate) SetCreatedAt(t time.Time) *ExceptionCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableCreatedAt(t *time.Time) *ExceptionCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *ExceptionCreate) SetUpdatedAt(t time.Time) *ExceptionCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableUpdatedAt(t *time.Time) *ExceptionCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDeletedAt sets the "deleted_at" field.
func (ec *ExceptionCreate) SetDeletedAt(t time.Time) *ExceptionCreate {
	ec.mutation.SetDeletedAt(t)
	return ec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableDeletedAt(t *time.Time) *ExceptionCreate {
	if t != nil {
		ec.SetDeletedAt(*t)
	}
	return ec
}

// SetCreator sets the "creator" field.
func (ec *ExceptionCreate) SetCreator(m *model.Modifier) *ExceptionCreate {
	ec.mutation.SetCreator(m)
	return ec
}

// SetLastModifier sets the "last_modifier" field.
func (ec *ExceptionCreate) SetLastModifier(m *model.Modifier) *ExceptionCreate {
	ec.mutation.SetLastModifier(m)
	return ec
}

// SetRemark sets the "remark" field.
func (ec *ExceptionCreate) SetRemark(s string) *ExceptionCreate {
	ec.mutation.SetRemark(s)
	return ec
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableRemark(s *string) *ExceptionCreate {
	if s != nil {
		ec.SetRemark(*s)
	}
	return ec
}

// SetCityID sets the "city_id" field.
func (ec *ExceptionCreate) SetCityID(u uint64) *ExceptionCreate {
	ec.mutation.SetCityID(u)
	return ec
}

// SetEmployeeID sets the "employee_id" field.
func (ec *ExceptionCreate) SetEmployeeID(u uint64) *ExceptionCreate {
	ec.mutation.SetEmployeeID(u)
	return ec
}

// SetStatus sets the "status" field.
func (ec *ExceptionCreate) SetStatus(u uint8) *ExceptionCreate {
	ec.mutation.SetStatus(u)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableStatus(u *uint8) *ExceptionCreate {
	if u != nil {
		ec.SetStatus(*u)
	}
	return ec
}

// SetStoreID sets the "store_id" field.
func (ec *ExceptionCreate) SetStoreID(u uint64) *ExceptionCreate {
	ec.mutation.SetStoreID(u)
	return ec
}

// SetName sets the "name" field.
func (ec *ExceptionCreate) SetName(s string) *ExceptionCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetModel sets the "model" field.
func (ec *ExceptionCreate) SetModel(s string) *ExceptionCreate {
	ec.mutation.SetModel(s)
	return ec
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableModel(s *string) *ExceptionCreate {
	if s != nil {
		ec.SetModel(*s)
	}
	return ec
}

// SetNum sets the "num" field.
func (ec *ExceptionCreate) SetNum(i int) *ExceptionCreate {
	ec.mutation.SetNum(i)
	return ec
}

// SetReason sets the "reason" field.
func (ec *ExceptionCreate) SetReason(s string) *ExceptionCreate {
	ec.mutation.SetReason(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *ExceptionCreate) SetDescription(s string) *ExceptionCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *ExceptionCreate) SetNillableDescription(s *string) *ExceptionCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetAttachments sets the "attachments" field.
func (ec *ExceptionCreate) SetAttachments(s []string) *ExceptionCreate {
	ec.mutation.SetAttachments(s)
	return ec
}

// SetCity sets the "city" edge to the City entity.
func (ec *ExceptionCreate) SetCity(c *City) *ExceptionCreate {
	return ec.SetCityID(c.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ec *ExceptionCreate) SetEmployee(e *Employee) *ExceptionCreate {
	return ec.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (ec *ExceptionCreate) SetStore(s *Store) *ExceptionCreate {
	return ec.SetStoreID(s.ID)
}

// Mutation returns the ExceptionMutation object of the builder.
func (ec *ExceptionCreate) Mutation() *ExceptionMutation {
	return ec.mutation
}

// Save creates the Exception in the database.
func (ec *ExceptionCreate) Save(ctx context.Context) (*Exception, error) {
	var (
		err  error
		node *Exception
	)
	if err := ec.defaults(); err != nil {
		return nil, err
	}
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExceptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Exception)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExceptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExceptionCreate) SaveX(ctx context.Context) *Exception {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExceptionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExceptionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExceptionCreate) defaults() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		if exception.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized exception.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := exception.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		if exception.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized exception.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := exception.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.Status(); !ok {
		v := exception.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExceptionCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Exception.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Exception.updated_at"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Exception.city_id"`)}
	}
	if _, ok := ec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Exception.employee_id"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Exception.status"`)}
	}
	if _, ok := ec.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store_id", err: errors.New(`ent: missing required field "Exception.store_id"`)}
	}
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Exception.name"`)}
	}
	if _, ok := ec.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Exception.num"`)}
	}
	if _, ok := ec.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "Exception.reason"`)}
	}
	if _, ok := ec.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Exception.city"`)}
	}
	if _, ok := ec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "Exception.employee"`)}
	}
	if _, ok := ec.mutation.StoreID(); !ok {
		return &ValidationError{Name: "store", err: errors.New(`ent: missing required edge "Exception.store"`)}
	}
	return nil
}

func (ec *ExceptionCreate) sqlSave(ctx context.Context) (*Exception, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ec *ExceptionCreate) createSpec() (*Exception, *sqlgraph.CreateSpec) {
	var (
		_node = &Exception{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: exception.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: exception.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exception.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exception.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: exception.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ec.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exception.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ec.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exception.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ec.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exception.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: exception.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ec.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exception.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ec.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exception.FieldModel,
		})
		_node.Model = &value
	}
	if value, ok := ec.mutation.Num(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: exception.FieldNum,
		})
		_node.Num = value
	}
	if value, ok := ec.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exception.FieldReason,
		})
		_node.Reason = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: exception.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ec.mutation.Attachments(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: exception.FieldAttachments,
		})
		_node.Attachments = value
	}
	if nodes := ec.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.CityTable,
			Columns: []string{exception.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exception.EmployeeTable,
			Columns: []string{exception.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   exception.StoreTable,
			Columns: []string{exception.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exception.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExceptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ec *ExceptionCreate) OnConflict(opts ...sql.ConflictOption) *ExceptionUpsertOne {
	ec.conflict = opts
	return &ExceptionUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exception.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ec *ExceptionCreate) OnConflictColumns(columns ...string) *ExceptionUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &ExceptionUpsertOne{
		create: ec,
	}
}

type (
	// ExceptionUpsertOne is the builder for "upsert"-ing
	//  one Exception node.
	ExceptionUpsertOne struct {
		create *ExceptionCreate
	}

	// ExceptionUpsert is the "OnConflict" setter.
	ExceptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *ExceptionUpsert) SetCreatedAt(v time.Time) *ExceptionUpsert {
	u.Set(exception.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateCreatedAt() *ExceptionUpsert {
	u.SetExcluded(exception.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExceptionUpsert) SetUpdatedAt(v time.Time) *ExceptionUpsert {
	u.Set(exception.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateUpdatedAt() *ExceptionUpsert {
	u.SetExcluded(exception.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExceptionUpsert) SetDeletedAt(v time.Time) *ExceptionUpsert {
	u.Set(exception.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateDeletedAt() *ExceptionUpsert {
	u.SetExcluded(exception.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExceptionUpsert) ClearDeletedAt() *ExceptionUpsert {
	u.SetNull(exception.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *ExceptionUpsert) SetCreator(v *model.Modifier) *ExceptionUpsert {
	u.Set(exception.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateCreator() *ExceptionUpsert {
	u.SetExcluded(exception.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *ExceptionUpsert) ClearCreator() *ExceptionUpsert {
	u.SetNull(exception.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExceptionUpsert) SetLastModifier(v *model.Modifier) *ExceptionUpsert {
	u.Set(exception.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateLastModifier() *ExceptionUpsert {
	u.SetExcluded(exception.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExceptionUpsert) ClearLastModifier() *ExceptionUpsert {
	u.SetNull(exception.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *ExceptionUpsert) SetRemark(v string) *ExceptionUpsert {
	u.Set(exception.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateRemark() *ExceptionUpsert {
	u.SetExcluded(exception.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ExceptionUpsert) ClearRemark() *ExceptionUpsert {
	u.SetNull(exception.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *ExceptionUpsert) SetCityID(v uint64) *ExceptionUpsert {
	u.Set(exception.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateCityID() *ExceptionUpsert {
	u.SetExcluded(exception.FieldCityID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExceptionUpsert) SetEmployeeID(v uint64) *ExceptionUpsert {
	u.Set(exception.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateEmployeeID() *ExceptionUpsert {
	u.SetExcluded(exception.FieldEmployeeID)
	return u
}

// SetStatus sets the "status" field.
func (u *ExceptionUpsert) SetStatus(v uint8) *ExceptionUpsert {
	u.Set(exception.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateStatus() *ExceptionUpsert {
	u.SetExcluded(exception.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ExceptionUpsert) AddStatus(v uint8) *ExceptionUpsert {
	u.Add(exception.FieldStatus, v)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *ExceptionUpsert) SetStoreID(v uint64) *ExceptionUpsert {
	u.Set(exception.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateStoreID() *ExceptionUpsert {
	u.SetExcluded(exception.FieldStoreID)
	return u
}

// SetName sets the "name" field.
func (u *ExceptionUpsert) SetName(v string) *ExceptionUpsert {
	u.Set(exception.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateName() *ExceptionUpsert {
	u.SetExcluded(exception.FieldName)
	return u
}

// SetModel sets the "model" field.
func (u *ExceptionUpsert) SetModel(v string) *ExceptionUpsert {
	u.Set(exception.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateModel() *ExceptionUpsert {
	u.SetExcluded(exception.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *ExceptionUpsert) ClearModel() *ExceptionUpsert {
	u.SetNull(exception.FieldModel)
	return u
}

// SetNum sets the "num" field.
func (u *ExceptionUpsert) SetNum(v int) *ExceptionUpsert {
	u.Set(exception.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateNum() *ExceptionUpsert {
	u.SetExcluded(exception.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *ExceptionUpsert) AddNum(v int) *ExceptionUpsert {
	u.Add(exception.FieldNum, v)
	return u
}

// SetReason sets the "reason" field.
func (u *ExceptionUpsert) SetReason(v string) *ExceptionUpsert {
	u.Set(exception.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateReason() *ExceptionUpsert {
	u.SetExcluded(exception.FieldReason)
	return u
}

// SetDescription sets the "description" field.
func (u *ExceptionUpsert) SetDescription(v string) *ExceptionUpsert {
	u.Set(exception.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateDescription() *ExceptionUpsert {
	u.SetExcluded(exception.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ExceptionUpsert) ClearDescription() *ExceptionUpsert {
	u.SetNull(exception.FieldDescription)
	return u
}

// SetAttachments sets the "attachments" field.
func (u *ExceptionUpsert) SetAttachments(v []string) *ExceptionUpsert {
	u.Set(exception.FieldAttachments, v)
	return u
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *ExceptionUpsert) UpdateAttachments() *ExceptionUpsert {
	u.SetExcluded(exception.FieldAttachments)
	return u
}

// ClearAttachments clears the value of the "attachments" field.
func (u *ExceptionUpsert) ClearAttachments() *ExceptionUpsert {
	u.SetNull(exception.FieldAttachments)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Exception.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ExceptionUpsertOne) UpdateNewValues() *ExceptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(exception.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(exception.FieldCreator)
		}
		if _, exists := u.create.mutation.Num(); exists {
			s.SetIgnore(exception.FieldNum)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Exception.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ExceptionUpsertOne) Ignore() *ExceptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExceptionUpsertOne) DoNothing() *ExceptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExceptionCreate.OnConflict
// documentation for more info.
func (u *ExceptionUpsertOne) Update(set func(*ExceptionUpsert)) *ExceptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExceptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExceptionUpsertOne) SetCreatedAt(v time.Time) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateCreatedAt() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExceptionUpsertOne) SetUpdatedAt(v time.Time) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateUpdatedAt() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExceptionUpsertOne) SetDeletedAt(v time.Time) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateDeletedAt() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExceptionUpsertOne) ClearDeletedAt() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *ExceptionUpsertOne) SetCreator(v *model.Modifier) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateCreator() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ExceptionUpsertOne) ClearCreator() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExceptionUpsertOne) SetLastModifier(v *model.Modifier) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateLastModifier() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExceptionUpsertOne) ClearLastModifier() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ExceptionUpsertOne) SetRemark(v string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateRemark() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ExceptionUpsertOne) ClearRemark() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *ExceptionUpsertOne) SetCityID(v uint64) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateCityID() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExceptionUpsertOne) SetEmployeeID(v uint64) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateEmployeeID() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetStatus sets the "status" field.
func (u *ExceptionUpsertOne) SetStatus(v uint8) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExceptionUpsertOne) AddStatus(v uint8) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateStatus() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateStatus()
	})
}

// SetStoreID sets the "store_id" field.
func (u *ExceptionUpsertOne) SetStoreID(v uint64) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateStoreID() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateStoreID()
	})
}

// SetName sets the "name" field.
func (u *ExceptionUpsertOne) SetName(v string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateName() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateName()
	})
}

// SetModel sets the "model" field.
func (u *ExceptionUpsertOne) SetModel(v string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateModel() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *ExceptionUpsertOne) ClearModel() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearModel()
	})
}

// SetNum sets the "num" field.
func (u *ExceptionUpsertOne) SetNum(v int) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *ExceptionUpsertOne) AddNum(v int) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateNum() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateNum()
	})
}

// SetReason sets the "reason" field.
func (u *ExceptionUpsertOne) SetReason(v string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateReason() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateReason()
	})
}

// SetDescription sets the "description" field.
func (u *ExceptionUpsertOne) SetDescription(v string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateDescription() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExceptionUpsertOne) ClearDescription() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearDescription()
	})
}

// SetAttachments sets the "attachments" field.
func (u *ExceptionUpsertOne) SetAttachments(v []string) *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *ExceptionUpsertOne) UpdateAttachments() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *ExceptionUpsertOne) ClearAttachments() *ExceptionUpsertOne {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearAttachments()
	})
}

// Exec executes the query.
func (u *ExceptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExceptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExceptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ExceptionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ExceptionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ExceptionCreateBulk is the builder for creating many Exception entities in bulk.
type ExceptionCreateBulk struct {
	config
	builders []*ExceptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Exception entities in the database.
func (ecb *ExceptionCreateBulk) Save(ctx context.Context) ([]*Exception, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exception, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExceptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExceptionCreateBulk) SaveX(ctx context.Context) []*Exception {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExceptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExceptionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Exception.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ExceptionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ecb *ExceptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *ExceptionUpsertBulk {
	ecb.conflict = opts
	return &ExceptionUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Exception.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ecb *ExceptionCreateBulk) OnConflictColumns(columns ...string) *ExceptionUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &ExceptionUpsertBulk{
		create: ecb,
	}
}

// ExceptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Exception nodes.
type ExceptionUpsertBulk struct {
	create *ExceptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Exception.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ExceptionUpsertBulk) UpdateNewValues() *ExceptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(exception.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(exception.FieldCreator)
			}
			if _, exists := b.mutation.Num(); exists {
				s.SetIgnore(exception.FieldNum)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Exception.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ExceptionUpsertBulk) Ignore() *ExceptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ExceptionUpsertBulk) DoNothing() *ExceptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ExceptionCreateBulk.OnConflict
// documentation for more info.
func (u *ExceptionUpsertBulk) Update(set func(*ExceptionUpsert)) *ExceptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ExceptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ExceptionUpsertBulk) SetCreatedAt(v time.Time) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateCreatedAt() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ExceptionUpsertBulk) SetUpdatedAt(v time.Time) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateUpdatedAt() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ExceptionUpsertBulk) SetDeletedAt(v time.Time) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateDeletedAt() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ExceptionUpsertBulk) ClearDeletedAt() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *ExceptionUpsertBulk) SetCreator(v *model.Modifier) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateCreator() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *ExceptionUpsertBulk) ClearCreator() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ExceptionUpsertBulk) SetLastModifier(v *model.Modifier) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateLastModifier() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ExceptionUpsertBulk) ClearLastModifier() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ExceptionUpsertBulk) SetRemark(v string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateRemark() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ExceptionUpsertBulk) ClearRemark() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *ExceptionUpsertBulk) SetCityID(v uint64) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateCityID() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateCityID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ExceptionUpsertBulk) SetEmployeeID(v uint64) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateEmployeeID() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetStatus sets the "status" field.
func (u *ExceptionUpsertBulk) SetStatus(v uint8) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ExceptionUpsertBulk) AddStatus(v uint8) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateStatus() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateStatus()
	})
}

// SetStoreID sets the "store_id" field.
func (u *ExceptionUpsertBulk) SetStoreID(v uint64) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateStoreID() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateStoreID()
	})
}

// SetName sets the "name" field.
func (u *ExceptionUpsertBulk) SetName(v string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateName() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateName()
	})
}

// SetModel sets the "model" field.
func (u *ExceptionUpsertBulk) SetModel(v string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateModel() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *ExceptionUpsertBulk) ClearModel() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearModel()
	})
}

// SetNum sets the "num" field.
func (u *ExceptionUpsertBulk) SetNum(v int) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *ExceptionUpsertBulk) AddNum(v int) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateNum() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateNum()
	})
}

// SetReason sets the "reason" field.
func (u *ExceptionUpsertBulk) SetReason(v string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateReason() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateReason()
	})
}

// SetDescription sets the "description" field.
func (u *ExceptionUpsertBulk) SetDescription(v string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateDescription() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ExceptionUpsertBulk) ClearDescription() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearDescription()
	})
}

// SetAttachments sets the "attachments" field.
func (u *ExceptionUpsertBulk) SetAttachments(v []string) *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.SetAttachments(v)
	})
}

// UpdateAttachments sets the "attachments" field to the value that was provided on create.
func (u *ExceptionUpsertBulk) UpdateAttachments() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.UpdateAttachments()
	})
}

// ClearAttachments clears the value of the "attachments" field.
func (u *ExceptionUpsertBulk) ClearAttachments() *ExceptionUpsertBulk {
	return u.Update(func(s *ExceptionUpsert) {
		s.ClearAttachments()
	})
}

// Exec executes the query.
func (u *ExceptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ExceptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ExceptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ExceptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
