// Code generated by ent, DO NOT EDIT.

package store

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the store type in the database.
	Label = "store"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldGroupID holds the string denoting the group_id field in the database.
	FieldGroupID = "group_id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldBranchID holds the string denoting the branch_id field in the database.
	FieldBranchID = "branch_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldEbikeObtain holds the string denoting the ebike_obtain field in the database.
	FieldEbikeObtain = "ebike_obtain"
	// FieldEbikeRepair holds the string denoting the ebike_repair field in the database.
	FieldEbikeRepair = "ebike_repair"
	// FieldEbikeSale holds the string denoting the ebike_sale field in the database.
	FieldEbikeSale = "ebike_sale"
	// FieldRest holds the string denoting the rest field in the database.
	FieldRest = "rest"
	// FieldBusinessHours holds the string denoting the business_hours field in the database.
	FieldBusinessHours = "business_hours"
	// FieldPhotos holds the string denoting the photos field in the database.
	FieldPhotos = "photos"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldHeadPic holds the string denoting the head_pic field in the database.
	FieldHeadPic = "head_pic"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeBranch holds the string denoting the branch edge name in mutations.
	EdgeBranch = "branch"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// EdgeAttendances holds the string denoting the attendances edge name in mutations.
	EdgeAttendances = "attendances"
	// EdgeExceptions holds the string denoting the exceptions edge name in mutations.
	EdgeExceptions = "exceptions"
	// EdgeGoods holds the string denoting the goods edge name in mutations.
	EdgeGoods = "goods"
	// EdgeEmployees holds the string denoting the employees edge name in mutations.
	EdgeEmployees = "employees"
	// EdgeDutyEmployees holds the string denoting the duty_employees edge name in mutations.
	EdgeDutyEmployees = "duty_employees"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgeRentAsset holds the string denoting the rent_asset edge name in mutations.
	EdgeRentAsset = "rent_asset"
	// Table holds the table name of the store in the database.
	Table = "store"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "store"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "store"
	// GroupInverseTable is the table name for the StoreGroup entity.
	// It exists in this package in order to avoid circular dependency with the "storegroup" package.
	GroupInverseTable = "store_group"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_id"
	// BranchTable is the table that holds the branch relation/edge.
	BranchTable = "store"
	// BranchInverseTable is the table name for the Branch entity.
	// It exists in this package in order to avoid circular dependency with the "branch" package.
	BranchInverseTable = "branch"
	// BranchColumn is the table column denoting the branch relation/edge.
	BranchColumn = "branch_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "store"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "asset"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "asset"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "locations_id"
	// AttendancesTable is the table that holds the attendances relation/edge.
	AttendancesTable = "attendance"
	// AttendancesInverseTable is the table name for the Attendance entity.
	// It exists in this package in order to avoid circular dependency with the "attendance" package.
	AttendancesInverseTable = "attendance"
	// AttendancesColumn is the table column denoting the attendances relation/edge.
	AttendancesColumn = "store_id"
	// ExceptionsTable is the table that holds the exceptions relation/edge.
	ExceptionsTable = "exception"
	// ExceptionsInverseTable is the table name for the Exception entity.
	// It exists in this package in order to avoid circular dependency with the "exception" package.
	ExceptionsInverseTable = "exception"
	// ExceptionsColumn is the table column denoting the exceptions relation/edge.
	ExceptionsColumn = "store_id"
	// GoodsTable is the table that holds the goods relation/edge.
	GoodsTable = "store_goods"
	// GoodsInverseTable is the table name for the StoreGoods entity.
	// It exists in this package in order to avoid circular dependency with the "storegoods" package.
	GoodsInverseTable = "store_goods"
	// GoodsColumn is the table column denoting the goods relation/edge.
	GoodsColumn = "store_id"
	// EmployeesTable is the table that holds the employees relation/edge. The primary key declared below.
	EmployeesTable = "store_employees"
	// EmployeesInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeesInverseTable = "employee"
	// DutyEmployeesTable is the table that holds the duty_employees relation/edge.
	DutyEmployeesTable = "employee"
	// DutyEmployeesInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	DutyEmployeesInverseTable = "employee"
	// DutyEmployeesColumn is the table column denoting the duty_employees relation/edge.
	DutyEmployeesColumn = "duty_store_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "store_id"
	// RentAssetTable is the table that holds the rent_asset relation/edge.
	RentAssetTable = "asset"
	// RentAssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	RentAssetInverseTable = "asset"
	// RentAssetColumn is the table column denoting the rent_asset relation/edge.
	RentAssetColumn = "rent_locations_id"
)

// Columns holds all SQL columns for store fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldGroupID,
	FieldEmployeeID,
	FieldBranchID,
	FieldSn,
	FieldName,
	FieldStatus,
	FieldLng,
	FieldLat,
	FieldAddress,
	FieldEbikeObtain,
	FieldEbikeRepair,
	FieldEbikeSale,
	FieldRest,
	FieldBusinessHours,
	FieldPhotos,
	FieldPhone,
	FieldHeadPic,
}

var (
	// EmployeesPrimaryKey and EmployeesColumn2 are the table columns denoting the
	// primary key for the employees relation (M2M).
	EmployeesPrimaryKey = []string{"store_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultEbikeObtain holds the default value on creation for the "ebike_obtain" field.
	DefaultEbikeObtain bool
	// DefaultEbikeRepair holds the default value on creation for the "ebike_repair" field.
	DefaultEbikeRepair bool
	// DefaultEbikeSale holds the default value on creation for the "ebike_sale" field.
	DefaultEbikeSale bool
	// DefaultRest holds the default value on creation for the "rest" field.
	DefaultRest bool
	// DefaultPhone holds the default value on creation for the "phone" field.
	DefaultPhone string
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultHeadPic holds the default value on creation for the "head_pic" field.
	DefaultHeadPic string
)

// OrderOption defines the ordering options for the Store queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByGroupID orders the results by the group_id field.
func ByGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByBranchID orders the results by the branch_id field.
func ByBranchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByLng orders the results by the lng field.
func ByLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLng, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByEbikeObtain orders the results by the ebike_obtain field.
func ByEbikeObtain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeObtain, opts...).ToFunc()
}

// ByEbikeRepair orders the results by the ebike_repair field.
func ByEbikeRepair(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeRepair, opts...).ToFunc()
}

// ByEbikeSale orders the results by the ebike_sale field.
func ByEbikeSale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeSale, opts...).ToFunc()
}

// ByRest orders the results by the rest field.
func ByRest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRest, opts...).ToFunc()
}

// ByBusinessHours orders the results by the business_hours field.
func ByBusinessHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessHours, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByHeadPic orders the results by the head_pic field.
func ByHeadPic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeadPic, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}

// ByBranchField orders the results by branch field.
func ByBranchField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBranchStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssetCount orders the results by asset count.
func ByAssetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetStep(), opts...)
	}
}

// ByAsset orders the results by asset terms.
func ByAsset(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAttendancesCount orders the results by attendances count.
func ByAttendancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttendancesStep(), opts...)
	}
}

// ByAttendances orders the results by attendances terms.
func ByAttendances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttendancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExceptionsCount orders the results by exceptions count.
func ByExceptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExceptionsStep(), opts...)
	}
}

// ByExceptions orders the results by exceptions terms.
func ByExceptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExceptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGoodsCount orders the results by goods count.
func ByGoodsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGoodsStep(), opts...)
	}
}

// ByGoods orders the results by goods terms.
func ByGoods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoodsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEmployeesCount orders the results by employees count.
func ByEmployeesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEmployeesStep(), opts...)
	}
}

// ByEmployees orders the results by employees terms.
func ByEmployees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDutyEmployeesCount orders the results by duty_employees count.
func ByDutyEmployeesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDutyEmployeesStep(), opts...)
	}
}

// ByDutyEmployees orders the results by duty_employees terms.
func ByDutyEmployees(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDutyEmployeesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRentAssetCount orders the results by rent_asset count.
func ByRentAssetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentAssetStep(), opts...)
	}
}

// ByRentAsset orders the results by rent_asset terms.
func ByRentAsset(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentAssetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
	)
}
func newBranchStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BranchInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BranchTable, BranchColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, EmployeeTable, EmployeeColumn),
	)
}
func newAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetTable, AssetColumn),
	)
}
func newAttendancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttendancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttendancesTable, AttendancesColumn),
	)
}
func newExceptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExceptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExceptionsTable, ExceptionsColumn),
	)
}
func newGoodsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoodsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GoodsTable, GoodsColumn),
	)
}
func newEmployeesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EmployeesTable, EmployeesPrimaryKey...),
	)
}
func newDutyEmployeesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DutyEmployeesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DutyEmployeesTable, DutyEmployeesColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
func newRentAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentAssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RentAssetTable, RentAssetColumn),
	)
}
