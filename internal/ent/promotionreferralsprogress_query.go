// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionreferralsprogress"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionReferralsProgressQuery is the builder for querying PromotionReferralsProgress entities.
type PromotionReferralsProgressQuery struct {
	config
	ctx        *QueryContext
	order      []promotionreferralsprogress.OrderOption
	inters     []Interceptor
	predicates []predicate.PromotionReferralsProgress
	withRider  *RiderQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionReferralsProgressQuery builder.
func (prpq *PromotionReferralsProgressQuery) Where(ps ...predicate.PromotionReferralsProgress) *PromotionReferralsProgressQuery {
	prpq.predicates = append(prpq.predicates, ps...)
	return prpq
}

// Limit the number of records to be returned by this query.
func (prpq *PromotionReferralsProgressQuery) Limit(limit int) *PromotionReferralsProgressQuery {
	prpq.ctx.Limit = &limit
	return prpq
}

// Offset to start from.
func (prpq *PromotionReferralsProgressQuery) Offset(offset int) *PromotionReferralsProgressQuery {
	prpq.ctx.Offset = &offset
	return prpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prpq *PromotionReferralsProgressQuery) Unique(unique bool) *PromotionReferralsProgressQuery {
	prpq.ctx.Unique = &unique
	return prpq
}

// Order specifies how the records should be ordered.
func (prpq *PromotionReferralsProgressQuery) Order(o ...promotionreferralsprogress.OrderOption) *PromotionReferralsProgressQuery {
	prpq.order = append(prpq.order, o...)
	return prpq
}

// QueryRider chains the current query on the "rider" edge.
func (prpq *PromotionReferralsProgressQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: prpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionreferralsprogress.Table, promotionreferralsprogress.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionreferralsprogress.RiderTable, promotionreferralsprogress.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(prpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PromotionReferralsProgress entity from the query.
// Returns a *NotFoundError when no PromotionReferralsProgress was found.
func (prpq *PromotionReferralsProgressQuery) First(ctx context.Context) (*PromotionReferralsProgress, error) {
	nodes, err := prpq.Limit(1).All(setContextOp(ctx, prpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionreferralsprogress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) FirstX(ctx context.Context) *PromotionReferralsProgress {
	node, err := prpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionReferralsProgress ID from the query.
// Returns a *NotFoundError when no PromotionReferralsProgress ID was found.
func (prpq *PromotionReferralsProgressQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = prpq.Limit(1).IDs(setContextOp(ctx, prpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionreferralsprogress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := prpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionReferralsProgress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionReferralsProgress entity is found.
// Returns a *NotFoundError when no PromotionReferralsProgress entities are found.
func (prpq *PromotionReferralsProgressQuery) Only(ctx context.Context) (*PromotionReferralsProgress, error) {
	nodes, err := prpq.Limit(2).All(setContextOp(ctx, prpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionreferralsprogress.Label}
	default:
		return nil, &NotSingularError{promotionreferralsprogress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) OnlyX(ctx context.Context) *PromotionReferralsProgress {
	node, err := prpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionReferralsProgress ID in the query.
// Returns a *NotSingularError when more than one PromotionReferralsProgress ID is found.
// Returns a *NotFoundError when no entities are found.
func (prpq *PromotionReferralsProgressQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = prpq.Limit(2).IDs(setContextOp(ctx, prpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionreferralsprogress.Label}
	default:
		err = &NotSingularError{promotionreferralsprogress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := prpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionReferralsProgresses.
func (prpq *PromotionReferralsProgressQuery) All(ctx context.Context) ([]*PromotionReferralsProgress, error) {
	ctx = setContextOp(ctx, prpq.ctx, "All")
	if err := prpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionReferralsProgress, *PromotionReferralsProgressQuery]()
	return withInterceptors[[]*PromotionReferralsProgress](ctx, prpq, qr, prpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) AllX(ctx context.Context) []*PromotionReferralsProgress {
	nodes, err := prpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionReferralsProgress IDs.
func (prpq *PromotionReferralsProgressQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if prpq.ctx.Unique == nil && prpq.path != nil {
		prpq.Unique(true)
	}
	ctx = setContextOp(ctx, prpq.ctx, "IDs")
	if err = prpq.Select(promotionreferralsprogress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := prpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prpq *PromotionReferralsProgressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, prpq.ctx, "Count")
	if err := prpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, prpq, querierCount[*PromotionReferralsProgressQuery](), prpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) CountX(ctx context.Context) int {
	count, err := prpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prpq *PromotionReferralsProgressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, prpq.ctx, "Exist")
	switch _, err := prpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (prpq *PromotionReferralsProgressQuery) ExistX(ctx context.Context) bool {
	exist, err := prpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionReferralsProgressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prpq *PromotionReferralsProgressQuery) Clone() *PromotionReferralsProgressQuery {
	if prpq == nil {
		return nil
	}
	return &PromotionReferralsProgressQuery{
		config:     prpq.config,
		ctx:        prpq.ctx.Clone(),
		order:      append([]promotionreferralsprogress.OrderOption{}, prpq.order...),
		inters:     append([]Interceptor{}, prpq.inters...),
		predicates: append([]predicate.PromotionReferralsProgress{}, prpq.predicates...),
		withRider:  prpq.withRider.Clone(),
		// clone intermediate query.
		sql:  prpq.sql.Clone(),
		path: prpq.path,
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (prpq *PromotionReferralsProgressQuery) WithRider(opts ...func(*RiderQuery)) *PromotionReferralsProgressQuery {
	query := (&RiderClient{config: prpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prpq.withRider = query
	return prpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionReferralsProgress.Query().
//		GroupBy(promotionreferralsprogress.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (prpq *PromotionReferralsProgressQuery) GroupBy(field string, fields ...string) *PromotionReferralsProgressGroupBy {
	prpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionReferralsProgressGroupBy{build: prpq}
	grbuild.flds = &prpq.ctx.Fields
	grbuild.label = promotionreferralsprogress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionReferralsProgress.Query().
//		Select(promotionreferralsprogress.FieldCreatedAt).
//		Scan(ctx, &v)
func (prpq *PromotionReferralsProgressQuery) Select(fields ...string) *PromotionReferralsProgressSelect {
	prpq.ctx.Fields = append(prpq.ctx.Fields, fields...)
	sbuild := &PromotionReferralsProgressSelect{PromotionReferralsProgressQuery: prpq}
	sbuild.label = promotionreferralsprogress.Label
	sbuild.flds, sbuild.scan = &prpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionReferralsProgressSelect configured with the given aggregations.
func (prpq *PromotionReferralsProgressQuery) Aggregate(fns ...AggregateFunc) *PromotionReferralsProgressSelect {
	return prpq.Select().Aggregate(fns...)
}

func (prpq *PromotionReferralsProgressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range prpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, prpq); err != nil {
				return err
			}
		}
	}
	for _, f := range prpq.ctx.Fields {
		if !promotionreferralsprogress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if prpq.path != nil {
		prev, err := prpq.path(ctx)
		if err != nil {
			return err
		}
		prpq.sql = prev
	}
	return nil
}

func (prpq *PromotionReferralsProgressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionReferralsProgress, error) {
	var (
		nodes       = []*PromotionReferralsProgress{}
		_spec       = prpq.querySpec()
		loadedTypes = [1]bool{
			prpq.withRider != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionReferralsProgress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionReferralsProgress{config: prpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(prpq.modifiers) > 0 {
		_spec.Modifiers = prpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := prpq.withRider; query != nil {
		if err := prpq.loadRider(ctx, query, nodes, nil,
			func(n *PromotionReferralsProgress, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prpq *PromotionReferralsProgressQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*PromotionReferralsProgress, init func(*PromotionReferralsProgress), assign func(*PromotionReferralsProgress, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionReferralsProgress)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (prpq *PromotionReferralsProgressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prpq.querySpec()
	if len(prpq.modifiers) > 0 {
		_spec.Modifiers = prpq.modifiers
	}
	_spec.Node.Columns = prpq.ctx.Fields
	if len(prpq.ctx.Fields) > 0 {
		_spec.Unique = prpq.ctx.Unique != nil && *prpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, prpq.driver, _spec)
}

func (prpq *PromotionReferralsProgressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionreferralsprogress.Table, promotionreferralsprogress.Columns, sqlgraph.NewFieldSpec(promotionreferralsprogress.FieldID, field.TypeUint64))
	_spec.From = prpq.sql
	if unique := prpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if prpq.path != nil {
		_spec.Unique = true
	}
	if fields := prpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionreferralsprogress.FieldID)
		for i := range fields {
			if fields[i] != promotionreferralsprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if prpq.withRider != nil {
			_spec.Node.AddColumnOnce(promotionreferralsprogress.FieldRiderID)
		}
	}
	if ps := prpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prpq *PromotionReferralsProgressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prpq.driver.Dialect())
	t1 := builder.Table(promotionreferralsprogress.Table)
	columns := prpq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionreferralsprogress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prpq.sql != nil {
		selector = prpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prpq.ctx.Unique != nil && *prpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range prpq.modifiers {
		m(selector)
	}
	for _, p := range prpq.predicates {
		p(selector)
	}
	for _, p := range prpq.order {
		p(selector)
	}
	if offset := prpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (prpq *PromotionReferralsProgressQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionReferralsProgressSelect {
	prpq.modifiers = append(prpq.modifiers, modifiers...)
	return prpq.Select()
}

type PromotionReferralsProgressQueryWith string

var (
	PromotionReferralsProgressQueryWithRider PromotionReferralsProgressQueryWith = "Rider"
)

func (prpq *PromotionReferralsProgressQuery) With(withEdges ...PromotionReferralsProgressQueryWith) *PromotionReferralsProgressQuery {
	for _, v := range withEdges {
		switch v {
		case PromotionReferralsProgressQueryWithRider:
			prpq.WithRider()
		}
	}
	return prpq
}

// PromotionReferralsProgressGroupBy is the group-by builder for PromotionReferralsProgress entities.
type PromotionReferralsProgressGroupBy struct {
	selector
	build *PromotionReferralsProgressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prpgb *PromotionReferralsProgressGroupBy) Aggregate(fns ...AggregateFunc) *PromotionReferralsProgressGroupBy {
	prpgb.fns = append(prpgb.fns, fns...)
	return prpgb
}

// Scan applies the selector query and scans the result into the given value.
func (prpgb *PromotionReferralsProgressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prpgb.build.ctx, "GroupBy")
	if err := prpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionReferralsProgressQuery, *PromotionReferralsProgressGroupBy](ctx, prpgb.build, prpgb, prpgb.build.inters, v)
}

func (prpgb *PromotionReferralsProgressGroupBy) sqlScan(ctx context.Context, root *PromotionReferralsProgressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(prpgb.fns))
	for _, fn := range prpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*prpgb.flds)+len(prpgb.fns))
		for _, f := range *prpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*prpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionReferralsProgressSelect is the builder for selecting fields of PromotionReferralsProgress entities.
type PromotionReferralsProgressSelect struct {
	*PromotionReferralsProgressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prps *PromotionReferralsProgressSelect) Aggregate(fns ...AggregateFunc) *PromotionReferralsProgressSelect {
	prps.fns = append(prps.fns, fns...)
	return prps
}

// Scan applies the selector query and scans the result into the given value.
func (prps *PromotionReferralsProgressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prps.ctx, "Select")
	if err := prps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionReferralsProgressQuery, *PromotionReferralsProgressSelect](ctx, prps.PromotionReferralsProgressQuery, prps, prps.inters, v)
}

func (prps *PromotionReferralsProgressSelect) sqlScan(ctx context.Context, root *PromotionReferralsProgressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(prps.fns))
	for _, fn := range prps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*prps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (prps *PromotionReferralsProgressSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionReferralsProgressSelect {
	prps.modifiers = append(prps.modifiers, modifiers...)
	return prps
}
