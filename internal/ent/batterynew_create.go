// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterynew"
	"github.com/auroraride/aurservd/internal/ent/city"
)

// BatteryNewCreate is the builder for creating a BatteryNew entity.
type BatteryNewCreate struct {
	config
	mutation *BatteryNewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bnc *BatteryNewCreate) SetCreatedAt(t time.Time) *BatteryNewCreate {
	bnc.mutation.SetCreatedAt(t)
	return bnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableCreatedAt(t *time.Time) *BatteryNewCreate {
	if t != nil {
		bnc.SetCreatedAt(*t)
	}
	return bnc
}

// SetUpdatedAt sets the "updated_at" field.
func (bnc *BatteryNewCreate) SetUpdatedAt(t time.Time) *BatteryNewCreate {
	bnc.mutation.SetUpdatedAt(t)
	return bnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableUpdatedAt(t *time.Time) *BatteryNewCreate {
	if t != nil {
		bnc.SetUpdatedAt(*t)
	}
	return bnc
}

// SetDeletedAt sets the "deleted_at" field.
func (bnc *BatteryNewCreate) SetDeletedAt(t time.Time) *BatteryNewCreate {
	bnc.mutation.SetDeletedAt(t)
	return bnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableDeletedAt(t *time.Time) *BatteryNewCreate {
	if t != nil {
		bnc.SetDeletedAt(*t)
	}
	return bnc
}

// SetCreator sets the "creator" field.
func (bnc *BatteryNewCreate) SetCreator(m *model.Modifier) *BatteryNewCreate {
	bnc.mutation.SetCreator(m)
	return bnc
}

// SetLastModifier sets the "last_modifier" field.
func (bnc *BatteryNewCreate) SetLastModifier(m *model.Modifier) *BatteryNewCreate {
	bnc.mutation.SetLastModifier(m)
	return bnc
}

// SetRemark sets the "remark" field.
func (bnc *BatteryNewCreate) SetRemark(s string) *BatteryNewCreate {
	bnc.mutation.SetRemark(s)
	return bnc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableRemark(s *string) *BatteryNewCreate {
	if s != nil {
		bnc.SetRemark(*s)
	}
	return bnc
}

// SetCityID sets the "city_id" field.
func (bnc *BatteryNewCreate) SetCityID(u uint64) *BatteryNewCreate {
	bnc.mutation.SetCityID(u)
	return bnc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableCityID(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetCityID(*u)
	}
	return bnc
}

// SetSn sets the "sn" field.
func (bnc *BatteryNewCreate) SetSn(s string) *BatteryNewCreate {
	bnc.mutation.SetSn(s)
	return bnc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (bnc *BatteryNewCreate) SetEnterpriseID(u uint64) *BatteryNewCreate {
	bnc.mutation.SetEnterpriseID(u)
	return bnc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableEnterpriseID(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetEnterpriseID(*u)
	}
	return bnc
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (bnc *BatteryNewCreate) SetAssetLocationsType(u uint8) *BatteryNewCreate {
	bnc.mutation.SetAssetLocationsType(u)
	return bnc
}

// SetNillableAssetLocationsType sets the "asset_locations_type" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableAssetLocationsType(u *uint8) *BatteryNewCreate {
	if u != nil {
		bnc.SetAssetLocationsType(*u)
	}
	return bnc
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (bnc *BatteryNewCreate) SetAssetLocationsID(u uint64) *BatteryNewCreate {
	bnc.mutation.SetAssetLocationsID(u)
	return bnc
}

// SetAssetLocations sets the "asset_locations" field.
func (bnc *BatteryNewCreate) SetAssetLocations(s string) *BatteryNewCreate {
	bnc.mutation.SetAssetLocations(s)
	return bnc
}

// SetNillableAssetLocations sets the "asset_locations" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableAssetLocations(s *string) *BatteryNewCreate {
	if s != nil {
		bnc.SetAssetLocations(*s)
	}
	return bnc
}

// SetBrand sets the "brand" field.
func (bnc *BatteryNewCreate) SetBrand(s string) *BatteryNewCreate {
	bnc.mutation.SetBrand(s)
	return bnc
}

// SetEnable sets the "enable" field.
func (bnc *BatteryNewCreate) SetEnable(b bool) *BatteryNewCreate {
	bnc.mutation.SetEnable(b)
	return bnc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableEnable(b *bool) *BatteryNewCreate {
	if b != nil {
		bnc.SetEnable(*b)
	}
	return bnc
}

// SetModel sets the "model" field.
func (bnc *BatteryNewCreate) SetModel(s string) *BatteryNewCreate {
	bnc.mutation.SetModel(s)
	return bnc
}

// SetAssetStatus sets the "asset_status" field.
func (bnc *BatteryNewCreate) SetAssetStatus(u uint8) *BatteryNewCreate {
	bnc.mutation.SetAssetStatus(u)
	return bnc
}

// SetNillableAssetStatus sets the "asset_status" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableAssetStatus(u *uint8) *BatteryNewCreate {
	if u != nil {
		bnc.SetAssetStatus(*u)
	}
	return bnc
}

// SetStatus sets the "status" field.
func (bnc *BatteryNewCreate) SetStatus(u uint64) *BatteryNewCreate {
	bnc.mutation.SetStatus(u)
	return bnc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableStatus(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetStatus(*u)
	}
	return bnc
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (bnc *BatteryNewCreate) SetScrapReasonType(u uint8) *BatteryNewCreate {
	bnc.mutation.SetScrapReasonType(u)
	return bnc
}

// SetNillableScrapReasonType sets the "scrap_reason_type" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableScrapReasonType(u *uint8) *BatteryNewCreate {
	if u != nil {
		bnc.SetScrapReasonType(*u)
	}
	return bnc
}

// SetScrapAt sets the "scrap_at" field.
func (bnc *BatteryNewCreate) SetScrapAt(t time.Time) *BatteryNewCreate {
	bnc.mutation.SetScrapAt(t)
	return bnc
}

// SetNillableScrapAt sets the "scrap_at" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableScrapAt(t *time.Time) *BatteryNewCreate {
	if t != nil {
		bnc.SetScrapAt(*t)
	}
	return bnc
}

// SetOperateID sets the "operate_id" field.
func (bnc *BatteryNewCreate) SetOperateID(u uint64) *BatteryNewCreate {
	bnc.mutation.SetOperateID(u)
	return bnc
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableOperateID(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetOperateID(*u)
	}
	return bnc
}

// SetOperateRole sets the "operate_role" field.
func (bnc *BatteryNewCreate) SetOperateRole(u uint64) *BatteryNewCreate {
	bnc.mutation.SetOperateRole(u)
	return bnc
}

// SetNillableOperateRole sets the "operate_role" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableOperateRole(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetOperateRole(*u)
	}
	return bnc
}

// SetOperateUser sets the "operate_user" field.
func (bnc *BatteryNewCreate) SetOperateUser(s string) *BatteryNewCreate {
	bnc.mutation.SetOperateUser(s)
	return bnc
}

// SetNillableOperateUser sets the "operate_user" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableOperateUser(s *string) *BatteryNewCreate {
	if s != nil {
		bnc.SetOperateUser(*s)
	}
	return bnc
}

// SetWarehouseID sets the "warehouse_id" field.
func (bnc *BatteryNewCreate) SetWarehouseID(u uint64) *BatteryNewCreate {
	bnc.mutation.SetWarehouseID(u)
	return bnc
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (bnc *BatteryNewCreate) SetNillableWarehouseID(u *uint64) *BatteryNewCreate {
	if u != nil {
		bnc.SetWarehouseID(*u)
	}
	return bnc
}

// SetCity sets the "city" edge to the City entity.
func (bnc *BatteryNewCreate) SetCity(c *City) *BatteryNewCreate {
	return bnc.SetCityID(c.ID)
}

// Mutation returns the BatteryNewMutation object of the builder.
func (bnc *BatteryNewCreate) Mutation() *BatteryNewMutation {
	return bnc.mutation
}

// Save creates the BatteryNew in the database.
func (bnc *BatteryNewCreate) Save(ctx context.Context) (*BatteryNew, error) {
	if err := bnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bnc.sqlSave, bnc.mutation, bnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bnc *BatteryNewCreate) SaveX(ctx context.Context) *BatteryNew {
	v, err := bnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bnc *BatteryNewCreate) Exec(ctx context.Context) error {
	_, err := bnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnc *BatteryNewCreate) ExecX(ctx context.Context) {
	if err := bnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnc *BatteryNewCreate) defaults() error {
	if _, ok := bnc.mutation.CreatedAt(); !ok {
		if batterynew.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterynew.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := batterynew.DefaultCreatedAt()
		bnc.mutation.SetCreatedAt(v)
	}
	if _, ok := bnc.mutation.UpdatedAt(); !ok {
		if batterynew.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterynew.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterynew.DefaultUpdatedAt()
		bnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bnc.mutation.AssetLocationsType(); !ok {
		v := batterynew.DefaultAssetLocationsType
		bnc.mutation.SetAssetLocationsType(v)
	}
	if _, ok := bnc.mutation.Enable(); !ok {
		v := batterynew.DefaultEnable
		bnc.mutation.SetEnable(v)
	}
	if _, ok := bnc.mutation.AssetStatus(); !ok {
		v := batterynew.DefaultAssetStatus
		bnc.mutation.SetAssetStatus(v)
	}
	if _, ok := bnc.mutation.Status(); !ok {
		v := batterynew.DefaultStatus
		bnc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bnc *BatteryNewCreate) check() error {
	if _, ok := bnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryNew.created_at"`)}
	}
	if _, ok := bnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatteryNew.updated_at"`)}
	}
	if _, ok := bnc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "BatteryNew.sn"`)}
	}
	if _, ok := bnc.mutation.AssetLocationsType(); !ok {
		return &ValidationError{Name: "asset_locations_type", err: errors.New(`ent: missing required field "BatteryNew.asset_locations_type"`)}
	}
	if _, ok := bnc.mutation.AssetLocationsID(); !ok {
		return &ValidationError{Name: "asset_locations_id", err: errors.New(`ent: missing required field "BatteryNew.asset_locations_id"`)}
	}
	if _, ok := bnc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required field "BatteryNew.brand"`)}
	}
	if _, ok := bnc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "BatteryNew.enable"`)}
	}
	if _, ok := bnc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "BatteryNew.model"`)}
	}
	if _, ok := bnc.mutation.AssetStatus(); !ok {
		return &ValidationError{Name: "asset_status", err: errors.New(`ent: missing required field "BatteryNew.asset_status"`)}
	}
	if _, ok := bnc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BatteryNew.status"`)}
	}
	return nil
}

func (bnc *BatteryNewCreate) sqlSave(ctx context.Context) (*BatteryNew, error) {
	if err := bnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bnc.mutation.id = &_node.ID
	bnc.mutation.done = true
	return _node, nil
}

func (bnc *BatteryNewCreate) createSpec() (*BatteryNew, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryNew{config: bnc.config}
		_spec = sqlgraph.NewCreateSpec(batterynew.Table, sqlgraph.NewFieldSpec(batterynew.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bnc.conflict
	if value, ok := bnc.mutation.CreatedAt(); ok {
		_spec.SetField(batterynew.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bnc.mutation.UpdatedAt(); ok {
		_spec.SetField(batterynew.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bnc.mutation.DeletedAt(); ok {
		_spec.SetField(batterynew.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bnc.mutation.Creator(); ok {
		_spec.SetField(batterynew.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := bnc.mutation.LastModifier(); ok {
		_spec.SetField(batterynew.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := bnc.mutation.Remark(); ok {
		_spec.SetField(batterynew.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := bnc.mutation.Sn(); ok {
		_spec.SetField(batterynew.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := bnc.mutation.EnterpriseID(); ok {
		_spec.SetField(batterynew.FieldEnterpriseID, field.TypeUint64, value)
		_node.EnterpriseID = &value
	}
	if value, ok := bnc.mutation.AssetLocationsType(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsType, field.TypeUint8, value)
		_node.AssetLocationsType = value
	}
	if value, ok := bnc.mutation.AssetLocationsID(); ok {
		_spec.SetField(batterynew.FieldAssetLocationsID, field.TypeUint64, value)
		_node.AssetLocationsID = value
	}
	if value, ok := bnc.mutation.AssetLocations(); ok {
		_spec.SetField(batterynew.FieldAssetLocations, field.TypeString, value)
		_node.AssetLocations = value
	}
	if value, ok := bnc.mutation.Brand(); ok {
		_spec.SetField(batterynew.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := bnc.mutation.Enable(); ok {
		_spec.SetField(batterynew.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := bnc.mutation.Model(); ok {
		_spec.SetField(batterynew.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := bnc.mutation.AssetStatus(); ok {
		_spec.SetField(batterynew.FieldAssetStatus, field.TypeUint8, value)
		_node.AssetStatus = value
	}
	if value, ok := bnc.mutation.Status(); ok {
		_spec.SetField(batterynew.FieldStatus, field.TypeUint64, value)
		_node.Status = value
	}
	if value, ok := bnc.mutation.ScrapReasonType(); ok {
		_spec.SetField(batterynew.FieldScrapReasonType, field.TypeUint8, value)
		_node.ScrapReasonType = value
	}
	if value, ok := bnc.mutation.ScrapAt(); ok {
		_spec.SetField(batterynew.FieldScrapAt, field.TypeTime, value)
		_node.ScrapAt = value
	}
	if value, ok := bnc.mutation.OperateID(); ok {
		_spec.SetField(batterynew.FieldOperateID, field.TypeUint64, value)
		_node.OperateID = value
	}
	if value, ok := bnc.mutation.OperateRole(); ok {
		_spec.SetField(batterynew.FieldOperateRole, field.TypeUint64, value)
		_node.OperateRole = value
	}
	if value, ok := bnc.mutation.OperateUser(); ok {
		_spec.SetField(batterynew.FieldOperateUser, field.TypeString, value)
		_node.OperateUser = value
	}
	if value, ok := bnc.mutation.WarehouseID(); ok {
		_spec.SetField(batterynew.FieldWarehouseID, field.TypeUint64, value)
		_node.WarehouseID = value
	}
	if nodes := bnc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batterynew.CityTable,
			Columns: []string{batterynew.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryNew.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bnc *BatteryNewCreate) OnConflict(opts ...sql.ConflictOption) *BatteryNewUpsertOne {
	bnc.conflict = opts
	return &BatteryNewUpsertOne{
		create: bnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bnc *BatteryNewCreate) OnConflictColumns(columns ...string) *BatteryNewUpsertOne {
	bnc.conflict = append(bnc.conflict, sql.ConflictColumns(columns...))
	return &BatteryNewUpsertOne{
		create: bnc,
	}
}

type (
	// BatteryNewUpsertOne is the builder for "upsert"-ing
	//  one BatteryNew node.
	BatteryNewUpsertOne struct {
		create *BatteryNewCreate
	}

	// BatteryNewUpsert is the "OnConflict" setter.
	BatteryNewUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryNewUpsert) SetUpdatedAt(v time.Time) *BatteryNewUpsert {
	u.Set(batterynew.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateUpdatedAt() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryNewUpsert) SetDeletedAt(v time.Time) *BatteryNewUpsert {
	u.Set(batterynew.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateDeletedAt() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryNewUpsert) ClearDeletedAt() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryNewUpsert) SetLastModifier(v *model.Modifier) *BatteryNewUpsert {
	u.Set(batterynew.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateLastModifier() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryNewUpsert) ClearLastModifier() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BatteryNewUpsert) SetRemark(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateRemark() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryNewUpsert) ClearRemark() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *BatteryNewUpsert) SetCityID(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateCityID() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryNewUpsert) ClearCityID() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldCityID)
	return u
}

// SetSn sets the "sn" field.
func (u *BatteryNewUpsert) SetSn(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateSn() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldSn)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BatteryNewUpsert) SetEnterpriseID(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateEnterpriseID() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldEnterpriseID)
	return u
}

// AddEnterpriseID adds v to the "enterprise_id" field.
func (u *BatteryNewUpsert) AddEnterpriseID(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldEnterpriseID, v)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BatteryNewUpsert) ClearEnterpriseID() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldEnterpriseID)
	return u
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (u *BatteryNewUpsert) SetAssetLocationsType(v uint8) *BatteryNewUpsert {
	u.Set(batterynew.FieldAssetLocationsType, v)
	return u
}

// UpdateAssetLocationsType sets the "asset_locations_type" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateAssetLocationsType() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldAssetLocationsType)
	return u
}

// AddAssetLocationsType adds v to the "asset_locations_type" field.
func (u *BatteryNewUpsert) AddAssetLocationsType(v uint8) *BatteryNewUpsert {
	u.Add(batterynew.FieldAssetLocationsType, v)
	return u
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (u *BatteryNewUpsert) SetAssetLocationsID(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldAssetLocationsID, v)
	return u
}

// UpdateAssetLocationsID sets the "asset_locations_id" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateAssetLocationsID() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldAssetLocationsID)
	return u
}

// AddAssetLocationsID adds v to the "asset_locations_id" field.
func (u *BatteryNewUpsert) AddAssetLocationsID(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldAssetLocationsID, v)
	return u
}

// SetAssetLocations sets the "asset_locations" field.
func (u *BatteryNewUpsert) SetAssetLocations(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldAssetLocations, v)
	return u
}

// UpdateAssetLocations sets the "asset_locations" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateAssetLocations() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldAssetLocations)
	return u
}

// ClearAssetLocations clears the value of the "asset_locations" field.
func (u *BatteryNewUpsert) ClearAssetLocations() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldAssetLocations)
	return u
}

// SetBrand sets the "brand" field.
func (u *BatteryNewUpsert) SetBrand(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldBrand, v)
	return u
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateBrand() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldBrand)
	return u
}

// SetEnable sets the "enable" field.
func (u *BatteryNewUpsert) SetEnable(v bool) *BatteryNewUpsert {
	u.Set(batterynew.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateEnable() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldEnable)
	return u
}

// SetModel sets the "model" field.
func (u *BatteryNewUpsert) SetModel(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateModel() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldModel)
	return u
}

// SetAssetStatus sets the "asset_status" field.
func (u *BatteryNewUpsert) SetAssetStatus(v uint8) *BatteryNewUpsert {
	u.Set(batterynew.FieldAssetStatus, v)
	return u
}

// UpdateAssetStatus sets the "asset_status" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateAssetStatus() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldAssetStatus)
	return u
}

// AddAssetStatus adds v to the "asset_status" field.
func (u *BatteryNewUpsert) AddAssetStatus(v uint8) *BatteryNewUpsert {
	u.Add(batterynew.FieldAssetStatus, v)
	return u
}

// SetStatus sets the "status" field.
func (u *BatteryNewUpsert) SetStatus(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateStatus() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *BatteryNewUpsert) AddStatus(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldStatus, v)
	return u
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *BatteryNewUpsert) SetScrapReasonType(v uint8) *BatteryNewUpsert {
	u.Set(batterynew.FieldScrapReasonType, v)
	return u
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateScrapReasonType() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldScrapReasonType)
	return u
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *BatteryNewUpsert) AddScrapReasonType(v uint8) *BatteryNewUpsert {
	u.Add(batterynew.FieldScrapReasonType, v)
	return u
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *BatteryNewUpsert) ClearScrapReasonType() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldScrapReasonType)
	return u
}

// SetScrapAt sets the "scrap_at" field.
func (u *BatteryNewUpsert) SetScrapAt(v time.Time) *BatteryNewUpsert {
	u.Set(batterynew.FieldScrapAt, v)
	return u
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateScrapAt() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldScrapAt)
	return u
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *BatteryNewUpsert) ClearScrapAt() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldScrapAt)
	return u
}

// SetOperateID sets the "operate_id" field.
func (u *BatteryNewUpsert) SetOperateID(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldOperateID, v)
	return u
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateOperateID() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldOperateID)
	return u
}

// AddOperateID adds v to the "operate_id" field.
func (u *BatteryNewUpsert) AddOperateID(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldOperateID, v)
	return u
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *BatteryNewUpsert) ClearOperateID() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldOperateID)
	return u
}

// SetOperateRole sets the "operate_role" field.
func (u *BatteryNewUpsert) SetOperateRole(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldOperateRole, v)
	return u
}

// UpdateOperateRole sets the "operate_role" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateOperateRole() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldOperateRole)
	return u
}

// AddOperateRole adds v to the "operate_role" field.
func (u *BatteryNewUpsert) AddOperateRole(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldOperateRole, v)
	return u
}

// ClearOperateRole clears the value of the "operate_role" field.
func (u *BatteryNewUpsert) ClearOperateRole() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldOperateRole)
	return u
}

// SetOperateUser sets the "operate_user" field.
func (u *BatteryNewUpsert) SetOperateUser(v string) *BatteryNewUpsert {
	u.Set(batterynew.FieldOperateUser, v)
	return u
}

// UpdateOperateUser sets the "operate_user" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateOperateUser() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldOperateUser)
	return u
}

// ClearOperateUser clears the value of the "operate_user" field.
func (u *BatteryNewUpsert) ClearOperateUser() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldOperateUser)
	return u
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *BatteryNewUpsert) SetWarehouseID(v uint64) *BatteryNewUpsert {
	u.Set(batterynew.FieldWarehouseID, v)
	return u
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *BatteryNewUpsert) UpdateWarehouseID() *BatteryNewUpsert {
	u.SetExcluded(batterynew.FieldWarehouseID)
	return u
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *BatteryNewUpsert) AddWarehouseID(v uint64) *BatteryNewUpsert {
	u.Add(batterynew.FieldWarehouseID, v)
	return u
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (u *BatteryNewUpsert) ClearWarehouseID() *BatteryNewUpsert {
	u.SetNull(batterynew.FieldWarehouseID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryNewUpsertOne) UpdateNewValues() *BatteryNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batterynew.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(batterynew.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryNewUpsertOne) Ignore() *BatteryNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryNewUpsertOne) DoNothing() *BatteryNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryNewCreate.OnConflict
// documentation for more info.
func (u *BatteryNewUpsertOne) Update(set func(*BatteryNewUpsert)) *BatteryNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryNewUpsertOne) SetUpdatedAt(v time.Time) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateUpdatedAt() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryNewUpsertOne) SetDeletedAt(v time.Time) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateDeletedAt() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryNewUpsertOne) ClearDeletedAt() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryNewUpsertOne) SetLastModifier(v *model.Modifier) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateLastModifier() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryNewUpsertOne) ClearLastModifier() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryNewUpsertOne) SetRemark(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateRemark() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryNewUpsertOne) ClearRemark() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *BatteryNewUpsertOne) SetCityID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateCityID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryNewUpsertOne) ClearCityID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearCityID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryNewUpsertOne) SetSn(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateSn() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateSn()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BatteryNewUpsertOne) SetEnterpriseID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetEnterpriseID(v)
	})
}

// AddEnterpriseID adds v to the "enterprise_id" field.
func (u *BatteryNewUpsertOne) AddEnterpriseID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateEnterpriseID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BatteryNewUpsertOne) ClearEnterpriseID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (u *BatteryNewUpsertOne) SetAssetLocationsType(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocationsType(v)
	})
}

// AddAssetLocationsType adds v to the "asset_locations_type" field.
func (u *BatteryNewUpsertOne) AddAssetLocationsType(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetLocationsType(v)
	})
}

// UpdateAssetLocationsType sets the "asset_locations_type" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateAssetLocationsType() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocationsType()
	})
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (u *BatteryNewUpsertOne) SetAssetLocationsID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocationsID(v)
	})
}

// AddAssetLocationsID adds v to the "asset_locations_id" field.
func (u *BatteryNewUpsertOne) AddAssetLocationsID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetLocationsID(v)
	})
}

// UpdateAssetLocationsID sets the "asset_locations_id" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateAssetLocationsID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocationsID()
	})
}

// SetAssetLocations sets the "asset_locations" field.
func (u *BatteryNewUpsertOne) SetAssetLocations(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocations(v)
	})
}

// UpdateAssetLocations sets the "asset_locations" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateAssetLocations() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocations()
	})
}

// ClearAssetLocations clears the value of the "asset_locations" field.
func (u *BatteryNewUpsertOne) ClearAssetLocations() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearAssetLocations()
	})
}

// SetBrand sets the "brand" field.
func (u *BatteryNewUpsertOne) SetBrand(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateBrand() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateBrand()
	})
}

// SetEnable sets the "enable" field.
func (u *BatteryNewUpsertOne) SetEnable(v bool) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateEnable() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateEnable()
	})
}

// SetModel sets the "model" field.
func (u *BatteryNewUpsertOne) SetModel(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateModel() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateModel()
	})
}

// SetAssetStatus sets the "asset_status" field.
func (u *BatteryNewUpsertOne) SetAssetStatus(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetStatus(v)
	})
}

// AddAssetStatus adds v to the "asset_status" field.
func (u *BatteryNewUpsertOne) AddAssetStatus(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetStatus(v)
	})
}

// UpdateAssetStatus sets the "asset_status" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateAssetStatus() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetStatus()
	})
}

// SetStatus sets the "status" field.
func (u *BatteryNewUpsertOne) SetStatus(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BatteryNewUpsertOne) AddStatus(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateStatus() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateStatus()
	})
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *BatteryNewUpsertOne) SetScrapReasonType(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetScrapReasonType(v)
	})
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *BatteryNewUpsertOne) AddScrapReasonType(v uint8) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddScrapReasonType(v)
	})
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateScrapReasonType() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateScrapReasonType()
	})
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *BatteryNewUpsertOne) ClearScrapReasonType() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearScrapReasonType()
	})
}

// SetScrapAt sets the "scrap_at" field.
func (u *BatteryNewUpsertOne) SetScrapAt(v time.Time) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetScrapAt(v)
	})
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateScrapAt() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateScrapAt()
	})
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *BatteryNewUpsertOne) ClearScrapAt() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearScrapAt()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *BatteryNewUpsertOne) SetOperateID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateID(v)
	})
}

// AddOperateID adds v to the "operate_id" field.
func (u *BatteryNewUpsertOne) AddOperateID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateOperateID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *BatteryNewUpsertOne) ClearOperateID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateRole sets the "operate_role" field.
func (u *BatteryNewUpsertOne) SetOperateRole(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateRole(v)
	})
}

// AddOperateRole adds v to the "operate_role" field.
func (u *BatteryNewUpsertOne) AddOperateRole(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddOperateRole(v)
	})
}

// UpdateOperateRole sets the "operate_role" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateOperateRole() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateRole()
	})
}

// ClearOperateRole clears the value of the "operate_role" field.
func (u *BatteryNewUpsertOne) ClearOperateRole() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateRole()
	})
}

// SetOperateUser sets the "operate_user" field.
func (u *BatteryNewUpsertOne) SetOperateUser(v string) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateUser(v)
	})
}

// UpdateOperateUser sets the "operate_user" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateOperateUser() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateUser()
	})
}

// ClearOperateUser clears the value of the "operate_user" field.
func (u *BatteryNewUpsertOne) ClearOperateUser() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateUser()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *BatteryNewUpsertOne) SetWarehouseID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *BatteryNewUpsertOne) AddWarehouseID(v uint64) *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *BatteryNewUpsertOne) UpdateWarehouseID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateWarehouseID()
	})
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (u *BatteryNewUpsertOne) ClearWarehouseID() *BatteryNewUpsertOne {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearWarehouseID()
	})
}

// Exec executes the query.
func (u *BatteryNewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryNewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryNewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryNewUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryNewUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryNewCreateBulk is the builder for creating many BatteryNew entities in bulk.
type BatteryNewCreateBulk struct {
	config
	err      error
	builders []*BatteryNewCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryNew entities in the database.
func (bncb *BatteryNewCreateBulk) Save(ctx context.Context) ([]*BatteryNew, error) {
	if bncb.err != nil {
		return nil, bncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bncb.builders))
	nodes := make([]*BatteryNew, len(bncb.builders))
	mutators := make([]Mutator, len(bncb.builders))
	for i := range bncb.builders {
		func(i int, root context.Context) {
			builder := bncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryNewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bncb *BatteryNewCreateBulk) SaveX(ctx context.Context) []*BatteryNew {
	v, err := bncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bncb *BatteryNewCreateBulk) Exec(ctx context.Context) error {
	_, err := bncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bncb *BatteryNewCreateBulk) ExecX(ctx context.Context) {
	if err := bncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryNew.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bncb *BatteryNewCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryNewUpsertBulk {
	bncb.conflict = opts
	return &BatteryNewUpsertBulk{
		create: bncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bncb *BatteryNewCreateBulk) OnConflictColumns(columns ...string) *BatteryNewUpsertBulk {
	bncb.conflict = append(bncb.conflict, sql.ConflictColumns(columns...))
	return &BatteryNewUpsertBulk{
		create: bncb,
	}
}

// BatteryNewUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryNew nodes.
type BatteryNewUpsertBulk struct {
	create *BatteryNewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryNewUpsertBulk) UpdateNewValues() *BatteryNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batterynew.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(batterynew.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryNew.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryNewUpsertBulk) Ignore() *BatteryNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryNewUpsertBulk) DoNothing() *BatteryNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryNewCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryNewUpsertBulk) Update(set func(*BatteryNewUpsert)) *BatteryNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryNewUpsertBulk) SetUpdatedAt(v time.Time) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateUpdatedAt() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryNewUpsertBulk) SetDeletedAt(v time.Time) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateDeletedAt() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryNewUpsertBulk) ClearDeletedAt() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryNewUpsertBulk) SetLastModifier(v *model.Modifier) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateLastModifier() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryNewUpsertBulk) ClearLastModifier() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryNewUpsertBulk) SetRemark(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateRemark() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryNewUpsertBulk) ClearRemark() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *BatteryNewUpsertBulk) SetCityID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateCityID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *BatteryNewUpsertBulk) ClearCityID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearCityID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryNewUpsertBulk) SetSn(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateSn() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateSn()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BatteryNewUpsertBulk) SetEnterpriseID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetEnterpriseID(v)
	})
}

// AddEnterpriseID adds v to the "enterprise_id" field.
func (u *BatteryNewUpsertBulk) AddEnterpriseID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateEnterpriseID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BatteryNewUpsertBulk) ClearEnterpriseID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetAssetLocationsType sets the "asset_locations_type" field.
func (u *BatteryNewUpsertBulk) SetAssetLocationsType(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocationsType(v)
	})
}

// AddAssetLocationsType adds v to the "asset_locations_type" field.
func (u *BatteryNewUpsertBulk) AddAssetLocationsType(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetLocationsType(v)
	})
}

// UpdateAssetLocationsType sets the "asset_locations_type" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateAssetLocationsType() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocationsType()
	})
}

// SetAssetLocationsID sets the "asset_locations_id" field.
func (u *BatteryNewUpsertBulk) SetAssetLocationsID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocationsID(v)
	})
}

// AddAssetLocationsID adds v to the "asset_locations_id" field.
func (u *BatteryNewUpsertBulk) AddAssetLocationsID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetLocationsID(v)
	})
}

// UpdateAssetLocationsID sets the "asset_locations_id" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateAssetLocationsID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocationsID()
	})
}

// SetAssetLocations sets the "asset_locations" field.
func (u *BatteryNewUpsertBulk) SetAssetLocations(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetLocations(v)
	})
}

// UpdateAssetLocations sets the "asset_locations" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateAssetLocations() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetLocations()
	})
}

// ClearAssetLocations clears the value of the "asset_locations" field.
func (u *BatteryNewUpsertBulk) ClearAssetLocations() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearAssetLocations()
	})
}

// SetBrand sets the "brand" field.
func (u *BatteryNewUpsertBulk) SetBrand(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateBrand() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateBrand()
	})
}

// SetEnable sets the "enable" field.
func (u *BatteryNewUpsertBulk) SetEnable(v bool) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateEnable() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateEnable()
	})
}

// SetModel sets the "model" field.
func (u *BatteryNewUpsertBulk) SetModel(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateModel() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateModel()
	})
}

// SetAssetStatus sets the "asset_status" field.
func (u *BatteryNewUpsertBulk) SetAssetStatus(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetAssetStatus(v)
	})
}

// AddAssetStatus adds v to the "asset_status" field.
func (u *BatteryNewUpsertBulk) AddAssetStatus(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddAssetStatus(v)
	})
}

// UpdateAssetStatus sets the "asset_status" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateAssetStatus() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateAssetStatus()
	})
}

// SetStatus sets the "status" field.
func (u *BatteryNewUpsertBulk) SetStatus(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BatteryNewUpsertBulk) AddStatus(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateStatus() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateStatus()
	})
}

// SetScrapReasonType sets the "scrap_reason_type" field.
func (u *BatteryNewUpsertBulk) SetScrapReasonType(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetScrapReasonType(v)
	})
}

// AddScrapReasonType adds v to the "scrap_reason_type" field.
func (u *BatteryNewUpsertBulk) AddScrapReasonType(v uint8) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddScrapReasonType(v)
	})
}

// UpdateScrapReasonType sets the "scrap_reason_type" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateScrapReasonType() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateScrapReasonType()
	})
}

// ClearScrapReasonType clears the value of the "scrap_reason_type" field.
func (u *BatteryNewUpsertBulk) ClearScrapReasonType() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearScrapReasonType()
	})
}

// SetScrapAt sets the "scrap_at" field.
func (u *BatteryNewUpsertBulk) SetScrapAt(v time.Time) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetScrapAt(v)
	})
}

// UpdateScrapAt sets the "scrap_at" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateScrapAt() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateScrapAt()
	})
}

// ClearScrapAt clears the value of the "scrap_at" field.
func (u *BatteryNewUpsertBulk) ClearScrapAt() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearScrapAt()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *BatteryNewUpsertBulk) SetOperateID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateID(v)
	})
}

// AddOperateID adds v to the "operate_id" field.
func (u *BatteryNewUpsertBulk) AddOperateID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateOperateID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *BatteryNewUpsertBulk) ClearOperateID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateRole sets the "operate_role" field.
func (u *BatteryNewUpsertBulk) SetOperateRole(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateRole(v)
	})
}

// AddOperateRole adds v to the "operate_role" field.
func (u *BatteryNewUpsertBulk) AddOperateRole(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddOperateRole(v)
	})
}

// UpdateOperateRole sets the "operate_role" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateOperateRole() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateRole()
	})
}

// ClearOperateRole clears the value of the "operate_role" field.
func (u *BatteryNewUpsertBulk) ClearOperateRole() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateRole()
	})
}

// SetOperateUser sets the "operate_user" field.
func (u *BatteryNewUpsertBulk) SetOperateUser(v string) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetOperateUser(v)
	})
}

// UpdateOperateUser sets the "operate_user" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateOperateUser() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateOperateUser()
	})
}

// ClearOperateUser clears the value of the "operate_user" field.
func (u *BatteryNewUpsertBulk) ClearOperateUser() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearOperateUser()
	})
}

// SetWarehouseID sets the "warehouse_id" field.
func (u *BatteryNewUpsertBulk) SetWarehouseID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.SetWarehouseID(v)
	})
}

// AddWarehouseID adds v to the "warehouse_id" field.
func (u *BatteryNewUpsertBulk) AddWarehouseID(v uint64) *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.AddWarehouseID(v)
	})
}

// UpdateWarehouseID sets the "warehouse_id" field to the value that was provided on create.
func (u *BatteryNewUpsertBulk) UpdateWarehouseID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.UpdateWarehouseID()
	})
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (u *BatteryNewUpsertBulk) ClearWarehouseID() *BatteryNewUpsertBulk {
	return u.Update(func(s *BatteryNewUpsert) {
		s.ClearWarehouseID()
	})
}

// Exec executes the query.
func (u *BatteryNewUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryNewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryNewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryNewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
