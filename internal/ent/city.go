// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
)

// City is the model entity for the City schema.
type City struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// Open holds the value of the "open" field.
	// 启用
	Open *bool `json:"open,omitempty"`
	// Name holds the value of the "name" field.
	// 城市
	Name string `json:"name,omitempty"`
	// Code holds the value of the "code" field.
	// 城市编号
	Code string `json:"code,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	// 父级
	ParentID *uint64 `json:"parent_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CityQuery when eager-loading is set.
	Edges CityEdges `json:"edges"`
}

// CityEdges holds the relations/edges for other nodes in the graph.
type CityEdges struct {
	// Plans holds the value of the plans edge.
	Plans []*Plan `json:"plans,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *City `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*City `json:"children,omitempty"`
	// Branches holds the value of the branches edge.
	Branches []*Branch `json:"branches,omitempty"`
	// Faults holds the value of the faults edge.
	Faults []*CabinetFault `json:"faults,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// PlansOrErr returns the Plans value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) PlansOrErr() ([]*Plan, error) {
	if e.loadedTypes[0] {
		return e.Plans, nil
	}
	return nil, &NotLoadedError{edge: "plans"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CityEdges) ParentOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) ChildrenOrErr() ([]*City, error) {
	if e.loadedTypes[2] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// BranchesOrErr returns the Branches value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) BranchesOrErr() ([]*Branch, error) {
	if e.loadedTypes[3] {
		return e.Branches, nil
	}
	return nil, &NotLoadedError{edge: "branches"}
}

// FaultsOrErr returns the Faults value or an error if the edge
// was not loaded in eager-loading.
func (e CityEdges) FaultsOrErr() ([]*CabinetFault, error) {
	if e.loadedTypes[4] {
		return e.Faults, nil
	}
	return nil, &NotLoadedError{edge: "faults"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*City) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case city.FieldCreator, city.FieldLastModifier:
			values[i] = new([]byte)
		case city.FieldOpen:
			values[i] = new(sql.NullBool)
		case city.FieldID, city.FieldParentID:
			values[i] = new(sql.NullInt64)
		case city.FieldRemark, city.FieldName, city.FieldCode:
			values[i] = new(sql.NullString)
		case city.FieldCreatedAt, city.FieldUpdatedAt, city.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type City", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the City fields.
func (c *City) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case city.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case city.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case city.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case city.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case city.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case city.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case city.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case city.FieldOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				c.Open = new(bool)
				*c.Open = value.Bool
			}
		case city.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case city.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case city.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = new(uint64)
				*c.ParentID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlans queries the "plans" edge of the City entity.
func (c *City) QueryPlans() *PlanQuery {
	return (&CityClient{config: c.config}).QueryPlans(c)
}

// QueryParent queries the "parent" edge of the City entity.
func (c *City) QueryParent() *CityQuery {
	return (&CityClient{config: c.config}).QueryParent(c)
}

// QueryChildren queries the "children" edge of the City entity.
func (c *City) QueryChildren() *CityQuery {
	return (&CityClient{config: c.config}).QueryChildren(c)
}

// QueryBranches queries the "branches" edge of the City entity.
func (c *City) QueryBranches() *BranchQuery {
	return (&CityClient{config: c.config}).QueryBranches(c)
}

// QueryFaults queries the "faults" edge of the City entity.
func (c *City) QueryFaults() *CabinetFaultQuery {
	return (&CityClient{config: c.config}).QueryFaults(c)
}

// Update returns a builder for updating this City.
// Note that you need to call City.Unwrap() before calling this method if this City
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *City) Update() *CityUpdateOne {
	return (&CityClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the City entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *City) Unwrap() *City {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: City is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *City) String() string {
	var builder strings.Builder
	builder.WriteString("City(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", c.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(c.Remark)
	if v := c.Open; v != nil {
		builder.WriteString(", open=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", code=")
	builder.WriteString(c.Code)
	if v := c.ParentID; v != nil {
		builder.WriteString(", parent_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Cities is a parsable slice of City.
type Cities []*City

func (c Cities) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
