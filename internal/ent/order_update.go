// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderalter"
	"github.com/auroraride/aurservd/internal/ent/orderarrearage"
	"github.com/auroraride/aurservd/internal/ent/orderpause"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrderUpdate) SetUpdatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrderUpdate) SetDeletedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeletedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrderUpdate) ClearDeletedAt() *OrderUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetLastModifier sets the "last_modifier" field.
func (ou *OrderUpdate) SetLastModifier(m *model.Modifier) *OrderUpdate {
	ou.mutation.SetLastModifier(m)
	return ou
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ou *OrderUpdate) ClearLastModifier() *OrderUpdate {
	ou.mutation.ClearLastModifier()
	return ou
}

// SetRemark sets the "remark" field.
func (ou *OrderUpdate) SetRemark(s string) *OrderUpdate {
	ou.mutation.SetRemark(s)
	return ou
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRemark(s *string) *OrderUpdate {
	if s != nil {
		ou.SetRemark(*s)
	}
	return ou
}

// ClearRemark clears the value of the "remark" field.
func (ou *OrderUpdate) ClearRemark() *OrderUpdate {
	ou.mutation.ClearRemark()
	return ou
}

// SetRiderID sets the "rider_id" field.
func (ou *OrderUpdate) SetRiderID(u uint64) *OrderUpdate {
	ou.mutation.SetRiderID(u)
	return ou
}

// SetPlanID sets the "plan_id" field.
func (ou *OrderUpdate) SetPlanID(u uint64) *OrderUpdate {
	ou.mutation.SetPlanID(u)
	return ou
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlanID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetPlanID(*u)
	}
	return ou
}

// ClearPlanID clears the value of the "plan_id" field.
func (ou *OrderUpdate) ClearPlanID() *OrderUpdate {
	ou.mutation.ClearPlanID()
	return ou
}

// SetCityID sets the "city_id" field.
func (ou *OrderUpdate) SetCityID(u uint64) *OrderUpdate {
	ou.mutation.SetCityID(u)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(u uint8) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(u)
	return ou
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStatus(u *uint8) *OrderUpdate {
	if u != nil {
		ou.SetStatus(*u)
	}
	return ou
}

// AddStatus adds u to the "status" field.
func (ou *OrderUpdate) AddStatus(u int8) *OrderUpdate {
	ou.mutation.AddStatus(u)
	return ou
}

// SetPlanDetail sets the "plan_detail" field.
func (ou *OrderUpdate) SetPlanDetail(mi model.PlanItem) *OrderUpdate {
	ou.mutation.SetPlanDetail(mi)
	return ou
}

// SetNillablePlanDetail sets the "plan_detail" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlanDetail(mi *model.PlanItem) *OrderUpdate {
	if mi != nil {
		ou.SetPlanDetail(*mi)
	}
	return ou
}

// ClearPlanDetail clears the value of the "plan_detail" field.
func (ou *OrderUpdate) ClearPlanDetail() *OrderUpdate {
	ou.mutation.ClearPlanDetail()
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrderUpdate) SetParentID(u uint64) *OrderUpdate {
	ou.mutation.SetParentID(u)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableParentID(u *uint64) *OrderUpdate {
	if u != nil {
		ou.SetParentID(*u)
	}
	return ou
}

// ClearParentID clears the value of the "parent_id" field.
func (ou *OrderUpdate) ClearParentID() *OrderUpdate {
	ou.mutation.ClearParentID()
	return ou
}

// SetStartAt sets the "start_at" field.
func (ou *OrderUpdate) SetStartAt(t time.Time) *OrderUpdate {
	ou.mutation.SetStartAt(t)
	return ou
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableStartAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetStartAt(*t)
	}
	return ou
}

// ClearStartAt clears the value of the "start_at" field.
func (ou *OrderUpdate) ClearStartAt() *OrderUpdate {
	ou.mutation.ClearStartAt()
	return ou
}

// SetEndAt sets the "end_at" field.
func (ou *OrderUpdate) SetEndAt(t time.Time) *OrderUpdate {
	ou.mutation.SetEndAt(t)
	return ou
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEndAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetEndAt(*t)
	}
	return ou
}

// ClearEndAt clears the value of the "end_at" field.
func (ou *OrderUpdate) ClearEndAt() *OrderUpdate {
	ou.mutation.ClearEndAt()
	return ou
}

// SetRefundAt sets the "refund_at" field.
func (ou *OrderUpdate) SetRefundAt(t time.Time) *OrderUpdate {
	ou.mutation.SetRefundAt(t)
	return ou
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableRefundAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetRefundAt(*t)
	}
	return ou
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ou *OrderUpdate) ClearRefundAt() *OrderUpdate {
	ou.mutation.ClearRefundAt()
	return ou
}

// SetPausedAt sets the "paused_at" field.
func (ou *OrderUpdate) SetPausedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPausedAt(t)
	return ou
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePausedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPausedAt(*t)
	}
	return ou
}

// ClearPausedAt clears the value of the "paused_at" field.
func (ou *OrderUpdate) ClearPausedAt() *OrderUpdate {
	ou.mutation.ClearPausedAt()
	return ou
}

// SetDays sets the "days" field.
func (ou *OrderUpdate) SetDays(u uint) *OrderUpdate {
	ou.mutation.ResetDays()
	ou.mutation.SetDays(u)
	return ou
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDays(u *uint) *OrderUpdate {
	if u != nil {
		ou.SetDays(*u)
	}
	return ou
}

// AddDays adds u to the "days" field.
func (ou *OrderUpdate) AddDays(u int) *OrderUpdate {
	ou.mutation.AddDays(u)
	return ou
}

// ClearDays clears the value of the "days" field.
func (ou *OrderUpdate) ClearDays() *OrderUpdate {
	ou.mutation.ClearDays()
	return ou
}

// SetRider sets the "rider" edge to the Rider entity.
func (ou *OrderUpdate) SetRider(r *Rider) *OrderUpdate {
	return ou.SetRiderID(r.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (ou *OrderUpdate) SetPlan(p *Plan) *OrderUpdate {
	return ou.SetPlanID(p.ID)
}

// SetCommissionID sets the "commission" edge to the Commission entity by ID.
func (ou *OrderUpdate) SetCommissionID(id uint64) *OrderUpdate {
	ou.mutation.SetCommissionID(id)
	return ou
}

// SetNillableCommissionID sets the "commission" edge to the Commission entity by ID if the given value is not nil.
func (ou *OrderUpdate) SetNillableCommissionID(id *uint64) *OrderUpdate {
	if id != nil {
		ou = ou.SetCommissionID(*id)
	}
	return ou
}

// SetCommission sets the "commission" edge to the Commission entity.
func (ou *OrderUpdate) SetCommission(c *Commission) *OrderUpdate {
	return ou.SetCommissionID(c.ID)
}

// SetParent sets the "parent" edge to the Order entity.
func (ou *OrderUpdate) SetParent(o *Order) *OrderUpdate {
	return ou.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Order entity by IDs.
func (ou *OrderUpdate) AddChildIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Order entity.
func (ou *OrderUpdate) AddChildren(o ...*Order) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// SetCity sets the "city" edge to the City entity.
func (ou *OrderUpdate) SetCity(c *City) *OrderUpdate {
	return ou.SetCityID(c.ID)
}

// AddPauseIDs adds the "pauses" edge to the OrderPause entity by IDs.
func (ou *OrderUpdate) AddPauseIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.AddPauseIDs(ids...)
	return ou
}

// AddPauses adds the "pauses" edges to the OrderPause entity.
func (ou *OrderUpdate) AddPauses(o ...*OrderPause) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddPauseIDs(ids...)
}

// AddArrearageIDs adds the "arrearages" edge to the OrderArrearage entity by IDs.
func (ou *OrderUpdate) AddArrearageIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.AddArrearageIDs(ids...)
	return ou
}

// AddArrearages adds the "arrearages" edges to the OrderArrearage entity.
func (ou *OrderUpdate) AddArrearages(o ...*OrderArrearage) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddArrearageIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the OrderAlter entity by IDs.
func (ou *OrderUpdate) AddAlterIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.AddAlterIDs(ids...)
	return ou
}

// AddAlters adds the "alters" edges to the OrderAlter entity.
func (ou *OrderUpdate) AddAlters(o ...*OrderAlter) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddAlterIDs(ids...)
}

// AddRefundIDs adds the "refunds" edge to the OrderRefund entity by IDs.
func (ou *OrderUpdate) AddRefundIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.AddRefundIDs(ids...)
	return ou
}

// AddRefunds adds the "refunds" edges to the OrderRefund entity.
func (ou *OrderUpdate) AddRefunds(o ...*OrderRefund) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddRefundIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ou *OrderUpdate) ClearRider() *OrderUpdate {
	ou.mutation.ClearRider()
	return ou
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (ou *OrderUpdate) ClearPlan() *OrderUpdate {
	ou.mutation.ClearPlan()
	return ou
}

// ClearCommission clears the "commission" edge to the Commission entity.
func (ou *OrderUpdate) ClearCommission() *OrderUpdate {
	ou.mutation.ClearCommission()
	return ou
}

// ClearParent clears the "parent" edge to the Order entity.
func (ou *OrderUpdate) ClearParent() *OrderUpdate {
	ou.mutation.ClearParent()
	return ou
}

// ClearChildren clears all "children" edges to the Order entity.
func (ou *OrderUpdate) ClearChildren() *OrderUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Order entities by IDs.
func (ou *OrderUpdate) RemoveChildIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Order entities.
func (ou *OrderUpdate) RemoveChildren(o ...*Order) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (ou *OrderUpdate) ClearCity() *OrderUpdate {
	ou.mutation.ClearCity()
	return ou
}

// ClearPauses clears all "pauses" edges to the OrderPause entity.
func (ou *OrderUpdate) ClearPauses() *OrderUpdate {
	ou.mutation.ClearPauses()
	return ou
}

// RemovePauseIDs removes the "pauses" edge to OrderPause entities by IDs.
func (ou *OrderUpdate) RemovePauseIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.RemovePauseIDs(ids...)
	return ou
}

// RemovePauses removes "pauses" edges to OrderPause entities.
func (ou *OrderUpdate) RemovePauses(o ...*OrderPause) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemovePauseIDs(ids...)
}

// ClearArrearages clears all "arrearages" edges to the OrderArrearage entity.
func (ou *OrderUpdate) ClearArrearages() *OrderUpdate {
	ou.mutation.ClearArrearages()
	return ou
}

// RemoveArrearageIDs removes the "arrearages" edge to OrderArrearage entities by IDs.
func (ou *OrderUpdate) RemoveArrearageIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.RemoveArrearageIDs(ids...)
	return ou
}

// RemoveArrearages removes "arrearages" edges to OrderArrearage entities.
func (ou *OrderUpdate) RemoveArrearages(o ...*OrderArrearage) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveArrearageIDs(ids...)
}

// ClearAlters clears all "alters" edges to the OrderAlter entity.
func (ou *OrderUpdate) ClearAlters() *OrderUpdate {
	ou.mutation.ClearAlters()
	return ou
}

// RemoveAlterIDs removes the "alters" edge to OrderAlter entities by IDs.
func (ou *OrderUpdate) RemoveAlterIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.RemoveAlterIDs(ids...)
	return ou
}

// RemoveAlters removes "alters" edges to OrderAlter entities.
func (ou *OrderUpdate) RemoveAlters(o ...*OrderAlter) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveAlterIDs(ids...)
}

// ClearRefunds clears all "refunds" edges to the OrderRefund entity.
func (ou *OrderUpdate) ClearRefunds() *OrderUpdate {
	ou.mutation.ClearRefunds()
	return ou
}

// RemoveRefundIDs removes the "refunds" edge to OrderRefund entities by IDs.
func (ou *OrderUpdate) RemoveRefundIDs(ids ...uint64) *OrderUpdate {
	ou.mutation.RemoveRefundIDs(ids...)
	return ou
}

// RemoveRefunds removes "refunds" edges to OrderRefund entities.
func (ou *OrderUpdate) RemoveRefunds(o ...*OrderRefund) *OrderUpdate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveRefundIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	if len(ou.hooks) == 0 {
		if err = ou.check(); err != nil {
			return 0, err
		}
		affected, err = ou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ou.check(); err != nil {
				return 0, err
			}
			ou.mutation = mutation
			affected, err = ou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ou.hooks) - 1; i >= 0; i-- {
			if ou.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if _, ok := ou.mutation.RiderID(); ou.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.rider"`)
	}
	if _, ok := ou.mutation.CityID(); ou.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.city"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeletedAt,
		})
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeletedAt,
		})
	}
	if ou.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldCreator,
		})
	}
	if value, ok := ou.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldLastModifier,
		})
	}
	if ou.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldLastModifier,
		})
	}
	if value, ok := ou.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
	}
	if ou.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: order.FieldRemark,
		})
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ou.mutation.PlanDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldPlanDetail,
		})
	}
	if ou.mutation.PlanDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldPlanDetail,
		})
	}
	if value, ok := ou.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldStartAt,
		})
	}
	if ou.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldStartAt,
		})
	}
	if value, ok := ou.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldEndAt,
		})
	}
	if ou.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldEndAt,
		})
	}
	if value, ok := ou.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldRefundAt,
		})
	}
	if ou.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldRefundAt,
		})
	}
	if value, ok := ou.mutation.PausedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldPausedAt,
		})
	}
	if ou.mutation.PausedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldPausedAt,
		})
	}
	if value, ok := ou.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: order.FieldDays,
		})
	}
	if value, ok := ou.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: order.FieldDays,
		})
	}
	if ou.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: order.FieldDays,
		})
	}
	if ou.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: commission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: commission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPausesIDs(); len(nodes) > 0 && !ou.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ArrearagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedArrearagesIDs(); len(nodes) > 0 && !ou.mutation.ArrearagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ArrearagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAltersIDs(); len(nodes) > 0 && !ou.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedRefundsIDs(); len(nodes) > 0 && !ou.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RefundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrderUpdateOne) SetUpdatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrderUpdateOne) SetDeletedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrderUpdateOne) ClearDeletedAt() *OrderUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetLastModifier sets the "last_modifier" field.
func (ouo *OrderUpdateOne) SetLastModifier(m *model.Modifier) *OrderUpdateOne {
	ouo.mutation.SetLastModifier(m)
	return ouo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ouo *OrderUpdateOne) ClearLastModifier() *OrderUpdateOne {
	ouo.mutation.ClearLastModifier()
	return ouo
}

// SetRemark sets the "remark" field.
func (ouo *OrderUpdateOne) SetRemark(s string) *OrderUpdateOne {
	ouo.mutation.SetRemark(s)
	return ouo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRemark(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetRemark(*s)
	}
	return ouo
}

// ClearRemark clears the value of the "remark" field.
func (ouo *OrderUpdateOne) ClearRemark() *OrderUpdateOne {
	ouo.mutation.ClearRemark()
	return ouo
}

// SetRiderID sets the "rider_id" field.
func (ouo *OrderUpdateOne) SetRiderID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetRiderID(u)
	return ouo
}

// SetPlanID sets the "plan_id" field.
func (ouo *OrderUpdateOne) SetPlanID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetPlanID(u)
	return ouo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlanID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetPlanID(*u)
	}
	return ouo
}

// ClearPlanID clears the value of the "plan_id" field.
func (ouo *OrderUpdateOne) ClearPlanID() *OrderUpdateOne {
	ouo.mutation.ClearPlanID()
	return ouo
}

// SetCityID sets the "city_id" field.
func (ouo *OrderUpdateOne) SetCityID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetCityID(u)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(u uint8) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(u)
	return ouo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStatus(u *uint8) *OrderUpdateOne {
	if u != nil {
		ouo.SetStatus(*u)
	}
	return ouo
}

// AddStatus adds u to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(u int8) *OrderUpdateOne {
	ouo.mutation.AddStatus(u)
	return ouo
}

// SetPlanDetail sets the "plan_detail" field.
func (ouo *OrderUpdateOne) SetPlanDetail(mi model.PlanItem) *OrderUpdateOne {
	ouo.mutation.SetPlanDetail(mi)
	return ouo
}

// SetNillablePlanDetail sets the "plan_detail" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlanDetail(mi *model.PlanItem) *OrderUpdateOne {
	if mi != nil {
		ouo.SetPlanDetail(*mi)
	}
	return ouo
}

// ClearPlanDetail clears the value of the "plan_detail" field.
func (ouo *OrderUpdateOne) ClearPlanDetail() *OrderUpdateOne {
	ouo.mutation.ClearPlanDetail()
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrderUpdateOne) SetParentID(u uint64) *OrderUpdateOne {
	ouo.mutation.SetParentID(u)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableParentID(u *uint64) *OrderUpdateOne {
	if u != nil {
		ouo.SetParentID(*u)
	}
	return ouo
}

// ClearParentID clears the value of the "parent_id" field.
func (ouo *OrderUpdateOne) ClearParentID() *OrderUpdateOne {
	ouo.mutation.ClearParentID()
	return ouo
}

// SetStartAt sets the "start_at" field.
func (ouo *OrderUpdateOne) SetStartAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetStartAt(t)
	return ouo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableStartAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetStartAt(*t)
	}
	return ouo
}

// ClearStartAt clears the value of the "start_at" field.
func (ouo *OrderUpdateOne) ClearStartAt() *OrderUpdateOne {
	ouo.mutation.ClearStartAt()
	return ouo
}

// SetEndAt sets the "end_at" field.
func (ouo *OrderUpdateOne) SetEndAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetEndAt(t)
	return ouo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEndAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetEndAt(*t)
	}
	return ouo
}

// ClearEndAt clears the value of the "end_at" field.
func (ouo *OrderUpdateOne) ClearEndAt() *OrderUpdateOne {
	ouo.mutation.ClearEndAt()
	return ouo
}

// SetRefundAt sets the "refund_at" field.
func (ouo *OrderUpdateOne) SetRefundAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetRefundAt(t)
	return ouo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableRefundAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetRefundAt(*t)
	}
	return ouo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (ouo *OrderUpdateOne) ClearRefundAt() *OrderUpdateOne {
	ouo.mutation.ClearRefundAt()
	return ouo
}

// SetPausedAt sets the "paused_at" field.
func (ouo *OrderUpdateOne) SetPausedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPausedAt(t)
	return ouo
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePausedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPausedAt(*t)
	}
	return ouo
}

// ClearPausedAt clears the value of the "paused_at" field.
func (ouo *OrderUpdateOne) ClearPausedAt() *OrderUpdateOne {
	ouo.mutation.ClearPausedAt()
	return ouo
}

// SetDays sets the "days" field.
func (ouo *OrderUpdateOne) SetDays(u uint) *OrderUpdateOne {
	ouo.mutation.ResetDays()
	ouo.mutation.SetDays(u)
	return ouo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDays(u *uint) *OrderUpdateOne {
	if u != nil {
		ouo.SetDays(*u)
	}
	return ouo
}

// AddDays adds u to the "days" field.
func (ouo *OrderUpdateOne) AddDays(u int) *OrderUpdateOne {
	ouo.mutation.AddDays(u)
	return ouo
}

// ClearDays clears the value of the "days" field.
func (ouo *OrderUpdateOne) ClearDays() *OrderUpdateOne {
	ouo.mutation.ClearDays()
	return ouo
}

// SetRider sets the "rider" edge to the Rider entity.
func (ouo *OrderUpdateOne) SetRider(r *Rider) *OrderUpdateOne {
	return ouo.SetRiderID(r.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (ouo *OrderUpdateOne) SetPlan(p *Plan) *OrderUpdateOne {
	return ouo.SetPlanID(p.ID)
}

// SetCommissionID sets the "commission" edge to the Commission entity by ID.
func (ouo *OrderUpdateOne) SetCommissionID(id uint64) *OrderUpdateOne {
	ouo.mutation.SetCommissionID(id)
	return ouo
}

// SetNillableCommissionID sets the "commission" edge to the Commission entity by ID if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCommissionID(id *uint64) *OrderUpdateOne {
	if id != nil {
		ouo = ouo.SetCommissionID(*id)
	}
	return ouo
}

// SetCommission sets the "commission" edge to the Commission entity.
func (ouo *OrderUpdateOne) SetCommission(c *Commission) *OrderUpdateOne {
	return ouo.SetCommissionID(c.ID)
}

// SetParent sets the "parent" edge to the Order entity.
func (ouo *OrderUpdateOne) SetParent(o *Order) *OrderUpdateOne {
	return ouo.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Order entity by IDs.
func (ouo *OrderUpdateOne) AddChildIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Order entity.
func (ouo *OrderUpdateOne) AddChildren(o ...*Order) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// SetCity sets the "city" edge to the City entity.
func (ouo *OrderUpdateOne) SetCity(c *City) *OrderUpdateOne {
	return ouo.SetCityID(c.ID)
}

// AddPauseIDs adds the "pauses" edge to the OrderPause entity by IDs.
func (ouo *OrderUpdateOne) AddPauseIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.AddPauseIDs(ids...)
	return ouo
}

// AddPauses adds the "pauses" edges to the OrderPause entity.
func (ouo *OrderUpdateOne) AddPauses(o ...*OrderPause) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddPauseIDs(ids...)
}

// AddArrearageIDs adds the "arrearages" edge to the OrderArrearage entity by IDs.
func (ouo *OrderUpdateOne) AddArrearageIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.AddArrearageIDs(ids...)
	return ouo
}

// AddArrearages adds the "arrearages" edges to the OrderArrearage entity.
func (ouo *OrderUpdateOne) AddArrearages(o ...*OrderArrearage) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddArrearageIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the OrderAlter entity by IDs.
func (ouo *OrderUpdateOne) AddAlterIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.AddAlterIDs(ids...)
	return ouo
}

// AddAlters adds the "alters" edges to the OrderAlter entity.
func (ouo *OrderUpdateOne) AddAlters(o ...*OrderAlter) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddAlterIDs(ids...)
}

// AddRefundIDs adds the "refunds" edge to the OrderRefund entity by IDs.
func (ouo *OrderUpdateOne) AddRefundIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.AddRefundIDs(ids...)
	return ouo
}

// AddRefunds adds the "refunds" edges to the OrderRefund entity.
func (ouo *OrderUpdateOne) AddRefunds(o ...*OrderRefund) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddRefundIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ouo *OrderUpdateOne) ClearRider() *OrderUpdateOne {
	ouo.mutation.ClearRider()
	return ouo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (ouo *OrderUpdateOne) ClearPlan() *OrderUpdateOne {
	ouo.mutation.ClearPlan()
	return ouo
}

// ClearCommission clears the "commission" edge to the Commission entity.
func (ouo *OrderUpdateOne) ClearCommission() *OrderUpdateOne {
	ouo.mutation.ClearCommission()
	return ouo
}

// ClearParent clears the "parent" edge to the Order entity.
func (ouo *OrderUpdateOne) ClearParent() *OrderUpdateOne {
	ouo.mutation.ClearParent()
	return ouo
}

// ClearChildren clears all "children" edges to the Order entity.
func (ouo *OrderUpdateOne) ClearChildren() *OrderUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Order entities by IDs.
func (ouo *OrderUpdateOne) RemoveChildIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Order entities.
func (ouo *OrderUpdateOne) RemoveChildren(o ...*Order) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearCity clears the "city" edge to the City entity.
func (ouo *OrderUpdateOne) ClearCity() *OrderUpdateOne {
	ouo.mutation.ClearCity()
	return ouo
}

// ClearPauses clears all "pauses" edges to the OrderPause entity.
func (ouo *OrderUpdateOne) ClearPauses() *OrderUpdateOne {
	ouo.mutation.ClearPauses()
	return ouo
}

// RemovePauseIDs removes the "pauses" edge to OrderPause entities by IDs.
func (ouo *OrderUpdateOne) RemovePauseIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.RemovePauseIDs(ids...)
	return ouo
}

// RemovePauses removes "pauses" edges to OrderPause entities.
func (ouo *OrderUpdateOne) RemovePauses(o ...*OrderPause) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemovePauseIDs(ids...)
}

// ClearArrearages clears all "arrearages" edges to the OrderArrearage entity.
func (ouo *OrderUpdateOne) ClearArrearages() *OrderUpdateOne {
	ouo.mutation.ClearArrearages()
	return ouo
}

// RemoveArrearageIDs removes the "arrearages" edge to OrderArrearage entities by IDs.
func (ouo *OrderUpdateOne) RemoveArrearageIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.RemoveArrearageIDs(ids...)
	return ouo
}

// RemoveArrearages removes "arrearages" edges to OrderArrearage entities.
func (ouo *OrderUpdateOne) RemoveArrearages(o ...*OrderArrearage) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveArrearageIDs(ids...)
}

// ClearAlters clears all "alters" edges to the OrderAlter entity.
func (ouo *OrderUpdateOne) ClearAlters() *OrderUpdateOne {
	ouo.mutation.ClearAlters()
	return ouo
}

// RemoveAlterIDs removes the "alters" edge to OrderAlter entities by IDs.
func (ouo *OrderUpdateOne) RemoveAlterIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.RemoveAlterIDs(ids...)
	return ouo
}

// RemoveAlters removes "alters" edges to OrderAlter entities.
func (ouo *OrderUpdateOne) RemoveAlters(o ...*OrderAlter) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveAlterIDs(ids...)
}

// ClearRefunds clears all "refunds" edges to the OrderRefund entity.
func (ouo *OrderUpdateOne) ClearRefunds() *OrderUpdateOne {
	ouo.mutation.ClearRefunds()
	return ouo
}

// RemoveRefundIDs removes the "refunds" edge to OrderRefund entities by IDs.
func (ouo *OrderUpdateOne) RemoveRefundIDs(ids ...uint64) *OrderUpdateOne {
	ouo.mutation.RemoveRefundIDs(ids...)
	return ouo
}

// RemoveRefunds removes "refunds" edges to OrderRefund entities.
func (ouo *OrderUpdateOne) RemoveRefunds(o ...*OrderRefund) *OrderUpdateOne {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveRefundIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	var (
		err  error
		node *Order
	)
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	if len(ouo.hooks) == 0 {
		if err = ouo.check(); err != nil {
			return nil, err
		}
		node, err = ouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouo.check(); err != nil {
				return nil, err
			}
			ouo.mutation = mutation
			node, err = ouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ouo.hooks) - 1; i >= 0; i-- {
			if ouo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Order)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		if order.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized order.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := order.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if _, ok := ouo.mutation.RiderID(); ouo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.rider"`)
	}
	if _, ok := ouo.mutation.CityID(); ouo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Order.city"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldUpdatedAt,
		})
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldDeletedAt,
		})
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldDeletedAt,
		})
	}
	if ouo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldCreator,
		})
	}
	if value, ok := ouo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldLastModifier,
		})
	}
	if ouo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldLastModifier,
		})
	}
	if value, ok := ouo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: order.FieldRemark,
		})
	}
	if ouo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: order.FieldRemark,
		})
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: order.FieldStatus,
		})
	}
	if value, ok := ouo.mutation.PlanDetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: order.FieldPlanDetail,
		})
	}
	if ouo.mutation.PlanDetailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: order.FieldPlanDetail,
		})
	}
	if value, ok := ouo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldStartAt,
		})
	}
	if ouo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldStartAt,
		})
	}
	if value, ok := ouo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldEndAt,
		})
	}
	if ouo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldEndAt,
		})
	}
	if value, ok := ouo.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldRefundAt,
		})
	}
	if ouo.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldRefundAt,
		})
	}
	if value, ok := ouo.mutation.PausedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: order.FieldPausedAt,
		})
	}
	if ouo.mutation.PausedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: order.FieldPausedAt,
		})
	}
	if value, ok := ouo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: order.FieldDays,
		})
	}
	if value, ok := ouo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: order.FieldDays,
		})
	}
	if ouo.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Column: order.FieldDays,
		})
	}
	if ouo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.RiderTable,
			Columns: []string{order.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.PlanTable,
			Columns: []string{order.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CommissionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: commission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CommissionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   order.CommissionTable,
			Columns: []string{order.CommissionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: commission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.ParentTable,
			Columns: []string{order.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ChildrenTable,
			Columns: []string{order.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.CityTable,
			Columns: []string{order.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPausesIDs(); len(nodes) > 0 && !ouo.mutation.PausesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.PausesTable,
			Columns: []string{order.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderpause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ArrearagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedArrearagesIDs(); len(nodes) > 0 && !ouo.mutation.ArrearagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ArrearagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.ArrearagesTable,
			Columns: []string{order.ArrearagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderarrearage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAltersIDs(); len(nodes) > 0 && !ouo.mutation.AltersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.AltersTable,
			Columns: []string{order.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderalter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedRefundsIDs(); len(nodes) > 0 && !ouo.mutation.RefundsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RefundsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.RefundsTable,
			Columns: []string{order.RefundsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: orderrefund.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
