// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/subscribealter"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// SubscribeAlterMutation represents an operation that mutates the SubscribeAlter nodes in the graph.
type SubscribeAlterMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	days             *int
	adddays          *int
	clearedFields    map[string]struct{}
	rider            *uint64
	clearedrider     bool
	manager          *uint64
	clearedmanager   bool
	subscribe        *uint64
	clearedsubscribe bool
	done             bool
	oldValue         func(context.Context) (*SubscribeAlter, error)
	predicates       []predicate.SubscribeAlter
}

var _ ent.Mutation = (*SubscribeAlterMutation)(nil)

// subscribealterOption allows management of the mutation configuration using functional options.
type subscribealterOption func(*SubscribeAlterMutation)

// newSubscribeAlterMutation creates new mutation for the SubscribeAlter entity.
func newSubscribeAlterMutation(c config, op Op, opts ...subscribealterOption) *SubscribeAlterMutation {
	m := &SubscribeAlterMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribeAlter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribeAlterID sets the ID field of the mutation.
func withSubscribeAlterID(id uint64) subscribealterOption {
	return func(m *SubscribeAlterMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscribeAlter
		)
		m.oldValue = func(ctx context.Context) (*SubscribeAlter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscribeAlter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribeAlter sets the old SubscribeAlter of the mutation.
func withSubscribeAlter(node *SubscribeAlter) subscribealterOption {
	return func(m *SubscribeAlterMutation) {
		m.oldValue = func(context.Context) (*SubscribeAlter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribeAlterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribeAlterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribeAlterMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribeAlterMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscribeAlter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscribeAlterMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscribeAlterMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscribeAlterMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscribeAlterMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscribeAlterMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscribeAlterMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SubscribeAlterMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SubscribeAlterMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *SubscribeAlterMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[subscribealter.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *SubscribeAlterMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[subscribealter.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SubscribeAlterMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, subscribealter.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *SubscribeAlterMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *SubscribeAlterMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *SubscribeAlterMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[subscribealter.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *SubscribeAlterMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[subscribealter.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *SubscribeAlterMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, subscribealter.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *SubscribeAlterMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *SubscribeAlterMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *SubscribeAlterMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[subscribealter.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *SubscribeAlterMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[subscribealter.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *SubscribeAlterMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, subscribealter.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *SubscribeAlterMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *SubscribeAlterMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *SubscribeAlterMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[subscribealter.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *SubscribeAlterMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[subscribealter.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *SubscribeAlterMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, subscribealter.FieldRemark)
}

// SetRiderID sets the "rider_id" field.
func (m *SubscribeAlterMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *SubscribeAlterMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *SubscribeAlterMutation) ResetRiderID() {
	m.rider = nil
}

// SetManagerID sets the "manager_id" field.
func (m *SubscribeAlterMutation) SetManagerID(u uint64) {
	m.manager = &u
}

// ManagerID returns the value of the "manager_id" field in the mutation.
func (m *SubscribeAlterMutation) ManagerID() (r uint64, exists bool) {
	v := m.manager
	if v == nil {
		return
	}
	return *v, true
}

// OldManagerID returns the old "manager_id" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldManagerID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldManagerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldManagerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldManagerID: %w", err)
	}
	return oldValue.ManagerID, nil
}

// ResetManagerID resets all changes to the "manager_id" field.
func (m *SubscribeAlterMutation) ResetManagerID() {
	m.manager = nil
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *SubscribeAlterMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *SubscribeAlterMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *SubscribeAlterMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetDays sets the "days" field.
func (m *SubscribeAlterMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *SubscribeAlterMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the SubscribeAlter entity.
// If the SubscribeAlter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeAlterMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *SubscribeAlterMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *SubscribeAlterMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ResetDays resets all changes to the "days" field.
func (m *SubscribeAlterMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *SubscribeAlterMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *SubscribeAlterMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *SubscribeAlterMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *SubscribeAlterMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearManager clears the "manager" edge to the Manager entity.
func (m *SubscribeAlterMutation) ClearManager() {
	m.clearedmanager = true
}

// ManagerCleared reports if the "manager" edge to the Manager entity was cleared.
func (m *SubscribeAlterMutation) ManagerCleared() bool {
	return m.clearedmanager
}

// ManagerIDs returns the "manager" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ManagerID instead. It exists only for internal usage by the builders.
func (m *SubscribeAlterMutation) ManagerIDs() (ids []uint64) {
	if id := m.manager; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetManager resets all changes to the "manager" edge.
func (m *SubscribeAlterMutation) ResetManager() {
	m.manager = nil
	m.clearedmanager = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *SubscribeAlterMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *SubscribeAlterMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *SubscribeAlterMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *SubscribeAlterMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// Where appends a list predicates to the SubscribeAlterMutation builder.
func (m *SubscribeAlterMutation) Where(ps ...predicate.SubscribeAlter) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubscribeAlterMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubscribeAlter).
func (m *SubscribeAlterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribeAlterMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, subscribealter.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscribealter.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, subscribealter.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, subscribealter.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, subscribealter.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, subscribealter.FieldRemark)
	}
	if m.rider != nil {
		fields = append(fields, subscribealter.FieldRiderID)
	}
	if m.manager != nil {
		fields = append(fields, subscribealter.FieldManagerID)
	}
	if m.subscribe != nil {
		fields = append(fields, subscribealter.FieldSubscribeID)
	}
	if m.days != nil {
		fields = append(fields, subscribealter.FieldDays)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribeAlterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribealter.FieldCreatedAt:
		return m.CreatedAt()
	case subscribealter.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscribealter.FieldDeletedAt:
		return m.DeletedAt()
	case subscribealter.FieldCreator:
		return m.Creator()
	case subscribealter.FieldLastModifier:
		return m.LastModifier()
	case subscribealter.FieldRemark:
		return m.Remark()
	case subscribealter.FieldRiderID:
		return m.RiderID()
	case subscribealter.FieldManagerID:
		return m.ManagerID()
	case subscribealter.FieldSubscribeID:
		return m.SubscribeID()
	case subscribealter.FieldDays:
		return m.Days()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribeAlterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribealter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscribealter.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscribealter.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case subscribealter.FieldCreator:
		return m.OldCreator(ctx)
	case subscribealter.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case subscribealter.FieldRemark:
		return m.OldRemark(ctx)
	case subscribealter.FieldRiderID:
		return m.OldRiderID(ctx)
	case subscribealter.FieldManagerID:
		return m.OldManagerID(ctx)
	case subscribealter.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case subscribealter.FieldDays:
		return m.OldDays(ctx)
	}
	return nil, fmt.Errorf("unknown SubscribeAlter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeAlterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribealter.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscribealter.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscribealter.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case subscribealter.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case subscribealter.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case subscribealter.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case subscribealter.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case subscribealter.FieldManagerID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetManagerID(v)
		return nil
	case subscribealter.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case subscribealter.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribeAlterMutation) AddedFields() []string {
	var fields []string
	if m.adddays != nil {
		fields = append(fields, subscribealter.FieldDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribeAlterMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribealter.FieldDays:
		return m.AddedDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeAlterMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribealter.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribeAlterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscribealter.FieldDeletedAt) {
		fields = append(fields, subscribealter.FieldDeletedAt)
	}
	if m.FieldCleared(subscribealter.FieldCreator) {
		fields = append(fields, subscribealter.FieldCreator)
	}
	if m.FieldCleared(subscribealter.FieldLastModifier) {
		fields = append(fields, subscribealter.FieldLastModifier)
	}
	if m.FieldCleared(subscribealter.FieldRemark) {
		fields = append(fields, subscribealter.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribeAlterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribeAlterMutation) ClearField(name string) error {
	switch name {
	case subscribealter.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case subscribealter.FieldCreator:
		m.ClearCreator()
		return nil
	case subscribealter.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case subscribealter.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribeAlterMutation) ResetField(name string) error {
	switch name {
	case subscribealter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscribealter.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscribealter.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case subscribealter.FieldCreator:
		m.ResetCreator()
		return nil
	case subscribealter.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case subscribealter.FieldRemark:
		m.ResetRemark()
		return nil
	case subscribealter.FieldRiderID:
		m.ResetRiderID()
		return nil
	case subscribealter.FieldManagerID:
		m.ResetManagerID()
		return nil
	case subscribealter.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case subscribealter.FieldDays:
		m.ResetDays()
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribeAlterMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.rider != nil {
		edges = append(edges, subscribealter.EdgeRider)
	}
	if m.manager != nil {
		edges = append(edges, subscribealter.EdgeManager)
	}
	if m.subscribe != nil {
		edges = append(edges, subscribealter.EdgeSubscribe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribeAlterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscribealter.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case subscribealter.EdgeManager:
		if id := m.manager; id != nil {
			return []ent.Value{*id}
		}
	case subscribealter.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribeAlterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribeAlterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribeAlterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrider {
		edges = append(edges, subscribealter.EdgeRider)
	}
	if m.clearedmanager {
		edges = append(edges, subscribealter.EdgeManager)
	}
	if m.clearedsubscribe {
		edges = append(edges, subscribealter.EdgeSubscribe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribeAlterMutation) EdgeCleared(name string) bool {
	switch name {
	case subscribealter.EdgeRider:
		return m.clearedrider
	case subscribealter.EdgeManager:
		return m.clearedmanager
	case subscribealter.EdgeSubscribe:
		return m.clearedsubscribe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribeAlterMutation) ClearEdge(name string) error {
	switch name {
	case subscribealter.EdgeRider:
		m.ClearRider()
		return nil
	case subscribealter.EdgeManager:
		m.ClearManager()
		return nil
	case subscribealter.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribeAlterMutation) ResetEdge(name string) error {
	switch name {
	case subscribealter.EdgeRider:
		m.ResetRider()
		return nil
	case subscribealter.EdgeManager:
		m.ResetManager()
		return nil
	case subscribealter.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	}
	return fmt.Errorf("unknown SubscribeAlter edge %s", name)
}

