// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
)

// PromotionLevelTaskCreate is the builder for creating a PromotionLevelTask entity.
type PromotionLevelTaskCreate struct {
	config
	mutation *PromotionLevelTaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pltc *PromotionLevelTaskCreate) SetCreatedAt(t time.Time) *PromotionLevelTaskCreate {
	pltc.mutation.SetCreatedAt(t)
	return pltc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pltc *PromotionLevelTaskCreate) SetNillableCreatedAt(t *time.Time) *PromotionLevelTaskCreate {
	if t != nil {
		pltc.SetCreatedAt(*t)
	}
	return pltc
}

// SetUpdatedAt sets the "updated_at" field.
func (pltc *PromotionLevelTaskCreate) SetUpdatedAt(t time.Time) *PromotionLevelTaskCreate {
	pltc.mutation.SetUpdatedAt(t)
	return pltc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pltc *PromotionLevelTaskCreate) SetNillableUpdatedAt(t *time.Time) *PromotionLevelTaskCreate {
	if t != nil {
		pltc.SetUpdatedAt(*t)
	}
	return pltc
}

// SetCreator sets the "creator" field.
func (pltc *PromotionLevelTaskCreate) SetCreator(m *model.Modifier) *PromotionLevelTaskCreate {
	pltc.mutation.SetCreator(m)
	return pltc
}

// SetLastModifier sets the "last_modifier" field.
func (pltc *PromotionLevelTaskCreate) SetLastModifier(m *model.Modifier) *PromotionLevelTaskCreate {
	pltc.mutation.SetLastModifier(m)
	return pltc
}

// SetRemark sets the "remark" field.
func (pltc *PromotionLevelTaskCreate) SetRemark(s string) *PromotionLevelTaskCreate {
	pltc.mutation.SetRemark(s)
	return pltc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pltc *PromotionLevelTaskCreate) SetNillableRemark(s *string) *PromotionLevelTaskCreate {
	if s != nil {
		pltc.SetRemark(*s)
	}
	return pltc
}

// SetName sets the "name" field.
func (pltc *PromotionLevelTaskCreate) SetName(s string) *PromotionLevelTaskCreate {
	pltc.mutation.SetName(s)
	return pltc
}

// SetDescription sets the "description" field.
func (pltc *PromotionLevelTaskCreate) SetDescription(s string) *PromotionLevelTaskCreate {
	pltc.mutation.SetDescription(s)
	return pltc
}

// SetType sets the "type" field.
func (pltc *PromotionLevelTaskCreate) SetType(u uint8) *PromotionLevelTaskCreate {
	pltc.mutation.SetType(u)
	return pltc
}

// SetGrowthValue sets the "growth_value" field.
func (pltc *PromotionLevelTaskCreate) SetGrowthValue(u uint64) *PromotionLevelTaskCreate {
	pltc.mutation.SetGrowthValue(u)
	return pltc
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (pltc *PromotionLevelTaskCreate) SetNillableGrowthValue(u *uint64) *PromotionLevelTaskCreate {
	if u != nil {
		pltc.SetGrowthValue(*u)
	}
	return pltc
}

// SetKey sets the "key" field.
func (pltc *PromotionLevelTaskCreate) SetKey(s string) *PromotionLevelTaskCreate {
	pltc.mutation.SetKey(s)
	return pltc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pltc *PromotionLevelTaskCreate) SetNillableKey(s *string) *PromotionLevelTaskCreate {
	if s != nil {
		pltc.SetKey(*s)
	}
	return pltc
}

// Mutation returns the PromotionLevelTaskMutation object of the builder.
func (pltc *PromotionLevelTaskCreate) Mutation() *PromotionLevelTaskMutation {
	return pltc.mutation
}

// Save creates the PromotionLevelTask in the database.
func (pltc *PromotionLevelTaskCreate) Save(ctx context.Context) (*PromotionLevelTask, error) {
	if err := pltc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pltc.sqlSave, pltc.mutation, pltc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pltc *PromotionLevelTaskCreate) SaveX(ctx context.Context) *PromotionLevelTask {
	v, err := pltc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pltc *PromotionLevelTaskCreate) Exec(ctx context.Context) error {
	_, err := pltc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pltc *PromotionLevelTaskCreate) ExecX(ctx context.Context) {
	if err := pltc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pltc *PromotionLevelTaskCreate) defaults() error {
	if _, ok := pltc.mutation.CreatedAt(); !ok {
		if promotionleveltask.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionleveltask.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionleveltask.DefaultCreatedAt()
		pltc.mutation.SetCreatedAt(v)
	}
	if _, ok := pltc.mutation.UpdatedAt(); !ok {
		if promotionleveltask.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionleveltask.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionleveltask.DefaultUpdatedAt()
		pltc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pltc.mutation.GrowthValue(); !ok {
		v := promotionleveltask.DefaultGrowthValue
		pltc.mutation.SetGrowthValue(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pltc *PromotionLevelTaskCreate) check() error {
	if _, ok := pltc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionLevelTask.created_at"`)}
	}
	if _, ok := pltc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionLevelTask.updated_at"`)}
	}
	if _, ok := pltc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PromotionLevelTask.name"`)}
	}
	if _, ok := pltc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PromotionLevelTask.description"`)}
	}
	if _, ok := pltc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PromotionLevelTask.type"`)}
	}
	if _, ok := pltc.mutation.GrowthValue(); !ok {
		return &ValidationError{Name: "growth_value", err: errors.New(`ent: missing required field "PromotionLevelTask.growth_value"`)}
	}
	return nil
}

func (pltc *PromotionLevelTaskCreate) sqlSave(ctx context.Context) (*PromotionLevelTask, error) {
	if err := pltc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pltc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pltc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pltc.mutation.id = &_node.ID
	pltc.mutation.done = true
	return _node, nil
}

func (pltc *PromotionLevelTaskCreate) createSpec() (*PromotionLevelTask, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionLevelTask{config: pltc.config}
		_spec = sqlgraph.NewCreateSpec(promotionleveltask.Table, sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pltc.conflict
	if value, ok := pltc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionleveltask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pltc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionleveltask.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pltc.mutation.Creator(); ok {
		_spec.SetField(promotionleveltask.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pltc.mutation.LastModifier(); ok {
		_spec.SetField(promotionleveltask.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pltc.mutation.Remark(); ok {
		_spec.SetField(promotionleveltask.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pltc.mutation.Name(); ok {
		_spec.SetField(promotionleveltask.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pltc.mutation.Description(); ok {
		_spec.SetField(promotionleveltask.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pltc.mutation.GetType(); ok {
		_spec.SetField(promotionleveltask.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := pltc.mutation.GrowthValue(); ok {
		_spec.SetField(promotionleveltask.FieldGrowthValue, field.TypeUint64, value)
		_node.GrowthValue = value
	}
	if value, ok := pltc.mutation.Key(); ok {
		_spec.SetField(promotionleveltask.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionLevelTask.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionLevelTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pltc *PromotionLevelTaskCreate) OnConflict(opts ...sql.ConflictOption) *PromotionLevelTaskUpsertOne {
	pltc.conflict = opts
	return &PromotionLevelTaskUpsertOne{
		create: pltc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pltc *PromotionLevelTaskCreate) OnConflictColumns(columns ...string) *PromotionLevelTaskUpsertOne {
	pltc.conflict = append(pltc.conflict, sql.ConflictColumns(columns...))
	return &PromotionLevelTaskUpsertOne{
		create: pltc,
	}
}

type (
	// PromotionLevelTaskUpsertOne is the builder for "upsert"-ing
	//  one PromotionLevelTask node.
	PromotionLevelTaskUpsertOne struct {
		create *PromotionLevelTaskCreate
	}

	// PromotionLevelTaskUpsert is the "OnConflict" setter.
	PromotionLevelTaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelTaskUpsert) SetUpdatedAt(v time.Time) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateUpdatedAt() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelTaskUpsert) SetLastModifier(v *model.Modifier) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateLastModifier() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelTaskUpsert) ClearLastModifier() *PromotionLevelTaskUpsert {
	u.SetNull(promotionleveltask.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelTaskUpsert) SetRemark(v string) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateRemark() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelTaskUpsert) ClearRemark() *PromotionLevelTaskUpsert {
	u.SetNull(promotionleveltask.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *PromotionLevelTaskUpsert) SetName(v string) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateName() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *PromotionLevelTaskUpsert) SetDescription(v string) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateDescription() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldDescription)
	return u
}

// SetType sets the "type" field.
func (u *PromotionLevelTaskUpsert) SetType(v uint8) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateType() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PromotionLevelTaskUpsert) AddType(v uint8) *PromotionLevelTaskUpsert {
	u.Add(promotionleveltask.FieldType, v)
	return u
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelTaskUpsert) SetGrowthValue(v uint64) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldGrowthValue, v)
	return u
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateGrowthValue() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldGrowthValue)
	return u
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelTaskUpsert) AddGrowthValue(v uint64) *PromotionLevelTaskUpsert {
	u.Add(promotionleveltask.FieldGrowthValue, v)
	return u
}

// SetKey sets the "key" field.
func (u *PromotionLevelTaskUpsert) SetKey(v string) *PromotionLevelTaskUpsert {
	u.Set(promotionleveltask.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsert) UpdateKey() *PromotionLevelTaskUpsert {
	u.SetExcluded(promotionleveltask.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *PromotionLevelTaskUpsert) ClearKey() *PromotionLevelTaskUpsert {
	u.SetNull(promotionleveltask.FieldKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionLevelTaskUpsertOne) UpdateNewValues() *PromotionLevelTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionleveltask.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionleveltask.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionLevelTaskUpsertOne) Ignore() *PromotionLevelTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionLevelTaskUpsertOne) DoNothing() *PromotionLevelTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionLevelTaskCreate.OnConflict
// documentation for more info.
func (u *PromotionLevelTaskUpsertOne) Update(set func(*PromotionLevelTaskUpsert)) *PromotionLevelTaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionLevelTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelTaskUpsertOne) SetUpdatedAt(v time.Time) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateUpdatedAt() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelTaskUpsertOne) SetLastModifier(v *model.Modifier) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateLastModifier() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelTaskUpsertOne) ClearLastModifier() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelTaskUpsertOne) SetRemark(v string) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateRemark() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelTaskUpsertOne) ClearRemark() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *PromotionLevelTaskUpsertOne) SetName(v string) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateName() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PromotionLevelTaskUpsertOne) SetDescription(v string) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateDescription() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateDescription()
	})
}

// SetType sets the "type" field.
func (u *PromotionLevelTaskUpsertOne) SetType(v uint8) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionLevelTaskUpsertOne) AddType(v uint8) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateType() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateType()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelTaskUpsertOne) SetGrowthValue(v uint64) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelTaskUpsertOne) AddGrowthValue(v uint64) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateGrowthValue() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateGrowthValue()
	})
}

// SetKey sets the "key" field.
func (u *PromotionLevelTaskUpsertOne) SetKey(v string) *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertOne) UpdateKey() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *PromotionLevelTaskUpsertOne) ClearKey() *PromotionLevelTaskUpsertOne {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *PromotionLevelTaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionLevelTaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionLevelTaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionLevelTaskUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionLevelTaskUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionLevelTaskCreateBulk is the builder for creating many PromotionLevelTask entities in bulk.
type PromotionLevelTaskCreateBulk struct {
	config
	err      error
	builders []*PromotionLevelTaskCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionLevelTask entities in the database.
func (pltcb *PromotionLevelTaskCreateBulk) Save(ctx context.Context) ([]*PromotionLevelTask, error) {
	if pltcb.err != nil {
		return nil, pltcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pltcb.builders))
	nodes := make([]*PromotionLevelTask, len(pltcb.builders))
	mutators := make([]Mutator, len(pltcb.builders))
	for i := range pltcb.builders {
		func(i int, root context.Context) {
			builder := pltcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionLevelTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pltcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pltcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pltcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pltcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pltcb *PromotionLevelTaskCreateBulk) SaveX(ctx context.Context) []*PromotionLevelTask {
	v, err := pltcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pltcb *PromotionLevelTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := pltcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pltcb *PromotionLevelTaskCreateBulk) ExecX(ctx context.Context) {
	if err := pltcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionLevelTask.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionLevelTaskUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pltcb *PromotionLevelTaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionLevelTaskUpsertBulk {
	pltcb.conflict = opts
	return &PromotionLevelTaskUpsertBulk{
		create: pltcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pltcb *PromotionLevelTaskCreateBulk) OnConflictColumns(columns ...string) *PromotionLevelTaskUpsertBulk {
	pltcb.conflict = append(pltcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionLevelTaskUpsertBulk{
		create: pltcb,
	}
}

// PromotionLevelTaskUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionLevelTask nodes.
type PromotionLevelTaskUpsertBulk struct {
	create *PromotionLevelTaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionLevelTaskUpsertBulk) UpdateNewValues() *PromotionLevelTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionleveltask.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionleveltask.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionLevelTask.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionLevelTaskUpsertBulk) Ignore() *PromotionLevelTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionLevelTaskUpsertBulk) DoNothing() *PromotionLevelTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionLevelTaskCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionLevelTaskUpsertBulk) Update(set func(*PromotionLevelTaskUpsert)) *PromotionLevelTaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionLevelTaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionLevelTaskUpsertBulk) SetUpdatedAt(v time.Time) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateUpdatedAt() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionLevelTaskUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateLastModifier() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionLevelTaskUpsertBulk) ClearLastModifier() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionLevelTaskUpsertBulk) SetRemark(v string) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateRemark() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionLevelTaskUpsertBulk) ClearRemark() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *PromotionLevelTaskUpsertBulk) SetName(v string) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateName() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *PromotionLevelTaskUpsertBulk) SetDescription(v string) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateDescription() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateDescription()
	})
}

// SetType sets the "type" field.
func (u *PromotionLevelTaskUpsertBulk) SetType(v uint8) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionLevelTaskUpsertBulk) AddType(v uint8) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateType() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateType()
	})
}

// SetGrowthValue sets the "growth_value" field.
func (u *PromotionLevelTaskUpsertBulk) SetGrowthValue(v uint64) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetGrowthValue(v)
	})
}

// AddGrowthValue adds v to the "growth_value" field.
func (u *PromotionLevelTaskUpsertBulk) AddGrowthValue(v uint64) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.AddGrowthValue(v)
	})
}

// UpdateGrowthValue sets the "growth_value" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateGrowthValue() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateGrowthValue()
	})
}

// SetKey sets the "key" field.
func (u *PromotionLevelTaskUpsertBulk) SetKey(v string) *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *PromotionLevelTaskUpsertBulk) UpdateKey() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *PromotionLevelTaskUpsertBulk) ClearKey() *PromotionLevelTaskUpsertBulk {
	return u.Update(func(s *PromotionLevelTaskUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *PromotionLevelTaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionLevelTaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionLevelTaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionLevelTaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
