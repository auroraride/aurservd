// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
)

// BatteryModel is the model entity for the BatteryModel schema.
type BatteryModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// 型号
	Model string `json:"model,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryModelQuery when eager-loading is set.
	Edges BatteryModelEdges `json:"edges"`
}

// BatteryModelEdges holds the relations/edges for other nodes in the graph.
type BatteryModelEdges struct {
	// Cabinets holds the value of the cabinets edge.
	Cabinets []*Cabinet `json:"cabinets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CabinetsOrErr returns the Cabinets value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryModelEdges) CabinetsOrErr() ([]*Cabinet, error) {
	if e.loadedTypes[0] {
		return e.Cabinets, nil
	}
	return nil, &NotLoadedError{edge: "cabinets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatteryModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batterymodel.FieldID:
			values[i] = new(sql.NullInt64)
		case batterymodel.FieldModel:
			values[i] = new(sql.NullString)
		case batterymodel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BatteryModel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatteryModel fields.
func (bm *BatteryModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batterymodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bm.ID = uint64(value.Int64)
		case batterymodel.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				bm.Model = value.String
			}
		case batterymodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bm.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCabinets queries the "cabinets" edge of the BatteryModel entity.
func (bm *BatteryModel) QueryCabinets() *CabinetQuery {
	return NewBatteryModelClient(bm.config).QueryCabinets(bm)
}

// Update returns a builder for updating this BatteryModel.
// Note that you need to call BatteryModel.Unwrap() before calling this method if this BatteryModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (bm *BatteryModel) Update() *BatteryModelUpdateOne {
	return NewBatteryModelClient(bm.config).UpdateOne(bm)
}

// Unwrap unwraps the BatteryModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bm *BatteryModel) Unwrap() *BatteryModel {
	_tx, ok := bm.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatteryModel is not a transactional entity")
	}
	bm.config.driver = _tx.drv
	return bm
}

// String implements the fmt.Stringer.
func (bm *BatteryModel) String() string {
	var builder strings.Builder
	builder.WriteString("BatteryModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bm.ID))
	builder.WriteString("model=")
	builder.WriteString(bm.Model)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BatteryModels is a parsable slice of BatteryModel.
type BatteryModels []*BatteryModel
