// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
)

// BatteryModel is the model entity for the BatteryModel schema.
type BatteryModel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// Voltage holds the value of the "voltage" field.
	// 电压
	Voltage float64 `json:"voltage,omitempty"`
	// Capacity holds the value of the "capacity" field.
	// 容量
	Capacity float64 `json:"capacity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryModelQuery when eager-loading is set.
	Edges BatteryModelEdges `json:"edges"`
}

// BatteryModelEdges holds the relations/edges for other nodes in the graph.
type BatteryModelEdges struct {
	// Cabinets holds the value of the cabinets edge.
	Cabinets []*Cabinet `json:"cabinets,omitempty"`
	// Plans holds the value of the plans edge.
	Plans []*Plan `json:"plans,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CabinetsOrErr returns the Cabinets value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryModelEdges) CabinetsOrErr() ([]*Cabinet, error) {
	if e.loadedTypes[0] {
		return e.Cabinets, nil
	}
	return nil, &NotLoadedError{edge: "cabinets"}
}

// PlansOrErr returns the Plans value or an error if the edge
// was not loaded in eager-loading.
func (e BatteryModelEdges) PlansOrErr() ([]*Plan, error) {
	if e.loadedTypes[1] {
		return e.Plans, nil
	}
	return nil, &NotLoadedError{edge: "plans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatteryModel) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case batterymodel.FieldCreator, batterymodel.FieldLastModifier:
			values[i] = new([]byte)
		case batterymodel.FieldVoltage, batterymodel.FieldCapacity:
			values[i] = new(sql.NullFloat64)
		case batterymodel.FieldID:
			values[i] = new(sql.NullInt64)
		case batterymodel.FieldRemark:
			values[i] = new(sql.NullString)
		case batterymodel.FieldCreatedAt, batterymodel.FieldUpdatedAt, batterymodel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BatteryModel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatteryModel fields.
func (bm *BatteryModel) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batterymodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bm.ID = uint64(value.Int64)
		case batterymodel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bm.CreatedAt = value.Time
			}
		case batterymodel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bm.UpdatedAt = value.Time
			}
		case batterymodel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bm.DeletedAt = new(time.Time)
				*bm.DeletedAt = value.Time
			}
		case batterymodel.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bm.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case batterymodel.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bm.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case batterymodel.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				bm.Remark = value.String
			}
		case batterymodel.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				bm.Voltage = value.Float64
			}
		case batterymodel.FieldCapacity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				bm.Capacity = value.Float64
			}
		}
	}
	return nil
}

// QueryCabinets queries the "cabinets" edge of the BatteryModel entity.
func (bm *BatteryModel) QueryCabinets() *CabinetQuery {
	return (&BatteryModelClient{config: bm.config}).QueryCabinets(bm)
}

// QueryPlans queries the "plans" edge of the BatteryModel entity.
func (bm *BatteryModel) QueryPlans() *PlanQuery {
	return (&BatteryModelClient{config: bm.config}).QueryPlans(bm)
}

// Update returns a builder for updating this BatteryModel.
// Note that you need to call BatteryModel.Unwrap() before calling this method if this BatteryModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (bm *BatteryModel) Update() *BatteryModelUpdateOne {
	return (&BatteryModelClient{config: bm.config}).UpdateOne(bm)
}

// Unwrap unwraps the BatteryModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bm *BatteryModel) Unwrap() *BatteryModel {
	tx, ok := bm.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatteryModel is not a transactional entity")
	}
	bm.config.driver = tx.drv
	return bm
}

// String implements the fmt.Stringer.
func (bm *BatteryModel) String() string {
	var builder strings.Builder
	builder.WriteString("BatteryModel(")
	builder.WriteString(fmt.Sprintf("id=%v", bm.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(bm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(bm.UpdatedAt.Format(time.ANSIC))
	if v := bm.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", bm.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", bm.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(bm.Remark)
	builder.WriteString(", voltage=")
	builder.WriteString(fmt.Sprintf("%v", bm.Voltage))
	builder.WriteString(", capacity=")
	builder.WriteString(fmt.Sprintf("%v", bm.Capacity))
	builder.WriteByte(')')
	return builder.String()
}

// BatteryModels is a parsable slice of BatteryModel.
type BatteryModels []*BatteryModel

func (bm BatteryModels) config(cfg config) {
	for _i := range bm {
		bm[_i].config = cfg
	}
}
