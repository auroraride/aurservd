// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenance"
	"github.com/auroraride/aurservd/internal/ent/assetmaintenancedetails"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetMaintenanceDetailsQuery is the builder for querying AssetMaintenanceDetails entities.
type AssetMaintenanceDetailsQuery struct {
	config
	ctx             *QueryContext
	order           []assetmaintenancedetails.OrderOption
	inters          []Interceptor
	predicates      []predicate.AssetMaintenanceDetails
	withMaterial    *MaterialQuery
	withAsset       *AssetQuery
	withMaintenance *AssetMaintenanceQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetMaintenanceDetailsQuery builder.
func (amdq *AssetMaintenanceDetailsQuery) Where(ps ...predicate.AssetMaintenanceDetails) *AssetMaintenanceDetailsQuery {
	amdq.predicates = append(amdq.predicates, ps...)
	return amdq
}

// Limit the number of records to be returned by this query.
func (amdq *AssetMaintenanceDetailsQuery) Limit(limit int) *AssetMaintenanceDetailsQuery {
	amdq.ctx.Limit = &limit
	return amdq
}

// Offset to start from.
func (amdq *AssetMaintenanceDetailsQuery) Offset(offset int) *AssetMaintenanceDetailsQuery {
	amdq.ctx.Offset = &offset
	return amdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amdq *AssetMaintenanceDetailsQuery) Unique(unique bool) *AssetMaintenanceDetailsQuery {
	amdq.ctx.Unique = &unique
	return amdq
}

// Order specifies how the records should be ordered.
func (amdq *AssetMaintenanceDetailsQuery) Order(o ...assetmaintenancedetails.OrderOption) *AssetMaintenanceDetailsQuery {
	amdq.order = append(amdq.order, o...)
	return amdq
}

// QueryMaterial chains the current query on the "material" edge.
func (amdq *AssetMaintenanceDetailsQuery) QueryMaterial() *MaterialQuery {
	query := (&MaterialClient{config: amdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, selector),
			sqlgraph.To(material.Table, material.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assetmaintenancedetails.MaterialTable, assetmaintenancedetails.MaterialColumn),
		)
		fromU = sqlgraph.SetNeighbors(amdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (amdq *AssetMaintenanceDetailsQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: amdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmaintenancedetails.AssetTable, assetmaintenancedetails.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(amdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMaintenance chains the current query on the "maintenance" edge.
func (amdq *AssetMaintenanceDetailsQuery) QueryMaintenance() *AssetMaintenanceQuery {
	query := (&AssetMaintenanceClient{config: amdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assetmaintenancedetails.Table, assetmaintenancedetails.FieldID, selector),
			sqlgraph.To(assetmaintenance.Table, assetmaintenance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assetmaintenancedetails.MaintenanceTable, assetmaintenancedetails.MaintenanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(amdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetMaintenanceDetails entity from the query.
// Returns a *NotFoundError when no AssetMaintenanceDetails was found.
func (amdq *AssetMaintenanceDetailsQuery) First(ctx context.Context) (*AssetMaintenanceDetails, error) {
	nodes, err := amdq.Limit(1).All(setContextOp(ctx, amdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assetmaintenancedetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) FirstX(ctx context.Context) *AssetMaintenanceDetails {
	node, err := amdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetMaintenanceDetails ID from the query.
// Returns a *NotFoundError when no AssetMaintenanceDetails ID was found.
func (amdq *AssetMaintenanceDetailsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = amdq.Limit(1).IDs(setContextOp(ctx, amdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assetmaintenancedetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := amdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetMaintenanceDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetMaintenanceDetails entity is found.
// Returns a *NotFoundError when no AssetMaintenanceDetails entities are found.
func (amdq *AssetMaintenanceDetailsQuery) Only(ctx context.Context) (*AssetMaintenanceDetails, error) {
	nodes, err := amdq.Limit(2).All(setContextOp(ctx, amdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assetmaintenancedetails.Label}
	default:
		return nil, &NotSingularError{assetmaintenancedetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) OnlyX(ctx context.Context) *AssetMaintenanceDetails {
	node, err := amdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetMaintenanceDetails ID in the query.
// Returns a *NotSingularError when more than one AssetMaintenanceDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (amdq *AssetMaintenanceDetailsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = amdq.Limit(2).IDs(setContextOp(ctx, amdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assetmaintenancedetails.Label}
	default:
		err = &NotSingularError{assetmaintenancedetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := amdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetMaintenanceDetailsSlice.
func (amdq *AssetMaintenanceDetailsQuery) All(ctx context.Context) ([]*AssetMaintenanceDetails, error) {
	ctx = setContextOp(ctx, amdq.ctx, "All")
	if err := amdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetMaintenanceDetails, *AssetMaintenanceDetailsQuery]()
	return withInterceptors[[]*AssetMaintenanceDetails](ctx, amdq, qr, amdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) AllX(ctx context.Context) []*AssetMaintenanceDetails {
	nodes, err := amdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetMaintenanceDetails IDs.
func (amdq *AssetMaintenanceDetailsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if amdq.ctx.Unique == nil && amdq.path != nil {
		amdq.Unique(true)
	}
	ctx = setContextOp(ctx, amdq.ctx, "IDs")
	if err = amdq.Select(assetmaintenancedetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := amdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amdq *AssetMaintenanceDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, amdq.ctx, "Count")
	if err := amdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, amdq, querierCount[*AssetMaintenanceDetailsQuery](), amdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) CountX(ctx context.Context) int {
	count, err := amdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amdq *AssetMaintenanceDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, amdq.ctx, "Exist")
	switch _, err := amdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (amdq *AssetMaintenanceDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := amdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetMaintenanceDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amdq *AssetMaintenanceDetailsQuery) Clone() *AssetMaintenanceDetailsQuery {
	if amdq == nil {
		return nil
	}
	return &AssetMaintenanceDetailsQuery{
		config:          amdq.config,
		ctx:             amdq.ctx.Clone(),
		order:           append([]assetmaintenancedetails.OrderOption{}, amdq.order...),
		inters:          append([]Interceptor{}, amdq.inters...),
		predicates:      append([]predicate.AssetMaintenanceDetails{}, amdq.predicates...),
		withMaterial:    amdq.withMaterial.Clone(),
		withAsset:       amdq.withAsset.Clone(),
		withMaintenance: amdq.withMaintenance.Clone(),
		// clone intermediate query.
		sql:  amdq.sql.Clone(),
		path: amdq.path,
	}
}

// WithMaterial tells the query-builder to eager-load the nodes that are connected to
// the "material" edge. The optional arguments are used to configure the query builder of the edge.
func (amdq *AssetMaintenanceDetailsQuery) WithMaterial(opts ...func(*MaterialQuery)) *AssetMaintenanceDetailsQuery {
	query := (&MaterialClient{config: amdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amdq.withMaterial = query
	return amdq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (amdq *AssetMaintenanceDetailsQuery) WithAsset(opts ...func(*AssetQuery)) *AssetMaintenanceDetailsQuery {
	query := (&AssetClient{config: amdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amdq.withAsset = query
	return amdq
}

// WithMaintenance tells the query-builder to eager-load the nodes that are connected to
// the "maintenance" edge. The optional arguments are used to configure the query builder of the edge.
func (amdq *AssetMaintenanceDetailsQuery) WithMaintenance(opts ...func(*AssetMaintenanceQuery)) *AssetMaintenanceDetailsQuery {
	query := (&AssetMaintenanceClient{config: amdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amdq.withMaintenance = query
	return amdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetMaintenanceDetails.Query().
//		GroupBy(assetmaintenancedetails.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (amdq *AssetMaintenanceDetailsQuery) GroupBy(field string, fields ...string) *AssetMaintenanceDetailsGroupBy {
	amdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetMaintenanceDetailsGroupBy{build: amdq}
	grbuild.flds = &amdq.ctx.Fields
	grbuild.label = assetmaintenancedetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetMaintenanceDetails.Query().
//		Select(assetmaintenancedetails.FieldCreatedAt).
//		Scan(ctx, &v)
func (amdq *AssetMaintenanceDetailsQuery) Select(fields ...string) *AssetMaintenanceDetailsSelect {
	amdq.ctx.Fields = append(amdq.ctx.Fields, fields...)
	sbuild := &AssetMaintenanceDetailsSelect{AssetMaintenanceDetailsQuery: amdq}
	sbuild.label = assetmaintenancedetails.Label
	sbuild.flds, sbuild.scan = &amdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetMaintenanceDetailsSelect configured with the given aggregations.
func (amdq *AssetMaintenanceDetailsQuery) Aggregate(fns ...AggregateFunc) *AssetMaintenanceDetailsSelect {
	return amdq.Select().Aggregate(fns...)
}

func (amdq *AssetMaintenanceDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range amdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, amdq); err != nil {
				return err
			}
		}
	}
	for _, f := range amdq.ctx.Fields {
		if !assetmaintenancedetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if amdq.path != nil {
		prev, err := amdq.path(ctx)
		if err != nil {
			return err
		}
		amdq.sql = prev
	}
	return nil
}

func (amdq *AssetMaintenanceDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetMaintenanceDetails, error) {
	var (
		nodes       = []*AssetMaintenanceDetails{}
		_spec       = amdq.querySpec()
		loadedTypes = [3]bool{
			amdq.withMaterial != nil,
			amdq.withAsset != nil,
			amdq.withMaintenance != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetMaintenanceDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetMaintenanceDetails{config: amdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(amdq.modifiers) > 0 {
		_spec.Modifiers = amdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, amdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := amdq.withMaterial; query != nil {
		if err := amdq.loadMaterial(ctx, query, nodes, nil,
			func(n *AssetMaintenanceDetails, e *Material) { n.Edges.Material = e }); err != nil {
			return nil, err
		}
	}
	if query := amdq.withAsset; query != nil {
		if err := amdq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetMaintenanceDetails, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	if query := amdq.withMaintenance; query != nil {
		if err := amdq.loadMaintenance(ctx, query, nodes, nil,
			func(n *AssetMaintenanceDetails, e *AssetMaintenance) { n.Edges.Maintenance = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (amdq *AssetMaintenanceDetailsQuery) loadMaterial(ctx context.Context, query *MaterialQuery, nodes []*AssetMaintenanceDetails, init func(*AssetMaintenanceDetails), assign func(*AssetMaintenanceDetails, *Material)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetMaintenanceDetails)
	for i := range nodes {
		if nodes[i].MaterialID == nil {
			continue
		}
		fk := *nodes[i].MaterialID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(material.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "material_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (amdq *AssetMaintenanceDetailsQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetMaintenanceDetails, init func(*AssetMaintenanceDetails), assign func(*AssetMaintenanceDetails, *Asset)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetMaintenanceDetails)
	for i := range nodes {
		fk := nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (amdq *AssetMaintenanceDetailsQuery) loadMaintenance(ctx context.Context, query *AssetMaintenanceQuery, nodes []*AssetMaintenanceDetails, init func(*AssetMaintenanceDetails), assign func(*AssetMaintenanceDetails, *AssetMaintenance)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetMaintenanceDetails)
	for i := range nodes {
		fk := nodes[i].MaintenanceID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assetmaintenance.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "maintenance_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (amdq *AssetMaintenanceDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := amdq.querySpec()
	if len(amdq.modifiers) > 0 {
		_spec.Modifiers = amdq.modifiers
	}
	_spec.Node.Columns = amdq.ctx.Fields
	if len(amdq.ctx.Fields) > 0 {
		_spec.Unique = amdq.ctx.Unique != nil && *amdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, amdq.driver, _spec)
}

func (amdq *AssetMaintenanceDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assetmaintenancedetails.Table, assetmaintenancedetails.Columns, sqlgraph.NewFieldSpec(assetmaintenancedetails.FieldID, field.TypeUint64))
	_spec.From = amdq.sql
	if unique := amdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if amdq.path != nil {
		_spec.Unique = true
	}
	if fields := amdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetmaintenancedetails.FieldID)
		for i := range fields {
			if fields[i] != assetmaintenancedetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if amdq.withMaterial != nil {
			_spec.Node.AddColumnOnce(assetmaintenancedetails.FieldMaterialID)
		}
		if amdq.withAsset != nil {
			_spec.Node.AddColumnOnce(assetmaintenancedetails.FieldAssetID)
		}
		if amdq.withMaintenance != nil {
			_spec.Node.AddColumnOnce(assetmaintenancedetails.FieldMaintenanceID)
		}
	}
	if ps := amdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amdq *AssetMaintenanceDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amdq.driver.Dialect())
	t1 := builder.Table(assetmaintenancedetails.Table)
	columns := amdq.ctx.Fields
	if len(columns) == 0 {
		columns = assetmaintenancedetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amdq.sql != nil {
		selector = amdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amdq.ctx.Unique != nil && *amdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range amdq.modifiers {
		m(selector)
	}
	for _, p := range amdq.predicates {
		p(selector)
	}
	for _, p := range amdq.order {
		p(selector)
	}
	if offset := amdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (amdq *AssetMaintenanceDetailsQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetMaintenanceDetailsSelect {
	amdq.modifiers = append(amdq.modifiers, modifiers...)
	return amdq.Select()
}

type AssetMaintenanceDetailsQueryWith string

var (
	AssetMaintenanceDetailsQueryWithMaterial    AssetMaintenanceDetailsQueryWith = "Material"
	AssetMaintenanceDetailsQueryWithAsset       AssetMaintenanceDetailsQueryWith = "Asset"
	AssetMaintenanceDetailsQueryWithMaintenance AssetMaintenanceDetailsQueryWith = "Maintenance"
)

func (amdq *AssetMaintenanceDetailsQuery) With(withEdges ...AssetMaintenanceDetailsQueryWith) *AssetMaintenanceDetailsQuery {
	for _, v := range withEdges {
		switch v {
		case AssetMaintenanceDetailsQueryWithMaterial:
			amdq.WithMaterial()
		case AssetMaintenanceDetailsQueryWithAsset:
			amdq.WithAsset()
		case AssetMaintenanceDetailsQueryWithMaintenance:
			amdq.WithMaintenance()
		}
	}
	return amdq
}

// AssetMaintenanceDetailsGroupBy is the group-by builder for AssetMaintenanceDetails entities.
type AssetMaintenanceDetailsGroupBy struct {
	selector
	build *AssetMaintenanceDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amdgb *AssetMaintenanceDetailsGroupBy) Aggregate(fns ...AggregateFunc) *AssetMaintenanceDetailsGroupBy {
	amdgb.fns = append(amdgb.fns, fns...)
	return amdgb
}

// Scan applies the selector query and scans the result into the given value.
func (amdgb *AssetMaintenanceDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, amdgb.build.ctx, "GroupBy")
	if err := amdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetMaintenanceDetailsQuery, *AssetMaintenanceDetailsGroupBy](ctx, amdgb.build, amdgb, amdgb.build.inters, v)
}

func (amdgb *AssetMaintenanceDetailsGroupBy) sqlScan(ctx context.Context, root *AssetMaintenanceDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(amdgb.fns))
	for _, fn := range amdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*amdgb.flds)+len(amdgb.fns))
		for _, f := range *amdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*amdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetMaintenanceDetailsSelect is the builder for selecting fields of AssetMaintenanceDetails entities.
type AssetMaintenanceDetailsSelect struct {
	*AssetMaintenanceDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (amds *AssetMaintenanceDetailsSelect) Aggregate(fns ...AggregateFunc) *AssetMaintenanceDetailsSelect {
	amds.fns = append(amds.fns, fns...)
	return amds
}

// Scan applies the selector query and scans the result into the given value.
func (amds *AssetMaintenanceDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, amds.ctx, "Select")
	if err := amds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetMaintenanceDetailsQuery, *AssetMaintenanceDetailsSelect](ctx, amds.AssetMaintenanceDetailsQuery, amds, amds.inters, v)
}

func (amds *AssetMaintenanceDetailsSelect) sqlScan(ctx context.Context, root *AssetMaintenanceDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(amds.fns))
	for _, fn := range amds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*amds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (amds *AssetMaintenanceDetailsSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetMaintenanceDetailsSelect {
	amds.modifiers = append(amds.modifiers, modifiers...)
	return amds
}
