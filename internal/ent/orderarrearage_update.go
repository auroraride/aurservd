// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderarrearage"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderArrearageUpdate is the builder for updating OrderArrearage entities.
type OrderArrearageUpdate struct {
	config
	hooks    []Hook
	mutation *OrderArrearageMutation
}

// Where appends a list predicates to the OrderArrearageUpdate builder.
func (oau *OrderArrearageUpdate) Where(ps ...predicate.OrderArrearage) *OrderArrearageUpdate {
	oau.mutation.Where(ps...)
	return oau
}

// SetUpdatedAt sets the "updated_at" field.
func (oau *OrderArrearageUpdate) SetUpdatedAt(t time.Time) *OrderArrearageUpdate {
	oau.mutation.SetUpdatedAt(t)
	return oau
}

// SetDeletedAt sets the "deleted_at" field.
func (oau *OrderArrearageUpdate) SetDeletedAt(t time.Time) *OrderArrearageUpdate {
	oau.mutation.SetDeletedAt(t)
	return oau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oau *OrderArrearageUpdate) SetNillableDeletedAt(t *time.Time) *OrderArrearageUpdate {
	if t != nil {
		oau.SetDeletedAt(*t)
	}
	return oau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oau *OrderArrearageUpdate) ClearDeletedAt() *OrderArrearageUpdate {
	oau.mutation.ClearDeletedAt()
	return oau
}

// SetLastModifier sets the "last_modifier" field.
func (oau *OrderArrearageUpdate) SetLastModifier(m *model.Modifier) *OrderArrearageUpdate {
	oau.mutation.SetLastModifier(m)
	return oau
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (oau *OrderArrearageUpdate) ClearLastModifier() *OrderArrearageUpdate {
	oau.mutation.ClearLastModifier()
	return oau
}

// SetRemark sets the "remark" field.
func (oau *OrderArrearageUpdate) SetRemark(s string) *OrderArrearageUpdate {
	oau.mutation.SetRemark(s)
	return oau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oau *OrderArrearageUpdate) SetNillableRemark(s *string) *OrderArrearageUpdate {
	if s != nil {
		oau.SetRemark(*s)
	}
	return oau
}

// ClearRemark clears the value of the "remark" field.
func (oau *OrderArrearageUpdate) ClearRemark() *OrderArrearageUpdate {
	oau.mutation.ClearRemark()
	return oau
}

// SetRiderID sets the "rider_id" field.
func (oau *OrderArrearageUpdate) SetRiderID(u uint64) *OrderArrearageUpdate {
	oau.mutation.SetRiderID(u)
	return oau
}

// SetOrderID sets the "order_id" field.
func (oau *OrderArrearageUpdate) SetOrderID(u uint64) *OrderArrearageUpdate {
	oau.mutation.SetOrderID(u)
	return oau
}

// SetRider sets the "rider" edge to the Rider entity.
func (oau *OrderArrearageUpdate) SetRider(r *Rider) *OrderArrearageUpdate {
	return oau.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oau *OrderArrearageUpdate) SetOrder(o *Order) *OrderArrearageUpdate {
	return oau.SetOrderID(o.ID)
}

// Mutation returns the OrderArrearageMutation object of the builder.
func (oau *OrderArrearageUpdate) Mutation() *OrderArrearageMutation {
	return oau.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (oau *OrderArrearageUpdate) ClearRider() *OrderArrearageUpdate {
	oau.mutation.ClearRider()
	return oau
}

// ClearOrder clears the "order" edge to the Order entity.
func (oau *OrderArrearageUpdate) ClearOrder() *OrderArrearageUpdate {
	oau.mutation.ClearOrder()
	return oau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oau *OrderArrearageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := oau.defaults(); err != nil {
		return 0, err
	}
	if len(oau.hooks) == 0 {
		if err = oau.check(); err != nil {
			return 0, err
		}
		affected, err = oau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderArrearageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oau.check(); err != nil {
				return 0, err
			}
			oau.mutation = mutation
			affected, err = oau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oau.hooks) - 1; i >= 0; i-- {
			if oau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oau *OrderArrearageUpdate) SaveX(ctx context.Context) int {
	affected, err := oau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oau *OrderArrearageUpdate) Exec(ctx context.Context) error {
	_, err := oau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oau *OrderArrearageUpdate) ExecX(ctx context.Context) {
	if err := oau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oau *OrderArrearageUpdate) defaults() error {
	if _, ok := oau.mutation.UpdatedAt(); !ok {
		if orderarrearage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderarrearage.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderarrearage.UpdateDefaultUpdatedAt()
		oau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oau *OrderArrearageUpdate) check() error {
	if _, ok := oau.mutation.RiderID(); oau.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderArrearage.rider"`)
	}
	if _, ok := oau.mutation.OrderID(); oau.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderArrearage.order"`)
	}
	return nil
}

func (oau *OrderArrearageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderarrearage.Table,
			Columns: orderarrearage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderarrearage.FieldID,
			},
		},
	}
	if ps := oau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderarrearage.FieldUpdatedAt,
		})
	}
	if value, ok := oau.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderarrearage.FieldDeletedAt,
		})
	}
	if oau.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderarrearage.FieldDeletedAt,
		})
	}
	if oau.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderarrearage.FieldCreator,
		})
	}
	if value, ok := oau.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderarrearage.FieldLastModifier,
		})
	}
	if oau.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderarrearage.FieldLastModifier,
		})
	}
	if value, ok := oau.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderarrearage.FieldRemark,
		})
	}
	if oau.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderarrearage.FieldRemark,
		})
	}
	if oau.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.RiderTable,
			Columns: []string{orderarrearage.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.RiderTable,
			Columns: []string{orderarrearage.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oau.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.OrderTable,
			Columns: []string{orderarrearage.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oau.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.OrderTable,
			Columns: []string{orderarrearage.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderarrearage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderArrearageUpdateOne is the builder for updating a single OrderArrearage entity.
type OrderArrearageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderArrearageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oauo *OrderArrearageUpdateOne) SetUpdatedAt(t time.Time) *OrderArrearageUpdateOne {
	oauo.mutation.SetUpdatedAt(t)
	return oauo
}

// SetDeletedAt sets the "deleted_at" field.
func (oauo *OrderArrearageUpdateOne) SetDeletedAt(t time.Time) *OrderArrearageUpdateOne {
	oauo.mutation.SetDeletedAt(t)
	return oauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oauo *OrderArrearageUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderArrearageUpdateOne {
	if t != nil {
		oauo.SetDeletedAt(*t)
	}
	return oauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oauo *OrderArrearageUpdateOne) ClearDeletedAt() *OrderArrearageUpdateOne {
	oauo.mutation.ClearDeletedAt()
	return oauo
}

// SetLastModifier sets the "last_modifier" field.
func (oauo *OrderArrearageUpdateOne) SetLastModifier(m *model.Modifier) *OrderArrearageUpdateOne {
	oauo.mutation.SetLastModifier(m)
	return oauo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (oauo *OrderArrearageUpdateOne) ClearLastModifier() *OrderArrearageUpdateOne {
	oauo.mutation.ClearLastModifier()
	return oauo
}

// SetRemark sets the "remark" field.
func (oauo *OrderArrearageUpdateOne) SetRemark(s string) *OrderArrearageUpdateOne {
	oauo.mutation.SetRemark(s)
	return oauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oauo *OrderArrearageUpdateOne) SetNillableRemark(s *string) *OrderArrearageUpdateOne {
	if s != nil {
		oauo.SetRemark(*s)
	}
	return oauo
}

// ClearRemark clears the value of the "remark" field.
func (oauo *OrderArrearageUpdateOne) ClearRemark() *OrderArrearageUpdateOne {
	oauo.mutation.ClearRemark()
	return oauo
}

// SetRiderID sets the "rider_id" field.
func (oauo *OrderArrearageUpdateOne) SetRiderID(u uint64) *OrderArrearageUpdateOne {
	oauo.mutation.SetRiderID(u)
	return oauo
}

// SetOrderID sets the "order_id" field.
func (oauo *OrderArrearageUpdateOne) SetOrderID(u uint64) *OrderArrearageUpdateOne {
	oauo.mutation.SetOrderID(u)
	return oauo
}

// SetRider sets the "rider" edge to the Rider entity.
func (oauo *OrderArrearageUpdateOne) SetRider(r *Rider) *OrderArrearageUpdateOne {
	return oauo.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oauo *OrderArrearageUpdateOne) SetOrder(o *Order) *OrderArrearageUpdateOne {
	return oauo.SetOrderID(o.ID)
}

// Mutation returns the OrderArrearageMutation object of the builder.
func (oauo *OrderArrearageUpdateOne) Mutation() *OrderArrearageMutation {
	return oauo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (oauo *OrderArrearageUpdateOne) ClearRider() *OrderArrearageUpdateOne {
	oauo.mutation.ClearRider()
	return oauo
}

// ClearOrder clears the "order" edge to the Order entity.
func (oauo *OrderArrearageUpdateOne) ClearOrder() *OrderArrearageUpdateOne {
	oauo.mutation.ClearOrder()
	return oauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oauo *OrderArrearageUpdateOne) Select(field string, fields ...string) *OrderArrearageUpdateOne {
	oauo.fields = append([]string{field}, fields...)
	return oauo
}

// Save executes the query and returns the updated OrderArrearage entity.
func (oauo *OrderArrearageUpdateOne) Save(ctx context.Context) (*OrderArrearage, error) {
	var (
		err  error
		node *OrderArrearage
	)
	if err := oauo.defaults(); err != nil {
		return nil, err
	}
	if len(oauo.hooks) == 0 {
		if err = oauo.check(); err != nil {
			return nil, err
		}
		node, err = oauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderArrearageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oauo.check(); err != nil {
				return nil, err
			}
			oauo.mutation = mutation
			node, err = oauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oauo.hooks) - 1; i >= 0; i-- {
			if oauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderArrearage)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderArrearageMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oauo *OrderArrearageUpdateOne) SaveX(ctx context.Context) *OrderArrearage {
	node, err := oauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oauo *OrderArrearageUpdateOne) Exec(ctx context.Context) error {
	_, err := oauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oauo *OrderArrearageUpdateOne) ExecX(ctx context.Context) {
	if err := oauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oauo *OrderArrearageUpdateOne) defaults() error {
	if _, ok := oauo.mutation.UpdatedAt(); !ok {
		if orderarrearage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderarrearage.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderarrearage.UpdateDefaultUpdatedAt()
		oauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oauo *OrderArrearageUpdateOne) check() error {
	if _, ok := oauo.mutation.RiderID(); oauo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderArrearage.rider"`)
	}
	if _, ok := oauo.mutation.OrderID(); oauo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderArrearage.order"`)
	}
	return nil
}

func (oauo *OrderArrearageUpdateOne) sqlSave(ctx context.Context) (_node *OrderArrearage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderarrearage.Table,
			Columns: orderarrearage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderarrearage.FieldID,
			},
		},
	}
	id, ok := oauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderArrearage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderarrearage.FieldID)
		for _, f := range fields {
			if !orderarrearage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderarrearage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderarrearage.FieldUpdatedAt,
		})
	}
	if value, ok := oauo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderarrearage.FieldDeletedAt,
		})
	}
	if oauo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderarrearage.FieldDeletedAt,
		})
	}
	if oauo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderarrearage.FieldCreator,
		})
	}
	if value, ok := oauo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderarrearage.FieldLastModifier,
		})
	}
	if oauo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderarrearage.FieldLastModifier,
		})
	}
	if value, ok := oauo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderarrearage.FieldRemark,
		})
	}
	if oauo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderarrearage.FieldRemark,
		})
	}
	if oauo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.RiderTable,
			Columns: []string{orderarrearage.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.RiderTable,
			Columns: []string{orderarrearage.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oauo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.OrderTable,
			Columns: []string{orderarrearage.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oauo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderarrearage.OrderTable,
			Columns: []string{orderarrearage.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderArrearage{config: oauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderarrearage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
