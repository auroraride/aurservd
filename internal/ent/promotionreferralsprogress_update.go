// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionreferralsprogress"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionReferralsProgressUpdate is the builder for updating PromotionReferralsProgress entities.
type PromotionReferralsProgressUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionReferralsProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionReferralsProgressUpdate builder.
func (prpu *PromotionReferralsProgressUpdate) Where(ps ...predicate.PromotionReferralsProgress) *PromotionReferralsProgressUpdate {
	prpu.mutation.Where(ps...)
	return prpu
}

// SetUpdatedAt sets the "updated_at" field.
func (prpu *PromotionReferralsProgressUpdate) SetUpdatedAt(t time.Time) *PromotionReferralsProgressUpdate {
	prpu.mutation.SetUpdatedAt(t)
	return prpu
}

// SetLastModifier sets the "last_modifier" field.
func (prpu *PromotionReferralsProgressUpdate) SetLastModifier(m *model.Modifier) *PromotionReferralsProgressUpdate {
	prpu.mutation.SetLastModifier(m)
	return prpu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (prpu *PromotionReferralsProgressUpdate) ClearLastModifier() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearLastModifier()
	return prpu
}

// SetRemark sets the "remark" field.
func (prpu *PromotionReferralsProgressUpdate) SetRemark(s string) *PromotionReferralsProgressUpdate {
	prpu.mutation.SetRemark(s)
	return prpu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (prpu *PromotionReferralsProgressUpdate) SetNillableRemark(s *string) *PromotionReferralsProgressUpdate {
	if s != nil {
		prpu.SetRemark(*s)
	}
	return prpu
}

// ClearRemark clears the value of the "remark" field.
func (prpu *PromotionReferralsProgressUpdate) ClearRemark() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearRemark()
	return prpu
}

// SetRiderID sets the "rider_id" field.
func (prpu *PromotionReferralsProgressUpdate) SetRiderID(u uint64) *PromotionReferralsProgressUpdate {
	prpu.mutation.SetRiderID(u)
	return prpu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (prpu *PromotionReferralsProgressUpdate) SetNillableRiderID(u *uint64) *PromotionReferralsProgressUpdate {
	if u != nil {
		prpu.SetRiderID(*u)
	}
	return prpu
}

// ClearRiderID clears the value of the "rider_id" field.
func (prpu *PromotionReferralsProgressUpdate) ClearRiderID() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearRiderID()
	return prpu
}

// SetReferringMemberID sets the "referring_member_id" field.
func (prpu *PromotionReferralsProgressUpdate) SetReferringMemberID(u uint64) *PromotionReferralsProgressUpdate {
	prpu.mutation.ResetReferringMemberID()
	prpu.mutation.SetReferringMemberID(u)
	return prpu
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (prpu *PromotionReferralsProgressUpdate) SetNillableReferringMemberID(u *uint64) *PromotionReferralsProgressUpdate {
	if u != nil {
		prpu.SetReferringMemberID(*u)
	}
	return prpu
}

// AddReferringMemberID adds u to the "referring_member_id" field.
func (prpu *PromotionReferralsProgressUpdate) AddReferringMemberID(u int64) *PromotionReferralsProgressUpdate {
	prpu.mutation.AddReferringMemberID(u)
	return prpu
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (prpu *PromotionReferralsProgressUpdate) ClearReferringMemberID() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearReferringMemberID()
	return prpu
}

// SetReferredMemberID sets the "referred_member_id" field.
func (prpu *PromotionReferralsProgressUpdate) SetReferredMemberID(u uint64) *PromotionReferralsProgressUpdate {
	prpu.mutation.ResetReferredMemberID()
	prpu.mutation.SetReferredMemberID(u)
	return prpu
}

// AddReferredMemberID adds u to the "referred_member_id" field.
func (prpu *PromotionReferralsProgressUpdate) AddReferredMemberID(u int64) *PromotionReferralsProgressUpdate {
	prpu.mutation.AddReferredMemberID(u)
	return prpu
}

// SetName sets the "name" field.
func (prpu *PromotionReferralsProgressUpdate) SetName(s string) *PromotionReferralsProgressUpdate {
	prpu.mutation.SetName(s)
	return prpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (prpu *PromotionReferralsProgressUpdate) SetNillableName(s *string) *PromotionReferralsProgressUpdate {
	if s != nil {
		prpu.SetName(*s)
	}
	return prpu
}

// ClearName clears the value of the "name" field.
func (prpu *PromotionReferralsProgressUpdate) ClearName() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearName()
	return prpu
}

// SetStatus sets the "status" field.
func (prpu *PromotionReferralsProgressUpdate) SetStatus(u uint8) *PromotionReferralsProgressUpdate {
	prpu.mutation.ResetStatus()
	prpu.mutation.SetStatus(u)
	return prpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (prpu *PromotionReferralsProgressUpdate) SetNillableStatus(u *uint8) *PromotionReferralsProgressUpdate {
	if u != nil {
		prpu.SetStatus(*u)
	}
	return prpu
}

// AddStatus adds u to the "status" field.
func (prpu *PromotionReferralsProgressUpdate) AddStatus(u int8) *PromotionReferralsProgressUpdate {
	prpu.mutation.AddStatus(u)
	return prpu
}

// SetRider sets the "rider" edge to the Rider entity.
func (prpu *PromotionReferralsProgressUpdate) SetRider(r *Rider) *PromotionReferralsProgressUpdate {
	return prpu.SetRiderID(r.ID)
}

// Mutation returns the PromotionReferralsProgressMutation object of the builder.
func (prpu *PromotionReferralsProgressUpdate) Mutation() *PromotionReferralsProgressMutation {
	return prpu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (prpu *PromotionReferralsProgressUpdate) ClearRider() *PromotionReferralsProgressUpdate {
	prpu.mutation.ClearRider()
	return prpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prpu *PromotionReferralsProgressUpdate) Save(ctx context.Context) (int, error) {
	if err := prpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, prpu.sqlSave, prpu.mutation, prpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prpu *PromotionReferralsProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := prpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prpu *PromotionReferralsProgressUpdate) Exec(ctx context.Context) error {
	_, err := prpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prpu *PromotionReferralsProgressUpdate) ExecX(ctx context.Context) {
	if err := prpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prpu *PromotionReferralsProgressUpdate) defaults() error {
	if _, ok := prpu.mutation.UpdatedAt(); !ok {
		if promotionreferralsprogress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferralsprogress.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferralsprogress.UpdateDefaultUpdatedAt()
		prpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prpu *PromotionReferralsProgressUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionReferralsProgressUpdate {
	prpu.modifiers = append(prpu.modifiers, modifiers...)
	return prpu
}

func (prpu *PromotionReferralsProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionreferralsprogress.Table, promotionreferralsprogress.Columns, sqlgraph.NewFieldSpec(promotionreferralsprogress.FieldID, field.TypeUint64))
	if ps := prpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prpu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferralsprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if prpu.mutation.CreatorCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldCreator, field.TypeJSON)
	}
	if value, ok := prpu.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferralsprogress.FieldLastModifier, field.TypeJSON, value)
	}
	if prpu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := prpu.mutation.Remark(); ok {
		_spec.SetField(promotionreferralsprogress.FieldRemark, field.TypeString, value)
	}
	if prpu.mutation.RemarkCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldRemark, field.TypeString)
	}
	if value, ok := prpu.mutation.ReferringMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64, value)
	}
	if value, ok := prpu.mutation.AddedReferringMemberID(); ok {
		_spec.AddField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64, value)
	}
	if prpu.mutation.ReferringMemberIDCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64)
	}
	if value, ok := prpu.mutation.ReferredMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferredMemberID, field.TypeUint64, value)
	}
	if value, ok := prpu.mutation.AddedReferredMemberID(); ok {
		_spec.AddField(promotionreferralsprogress.FieldReferredMemberID, field.TypeUint64, value)
	}
	if value, ok := prpu.mutation.Name(); ok {
		_spec.SetField(promotionreferralsprogress.FieldName, field.TypeString, value)
	}
	if prpu.mutation.NameCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldName, field.TypeString)
	}
	if value, ok := prpu.mutation.Status(); ok {
		_spec.SetField(promotionreferralsprogress.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := prpu.mutation.AddedStatus(); ok {
		_spec.AddField(promotionreferralsprogress.FieldStatus, field.TypeUint8, value)
	}
	if prpu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionreferralsprogress.RiderTable,
			Columns: []string{promotionreferralsprogress.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prpu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionreferralsprogress.RiderTable,
			Columns: []string{promotionreferralsprogress.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(prpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, prpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionreferralsprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prpu.mutation.done = true
	return n, nil
}

// PromotionReferralsProgressUpdateOne is the builder for updating a single PromotionReferralsProgress entity.
type PromotionReferralsProgressUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionReferralsProgressMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetUpdatedAt(t time.Time) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.SetUpdatedAt(t)
	return prpuo
}

// SetLastModifier sets the "last_modifier" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetLastModifier(m *model.Modifier) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.SetLastModifier(m)
	return prpuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearLastModifier() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearLastModifier()
	return prpuo
}

// SetRemark sets the "remark" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetRemark(s string) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.SetRemark(s)
	return prpuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (prpuo *PromotionReferralsProgressUpdateOne) SetNillableRemark(s *string) *PromotionReferralsProgressUpdateOne {
	if s != nil {
		prpuo.SetRemark(*s)
	}
	return prpuo
}

// ClearRemark clears the value of the "remark" field.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearRemark() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearRemark()
	return prpuo
}

// SetRiderID sets the "rider_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetRiderID(u uint64) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.SetRiderID(u)
	return prpuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (prpuo *PromotionReferralsProgressUpdateOne) SetNillableRiderID(u *uint64) *PromotionReferralsProgressUpdateOne {
	if u != nil {
		prpuo.SetRiderID(*u)
	}
	return prpuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearRiderID() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearRiderID()
	return prpuo
}

// SetReferringMemberID sets the "referring_member_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetReferringMemberID(u uint64) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ResetReferringMemberID()
	prpuo.mutation.SetReferringMemberID(u)
	return prpuo
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (prpuo *PromotionReferralsProgressUpdateOne) SetNillableReferringMemberID(u *uint64) *PromotionReferralsProgressUpdateOne {
	if u != nil {
		prpuo.SetReferringMemberID(*u)
	}
	return prpuo
}

// AddReferringMemberID adds u to the "referring_member_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) AddReferringMemberID(u int64) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.AddReferringMemberID(u)
	return prpuo
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearReferringMemberID() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearReferringMemberID()
	return prpuo
}

// SetReferredMemberID sets the "referred_member_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetReferredMemberID(u uint64) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ResetReferredMemberID()
	prpuo.mutation.SetReferredMemberID(u)
	return prpuo
}

// AddReferredMemberID adds u to the "referred_member_id" field.
func (prpuo *PromotionReferralsProgressUpdateOne) AddReferredMemberID(u int64) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.AddReferredMemberID(u)
	return prpuo
}

// SetName sets the "name" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetName(s string) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.SetName(s)
	return prpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (prpuo *PromotionReferralsProgressUpdateOne) SetNillableName(s *string) *PromotionReferralsProgressUpdateOne {
	if s != nil {
		prpuo.SetName(*s)
	}
	return prpuo
}

// ClearName clears the value of the "name" field.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearName() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearName()
	return prpuo
}

// SetStatus sets the "status" field.
func (prpuo *PromotionReferralsProgressUpdateOne) SetStatus(u uint8) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ResetStatus()
	prpuo.mutation.SetStatus(u)
	return prpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (prpuo *PromotionReferralsProgressUpdateOne) SetNillableStatus(u *uint8) *PromotionReferralsProgressUpdateOne {
	if u != nil {
		prpuo.SetStatus(*u)
	}
	return prpuo
}

// AddStatus adds u to the "status" field.
func (prpuo *PromotionReferralsProgressUpdateOne) AddStatus(u int8) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.AddStatus(u)
	return prpuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (prpuo *PromotionReferralsProgressUpdateOne) SetRider(r *Rider) *PromotionReferralsProgressUpdateOne {
	return prpuo.SetRiderID(r.ID)
}

// Mutation returns the PromotionReferralsProgressMutation object of the builder.
func (prpuo *PromotionReferralsProgressUpdateOne) Mutation() *PromotionReferralsProgressMutation {
	return prpuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (prpuo *PromotionReferralsProgressUpdateOne) ClearRider() *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.ClearRider()
	return prpuo
}

// Where appends a list predicates to the PromotionReferralsProgressUpdate builder.
func (prpuo *PromotionReferralsProgressUpdateOne) Where(ps ...predicate.PromotionReferralsProgress) *PromotionReferralsProgressUpdateOne {
	prpuo.mutation.Where(ps...)
	return prpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prpuo *PromotionReferralsProgressUpdateOne) Select(field string, fields ...string) *PromotionReferralsProgressUpdateOne {
	prpuo.fields = append([]string{field}, fields...)
	return prpuo
}

// Save executes the query and returns the updated PromotionReferralsProgress entity.
func (prpuo *PromotionReferralsProgressUpdateOne) Save(ctx context.Context) (*PromotionReferralsProgress, error) {
	if err := prpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, prpuo.sqlSave, prpuo.mutation, prpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prpuo *PromotionReferralsProgressUpdateOne) SaveX(ctx context.Context) *PromotionReferralsProgress {
	node, err := prpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prpuo *PromotionReferralsProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := prpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prpuo *PromotionReferralsProgressUpdateOne) ExecX(ctx context.Context) {
	if err := prpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prpuo *PromotionReferralsProgressUpdateOne) defaults() error {
	if _, ok := prpuo.mutation.UpdatedAt(); !ok {
		if promotionreferralsprogress.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferralsprogress.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferralsprogress.UpdateDefaultUpdatedAt()
		prpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (prpuo *PromotionReferralsProgressUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionReferralsProgressUpdateOne {
	prpuo.modifiers = append(prpuo.modifiers, modifiers...)
	return prpuo
}

func (prpuo *PromotionReferralsProgressUpdateOne) sqlSave(ctx context.Context) (_node *PromotionReferralsProgress, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionreferralsprogress.Table, promotionreferralsprogress.Columns, sqlgraph.NewFieldSpec(promotionreferralsprogress.FieldID, field.TypeUint64))
	id, ok := prpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionReferralsProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionreferralsprogress.FieldID)
		for _, f := range fields {
			if !promotionreferralsprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionreferralsprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferralsprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if prpuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldCreator, field.TypeJSON)
	}
	if value, ok := prpuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferralsprogress.FieldLastModifier, field.TypeJSON, value)
	}
	if prpuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := prpuo.mutation.Remark(); ok {
		_spec.SetField(promotionreferralsprogress.FieldRemark, field.TypeString, value)
	}
	if prpuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldRemark, field.TypeString)
	}
	if value, ok := prpuo.mutation.ReferringMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64, value)
	}
	if value, ok := prpuo.mutation.AddedReferringMemberID(); ok {
		_spec.AddField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64, value)
	}
	if prpuo.mutation.ReferringMemberIDCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64)
	}
	if value, ok := prpuo.mutation.ReferredMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferredMemberID, field.TypeUint64, value)
	}
	if value, ok := prpuo.mutation.AddedReferredMemberID(); ok {
		_spec.AddField(promotionreferralsprogress.FieldReferredMemberID, field.TypeUint64, value)
	}
	if value, ok := prpuo.mutation.Name(); ok {
		_spec.SetField(promotionreferralsprogress.FieldName, field.TypeString, value)
	}
	if prpuo.mutation.NameCleared() {
		_spec.ClearField(promotionreferralsprogress.FieldName, field.TypeString)
	}
	if value, ok := prpuo.mutation.Status(); ok {
		_spec.SetField(promotionreferralsprogress.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := prpuo.mutation.AddedStatus(); ok {
		_spec.AddField(promotionreferralsprogress.FieldStatus, field.TypeUint8, value)
	}
	if prpuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionreferralsprogress.RiderTable,
			Columns: []string{promotionreferralsprogress.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prpuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionreferralsprogress.RiderTable,
			Columns: []string{promotionreferralsprogress.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(prpuo.modifiers...)
	_node = &PromotionReferralsProgress{config: prpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionreferralsprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prpuo.mutation.done = true
	return _node, nil
}
