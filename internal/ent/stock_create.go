// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// StockCreate is the builder for creating a Stock entity.
type StockCreate struct {
	config
	mutation *StockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *StockCreate) SetCreatedAt(t time.Time) *StockCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StockCreate) SetNillableCreatedAt(t *time.Time) *StockCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StockCreate) SetUpdatedAt(t time.Time) *StockCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StockCreate) SetNillableUpdatedAt(t *time.Time) *StockCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StockCreate) SetDeletedAt(t time.Time) *StockCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StockCreate) SetNillableDeletedAt(t *time.Time) *StockCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetCreator sets the "creator" field.
func (sc *StockCreate) SetCreator(m *model.Modifier) *StockCreate {
	sc.mutation.SetCreator(m)
	return sc
}

// SetLastModifier sets the "last_modifier" field.
func (sc *StockCreate) SetLastModifier(m *model.Modifier) *StockCreate {
	sc.mutation.SetLastModifier(m)
	return sc
}

// SetRemark sets the "remark" field.
func (sc *StockCreate) SetRemark(s string) *StockCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *StockCreate) SetNillableRemark(s *string) *StockCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetCityID sets the "city_id" field.
func (sc *StockCreate) SetCityID(u uint64) *StockCreate {
	sc.mutation.SetCityID(u)
	return sc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableCityID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetCityID(*u)
	}
	return sc
}

// SetSubscribeID sets the "subscribe_id" field.
func (sc *StockCreate) SetSubscribeID(u uint64) *StockCreate {
	sc.mutation.SetSubscribeID(u)
	return sc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableSubscribeID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetSubscribeID(*u)
	}
	return sc
}

// SetEbikeID sets the "ebike_id" field.
func (sc *StockCreate) SetEbikeID(u uint64) *StockCreate {
	sc.mutation.SetEbikeID(u)
	return sc
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableEbikeID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetEbikeID(*u)
	}
	return sc
}

// SetSn sets the "sn" field.
func (sc *StockCreate) SetSn(s string) *StockCreate {
	sc.mutation.SetSn(s)
	return sc
}

// SetType sets the "type" field.
func (sc *StockCreate) SetType(u uint8) *StockCreate {
	sc.mutation.SetType(u)
	return sc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sc *StockCreate) SetNillableType(u *uint8) *StockCreate {
	if u != nil {
		sc.SetType(*u)
	}
	return sc
}

// SetStoreID sets the "store_id" field.
func (sc *StockCreate) SetStoreID(u uint64) *StockCreate {
	sc.mutation.SetStoreID(u)
	return sc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableStoreID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetStoreID(*u)
	}
	return sc
}

// SetCabinetID sets the "cabinet_id" field.
func (sc *StockCreate) SetCabinetID(u uint64) *StockCreate {
	sc.mutation.SetCabinetID(u)
	return sc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableCabinetID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetCabinetID(*u)
	}
	return sc
}

// SetRiderID sets the "rider_id" field.
func (sc *StockCreate) SetRiderID(u uint64) *StockCreate {
	sc.mutation.SetRiderID(u)
	return sc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableRiderID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetRiderID(*u)
	}
	return sc
}

// SetEmployeeID sets the "employee_id" field.
func (sc *StockCreate) SetEmployeeID(u uint64) *StockCreate {
	sc.mutation.SetEmployeeID(u)
	return sc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (sc *StockCreate) SetNillableEmployeeID(u *uint64) *StockCreate {
	if u != nil {
		sc.SetEmployeeID(*u)
	}
	return sc
}

// SetName sets the "name" field.
func (sc *StockCreate) SetName(s string) *StockCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetModel sets the "model" field.
func (sc *StockCreate) SetModel(s string) *StockCreate {
	sc.mutation.SetModel(s)
	return sc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (sc *StockCreate) SetNillableModel(s *string) *StockCreate {
	if s != nil {
		sc.SetModel(*s)
	}
	return sc
}

// SetNum sets the "num" field.
func (sc *StockCreate) SetNum(i int) *StockCreate {
	sc.mutation.SetNum(i)
	return sc
}

// SetMaterial sets the "material" field.
func (sc *StockCreate) SetMaterial(s stock.Material) *StockCreate {
	sc.mutation.SetMaterial(s)
	return sc
}

// SetCity sets the "city" edge to the City entity.
func (sc *StockCreate) SetCity(c *City) *StockCreate {
	return sc.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sc *StockCreate) SetSubscribe(s *Subscribe) *StockCreate {
	return sc.SetSubscribeID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (sc *StockCreate) SetEbike(e *Ebike) *StockCreate {
	return sc.SetEbikeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (sc *StockCreate) SetStore(s *Store) *StockCreate {
	return sc.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (sc *StockCreate) SetCabinet(c *Cabinet) *StockCreate {
	return sc.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (sc *StockCreate) SetRider(r *Rider) *StockCreate {
	return sc.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (sc *StockCreate) SetEmployee(e *Employee) *StockCreate {
	return sc.SetEmployeeID(e.ID)
}

// SetSpouseID sets the "spouse" edge to the Stock entity by ID.
func (sc *StockCreate) SetSpouseID(id uint64) *StockCreate {
	sc.mutation.SetSpouseID(id)
	return sc
}

// SetNillableSpouseID sets the "spouse" edge to the Stock entity by ID if the given value is not nil.
func (sc *StockCreate) SetNillableSpouseID(id *uint64) *StockCreate {
	if id != nil {
		sc = sc.SetSpouseID(*id)
	}
	return sc
}

// SetSpouse sets the "spouse" edge to the Stock entity.
func (sc *StockCreate) SetSpouse(s *Stock) *StockCreate {
	return sc.SetSpouseID(s.ID)
}

// Mutation returns the StockMutation object of the builder.
func (sc *StockCreate) Mutation() *StockMutation {
	return sc.mutation
}

// Save creates the Stock in the database.
func (sc *StockCreate) Save(ctx context.Context) (*Stock, error) {
	var (
		err  error
		node *Stock
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Stock)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StockCreate) SaveX(ctx context.Context) *Stock {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StockCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StockCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StockCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if stock.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := stock.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if stock.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stock.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.GetType(); !ok {
		v := stock.DefaultType
		sc.mutation.SetType(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StockCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Stock.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Stock.updated_at"`)}
	}
	if _, ok := sc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "Stock.sn"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Stock.type"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Stock.name"`)}
	}
	if _, ok := sc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Stock.num"`)}
	}
	if _, ok := sc.mutation.Material(); !ok {
		return &ValidationError{Name: "material", err: errors.New(`ent: missing required field "Stock.material"`)}
	}
	if v, ok := sc.mutation.Material(); ok {
		if err := stock.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Stock.material": %w`, err)}
		}
	}
	return nil
}

func (sc *StockCreate) sqlSave(ctx context.Context) (*Stock, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (sc *StockCreate) createSpec() (*Stock, *sqlgraph.CreateSpec) {
	var (
		_node = &Stock{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stock.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stock.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: stock.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: stock.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sc.mutation.Sn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldSn,
		})
		_node.Sn = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: stock.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldModel,
		})
		_node.Model = &value
	}
	if value, ok := sc.mutation.Num(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldNum,
		})
		_node.Num = value
	}
	if value, ok := sc.mutation.Material(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: stock.FieldMaterial,
		})
		_node.Material = value
	}
	if nodes := sc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EbikeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.stock_spouse = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stock.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *StockCreate) OnConflict(opts ...sql.ConflictOption) *StockUpsertOne {
	sc.conflict = opts
	return &StockUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StockCreate) OnConflictColumns(columns ...string) *StockUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StockUpsertOne{
		create: sc,
	}
}

type (
	// StockUpsertOne is the builder for "upsert"-ing
	//  one Stock node.
	StockUpsertOne struct {
		create *StockCreate
	}

	// StockUpsert is the "OnConflict" setter.
	StockUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *StockUpsert) SetUpdatedAt(v time.Time) *StockUpsert {
	u.Set(stock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockUpsert) UpdateUpdatedAt() *StockUpsert {
	u.SetExcluded(stock.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockUpsert) SetDeletedAt(v time.Time) *StockUpsert {
	u.Set(stock.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockUpsert) UpdateDeletedAt() *StockUpsert {
	u.SetExcluded(stock.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StockUpsert) ClearDeletedAt() *StockUpsert {
	u.SetNull(stock.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *StockUpsert) SetLastModifier(v *model.Modifier) *StockUpsert {
	u.Set(stock.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StockUpsert) UpdateLastModifier() *StockUpsert {
	u.SetExcluded(stock.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StockUpsert) ClearLastModifier() *StockUpsert {
	u.SetNull(stock.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *StockUpsert) SetRemark(v string) *StockUpsert {
	u.Set(stock.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StockUpsert) UpdateRemark() *StockUpsert {
	u.SetExcluded(stock.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *StockUpsert) ClearRemark() *StockUpsert {
	u.SetNull(stock.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *StockUpsert) SetCityID(v uint64) *StockUpsert {
	u.Set(stock.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateCityID() *StockUpsert {
	u.SetExcluded(stock.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *StockUpsert) ClearCityID() *StockUpsert {
	u.SetNull(stock.FieldCityID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *StockUpsert) SetSubscribeID(v uint64) *StockUpsert {
	u.Set(stock.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateSubscribeID() *StockUpsert {
	u.SetExcluded(stock.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *StockUpsert) ClearSubscribeID() *StockUpsert {
	u.SetNull(stock.FieldSubscribeID)
	return u
}

// SetEbikeID sets the "ebike_id" field.
func (u *StockUpsert) SetEbikeID(v uint64) *StockUpsert {
	u.Set(stock.FieldEbikeID, v)
	return u
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateEbikeID() *StockUpsert {
	u.SetExcluded(stock.FieldEbikeID)
	return u
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *StockUpsert) ClearEbikeID() *StockUpsert {
	u.SetNull(stock.FieldEbikeID)
	return u
}

// SetSn sets the "sn" field.
func (u *StockUpsert) SetSn(v string) *StockUpsert {
	u.Set(stock.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StockUpsert) UpdateSn() *StockUpsert {
	u.SetExcluded(stock.FieldSn)
	return u
}

// SetType sets the "type" field.
func (u *StockUpsert) SetType(v uint8) *StockUpsert {
	u.Set(stock.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StockUpsert) UpdateType() *StockUpsert {
	u.SetExcluded(stock.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *StockUpsert) AddType(v uint8) *StockUpsert {
	u.Add(stock.FieldType, v)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *StockUpsert) SetStoreID(v uint64) *StockUpsert {
	u.Set(stock.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateStoreID() *StockUpsert {
	u.SetExcluded(stock.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockUpsert) ClearStoreID() *StockUpsert {
	u.SetNull(stock.FieldStoreID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockUpsert) SetCabinetID(v uint64) *StockUpsert {
	u.Set(stock.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateCabinetID() *StockUpsert {
	u.SetExcluded(stock.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockUpsert) ClearCabinetID() *StockUpsert {
	u.SetNull(stock.FieldCabinetID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *StockUpsert) SetRiderID(v uint64) *StockUpsert {
	u.Set(stock.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateRiderID() *StockUpsert {
	u.SetExcluded(stock.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockUpsert) ClearRiderID() *StockUpsert {
	u.SetNull(stock.FieldRiderID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *StockUpsert) SetEmployeeID(v uint64) *StockUpsert {
	u.Set(stock.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StockUpsert) UpdateEmployeeID() *StockUpsert {
	u.SetExcluded(stock.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StockUpsert) ClearEmployeeID() *StockUpsert {
	u.SetNull(stock.FieldEmployeeID)
	return u
}

// SetName sets the "name" field.
func (u *StockUpsert) SetName(v string) *StockUpsert {
	u.Set(stock.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StockUpsert) UpdateName() *StockUpsert {
	u.SetExcluded(stock.FieldName)
	return u
}

// SetModel sets the "model" field.
func (u *StockUpsert) SetModel(v string) *StockUpsert {
	u.Set(stock.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockUpsert) UpdateModel() *StockUpsert {
	u.SetExcluded(stock.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *StockUpsert) ClearModel() *StockUpsert {
	u.SetNull(stock.FieldModel)
	return u
}

// SetMaterial sets the "material" field.
func (u *StockUpsert) SetMaterial(v stock.Material) *StockUpsert {
	u.Set(stock.FieldMaterial, v)
	return u
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockUpsert) UpdateMaterial() *StockUpsert {
	u.SetExcluded(stock.FieldMaterial)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Stock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StockUpsertOne) UpdateNewValues() *StockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(stock.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(stock.FieldCreator)
		}
		if _, exists := u.create.mutation.Num(); exists {
			s.SetIgnore(stock.FieldNum)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StockUpsertOne) Ignore() *StockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockUpsertOne) DoNothing() *StockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockCreate.OnConflict
// documentation for more info.
func (u *StockUpsertOne) Update(set func(*StockUpsert)) *StockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StockUpsertOne) SetUpdatedAt(v time.Time) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateUpdatedAt() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockUpsertOne) SetDeletedAt(v time.Time) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateDeletedAt() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StockUpsertOne) ClearDeletedAt() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StockUpsertOne) SetLastModifier(v *model.Modifier) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateLastModifier() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StockUpsertOne) ClearLastModifier() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StockUpsertOne) SetRemark(v string) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateRemark() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StockUpsertOne) ClearRemark() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *StockUpsertOne) SetCityID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateCityID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *StockUpsertOne) ClearCityID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearCityID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *StockUpsertOne) SetSubscribeID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateSubscribeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *StockUpsertOne) ClearSubscribeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearSubscribeID()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *StockUpsertOne) SetEbikeID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateEbikeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *StockUpsertOne) ClearEbikeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearEbikeID()
	})
}

// SetSn sets the "sn" field.
func (u *StockUpsertOne) SetSn(v string) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateSn() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateSn()
	})
}

// SetType sets the "type" field.
func (u *StockUpsertOne) SetType(v uint8) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *StockUpsertOne) AddType(v uint8) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateType() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateType()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StockUpsertOne) SetStoreID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateStoreID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockUpsertOne) ClearStoreID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearStoreID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockUpsertOne) SetCabinetID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateCabinetID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockUpsertOne) ClearCabinetID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *StockUpsertOne) SetRiderID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateRiderID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockUpsertOne) ClearRiderID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearRiderID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *StockUpsertOne) SetEmployeeID(v uint64) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateEmployeeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StockUpsertOne) ClearEmployeeID() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearEmployeeID()
	})
}

// SetName sets the "name" field.
func (u *StockUpsertOne) SetName(v string) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateName() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateName()
	})
}

// SetModel sets the "model" field.
func (u *StockUpsertOne) SetModel(v string) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateModel() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *StockUpsertOne) ClearModel() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.ClearModel()
	})
}

// SetMaterial sets the "material" field.
func (u *StockUpsertOne) SetMaterial(v stock.Material) *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockUpsertOne) UpdateMaterial() *StockUpsertOne {
	return u.Update(func(s *StockUpsert) {
		s.UpdateMaterial()
	})
}

// Exec executes the query.
func (u *StockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StockUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StockUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StockCreateBulk is the builder for creating many Stock entities in bulk.
type StockCreateBulk struct {
	config
	builders []*StockCreate
	conflict []sql.ConflictOption
}

// Save creates the Stock entities in the database.
func (scb *StockCreateBulk) Save(ctx context.Context) ([]*Stock, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stock, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StockCreateBulk) SaveX(ctx context.Context) []*Stock {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StockCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StockCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Stock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *StockCreateBulk) OnConflict(opts ...sql.ConflictOption) *StockUpsertBulk {
	scb.conflict = opts
	return &StockUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Stock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StockCreateBulk) OnConflictColumns(columns ...string) *StockUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StockUpsertBulk{
		create: scb,
	}
}

// StockUpsertBulk is the builder for "upsert"-ing
// a bulk of Stock nodes.
type StockUpsertBulk struct {
	create *StockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Stock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StockUpsertBulk) UpdateNewValues() *StockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(stock.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(stock.FieldCreator)
			}
			if _, exists := b.mutation.Num(); exists {
				s.SetIgnore(stock.FieldNum)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Stock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StockUpsertBulk) Ignore() *StockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StockUpsertBulk) DoNothing() *StockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StockCreateBulk.OnConflict
// documentation for more info.
func (u *StockUpsertBulk) Update(set func(*StockUpsert)) *StockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StockUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StockUpsertBulk) SetUpdatedAt(v time.Time) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateUpdatedAt() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *StockUpsertBulk) SetDeletedAt(v time.Time) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateDeletedAt() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *StockUpsertBulk) ClearDeletedAt() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *StockUpsertBulk) SetLastModifier(v *model.Modifier) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateLastModifier() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *StockUpsertBulk) ClearLastModifier() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *StockUpsertBulk) SetRemark(v string) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateRemark() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *StockUpsertBulk) ClearRemark() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *StockUpsertBulk) SetCityID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateCityID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *StockUpsertBulk) ClearCityID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearCityID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *StockUpsertBulk) SetSubscribeID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateSubscribeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *StockUpsertBulk) ClearSubscribeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearSubscribeID()
	})
}

// SetEbikeID sets the "ebike_id" field.
func (u *StockUpsertBulk) SetEbikeID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetEbikeID(v)
	})
}

// UpdateEbikeID sets the "ebike_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateEbikeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateEbikeID()
	})
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (u *StockUpsertBulk) ClearEbikeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearEbikeID()
	})
}

// SetSn sets the "sn" field.
func (u *StockUpsertBulk) SetSn(v string) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateSn() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateSn()
	})
}

// SetType sets the "type" field.
func (u *StockUpsertBulk) SetType(v uint8) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *StockUpsertBulk) AddType(v uint8) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateType() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateType()
	})
}

// SetStoreID sets the "store_id" field.
func (u *StockUpsertBulk) SetStoreID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateStoreID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *StockUpsertBulk) ClearStoreID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearStoreID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *StockUpsertBulk) SetCabinetID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateCabinetID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *StockUpsertBulk) ClearCabinetID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearCabinetID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *StockUpsertBulk) SetRiderID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateRiderID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *StockUpsertBulk) ClearRiderID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearRiderID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *StockUpsertBulk) SetEmployeeID(v uint64) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateEmployeeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *StockUpsertBulk) ClearEmployeeID() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearEmployeeID()
	})
}

// SetName sets the "name" field.
func (u *StockUpsertBulk) SetName(v string) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateName() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateName()
	})
}

// SetModel sets the "model" field.
func (u *StockUpsertBulk) SetModel(v string) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateModel() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *StockUpsertBulk) ClearModel() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.ClearModel()
	})
}

// SetMaterial sets the "material" field.
func (u *StockUpsertBulk) SetMaterial(v stock.Material) *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.SetMaterial(v)
	})
}

// UpdateMaterial sets the "material" field to the value that was provided on create.
func (u *StockUpsertBulk) UpdateMaterial() *StockUpsertBulk {
	return u.Update(func(s *StockUpsert) {
		s.UpdateMaterial()
	})
}

// Exec executes the query.
func (u *StockUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
