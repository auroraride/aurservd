// Code generated by ent, DO NOT EDIT.

package promotionwithdrawal

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionwithdrawal type in the database.
	Label = "promotion_withdrawal"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldApplyAmount holds the string denoting the apply_amount field in the database.
	FieldApplyAmount = "apply_amount"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldFee holds the string denoting the fee field in the database.
	FieldFee = "fee"
	// FieldTex holds the string denoting the tex field in the database.
	FieldTex = "tex"
	// FieldMethod holds the string denoting the method field in the database.
	FieldMethod = "method"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldApplyTime holds the string denoting the apply_time field in the database.
	FieldApplyTime = "apply_time"
	// FieldReviewTime holds the string denoting the review_time field in the database.
	FieldReviewTime = "review_time"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgeCards holds the string denoting the cards edge name in mutations.
	EdgeCards = "cards"
	// Table holds the table name of the promotionwithdrawal in the database.
	Table = "promotion_withdrawal"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_withdrawal"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// CardsTable is the table that holds the cards relation/edge.
	CardsTable = "promotion_withdrawal"
	// CardsInverseTable is the table name for the PromotionBankCard entity.
	// It exists in this package in order to avoid circular dependency with the "promotionbankcard" package.
	CardsInverseTable = "promotion_bank_card"
	// CardsColumn is the table column denoting the cards relation/edge.
	CardsColumn = "account_id"
)

// Columns holds all SQL columns for promotionwithdrawal fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldMemberID,
	FieldStatus,
	FieldApplyAmount,
	FieldAmount,
	FieldFee,
	FieldTex,
	FieldMethod,
	FieldAccountID,
	FieldApplyTime,
	FieldReviewTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultApplyAmount holds the default value on creation for the "apply_amount" field.
	DefaultApplyAmount float64
	// DefaultAmount holds the default value on creation for the "amount" field.
	DefaultAmount float64
	// DefaultFee holds the default value on creation for the "fee" field.
	DefaultFee float64
	// DefaultTex holds the default value on creation for the "tex" field.
	DefaultTex float64
)

// OrderOption defines the ordering options for the PromotionWithdrawal queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByApplyAmount orders the results by the apply_amount field.
func ByApplyAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyAmount, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByFee orders the results by the fee field.
func ByFee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFee, opts...).ToFunc()
}

// ByTex orders the results by the tex field.
func ByTex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTex, opts...).ToFunc()
}

// ByMethod orders the results by the method field.
func ByMethod(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMethod, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByApplyTime orders the results by the apply_time field.
func ByApplyTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApplyTime, opts...).ToFunc()
}

// ByReviewTime orders the results by the review_time field.
func ByReviewTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReviewTime, opts...).ToFunc()
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByCardsField orders the results by cards field.
func ByCardsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardsStep(), sql.OrderByField(field, opts...))
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}
func newCardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CardsTable, CardsColumn),
	)
}
