// Code generated by ent, DO NOT EDIT.

package maintainer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the maintainer type in the database.
	Label = "maintainer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeCities holds the string denoting the cities edge name in mutations.
	EdgeCities = "cities"
	// EdgeAsset holds the string denoting the asset edge name in mutations.
	EdgeAsset = "asset"
	// Table holds the table name of the maintainer in the database.
	Table = "maintainer"
	// CitiesTable is the table that holds the cities relation/edge. The primary key declared below.
	CitiesTable = "city_maintainers"
	// CitiesInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CitiesInverseTable = "city"
	// AssetTable is the table that holds the asset relation/edge.
	AssetTable = "asset"
	// AssetInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetInverseTable = "asset"
	// AssetColumn is the table column denoting the asset relation/edge.
	AssetColumn = "locations_id"
)

// Columns holds all SQL columns for maintainer fields.
var Columns = []string{
	FieldID,
	FieldEnable,
	FieldName,
	FieldPhone,
	FieldPassword,
}

var (
	// CitiesPrimaryKey and CitiesColumn2 are the table columns denoting the
	// primary key for the cities relation (M2M).
	CitiesPrimaryKey = []string{"city_id", "maintainer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Maintainer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCitiesCount orders the results by cities count.
func ByCitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCitiesStep(), opts...)
	}
}

// ByCities orders the results by cities terms.
func ByCities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssetCount orders the results by asset count.
func ByAssetCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetStep(), opts...)
	}
}

// ByAsset orders the results by asset terms.
func ByAsset(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, CitiesTable, CitiesPrimaryKey...),
	)
}
func newAssetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetTable, AssetColumn),
	)
}
