// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/app/model/promotion"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionUpdate is the builder for updating PromotionCommission entities.
type PromotionCommissionUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionCommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionCommissionUpdate builder.
func (pcu *PromotionCommissionUpdate) Where(ps ...predicate.PromotionCommission) *PromotionCommissionUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PromotionCommissionUpdate) SetUpdatedAt(t time.Time) *PromotionCommissionUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// SetDeletedAt sets the "deleted_at" field.
func (pcu *PromotionCommissionUpdate) SetDeletedAt(t time.Time) *PromotionCommissionUpdate {
	pcu.mutation.SetDeletedAt(t)
	return pcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableDeletedAt(t *time.Time) *PromotionCommissionUpdate {
	if t != nil {
		pcu.SetDeletedAt(*t)
	}
	return pcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcu *PromotionCommissionUpdate) ClearDeletedAt() *PromotionCommissionUpdate {
	pcu.mutation.ClearDeletedAt()
	return pcu
}

// SetLastModifier sets the "last_modifier" field.
func (pcu *PromotionCommissionUpdate) SetLastModifier(m *model.Modifier) *PromotionCommissionUpdate {
	pcu.mutation.SetLastModifier(m)
	return pcu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pcu *PromotionCommissionUpdate) ClearLastModifier() *PromotionCommissionUpdate {
	pcu.mutation.ClearLastModifier()
	return pcu
}

// SetRemark sets the "remark" field.
func (pcu *PromotionCommissionUpdate) SetRemark(s string) *PromotionCommissionUpdate {
	pcu.mutation.SetRemark(s)
	return pcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableRemark(s *string) *PromotionCommissionUpdate {
	if s != nil {
		pcu.SetRemark(*s)
	}
	return pcu
}

// ClearRemark clears the value of the "remark" field.
func (pcu *PromotionCommissionUpdate) ClearRemark() *PromotionCommissionUpdate {
	pcu.mutation.ClearRemark()
	return pcu
}

// SetMemberID sets the "member_id" field.
func (pcu *PromotionCommissionUpdate) SetMemberID(u uint64) *PromotionCommissionUpdate {
	pcu.mutation.SetMemberID(u)
	return pcu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableMemberID(u *uint64) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetMemberID(*u)
	}
	return pcu
}

// ClearMemberID clears the value of the "member_id" field.
func (pcu *PromotionCommissionUpdate) ClearMemberID() *PromotionCommissionUpdate {
	pcu.mutation.ClearMemberID()
	return pcu
}

// SetType sets the "type" field.
func (pcu *PromotionCommissionUpdate) SetType(u uint8) *PromotionCommissionUpdate {
	pcu.mutation.ResetType()
	pcu.mutation.SetType(u)
	return pcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableType(u *uint8) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetType(*u)
	}
	return pcu
}

// AddType adds u to the "type" field.
func (pcu *PromotionCommissionUpdate) AddType(u int8) *PromotionCommissionUpdate {
	pcu.mutation.AddType(u)
	return pcu
}

// SetName sets the "name" field.
func (pcu *PromotionCommissionUpdate) SetName(s string) *PromotionCommissionUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableName(s *string) *PromotionCommissionUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// SetRule sets the "rule" field.
func (pcu *PromotionCommissionUpdate) SetRule(pr *promotion.CommissionRule) *PromotionCommissionUpdate {
	pcu.mutation.SetRule(pr)
	return pcu
}

// SetEnable sets the "enable" field.
func (pcu *PromotionCommissionUpdate) SetEnable(b bool) *PromotionCommissionUpdate {
	pcu.mutation.SetEnable(b)
	return pcu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableEnable(b *bool) *PromotionCommissionUpdate {
	if b != nil {
		pcu.SetEnable(*b)
	}
	return pcu
}

// SetAmountSum sets the "amount_sum" field.
func (pcu *PromotionCommissionUpdate) SetAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.ResetAmountSum()
	pcu.mutation.SetAmountSum(f)
	return pcu
}

// SetNillableAmountSum sets the "amount_sum" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableAmountSum(f *float64) *PromotionCommissionUpdate {
	if f != nil {
		pcu.SetAmountSum(*f)
	}
	return pcu
}

// AddAmountSum adds f to the "amount_sum" field.
func (pcu *PromotionCommissionUpdate) AddAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.AddAmountSum(f)
	return pcu
}

// SetFirstNewNum sets the "first_new_num" field.
func (pcu *PromotionCommissionUpdate) SetFirstNewNum(u uint64) *PromotionCommissionUpdate {
	pcu.mutation.ResetFirstNewNum()
	pcu.mutation.SetFirstNewNum(u)
	return pcu
}

// SetNillableFirstNewNum sets the "first_new_num" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableFirstNewNum(u *uint64) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetFirstNewNum(*u)
	}
	return pcu
}

// AddFirstNewNum adds u to the "first_new_num" field.
func (pcu *PromotionCommissionUpdate) AddFirstNewNum(u int64) *PromotionCommissionUpdate {
	pcu.mutation.AddFirstNewNum(u)
	return pcu
}

// SetSecondNewNum sets the "second_new_num" field.
func (pcu *PromotionCommissionUpdate) SetSecondNewNum(u uint64) *PromotionCommissionUpdate {
	pcu.mutation.ResetSecondNewNum()
	pcu.mutation.SetSecondNewNum(u)
	return pcu
}

// SetNillableSecondNewNum sets the "second_new_num" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableSecondNewNum(u *uint64) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetSecondNewNum(*u)
	}
	return pcu
}

// AddSecondNewNum adds u to the "second_new_num" field.
func (pcu *PromotionCommissionUpdate) AddSecondNewNum(u int64) *PromotionCommissionUpdate {
	pcu.mutation.AddSecondNewNum(u)
	return pcu
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (pcu *PromotionCommissionUpdate) SetFirstRenewNum(u uint64) *PromotionCommissionUpdate {
	pcu.mutation.ResetFirstRenewNum()
	pcu.mutation.SetFirstRenewNum(u)
	return pcu
}

// SetNillableFirstRenewNum sets the "first_renew_num" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableFirstRenewNum(u *uint64) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetFirstRenewNum(*u)
	}
	return pcu
}

// AddFirstRenewNum adds u to the "first_renew_num" field.
func (pcu *PromotionCommissionUpdate) AddFirstRenewNum(u int64) *PromotionCommissionUpdate {
	pcu.mutation.AddFirstRenewNum(u)
	return pcu
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (pcu *PromotionCommissionUpdate) SetSecondRenewNum(u uint64) *PromotionCommissionUpdate {
	pcu.mutation.ResetSecondRenewNum()
	pcu.mutation.SetSecondRenewNum(u)
	return pcu
}

// SetNillableSecondRenewNum sets the "second_renew_num" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableSecondRenewNum(u *uint64) *PromotionCommissionUpdate {
	if u != nil {
		pcu.SetSecondRenewNum(*u)
	}
	return pcu
}

// AddSecondRenewNum adds u to the "second_renew_num" field.
func (pcu *PromotionCommissionUpdate) AddSecondRenewNum(u int64) *PromotionCommissionUpdate {
	pcu.mutation.AddSecondRenewNum(u)
	return pcu
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (pcu *PromotionCommissionUpdate) SetFirstNewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.ResetFirstNewAmountSum()
	pcu.mutation.SetFirstNewAmountSum(f)
	return pcu
}

// SetNillableFirstNewAmountSum sets the "first_new_amount_sum" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableFirstNewAmountSum(f *float64) *PromotionCommissionUpdate {
	if f != nil {
		pcu.SetFirstNewAmountSum(*f)
	}
	return pcu
}

// AddFirstNewAmountSum adds f to the "first_new_amount_sum" field.
func (pcu *PromotionCommissionUpdate) AddFirstNewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.AddFirstNewAmountSum(f)
	return pcu
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (pcu *PromotionCommissionUpdate) SetSecondNewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.ResetSecondNewAmountSum()
	pcu.mutation.SetSecondNewAmountSum(f)
	return pcu
}

// SetNillableSecondNewAmountSum sets the "second_new_amount_sum" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableSecondNewAmountSum(f *float64) *PromotionCommissionUpdate {
	if f != nil {
		pcu.SetSecondNewAmountSum(*f)
	}
	return pcu
}

// AddSecondNewAmountSum adds f to the "second_new_amount_sum" field.
func (pcu *PromotionCommissionUpdate) AddSecondNewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.AddSecondNewAmountSum(f)
	return pcu
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (pcu *PromotionCommissionUpdate) SetFirstRenewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.ResetFirstRenewAmountSum()
	pcu.mutation.SetFirstRenewAmountSum(f)
	return pcu
}

// SetNillableFirstRenewAmountSum sets the "first_renew_amount_sum" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableFirstRenewAmountSum(f *float64) *PromotionCommissionUpdate {
	if f != nil {
		pcu.SetFirstRenewAmountSum(*f)
	}
	return pcu
}

// AddFirstRenewAmountSum adds f to the "first_renew_amount_sum" field.
func (pcu *PromotionCommissionUpdate) AddFirstRenewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.AddFirstRenewAmountSum(f)
	return pcu
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (pcu *PromotionCommissionUpdate) SetSecondRenewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.ResetSecondRenewAmountSum()
	pcu.mutation.SetSecondRenewAmountSum(f)
	return pcu
}

// SetNillableSecondRenewAmountSum sets the "second_renew_amount_sum" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableSecondRenewAmountSum(f *float64) *PromotionCommissionUpdate {
	if f != nil {
		pcu.SetSecondRenewAmountSum(*f)
	}
	return pcu
}

// AddSecondRenewAmountSum adds f to the "second_renew_amount_sum" field.
func (pcu *PromotionCommissionUpdate) AddSecondRenewAmountSum(f float64) *PromotionCommissionUpdate {
	pcu.mutation.AddSecondRenewAmountSum(f)
	return pcu
}

// SetDesc sets the "desc" field.
func (pcu *PromotionCommissionUpdate) SetDesc(s string) *PromotionCommissionUpdate {
	pcu.mutation.SetDesc(s)
	return pcu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableDesc(s *string) *PromotionCommissionUpdate {
	if s != nil {
		pcu.SetDesc(*s)
	}
	return pcu
}

// ClearDesc clears the value of the "desc" field.
func (pcu *PromotionCommissionUpdate) ClearDesc() *PromotionCommissionUpdate {
	pcu.mutation.ClearDesc()
	return pcu
}

// SetHistoryID sets the "history_id" field.
func (pcu *PromotionCommissionUpdate) SetHistoryID(u []uint64) *PromotionCommissionUpdate {
	pcu.mutation.SetHistoryID(u)
	return pcu
}

// AppendHistoryID appends u to the "history_id" field.
func (pcu *PromotionCommissionUpdate) AppendHistoryID(u []uint64) *PromotionCommissionUpdate {
	pcu.mutation.AppendHistoryID(u)
	return pcu
}

// ClearHistoryID clears the value of the "history_id" field.
func (pcu *PromotionCommissionUpdate) ClearHistoryID() *PromotionCommissionUpdate {
	pcu.mutation.ClearHistoryID()
	return pcu
}

// SetStartAt sets the "start_at" field.
func (pcu *PromotionCommissionUpdate) SetStartAt(t time.Time) *PromotionCommissionUpdate {
	pcu.mutation.SetStartAt(t)
	return pcu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableStartAt(t *time.Time) *PromotionCommissionUpdate {
	if t != nil {
		pcu.SetStartAt(*t)
	}
	return pcu
}

// ClearStartAt clears the value of the "start_at" field.
func (pcu *PromotionCommissionUpdate) ClearStartAt() *PromotionCommissionUpdate {
	pcu.mutation.ClearStartAt()
	return pcu
}

// SetEndAt sets the "end_at" field.
func (pcu *PromotionCommissionUpdate) SetEndAt(t time.Time) *PromotionCommissionUpdate {
	pcu.mutation.SetEndAt(t)
	return pcu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (pcu *PromotionCommissionUpdate) SetNillableEndAt(t *time.Time) *PromotionCommissionUpdate {
	if t != nil {
		pcu.SetEndAt(*t)
	}
	return pcu
}

// ClearEndAt clears the value of the "end_at" field.
func (pcu *PromotionCommissionUpdate) ClearEndAt() *PromotionCommissionUpdate {
	pcu.mutation.ClearEndAt()
	return pcu
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pcu *PromotionCommissionUpdate) SetMember(p *PromotionMember) *PromotionCommissionUpdate {
	return pcu.SetMemberID(p.ID)
}

// AddPlanIDs adds the "plans" edge to the PromotionCommissionPlan entity by IDs.
func (pcu *PromotionCommissionUpdate) AddPlanIDs(ids ...uint64) *PromotionCommissionUpdate {
	pcu.mutation.AddPlanIDs(ids...)
	return pcu
}

// AddPlans adds the "plans" edges to the PromotionCommissionPlan entity.
func (pcu *PromotionCommissionUpdate) AddPlans(p ...*PromotionCommissionPlan) *PromotionCommissionUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPlanIDs(ids...)
}

// Mutation returns the PromotionCommissionMutation object of the builder.
func (pcu *PromotionCommissionUpdate) Mutation() *PromotionCommissionMutation {
	return pcu.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pcu *PromotionCommissionUpdate) ClearMember() *PromotionCommissionUpdate {
	pcu.mutation.ClearMember()
	return pcu
}

// ClearPlans clears all "plans" edges to the PromotionCommissionPlan entity.
func (pcu *PromotionCommissionUpdate) ClearPlans() *PromotionCommissionUpdate {
	pcu.mutation.ClearPlans()
	return pcu
}

// RemovePlanIDs removes the "plans" edge to PromotionCommissionPlan entities by IDs.
func (pcu *PromotionCommissionUpdate) RemovePlanIDs(ids ...uint64) *PromotionCommissionUpdate {
	pcu.mutation.RemovePlanIDs(ids...)
	return pcu
}

// RemovePlans removes "plans" edges to PromotionCommissionPlan entities.
func (pcu *PromotionCommissionUpdate) RemovePlans(p ...*PromotionCommissionPlan) *PromotionCommissionUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PromotionCommissionUpdate) Save(ctx context.Context) (int, error) {
	if err := pcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PromotionCommissionUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PromotionCommissionUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PromotionCommissionUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PromotionCommissionUpdate) defaults() error {
	if _, ok := pcu.mutation.UpdatedAt(); !ok {
		if promotioncommission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotioncommission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotioncommission.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PromotionCommissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionCommissionUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PromotionCommissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotioncommission.Table, promotioncommission.Columns, sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotioncommission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcu.mutation.DeletedAt(); ok {
		_spec.SetField(promotioncommission.FieldDeletedAt, field.TypeTime, value)
	}
	if pcu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotioncommission.FieldDeletedAt, field.TypeTime)
	}
	if pcu.mutation.CreatorCleared() {
		_spec.ClearField(promotioncommission.FieldCreator, field.TypeJSON)
	}
	if value, ok := pcu.mutation.LastModifier(); ok {
		_spec.SetField(promotioncommission.FieldLastModifier, field.TypeJSON, value)
	}
	if pcu.mutation.LastModifierCleared() {
		_spec.ClearField(promotioncommission.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pcu.mutation.Remark(); ok {
		_spec.SetField(promotioncommission.FieldRemark, field.TypeString, value)
	}
	if pcu.mutation.RemarkCleared() {
		_spec.ClearField(promotioncommission.FieldRemark, field.TypeString)
	}
	if value, ok := pcu.mutation.GetType(); ok {
		_spec.SetField(promotioncommission.FieldType, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.AddedType(); ok {
		_spec.AddField(promotioncommission.FieldType, field.TypeUint8, value)
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(promotioncommission.FieldName, field.TypeString, value)
	}
	if value, ok := pcu.mutation.Rule(); ok {
		_spec.SetField(promotioncommission.FieldRule, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.Enable(); ok {
		_spec.SetField(promotioncommission.FieldEnable, field.TypeBool, value)
	}
	if value, ok := pcu.mutation.AmountSum(); ok {
		_spec.SetField(promotioncommission.FieldAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.FirstNewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedFirstNewNum(); ok {
		_spec.AddField(promotioncommission.FieldFirstNewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.SecondNewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedSecondNewNum(); ok {
		_spec.AddField(promotioncommission.FieldSecondNewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.FirstRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedFirstRenewNum(); ok {
		_spec.AddField(promotioncommission.FieldFirstRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.SecondRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.AddedSecondRenewNum(); ok {
		_spec.AddField(promotioncommission.FieldSecondRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcu.mutation.FirstNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedFirstNewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldFirstNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.SecondNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedSecondNewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldSecondNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.FirstRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedFirstRenewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldFirstRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.SecondRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.AddedSecondRenewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldSecondRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcu.mutation.Desc(); ok {
		_spec.SetField(promotioncommission.FieldDesc, field.TypeString, value)
	}
	if pcu.mutation.DescCleared() {
		_spec.ClearField(promotioncommission.FieldDesc, field.TypeString)
	}
	if value, ok := pcu.mutation.HistoryID(); ok {
		_spec.SetField(promotioncommission.FieldHistoryID, field.TypeJSON, value)
	}
	if value, ok := pcu.mutation.AppendedHistoryID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, promotioncommission.FieldHistoryID, value)
		})
	}
	if pcu.mutation.HistoryIDCleared() {
		_spec.ClearField(promotioncommission.FieldHistoryID, field.TypeJSON)
	}
	if value, ok := pcu.mutation.StartAt(); ok {
		_spec.SetField(promotioncommission.FieldStartAt, field.TypeTime, value)
	}
	if pcu.mutation.StartAtCleared() {
		_spec.ClearField(promotioncommission.FieldStartAt, field.TypeTime)
	}
	if value, ok := pcu.mutation.EndAt(); ok {
		_spec.SetField(promotioncommission.FieldEndAt, field.TypeTime, value)
	}
	if pcu.mutation.EndAtCleared() {
		_spec.ClearField(promotioncommission.FieldEndAt, field.TypeTime)
	}
	if pcu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !pcu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotioncommission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PromotionCommissionUpdateOne is the builder for updating a single PromotionCommission entity.
type PromotionCommissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionCommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PromotionCommissionUpdateOne) SetUpdatedAt(t time.Time) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pcuo *PromotionCommissionUpdateOne) SetDeletedAt(t time.Time) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetDeletedAt(t)
	return pcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionCommissionUpdateOne {
	if t != nil {
		pcuo.SetDeletedAt(*t)
	}
	return pcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pcuo *PromotionCommissionUpdateOne) ClearDeletedAt() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearDeletedAt()
	return pcuo
}

// SetLastModifier sets the "last_modifier" field.
func (pcuo *PromotionCommissionUpdateOne) SetLastModifier(m *model.Modifier) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetLastModifier(m)
	return pcuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pcuo *PromotionCommissionUpdateOne) ClearLastModifier() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearLastModifier()
	return pcuo
}

// SetRemark sets the "remark" field.
func (pcuo *PromotionCommissionUpdateOne) SetRemark(s string) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetRemark(s)
	return pcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableRemark(s *string) *PromotionCommissionUpdateOne {
	if s != nil {
		pcuo.SetRemark(*s)
	}
	return pcuo
}

// ClearRemark clears the value of the "remark" field.
func (pcuo *PromotionCommissionUpdateOne) ClearRemark() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearRemark()
	return pcuo
}

// SetMemberID sets the "member_id" field.
func (pcuo *PromotionCommissionUpdateOne) SetMemberID(u uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetMemberID(u)
	return pcuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableMemberID(u *uint64) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetMemberID(*u)
	}
	return pcuo
}

// ClearMemberID clears the value of the "member_id" field.
func (pcuo *PromotionCommissionUpdateOne) ClearMemberID() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearMemberID()
	return pcuo
}

// SetType sets the "type" field.
func (pcuo *PromotionCommissionUpdateOne) SetType(u uint8) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetType()
	pcuo.mutation.SetType(u)
	return pcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableType(u *uint8) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetType(*u)
	}
	return pcuo
}

// AddType adds u to the "type" field.
func (pcuo *PromotionCommissionUpdateOne) AddType(u int8) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddType(u)
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *PromotionCommissionUpdateOne) SetName(s string) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableName(s *string) *PromotionCommissionUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// SetRule sets the "rule" field.
func (pcuo *PromotionCommissionUpdateOne) SetRule(pr *promotion.CommissionRule) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetRule(pr)
	return pcuo
}

// SetEnable sets the "enable" field.
func (pcuo *PromotionCommissionUpdateOne) SetEnable(b bool) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetEnable(b)
	return pcuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableEnable(b *bool) *PromotionCommissionUpdateOne {
	if b != nil {
		pcuo.SetEnable(*b)
	}
	return pcuo
}

// SetAmountSum sets the "amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) SetAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetAmountSum()
	pcuo.mutation.SetAmountSum(f)
	return pcuo
}

// SetNillableAmountSum sets the "amount_sum" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableAmountSum(f *float64) *PromotionCommissionUpdateOne {
	if f != nil {
		pcuo.SetAmountSum(*f)
	}
	return pcuo
}

// AddAmountSum adds f to the "amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) AddAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddAmountSum(f)
	return pcuo
}

// SetFirstNewNum sets the "first_new_num" field.
func (pcuo *PromotionCommissionUpdateOne) SetFirstNewNum(u uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetFirstNewNum()
	pcuo.mutation.SetFirstNewNum(u)
	return pcuo
}

// SetNillableFirstNewNum sets the "first_new_num" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableFirstNewNum(u *uint64) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetFirstNewNum(*u)
	}
	return pcuo
}

// AddFirstNewNum adds u to the "first_new_num" field.
func (pcuo *PromotionCommissionUpdateOne) AddFirstNewNum(u int64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddFirstNewNum(u)
	return pcuo
}

// SetSecondNewNum sets the "second_new_num" field.
func (pcuo *PromotionCommissionUpdateOne) SetSecondNewNum(u uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetSecondNewNum()
	pcuo.mutation.SetSecondNewNum(u)
	return pcuo
}

// SetNillableSecondNewNum sets the "second_new_num" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableSecondNewNum(u *uint64) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetSecondNewNum(*u)
	}
	return pcuo
}

// AddSecondNewNum adds u to the "second_new_num" field.
func (pcuo *PromotionCommissionUpdateOne) AddSecondNewNum(u int64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddSecondNewNum(u)
	return pcuo
}

// SetFirstRenewNum sets the "first_renew_num" field.
func (pcuo *PromotionCommissionUpdateOne) SetFirstRenewNum(u uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetFirstRenewNum()
	pcuo.mutation.SetFirstRenewNum(u)
	return pcuo
}

// SetNillableFirstRenewNum sets the "first_renew_num" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableFirstRenewNum(u *uint64) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetFirstRenewNum(*u)
	}
	return pcuo
}

// AddFirstRenewNum adds u to the "first_renew_num" field.
func (pcuo *PromotionCommissionUpdateOne) AddFirstRenewNum(u int64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddFirstRenewNum(u)
	return pcuo
}

// SetSecondRenewNum sets the "second_renew_num" field.
func (pcuo *PromotionCommissionUpdateOne) SetSecondRenewNum(u uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetSecondRenewNum()
	pcuo.mutation.SetSecondRenewNum(u)
	return pcuo
}

// SetNillableSecondRenewNum sets the "second_renew_num" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableSecondRenewNum(u *uint64) *PromotionCommissionUpdateOne {
	if u != nil {
		pcuo.SetSecondRenewNum(*u)
	}
	return pcuo
}

// AddSecondRenewNum adds u to the "second_renew_num" field.
func (pcuo *PromotionCommissionUpdateOne) AddSecondRenewNum(u int64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddSecondRenewNum(u)
	return pcuo
}

// SetFirstNewAmountSum sets the "first_new_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) SetFirstNewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetFirstNewAmountSum()
	pcuo.mutation.SetFirstNewAmountSum(f)
	return pcuo
}

// SetNillableFirstNewAmountSum sets the "first_new_amount_sum" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableFirstNewAmountSum(f *float64) *PromotionCommissionUpdateOne {
	if f != nil {
		pcuo.SetFirstNewAmountSum(*f)
	}
	return pcuo
}

// AddFirstNewAmountSum adds f to the "first_new_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) AddFirstNewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddFirstNewAmountSum(f)
	return pcuo
}

// SetSecondNewAmountSum sets the "second_new_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) SetSecondNewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetSecondNewAmountSum()
	pcuo.mutation.SetSecondNewAmountSum(f)
	return pcuo
}

// SetNillableSecondNewAmountSum sets the "second_new_amount_sum" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableSecondNewAmountSum(f *float64) *PromotionCommissionUpdateOne {
	if f != nil {
		pcuo.SetSecondNewAmountSum(*f)
	}
	return pcuo
}

// AddSecondNewAmountSum adds f to the "second_new_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) AddSecondNewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddSecondNewAmountSum(f)
	return pcuo
}

// SetFirstRenewAmountSum sets the "first_renew_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) SetFirstRenewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetFirstRenewAmountSum()
	pcuo.mutation.SetFirstRenewAmountSum(f)
	return pcuo
}

// SetNillableFirstRenewAmountSum sets the "first_renew_amount_sum" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableFirstRenewAmountSum(f *float64) *PromotionCommissionUpdateOne {
	if f != nil {
		pcuo.SetFirstRenewAmountSum(*f)
	}
	return pcuo
}

// AddFirstRenewAmountSum adds f to the "first_renew_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) AddFirstRenewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddFirstRenewAmountSum(f)
	return pcuo
}

// SetSecondRenewAmountSum sets the "second_renew_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) SetSecondRenewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.ResetSecondRenewAmountSum()
	pcuo.mutation.SetSecondRenewAmountSum(f)
	return pcuo
}

// SetNillableSecondRenewAmountSum sets the "second_renew_amount_sum" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableSecondRenewAmountSum(f *float64) *PromotionCommissionUpdateOne {
	if f != nil {
		pcuo.SetSecondRenewAmountSum(*f)
	}
	return pcuo
}

// AddSecondRenewAmountSum adds f to the "second_renew_amount_sum" field.
func (pcuo *PromotionCommissionUpdateOne) AddSecondRenewAmountSum(f float64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddSecondRenewAmountSum(f)
	return pcuo
}

// SetDesc sets the "desc" field.
func (pcuo *PromotionCommissionUpdateOne) SetDesc(s string) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetDesc(s)
	return pcuo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableDesc(s *string) *PromotionCommissionUpdateOne {
	if s != nil {
		pcuo.SetDesc(*s)
	}
	return pcuo
}

// ClearDesc clears the value of the "desc" field.
func (pcuo *PromotionCommissionUpdateOne) ClearDesc() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearDesc()
	return pcuo
}

// SetHistoryID sets the "history_id" field.
func (pcuo *PromotionCommissionUpdateOne) SetHistoryID(u []uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetHistoryID(u)
	return pcuo
}

// AppendHistoryID appends u to the "history_id" field.
func (pcuo *PromotionCommissionUpdateOne) AppendHistoryID(u []uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AppendHistoryID(u)
	return pcuo
}

// ClearHistoryID clears the value of the "history_id" field.
func (pcuo *PromotionCommissionUpdateOne) ClearHistoryID() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearHistoryID()
	return pcuo
}

// SetStartAt sets the "start_at" field.
func (pcuo *PromotionCommissionUpdateOne) SetStartAt(t time.Time) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetStartAt(t)
	return pcuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableStartAt(t *time.Time) *PromotionCommissionUpdateOne {
	if t != nil {
		pcuo.SetStartAt(*t)
	}
	return pcuo
}

// ClearStartAt clears the value of the "start_at" field.
func (pcuo *PromotionCommissionUpdateOne) ClearStartAt() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearStartAt()
	return pcuo
}

// SetEndAt sets the "end_at" field.
func (pcuo *PromotionCommissionUpdateOne) SetEndAt(t time.Time) *PromotionCommissionUpdateOne {
	pcuo.mutation.SetEndAt(t)
	return pcuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (pcuo *PromotionCommissionUpdateOne) SetNillableEndAt(t *time.Time) *PromotionCommissionUpdateOne {
	if t != nil {
		pcuo.SetEndAt(*t)
	}
	return pcuo
}

// ClearEndAt clears the value of the "end_at" field.
func (pcuo *PromotionCommissionUpdateOne) ClearEndAt() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearEndAt()
	return pcuo
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pcuo *PromotionCommissionUpdateOne) SetMember(p *PromotionMember) *PromotionCommissionUpdateOne {
	return pcuo.SetMemberID(p.ID)
}

// AddPlanIDs adds the "plans" edge to the PromotionCommissionPlan entity by IDs.
func (pcuo *PromotionCommissionUpdateOne) AddPlanIDs(ids ...uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.AddPlanIDs(ids...)
	return pcuo
}

// AddPlans adds the "plans" edges to the PromotionCommissionPlan entity.
func (pcuo *PromotionCommissionUpdateOne) AddPlans(p ...*PromotionCommissionPlan) *PromotionCommissionUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPlanIDs(ids...)
}

// Mutation returns the PromotionCommissionMutation object of the builder.
func (pcuo *PromotionCommissionUpdateOne) Mutation() *PromotionCommissionMutation {
	return pcuo.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pcuo *PromotionCommissionUpdateOne) ClearMember() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearMember()
	return pcuo
}

// ClearPlans clears all "plans" edges to the PromotionCommissionPlan entity.
func (pcuo *PromotionCommissionUpdateOne) ClearPlans() *PromotionCommissionUpdateOne {
	pcuo.mutation.ClearPlans()
	return pcuo
}

// RemovePlanIDs removes the "plans" edge to PromotionCommissionPlan entities by IDs.
func (pcuo *PromotionCommissionUpdateOne) RemovePlanIDs(ids ...uint64) *PromotionCommissionUpdateOne {
	pcuo.mutation.RemovePlanIDs(ids...)
	return pcuo
}

// RemovePlans removes "plans" edges to PromotionCommissionPlan entities.
func (pcuo *PromotionCommissionUpdateOne) RemovePlans(p ...*PromotionCommissionPlan) *PromotionCommissionUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePlanIDs(ids...)
}

// Where appends a list predicates to the PromotionCommissionUpdate builder.
func (pcuo *PromotionCommissionUpdateOne) Where(ps ...predicate.PromotionCommission) *PromotionCommissionUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PromotionCommissionUpdateOne) Select(field string, fields ...string) *PromotionCommissionUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PromotionCommission entity.
func (pcuo *PromotionCommissionUpdateOne) Save(ctx context.Context) (*PromotionCommission, error) {
	if err := pcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PromotionCommissionUpdateOne) SaveX(ctx context.Context) *PromotionCommission {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PromotionCommissionUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PromotionCommissionUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PromotionCommissionUpdateOne) defaults() error {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok {
		if promotioncommission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotioncommission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotioncommission.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PromotionCommissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionCommissionUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PromotionCommissionUpdateOne) sqlSave(ctx context.Context) (_node *PromotionCommission, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotioncommission.Table, promotioncommission.Columns, sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionCommission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotioncommission.FieldID)
		for _, f := range fields {
			if !promotioncommission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotioncommission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotioncommission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pcuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotioncommission.FieldDeletedAt, field.TypeTime, value)
	}
	if pcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotioncommission.FieldDeletedAt, field.TypeTime)
	}
	if pcuo.mutation.CreatorCleared() {
		_spec.ClearField(promotioncommission.FieldCreator, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.LastModifier(); ok {
		_spec.SetField(promotioncommission.FieldLastModifier, field.TypeJSON, value)
	}
	if pcuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotioncommission.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.Remark(); ok {
		_spec.SetField(promotioncommission.FieldRemark, field.TypeString, value)
	}
	if pcuo.mutation.RemarkCleared() {
		_spec.ClearField(promotioncommission.FieldRemark, field.TypeString)
	}
	if value, ok := pcuo.mutation.GetType(); ok {
		_spec.SetField(promotioncommission.FieldType, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.AddedType(); ok {
		_spec.AddField(promotioncommission.FieldType, field.TypeUint8, value)
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(promotioncommission.FieldName, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.Rule(); ok {
		_spec.SetField(promotioncommission.FieldRule, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.Enable(); ok {
		_spec.SetField(promotioncommission.FieldEnable, field.TypeBool, value)
	}
	if value, ok := pcuo.mutation.AmountSum(); ok {
		_spec.SetField(promotioncommission.FieldAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.FirstNewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedFirstNewNum(); ok {
		_spec.AddField(promotioncommission.FieldFirstNewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.SecondNewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedSecondNewNum(); ok {
		_spec.AddField(promotioncommission.FieldSecondNewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.FirstRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedFirstRenewNum(); ok {
		_spec.AddField(promotioncommission.FieldFirstRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.SecondRenewNum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.AddedSecondRenewNum(); ok {
		_spec.AddField(promotioncommission.FieldSecondRenewNum, field.TypeUint64, value)
	}
	if value, ok := pcuo.mutation.FirstNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedFirstNewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldFirstNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.SecondNewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedSecondNewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldSecondNewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.FirstRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldFirstRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedFirstRenewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldFirstRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.SecondRenewAmountSum(); ok {
		_spec.SetField(promotioncommission.FieldSecondRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.AddedSecondRenewAmountSum(); ok {
		_spec.AddField(promotioncommission.FieldSecondRenewAmountSum, field.TypeFloat64, value)
	}
	if value, ok := pcuo.mutation.Desc(); ok {
		_spec.SetField(promotioncommission.FieldDesc, field.TypeString, value)
	}
	if pcuo.mutation.DescCleared() {
		_spec.ClearField(promotioncommission.FieldDesc, field.TypeString)
	}
	if value, ok := pcuo.mutation.HistoryID(); ok {
		_spec.SetField(promotioncommission.FieldHistoryID, field.TypeJSON, value)
	}
	if value, ok := pcuo.mutation.AppendedHistoryID(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, promotioncommission.FieldHistoryID, value)
		})
	}
	if pcuo.mutation.HistoryIDCleared() {
		_spec.ClearField(promotioncommission.FieldHistoryID, field.TypeJSON)
	}
	if value, ok := pcuo.mutation.StartAt(); ok {
		_spec.SetField(promotioncommission.FieldStartAt, field.TypeTime, value)
	}
	if pcuo.mutation.StartAtCleared() {
		_spec.ClearField(promotioncommission.FieldStartAt, field.TypeTime)
	}
	if value, ok := pcuo.mutation.EndAt(); ok {
		_spec.SetField(promotioncommission.FieldEndAt, field.TypeTime, value)
	}
	if pcuo.mutation.EndAtCleared() {
		_spec.ClearField(promotioncommission.FieldEndAt, field.TypeTime)
	}
	if pcuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotioncommission.MemberTable,
			Columns: []string{promotioncommission.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pcuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !pcuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotioncommission.PlansTable,
			Columns: []string{promotioncommission.PlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PromotionCommission{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotioncommission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
