// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetCheckCreate is the builder for creating a AssetCheck entity.
type AssetCheckCreate struct {
	config
	mutation *AssetCheckMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acc *AssetCheckCreate) SetCreatedAt(t time.Time) *AssetCheckCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableCreatedAt(t *time.Time) *AssetCheckCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AssetCheckCreate) SetUpdatedAt(t time.Time) *AssetCheckCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableUpdatedAt(t *time.Time) *AssetCheckCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetDeletedAt sets the "deleted_at" field.
func (acc *AssetCheckCreate) SetDeletedAt(t time.Time) *AssetCheckCreate {
	acc.mutation.SetDeletedAt(t)
	return acc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableDeletedAt(t *time.Time) *AssetCheckCreate {
	if t != nil {
		acc.SetDeletedAt(*t)
	}
	return acc
}

// SetCreator sets the "creator" field.
func (acc *AssetCheckCreate) SetCreator(m *model.Modifier) *AssetCheckCreate {
	acc.mutation.SetCreator(m)
	return acc
}

// SetLastModifier sets the "last_modifier" field.
func (acc *AssetCheckCreate) SetLastModifier(m *model.Modifier) *AssetCheckCreate {
	acc.mutation.SetLastModifier(m)
	return acc
}

// SetRemark sets the "remark" field.
func (acc *AssetCheckCreate) SetRemark(s string) *AssetCheckCreate {
	acc.mutation.SetRemark(s)
	return acc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableRemark(s *string) *AssetCheckCreate {
	if s != nil {
		acc.SetRemark(*s)
	}
	return acc
}

// SetStatus sets the "status" field.
func (acc *AssetCheckCreate) SetStatus(u uint8) *AssetCheckCreate {
	acc.mutation.SetStatus(u)
	return acc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableStatus(u *uint8) *AssetCheckCreate {
	if u != nil {
		acc.SetStatus(*u)
	}
	return acc
}

// SetBatteryNum sets the "battery_num" field.
func (acc *AssetCheckCreate) SetBatteryNum(u uint) *AssetCheckCreate {
	acc.mutation.SetBatteryNum(u)
	return acc
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableBatteryNum(u *uint) *AssetCheckCreate {
	if u != nil {
		acc.SetBatteryNum(*u)
	}
	return acc
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (acc *AssetCheckCreate) SetBatteryNumReal(u uint) *AssetCheckCreate {
	acc.mutation.SetBatteryNumReal(u)
	return acc
}

// SetNillableBatteryNumReal sets the "battery_num_real" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableBatteryNumReal(u *uint) *AssetCheckCreate {
	if u != nil {
		acc.SetBatteryNumReal(*u)
	}
	return acc
}

// SetEbikeNum sets the "ebike_num" field.
func (acc *AssetCheckCreate) SetEbikeNum(u uint) *AssetCheckCreate {
	acc.mutation.SetEbikeNum(u)
	return acc
}

// SetNillableEbikeNum sets the "ebike_num" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableEbikeNum(u *uint) *AssetCheckCreate {
	if u != nil {
		acc.SetEbikeNum(*u)
	}
	return acc
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (acc *AssetCheckCreate) SetEbikeNumReal(u uint) *AssetCheckCreate {
	acc.mutation.SetEbikeNumReal(u)
	return acc
}

// SetNillableEbikeNumReal sets the "ebike_num_real" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableEbikeNumReal(u *uint) *AssetCheckCreate {
	if u != nil {
		acc.SetEbikeNumReal(*u)
	}
	return acc
}

// SetOperateID sets the "operate_id" field.
func (acc *AssetCheckCreate) SetOperateID(u uint64) *AssetCheckCreate {
	acc.mutation.SetOperateID(u)
	return acc
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableOperateID(u *uint64) *AssetCheckCreate {
	if u != nil {
		acc.SetOperateID(*u)
	}
	return acc
}

// SetOperateType sets the "operate_type" field.
func (acc *AssetCheckCreate) SetOperateType(u uint8) *AssetCheckCreate {
	acc.mutation.SetOperateType(u)
	return acc
}

// SetNillableOperateType sets the "operate_type" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableOperateType(u *uint8) *AssetCheckCreate {
	if u != nil {
		acc.SetOperateType(*u)
	}
	return acc
}

// SetLocationsType sets the "locations_type" field.
func (acc *AssetCheckCreate) SetLocationsType(u uint8) *AssetCheckCreate {
	acc.mutation.SetLocationsType(u)
	return acc
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableLocationsType(u *uint8) *AssetCheckCreate {
	if u != nil {
		acc.SetLocationsType(*u)
	}
	return acc
}

// SetLocationsID sets the "locations_id" field.
func (acc *AssetCheckCreate) SetLocationsID(u uint64) *AssetCheckCreate {
	acc.mutation.SetLocationsID(u)
	return acc
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableLocationsID(u *uint64) *AssetCheckCreate {
	if u != nil {
		acc.SetLocationsID(*u)
	}
	return acc
}

// SetStartAt sets the "start_at" field.
func (acc *AssetCheckCreate) SetStartAt(t time.Time) *AssetCheckCreate {
	acc.mutation.SetStartAt(t)
	return acc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableStartAt(t *time.Time) *AssetCheckCreate {
	if t != nil {
		acc.SetStartAt(*t)
	}
	return acc
}

// SetEndAt sets the "end_at" field.
func (acc *AssetCheckCreate) SetEndAt(t time.Time) *AssetCheckCreate {
	acc.mutation.SetEndAt(t)
	return acc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableEndAt(t *time.Time) *AssetCheckCreate {
	if t != nil {
		acc.SetEndAt(*t)
	}
	return acc
}

// AddCheckDetailIDs adds the "check_details" edge to the AssetCheckDetails entity by IDs.
func (acc *AssetCheckCreate) AddCheckDetailIDs(ids ...uint64) *AssetCheckCreate {
	acc.mutation.AddCheckDetailIDs(ids...)
	return acc
}

// AddCheckDetails adds the "check_details" edges to the AssetCheckDetails entity.
func (acc *AssetCheckCreate) AddCheckDetails(a ...*AssetCheckDetails) *AssetCheckCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acc.AddCheckDetailIDs(ids...)
}

// SetOperateManagerID sets the "operate_manager" edge to the AssetManager entity by ID.
func (acc *AssetCheckCreate) SetOperateManagerID(id uint64) *AssetCheckCreate {
	acc.mutation.SetOperateManagerID(id)
	return acc
}

// SetNillableOperateManagerID sets the "operate_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableOperateManagerID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetOperateManagerID(*id)
	}
	return acc
}

// SetOperateManager sets the "operate_manager" edge to the AssetManager entity.
func (acc *AssetCheckCreate) SetOperateManager(a *AssetManager) *AssetCheckCreate {
	return acc.SetOperateManagerID(a.ID)
}

// SetOperateStoreID sets the "operate_store" edge to the Store entity by ID.
func (acc *AssetCheckCreate) SetOperateStoreID(id uint64) *AssetCheckCreate {
	acc.mutation.SetOperateStoreID(id)
	return acc
}

// SetNillableOperateStoreID sets the "operate_store" edge to the Store entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableOperateStoreID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetOperateStoreID(*id)
	}
	return acc
}

// SetOperateStore sets the "operate_store" edge to the Store entity.
func (acc *AssetCheckCreate) SetOperateStore(s *Store) *AssetCheckCreate {
	return acc.SetOperateStoreID(s.ID)
}

// SetOperateAgentID sets the "operate_agent" edge to the Agent entity by ID.
func (acc *AssetCheckCreate) SetOperateAgentID(id uint64) *AssetCheckCreate {
	acc.mutation.SetOperateAgentID(id)
	return acc
}

// SetNillableOperateAgentID sets the "operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableOperateAgentID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetOperateAgentID(*id)
	}
	return acc
}

// SetOperateAgent sets the "operate_agent" edge to the Agent entity.
func (acc *AssetCheckCreate) SetOperateAgent(a *Agent) *AssetCheckCreate {
	return acc.SetOperateAgentID(a.ID)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (acc *AssetCheckCreate) SetWarehouseID(id uint64) *AssetCheckCreate {
	acc.mutation.SetWarehouseID(id)
	return acc
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableWarehouseID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetWarehouseID(*id)
	}
	return acc
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (acc *AssetCheckCreate) SetWarehouse(w *Warehouse) *AssetCheckCreate {
	return acc.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (acc *AssetCheckCreate) SetStoreID(id uint64) *AssetCheckCreate {
	acc.mutation.SetStoreID(id)
	return acc
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableStoreID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetStoreID(*id)
	}
	return acc
}

// SetStore sets the "store" edge to the Store entity.
func (acc *AssetCheckCreate) SetStore(s *Store) *AssetCheckCreate {
	return acc.SetStoreID(s.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (acc *AssetCheckCreate) SetStationID(id uint64) *AssetCheckCreate {
	acc.mutation.SetStationID(id)
	return acc
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (acc *AssetCheckCreate) SetNillableStationID(id *uint64) *AssetCheckCreate {
	if id != nil {
		acc = acc.SetStationID(*id)
	}
	return acc
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (acc *AssetCheckCreate) SetStation(e *EnterpriseStation) *AssetCheckCreate {
	return acc.SetStationID(e.ID)
}

// Mutation returns the AssetCheckMutation object of the builder.
func (acc *AssetCheckCreate) Mutation() *AssetCheckMutation {
	return acc.mutation
}

// Save creates the AssetCheck in the database.
func (acc *AssetCheckCreate) Save(ctx context.Context) (*AssetCheck, error) {
	if err := acc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AssetCheckCreate) SaveX(ctx context.Context) *AssetCheck {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AssetCheckCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AssetCheckCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AssetCheckCreate) defaults() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		if assetcheck.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheck.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheck.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		if assetcheck.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheck.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheck.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (acc *AssetCheckCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetCheck.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetCheck.updated_at"`)}
	}
	return nil
}

func (acc *AssetCheckCreate) sqlSave(ctx context.Context) (*AssetCheck, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AssetCheckCreate) createSpec() (*AssetCheck, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetCheck{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(assetcheck.Table, sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = acc.conflict
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(assetcheck.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheck.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheck.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := acc.mutation.Creator(); ok {
		_spec.SetField(assetcheck.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := acc.mutation.LastModifier(); ok {
		_spec.SetField(assetcheck.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := acc.mutation.Remark(); ok {
		_spec.SetField(assetcheck.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := acc.mutation.Status(); ok {
		_spec.SetField(assetcheck.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := acc.mutation.BatteryNum(); ok {
		_spec.SetField(assetcheck.FieldBatteryNum, field.TypeUint, value)
		_node.BatteryNum = value
	}
	if value, ok := acc.mutation.BatteryNumReal(); ok {
		_spec.SetField(assetcheck.FieldBatteryNumReal, field.TypeUint, value)
		_node.BatteryNumReal = value
	}
	if value, ok := acc.mutation.EbikeNum(); ok {
		_spec.SetField(assetcheck.FieldEbikeNum, field.TypeUint, value)
		_node.EbikeNum = value
	}
	if value, ok := acc.mutation.EbikeNumReal(); ok {
		_spec.SetField(assetcheck.FieldEbikeNumReal, field.TypeUint, value)
		_node.EbikeNumReal = value
	}
	if value, ok := acc.mutation.OperateType(); ok {
		_spec.SetField(assetcheck.FieldOperateType, field.TypeUint8, value)
		_node.OperateType = value
	}
	if value, ok := acc.mutation.LocationsType(); ok {
		_spec.SetField(assetcheck.FieldLocationsType, field.TypeUint8, value)
		_node.LocationsType = value
	}
	if value, ok := acc.mutation.StartAt(); ok {
		_spec.SetField(assetcheck.FieldStartAt, field.TypeTime, value)
		_node.StartAt = &value
	}
	if value, ok := acc.mutation.EndAt(); ok {
		_spec.SetField(assetcheck.FieldEndAt, field.TypeTime, value)
		_node.EndAt = &value
	}
	if nodes := acc.mutation.CheckDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.OperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateManagerTable,
			Columns: []string{assetcheck.OperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.OperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateStoreTable,
			Columns: []string{assetcheck.OperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.OperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAgentTable,
			Columns: []string{assetcheck.OperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OperateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.WarehouseTable,
			Columns: []string{assetcheck.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StoreTable,
			Columns: []string{assetcheck.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StationTable,
			Columns: []string{assetcheck.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetCheck.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetCheckUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acc *AssetCheckCreate) OnConflict(opts ...sql.ConflictOption) *AssetCheckUpsertOne {
	acc.conflict = opts
	return &AssetCheckUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acc *AssetCheckCreate) OnConflictColumns(columns ...string) *AssetCheckUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AssetCheckUpsertOne{
		create: acc,
	}
}

type (
	// AssetCheckUpsertOne is the builder for "upsert"-ing
	//  one AssetCheck node.
	AssetCheckUpsertOne struct {
		create *AssetCheckCreate
	}

	// AssetCheckUpsert is the "OnConflict" setter.
	AssetCheckUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckUpsert) SetUpdatedAt(v time.Time) *AssetCheckUpsert {
	u.Set(assetcheck.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateUpdatedAt() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckUpsert) SetDeletedAt(v time.Time) *AssetCheckUpsert {
	u.Set(assetcheck.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateDeletedAt() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckUpsert) ClearDeletedAt() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckUpsert) SetLastModifier(v *model.Modifier) *AssetCheckUpsert {
	u.Set(assetcheck.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateLastModifier() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckUpsert) ClearLastModifier() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetCheckUpsert) SetRemark(v string) *AssetCheckUpsert {
	u.Set(assetcheck.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateRemark() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckUpsert) ClearRemark() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *AssetCheckUpsert) SetStatus(v uint8) *AssetCheckUpsert {
	u.Set(assetcheck.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateStatus() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckUpsert) AddStatus(v uint8) *AssetCheckUpsert {
	u.Add(assetcheck.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckUpsert) ClearStatus() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldStatus)
	return u
}

// SetBatteryNum sets the "battery_num" field.
func (u *AssetCheckUpsert) SetBatteryNum(v uint) *AssetCheckUpsert {
	u.Set(assetcheck.FieldBatteryNum, v)
	return u
}

// UpdateBatteryNum sets the "battery_num" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateBatteryNum() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldBatteryNum)
	return u
}

// AddBatteryNum adds v to the "battery_num" field.
func (u *AssetCheckUpsert) AddBatteryNum(v uint) *AssetCheckUpsert {
	u.Add(assetcheck.FieldBatteryNum, v)
	return u
}

// ClearBatteryNum clears the value of the "battery_num" field.
func (u *AssetCheckUpsert) ClearBatteryNum() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldBatteryNum)
	return u
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (u *AssetCheckUpsert) SetBatteryNumReal(v uint) *AssetCheckUpsert {
	u.Set(assetcheck.FieldBatteryNumReal, v)
	return u
}

// UpdateBatteryNumReal sets the "battery_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateBatteryNumReal() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldBatteryNumReal)
	return u
}

// AddBatteryNumReal adds v to the "battery_num_real" field.
func (u *AssetCheckUpsert) AddBatteryNumReal(v uint) *AssetCheckUpsert {
	u.Add(assetcheck.FieldBatteryNumReal, v)
	return u
}

// ClearBatteryNumReal clears the value of the "battery_num_real" field.
func (u *AssetCheckUpsert) ClearBatteryNumReal() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldBatteryNumReal)
	return u
}

// SetEbikeNum sets the "ebike_num" field.
func (u *AssetCheckUpsert) SetEbikeNum(v uint) *AssetCheckUpsert {
	u.Set(assetcheck.FieldEbikeNum, v)
	return u
}

// UpdateEbikeNum sets the "ebike_num" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateEbikeNum() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldEbikeNum)
	return u
}

// AddEbikeNum adds v to the "ebike_num" field.
func (u *AssetCheckUpsert) AddEbikeNum(v uint) *AssetCheckUpsert {
	u.Add(assetcheck.FieldEbikeNum, v)
	return u
}

// ClearEbikeNum clears the value of the "ebike_num" field.
func (u *AssetCheckUpsert) ClearEbikeNum() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldEbikeNum)
	return u
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (u *AssetCheckUpsert) SetEbikeNumReal(v uint) *AssetCheckUpsert {
	u.Set(assetcheck.FieldEbikeNumReal, v)
	return u
}

// UpdateEbikeNumReal sets the "ebike_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateEbikeNumReal() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldEbikeNumReal)
	return u
}

// AddEbikeNumReal adds v to the "ebike_num_real" field.
func (u *AssetCheckUpsert) AddEbikeNumReal(v uint) *AssetCheckUpsert {
	u.Add(assetcheck.FieldEbikeNumReal, v)
	return u
}

// ClearEbikeNumReal clears the value of the "ebike_num_real" field.
func (u *AssetCheckUpsert) ClearEbikeNumReal() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldEbikeNumReal)
	return u
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckUpsert) SetOperateID(v uint64) *AssetCheckUpsert {
	u.Set(assetcheck.FieldOperateID, v)
	return u
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateOperateID() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldOperateID)
	return u
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckUpsert) ClearOperateID() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldOperateID)
	return u
}

// SetOperateType sets the "operate_type" field.
func (u *AssetCheckUpsert) SetOperateType(v uint8) *AssetCheckUpsert {
	u.Set(assetcheck.FieldOperateType, v)
	return u
}

// UpdateOperateType sets the "operate_type" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateOperateType() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldOperateType)
	return u
}

// AddOperateType adds v to the "operate_type" field.
func (u *AssetCheckUpsert) AddOperateType(v uint8) *AssetCheckUpsert {
	u.Add(assetcheck.FieldOperateType, v)
	return u
}

// ClearOperateType clears the value of the "operate_type" field.
func (u *AssetCheckUpsert) ClearOperateType() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldOperateType)
	return u
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckUpsert) SetLocationsType(v uint8) *AssetCheckUpsert {
	u.Set(assetcheck.FieldLocationsType, v)
	return u
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateLocationsType() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldLocationsType)
	return u
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckUpsert) AddLocationsType(v uint8) *AssetCheckUpsert {
	u.Add(assetcheck.FieldLocationsType, v)
	return u
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckUpsert) ClearLocationsType() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldLocationsType)
	return u
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckUpsert) SetLocationsID(v uint64) *AssetCheckUpsert {
	u.Set(assetcheck.FieldLocationsID, v)
	return u
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateLocationsID() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldLocationsID)
	return u
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckUpsert) ClearLocationsID() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldLocationsID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *AssetCheckUpsert) SetStartAt(v time.Time) *AssetCheckUpsert {
	u.Set(assetcheck.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateStartAt() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AssetCheckUpsert) ClearStartAt() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *AssetCheckUpsert) SetEndAt(v time.Time) *AssetCheckUpsert {
	u.Set(assetcheck.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AssetCheckUpsert) UpdateEndAt() *AssetCheckUpsert {
	u.SetExcluded(assetcheck.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AssetCheckUpsert) ClearEndAt() *AssetCheckUpsert {
	u.SetNull(assetcheck.FieldEndAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetCheckUpsertOne) UpdateNewValues() *AssetCheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetcheck.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assetcheck.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetCheckUpsertOne) Ignore() *AssetCheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetCheckUpsertOne) DoNothing() *AssetCheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCheckCreate.OnConflict
// documentation for more info.
func (u *AssetCheckUpsertOne) Update(set func(*AssetCheckUpsert)) *AssetCheckUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetCheckUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckUpsertOne) SetUpdatedAt(v time.Time) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateUpdatedAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckUpsertOne) SetDeletedAt(v time.Time) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateDeletedAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckUpsertOne) ClearDeletedAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckUpsertOne) SetLastModifier(v *model.Modifier) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateLastModifier() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckUpsertOne) ClearLastModifier() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetCheckUpsertOne) SetRemark(v string) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateRemark() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckUpsertOne) ClearRemark() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *AssetCheckUpsertOne) SetStatus(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckUpsertOne) AddStatus(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateStatus() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckUpsertOne) ClearStatus() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearStatus()
	})
}

// SetBatteryNum sets the "battery_num" field.
func (u *AssetCheckUpsertOne) SetBatteryNum(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetBatteryNum(v)
	})
}

// AddBatteryNum adds v to the "battery_num" field.
func (u *AssetCheckUpsertOne) AddBatteryNum(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddBatteryNum(v)
	})
}

// UpdateBatteryNum sets the "battery_num" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateBatteryNum() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateBatteryNum()
	})
}

// ClearBatteryNum clears the value of the "battery_num" field.
func (u *AssetCheckUpsertOne) ClearBatteryNum() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearBatteryNum()
	})
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (u *AssetCheckUpsertOne) SetBatteryNumReal(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetBatteryNumReal(v)
	})
}

// AddBatteryNumReal adds v to the "battery_num_real" field.
func (u *AssetCheckUpsertOne) AddBatteryNumReal(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddBatteryNumReal(v)
	})
}

// UpdateBatteryNumReal sets the "battery_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateBatteryNumReal() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateBatteryNumReal()
	})
}

// ClearBatteryNumReal clears the value of the "battery_num_real" field.
func (u *AssetCheckUpsertOne) ClearBatteryNumReal() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearBatteryNumReal()
	})
}

// SetEbikeNum sets the "ebike_num" field.
func (u *AssetCheckUpsertOne) SetEbikeNum(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEbikeNum(v)
	})
}

// AddEbikeNum adds v to the "ebike_num" field.
func (u *AssetCheckUpsertOne) AddEbikeNum(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddEbikeNum(v)
	})
}

// UpdateEbikeNum sets the "ebike_num" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateEbikeNum() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEbikeNum()
	})
}

// ClearEbikeNum clears the value of the "ebike_num" field.
func (u *AssetCheckUpsertOne) ClearEbikeNum() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEbikeNum()
	})
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (u *AssetCheckUpsertOne) SetEbikeNumReal(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEbikeNumReal(v)
	})
}

// AddEbikeNumReal adds v to the "ebike_num_real" field.
func (u *AssetCheckUpsertOne) AddEbikeNumReal(v uint) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddEbikeNumReal(v)
	})
}

// UpdateEbikeNumReal sets the "ebike_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateEbikeNumReal() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEbikeNumReal()
	})
}

// ClearEbikeNumReal clears the value of the "ebike_num_real" field.
func (u *AssetCheckUpsertOne) ClearEbikeNumReal() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEbikeNumReal()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckUpsertOne) SetOperateID(v uint64) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateOperateID() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckUpsertOne) ClearOperateID() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateType sets the "operate_type" field.
func (u *AssetCheckUpsertOne) SetOperateType(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetOperateType(v)
	})
}

// AddOperateType adds v to the "operate_type" field.
func (u *AssetCheckUpsertOne) AddOperateType(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddOperateType(v)
	})
}

// UpdateOperateType sets the "operate_type" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateOperateType() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateOperateType()
	})
}

// ClearOperateType clears the value of the "operate_type" field.
func (u *AssetCheckUpsertOne) ClearOperateType() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearOperateType()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckUpsertOne) SetLocationsType(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckUpsertOne) AddLocationsType(v uint8) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateLocationsType() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckUpsertOne) ClearLocationsType() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckUpsertOne) SetLocationsID(v uint64) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateLocationsID() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckUpsertOne) ClearLocationsID() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLocationsID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AssetCheckUpsertOne) SetStartAt(v time.Time) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateStartAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AssetCheckUpsertOne) ClearStartAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AssetCheckUpsertOne) SetEndAt(v time.Time) *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AssetCheckUpsertOne) UpdateEndAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AssetCheckUpsertOne) ClearEndAt() *AssetCheckUpsertOne {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *AssetCheckUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCheckCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetCheckUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetCheckUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetCheckUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetCheckCreateBulk is the builder for creating many AssetCheck entities in bulk.
type AssetCheckCreateBulk struct {
	config
	err      error
	builders []*AssetCheckCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetCheck entities in the database.
func (accb *AssetCheckCreateBulk) Save(ctx context.Context) ([]*AssetCheck, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AssetCheck, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetCheckMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AssetCheckCreateBulk) SaveX(ctx context.Context) []*AssetCheck {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AssetCheckCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AssetCheckCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetCheck.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetCheckUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (accb *AssetCheckCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetCheckUpsertBulk {
	accb.conflict = opts
	return &AssetCheckUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accb *AssetCheckCreateBulk) OnConflictColumns(columns ...string) *AssetCheckUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AssetCheckUpsertBulk{
		create: accb,
	}
}

// AssetCheckUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetCheck nodes.
type AssetCheckUpsertBulk struct {
	create *AssetCheckCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetCheckUpsertBulk) UpdateNewValues() *AssetCheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetcheck.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assetcheck.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetCheck.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetCheckUpsertBulk) Ignore() *AssetCheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetCheckUpsertBulk) DoNothing() *AssetCheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCheckCreateBulk.OnConflict
// documentation for more info.
func (u *AssetCheckUpsertBulk) Update(set func(*AssetCheckUpsert)) *AssetCheckUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetCheckUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckUpsertBulk) SetUpdatedAt(v time.Time) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateUpdatedAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckUpsertBulk) SetDeletedAt(v time.Time) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateDeletedAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckUpsertBulk) ClearDeletedAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckUpsertBulk) SetLastModifier(v *model.Modifier) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateLastModifier() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckUpsertBulk) ClearLastModifier() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetCheckUpsertBulk) SetRemark(v string) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateRemark() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckUpsertBulk) ClearRemark() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *AssetCheckUpsertBulk) SetStatus(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckUpsertBulk) AddStatus(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateStatus() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckUpsertBulk) ClearStatus() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearStatus()
	})
}

// SetBatteryNum sets the "battery_num" field.
func (u *AssetCheckUpsertBulk) SetBatteryNum(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetBatteryNum(v)
	})
}

// AddBatteryNum adds v to the "battery_num" field.
func (u *AssetCheckUpsertBulk) AddBatteryNum(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddBatteryNum(v)
	})
}

// UpdateBatteryNum sets the "battery_num" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateBatteryNum() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateBatteryNum()
	})
}

// ClearBatteryNum clears the value of the "battery_num" field.
func (u *AssetCheckUpsertBulk) ClearBatteryNum() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearBatteryNum()
	})
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (u *AssetCheckUpsertBulk) SetBatteryNumReal(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetBatteryNumReal(v)
	})
}

// AddBatteryNumReal adds v to the "battery_num_real" field.
func (u *AssetCheckUpsertBulk) AddBatteryNumReal(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddBatteryNumReal(v)
	})
}

// UpdateBatteryNumReal sets the "battery_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateBatteryNumReal() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateBatteryNumReal()
	})
}

// ClearBatteryNumReal clears the value of the "battery_num_real" field.
func (u *AssetCheckUpsertBulk) ClearBatteryNumReal() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearBatteryNumReal()
	})
}

// SetEbikeNum sets the "ebike_num" field.
func (u *AssetCheckUpsertBulk) SetEbikeNum(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEbikeNum(v)
	})
}

// AddEbikeNum adds v to the "ebike_num" field.
func (u *AssetCheckUpsertBulk) AddEbikeNum(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddEbikeNum(v)
	})
}

// UpdateEbikeNum sets the "ebike_num" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateEbikeNum() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEbikeNum()
	})
}

// ClearEbikeNum clears the value of the "ebike_num" field.
func (u *AssetCheckUpsertBulk) ClearEbikeNum() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEbikeNum()
	})
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (u *AssetCheckUpsertBulk) SetEbikeNumReal(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEbikeNumReal(v)
	})
}

// AddEbikeNumReal adds v to the "ebike_num_real" field.
func (u *AssetCheckUpsertBulk) AddEbikeNumReal(v uint) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddEbikeNumReal(v)
	})
}

// UpdateEbikeNumReal sets the "ebike_num_real" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateEbikeNumReal() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEbikeNumReal()
	})
}

// ClearEbikeNumReal clears the value of the "ebike_num_real" field.
func (u *AssetCheckUpsertBulk) ClearEbikeNumReal() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEbikeNumReal()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckUpsertBulk) SetOperateID(v uint64) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateOperateID() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckUpsertBulk) ClearOperateID() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateType sets the "operate_type" field.
func (u *AssetCheckUpsertBulk) SetOperateType(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetOperateType(v)
	})
}

// AddOperateType adds v to the "operate_type" field.
func (u *AssetCheckUpsertBulk) AddOperateType(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddOperateType(v)
	})
}

// UpdateOperateType sets the "operate_type" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateOperateType() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateOperateType()
	})
}

// ClearOperateType clears the value of the "operate_type" field.
func (u *AssetCheckUpsertBulk) ClearOperateType() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearOperateType()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckUpsertBulk) SetLocationsType(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckUpsertBulk) AddLocationsType(v uint8) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateLocationsType() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckUpsertBulk) ClearLocationsType() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckUpsertBulk) SetLocationsID(v uint64) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateLocationsID() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckUpsertBulk) ClearLocationsID() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearLocationsID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *AssetCheckUpsertBulk) SetStartAt(v time.Time) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateStartAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *AssetCheckUpsertBulk) ClearStartAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *AssetCheckUpsertBulk) SetEndAt(v time.Time) *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *AssetCheckUpsertBulk) UpdateEndAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *AssetCheckUpsertBulk) ClearEndAt() *AssetCheckUpsertBulk {
	return u.Update(func(s *AssetCheckUpsert) {
		s.ClearEndAt()
	})
}

// Exec executes the query.
func (u *AssetCheckUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetCheckCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCheckCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetCheckUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
