// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterymodelnew"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelNewDelete is the builder for deleting a BatteryModelNew entity.
type BatteryModelNewDelete struct {
	config
	hooks    []Hook
	mutation *BatteryModelNewMutation
}

// Where appends a list predicates to the BatteryModelNewDelete builder.
func (bmnd *BatteryModelNewDelete) Where(ps ...predicate.BatteryModelNew) *BatteryModelNewDelete {
	bmnd.mutation.Where(ps...)
	return bmnd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bmnd *BatteryModelNewDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bmnd.sqlExec, bmnd.mutation, bmnd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bmnd *BatteryModelNewDelete) ExecX(ctx context.Context) int {
	n, err := bmnd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bmnd *BatteryModelNewDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(batterymodelnew.Table, sqlgraph.NewFieldSpec(batterymodelnew.FieldID, field.TypeUint64))
	if ps := bmnd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bmnd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bmnd.mutation.done = true
	return affected, err
}

// BatteryModelNewDeleteOne is the builder for deleting a single BatteryModelNew entity.
type BatteryModelNewDeleteOne struct {
	bmnd *BatteryModelNewDelete
}

// Where appends a list predicates to the BatteryModelNewDelete builder.
func (bmndo *BatteryModelNewDeleteOne) Where(ps ...predicate.BatteryModelNew) *BatteryModelNewDeleteOne {
	bmndo.bmnd.mutation.Where(ps...)
	return bmndo
}

// Exec executes the deletion query.
func (bmndo *BatteryModelNewDeleteOne) Exec(ctx context.Context) error {
	n, err := bmndo.bmnd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{batterymodelnew.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bmndo *BatteryModelNewDeleteOne) ExecX(ctx context.Context) {
	if err := bmndo.Exec(ctx); err != nil {
		panic(err)
	}
}
