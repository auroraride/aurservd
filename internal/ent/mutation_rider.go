// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/rider"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// RiderMutation represents an operation that mutates the Rider nodes in the graph.
type RiderMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	creator           **model.Modifier
	last_modifier     **model.Modifier
	remark            *string
	name              *string
	id_card_number    *string
	phone             *string
	contact           **model.RiderContact
	device_type       *uint8
	adddevice_type    *int8
	last_device       *string
	is_new_device     *bool
	last_face         *string
	push_id           *string
	last_signin_at    *time.Time
	blocked           *bool
	points            *int64
	addpoints         *int64
	clearedFields     map[string]struct{}
	station           *uint64
	clearedstation    bool
	person            *uint64
	clearedperson     bool
	enterprise        *uint64
	clearedenterprise bool
	contracts         map[uint64]struct{}
	removedcontracts  map[uint64]struct{}
	clearedcontracts  bool
	faults            map[uint64]struct{}
	removedfaults     map[uint64]struct{}
	clearedfaults     bool
	orders            map[uint64]struct{}
	removedorders     map[uint64]struct{}
	clearedorders     bool
	exchanges         map[uint64]struct{}
	removedexchanges  map[uint64]struct{}
	clearedexchanges  bool
	subscribes        map[uint64]struct{}
	removedsubscribes map[uint64]struct{}
	clearedsubscribes bool
	stocks            map[uint64]struct{}
	removedstocks     map[uint64]struct{}
	clearedstocks     bool
	followups         map[uint64]struct{}
	removedfollowups  map[uint64]struct{}
	clearedfollowups  bool
	done              bool
	oldValue          func(context.Context) (*Rider, error)
	predicates        []predicate.Rider
}

var _ ent.Mutation = (*RiderMutation)(nil)

// riderOption allows management of the mutation configuration using functional options.
type riderOption func(*RiderMutation)

// newRiderMutation creates new mutation for the Rider entity.
func newRiderMutation(c config, op Op, opts ...riderOption) *RiderMutation {
	m := &RiderMutation{
		config:        c,
		op:            op,
		typ:           TypeRider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRiderID sets the ID field of the mutation.
func withRiderID(id uint64) riderOption {
	return func(m *RiderMutation) {
		var (
			err   error
			once  sync.Once
			value *Rider
		)
		m.oldValue = func(ctx context.Context) (*Rider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRider sets the old Rider of the mutation.
func withRider(node *Rider) riderOption {
	return func(m *RiderMutation) {
		m.oldValue = func(context.Context) (*Rider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RiderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RiderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RiderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RiderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Rider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RiderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RiderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RiderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RiderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RiderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RiderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RiderMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RiderMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RiderMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[rider.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RiderMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[rider.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RiderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, rider.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *RiderMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *RiderMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *RiderMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[rider.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *RiderMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[rider.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *RiderMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, rider.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *RiderMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *RiderMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *RiderMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[rider.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *RiderMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *RiderMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, rider.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *RiderMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *RiderMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *RiderMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[rider.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *RiderMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[rider.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *RiderMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, rider.FieldRemark)
}

// SetStationID sets the "station_id" field.
func (m *RiderMutation) SetStationID(u uint64) {
	m.station = &u
}

// StationID returns the value of the "station_id" field in the mutation.
func (m *RiderMutation) StationID() (r uint64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStationID returns the old "station_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldStationID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStationID: %w", err)
	}
	return oldValue.StationID, nil
}

// ClearStationID clears the value of the "station_id" field.
func (m *RiderMutation) ClearStationID() {
	m.station = nil
	m.clearedFields[rider.FieldStationID] = struct{}{}
}

// StationIDCleared returns if the "station_id" field was cleared in this mutation.
func (m *RiderMutation) StationIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldStationID]
	return ok
}

// ResetStationID resets all changes to the "station_id" field.
func (m *RiderMutation) ResetStationID() {
	m.station = nil
	delete(m.clearedFields, rider.FieldStationID)
}

// SetPersonID sets the "person_id" field.
func (m *RiderMutation) SetPersonID(u uint64) {
	m.person = &u
}

// PersonID returns the value of the "person_id" field in the mutation.
func (m *RiderMutation) PersonID() (r uint64, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonID returns the old "person_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPersonID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPersonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPersonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonID: %w", err)
	}
	return oldValue.PersonID, nil
}

// ClearPersonID clears the value of the "person_id" field.
func (m *RiderMutation) ClearPersonID() {
	m.person = nil
	m.clearedFields[rider.FieldPersonID] = struct{}{}
}

// PersonIDCleared returns if the "person_id" field was cleared in this mutation.
func (m *RiderMutation) PersonIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldPersonID]
	return ok
}

// ResetPersonID resets all changes to the "person_id" field.
func (m *RiderMutation) ResetPersonID() {
	m.person = nil
	delete(m.clearedFields, rider.FieldPersonID)
}

// SetName sets the "name" field.
func (m *RiderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RiderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *RiderMutation) ClearName() {
	m.name = nil
	m.clearedFields[rider.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *RiderMutation) NameCleared() bool {
	_, ok := m.clearedFields[rider.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *RiderMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, rider.FieldName)
}

// SetIDCardNumber sets the "id_card_number" field.
func (m *RiderMutation) SetIDCardNumber(s string) {
	m.id_card_number = &s
}

// IDCardNumber returns the value of the "id_card_number" field in the mutation.
func (m *RiderMutation) IDCardNumber() (r string, exists bool) {
	v := m.id_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNumber returns the old "id_card_number" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldIDCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNumber: %w", err)
	}
	return oldValue.IDCardNumber, nil
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (m *RiderMutation) ClearIDCardNumber() {
	m.id_card_number = nil
	m.clearedFields[rider.FieldIDCardNumber] = struct{}{}
}

// IDCardNumberCleared returns if the "id_card_number" field was cleared in this mutation.
func (m *RiderMutation) IDCardNumberCleared() bool {
	_, ok := m.clearedFields[rider.FieldIDCardNumber]
	return ok
}

// ResetIDCardNumber resets all changes to the "id_card_number" field.
func (m *RiderMutation) ResetIDCardNumber() {
	m.id_card_number = nil
	delete(m.clearedFields, rider.FieldIDCardNumber)
}

// SetEnterpriseID sets the "enterprise_id" field.
func (m *RiderMutation) SetEnterpriseID(u uint64) {
	m.enterprise = &u
}

// EnterpriseID returns the value of the "enterprise_id" field in the mutation.
func (m *RiderMutation) EnterpriseID() (r uint64, exists bool) {
	v := m.enterprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseID returns the old "enterprise_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldEnterpriseID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnterpriseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnterpriseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseID: %w", err)
	}
	return oldValue.EnterpriseID, nil
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (m *RiderMutation) ClearEnterpriseID() {
	m.enterprise = nil
	m.clearedFields[rider.FieldEnterpriseID] = struct{}{}
}

// EnterpriseIDCleared returns if the "enterprise_id" field was cleared in this mutation.
func (m *RiderMutation) EnterpriseIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldEnterpriseID]
	return ok
}

// ResetEnterpriseID resets all changes to the "enterprise_id" field.
func (m *RiderMutation) ResetEnterpriseID() {
	m.enterprise = nil
	delete(m.clearedFields, rider.FieldEnterpriseID)
}

// SetPhone sets the "phone" field.
func (m *RiderMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *RiderMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *RiderMutation) ResetPhone() {
	m.phone = nil
}

// SetContact sets the "contact" field.
func (m *RiderMutation) SetContact(mc *model.RiderContact) {
	m.contact = &mc
}

// Contact returns the value of the "contact" field in the mutation.
func (m *RiderMutation) Contact() (r *model.RiderContact, exists bool) {
	v := m.contact
	if v == nil {
		return
	}
	return *v, true
}

// OldContact returns the old "contact" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldContact(ctx context.Context) (v *model.RiderContact, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContact: %w", err)
	}
	return oldValue.Contact, nil
}

// ClearContact clears the value of the "contact" field.
func (m *RiderMutation) ClearContact() {
	m.contact = nil
	m.clearedFields[rider.FieldContact] = struct{}{}
}

// ContactCleared returns if the "contact" field was cleared in this mutation.
func (m *RiderMutation) ContactCleared() bool {
	_, ok := m.clearedFields[rider.FieldContact]
	return ok
}

// ResetContact resets all changes to the "contact" field.
func (m *RiderMutation) ResetContact() {
	m.contact = nil
	delete(m.clearedFields, rider.FieldContact)
}

// SetDeviceType sets the "device_type" field.
func (m *RiderMutation) SetDeviceType(u uint8) {
	m.device_type = &u
	m.adddevice_type = nil
}

// DeviceType returns the value of the "device_type" field in the mutation.
func (m *RiderMutation) DeviceType() (r uint8, exists bool) {
	v := m.device_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceType returns the old "device_type" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldDeviceType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceType: %w", err)
	}
	return oldValue.DeviceType, nil
}

// AddDeviceType adds u to the "device_type" field.
func (m *RiderMutation) AddDeviceType(u int8) {
	if m.adddevice_type != nil {
		*m.adddevice_type += u
	} else {
		m.adddevice_type = &u
	}
}

// AddedDeviceType returns the value that was added to the "device_type" field in this mutation.
func (m *RiderMutation) AddedDeviceType() (r int8, exists bool) {
	v := m.adddevice_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeviceType clears the value of the "device_type" field.
func (m *RiderMutation) ClearDeviceType() {
	m.device_type = nil
	m.adddevice_type = nil
	m.clearedFields[rider.FieldDeviceType] = struct{}{}
}

// DeviceTypeCleared returns if the "device_type" field was cleared in this mutation.
func (m *RiderMutation) DeviceTypeCleared() bool {
	_, ok := m.clearedFields[rider.FieldDeviceType]
	return ok
}

// ResetDeviceType resets all changes to the "device_type" field.
func (m *RiderMutation) ResetDeviceType() {
	m.device_type = nil
	m.adddevice_type = nil
	delete(m.clearedFields, rider.FieldDeviceType)
}

// SetLastDevice sets the "last_device" field.
func (m *RiderMutation) SetLastDevice(s string) {
	m.last_device = &s
}

// LastDevice returns the value of the "last_device" field in the mutation.
func (m *RiderMutation) LastDevice() (r string, exists bool) {
	v := m.last_device
	if v == nil {
		return
	}
	return *v, true
}

// OldLastDevice returns the old "last_device" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastDevice: %w", err)
	}
	return oldValue.LastDevice, nil
}

// ClearLastDevice clears the value of the "last_device" field.
func (m *RiderMutation) ClearLastDevice() {
	m.last_device = nil
	m.clearedFields[rider.FieldLastDevice] = struct{}{}
}

// LastDeviceCleared returns if the "last_device" field was cleared in this mutation.
func (m *RiderMutation) LastDeviceCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastDevice]
	return ok
}

// ResetLastDevice resets all changes to the "last_device" field.
func (m *RiderMutation) ResetLastDevice() {
	m.last_device = nil
	delete(m.clearedFields, rider.FieldLastDevice)
}

// SetIsNewDevice sets the "is_new_device" field.
func (m *RiderMutation) SetIsNewDevice(b bool) {
	m.is_new_device = &b
}

// IsNewDevice returns the value of the "is_new_device" field in the mutation.
func (m *RiderMutation) IsNewDevice() (r bool, exists bool) {
	v := m.is_new_device
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNewDevice returns the old "is_new_device" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldIsNewDevice(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsNewDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsNewDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNewDevice: %w", err)
	}
	return oldValue.IsNewDevice, nil
}

// ResetIsNewDevice resets all changes to the "is_new_device" field.
func (m *RiderMutation) ResetIsNewDevice() {
	m.is_new_device = nil
}

// SetLastFace sets the "last_face" field.
func (m *RiderMutation) SetLastFace(s string) {
	m.last_face = &s
}

// LastFace returns the value of the "last_face" field in the mutation.
func (m *RiderMutation) LastFace() (r string, exists bool) {
	v := m.last_face
	if v == nil {
		return
	}
	return *v, true
}

// OldLastFace returns the old "last_face" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastFace(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastFace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastFace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastFace: %w", err)
	}
	return oldValue.LastFace, nil
}

// ClearLastFace clears the value of the "last_face" field.
func (m *RiderMutation) ClearLastFace() {
	m.last_face = nil
	m.clearedFields[rider.FieldLastFace] = struct{}{}
}

// LastFaceCleared returns if the "last_face" field was cleared in this mutation.
func (m *RiderMutation) LastFaceCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastFace]
	return ok
}

// ResetLastFace resets all changes to the "last_face" field.
func (m *RiderMutation) ResetLastFace() {
	m.last_face = nil
	delete(m.clearedFields, rider.FieldLastFace)
}

// SetPushID sets the "push_id" field.
func (m *RiderMutation) SetPushID(s string) {
	m.push_id = &s
}

// PushID returns the value of the "push_id" field in the mutation.
func (m *RiderMutation) PushID() (r string, exists bool) {
	v := m.push_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPushID returns the old "push_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPushID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPushID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPushID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPushID: %w", err)
	}
	return oldValue.PushID, nil
}

// ClearPushID clears the value of the "push_id" field.
func (m *RiderMutation) ClearPushID() {
	m.push_id = nil
	m.clearedFields[rider.FieldPushID] = struct{}{}
}

// PushIDCleared returns if the "push_id" field was cleared in this mutation.
func (m *RiderMutation) PushIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldPushID]
	return ok
}

// ResetPushID resets all changes to the "push_id" field.
func (m *RiderMutation) ResetPushID() {
	m.push_id = nil
	delete(m.clearedFields, rider.FieldPushID)
}

// SetLastSigninAt sets the "last_signin_at" field.
func (m *RiderMutation) SetLastSigninAt(t time.Time) {
	m.last_signin_at = &t
}

// LastSigninAt returns the value of the "last_signin_at" field in the mutation.
func (m *RiderMutation) LastSigninAt() (r time.Time, exists bool) {
	v := m.last_signin_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSigninAt returns the old "last_signin_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastSigninAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSigninAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSigninAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSigninAt: %w", err)
	}
	return oldValue.LastSigninAt, nil
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (m *RiderMutation) ClearLastSigninAt() {
	m.last_signin_at = nil
	m.clearedFields[rider.FieldLastSigninAt] = struct{}{}
}

// LastSigninAtCleared returns if the "last_signin_at" field was cleared in this mutation.
func (m *RiderMutation) LastSigninAtCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastSigninAt]
	return ok
}

// ResetLastSigninAt resets all changes to the "last_signin_at" field.
func (m *RiderMutation) ResetLastSigninAt() {
	m.last_signin_at = nil
	delete(m.clearedFields, rider.FieldLastSigninAt)
}

// SetBlocked sets the "blocked" field.
func (m *RiderMutation) SetBlocked(b bool) {
	m.blocked = &b
}

// Blocked returns the value of the "blocked" field in the mutation.
func (m *RiderMutation) Blocked() (r bool, exists bool) {
	v := m.blocked
	if v == nil {
		return
	}
	return *v, true
}

// OldBlocked returns the old "blocked" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldBlocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlocked: %w", err)
	}
	return oldValue.Blocked, nil
}

// ResetBlocked resets all changes to the "blocked" field.
func (m *RiderMutation) ResetBlocked() {
	m.blocked = nil
}

// SetPoints sets the "points" field.
func (m *RiderMutation) SetPoints(i int64) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *RiderMutation) Points() (r int64, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPoints(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *RiderMutation) AddPoints(i int64) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *RiderMutation) AddedPoints() (r int64, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *RiderMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (m *RiderMutation) ClearStation() {
	m.clearedstation = true
}

// StationCleared reports if the "station" edge to the EnterpriseStation entity was cleared.
func (m *RiderMutation) StationCleared() bool {
	return m.StationIDCleared() || m.clearedstation
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *RiderMutation) StationIDs() (ids []uint64) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *RiderMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// ClearPerson clears the "person" edge to the Person entity.
func (m *RiderMutation) ClearPerson() {
	m.clearedperson = true
}

// PersonCleared reports if the "person" edge to the Person entity was cleared.
func (m *RiderMutation) PersonCleared() bool {
	return m.PersonIDCleared() || m.clearedperson
}

// PersonIDs returns the "person" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonID instead. It exists only for internal usage by the builders.
func (m *RiderMutation) PersonIDs() (ids []uint64) {
	if id := m.person; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPerson resets all changes to the "person" edge.
func (m *RiderMutation) ResetPerson() {
	m.person = nil
	m.clearedperson = false
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (m *RiderMutation) ClearEnterprise() {
	m.clearedenterprise = true
}

// EnterpriseCleared reports if the "enterprise" edge to the Enterprise entity was cleared.
func (m *RiderMutation) EnterpriseCleared() bool {
	return m.EnterpriseIDCleared() || m.clearedenterprise
}

// EnterpriseIDs returns the "enterprise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnterpriseID instead. It exists only for internal usage by the builders.
func (m *RiderMutation) EnterpriseIDs() (ids []uint64) {
	if id := m.enterprise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnterprise resets all changes to the "enterprise" edge.
func (m *RiderMutation) ResetEnterprise() {
	m.enterprise = nil
	m.clearedenterprise = false
}

// AddContractIDs adds the "contracts" edge to the Contract entity by ids.
func (m *RiderMutation) AddContractIDs(ids ...uint64) {
	if m.contracts == nil {
		m.contracts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.contracts[ids[i]] = struct{}{}
	}
}

// ClearContracts clears the "contracts" edge to the Contract entity.
func (m *RiderMutation) ClearContracts() {
	m.clearedcontracts = true
}

// ContractsCleared reports if the "contracts" edge to the Contract entity was cleared.
func (m *RiderMutation) ContractsCleared() bool {
	return m.clearedcontracts
}

// RemoveContractIDs removes the "contracts" edge to the Contract entity by IDs.
func (m *RiderMutation) RemoveContractIDs(ids ...uint64) {
	if m.removedcontracts == nil {
		m.removedcontracts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.contracts, ids[i])
		m.removedcontracts[ids[i]] = struct{}{}
	}
}

// RemovedContracts returns the removed IDs of the "contracts" edge to the Contract entity.
func (m *RiderMutation) RemovedContractsIDs() (ids []uint64) {
	for id := range m.removedcontracts {
		ids = append(ids, id)
	}
	return
}

// ContractsIDs returns the "contracts" edge IDs in the mutation.
func (m *RiderMutation) ContractsIDs() (ids []uint64) {
	for id := range m.contracts {
		ids = append(ids, id)
	}
	return
}

// ResetContracts resets all changes to the "contracts" edge.
func (m *RiderMutation) ResetContracts() {
	m.contracts = nil
	m.clearedcontracts = false
	m.removedcontracts = nil
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by ids.
func (m *RiderMutation) AddFaultIDs(ids ...uint64) {
	if m.faults == nil {
		m.faults = make(map[uint64]struct{})
	}
	for i := range ids {
		m.faults[ids[i]] = struct{}{}
	}
}

// ClearFaults clears the "faults" edge to the CabinetFault entity.
func (m *RiderMutation) ClearFaults() {
	m.clearedfaults = true
}

// FaultsCleared reports if the "faults" edge to the CabinetFault entity was cleared.
func (m *RiderMutation) FaultsCleared() bool {
	return m.clearedfaults
}

// RemoveFaultIDs removes the "faults" edge to the CabinetFault entity by IDs.
func (m *RiderMutation) RemoveFaultIDs(ids ...uint64) {
	if m.removedfaults == nil {
		m.removedfaults = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.faults, ids[i])
		m.removedfaults[ids[i]] = struct{}{}
	}
}

// RemovedFaults returns the removed IDs of the "faults" edge to the CabinetFault entity.
func (m *RiderMutation) RemovedFaultsIDs() (ids []uint64) {
	for id := range m.removedfaults {
		ids = append(ids, id)
	}
	return
}

// FaultsIDs returns the "faults" edge IDs in the mutation.
func (m *RiderMutation) FaultsIDs() (ids []uint64) {
	for id := range m.faults {
		ids = append(ids, id)
	}
	return
}

// ResetFaults resets all changes to the "faults" edge.
func (m *RiderMutation) ResetFaults() {
	m.faults = nil
	m.clearedfaults = false
	m.removedfaults = nil
}

// AddOrderIDs adds the "orders" edge to the Order entity by ids.
func (m *RiderMutation) AddOrderIDs(ids ...uint64) {
	if m.orders == nil {
		m.orders = make(map[uint64]struct{})
	}
	for i := range ids {
		m.orders[ids[i]] = struct{}{}
	}
}

// ClearOrders clears the "orders" edge to the Order entity.
func (m *RiderMutation) ClearOrders() {
	m.clearedorders = true
}

// OrdersCleared reports if the "orders" edge to the Order entity was cleared.
func (m *RiderMutation) OrdersCleared() bool {
	return m.clearedorders
}

// RemoveOrderIDs removes the "orders" edge to the Order entity by IDs.
func (m *RiderMutation) RemoveOrderIDs(ids ...uint64) {
	if m.removedorders == nil {
		m.removedorders = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.orders, ids[i])
		m.removedorders[ids[i]] = struct{}{}
	}
}

// RemovedOrders returns the removed IDs of the "orders" edge to the Order entity.
func (m *RiderMutation) RemovedOrdersIDs() (ids []uint64) {
	for id := range m.removedorders {
		ids = append(ids, id)
	}
	return
}

// OrdersIDs returns the "orders" edge IDs in the mutation.
func (m *RiderMutation) OrdersIDs() (ids []uint64) {
	for id := range m.orders {
		ids = append(ids, id)
	}
	return
}

// ResetOrders resets all changes to the "orders" edge.
func (m *RiderMutation) ResetOrders() {
	m.orders = nil
	m.clearedorders = false
	m.removedorders = nil
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by ids.
func (m *RiderMutation) AddExchangeIDs(ids ...uint64) {
	if m.exchanges == nil {
		m.exchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		m.exchanges[ids[i]] = struct{}{}
	}
}

// ClearExchanges clears the "exchanges" edge to the Exchange entity.
func (m *RiderMutation) ClearExchanges() {
	m.clearedexchanges = true
}

// ExchangesCleared reports if the "exchanges" edge to the Exchange entity was cleared.
func (m *RiderMutation) ExchangesCleared() bool {
	return m.clearedexchanges
}

// RemoveExchangeIDs removes the "exchanges" edge to the Exchange entity by IDs.
func (m *RiderMutation) RemoveExchangeIDs(ids ...uint64) {
	if m.removedexchanges == nil {
		m.removedexchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.exchanges, ids[i])
		m.removedexchanges[ids[i]] = struct{}{}
	}
}

// RemovedExchanges returns the removed IDs of the "exchanges" edge to the Exchange entity.
func (m *RiderMutation) RemovedExchangesIDs() (ids []uint64) {
	for id := range m.removedexchanges {
		ids = append(ids, id)
	}
	return
}

// ExchangesIDs returns the "exchanges" edge IDs in the mutation.
func (m *RiderMutation) ExchangesIDs() (ids []uint64) {
	for id := range m.exchanges {
		ids = append(ids, id)
	}
	return
}

// ResetExchanges resets all changes to the "exchanges" edge.
func (m *RiderMutation) ResetExchanges() {
	m.exchanges = nil
	m.clearedexchanges = false
	m.removedexchanges = nil
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by ids.
func (m *RiderMutation) AddSubscribeIDs(ids ...uint64) {
	if m.subscribes == nil {
		m.subscribes = make(map[uint64]struct{})
	}
	for i := range ids {
		m.subscribes[ids[i]] = struct{}{}
	}
}

// ClearSubscribes clears the "subscribes" edge to the Subscribe entity.
func (m *RiderMutation) ClearSubscribes() {
	m.clearedsubscribes = true
}

// SubscribesCleared reports if the "subscribes" edge to the Subscribe entity was cleared.
func (m *RiderMutation) SubscribesCleared() bool {
	return m.clearedsubscribes
}

// RemoveSubscribeIDs removes the "subscribes" edge to the Subscribe entity by IDs.
func (m *RiderMutation) RemoveSubscribeIDs(ids ...uint64) {
	if m.removedsubscribes == nil {
		m.removedsubscribes = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.subscribes, ids[i])
		m.removedsubscribes[ids[i]] = struct{}{}
	}
}

// RemovedSubscribes returns the removed IDs of the "subscribes" edge to the Subscribe entity.
func (m *RiderMutation) RemovedSubscribesIDs() (ids []uint64) {
	for id := range m.removedsubscribes {
		ids = append(ids, id)
	}
	return
}

// SubscribesIDs returns the "subscribes" edge IDs in the mutation.
func (m *RiderMutation) SubscribesIDs() (ids []uint64) {
	for id := range m.subscribes {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribes resets all changes to the "subscribes" edge.
func (m *RiderMutation) ResetSubscribes() {
	m.subscribes = nil
	m.clearedsubscribes = false
	m.removedsubscribes = nil
}

// AddStockIDs adds the "stocks" edge to the Stock entity by ids.
func (m *RiderMutation) AddStockIDs(ids ...uint64) {
	if m.stocks == nil {
		m.stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.stocks[ids[i]] = struct{}{}
	}
}

// ClearStocks clears the "stocks" edge to the Stock entity.
func (m *RiderMutation) ClearStocks() {
	m.clearedstocks = true
}

// StocksCleared reports if the "stocks" edge to the Stock entity was cleared.
func (m *RiderMutation) StocksCleared() bool {
	return m.clearedstocks
}

// RemoveStockIDs removes the "stocks" edge to the Stock entity by IDs.
func (m *RiderMutation) RemoveStockIDs(ids ...uint64) {
	if m.removedstocks == nil {
		m.removedstocks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.stocks, ids[i])
		m.removedstocks[ids[i]] = struct{}{}
	}
}

// RemovedStocks returns the removed IDs of the "stocks" edge to the Stock entity.
func (m *RiderMutation) RemovedStocksIDs() (ids []uint64) {
	for id := range m.removedstocks {
		ids = append(ids, id)
	}
	return
}

// StocksIDs returns the "stocks" edge IDs in the mutation.
func (m *RiderMutation) StocksIDs() (ids []uint64) {
	for id := range m.stocks {
		ids = append(ids, id)
	}
	return
}

// ResetStocks resets all changes to the "stocks" edge.
func (m *RiderMutation) ResetStocks() {
	m.stocks = nil
	m.clearedstocks = false
	m.removedstocks = nil
}

// AddFollowupIDs adds the "followups" edge to the RiderFollowUp entity by ids.
func (m *RiderMutation) AddFollowupIDs(ids ...uint64) {
	if m.followups == nil {
		m.followups = make(map[uint64]struct{})
	}
	for i := range ids {
		m.followups[ids[i]] = struct{}{}
	}
}

// ClearFollowups clears the "followups" edge to the RiderFollowUp entity.
func (m *RiderMutation) ClearFollowups() {
	m.clearedfollowups = true
}

// FollowupsCleared reports if the "followups" edge to the RiderFollowUp entity was cleared.
func (m *RiderMutation) FollowupsCleared() bool {
	return m.clearedfollowups
}

// RemoveFollowupIDs removes the "followups" edge to the RiderFollowUp entity by IDs.
func (m *RiderMutation) RemoveFollowupIDs(ids ...uint64) {
	if m.removedfollowups == nil {
		m.removedfollowups = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.followups, ids[i])
		m.removedfollowups[ids[i]] = struct{}{}
	}
}

// RemovedFollowups returns the removed IDs of the "followups" edge to the RiderFollowUp entity.
func (m *RiderMutation) RemovedFollowupsIDs() (ids []uint64) {
	for id := range m.removedfollowups {
		ids = append(ids, id)
	}
	return
}

// FollowupsIDs returns the "followups" edge IDs in the mutation.
func (m *RiderMutation) FollowupsIDs() (ids []uint64) {
	for id := range m.followups {
		ids = append(ids, id)
	}
	return
}

// ResetFollowups resets all changes to the "followups" edge.
func (m *RiderMutation) ResetFollowups() {
	m.followups = nil
	m.clearedfollowups = false
	m.removedfollowups = nil
}

// Where appends a list predicates to the RiderMutation builder.
func (m *RiderMutation) Where(ps ...predicate.Rider) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RiderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rider).
func (m *RiderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RiderMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.created_at != nil {
		fields = append(fields, rider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rider.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, rider.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, rider.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, rider.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, rider.FieldRemark)
	}
	if m.station != nil {
		fields = append(fields, rider.FieldStationID)
	}
	if m.person != nil {
		fields = append(fields, rider.FieldPersonID)
	}
	if m.name != nil {
		fields = append(fields, rider.FieldName)
	}
	if m.id_card_number != nil {
		fields = append(fields, rider.FieldIDCardNumber)
	}
	if m.enterprise != nil {
		fields = append(fields, rider.FieldEnterpriseID)
	}
	if m.phone != nil {
		fields = append(fields, rider.FieldPhone)
	}
	if m.contact != nil {
		fields = append(fields, rider.FieldContact)
	}
	if m.device_type != nil {
		fields = append(fields, rider.FieldDeviceType)
	}
	if m.last_device != nil {
		fields = append(fields, rider.FieldLastDevice)
	}
	if m.is_new_device != nil {
		fields = append(fields, rider.FieldIsNewDevice)
	}
	if m.last_face != nil {
		fields = append(fields, rider.FieldLastFace)
	}
	if m.push_id != nil {
		fields = append(fields, rider.FieldPushID)
	}
	if m.last_signin_at != nil {
		fields = append(fields, rider.FieldLastSigninAt)
	}
	if m.blocked != nil {
		fields = append(fields, rider.FieldBlocked)
	}
	if m.points != nil {
		fields = append(fields, rider.FieldPoints)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RiderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rider.FieldCreatedAt:
		return m.CreatedAt()
	case rider.FieldUpdatedAt:
		return m.UpdatedAt()
	case rider.FieldDeletedAt:
		return m.DeletedAt()
	case rider.FieldCreator:
		return m.Creator()
	case rider.FieldLastModifier:
		return m.LastModifier()
	case rider.FieldRemark:
		return m.Remark()
	case rider.FieldStationID:
		return m.StationID()
	case rider.FieldPersonID:
		return m.PersonID()
	case rider.FieldName:
		return m.Name()
	case rider.FieldIDCardNumber:
		return m.IDCardNumber()
	case rider.FieldEnterpriseID:
		return m.EnterpriseID()
	case rider.FieldPhone:
		return m.Phone()
	case rider.FieldContact:
		return m.Contact()
	case rider.FieldDeviceType:
		return m.DeviceType()
	case rider.FieldLastDevice:
		return m.LastDevice()
	case rider.FieldIsNewDevice:
		return m.IsNewDevice()
	case rider.FieldLastFace:
		return m.LastFace()
	case rider.FieldPushID:
		return m.PushID()
	case rider.FieldLastSigninAt:
		return m.LastSigninAt()
	case rider.FieldBlocked:
		return m.Blocked()
	case rider.FieldPoints:
		return m.Points()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RiderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case rider.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case rider.FieldCreator:
		return m.OldCreator(ctx)
	case rider.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case rider.FieldRemark:
		return m.OldRemark(ctx)
	case rider.FieldStationID:
		return m.OldStationID(ctx)
	case rider.FieldPersonID:
		return m.OldPersonID(ctx)
	case rider.FieldName:
		return m.OldName(ctx)
	case rider.FieldIDCardNumber:
		return m.OldIDCardNumber(ctx)
	case rider.FieldEnterpriseID:
		return m.OldEnterpriseID(ctx)
	case rider.FieldPhone:
		return m.OldPhone(ctx)
	case rider.FieldContact:
		return m.OldContact(ctx)
	case rider.FieldDeviceType:
		return m.OldDeviceType(ctx)
	case rider.FieldLastDevice:
		return m.OldLastDevice(ctx)
	case rider.FieldIsNewDevice:
		return m.OldIsNewDevice(ctx)
	case rider.FieldLastFace:
		return m.OldLastFace(ctx)
	case rider.FieldPushID:
		return m.OldPushID(ctx)
	case rider.FieldLastSigninAt:
		return m.OldLastSigninAt(ctx)
	case rider.FieldBlocked:
		return m.OldBlocked(ctx)
	case rider.FieldPoints:
		return m.OldPoints(ctx)
	}
	return nil, fmt.Errorf("unknown Rider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case rider.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case rider.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case rider.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case rider.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case rider.FieldStationID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStationID(v)
		return nil
	case rider.FieldPersonID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonID(v)
		return nil
	case rider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rider.FieldIDCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNumber(v)
		return nil
	case rider.FieldEnterpriseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseID(v)
		return nil
	case rider.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case rider.FieldContact:
		v, ok := value.(*model.RiderContact)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContact(v)
		return nil
	case rider.FieldDeviceType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceType(v)
		return nil
	case rider.FieldLastDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastDevice(v)
		return nil
	case rider.FieldIsNewDevice:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNewDevice(v)
		return nil
	case rider.FieldLastFace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastFace(v)
		return nil
	case rider.FieldPushID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPushID(v)
		return nil
	case rider.FieldLastSigninAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSigninAt(v)
		return nil
	case rider.FieldBlocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlocked(v)
		return nil
	case rider.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	}
	return fmt.Errorf("unknown Rider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RiderMutation) AddedFields() []string {
	var fields []string
	if m.adddevice_type != nil {
		fields = append(fields, rider.FieldDeviceType)
	}
	if m.addpoints != nil {
		fields = append(fields, rider.FieldPoints)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RiderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rider.FieldDeviceType:
		return m.AddedDeviceType()
	case rider.FieldPoints:
		return m.AddedPoints()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rider.FieldDeviceType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviceType(v)
		return nil
	case rider.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	}
	return fmt.Errorf("unknown Rider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RiderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rider.FieldDeletedAt) {
		fields = append(fields, rider.FieldDeletedAt)
	}
	if m.FieldCleared(rider.FieldCreator) {
		fields = append(fields, rider.FieldCreator)
	}
	if m.FieldCleared(rider.FieldLastModifier) {
		fields = append(fields, rider.FieldLastModifier)
	}
	if m.FieldCleared(rider.FieldRemark) {
		fields = append(fields, rider.FieldRemark)
	}
	if m.FieldCleared(rider.FieldStationID) {
		fields = append(fields, rider.FieldStationID)
	}
	if m.FieldCleared(rider.FieldPersonID) {
		fields = append(fields, rider.FieldPersonID)
	}
	if m.FieldCleared(rider.FieldName) {
		fields = append(fields, rider.FieldName)
	}
	if m.FieldCleared(rider.FieldIDCardNumber) {
		fields = append(fields, rider.FieldIDCardNumber)
	}
	if m.FieldCleared(rider.FieldEnterpriseID) {
		fields = append(fields, rider.FieldEnterpriseID)
	}
	if m.FieldCleared(rider.FieldContact) {
		fields = append(fields, rider.FieldContact)
	}
	if m.FieldCleared(rider.FieldDeviceType) {
		fields = append(fields, rider.FieldDeviceType)
	}
	if m.FieldCleared(rider.FieldLastDevice) {
		fields = append(fields, rider.FieldLastDevice)
	}
	if m.FieldCleared(rider.FieldLastFace) {
		fields = append(fields, rider.FieldLastFace)
	}
	if m.FieldCleared(rider.FieldPushID) {
		fields = append(fields, rider.FieldPushID)
	}
	if m.FieldCleared(rider.FieldLastSigninAt) {
		fields = append(fields, rider.FieldLastSigninAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RiderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RiderMutation) ClearField(name string) error {
	switch name {
	case rider.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case rider.FieldCreator:
		m.ClearCreator()
		return nil
	case rider.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case rider.FieldRemark:
		m.ClearRemark()
		return nil
	case rider.FieldStationID:
		m.ClearStationID()
		return nil
	case rider.FieldPersonID:
		m.ClearPersonID()
		return nil
	case rider.FieldName:
		m.ClearName()
		return nil
	case rider.FieldIDCardNumber:
		m.ClearIDCardNumber()
		return nil
	case rider.FieldEnterpriseID:
		m.ClearEnterpriseID()
		return nil
	case rider.FieldContact:
		m.ClearContact()
		return nil
	case rider.FieldDeviceType:
		m.ClearDeviceType()
		return nil
	case rider.FieldLastDevice:
		m.ClearLastDevice()
		return nil
	case rider.FieldLastFace:
		m.ClearLastFace()
		return nil
	case rider.FieldPushID:
		m.ClearPushID()
		return nil
	case rider.FieldLastSigninAt:
		m.ClearLastSigninAt()
		return nil
	}
	return fmt.Errorf("unknown Rider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RiderMutation) ResetField(name string) error {
	switch name {
	case rider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case rider.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case rider.FieldCreator:
		m.ResetCreator()
		return nil
	case rider.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case rider.FieldRemark:
		m.ResetRemark()
		return nil
	case rider.FieldStationID:
		m.ResetStationID()
		return nil
	case rider.FieldPersonID:
		m.ResetPersonID()
		return nil
	case rider.FieldName:
		m.ResetName()
		return nil
	case rider.FieldIDCardNumber:
		m.ResetIDCardNumber()
		return nil
	case rider.FieldEnterpriseID:
		m.ResetEnterpriseID()
		return nil
	case rider.FieldPhone:
		m.ResetPhone()
		return nil
	case rider.FieldContact:
		m.ResetContact()
		return nil
	case rider.FieldDeviceType:
		m.ResetDeviceType()
		return nil
	case rider.FieldLastDevice:
		m.ResetLastDevice()
		return nil
	case rider.FieldIsNewDevice:
		m.ResetIsNewDevice()
		return nil
	case rider.FieldLastFace:
		m.ResetLastFace()
		return nil
	case rider.FieldPushID:
		m.ResetPushID()
		return nil
	case rider.FieldLastSigninAt:
		m.ResetLastSigninAt()
		return nil
	case rider.FieldBlocked:
		m.ResetBlocked()
		return nil
	case rider.FieldPoints:
		m.ResetPoints()
		return nil
	}
	return fmt.Errorf("unknown Rider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RiderMutation) AddedEdges() []string {
	edges := make([]string, 0, 10)
	if m.station != nil {
		edges = append(edges, rider.EdgeStation)
	}
	if m.person != nil {
		edges = append(edges, rider.EdgePerson)
	}
	if m.enterprise != nil {
		edges = append(edges, rider.EdgeEnterprise)
	}
	if m.contracts != nil {
		edges = append(edges, rider.EdgeContracts)
	}
	if m.faults != nil {
		edges = append(edges, rider.EdgeFaults)
	}
	if m.orders != nil {
		edges = append(edges, rider.EdgeOrders)
	}
	if m.exchanges != nil {
		edges = append(edges, rider.EdgeExchanges)
	}
	if m.subscribes != nil {
		edges = append(edges, rider.EdgeSubscribes)
	}
	if m.stocks != nil {
		edges = append(edges, rider.EdgeStocks)
	}
	if m.followups != nil {
		edges = append(edges, rider.EdgeFollowups)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RiderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rider.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	case rider.EdgePerson:
		if id := m.person; id != nil {
			return []ent.Value{*id}
		}
	case rider.EdgeEnterprise:
		if id := m.enterprise; id != nil {
			return []ent.Value{*id}
		}
	case rider.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.contracts))
		for id := range m.contracts {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeFaults:
		ids := make([]ent.Value, 0, len(m.faults))
		for id := range m.faults {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.orders))
		for id := range m.orders {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.exchanges))
		for id := range m.exchanges {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeSubscribes:
		ids := make([]ent.Value, 0, len(m.subscribes))
		for id := range m.subscribes {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.stocks))
		for id := range m.stocks {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeFollowups:
		ids := make([]ent.Value, 0, len(m.followups))
		for id := range m.followups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RiderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 10)
	if m.removedcontracts != nil {
		edges = append(edges, rider.EdgeContracts)
	}
	if m.removedfaults != nil {
		edges = append(edges, rider.EdgeFaults)
	}
	if m.removedorders != nil {
		edges = append(edges, rider.EdgeOrders)
	}
	if m.removedexchanges != nil {
		edges = append(edges, rider.EdgeExchanges)
	}
	if m.removedsubscribes != nil {
		edges = append(edges, rider.EdgeSubscribes)
	}
	if m.removedstocks != nil {
		edges = append(edges, rider.EdgeStocks)
	}
	if m.removedfollowups != nil {
		edges = append(edges, rider.EdgeFollowups)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RiderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rider.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.removedcontracts))
		for id := range m.removedcontracts {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeFaults:
		ids := make([]ent.Value, 0, len(m.removedfaults))
		for id := range m.removedfaults {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeOrders:
		ids := make([]ent.Value, 0, len(m.removedorders))
		for id := range m.removedorders {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.removedexchanges))
		for id := range m.removedexchanges {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeSubscribes:
		ids := make([]ent.Value, 0, len(m.removedsubscribes))
		for id := range m.removedsubscribes {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.removedstocks))
		for id := range m.removedstocks {
			ids = append(ids, id)
		}
		return ids
	case rider.EdgeFollowups:
		ids := make([]ent.Value, 0, len(m.removedfollowups))
		for id := range m.removedfollowups {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RiderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 10)
	if m.clearedstation {
		edges = append(edges, rider.EdgeStation)
	}
	if m.clearedperson {
		edges = append(edges, rider.EdgePerson)
	}
	if m.clearedenterprise {
		edges = append(edges, rider.EdgeEnterprise)
	}
	if m.clearedcontracts {
		edges = append(edges, rider.EdgeContracts)
	}
	if m.clearedfaults {
		edges = append(edges, rider.EdgeFaults)
	}
	if m.clearedorders {
		edges = append(edges, rider.EdgeOrders)
	}
	if m.clearedexchanges {
		edges = append(edges, rider.EdgeExchanges)
	}
	if m.clearedsubscribes {
		edges = append(edges, rider.EdgeSubscribes)
	}
	if m.clearedstocks {
		edges = append(edges, rider.EdgeStocks)
	}
	if m.clearedfollowups {
		edges = append(edges, rider.EdgeFollowups)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RiderMutation) EdgeCleared(name string) bool {
	switch name {
	case rider.EdgeStation:
		return m.clearedstation
	case rider.EdgePerson:
		return m.clearedperson
	case rider.EdgeEnterprise:
		return m.clearedenterprise
	case rider.EdgeContracts:
		return m.clearedcontracts
	case rider.EdgeFaults:
		return m.clearedfaults
	case rider.EdgeOrders:
		return m.clearedorders
	case rider.EdgeExchanges:
		return m.clearedexchanges
	case rider.EdgeSubscribes:
		return m.clearedsubscribes
	case rider.EdgeStocks:
		return m.clearedstocks
	case rider.EdgeFollowups:
		return m.clearedfollowups
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RiderMutation) ClearEdge(name string) error {
	switch name {
	case rider.EdgeStation:
		m.ClearStation()
		return nil
	case rider.EdgePerson:
		m.ClearPerson()
		return nil
	case rider.EdgeEnterprise:
		m.ClearEnterprise()
		return nil
	}
	return fmt.Errorf("unknown Rider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RiderMutation) ResetEdge(name string) error {
	switch name {
	case rider.EdgeStation:
		m.ResetStation()
		return nil
	case rider.EdgePerson:
		m.ResetPerson()
		return nil
	case rider.EdgeEnterprise:
		m.ResetEnterprise()
		return nil
	case rider.EdgeContracts:
		m.ResetContracts()
		return nil
	case rider.EdgeFaults:
		m.ResetFaults()
		return nil
	case rider.EdgeOrders:
		m.ResetOrders()
		return nil
	case rider.EdgeExchanges:
		m.ResetExchanges()
		return nil
	case rider.EdgeSubscribes:
		m.ResetSubscribes()
		return nil
	case rider.EdgeStocks:
		m.ResetStocks()
		return nil
	case rider.EdgeFollowups:
		m.ResetFollowups()
		return nil
	}
	return fmt.Errorf("unknown Rider edge %s", name)
}

