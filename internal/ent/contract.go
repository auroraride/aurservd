// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Contract is the model entity for the Contract schema.
type Contract struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// SubscribeID holds the value of the "subscribe_id" field.
	SubscribeID *uint64 `json:"subscribe_id,omitempty"`
	// 店员ID
	EmployeeID *uint64 `json:"employee_id,omitempty"`
	// 状态
	Status uint8 `json:"status,omitempty"`
	// 骑手
	RiderID uint64 `json:"rider_id,omitempty"`
	// E签宝流程ID
	FlowID string `json:"flow_id,omitempty"`
	// 合同编码
	Sn string `json:"sn,omitempty"`
	// 合同链接
	Files []string `json:"files,omitempty"`
	// 是否有效
	Effective bool `json:"effective,omitempty"`
	// 骑手信息
	RiderInfo *model.ContractRider `json:"rider_info,omitempty"`
	// 电车分配ID
	AllocateID *uint64 `json:"allocate_id,omitempty"`
	// 跳转URL
	Link *string `json:"link,omitempty"`
	// 合同过期时间
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContractQuery when eager-loading is set.
	Edges ContractEdges `json:"edges"`
}

// ContractEdges holds the relations/edges for other nodes in the graph.
type ContractEdges struct {
	// Subscribe holds the value of the subscribe edge.
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Allocate holds the value of the allocate edge.
	Allocate *Allocate `json:"allocate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContractEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[0] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContractEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[1] {
		if e.Employee == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContractEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[2] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// AllocateOrErr returns the Allocate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContractEdges) AllocateOrErr() (*Allocate, error) {
	if e.loadedTypes[3] {
		if e.Allocate == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: allocate.Label}
		}
		return e.Allocate, nil
	}
	return nil, &NotLoadedError{edge: "allocate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contract) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case contract.FieldCreator, contract.FieldLastModifier, contract.FieldFiles, contract.FieldRiderInfo:
			values[i] = new([]byte)
		case contract.FieldEffective:
			values[i] = new(sql.NullBool)
		case contract.FieldID, contract.FieldSubscribeID, contract.FieldEmployeeID, contract.FieldStatus, contract.FieldRiderID, contract.FieldAllocateID:
			values[i] = new(sql.NullInt64)
		case contract.FieldRemark, contract.FieldFlowID, contract.FieldSn, contract.FieldLink:
			values[i] = new(sql.NullString)
		case contract.FieldCreatedAt, contract.FieldUpdatedAt, contract.FieldDeletedAt, contract.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Contract", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contract fields.
func (c *Contract) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case contract.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case contract.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case contract.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case contract.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case contract.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case contract.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case contract.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case contract.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				c.SubscribeID = new(uint64)
				*c.SubscribeID = uint64(value.Int64)
			}
		case contract.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				c.EmployeeID = new(uint64)
				*c.EmployeeID = uint64(value.Int64)
			}
		case contract.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case contract.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				c.RiderID = uint64(value.Int64)
			}
		case contract.FieldFlowID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_id", values[i])
			} else if value.Valid {
				c.FlowID = value.String
			}
		case contract.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				c.Sn = value.String
			}
		case contract.FieldFiles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field files", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Files); err != nil {
					return fmt.Errorf("unmarshal field files: %w", err)
				}
			}
		case contract.FieldEffective:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field effective", values[i])
			} else if value.Valid {
				c.Effective = value.Bool
			}
		case contract.FieldRiderInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rider_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RiderInfo); err != nil {
					return fmt.Errorf("unmarshal field rider_info: %w", err)
				}
			}
		case contract.FieldAllocateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field allocate_id", values[i])
			} else if value.Valid {
				c.AllocateID = new(uint64)
				*c.AllocateID = uint64(value.Int64)
			}
		case contract.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				c.Link = new(string)
				*c.Link = value.String
			}
		case contract.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				c.ExpiresAt = new(time.Time)
				*c.ExpiresAt = value.Time
			}
		}
	}
	return nil
}

// QuerySubscribe queries the "subscribe" edge of the Contract entity.
func (c *Contract) QuerySubscribe() *SubscribeQuery {
	return (&ContractClient{config: c.config}).QuerySubscribe(c)
}

// QueryEmployee queries the "employee" edge of the Contract entity.
func (c *Contract) QueryEmployee() *EmployeeQuery {
	return (&ContractClient{config: c.config}).QueryEmployee(c)
}

// QueryRider queries the "rider" edge of the Contract entity.
func (c *Contract) QueryRider() *RiderQuery {
	return (&ContractClient{config: c.config}).QueryRider(c)
}

// QueryAllocate queries the "allocate" edge of the Contract entity.
func (c *Contract) QueryAllocate() *AllocateQuery {
	return (&ContractClient{config: c.config}).QueryAllocate(c)
}

// Update returns a builder for updating this Contract.
// Note that you need to call Contract.Unwrap() before calling this method if this Contract
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contract) Update() *ContractUpdateOne {
	return (&ContractClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Contract entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Contract) Unwrap() *Contract {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contract is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contract) String() string {
	var builder strings.Builder
	builder.WriteString("Contract(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", c.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", ")
	if v := c.SubscribeID; v != nil {
		builder.WriteString("subscribe_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.EmployeeID; v != nil {
		builder.WriteString("employee_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", c.RiderID))
	builder.WriteString(", ")
	builder.WriteString("flow_id=")
	builder.WriteString(c.FlowID)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(c.Sn)
	builder.WriteString(", ")
	builder.WriteString("files=")
	builder.WriteString(fmt.Sprintf("%v", c.Files))
	builder.WriteString(", ")
	builder.WriteString("effective=")
	builder.WriteString(fmt.Sprintf("%v", c.Effective))
	builder.WriteString(", ")
	builder.WriteString("rider_info=")
	builder.WriteString(fmt.Sprintf("%v", c.RiderInfo))
	builder.WriteString(", ")
	if v := c.AllocateID; v != nil {
		builder.WriteString("allocate_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Link; v != nil {
		builder.WriteString("link=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Contracts is a parsable slice of Contract.
type Contracts []*Contract

func (c Contracts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
