// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionachievement"
)

// PromotionAchievementCreate is the builder for creating a PromotionAchievement entity.
type PromotionAchievementCreate struct {
	config
	mutation *PromotionAchievementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pac *PromotionAchievementCreate) SetCreatedAt(t time.Time) *PromotionAchievementCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PromotionAchievementCreate) SetNillableCreatedAt(t *time.Time) *PromotionAchievementCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PromotionAchievementCreate) SetUpdatedAt(t time.Time) *PromotionAchievementCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PromotionAchievementCreate) SetNillableUpdatedAt(t *time.Time) *PromotionAchievementCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetDeletedAt sets the "deleted_at" field.
func (pac *PromotionAchievementCreate) SetDeletedAt(t time.Time) *PromotionAchievementCreate {
	pac.mutation.SetDeletedAt(t)
	return pac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pac *PromotionAchievementCreate) SetNillableDeletedAt(t *time.Time) *PromotionAchievementCreate {
	if t != nil {
		pac.SetDeletedAt(*t)
	}
	return pac
}

// SetCreator sets the "creator" field.
func (pac *PromotionAchievementCreate) SetCreator(m *model.Modifier) *PromotionAchievementCreate {
	pac.mutation.SetCreator(m)
	return pac
}

// SetLastModifier sets the "last_modifier" field.
func (pac *PromotionAchievementCreate) SetLastModifier(m *model.Modifier) *PromotionAchievementCreate {
	pac.mutation.SetLastModifier(m)
	return pac
}

// SetRemark sets the "remark" field.
func (pac *PromotionAchievementCreate) SetRemark(s string) *PromotionAchievementCreate {
	pac.mutation.SetRemark(s)
	return pac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pac *PromotionAchievementCreate) SetNillableRemark(s *string) *PromotionAchievementCreate {
	if s != nil {
		pac.SetRemark(*s)
	}
	return pac
}

// SetName sets the "name" field.
func (pac *PromotionAchievementCreate) SetName(s string) *PromotionAchievementCreate {
	pac.mutation.SetName(s)
	return pac
}

// SetType sets the "type" field.
func (pac *PromotionAchievementCreate) SetType(u uint8) *PromotionAchievementCreate {
	pac.mutation.SetType(u)
	return pac
}

// SetIcon sets the "icon" field.
func (pac *PromotionAchievementCreate) SetIcon(s string) *PromotionAchievementCreate {
	pac.mutation.SetIcon(s)
	return pac
}

// SetCondition sets the "condition" field.
func (pac *PromotionAchievementCreate) SetCondition(u uint64) *PromotionAchievementCreate {
	pac.mutation.SetCondition(u)
	return pac
}

// Mutation returns the PromotionAchievementMutation object of the builder.
func (pac *PromotionAchievementCreate) Mutation() *PromotionAchievementMutation {
	return pac.mutation
}

// Save creates the PromotionAchievement in the database.
func (pac *PromotionAchievementCreate) Save(ctx context.Context) (*PromotionAchievement, error) {
	if err := pac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PromotionAchievementCreate) SaveX(ctx context.Context) *PromotionAchievement {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PromotionAchievementCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PromotionAchievementCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PromotionAchievementCreate) defaults() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		if promotionachievement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionachievement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionachievement.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		if promotionachievement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionachievement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionachievement.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pac *PromotionAchievementCreate) check() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionAchievement.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionAchievement.updated_at"`)}
	}
	if _, ok := pac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "PromotionAchievement.name"`)}
	}
	if _, ok := pac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PromotionAchievement.type"`)}
	}
	if _, ok := pac.mutation.Icon(); !ok {
		return &ValidationError{Name: "icon", err: errors.New(`ent: missing required field "PromotionAchievement.icon"`)}
	}
	if _, ok := pac.mutation.Condition(); !ok {
		return &ValidationError{Name: "condition", err: errors.New(`ent: missing required field "PromotionAchievement.condition"`)}
	}
	return nil
}

func (pac *PromotionAchievementCreate) sqlSave(ctx context.Context) (*PromotionAchievement, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PromotionAchievementCreate) createSpec() (*PromotionAchievement, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionAchievement{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(promotionachievement.Table, sqlgraph.NewFieldSpec(promotionachievement.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pac.conflict
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(promotionachievement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionachievement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.DeletedAt(); ok {
		_spec.SetField(promotionachievement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pac.mutation.Creator(); ok {
		_spec.SetField(promotionachievement.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pac.mutation.LastModifier(); ok {
		_spec.SetField(promotionachievement.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pac.mutation.Remark(); ok {
		_spec.SetField(promotionachievement.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pac.mutation.Name(); ok {
		_spec.SetField(promotionachievement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pac.mutation.GetType(); ok {
		_spec.SetField(promotionachievement.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := pac.mutation.Icon(); ok {
		_spec.SetField(promotionachievement.FieldIcon, field.TypeString, value)
		_node.Icon = value
	}
	if value, ok := pac.mutation.Condition(); ok {
		_spec.SetField(promotionachievement.FieldCondition, field.TypeUint64, value)
		_node.Condition = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionAchievement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pac *PromotionAchievementCreate) OnConflict(opts ...sql.ConflictOption) *PromotionAchievementUpsertOne {
	pac.conflict = opts
	return &PromotionAchievementUpsertOne{
		create: pac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pac *PromotionAchievementCreate) OnConflictColumns(columns ...string) *PromotionAchievementUpsertOne {
	pac.conflict = append(pac.conflict, sql.ConflictColumns(columns...))
	return &PromotionAchievementUpsertOne{
		create: pac,
	}
}

type (
	// PromotionAchievementUpsertOne is the builder for "upsert"-ing
	//  one PromotionAchievement node.
	PromotionAchievementUpsertOne struct {
		create *PromotionAchievementCreate
	}

	// PromotionAchievementUpsert is the "OnConflict" setter.
	PromotionAchievementUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionAchievementUpsert) SetUpdatedAt(v time.Time) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateUpdatedAt() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionAchievementUpsert) SetDeletedAt(v time.Time) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateDeletedAt() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionAchievementUpsert) ClearDeletedAt() *PromotionAchievementUpsert {
	u.SetNull(promotionachievement.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionAchievementUpsert) SetLastModifier(v *model.Modifier) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateLastModifier() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionAchievementUpsert) ClearLastModifier() *PromotionAchievementUpsert {
	u.SetNull(promotionachievement.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionAchievementUpsert) SetRemark(v string) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateRemark() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionAchievementUpsert) ClearRemark() *PromotionAchievementUpsert {
	u.SetNull(promotionachievement.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *PromotionAchievementUpsert) SetName(v string) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateName() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *PromotionAchievementUpsert) SetType(v uint8) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateType() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PromotionAchievementUpsert) AddType(v uint8) *PromotionAchievementUpsert {
	u.Add(promotionachievement.FieldType, v)
	return u
}

// SetIcon sets the "icon" field.
func (u *PromotionAchievementUpsert) SetIcon(v string) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldIcon, v)
	return u
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateIcon() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldIcon)
	return u
}

// SetCondition sets the "condition" field.
func (u *PromotionAchievementUpsert) SetCondition(v uint64) *PromotionAchievementUpsert {
	u.Set(promotionachievement.FieldCondition, v)
	return u
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PromotionAchievementUpsert) UpdateCondition() *PromotionAchievementUpsert {
	u.SetExcluded(promotionachievement.FieldCondition)
	return u
}

// AddCondition adds v to the "condition" field.
func (u *PromotionAchievementUpsert) AddCondition(v uint64) *PromotionAchievementUpsert {
	u.Add(promotionachievement.FieldCondition, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionAchievementUpsertOne) UpdateNewValues() *PromotionAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionachievement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionachievement.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionAchievementUpsertOne) Ignore() *PromotionAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionAchievementUpsertOne) DoNothing() *PromotionAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionAchievementCreate.OnConflict
// documentation for more info.
func (u *PromotionAchievementUpsertOne) Update(set func(*PromotionAchievementUpsert)) *PromotionAchievementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionAchievementUpsertOne) SetUpdatedAt(v time.Time) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateUpdatedAt() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionAchievementUpsertOne) SetDeletedAt(v time.Time) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateDeletedAt() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionAchievementUpsertOne) ClearDeletedAt() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionAchievementUpsertOne) SetLastModifier(v *model.Modifier) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateLastModifier() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionAchievementUpsertOne) ClearLastModifier() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionAchievementUpsertOne) SetRemark(v string) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateRemark() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionAchievementUpsertOne) ClearRemark() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *PromotionAchievementUpsertOne) SetName(v string) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateName() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *PromotionAchievementUpsertOne) SetType(v uint8) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionAchievementUpsertOne) AddType(v uint8) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateType() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateType()
	})
}

// SetIcon sets the "icon" field.
func (u *PromotionAchievementUpsertOne) SetIcon(v string) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateIcon() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateIcon()
	})
}

// SetCondition sets the "condition" field.
func (u *PromotionAchievementUpsertOne) SetCondition(v uint64) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetCondition(v)
	})
}

// AddCondition adds v to the "condition" field.
func (u *PromotionAchievementUpsertOne) AddCondition(v uint64) *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.AddCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PromotionAchievementUpsertOne) UpdateCondition() *PromotionAchievementUpsertOne {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateCondition()
	})
}

// Exec executes the query.
func (u *PromotionAchievementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionAchievementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionAchievementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionAchievementUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionAchievementUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionAchievementCreateBulk is the builder for creating many PromotionAchievement entities in bulk.
type PromotionAchievementCreateBulk struct {
	config
	err      error
	builders []*PromotionAchievementCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionAchievement entities in the database.
func (pacb *PromotionAchievementCreateBulk) Save(ctx context.Context) ([]*PromotionAchievement, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PromotionAchievement, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionAchievementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PromotionAchievementCreateBulk) SaveX(ctx context.Context) []*PromotionAchievement {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PromotionAchievementCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PromotionAchievementCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionAchievement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionAchievementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pacb *PromotionAchievementCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionAchievementUpsertBulk {
	pacb.conflict = opts
	return &PromotionAchievementUpsertBulk{
		create: pacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pacb *PromotionAchievementCreateBulk) OnConflictColumns(columns ...string) *PromotionAchievementUpsertBulk {
	pacb.conflict = append(pacb.conflict, sql.ConflictColumns(columns...))
	return &PromotionAchievementUpsertBulk{
		create: pacb,
	}
}

// PromotionAchievementUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionAchievement nodes.
type PromotionAchievementUpsertBulk struct {
	create *PromotionAchievementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionAchievementUpsertBulk) UpdateNewValues() *PromotionAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionachievement.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionachievement.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionAchievement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionAchievementUpsertBulk) Ignore() *PromotionAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionAchievementUpsertBulk) DoNothing() *PromotionAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionAchievementCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionAchievementUpsertBulk) Update(set func(*PromotionAchievementUpsert)) *PromotionAchievementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionAchievementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionAchievementUpsertBulk) SetUpdatedAt(v time.Time) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateUpdatedAt() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionAchievementUpsertBulk) SetDeletedAt(v time.Time) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateDeletedAt() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionAchievementUpsertBulk) ClearDeletedAt() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionAchievementUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateLastModifier() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionAchievementUpsertBulk) ClearLastModifier() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionAchievementUpsertBulk) SetRemark(v string) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateRemark() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionAchievementUpsertBulk) ClearRemark() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *PromotionAchievementUpsertBulk) SetName(v string) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateName() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *PromotionAchievementUpsertBulk) SetType(v uint8) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PromotionAchievementUpsertBulk) AddType(v uint8) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateType() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateType()
	})
}

// SetIcon sets the "icon" field.
func (u *PromotionAchievementUpsertBulk) SetIcon(v string) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetIcon(v)
	})
}

// UpdateIcon sets the "icon" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateIcon() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateIcon()
	})
}

// SetCondition sets the "condition" field.
func (u *PromotionAchievementUpsertBulk) SetCondition(v uint64) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.SetCondition(v)
	})
}

// AddCondition adds v to the "condition" field.
func (u *PromotionAchievementUpsertBulk) AddCondition(v uint64) *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.AddCondition(v)
	})
}

// UpdateCondition sets the "condition" field to the value that was provided on create.
func (u *PromotionAchievementUpsertBulk) UpdateCondition() *PromotionAchievementUpsertBulk {
	return u.Update(func(s *PromotionAchievementUpsert) {
		s.UpdateCondition()
	})
}

// Exec executes the query.
func (u *PromotionAchievementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionAchievementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionAchievementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionAchievementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
