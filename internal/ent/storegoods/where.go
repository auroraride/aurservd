// Code generated by ent, DO NOT EDIT.

package storegoods

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldDeletedAt, v))
}

// GoodsID applies equality check predicate on the "goods_id" field. It's identical to GoodsIDEQ.
func GoodsID(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldGoodsID, v))
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldStoreID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotNull(FieldDeletedAt))
}

// GoodsIDEQ applies the EQ predicate on the "goods_id" field.
func GoodsIDEQ(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldGoodsID, v))
}

// GoodsIDNEQ applies the NEQ predicate on the "goods_id" field.
func GoodsIDNEQ(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldGoodsID, v))
}

// GoodsIDIn applies the In predicate on the "goods_id" field.
func GoodsIDIn(vs ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldGoodsID, vs...))
}

// GoodsIDNotIn applies the NotIn predicate on the "goods_id" field.
func GoodsIDNotIn(vs ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldGoodsID, vs...))
}

// GoodsIDIsNil applies the IsNil predicate on the "goods_id" field.
func GoodsIDIsNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIsNull(FieldGoodsID))
}

// GoodsIDNotNil applies the NotNil predicate on the "goods_id" field.
func GoodsIDNotNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotNull(FieldGoodsID))
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldEQ(FieldStoreID, v))
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNEQ(FieldStoreID, v))
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIn(FieldStoreID, vs...))
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotIn(FieldStoreID, vs...))
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldIsNull(FieldStoreID))
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.StoreGoods {
	return predicate.StoreGoods(sql.FieldNotNull(FieldStoreID))
}

// HasGoods applies the HasEdge predicate on the "goods" edge.
func HasGoods() predicate.StoreGoods {
	return predicate.StoreGoods(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GoodsTable, GoodsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoodsWith applies the HasEdge predicate on the "goods" edge with a given conditions (other predicates).
func HasGoodsWith(preds ...predicate.Goods) predicate.StoreGoods {
	return predicate.StoreGoods(func(s *sql.Selector) {
		step := newGoodsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.StoreGoods {
	return predicate.StoreGoods(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.StoreGoods {
	return predicate.StoreGoods(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoreGoods) predicate.StoreGoods {
	return predicate.StoreGoods(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoreGoods) predicate.StoreGoods {
	return predicate.StoreGoods(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoreGoods) predicate.StoreGoods {
	return predicate.StoreGoods(sql.NotPredicates(p))
}
