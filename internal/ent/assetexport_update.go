// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetexport"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetExportUpdate is the builder for updating AssetExport entities.
type AssetExportUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetExportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetExportUpdate builder.
func (aeu *AssetExportUpdate) Where(ps ...predicate.AssetExport) *AssetExportUpdate {
	aeu.mutation.Where(ps...)
	return aeu
}

// SetUpdatedAt sets the "updated_at" field.
func (aeu *AssetExportUpdate) SetUpdatedAt(t time.Time) *AssetExportUpdate {
	aeu.mutation.SetUpdatedAt(t)
	return aeu
}

// SetDeletedAt sets the "deleted_at" field.
func (aeu *AssetExportUpdate) SetDeletedAt(t time.Time) *AssetExportUpdate {
	aeu.mutation.SetDeletedAt(t)
	return aeu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableDeletedAt(t *time.Time) *AssetExportUpdate {
	if t != nil {
		aeu.SetDeletedAt(*t)
	}
	return aeu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aeu *AssetExportUpdate) ClearDeletedAt() *AssetExportUpdate {
	aeu.mutation.ClearDeletedAt()
	return aeu
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (aeu *AssetExportUpdate) SetAssetManagerID(u uint64) *AssetExportUpdate {
	aeu.mutation.SetAssetManagerID(u)
	return aeu
}

// SetNillableAssetManagerID sets the "asset_manager_id" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableAssetManagerID(u *uint64) *AssetExportUpdate {
	if u != nil {
		aeu.SetAssetManagerID(*u)
	}
	return aeu
}

// SetTaxonomy sets the "taxonomy" field.
func (aeu *AssetExportUpdate) SetTaxonomy(s string) *AssetExportUpdate {
	aeu.mutation.SetTaxonomy(s)
	return aeu
}

// SetNillableTaxonomy sets the "taxonomy" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableTaxonomy(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetTaxonomy(*s)
	}
	return aeu
}

// SetSn sets the "sn" field.
func (aeu *AssetExportUpdate) SetSn(s string) *AssetExportUpdate {
	aeu.mutation.SetSn(s)
	return aeu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableSn(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetSn(*s)
	}
	return aeu
}

// SetStatus sets the "status" field.
func (aeu *AssetExportUpdate) SetStatus(u uint8) *AssetExportUpdate {
	aeu.mutation.ResetStatus()
	aeu.mutation.SetStatus(u)
	return aeu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableStatus(u *uint8) *AssetExportUpdate {
	if u != nil {
		aeu.SetStatus(*u)
	}
	return aeu
}

// AddStatus adds u to the "status" field.
func (aeu *AssetExportUpdate) AddStatus(u int8) *AssetExportUpdate {
	aeu.mutation.AddStatus(u)
	return aeu
}

// SetPath sets the "path" field.
func (aeu *AssetExportUpdate) SetPath(s string) *AssetExportUpdate {
	aeu.mutation.SetPath(s)
	return aeu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillablePath(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetPath(*s)
	}
	return aeu
}

// ClearPath clears the value of the "path" field.
func (aeu *AssetExportUpdate) ClearPath() *AssetExportUpdate {
	aeu.mutation.ClearPath()
	return aeu
}

// SetMessage sets the "message" field.
func (aeu *AssetExportUpdate) SetMessage(s string) *AssetExportUpdate {
	aeu.mutation.SetMessage(s)
	return aeu
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableMessage(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetMessage(*s)
	}
	return aeu
}

// ClearMessage clears the value of the "message" field.
func (aeu *AssetExportUpdate) ClearMessage() *AssetExportUpdate {
	aeu.mutation.ClearMessage()
	return aeu
}

// SetFinishAt sets the "finish_at" field.
func (aeu *AssetExportUpdate) SetFinishAt(t time.Time) *AssetExportUpdate {
	aeu.mutation.SetFinishAt(t)
	return aeu
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableFinishAt(t *time.Time) *AssetExportUpdate {
	if t != nil {
		aeu.SetFinishAt(*t)
	}
	return aeu
}

// ClearFinishAt clears the value of the "finish_at" field.
func (aeu *AssetExportUpdate) ClearFinishAt() *AssetExportUpdate {
	aeu.mutation.ClearFinishAt()
	return aeu
}

// SetDuration sets the "duration" field.
func (aeu *AssetExportUpdate) SetDuration(i int64) *AssetExportUpdate {
	aeu.mutation.ResetDuration()
	aeu.mutation.SetDuration(i)
	return aeu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableDuration(i *int64) *AssetExportUpdate {
	if i != nil {
		aeu.SetDuration(*i)
	}
	return aeu
}

// AddDuration adds i to the "duration" field.
func (aeu *AssetExportUpdate) AddDuration(i int64) *AssetExportUpdate {
	aeu.mutation.AddDuration(i)
	return aeu
}

// ClearDuration clears the value of the "duration" field.
func (aeu *AssetExportUpdate) ClearDuration() *AssetExportUpdate {
	aeu.mutation.ClearDuration()
	return aeu
}

// SetCondition sets the "condition" field.
func (aeu *AssetExportUpdate) SetCondition(s string) *AssetExportUpdate {
	aeu.mutation.SetCondition(s)
	return aeu
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableCondition(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetCondition(*s)
	}
	return aeu
}

// SetInfo sets the "info" field.
func (aeu *AssetExportUpdate) SetInfo(m map[string]interface{}) *AssetExportUpdate {
	aeu.mutation.SetInfo(m)
	return aeu
}

// ClearInfo clears the value of the "info" field.
func (aeu *AssetExportUpdate) ClearInfo() *AssetExportUpdate {
	aeu.mutation.ClearInfo()
	return aeu
}

// SetRemark sets the "remark" field.
func (aeu *AssetExportUpdate) SetRemark(s string) *AssetExportUpdate {
	aeu.mutation.SetRemark(s)
	return aeu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aeu *AssetExportUpdate) SetNillableRemark(s *string) *AssetExportUpdate {
	if s != nil {
		aeu.SetRemark(*s)
	}
	return aeu
}

// SetAssetManager sets the "asset_manager" edge to the AssetManager entity.
func (aeu *AssetExportUpdate) SetAssetManager(a *AssetManager) *AssetExportUpdate {
	return aeu.SetAssetManagerID(a.ID)
}

// Mutation returns the AssetExportMutation object of the builder.
func (aeu *AssetExportUpdate) Mutation() *AssetExportMutation {
	return aeu.mutation
}

// ClearAssetManager clears the "asset_manager" edge to the AssetManager entity.
func (aeu *AssetExportUpdate) ClearAssetManager() *AssetExportUpdate {
	aeu.mutation.ClearAssetManager()
	return aeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aeu *AssetExportUpdate) Save(ctx context.Context) (int, error) {
	aeu.defaults()
	return withHooks(ctx, aeu.sqlSave, aeu.mutation, aeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeu *AssetExportUpdate) SaveX(ctx context.Context) int {
	affected, err := aeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aeu *AssetExportUpdate) Exec(ctx context.Context) error {
	_, err := aeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeu *AssetExportUpdate) ExecX(ctx context.Context) {
	if err := aeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeu *AssetExportUpdate) defaults() {
	if _, ok := aeu.mutation.UpdatedAt(); !ok {
		v := assetexport.UpdateDefaultUpdatedAt()
		aeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeu *AssetExportUpdate) check() error {
	if aeu.mutation.AssetManagerCleared() && len(aeu.mutation.AssetManagerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AssetExport.asset_manager"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aeu *AssetExportUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetExportUpdate {
	aeu.modifiers = append(aeu.modifiers, modifiers...)
	return aeu
}

func (aeu *AssetExportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetexport.Table, assetexport.Columns, sqlgraph.NewFieldSpec(assetexport.FieldID, field.TypeUint64))
	if ps := aeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetexport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aeu.mutation.DeletedAt(); ok {
		_spec.SetField(assetexport.FieldDeletedAt, field.TypeTime, value)
	}
	if aeu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetexport.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aeu.mutation.Taxonomy(); ok {
		_spec.SetField(assetexport.FieldTaxonomy, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Sn(); ok {
		_spec.SetField(assetexport.FieldSn, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Status(); ok {
		_spec.SetField(assetexport.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aeu.mutation.AddedStatus(); ok {
		_spec.AddField(assetexport.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aeu.mutation.Path(); ok {
		_spec.SetField(assetexport.FieldPath, field.TypeString, value)
	}
	if aeu.mutation.PathCleared() {
		_spec.ClearField(assetexport.FieldPath, field.TypeString)
	}
	if value, ok := aeu.mutation.Message(); ok {
		_spec.SetField(assetexport.FieldMessage, field.TypeString, value)
	}
	if aeu.mutation.MessageCleared() {
		_spec.ClearField(assetexport.FieldMessage, field.TypeString)
	}
	if value, ok := aeu.mutation.FinishAt(); ok {
		_spec.SetField(assetexport.FieldFinishAt, field.TypeTime, value)
	}
	if aeu.mutation.FinishAtCleared() {
		_spec.ClearField(assetexport.FieldFinishAt, field.TypeTime)
	}
	if value, ok := aeu.mutation.Duration(); ok {
		_spec.SetField(assetexport.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := aeu.mutation.AddedDuration(); ok {
		_spec.AddField(assetexport.FieldDuration, field.TypeInt64, value)
	}
	if aeu.mutation.DurationCleared() {
		_spec.ClearField(assetexport.FieldDuration, field.TypeInt64)
	}
	if value, ok := aeu.mutation.Condition(); ok {
		_spec.SetField(assetexport.FieldCondition, field.TypeString, value)
	}
	if value, ok := aeu.mutation.Info(); ok {
		_spec.SetField(assetexport.FieldInfo, field.TypeJSON, value)
	}
	if aeu.mutation.InfoCleared() {
		_spec.ClearField(assetexport.FieldInfo, field.TypeJSON)
	}
	if value, ok := aeu.mutation.Remark(); ok {
		_spec.SetField(assetexport.FieldRemark, field.TypeString, value)
	}
	if aeu.mutation.AssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetexport.AssetManagerTable,
			Columns: []string{assetexport.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeu.mutation.AssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetexport.AssetManagerTable,
			Columns: []string{assetexport.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aeu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetexport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aeu.mutation.done = true
	return n, nil
}

// AssetExportUpdateOne is the builder for updating a single AssetExport entity.
type AssetExportUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetExportMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aeuo *AssetExportUpdateOne) SetUpdatedAt(t time.Time) *AssetExportUpdateOne {
	aeuo.mutation.SetUpdatedAt(t)
	return aeuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aeuo *AssetExportUpdateOne) SetDeletedAt(t time.Time) *AssetExportUpdateOne {
	aeuo.mutation.SetDeletedAt(t)
	return aeuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetExportUpdateOne {
	if t != nil {
		aeuo.SetDeletedAt(*t)
	}
	return aeuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aeuo *AssetExportUpdateOne) ClearDeletedAt() *AssetExportUpdateOne {
	aeuo.mutation.ClearDeletedAt()
	return aeuo
}

// SetAssetManagerID sets the "asset_manager_id" field.
func (aeuo *AssetExportUpdateOne) SetAssetManagerID(u uint64) *AssetExportUpdateOne {
	aeuo.mutation.SetAssetManagerID(u)
	return aeuo
}

// SetNillableAssetManagerID sets the "asset_manager_id" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableAssetManagerID(u *uint64) *AssetExportUpdateOne {
	if u != nil {
		aeuo.SetAssetManagerID(*u)
	}
	return aeuo
}

// SetTaxonomy sets the "taxonomy" field.
func (aeuo *AssetExportUpdateOne) SetTaxonomy(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetTaxonomy(s)
	return aeuo
}

// SetNillableTaxonomy sets the "taxonomy" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableTaxonomy(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetTaxonomy(*s)
	}
	return aeuo
}

// SetSn sets the "sn" field.
func (aeuo *AssetExportUpdateOne) SetSn(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetSn(s)
	return aeuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableSn(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetSn(*s)
	}
	return aeuo
}

// SetStatus sets the "status" field.
func (aeuo *AssetExportUpdateOne) SetStatus(u uint8) *AssetExportUpdateOne {
	aeuo.mutation.ResetStatus()
	aeuo.mutation.SetStatus(u)
	return aeuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableStatus(u *uint8) *AssetExportUpdateOne {
	if u != nil {
		aeuo.SetStatus(*u)
	}
	return aeuo
}

// AddStatus adds u to the "status" field.
func (aeuo *AssetExportUpdateOne) AddStatus(u int8) *AssetExportUpdateOne {
	aeuo.mutation.AddStatus(u)
	return aeuo
}

// SetPath sets the "path" field.
func (aeuo *AssetExportUpdateOne) SetPath(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetPath(s)
	return aeuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillablePath(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetPath(*s)
	}
	return aeuo
}

// ClearPath clears the value of the "path" field.
func (aeuo *AssetExportUpdateOne) ClearPath() *AssetExportUpdateOne {
	aeuo.mutation.ClearPath()
	return aeuo
}

// SetMessage sets the "message" field.
func (aeuo *AssetExportUpdateOne) SetMessage(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetMessage(s)
	return aeuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableMessage(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetMessage(*s)
	}
	return aeuo
}

// ClearMessage clears the value of the "message" field.
func (aeuo *AssetExportUpdateOne) ClearMessage() *AssetExportUpdateOne {
	aeuo.mutation.ClearMessage()
	return aeuo
}

// SetFinishAt sets the "finish_at" field.
func (aeuo *AssetExportUpdateOne) SetFinishAt(t time.Time) *AssetExportUpdateOne {
	aeuo.mutation.SetFinishAt(t)
	return aeuo
}

// SetNillableFinishAt sets the "finish_at" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableFinishAt(t *time.Time) *AssetExportUpdateOne {
	if t != nil {
		aeuo.SetFinishAt(*t)
	}
	return aeuo
}

// ClearFinishAt clears the value of the "finish_at" field.
func (aeuo *AssetExportUpdateOne) ClearFinishAt() *AssetExportUpdateOne {
	aeuo.mutation.ClearFinishAt()
	return aeuo
}

// SetDuration sets the "duration" field.
func (aeuo *AssetExportUpdateOne) SetDuration(i int64) *AssetExportUpdateOne {
	aeuo.mutation.ResetDuration()
	aeuo.mutation.SetDuration(i)
	return aeuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableDuration(i *int64) *AssetExportUpdateOne {
	if i != nil {
		aeuo.SetDuration(*i)
	}
	return aeuo
}

// AddDuration adds i to the "duration" field.
func (aeuo *AssetExportUpdateOne) AddDuration(i int64) *AssetExportUpdateOne {
	aeuo.mutation.AddDuration(i)
	return aeuo
}

// ClearDuration clears the value of the "duration" field.
func (aeuo *AssetExportUpdateOne) ClearDuration() *AssetExportUpdateOne {
	aeuo.mutation.ClearDuration()
	return aeuo
}

// SetCondition sets the "condition" field.
func (aeuo *AssetExportUpdateOne) SetCondition(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetCondition(s)
	return aeuo
}

// SetNillableCondition sets the "condition" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableCondition(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetCondition(*s)
	}
	return aeuo
}

// SetInfo sets the "info" field.
func (aeuo *AssetExportUpdateOne) SetInfo(m map[string]interface{}) *AssetExportUpdateOne {
	aeuo.mutation.SetInfo(m)
	return aeuo
}

// ClearInfo clears the value of the "info" field.
func (aeuo *AssetExportUpdateOne) ClearInfo() *AssetExportUpdateOne {
	aeuo.mutation.ClearInfo()
	return aeuo
}

// SetRemark sets the "remark" field.
func (aeuo *AssetExportUpdateOne) SetRemark(s string) *AssetExportUpdateOne {
	aeuo.mutation.SetRemark(s)
	return aeuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (aeuo *AssetExportUpdateOne) SetNillableRemark(s *string) *AssetExportUpdateOne {
	if s != nil {
		aeuo.SetRemark(*s)
	}
	return aeuo
}

// SetAssetManager sets the "asset_manager" edge to the AssetManager entity.
func (aeuo *AssetExportUpdateOne) SetAssetManager(a *AssetManager) *AssetExportUpdateOne {
	return aeuo.SetAssetManagerID(a.ID)
}

// Mutation returns the AssetExportMutation object of the builder.
func (aeuo *AssetExportUpdateOne) Mutation() *AssetExportMutation {
	return aeuo.mutation
}

// ClearAssetManager clears the "asset_manager" edge to the AssetManager entity.
func (aeuo *AssetExportUpdateOne) ClearAssetManager() *AssetExportUpdateOne {
	aeuo.mutation.ClearAssetManager()
	return aeuo
}

// Where appends a list predicates to the AssetExportUpdate builder.
func (aeuo *AssetExportUpdateOne) Where(ps ...predicate.AssetExport) *AssetExportUpdateOne {
	aeuo.mutation.Where(ps...)
	return aeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aeuo *AssetExportUpdateOne) Select(field string, fields ...string) *AssetExportUpdateOne {
	aeuo.fields = append([]string{field}, fields...)
	return aeuo
}

// Save executes the query and returns the updated AssetExport entity.
func (aeuo *AssetExportUpdateOne) Save(ctx context.Context) (*AssetExport, error) {
	aeuo.defaults()
	return withHooks(ctx, aeuo.sqlSave, aeuo.mutation, aeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aeuo *AssetExportUpdateOne) SaveX(ctx context.Context) *AssetExport {
	node, err := aeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aeuo *AssetExportUpdateOne) Exec(ctx context.Context) error {
	_, err := aeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aeuo *AssetExportUpdateOne) ExecX(ctx context.Context) {
	if err := aeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aeuo *AssetExportUpdateOne) defaults() {
	if _, ok := aeuo.mutation.UpdatedAt(); !ok {
		v := assetexport.UpdateDefaultUpdatedAt()
		aeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aeuo *AssetExportUpdateOne) check() error {
	if aeuo.mutation.AssetManagerCleared() && len(aeuo.mutation.AssetManagerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AssetExport.asset_manager"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aeuo *AssetExportUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetExportUpdateOne {
	aeuo.modifiers = append(aeuo.modifiers, modifiers...)
	return aeuo
}

func (aeuo *AssetExportUpdateOne) sqlSave(ctx context.Context) (_node *AssetExport, err error) {
	if err := aeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetexport.Table, assetexport.Columns, sqlgraph.NewFieldSpec(assetexport.FieldID, field.TypeUint64))
	id, ok := aeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetExport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetexport.FieldID)
		for _, f := range fields {
			if !assetexport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetexport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetexport.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aeuo.mutation.DeletedAt(); ok {
		_spec.SetField(assetexport.FieldDeletedAt, field.TypeTime, value)
	}
	if aeuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetexport.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aeuo.mutation.Taxonomy(); ok {
		_spec.SetField(assetexport.FieldTaxonomy, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Sn(); ok {
		_spec.SetField(assetexport.FieldSn, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Status(); ok {
		_spec.SetField(assetexport.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aeuo.mutation.AddedStatus(); ok {
		_spec.AddField(assetexport.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := aeuo.mutation.Path(); ok {
		_spec.SetField(assetexport.FieldPath, field.TypeString, value)
	}
	if aeuo.mutation.PathCleared() {
		_spec.ClearField(assetexport.FieldPath, field.TypeString)
	}
	if value, ok := aeuo.mutation.Message(); ok {
		_spec.SetField(assetexport.FieldMessage, field.TypeString, value)
	}
	if aeuo.mutation.MessageCleared() {
		_spec.ClearField(assetexport.FieldMessage, field.TypeString)
	}
	if value, ok := aeuo.mutation.FinishAt(); ok {
		_spec.SetField(assetexport.FieldFinishAt, field.TypeTime, value)
	}
	if aeuo.mutation.FinishAtCleared() {
		_spec.ClearField(assetexport.FieldFinishAt, field.TypeTime)
	}
	if value, ok := aeuo.mutation.Duration(); ok {
		_spec.SetField(assetexport.FieldDuration, field.TypeInt64, value)
	}
	if value, ok := aeuo.mutation.AddedDuration(); ok {
		_spec.AddField(assetexport.FieldDuration, field.TypeInt64, value)
	}
	if aeuo.mutation.DurationCleared() {
		_spec.ClearField(assetexport.FieldDuration, field.TypeInt64)
	}
	if value, ok := aeuo.mutation.Condition(); ok {
		_spec.SetField(assetexport.FieldCondition, field.TypeString, value)
	}
	if value, ok := aeuo.mutation.Info(); ok {
		_spec.SetField(assetexport.FieldInfo, field.TypeJSON, value)
	}
	if aeuo.mutation.InfoCleared() {
		_spec.ClearField(assetexport.FieldInfo, field.TypeJSON)
	}
	if value, ok := aeuo.mutation.Remark(); ok {
		_spec.SetField(assetexport.FieldRemark, field.TypeString, value)
	}
	if aeuo.mutation.AssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetexport.AssetManagerTable,
			Columns: []string{assetexport.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aeuo.mutation.AssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetexport.AssetManagerTable,
			Columns: []string{assetexport.AssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aeuo.modifiers...)
	_node = &AssetExport{config: aeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetexport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aeuo.mutation.done = true
	return _node, nil
}
