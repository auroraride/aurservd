// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// BatteryQuery is the builder for querying Battery entities.
type BatteryQuery struct {
	config
	ctx            *QueryContext
	order          []battery.OrderOption
	inters         []Interceptor
	predicates     []predicate.Battery
	withCity       *CityQuery
	withRider      *RiderQuery
	withCabinet    *CabinetQuery
	withEnterprise *EnterpriseQuery
	withFlows      *BatteryFlowQuery
	withStation    *EnterpriseStationQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BatteryQuery builder.
func (bq *BatteryQuery) Where(ps ...predicate.Battery) *BatteryQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit the number of records to be returned by this query.
func (bq *BatteryQuery) Limit(limit int) *BatteryQuery {
	bq.ctx.Limit = &limit
	return bq
}

// Offset to start from.
func (bq *BatteryQuery) Offset(offset int) *BatteryQuery {
	bq.ctx.Offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BatteryQuery) Unique(unique bool) *BatteryQuery {
	bq.ctx.Unique = &unique
	return bq
}

// Order specifies how the records should be ordered.
func (bq *BatteryQuery) Order(o ...battery.OrderOption) *BatteryQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryCity chains the current query on the "city" edge.
func (bq *BatteryQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, battery.CityTable, battery.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (bq *BatteryQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, battery.RiderTable, battery.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (bq *BatteryQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.CabinetTable, battery.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (bq *BatteryQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.EnterpriseTable, battery.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFlows chains the current query on the "flows" edge.
func (bq *BatteryQuery) QueryFlows() *BatteryFlowQuery {
	query := (&BatteryFlowClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(batteryflow.Table, batteryflow.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, battery.FlowsTable, battery.FlowsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (bq *BatteryQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: bq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(battery.Table, battery.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, battery.StationTable, battery.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Battery entity from the query.
// Returns a *NotFoundError when no Battery was found.
func (bq *BatteryQuery) First(ctx context.Context) (*Battery, error) {
	nodes, err := bq.Limit(1).All(setContextOp(ctx, bq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{battery.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BatteryQuery) FirstX(ctx context.Context) *Battery {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Battery ID from the query.
// Returns a *NotFoundError when no Battery ID was found.
func (bq *BatteryQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bq.Limit(1).IDs(setContextOp(ctx, bq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{battery.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BatteryQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Battery entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Battery entity is found.
// Returns a *NotFoundError when no Battery entities are found.
func (bq *BatteryQuery) Only(ctx context.Context) (*Battery, error) {
	nodes, err := bq.Limit(2).All(setContextOp(ctx, bq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{battery.Label}
	default:
		return nil, &NotSingularError{battery.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BatteryQuery) OnlyX(ctx context.Context) *Battery {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Battery ID in the query.
// Returns a *NotSingularError when more than one Battery ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BatteryQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bq.Limit(2).IDs(setContextOp(ctx, bq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{battery.Label}
	default:
		err = &NotSingularError{battery.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BatteryQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Batteries.
func (bq *BatteryQuery) All(ctx context.Context) ([]*Battery, error) {
	ctx = setContextOp(ctx, bq.ctx, "All")
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Battery, *BatteryQuery]()
	return withInterceptors[[]*Battery](ctx, bq, qr, bq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bq *BatteryQuery) AllX(ctx context.Context) []*Battery {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Battery IDs.
func (bq *BatteryQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if bq.ctx.Unique == nil && bq.path != nil {
		bq.Unique(true)
	}
	ctx = setContextOp(ctx, bq.ctx, "IDs")
	if err = bq.Select(battery.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BatteryQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BatteryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bq.ctx, "Count")
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bq, querierCount[*BatteryQuery](), bq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BatteryQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BatteryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bq.ctx, "Exist")
	switch _, err := bq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BatteryQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BatteryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BatteryQuery) Clone() *BatteryQuery {
	if bq == nil {
		return nil
	}
	return &BatteryQuery{
		config:         bq.config,
		ctx:            bq.ctx.Clone(),
		order:          append([]battery.OrderOption{}, bq.order...),
		inters:         append([]Interceptor{}, bq.inters...),
		predicates:     append([]predicate.Battery{}, bq.predicates...),
		withCity:       bq.withCity.Clone(),
		withRider:      bq.withRider.Clone(),
		withCabinet:    bq.withCabinet.Clone(),
		withEnterprise: bq.withEnterprise.Clone(),
		withFlows:      bq.withFlows.Clone(),
		withStation:    bq.withStation.Clone(),
		// clone intermediate query.
		sql:  bq.sql.Clone(),
		path: bq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithCity(opts ...func(*CityQuery)) *BatteryQuery {
	query := (&CityClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withCity = query
	return bq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithRider(opts ...func(*RiderQuery)) *BatteryQuery {
	query := (&RiderClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withRider = query
	return bq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithCabinet(opts ...func(*CabinetQuery)) *BatteryQuery {
	query := (&CabinetClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withCabinet = query
	return bq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *BatteryQuery {
	query := (&EnterpriseClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withEnterprise = query
	return bq
}

// WithFlows tells the query-builder to eager-load the nodes that are connected to
// the "flows" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithFlows(opts ...func(*BatteryFlowQuery)) *BatteryQuery {
	query := (&BatteryFlowClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withFlows = query
	return bq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BatteryQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *BatteryQuery {
	query := (&EnterpriseStationClient{config: bq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	bq.withStation = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Battery.Query().
//		GroupBy(battery.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bq *BatteryQuery) GroupBy(field string, fields ...string) *BatteryGroupBy {
	bq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BatteryGroupBy{build: bq}
	grbuild.flds = &bq.ctx.Fields
	grbuild.label = battery.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Battery.Query().
//		Select(battery.FieldCreatedAt).
//		Scan(ctx, &v)
func (bq *BatteryQuery) Select(fields ...string) *BatterySelect {
	bq.ctx.Fields = append(bq.ctx.Fields, fields...)
	sbuild := &BatterySelect{BatteryQuery: bq}
	sbuild.label = battery.Label
	sbuild.flds, sbuild.scan = &bq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BatterySelect configured with the given aggregations.
func (bq *BatteryQuery) Aggregate(fns ...AggregateFunc) *BatterySelect {
	return bq.Select().Aggregate(fns...)
}

func (bq *BatteryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bq); err != nil {
				return err
			}
		}
	}
	for _, f := range bq.ctx.Fields {
		if !battery.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BatteryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Battery, error) {
	var (
		nodes       = []*Battery{}
		_spec       = bq.querySpec()
		loadedTypes = [6]bool{
			bq.withCity != nil,
			bq.withRider != nil,
			bq.withCabinet != nil,
			bq.withEnterprise != nil,
			bq.withFlows != nil,
			bq.withStation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Battery).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Battery{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withCity; query != nil {
		if err := bq.loadCity(ctx, query, nodes, nil,
			func(n *Battery, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withRider; query != nil {
		if err := bq.loadRider(ctx, query, nodes, nil,
			func(n *Battery, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withCabinet; query != nil {
		if err := bq.loadCabinet(ctx, query, nodes, nil,
			func(n *Battery, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withEnterprise; query != nil {
		if err := bq.loadEnterprise(ctx, query, nodes, nil,
			func(n *Battery, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withFlows; query != nil {
		if err := bq.loadFlows(ctx, query, nodes,
			func(n *Battery) { n.Edges.Flows = []*BatteryFlow{} },
			func(n *Battery, e *BatteryFlow) { n.Edges.Flows = append(n.Edges.Flows, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withStation; query != nil {
		if err := bq.loadStation(ctx, query, nodes, nil,
			func(n *Battery, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BatteryQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Battery)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BatteryQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Battery)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BatteryQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Battery)
	for i := range nodes {
		if nodes[i].CabinetID == nil {
			continue
		}
		fk := *nodes[i].CabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BatteryQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Battery)
	for i := range nodes {
		if nodes[i].EnterpriseID == nil {
			continue
		}
		fk := *nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BatteryQuery) loadFlows(ctx context.Context, query *BatteryFlowQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *BatteryFlow)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Battery)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.BatteryFlow(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(battery.FlowsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.battery_flows
		if fk == nil {
			return fmt.Errorf(`foreign-key "battery_flows" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "battery_flows" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BatteryQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*Battery, init func(*Battery), assign func(*Battery, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Battery)
	for i := range nodes {
		if nodes[i].StationID == nil {
			continue
		}
		fk := *nodes[i].StationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (bq *BatteryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	_spec.Node.Columns = bq.ctx.Fields
	if len(bq.ctx.Fields) > 0 {
		_spec.Unique = bq.ctx.Unique != nil && *bq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BatteryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(battery.Table, battery.Columns, sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64))
	_spec.From = bq.sql
	if unique := bq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bq.path != nil {
		_spec.Unique = true
	}
	if fields := bq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, battery.FieldID)
		for i := range fields {
			if fields[i] != battery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if bq.withCity != nil {
			_spec.Node.AddColumnOnce(battery.FieldCityID)
		}
		if bq.withRider != nil {
			_spec.Node.AddColumnOnce(battery.FieldRiderID)
		}
		if bq.withCabinet != nil {
			_spec.Node.AddColumnOnce(battery.FieldCabinetID)
		}
		if bq.withEnterprise != nil {
			_spec.Node.AddColumnOnce(battery.FieldEnterpriseID)
		}
		if bq.withStation != nil {
			_spec.Node.AddColumnOnce(battery.FieldStationID)
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BatteryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(battery.Table)
	columns := bq.ctx.Fields
	if len(columns) == 0 {
		columns = battery.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.ctx.Unique != nil && *bq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range bq.modifiers {
		m(selector)
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bq *BatteryQuery) Modify(modifiers ...func(s *sql.Selector)) *BatterySelect {
	bq.modifiers = append(bq.modifiers, modifiers...)
	return bq.Select()
}

type BatteryQueryWith string

var (
	BatteryQueryWithCity       BatteryQueryWith = "City"
	BatteryQueryWithRider      BatteryQueryWith = "Rider"
	BatteryQueryWithCabinet    BatteryQueryWith = "Cabinet"
	BatteryQueryWithEnterprise BatteryQueryWith = "Enterprise"
	BatteryQueryWithFlows      BatteryQueryWith = "Flows"
	BatteryQueryWithStation    BatteryQueryWith = "Station"
)

func (bq *BatteryQuery) With(withEdges ...BatteryQueryWith) *BatteryQuery {
	for _, v := range withEdges {
		switch v {
		case BatteryQueryWithCity:
			bq.WithCity()
		case BatteryQueryWithRider:
			bq.WithRider()
		case BatteryQueryWithCabinet:
			bq.WithCabinet()
		case BatteryQueryWithEnterprise:
			bq.WithEnterprise()
		case BatteryQueryWithFlows:
			bq.WithFlows()
		case BatteryQueryWithStation:
			bq.WithStation()
		}
	}
	return bq
}

// BatteryGroupBy is the group-by builder for Battery entities.
type BatteryGroupBy struct {
	selector
	build *BatteryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BatteryGroupBy) Aggregate(fns ...AggregateFunc) *BatteryGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the selector query and scans the result into the given value.
func (bgb *BatteryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bgb.build.ctx, "GroupBy")
	if err := bgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryQuery, *BatteryGroupBy](ctx, bgb.build, bgb, bgb.build.inters, v)
}

func (bgb *BatteryGroupBy) sqlScan(ctx context.Context, root *BatteryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bgb.flds)+len(bgb.fns))
		for _, f := range *bgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BatterySelect is the builder for selecting fields of Battery entities.
type BatterySelect struct {
	*BatteryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bs *BatterySelect) Aggregate(fns ...AggregateFunc) *BatterySelect {
	bs.fns = append(bs.fns, fns...)
	return bs
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BatterySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bs.ctx, "Select")
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BatteryQuery, *BatterySelect](ctx, bs.BatteryQuery, bs, bs.inters, v)
}

func (bs *BatterySelect) sqlScan(ctx context.Context, root *BatteryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bs.fns))
	for _, fn := range bs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bs *BatterySelect) Modify(modifiers ...func(s *sql.Selector)) *BatterySelect {
	bs.modifiers = append(bs.modifiers, modifiers...)
	return bs
}
