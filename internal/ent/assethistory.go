// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assethistory"
)

// AssetHistory is the model entity for the AssetHistory schema.
type AssetHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// AssetID holds the value of the "asset_id" field.
	AssetID *uint64 `json:"asset_id,omitempty"`
	// 开始位置类型 1:仓库 2:门店 3:电柜 4:站点 5:骑手 6:运维
	FromLocationType int `json:"from_location_type,omitempty"`
	// 开始位置ID
	FromLocationID int `json:"from_location_id,omitempty"`
	// 目标位置类型 1:仓库 2:门店 3:电柜 4:站点 5:骑手 6:运维
	ToLocationType int `json:"to_location_type,omitempty"`
	// 目标位置ID
	ToLocationID int `json:"to_location_id,omitempty"`
	// 调拨类型 1:初始入库 2:平台调拨 3:门店调拨 4:代理调拨 5:运维调拨 6:系统业务自动调拨
	Type uint8 `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetHistoryQuery when eager-loading is set.
	Edges        AssetHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetHistoryEdges holds the relations/edges for other nodes in the graph.
type AssetHistoryEdges struct {
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetHistoryEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assethistory.FieldCreator, assethistory.FieldLastModifier:
			values[i] = new([]byte)
		case assethistory.FieldID, assethistory.FieldAssetID, assethistory.FieldFromLocationType, assethistory.FieldFromLocationID, assethistory.FieldToLocationType, assethistory.FieldToLocationID, assethistory.FieldType:
			values[i] = new(sql.NullInt64)
		case assethistory.FieldRemark:
			values[i] = new(sql.NullString)
		case assethistory.FieldCreatedAt, assethistory.FieldUpdatedAt, assethistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetHistory fields.
func (ah *AssetHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assethistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ah.ID = uint64(value.Int64)
		case assethistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ah.CreatedAt = value.Time
			}
		case assethistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ah.UpdatedAt = value.Time
			}
		case assethistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ah.DeletedAt = new(time.Time)
				*ah.DeletedAt = value.Time
			}
		case assethistory.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case assethistory.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case assethistory.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ah.Remark = value.String
			}
		case assethistory.FieldAssetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value.Valid {
				ah.AssetID = new(uint64)
				*ah.AssetID = uint64(value.Int64)
			}
		case assethistory.FieldFromLocationType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_location_type", values[i])
			} else if value.Valid {
				ah.FromLocationType = int(value.Int64)
			}
		case assethistory.FieldFromLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field from_location_id", values[i])
			} else if value.Valid {
				ah.FromLocationID = int(value.Int64)
			}
		case assethistory.FieldToLocationType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_location_type", values[i])
			} else if value.Valid {
				ah.ToLocationType = int(value.Int64)
			}
		case assethistory.FieldToLocationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field to_location_id", values[i])
			} else if value.Valid {
				ah.ToLocationID = int(value.Int64)
			}
		case assethistory.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ah.Type = uint8(value.Int64)
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetHistory.
// This includes values selected through modifiers, order, etc.
func (ah *AssetHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// QueryAsset queries the "asset" edge of the AssetHistory entity.
func (ah *AssetHistory) QueryAsset() *AssetQuery {
	return NewAssetHistoryClient(ah.config).QueryAsset(ah)
}

// Update returns a builder for updating this AssetHistory.
// Note that you need to call AssetHistory.Unwrap() before calling this method if this AssetHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AssetHistory) Update() *AssetHistoryUpdateOne {
	return NewAssetHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the AssetHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *AssetHistory) Unwrap() *AssetHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AssetHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AssetHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ah.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ah.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ah.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ah.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ah.Remark)
	builder.WriteString(", ")
	if v := ah.AssetID; v != nil {
		builder.WriteString("asset_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("from_location_type=")
	builder.WriteString(fmt.Sprintf("%v", ah.FromLocationType))
	builder.WriteString(", ")
	builder.WriteString("from_location_id=")
	builder.WriteString(fmt.Sprintf("%v", ah.FromLocationID))
	builder.WriteString(", ")
	builder.WriteString("to_location_type=")
	builder.WriteString(fmt.Sprintf("%v", ah.ToLocationType))
	builder.WriteString(", ")
	builder.WriteString("to_location_id=")
	builder.WriteString(fmt.Sprintf("%v", ah.ToLocationID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ah.Type))
	builder.WriteByte(')')
	return builder.String()
}

// AssetHistories is a parsable slice of AssetHistory.
type AssetHistories []*AssetHistory
