// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
)

// RiderFollowUpQuery is the builder for querying RiderFollowUp entities.
type RiderFollowUpQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RiderFollowUp
	// eager-loading edges.
	withManager *ManagerQuery
	withRider   *RiderQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RiderFollowUpQuery builder.
func (rfuq *RiderFollowUpQuery) Where(ps ...predicate.RiderFollowUp) *RiderFollowUpQuery {
	rfuq.predicates = append(rfuq.predicates, ps...)
	return rfuq
}

// Limit adds a limit step to the query.
func (rfuq *RiderFollowUpQuery) Limit(limit int) *RiderFollowUpQuery {
	rfuq.limit = &limit
	return rfuq
}

// Offset adds an offset step to the query.
func (rfuq *RiderFollowUpQuery) Offset(offset int) *RiderFollowUpQuery {
	rfuq.offset = &offset
	return rfuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rfuq *RiderFollowUpQuery) Unique(unique bool) *RiderFollowUpQuery {
	rfuq.unique = &unique
	return rfuq
}

// Order adds an order step to the query.
func (rfuq *RiderFollowUpQuery) Order(o ...OrderFunc) *RiderFollowUpQuery {
	rfuq.order = append(rfuq.order, o...)
	return rfuq
}

// QueryManager chains the current query on the "manager" edge.
func (rfuq *RiderFollowUpQuery) QueryManager() *ManagerQuery {
	query := &ManagerQuery{config: rfuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rfuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rfuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, selector),
			sqlgraph.To(manager.Table, manager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, riderfollowup.ManagerTable, riderfollowup.ManagerColumn),
		)
		fromU = sqlgraph.SetNeighbors(rfuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (rfuq *RiderFollowUpQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: rfuq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rfuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rfuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(riderfollowup.Table, riderfollowup.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, riderfollowup.RiderTable, riderfollowup.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(rfuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RiderFollowUp entity from the query.
// Returns a *NotFoundError when no RiderFollowUp was found.
func (rfuq *RiderFollowUpQuery) First(ctx context.Context) (*RiderFollowUp, error) {
	nodes, err := rfuq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{riderfollowup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) FirstX(ctx context.Context) *RiderFollowUp {
	node, err := rfuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RiderFollowUp ID from the query.
// Returns a *NotFoundError when no RiderFollowUp ID was found.
func (rfuq *RiderFollowUpQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rfuq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{riderfollowup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := rfuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RiderFollowUp entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RiderFollowUp entity is found.
// Returns a *NotFoundError when no RiderFollowUp entities are found.
func (rfuq *RiderFollowUpQuery) Only(ctx context.Context) (*RiderFollowUp, error) {
	nodes, err := rfuq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{riderfollowup.Label}
	default:
		return nil, &NotSingularError{riderfollowup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) OnlyX(ctx context.Context) *RiderFollowUp {
	node, err := rfuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RiderFollowUp ID in the query.
// Returns a *NotSingularError when more than one RiderFollowUp ID is found.
// Returns a *NotFoundError when no entities are found.
func (rfuq *RiderFollowUpQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = rfuq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{riderfollowup.Label}
	default:
		err = &NotSingularError{riderfollowup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := rfuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RiderFollowUps.
func (rfuq *RiderFollowUpQuery) All(ctx context.Context) ([]*RiderFollowUp, error) {
	if err := rfuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return rfuq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) AllX(ctx context.Context) []*RiderFollowUp {
	nodes, err := rfuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RiderFollowUp IDs.
func (rfuq *RiderFollowUpQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := rfuq.Select(riderfollowup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := rfuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rfuq *RiderFollowUpQuery) Count(ctx context.Context) (int, error) {
	if err := rfuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return rfuq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) CountX(ctx context.Context) int {
	count, err := rfuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rfuq *RiderFollowUpQuery) Exist(ctx context.Context) (bool, error) {
	if err := rfuq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return rfuq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (rfuq *RiderFollowUpQuery) ExistX(ctx context.Context) bool {
	exist, err := rfuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RiderFollowUpQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rfuq *RiderFollowUpQuery) Clone() *RiderFollowUpQuery {
	if rfuq == nil {
		return nil
	}
	return &RiderFollowUpQuery{
		config:      rfuq.config,
		limit:       rfuq.limit,
		offset:      rfuq.offset,
		order:       append([]OrderFunc{}, rfuq.order...),
		predicates:  append([]predicate.RiderFollowUp{}, rfuq.predicates...),
		withManager: rfuq.withManager.Clone(),
		withRider:   rfuq.withRider.Clone(),
		// clone intermediate query.
		sql:    rfuq.sql.Clone(),
		path:   rfuq.path,
		unique: rfuq.unique,
	}
}

// WithManager tells the query-builder to eager-load the nodes that are connected to
// the "manager" edge. The optional arguments are used to configure the query builder of the edge.
func (rfuq *RiderFollowUpQuery) WithManager(opts ...func(*ManagerQuery)) *RiderFollowUpQuery {
	query := &ManagerQuery{config: rfuq.config}
	for _, opt := range opts {
		opt(query)
	}
	rfuq.withManager = query
	return rfuq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (rfuq *RiderFollowUpQuery) WithRider(opts ...func(*RiderQuery)) *RiderFollowUpQuery {
	query := &RiderQuery{config: rfuq.config}
	for _, opt := range opts {
		opt(query)
	}
	rfuq.withRider = query
	return rfuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RiderFollowUp.Query().
//		GroupBy(riderfollowup.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (rfuq *RiderFollowUpQuery) GroupBy(field string, fields ...string) *RiderFollowUpGroupBy {
	grbuild := &RiderFollowUpGroupBy{config: rfuq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := rfuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return rfuq.sqlQuery(ctx), nil
	}
	grbuild.label = riderfollowup.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.RiderFollowUp.Query().
//		Select(riderfollowup.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (rfuq *RiderFollowUpQuery) Select(fields ...string) *RiderFollowUpSelect {
	rfuq.fields = append(rfuq.fields, fields...)
	selbuild := &RiderFollowUpSelect{RiderFollowUpQuery: rfuq}
	selbuild.label = riderfollowup.Label
	selbuild.flds, selbuild.scan = &rfuq.fields, selbuild.Scan
	return selbuild
}

func (rfuq *RiderFollowUpQuery) prepareQuery(ctx context.Context) error {
	for _, f := range rfuq.fields {
		if !riderfollowup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rfuq.path != nil {
		prev, err := rfuq.path(ctx)
		if err != nil {
			return err
		}
		rfuq.sql = prev
	}
	return nil
}

func (rfuq *RiderFollowUpQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RiderFollowUp, error) {
	var (
		nodes       = []*RiderFollowUp{}
		_spec       = rfuq.querySpec()
		loadedTypes = [2]bool{
			rfuq.withManager != nil,
			rfuq.withRider != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*RiderFollowUp).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &RiderFollowUp{config: rfuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(rfuq.modifiers) > 0 {
		_spec.Modifiers = rfuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rfuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := rfuq.withManager; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*RiderFollowUp)
		for i := range nodes {
			fk := nodes[i].ManagerID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(manager.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "manager_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Manager = n
			}
		}
	}

	if query := rfuq.withRider; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*RiderFollowUp)
		for i := range nodes {
			fk := nodes[i].RiderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(rider.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rider = n
			}
		}
	}

	return nodes, nil
}

func (rfuq *RiderFollowUpQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rfuq.querySpec()
	if len(rfuq.modifiers) > 0 {
		_spec.Modifiers = rfuq.modifiers
	}
	_spec.Node.Columns = rfuq.fields
	if len(rfuq.fields) > 0 {
		_spec.Unique = rfuq.unique != nil && *rfuq.unique
	}
	return sqlgraph.CountNodes(ctx, rfuq.driver, _spec)
}

func (rfuq *RiderFollowUpQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := rfuq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (rfuq *RiderFollowUpQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   riderfollowup.Table,
			Columns: riderfollowup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: riderfollowup.FieldID,
			},
		},
		From:   rfuq.sql,
		Unique: true,
	}
	if unique := rfuq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := rfuq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riderfollowup.FieldID)
		for i := range fields {
			if fields[i] != riderfollowup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rfuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rfuq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rfuq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rfuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rfuq *RiderFollowUpQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rfuq.driver.Dialect())
	t1 := builder.Table(riderfollowup.Table)
	columns := rfuq.fields
	if len(columns) == 0 {
		columns = riderfollowup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rfuq.sql != nil {
		selector = rfuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rfuq.unique != nil && *rfuq.unique {
		selector.Distinct()
	}
	for _, m := range rfuq.modifiers {
		m(selector)
	}
	for _, p := range rfuq.predicates {
		p(selector)
	}
	for _, p := range rfuq.order {
		p(selector)
	}
	if offset := rfuq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rfuq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rfuq *RiderFollowUpQuery) Modify(modifiers ...func(s *sql.Selector)) *RiderFollowUpSelect {
	rfuq.modifiers = append(rfuq.modifiers, modifiers...)
	return rfuq.Select()
}

// RiderFollowUpGroupBy is the group-by builder for RiderFollowUp entities.
type RiderFollowUpGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rfugb *RiderFollowUpGroupBy) Aggregate(fns ...AggregateFunc) *RiderFollowUpGroupBy {
	rfugb.fns = append(rfugb.fns, fns...)
	return rfugb
}

// Scan applies the group-by query and scans the result into the given value.
func (rfugb *RiderFollowUpGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rfugb.path(ctx)
	if err != nil {
		return err
	}
	rfugb.sql = query
	return rfugb.sqlScan(ctx, v)
}

func (rfugb *RiderFollowUpGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rfugb.fields {
		if !riderfollowup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rfugb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rfugb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rfugb *RiderFollowUpGroupBy) sqlQuery() *sql.Selector {
	selector := rfugb.sql.Select()
	aggregation := make([]string, 0, len(rfugb.fns))
	for _, fn := range rfugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rfugb.fields)+len(rfugb.fns))
		for _, f := range rfugb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rfugb.fields...)...)
}

// RiderFollowUpSelect is the builder for selecting fields of RiderFollowUp entities.
type RiderFollowUpSelect struct {
	*RiderFollowUpQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (rfus *RiderFollowUpSelect) Scan(ctx context.Context, v interface{}) error {
	if err := rfus.prepareQuery(ctx); err != nil {
		return err
	}
	rfus.sql = rfus.RiderFollowUpQuery.sqlQuery(ctx)
	return rfus.sqlScan(ctx, v)
}

func (rfus *RiderFollowUpSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := rfus.sql.Query()
	if err := rfus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (rfus *RiderFollowUpSelect) Modify(modifiers ...func(s *sql.Selector)) *RiderFollowUpSelect {
	rfus.modifiers = append(rfus.modifiers, modifiers...)
	return rfus
}
