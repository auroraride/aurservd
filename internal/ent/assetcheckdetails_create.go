// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetCheckDetailsCreate is the builder for creating a AssetCheckDetails entity.
type AssetCheckDetailsCreate struct {
	config
	mutation *AssetCheckDetailsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (acdc *AssetCheckDetailsCreate) SetCreatedAt(t time.Time) *AssetCheckDetailsCreate {
	acdc.mutation.SetCreatedAt(t)
	return acdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableCreatedAt(t *time.Time) *AssetCheckDetailsCreate {
	if t != nil {
		acdc.SetCreatedAt(*t)
	}
	return acdc
}

// SetUpdatedAt sets the "updated_at" field.
func (acdc *AssetCheckDetailsCreate) SetUpdatedAt(t time.Time) *AssetCheckDetailsCreate {
	acdc.mutation.SetUpdatedAt(t)
	return acdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableUpdatedAt(t *time.Time) *AssetCheckDetailsCreate {
	if t != nil {
		acdc.SetUpdatedAt(*t)
	}
	return acdc
}

// SetDeletedAt sets the "deleted_at" field.
func (acdc *AssetCheckDetailsCreate) SetDeletedAt(t time.Time) *AssetCheckDetailsCreate {
	acdc.mutation.SetDeletedAt(t)
	return acdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableDeletedAt(t *time.Time) *AssetCheckDetailsCreate {
	if t != nil {
		acdc.SetDeletedAt(*t)
	}
	return acdc
}

// SetCreator sets the "creator" field.
func (acdc *AssetCheckDetailsCreate) SetCreator(m *model.Modifier) *AssetCheckDetailsCreate {
	acdc.mutation.SetCreator(m)
	return acdc
}

// SetLastModifier sets the "last_modifier" field.
func (acdc *AssetCheckDetailsCreate) SetLastModifier(m *model.Modifier) *AssetCheckDetailsCreate {
	acdc.mutation.SetLastModifier(m)
	return acdc
}

// SetRemark sets the "remark" field.
func (acdc *AssetCheckDetailsCreate) SetRemark(s string) *AssetCheckDetailsCreate {
	acdc.mutation.SetRemark(s)
	return acdc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRemark(s *string) *AssetCheckDetailsCreate {
	if s != nil {
		acdc.SetRemark(*s)
	}
	return acdc
}

// SetMaintainerID sets the "maintainer_id" field.
func (acdc *AssetCheckDetailsCreate) SetMaintainerID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetMaintainerID(u)
	return acdc
}

// SetNillableMaintainerID sets the "maintainer_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableMaintainerID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetMaintainerID(*u)
	}
	return acdc
}

// SetSn sets the "sn" field.
func (acdc *AssetCheckDetailsCreate) SetSn(s string) *AssetCheckDetailsCreate {
	acdc.mutation.SetSn(s)
	return acdc
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableSn(s *string) *AssetCheckDetailsCreate {
	if s != nil {
		acdc.SetSn(*s)
	}
	return acdc
}

// SetAssetID sets the "asset_id" field.
func (acdc *AssetCheckDetailsCreate) SetAssetID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetAssetID(u)
	return acdc
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableAssetID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetAssetID(*u)
	}
	return acdc
}

// SetCheckID sets the "check_id" field.
func (acdc *AssetCheckDetailsCreate) SetCheckID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetCheckID(u)
	return acdc
}

// SetNillableCheckID sets the "check_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableCheckID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetCheckID(*u)
	}
	return acdc
}

// SetRealLocationsID sets the "real_locations_id" field.
func (acdc *AssetCheckDetailsCreate) SetRealLocationsID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealLocationsID(u)
	return acdc
}

// SetNillableRealLocationsID sets the "real_locations_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealLocationsID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetRealLocationsID(*u)
	}
	return acdc
}

// SetRealLocationsType sets the "real_locations_type" field.
func (acdc *AssetCheckDetailsCreate) SetRealLocationsType(u uint8) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealLocationsType(u)
	return acdc
}

// SetNillableRealLocationsType sets the "real_locations_type" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealLocationsType(u *uint8) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetRealLocationsType(*u)
	}
	return acdc
}

// SetLocationsID sets the "locations_id" field.
func (acdc *AssetCheckDetailsCreate) SetLocationsID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetLocationsID(u)
	return acdc
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableLocationsID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetLocationsID(*u)
	}
	return acdc
}

// SetLocationsType sets the "locations_type" field.
func (acdc *AssetCheckDetailsCreate) SetLocationsType(u uint8) *AssetCheckDetailsCreate {
	acdc.mutation.SetLocationsType(u)
	return acdc
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableLocationsType(u *uint8) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetLocationsType(*u)
	}
	return acdc
}

// SetStatus sets the "status" field.
func (acdc *AssetCheckDetailsCreate) SetStatus(u uint8) *AssetCheckDetailsCreate {
	acdc.mutation.SetStatus(u)
	return acdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableStatus(u *uint8) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetStatus(*u)
	}
	return acdc
}

// SetResult sets the "result" field.
func (acdc *AssetCheckDetailsCreate) SetResult(u uint8) *AssetCheckDetailsCreate {
	acdc.mutation.SetResult(u)
	return acdc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableResult(u *uint8) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetResult(*u)
	}
	return acdc
}

// SetOperateID sets the "operate_id" field.
func (acdc *AssetCheckDetailsCreate) SetOperateID(u uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetOperateID(u)
	return acdc
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableOperateID(u *uint64) *AssetCheckDetailsCreate {
	if u != nil {
		acdc.SetOperateID(*u)
	}
	return acdc
}

// SetOperateAt sets the "operate_at" field.
func (acdc *AssetCheckDetailsCreate) SetOperateAt(t time.Time) *AssetCheckDetailsCreate {
	acdc.mutation.SetOperateAt(t)
	return acdc
}

// SetNillableOperateAt sets the "operate_at" field if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableOperateAt(t *time.Time) *AssetCheckDetailsCreate {
	if t != nil {
		acdc.SetOperateAt(*t)
	}
	return acdc
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (acdc *AssetCheckDetailsCreate) SetMaintainer(m *Maintainer) *AssetCheckDetailsCreate {
	return acdc.SetMaintainerID(m.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (acdc *AssetCheckDetailsCreate) SetAsset(a *Asset) *AssetCheckDetailsCreate {
	return acdc.SetAssetID(a.ID)
}

// SetCheck sets the "check" edge to the AssetCheck entity.
func (acdc *AssetCheckDetailsCreate) SetCheck(a *AssetCheck) *AssetCheckDetailsCreate {
	return acdc.SetCheckID(a.ID)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (acdc *AssetCheckDetailsCreate) SetWarehouseID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetWarehouseID(id)
	return acdc
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableWarehouseID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetWarehouseID(*id)
	}
	return acdc
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (acdc *AssetCheckDetailsCreate) SetWarehouse(w *Warehouse) *AssetCheckDetailsCreate {
	return acdc.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (acdc *AssetCheckDetailsCreate) SetStoreID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetStoreID(id)
	return acdc
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableStoreID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetStoreID(*id)
	}
	return acdc
}

// SetStore sets the "store" edge to the Store entity.
func (acdc *AssetCheckDetailsCreate) SetStore(s *Store) *AssetCheckDetailsCreate {
	return acdc.SetStoreID(s.ID)
}

// SetCabinetID sets the "cabinet" edge to the Cabinet entity by ID.
func (acdc *AssetCheckDetailsCreate) SetCabinetID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetCabinetID(id)
	return acdc
}

// SetNillableCabinetID sets the "cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableCabinetID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetCabinetID(*id)
	}
	return acdc
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (acdc *AssetCheckDetailsCreate) SetCabinet(c *Cabinet) *AssetCheckDetailsCreate {
	return acdc.SetCabinetID(c.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (acdc *AssetCheckDetailsCreate) SetStationID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetStationID(id)
	return acdc
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableStationID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetStationID(*id)
	}
	return acdc
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (acdc *AssetCheckDetailsCreate) SetStation(e *EnterpriseStation) *AssetCheckDetailsCreate {
	return acdc.SetStationID(e.ID)
}

// SetRiderID sets the "rider" edge to the Rider entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRiderID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRiderID(id)
	return acdc
}

// SetNillableRiderID sets the "rider" edge to the Rider entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRiderID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRiderID(*id)
	}
	return acdc
}

// SetRider sets the "rider" edge to the Rider entity.
func (acdc *AssetCheckDetailsCreate) SetRider(r *Rider) *AssetCheckDetailsCreate {
	return acdc.SetRiderID(r.ID)
}

// SetOperatorID sets the "operator" edge to the Maintainer entity by ID.
func (acdc *AssetCheckDetailsCreate) SetOperatorID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetOperatorID(id)
	return acdc
}

// SetNillableOperatorID sets the "operator" edge to the Maintainer entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableOperatorID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetOperatorID(*id)
	}
	return acdc
}

// SetOperator sets the "operator" edge to the Maintainer entity.
func (acdc *AssetCheckDetailsCreate) SetOperator(m *Maintainer) *AssetCheckDetailsCreate {
	return acdc.SetOperatorID(m.ID)
}

// SetRealWarehouseID sets the "real_warehouse" edge to the Warehouse entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealWarehouseID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealWarehouseID(id)
	return acdc
}

// SetNillableRealWarehouseID sets the "real_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealWarehouseID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealWarehouseID(*id)
	}
	return acdc
}

// SetRealWarehouse sets the "real_warehouse" edge to the Warehouse entity.
func (acdc *AssetCheckDetailsCreate) SetRealWarehouse(w *Warehouse) *AssetCheckDetailsCreate {
	return acdc.SetRealWarehouseID(w.ID)
}

// SetRealStoreID sets the "real_store" edge to the Store entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealStoreID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealStoreID(id)
	return acdc
}

// SetNillableRealStoreID sets the "real_store" edge to the Store entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealStoreID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealStoreID(*id)
	}
	return acdc
}

// SetRealStore sets the "real_store" edge to the Store entity.
func (acdc *AssetCheckDetailsCreate) SetRealStore(s *Store) *AssetCheckDetailsCreate {
	return acdc.SetRealStoreID(s.ID)
}

// SetRealCabinetID sets the "real_cabinet" edge to the Cabinet entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealCabinetID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealCabinetID(id)
	return acdc
}

// SetNillableRealCabinetID sets the "real_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealCabinetID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealCabinetID(*id)
	}
	return acdc
}

// SetRealCabinet sets the "real_cabinet" edge to the Cabinet entity.
func (acdc *AssetCheckDetailsCreate) SetRealCabinet(c *Cabinet) *AssetCheckDetailsCreate {
	return acdc.SetRealCabinetID(c.ID)
}

// SetRealStationID sets the "real_station" edge to the EnterpriseStation entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealStationID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealStationID(id)
	return acdc
}

// SetNillableRealStationID sets the "real_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealStationID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealStationID(*id)
	}
	return acdc
}

// SetRealStation sets the "real_station" edge to the EnterpriseStation entity.
func (acdc *AssetCheckDetailsCreate) SetRealStation(e *EnterpriseStation) *AssetCheckDetailsCreate {
	return acdc.SetRealStationID(e.ID)
}

// SetRealRiderID sets the "real_rider" edge to the Rider entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealRiderID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealRiderID(id)
	return acdc
}

// SetNillableRealRiderID sets the "real_rider" edge to the Rider entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealRiderID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealRiderID(*id)
	}
	return acdc
}

// SetRealRider sets the "real_rider" edge to the Rider entity.
func (acdc *AssetCheckDetailsCreate) SetRealRider(r *Rider) *AssetCheckDetailsCreate {
	return acdc.SetRealRiderID(r.ID)
}

// SetRealOperatorID sets the "real_operator" edge to the Maintainer entity by ID.
func (acdc *AssetCheckDetailsCreate) SetRealOperatorID(id uint64) *AssetCheckDetailsCreate {
	acdc.mutation.SetRealOperatorID(id)
	return acdc
}

// SetNillableRealOperatorID sets the "real_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (acdc *AssetCheckDetailsCreate) SetNillableRealOperatorID(id *uint64) *AssetCheckDetailsCreate {
	if id != nil {
		acdc = acdc.SetRealOperatorID(*id)
	}
	return acdc
}

// SetRealOperator sets the "real_operator" edge to the Maintainer entity.
func (acdc *AssetCheckDetailsCreate) SetRealOperator(m *Maintainer) *AssetCheckDetailsCreate {
	return acdc.SetRealOperatorID(m.ID)
}

// Mutation returns the AssetCheckDetailsMutation object of the builder.
func (acdc *AssetCheckDetailsCreate) Mutation() *AssetCheckDetailsMutation {
	return acdc.mutation
}

// Save creates the AssetCheckDetails in the database.
func (acdc *AssetCheckDetailsCreate) Save(ctx context.Context) (*AssetCheckDetails, error) {
	if err := acdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, acdc.sqlSave, acdc.mutation, acdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acdc *AssetCheckDetailsCreate) SaveX(ctx context.Context) *AssetCheckDetails {
	v, err := acdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acdc *AssetCheckDetailsCreate) Exec(ctx context.Context) error {
	_, err := acdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acdc *AssetCheckDetailsCreate) ExecX(ctx context.Context) {
	if err := acdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acdc *AssetCheckDetailsCreate) defaults() error {
	if _, ok := acdc.mutation.CreatedAt(); !ok {
		if assetcheckdetails.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheckdetails.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheckdetails.DefaultCreatedAt()
		acdc.mutation.SetCreatedAt(v)
	}
	if _, ok := acdc.mutation.UpdatedAt(); !ok {
		if assetcheckdetails.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheckdetails.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheckdetails.DefaultUpdatedAt()
		acdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acdc.mutation.Status(); !ok {
		v := assetcheckdetails.DefaultStatus
		acdc.mutation.SetStatus(v)
	}
	if _, ok := acdc.mutation.Result(); !ok {
		v := assetcheckdetails.DefaultResult
		acdc.mutation.SetResult(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (acdc *AssetCheckDetailsCreate) check() error {
	if _, ok := acdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetCheckDetails.created_at"`)}
	}
	if _, ok := acdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetCheckDetails.updated_at"`)}
	}
	return nil
}

func (acdc *AssetCheckDetailsCreate) sqlSave(ctx context.Context) (*AssetCheckDetails, error) {
	if err := acdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	acdc.mutation.id = &_node.ID
	acdc.mutation.done = true
	return _node, nil
}

func (acdc *AssetCheckDetailsCreate) createSpec() (*AssetCheckDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetCheckDetails{config: acdc.config}
		_spec = sqlgraph.NewCreateSpec(assetcheckdetails.Table, sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = acdc.conflict
	if value, ok := acdc.mutation.CreatedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acdc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := acdc.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheckdetails.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := acdc.mutation.Creator(); ok {
		_spec.SetField(assetcheckdetails.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := acdc.mutation.LastModifier(); ok {
		_spec.SetField(assetcheckdetails.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := acdc.mutation.Remark(); ok {
		_spec.SetField(assetcheckdetails.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := acdc.mutation.Sn(); ok {
		_spec.SetField(assetcheckdetails.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := acdc.mutation.RealLocationsType(); ok {
		_spec.SetField(assetcheckdetails.FieldRealLocationsType, field.TypeUint8, value)
		_node.RealLocationsType = value
	}
	if value, ok := acdc.mutation.LocationsType(); ok {
		_spec.SetField(assetcheckdetails.FieldLocationsType, field.TypeUint8, value)
		_node.LocationsType = value
	}
	if value, ok := acdc.mutation.Status(); ok {
		_spec.SetField(assetcheckdetails.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := acdc.mutation.Result(); ok {
		_spec.SetField(assetcheckdetails.FieldResult, field.TypeUint8, value)
		_node.Result = value
	}
	if value, ok := acdc.mutation.OperateID(); ok {
		_spec.SetField(assetcheckdetails.FieldOperateID, field.TypeUint64, value)
		_node.OperateID = value
	}
	if value, ok := acdc.mutation.OperateAt(); ok {
		_spec.SetField(assetcheckdetails.FieldOperateAt, field.TypeTime, value)
		_node.OperateAt = &value
	}
	if nodes := acdc.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.MaintainerTable,
			Columns: []string{assetcheckdetails.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MaintainerID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.AssetTable,
			Columns: []string{assetcheckdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.CheckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetcheckdetails.CheckTable,
			Columns: []string{assetcheckdetails.CheckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CheckID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.WarehouseTable,
			Columns: []string{assetcheckdetails.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.StoreTable,
			Columns: []string{assetcheckdetails.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.CabinetTable,
			Columns: []string{assetcheckdetails.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.StationTable,
			Columns: []string{assetcheckdetails.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RiderTable,
			Columns: []string{assetcheckdetails.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.OperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.OperatorTable,
			Columns: []string{assetcheckdetails.OperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealWarehouseTable,
			Columns: []string{assetcheckdetails.RealWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealStoreTable,
			Columns: []string{assetcheckdetails.RealStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealCabinetTable,
			Columns: []string{assetcheckdetails.RealCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealStationTable,
			Columns: []string{assetcheckdetails.RealStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealRiderTable,
			Columns: []string{assetcheckdetails.RealRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acdc.mutation.RealOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheckdetails.RealOperatorTable,
			Columns: []string{assetcheckdetails.RealOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RealLocationsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetCheckDetails.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetCheckDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acdc *AssetCheckDetailsCreate) OnConflict(opts ...sql.ConflictOption) *AssetCheckDetailsUpsertOne {
	acdc.conflict = opts
	return &AssetCheckDetailsUpsertOne{
		create: acdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acdc *AssetCheckDetailsCreate) OnConflictColumns(columns ...string) *AssetCheckDetailsUpsertOne {
	acdc.conflict = append(acdc.conflict, sql.ConflictColumns(columns...))
	return &AssetCheckDetailsUpsertOne{
		create: acdc,
	}
}

type (
	// AssetCheckDetailsUpsertOne is the builder for "upsert"-ing
	//  one AssetCheckDetails node.
	AssetCheckDetailsUpsertOne struct {
		create *AssetCheckDetailsCreate
	}

	// AssetCheckDetailsUpsert is the "OnConflict" setter.
	AssetCheckDetailsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckDetailsUpsert) SetUpdatedAt(v time.Time) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateUpdatedAt() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckDetailsUpsert) SetDeletedAt(v time.Time) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateDeletedAt() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckDetailsUpsert) ClearDeletedAt() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckDetailsUpsert) SetLastModifier(v *model.Modifier) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateLastModifier() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckDetailsUpsert) ClearLastModifier() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetCheckDetailsUpsert) SetRemark(v string) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateRemark() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckDetailsUpsert) ClearRemark() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldRemark)
	return u
}

// SetMaintainerID sets the "maintainer_id" field.
func (u *AssetCheckDetailsUpsert) SetMaintainerID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldMaintainerID, v)
	return u
}

// UpdateMaintainerID sets the "maintainer_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateMaintainerID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldMaintainerID)
	return u
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (u *AssetCheckDetailsUpsert) ClearMaintainerID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldMaintainerID)
	return u
}

// SetSn sets the "sn" field.
func (u *AssetCheckDetailsUpsert) SetSn(v string) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateSn() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldSn)
	return u
}

// ClearSn clears the value of the "sn" field.
func (u *AssetCheckDetailsUpsert) ClearSn() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldSn)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetCheckDetailsUpsert) SetAssetID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateAssetID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldAssetID)
	return u
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetCheckDetailsUpsert) ClearAssetID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldAssetID)
	return u
}

// SetCheckID sets the "check_id" field.
func (u *AssetCheckDetailsUpsert) SetCheckID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldCheckID, v)
	return u
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateCheckID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldCheckID)
	return u
}

// ClearCheckID clears the value of the "check_id" field.
func (u *AssetCheckDetailsUpsert) ClearCheckID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldCheckID)
	return u
}

// SetRealLocationsID sets the "real_locations_id" field.
func (u *AssetCheckDetailsUpsert) SetRealLocationsID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldRealLocationsID, v)
	return u
}

// UpdateRealLocationsID sets the "real_locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateRealLocationsID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldRealLocationsID)
	return u
}

// ClearRealLocationsID clears the value of the "real_locations_id" field.
func (u *AssetCheckDetailsUpsert) ClearRealLocationsID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldRealLocationsID)
	return u
}

// SetRealLocationsType sets the "real_locations_type" field.
func (u *AssetCheckDetailsUpsert) SetRealLocationsType(v uint8) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldRealLocationsType, v)
	return u
}

// UpdateRealLocationsType sets the "real_locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateRealLocationsType() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldRealLocationsType)
	return u
}

// AddRealLocationsType adds v to the "real_locations_type" field.
func (u *AssetCheckDetailsUpsert) AddRealLocationsType(v uint8) *AssetCheckDetailsUpsert {
	u.Add(assetcheckdetails.FieldRealLocationsType, v)
	return u
}

// ClearRealLocationsType clears the value of the "real_locations_type" field.
func (u *AssetCheckDetailsUpsert) ClearRealLocationsType() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldRealLocationsType)
	return u
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckDetailsUpsert) SetLocationsID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldLocationsID, v)
	return u
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateLocationsID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldLocationsID)
	return u
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckDetailsUpsert) ClearLocationsID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldLocationsID)
	return u
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckDetailsUpsert) SetLocationsType(v uint8) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldLocationsType, v)
	return u
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateLocationsType() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldLocationsType)
	return u
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckDetailsUpsert) AddLocationsType(v uint8) *AssetCheckDetailsUpsert {
	u.Add(assetcheckdetails.FieldLocationsType, v)
	return u
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckDetailsUpsert) ClearLocationsType() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldLocationsType)
	return u
}

// SetStatus sets the "status" field.
func (u *AssetCheckDetailsUpsert) SetStatus(v uint8) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateStatus() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckDetailsUpsert) AddStatus(v uint8) *AssetCheckDetailsUpsert {
	u.Add(assetcheckdetails.FieldStatus, v)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckDetailsUpsert) ClearStatus() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldStatus)
	return u
}

// SetResult sets the "result" field.
func (u *AssetCheckDetailsUpsert) SetResult(v uint8) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldResult, v)
	return u
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateResult() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldResult)
	return u
}

// AddResult adds v to the "result" field.
func (u *AssetCheckDetailsUpsert) AddResult(v uint8) *AssetCheckDetailsUpsert {
	u.Add(assetcheckdetails.FieldResult, v)
	return u
}

// ClearResult clears the value of the "result" field.
func (u *AssetCheckDetailsUpsert) ClearResult() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldResult)
	return u
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckDetailsUpsert) SetOperateID(v uint64) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldOperateID, v)
	return u
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateOperateID() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldOperateID)
	return u
}

// AddOperateID adds v to the "operate_id" field.
func (u *AssetCheckDetailsUpsert) AddOperateID(v uint64) *AssetCheckDetailsUpsert {
	u.Add(assetcheckdetails.FieldOperateID, v)
	return u
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckDetailsUpsert) ClearOperateID() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldOperateID)
	return u
}

// SetOperateAt sets the "operate_at" field.
func (u *AssetCheckDetailsUpsert) SetOperateAt(v time.Time) *AssetCheckDetailsUpsert {
	u.Set(assetcheckdetails.FieldOperateAt, v)
	return u
}

// UpdateOperateAt sets the "operate_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsert) UpdateOperateAt() *AssetCheckDetailsUpsert {
	u.SetExcluded(assetcheckdetails.FieldOperateAt)
	return u
}

// ClearOperateAt clears the value of the "operate_at" field.
func (u *AssetCheckDetailsUpsert) ClearOperateAt() *AssetCheckDetailsUpsert {
	u.SetNull(assetcheckdetails.FieldOperateAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetCheckDetailsUpsertOne) UpdateNewValues() *AssetCheckDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetcheckdetails.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assetcheckdetails.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetCheckDetailsUpsertOne) Ignore() *AssetCheckDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetCheckDetailsUpsertOne) DoNothing() *AssetCheckDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCheckDetailsCreate.OnConflict
// documentation for more info.
func (u *AssetCheckDetailsUpsertOne) Update(set func(*AssetCheckDetailsUpsert)) *AssetCheckDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetCheckDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckDetailsUpsertOne) SetUpdatedAt(v time.Time) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateUpdatedAt() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckDetailsUpsertOne) SetDeletedAt(v time.Time) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateDeletedAt() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckDetailsUpsertOne) ClearDeletedAt() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckDetailsUpsertOne) SetLastModifier(v *model.Modifier) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateLastModifier() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckDetailsUpsertOne) ClearLastModifier() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetCheckDetailsUpsertOne) SetRemark(v string) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateRemark() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckDetailsUpsertOne) ClearRemark() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRemark()
	})
}

// SetMaintainerID sets the "maintainer_id" field.
func (u *AssetCheckDetailsUpsertOne) SetMaintainerID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetMaintainerID(v)
	})
}

// UpdateMaintainerID sets the "maintainer_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateMaintainerID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateMaintainerID()
	})
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearMaintainerID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearMaintainerID()
	})
}

// SetSn sets the "sn" field.
func (u *AssetCheckDetailsUpsertOne) SetSn(v string) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateSn() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetCheckDetailsUpsertOne) ClearSn() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearSn()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetCheckDetailsUpsertOne) SetAssetID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateAssetID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearAssetID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearAssetID()
	})
}

// SetCheckID sets the "check_id" field.
func (u *AssetCheckDetailsUpsertOne) SetCheckID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetCheckID(v)
	})
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateCheckID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateCheckID()
	})
}

// ClearCheckID clears the value of the "check_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearCheckID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearCheckID()
	})
}

// SetRealLocationsID sets the "real_locations_id" field.
func (u *AssetCheckDetailsUpsertOne) SetRealLocationsID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRealLocationsID(v)
	})
}

// UpdateRealLocationsID sets the "real_locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateRealLocationsID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRealLocationsID()
	})
}

// ClearRealLocationsID clears the value of the "real_locations_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearRealLocationsID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRealLocationsID()
	})
}

// SetRealLocationsType sets the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertOne) SetRealLocationsType(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRealLocationsType(v)
	})
}

// AddRealLocationsType adds v to the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertOne) AddRealLocationsType(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddRealLocationsType(v)
	})
}

// UpdateRealLocationsType sets the "real_locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateRealLocationsType() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRealLocationsType()
	})
}

// ClearRealLocationsType clears the value of the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertOne) ClearRealLocationsType() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRealLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckDetailsUpsertOne) SetLocationsID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateLocationsID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearLocationsID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLocationsID()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckDetailsUpsertOne) SetLocationsType(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckDetailsUpsertOne) AddLocationsType(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateLocationsType() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckDetailsUpsertOne) ClearLocationsType() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLocationsType()
	})
}

// SetStatus sets the "status" field.
func (u *AssetCheckDetailsUpsertOne) SetStatus(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckDetailsUpsertOne) AddStatus(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateStatus() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckDetailsUpsertOne) ClearStatus() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearStatus()
	})
}

// SetResult sets the "result" field.
func (u *AssetCheckDetailsUpsertOne) SetResult(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetResult(v)
	})
}

// AddResult adds v to the "result" field.
func (u *AssetCheckDetailsUpsertOne) AddResult(v uint8) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateResult() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *AssetCheckDetailsUpsertOne) ClearResult() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearResult()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckDetailsUpsertOne) SetOperateID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetOperateID(v)
	})
}

// AddOperateID adds v to the "operate_id" field.
func (u *AssetCheckDetailsUpsertOne) AddOperateID(v uint64) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateOperateID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckDetailsUpsertOne) ClearOperateID() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateAt sets the "operate_at" field.
func (u *AssetCheckDetailsUpsertOne) SetOperateAt(v time.Time) *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetOperateAt(v)
	})
}

// UpdateOperateAt sets the "operate_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertOne) UpdateOperateAt() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateOperateAt()
	})
}

// ClearOperateAt clears the value of the "operate_at" field.
func (u *AssetCheckDetailsUpsertOne) ClearOperateAt() *AssetCheckDetailsUpsertOne {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearOperateAt()
	})
}

// Exec executes the query.
func (u *AssetCheckDetailsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCheckDetailsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetCheckDetailsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetCheckDetailsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetCheckDetailsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetCheckDetailsCreateBulk is the builder for creating many AssetCheckDetails entities in bulk.
type AssetCheckDetailsCreateBulk struct {
	config
	err      error
	builders []*AssetCheckDetailsCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetCheckDetails entities in the database.
func (acdcb *AssetCheckDetailsCreateBulk) Save(ctx context.Context) ([]*AssetCheckDetails, error) {
	if acdcb.err != nil {
		return nil, acdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acdcb.builders))
	nodes := make([]*AssetCheckDetails, len(acdcb.builders))
	mutators := make([]Mutator, len(acdcb.builders))
	for i := range acdcb.builders {
		func(i int, root context.Context) {
			builder := acdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetCheckDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acdcb *AssetCheckDetailsCreateBulk) SaveX(ctx context.Context) []*AssetCheckDetails {
	v, err := acdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acdcb *AssetCheckDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := acdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acdcb *AssetCheckDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := acdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetCheckDetails.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetCheckDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acdcb *AssetCheckDetailsCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetCheckDetailsUpsertBulk {
	acdcb.conflict = opts
	return &AssetCheckDetailsUpsertBulk{
		create: acdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acdcb *AssetCheckDetailsCreateBulk) OnConflictColumns(columns ...string) *AssetCheckDetailsUpsertBulk {
	acdcb.conflict = append(acdcb.conflict, sql.ConflictColumns(columns...))
	return &AssetCheckDetailsUpsertBulk{
		create: acdcb,
	}
}

// AssetCheckDetailsUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetCheckDetails nodes.
type AssetCheckDetailsUpsertBulk struct {
	create *AssetCheckDetailsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetCheckDetailsUpsertBulk) UpdateNewValues() *AssetCheckDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetcheckdetails.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assetcheckdetails.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetCheckDetails.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetCheckDetailsUpsertBulk) Ignore() *AssetCheckDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetCheckDetailsUpsertBulk) DoNothing() *AssetCheckDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetCheckDetailsCreateBulk.OnConflict
// documentation for more info.
func (u *AssetCheckDetailsUpsertBulk) Update(set func(*AssetCheckDetailsUpsert)) *AssetCheckDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetCheckDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetCheckDetailsUpsertBulk) SetUpdatedAt(v time.Time) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateUpdatedAt() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetCheckDetailsUpsertBulk) SetDeletedAt(v time.Time) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateDeletedAt() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetCheckDetailsUpsertBulk) ClearDeletedAt() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetCheckDetailsUpsertBulk) SetLastModifier(v *model.Modifier) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateLastModifier() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetCheckDetailsUpsertBulk) ClearLastModifier() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetCheckDetailsUpsertBulk) SetRemark(v string) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateRemark() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetCheckDetailsUpsertBulk) ClearRemark() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRemark()
	})
}

// SetMaintainerID sets the "maintainer_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetMaintainerID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetMaintainerID(v)
	})
}

// UpdateMaintainerID sets the "maintainer_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateMaintainerID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateMaintainerID()
	})
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearMaintainerID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearMaintainerID()
	})
}

// SetSn sets the "sn" field.
func (u *AssetCheckDetailsUpsertBulk) SetSn(v string) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateSn() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateSn()
	})
}

// ClearSn clears the value of the "sn" field.
func (u *AssetCheckDetailsUpsertBulk) ClearSn() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearSn()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetAssetID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateAssetID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// ClearAssetID clears the value of the "asset_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearAssetID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearAssetID()
	})
}

// SetCheckID sets the "check_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetCheckID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetCheckID(v)
	})
}

// UpdateCheckID sets the "check_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateCheckID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateCheckID()
	})
}

// ClearCheckID clears the value of the "check_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearCheckID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearCheckID()
	})
}

// SetRealLocationsID sets the "real_locations_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetRealLocationsID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRealLocationsID(v)
	})
}

// UpdateRealLocationsID sets the "real_locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateRealLocationsID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRealLocationsID()
	})
}

// ClearRealLocationsID clears the value of the "real_locations_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearRealLocationsID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRealLocationsID()
	})
}

// SetRealLocationsType sets the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) SetRealLocationsType(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetRealLocationsType(v)
	})
}

// AddRealLocationsType adds v to the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) AddRealLocationsType(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddRealLocationsType(v)
	})
}

// UpdateRealLocationsType sets the "real_locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateRealLocationsType() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateRealLocationsType()
	})
}

// ClearRealLocationsType clears the value of the "real_locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) ClearRealLocationsType() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearRealLocationsType()
	})
}

// SetLocationsID sets the "locations_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetLocationsID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLocationsID(v)
	})
}

// UpdateLocationsID sets the "locations_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateLocationsID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLocationsID()
	})
}

// ClearLocationsID clears the value of the "locations_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearLocationsID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLocationsID()
	})
}

// SetLocationsType sets the "locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) SetLocationsType(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetLocationsType(v)
	})
}

// AddLocationsType adds v to the "locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) AddLocationsType(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddLocationsType(v)
	})
}

// UpdateLocationsType sets the "locations_type" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateLocationsType() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateLocationsType()
	})
}

// ClearLocationsType clears the value of the "locations_type" field.
func (u *AssetCheckDetailsUpsertBulk) ClearLocationsType() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearLocationsType()
	})
}

// SetStatus sets the "status" field.
func (u *AssetCheckDetailsUpsertBulk) SetStatus(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetCheckDetailsUpsertBulk) AddStatus(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateStatus() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AssetCheckDetailsUpsertBulk) ClearStatus() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearStatus()
	})
}

// SetResult sets the "result" field.
func (u *AssetCheckDetailsUpsertBulk) SetResult(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetResult(v)
	})
}

// AddResult adds v to the "result" field.
func (u *AssetCheckDetailsUpsertBulk) AddResult(v uint8) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddResult(v)
	})
}

// UpdateResult sets the "result" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateResult() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateResult()
	})
}

// ClearResult clears the value of the "result" field.
func (u *AssetCheckDetailsUpsertBulk) ClearResult() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearResult()
	})
}

// SetOperateID sets the "operate_id" field.
func (u *AssetCheckDetailsUpsertBulk) SetOperateID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetOperateID(v)
	})
}

// AddOperateID adds v to the "operate_id" field.
func (u *AssetCheckDetailsUpsertBulk) AddOperateID(v uint64) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.AddOperateID(v)
	})
}

// UpdateOperateID sets the "operate_id" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateOperateID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateOperateID()
	})
}

// ClearOperateID clears the value of the "operate_id" field.
func (u *AssetCheckDetailsUpsertBulk) ClearOperateID() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearOperateID()
	})
}

// SetOperateAt sets the "operate_at" field.
func (u *AssetCheckDetailsUpsertBulk) SetOperateAt(v time.Time) *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.SetOperateAt(v)
	})
}

// UpdateOperateAt sets the "operate_at" field to the value that was provided on create.
func (u *AssetCheckDetailsUpsertBulk) UpdateOperateAt() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.UpdateOperateAt()
	})
}

// ClearOperateAt clears the value of the "operate_at" field.
func (u *AssetCheckDetailsUpsertBulk) ClearOperateAt() *AssetCheckDetailsUpsertBulk {
	return u.Update(func(s *AssetCheckDetailsUpsert) {
		s.ClearOperateAt()
	})
}

// Exec executes the query.
func (u *AssetCheckDetailsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetCheckDetailsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetCheckDetailsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetCheckDetailsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
