// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/purchasecommodity"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchaseOrderCreate is the builder for creating a PurchaseOrder entity.
type PurchaseOrderCreate struct {
	config
	mutation *PurchaseOrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (poc *PurchaseOrderCreate) SetCreatedAt(t time.Time) *PurchaseOrderCreate {
	poc.mutation.SetCreatedAt(t)
	return poc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableCreatedAt(t *time.Time) *PurchaseOrderCreate {
	if t != nil {
		poc.SetCreatedAt(*t)
	}
	return poc
}

// SetUpdatedAt sets the "updated_at" field.
func (poc *PurchaseOrderCreate) SetUpdatedAt(t time.Time) *PurchaseOrderCreate {
	poc.mutation.SetUpdatedAt(t)
	return poc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableUpdatedAt(t *time.Time) *PurchaseOrderCreate {
	if t != nil {
		poc.SetUpdatedAt(*t)
	}
	return poc
}

// SetDeletedAt sets the "deleted_at" field.
func (poc *PurchaseOrderCreate) SetDeletedAt(t time.Time) *PurchaseOrderCreate {
	poc.mutation.SetDeletedAt(t)
	return poc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableDeletedAt(t *time.Time) *PurchaseOrderCreate {
	if t != nil {
		poc.SetDeletedAt(*t)
	}
	return poc
}

// SetCreator sets the "creator" field.
func (poc *PurchaseOrderCreate) SetCreator(m *model.Modifier) *PurchaseOrderCreate {
	poc.mutation.SetCreator(m)
	return poc
}

// SetLastModifier sets the "last_modifier" field.
func (poc *PurchaseOrderCreate) SetLastModifier(m *model.Modifier) *PurchaseOrderCreate {
	poc.mutation.SetLastModifier(m)
	return poc
}

// SetRemark sets the "remark" field.
func (poc *PurchaseOrderCreate) SetRemark(s string) *PurchaseOrderCreate {
	poc.mutation.SetRemark(s)
	return poc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableRemark(s *string) *PurchaseOrderCreate {
	if s != nil {
		poc.SetRemark(*s)
	}
	return poc
}

// SetRiderID sets the "rider_id" field.
func (poc *PurchaseOrderCreate) SetRiderID(u uint64) *PurchaseOrderCreate {
	poc.mutation.SetRiderID(u)
	return poc
}

// SetCommodityID sets the "commodity_id" field.
func (poc *PurchaseOrderCreate) SetCommodityID(u uint64) *PurchaseOrderCreate {
	poc.mutation.SetCommodityID(u)
	return poc
}

// SetSn sets the "sn" field.
func (poc *PurchaseOrderCreate) SetSn(s string) *PurchaseOrderCreate {
	poc.mutation.SetSn(s)
	return poc
}

// SetStatus sets the "status" field.
func (poc *PurchaseOrderCreate) SetStatus(pu purchaseorder.Status) *PurchaseOrderCreate {
	poc.mutation.SetStatus(pu)
	return poc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableStatus(pu *purchaseorder.Status) *PurchaseOrderCreate {
	if pu != nil {
		poc.SetStatus(*pu)
	}
	return poc
}

// SetContractURL sets the "contract_url" field.
func (poc *PurchaseOrderCreate) SetContractURL(s string) *PurchaseOrderCreate {
	poc.mutation.SetContractURL(s)
	return poc
}

// SetNillableContractURL sets the "contract_url" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableContractURL(s *string) *PurchaseOrderCreate {
	if s != nil {
		poc.SetContractURL(*s)
	}
	return poc
}

// SetInstallmentIndex sets the "installment_index" field.
func (poc *PurchaseOrderCreate) SetInstallmentIndex(i int) *PurchaseOrderCreate {
	poc.mutation.SetInstallmentIndex(i)
	return poc
}

// SetNillableInstallmentIndex sets the "installment_index" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableInstallmentIndex(i *int) *PurchaseOrderCreate {
	if i != nil {
		poc.SetInstallmentIndex(*i)
	}
	return poc
}

// SetInstallmentTotal sets the "installment_total" field.
func (poc *PurchaseOrderCreate) SetInstallmentTotal(i int) *PurchaseOrderCreate {
	poc.mutation.SetInstallmentTotal(i)
	return poc
}

// SetInstallments sets the "installments" field.
func (poc *PurchaseOrderCreate) SetInstallments(f []float64) *PurchaseOrderCreate {
	poc.mutation.SetInstallments(f)
	return poc
}

// SetStartDate sets the "start_date" field.
func (poc *PurchaseOrderCreate) SetStartDate(t time.Time) *PurchaseOrderCreate {
	poc.mutation.SetStartDate(t)
	return poc
}

// SetNextDate sets the "next_date" field.
func (poc *PurchaseOrderCreate) SetNextDate(t time.Time) *PurchaseOrderCreate {
	poc.mutation.SetNextDate(t)
	return poc
}

// SetNillableNextDate sets the "next_date" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableNextDate(t *time.Time) *PurchaseOrderCreate {
	if t != nil {
		poc.SetNextDate(*t)
	}
	return poc
}

// SetStore sets the "store" field.
func (poc *PurchaseOrderCreate) SetStore(s string) *PurchaseOrderCreate {
	poc.mutation.SetStore(s)
	return poc
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (poc *PurchaseOrderCreate) SetNillableStore(s *string) *PurchaseOrderCreate {
	if s != nil {
		poc.SetStore(*s)
	}
	return poc
}

// SetImages sets the "images" field.
func (poc *PurchaseOrderCreate) SetImages(s []string) *PurchaseOrderCreate {
	poc.mutation.SetImages(s)
	return poc
}

// SetRider sets the "rider" edge to the Rider entity.
func (poc *PurchaseOrderCreate) SetRider(r *Rider) *PurchaseOrderCreate {
	return poc.SetRiderID(r.ID)
}

// SetCommodity sets the "commodity" edge to the PurchaseCommodity entity.
func (poc *PurchaseOrderCreate) SetCommodity(p *PurchaseCommodity) *PurchaseOrderCreate {
	return poc.SetCommodityID(p.ID)
}

// AddPaymentIDs adds the "payments" edge to the PurchasePayment entity by IDs.
func (poc *PurchaseOrderCreate) AddPaymentIDs(ids ...uint64) *PurchaseOrderCreate {
	poc.mutation.AddPaymentIDs(ids...)
	return poc
}

// AddPayments adds the "payments" edges to the PurchasePayment entity.
func (poc *PurchaseOrderCreate) AddPayments(p ...*PurchasePayment) *PurchaseOrderCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return poc.AddPaymentIDs(ids...)
}

// Mutation returns the PurchaseOrderMutation object of the builder.
func (poc *PurchaseOrderCreate) Mutation() *PurchaseOrderMutation {
	return poc.mutation
}

// Save creates the PurchaseOrder in the database.
func (poc *PurchaseOrderCreate) Save(ctx context.Context) (*PurchaseOrder, error) {
	if err := poc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, poc.sqlSave, poc.mutation, poc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PurchaseOrderCreate) SaveX(ctx context.Context) *PurchaseOrder {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PurchaseOrderCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PurchaseOrderCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (poc *PurchaseOrderCreate) defaults() error {
	if _, ok := poc.mutation.CreatedAt(); !ok {
		if purchaseorder.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchaseorder.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := purchaseorder.DefaultCreatedAt()
		poc.mutation.SetCreatedAt(v)
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		if purchaseorder.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchaseorder.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchaseorder.DefaultUpdatedAt()
		poc.mutation.SetUpdatedAt(v)
	}
	if _, ok := poc.mutation.Status(); !ok {
		v := purchaseorder.DefaultStatus
		poc.mutation.SetStatus(v)
	}
	if _, ok := poc.mutation.InstallmentIndex(); !ok {
		v := purchaseorder.DefaultInstallmentIndex
		poc.mutation.SetInstallmentIndex(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (poc *PurchaseOrderCreate) check() error {
	if _, ok := poc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PurchaseOrder.created_at"`)}
	}
	if _, ok := poc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PurchaseOrder.updated_at"`)}
	}
	if _, ok := poc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "PurchaseOrder.rider_id"`)}
	}
	if _, ok := poc.mutation.CommodityID(); !ok {
		return &ValidationError{Name: "commodity_id", err: errors.New(`ent: missing required field "PurchaseOrder.commodity_id"`)}
	}
	if _, ok := poc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "PurchaseOrder.sn"`)}
	}
	if _, ok := poc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PurchaseOrder.status"`)}
	}
	if v, ok := poc.mutation.Status(); ok {
		if err := purchaseorder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PurchaseOrder.status": %w`, err)}
		}
	}
	if _, ok := poc.mutation.InstallmentIndex(); !ok {
		return &ValidationError{Name: "installment_index", err: errors.New(`ent: missing required field "PurchaseOrder.installment_index"`)}
	}
	if _, ok := poc.mutation.InstallmentTotal(); !ok {
		return &ValidationError{Name: "installment_total", err: errors.New(`ent: missing required field "PurchaseOrder.installment_total"`)}
	}
	if _, ok := poc.mutation.Installments(); !ok {
		return &ValidationError{Name: "installments", err: errors.New(`ent: missing required field "PurchaseOrder.installments"`)}
	}
	if _, ok := poc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "PurchaseOrder.start_date"`)}
	}
	if len(poc.mutation.RiderIDs()) == 0 {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "PurchaseOrder.rider"`)}
	}
	if len(poc.mutation.CommodityIDs()) == 0 {
		return &ValidationError{Name: "commodity", err: errors.New(`ent: missing required edge "PurchaseOrder.commodity"`)}
	}
	return nil
}

func (poc *PurchaseOrderCreate) sqlSave(ctx context.Context) (*PurchaseOrder, error) {
	if err := poc.check(); err != nil {
		return nil, err
	}
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	poc.mutation.id = &_node.ID
	poc.mutation.done = true
	return _node, nil
}

func (poc *PurchaseOrderCreate) createSpec() (*PurchaseOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &PurchaseOrder{config: poc.config}
		_spec = sqlgraph.NewCreateSpec(purchaseorder.Table, sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = poc.conflict
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.SetField(purchaseorder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := poc.mutation.UpdatedAt(); ok {
		_spec.SetField(purchaseorder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := poc.mutation.DeletedAt(); ok {
		_spec.SetField(purchaseorder.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := poc.mutation.Creator(); ok {
		_spec.SetField(purchaseorder.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := poc.mutation.LastModifier(); ok {
		_spec.SetField(purchaseorder.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := poc.mutation.Remark(); ok {
		_spec.SetField(purchaseorder.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := poc.mutation.Sn(); ok {
		_spec.SetField(purchaseorder.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := poc.mutation.Status(); ok {
		_spec.SetField(purchaseorder.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := poc.mutation.ContractURL(); ok {
		_spec.SetField(purchaseorder.FieldContractURL, field.TypeString, value)
		_node.ContractURL = value
	}
	if value, ok := poc.mutation.InstallmentIndex(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentIndex, field.TypeInt, value)
		_node.InstallmentIndex = value
	}
	if value, ok := poc.mutation.InstallmentTotal(); ok {
		_spec.SetField(purchaseorder.FieldInstallmentTotal, field.TypeInt, value)
		_node.InstallmentTotal = value
	}
	if value, ok := poc.mutation.Installments(); ok {
		_spec.SetField(purchaseorder.FieldInstallments, field.TypeJSON, value)
		_node.Installments = value
	}
	if value, ok := poc.mutation.StartDate(); ok {
		_spec.SetField(purchaseorder.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := poc.mutation.NextDate(); ok {
		_spec.SetField(purchaseorder.FieldNextDate, field.TypeTime, value)
		_node.NextDate = &value
	}
	if value, ok := poc.mutation.Store(); ok {
		_spec.SetField(purchaseorder.FieldStore, field.TypeString, value)
		_node.Store = value
	}
	if value, ok := poc.mutation.Images(); ok {
		_spec.SetField(purchaseorder.FieldImages, field.TypeJSON, value)
		_node.Images = value
	}
	if nodes := poc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.RiderTable,
			Columns: []string{purchaseorder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poc.mutation.CommodityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   purchaseorder.CommodityTable,
			Columns: []string{purchaseorder.CommodityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasecommodity.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommodityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := poc.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   purchaseorder.PaymentsTable,
			Columns: []string{purchaseorder.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchasepayment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseOrder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (poc *PurchaseOrderCreate) OnConflict(opts ...sql.ConflictOption) *PurchaseOrderUpsertOne {
	poc.conflict = opts
	return &PurchaseOrderUpsertOne{
		create: poc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (poc *PurchaseOrderCreate) OnConflictColumns(columns ...string) *PurchaseOrderUpsertOne {
	poc.conflict = append(poc.conflict, sql.ConflictColumns(columns...))
	return &PurchaseOrderUpsertOne{
		create: poc,
	}
}

type (
	// PurchaseOrderUpsertOne is the builder for "upsert"-ing
	//  one PurchaseOrder node.
	PurchaseOrderUpsertOne struct {
		create *PurchaseOrderCreate
	}

	// PurchaseOrderUpsert is the "OnConflict" setter.
	PurchaseOrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseOrderUpsert) SetUpdatedAt(v time.Time) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateUpdatedAt() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseOrderUpsert) SetDeletedAt(v time.Time) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateDeletedAt() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseOrderUpsert) ClearDeletedAt() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseOrderUpsert) SetLastModifier(v *model.Modifier) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateLastModifier() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseOrderUpsert) ClearLastModifier() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PurchaseOrderUpsert) SetRemark(v string) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateRemark() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseOrderUpsert) ClearRemark() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PurchaseOrderUpsert) SetRiderID(v uint64) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateRiderID() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldRiderID)
	return u
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchaseOrderUpsert) SetCommodityID(v uint64) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldCommodityID, v)
	return u
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateCommodityID() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldCommodityID)
	return u
}

// SetSn sets the "sn" field.
func (u *PurchaseOrderUpsert) SetSn(v string) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateSn() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldSn)
	return u
}

// SetStatus sets the "status" field.
func (u *PurchaseOrderUpsert) SetStatus(v purchaseorder.Status) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateStatus() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldStatus)
	return u
}

// SetContractURL sets the "contract_url" field.
func (u *PurchaseOrderUpsert) SetContractURL(v string) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldContractURL, v)
	return u
}

// UpdateContractURL sets the "contract_url" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateContractURL() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldContractURL)
	return u
}

// ClearContractURL clears the value of the "contract_url" field.
func (u *PurchaseOrderUpsert) ClearContractURL() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldContractURL)
	return u
}

// SetInstallmentIndex sets the "installment_index" field.
func (u *PurchaseOrderUpsert) SetInstallmentIndex(v int) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldInstallmentIndex, v)
	return u
}

// UpdateInstallmentIndex sets the "installment_index" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateInstallmentIndex() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldInstallmentIndex)
	return u
}

// AddInstallmentIndex adds v to the "installment_index" field.
func (u *PurchaseOrderUpsert) AddInstallmentIndex(v int) *PurchaseOrderUpsert {
	u.Add(purchaseorder.FieldInstallmentIndex, v)
	return u
}

// SetInstallmentTotal sets the "installment_total" field.
func (u *PurchaseOrderUpsert) SetInstallmentTotal(v int) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldInstallmentTotal, v)
	return u
}

// UpdateInstallmentTotal sets the "installment_total" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateInstallmentTotal() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldInstallmentTotal)
	return u
}

// AddInstallmentTotal adds v to the "installment_total" field.
func (u *PurchaseOrderUpsert) AddInstallmentTotal(v int) *PurchaseOrderUpsert {
	u.Add(purchaseorder.FieldInstallmentTotal, v)
	return u
}

// SetInstallments sets the "installments" field.
func (u *PurchaseOrderUpsert) SetInstallments(v []float64) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldInstallments, v)
	return u
}

// UpdateInstallments sets the "installments" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateInstallments() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldInstallments)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *PurchaseOrderUpsert) SetStartDate(v time.Time) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateStartDate() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldStartDate)
	return u
}

// SetNextDate sets the "next_date" field.
func (u *PurchaseOrderUpsert) SetNextDate(v time.Time) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldNextDate, v)
	return u
}

// UpdateNextDate sets the "next_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateNextDate() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldNextDate)
	return u
}

// ClearNextDate clears the value of the "next_date" field.
func (u *PurchaseOrderUpsert) ClearNextDate() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldNextDate)
	return u
}

// SetStore sets the "store" field.
func (u *PurchaseOrderUpsert) SetStore(v string) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldStore, v)
	return u
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateStore() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldStore)
	return u
}

// ClearStore clears the value of the "store" field.
func (u *PurchaseOrderUpsert) ClearStore() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldStore)
	return u
}

// SetImages sets the "images" field.
func (u *PurchaseOrderUpsert) SetImages(v []string) *PurchaseOrderUpsert {
	u.Set(purchaseorder.FieldImages, v)
	return u
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PurchaseOrderUpsert) UpdateImages() *PurchaseOrderUpsert {
	u.SetExcluded(purchaseorder.FieldImages)
	return u
}

// ClearImages clears the value of the "images" field.
func (u *PurchaseOrderUpsert) ClearImages() *PurchaseOrderUpsert {
	u.SetNull(purchaseorder.FieldImages)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseOrderUpsertOne) UpdateNewValues() *PurchaseOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(purchaseorder.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(purchaseorder.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PurchaseOrderUpsertOne) Ignore() *PurchaseOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseOrderUpsertOne) DoNothing() *PurchaseOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseOrderCreate.OnConflict
// documentation for more info.
func (u *PurchaseOrderUpsertOne) Update(set func(*PurchaseOrderUpsert)) *PurchaseOrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseOrderUpsertOne) SetUpdatedAt(v time.Time) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateUpdatedAt() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseOrderUpsertOne) SetDeletedAt(v time.Time) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateDeletedAt() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseOrderUpsertOne) ClearDeletedAt() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseOrderUpsertOne) SetLastModifier(v *model.Modifier) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateLastModifier() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseOrderUpsertOne) ClearLastModifier() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseOrderUpsertOne) SetRemark(v string) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateRemark() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseOrderUpsertOne) ClearRemark() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PurchaseOrderUpsertOne) SetRiderID(v uint64) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateRiderID() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateRiderID()
	})
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchaseOrderUpsertOne) SetCommodityID(v uint64) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetCommodityID(v)
	})
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateCommodityID() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateCommodityID()
	})
}

// SetSn sets the "sn" field.
func (u *PurchaseOrderUpsertOne) SetSn(v string) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateSn() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *PurchaseOrderUpsertOne) SetStatus(v purchaseorder.Status) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateStatus() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetContractURL sets the "contract_url" field.
func (u *PurchaseOrderUpsertOne) SetContractURL(v string) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetContractURL(v)
	})
}

// UpdateContractURL sets the "contract_url" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateContractURL() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateContractURL()
	})
}

// ClearContractURL clears the value of the "contract_url" field.
func (u *PurchaseOrderUpsertOne) ClearContractURL() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearContractURL()
	})
}

// SetInstallmentIndex sets the "installment_index" field.
func (u *PurchaseOrderUpsertOne) SetInstallmentIndex(v int) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallmentIndex(v)
	})
}

// AddInstallmentIndex adds v to the "installment_index" field.
func (u *PurchaseOrderUpsertOne) AddInstallmentIndex(v int) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.AddInstallmentIndex(v)
	})
}

// UpdateInstallmentIndex sets the "installment_index" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateInstallmentIndex() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallmentIndex()
	})
}

// SetInstallmentTotal sets the "installment_total" field.
func (u *PurchaseOrderUpsertOne) SetInstallmentTotal(v int) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallmentTotal(v)
	})
}

// AddInstallmentTotal adds v to the "installment_total" field.
func (u *PurchaseOrderUpsertOne) AddInstallmentTotal(v int) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.AddInstallmentTotal(v)
	})
}

// UpdateInstallmentTotal sets the "installment_total" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateInstallmentTotal() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallmentTotal()
	})
}

// SetInstallments sets the "installments" field.
func (u *PurchaseOrderUpsertOne) SetInstallments(v []float64) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallments(v)
	})
}

// UpdateInstallments sets the "installments" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateInstallments() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallments()
	})
}

// SetStartDate sets the "start_date" field.
func (u *PurchaseOrderUpsertOne) SetStartDate(v time.Time) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateStartDate() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStartDate()
	})
}

// SetNextDate sets the "next_date" field.
func (u *PurchaseOrderUpsertOne) SetNextDate(v time.Time) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetNextDate(v)
	})
}

// UpdateNextDate sets the "next_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateNextDate() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateNextDate()
	})
}

// ClearNextDate clears the value of the "next_date" field.
func (u *PurchaseOrderUpsertOne) ClearNextDate() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearNextDate()
	})
}

// SetStore sets the "store" field.
func (u *PurchaseOrderUpsertOne) SetStore(v string) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStore(v)
	})
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateStore() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStore()
	})
}

// ClearStore clears the value of the "store" field.
func (u *PurchaseOrderUpsertOne) ClearStore() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearStore()
	})
}

// SetImages sets the "images" field.
func (u *PurchaseOrderUpsertOne) SetImages(v []string) *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PurchaseOrderUpsertOne) UpdateImages() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *PurchaseOrderUpsertOne) ClearImages() *PurchaseOrderUpsertOne {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearImages()
	})
}

// Exec executes the query.
func (u *PurchaseOrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseOrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseOrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PurchaseOrderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PurchaseOrderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PurchaseOrderCreateBulk is the builder for creating many PurchaseOrder entities in bulk.
type PurchaseOrderCreateBulk struct {
	config
	err      error
	builders []*PurchaseOrderCreate
	conflict []sql.ConflictOption
}

// Save creates the PurchaseOrder entities in the database.
func (pocb *PurchaseOrderCreateBulk) Save(ctx context.Context) ([]*PurchaseOrder, error) {
	if pocb.err != nil {
		return nil, pocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PurchaseOrder, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchaseOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PurchaseOrderCreateBulk) SaveX(ctx context.Context) []*PurchaseOrder {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PurchaseOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PurchaseOrderCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseOrder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseOrderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pocb *PurchaseOrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *PurchaseOrderUpsertBulk {
	pocb.conflict = opts
	return &PurchaseOrderUpsertBulk{
		create: pocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pocb *PurchaseOrderCreateBulk) OnConflictColumns(columns ...string) *PurchaseOrderUpsertBulk {
	pocb.conflict = append(pocb.conflict, sql.ConflictColumns(columns...))
	return &PurchaseOrderUpsertBulk{
		create: pocb,
	}
}

// PurchaseOrderUpsertBulk is the builder for "upsert"-ing
// a bulk of PurchaseOrder nodes.
type PurchaseOrderUpsertBulk struct {
	create *PurchaseOrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseOrderUpsertBulk) UpdateNewValues() *PurchaseOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(purchaseorder.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(purchaseorder.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseOrder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PurchaseOrderUpsertBulk) Ignore() *PurchaseOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseOrderUpsertBulk) DoNothing() *PurchaseOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseOrderCreateBulk.OnConflict
// documentation for more info.
func (u *PurchaseOrderUpsertBulk) Update(set func(*PurchaseOrderUpsert)) *PurchaseOrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseOrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseOrderUpsertBulk) SetUpdatedAt(v time.Time) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateUpdatedAt() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseOrderUpsertBulk) SetDeletedAt(v time.Time) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateDeletedAt() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseOrderUpsertBulk) ClearDeletedAt() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseOrderUpsertBulk) SetLastModifier(v *model.Modifier) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateLastModifier() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseOrderUpsertBulk) ClearLastModifier() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseOrderUpsertBulk) SetRemark(v string) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateRemark() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseOrderUpsertBulk) ClearRemark() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PurchaseOrderUpsertBulk) SetRiderID(v uint64) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateRiderID() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateRiderID()
	})
}

// SetCommodityID sets the "commodity_id" field.
func (u *PurchaseOrderUpsertBulk) SetCommodityID(v uint64) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetCommodityID(v)
	})
}

// UpdateCommodityID sets the "commodity_id" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateCommodityID() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateCommodityID()
	})
}

// SetSn sets the "sn" field.
func (u *PurchaseOrderUpsertBulk) SetSn(v string) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateSn() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateSn()
	})
}

// SetStatus sets the "status" field.
func (u *PurchaseOrderUpsertBulk) SetStatus(v purchaseorder.Status) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateStatus() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStatus()
	})
}

// SetContractURL sets the "contract_url" field.
func (u *PurchaseOrderUpsertBulk) SetContractURL(v string) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetContractURL(v)
	})
}

// UpdateContractURL sets the "contract_url" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateContractURL() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateContractURL()
	})
}

// ClearContractURL clears the value of the "contract_url" field.
func (u *PurchaseOrderUpsertBulk) ClearContractURL() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearContractURL()
	})
}

// SetInstallmentIndex sets the "installment_index" field.
func (u *PurchaseOrderUpsertBulk) SetInstallmentIndex(v int) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallmentIndex(v)
	})
}

// AddInstallmentIndex adds v to the "installment_index" field.
func (u *PurchaseOrderUpsertBulk) AddInstallmentIndex(v int) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.AddInstallmentIndex(v)
	})
}

// UpdateInstallmentIndex sets the "installment_index" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateInstallmentIndex() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallmentIndex()
	})
}

// SetInstallmentTotal sets the "installment_total" field.
func (u *PurchaseOrderUpsertBulk) SetInstallmentTotal(v int) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallmentTotal(v)
	})
}

// AddInstallmentTotal adds v to the "installment_total" field.
func (u *PurchaseOrderUpsertBulk) AddInstallmentTotal(v int) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.AddInstallmentTotal(v)
	})
}

// UpdateInstallmentTotal sets the "installment_total" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateInstallmentTotal() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallmentTotal()
	})
}

// SetInstallments sets the "installments" field.
func (u *PurchaseOrderUpsertBulk) SetInstallments(v []float64) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetInstallments(v)
	})
}

// UpdateInstallments sets the "installments" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateInstallments() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateInstallments()
	})
}

// SetStartDate sets the "start_date" field.
func (u *PurchaseOrderUpsertBulk) SetStartDate(v time.Time) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateStartDate() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStartDate()
	})
}

// SetNextDate sets the "next_date" field.
func (u *PurchaseOrderUpsertBulk) SetNextDate(v time.Time) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetNextDate(v)
	})
}

// UpdateNextDate sets the "next_date" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateNextDate() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateNextDate()
	})
}

// ClearNextDate clears the value of the "next_date" field.
func (u *PurchaseOrderUpsertBulk) ClearNextDate() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearNextDate()
	})
}

// SetStore sets the "store" field.
func (u *PurchaseOrderUpsertBulk) SetStore(v string) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetStore(v)
	})
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateStore() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateStore()
	})
}

// ClearStore clears the value of the "store" field.
func (u *PurchaseOrderUpsertBulk) ClearStore() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearStore()
	})
}

// SetImages sets the "images" field.
func (u *PurchaseOrderUpsertBulk) SetImages(v []string) *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.SetImages(v)
	})
}

// UpdateImages sets the "images" field to the value that was provided on create.
func (u *PurchaseOrderUpsertBulk) UpdateImages() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.UpdateImages()
	})
}

// ClearImages clears the value of the "images" field.
func (u *PurchaseOrderUpsertBulk) ClearImages() *PurchaseOrderUpsertBulk {
	return u.Update(func(s *PurchaseOrderUpsert) {
		s.ClearImages()
	})
}

// Exec executes the query.
func (u *PurchaseOrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PurchaseOrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseOrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseOrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
