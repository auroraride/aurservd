// Code generated by ent, DO NOT EDIT.

package batteryfault

import (
	"fmt"
	"time"

	"github.com/auroraride/aurservd/app/model"
)

const (
	// Label holds the string label denoting the batteryfault type in the database.
	Label = "battery_fault"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldBatteryID holds the string denoting the battery_id field in the database.
	FieldBatteryID = "battery_id"
	// FieldFault holds the string denoting the fault field in the database.
	FieldFault = "fault"
	// FieldBeginAt holds the string denoting the begin_at field in the database.
	FieldBeginAt = "begin_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// Table holds the table name of the batteryfault in the database.
	Table = "battery_fault"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "battery_fault"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "battery_id"
)

// Columns holds all SQL columns for batteryfault fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldSn,
	FieldBatteryID,
	FieldFault,
	FieldBeginAt,
	FieldEndAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultBeginAt holds the default value on creation for the "begin_at" field.
	DefaultBeginAt func() time.Time
)

// FaultValidator is a validator for the "fault" field enum values. It is called by the builders before save.
func FaultValidator(f model.BatteryFault) error {
	switch f.String() {
	case "TVL", "TVH", "MVL", "MVH", "DOC", "COC", "SCL", "CTH", "CTL", "DTH", "DTL", "SCT", "MTH":
		return nil
	default:
		return fmt.Errorf("batteryfault: invalid enum value for fault field: %q", f)
	}
}
