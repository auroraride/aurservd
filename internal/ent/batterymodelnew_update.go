// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodelnew"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelNewUpdate is the builder for updating BatteryModelNew entities.
type BatteryModelNewUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryModelNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryModelNewUpdate builder.
func (bmnu *BatteryModelNewUpdate) Where(ps ...predicate.BatteryModelNew) *BatteryModelNewUpdate {
	bmnu.mutation.Where(ps...)
	return bmnu
}

// SetUpdatedAt sets the "updated_at" field.
func (bmnu *BatteryModelNewUpdate) SetUpdatedAt(t time.Time) *BatteryModelNewUpdate {
	bmnu.mutation.SetUpdatedAt(t)
	return bmnu
}

// SetDeletedAt sets the "deleted_at" field.
func (bmnu *BatteryModelNewUpdate) SetDeletedAt(t time.Time) *BatteryModelNewUpdate {
	bmnu.mutation.SetDeletedAt(t)
	return bmnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableDeletedAt(t *time.Time) *BatteryModelNewUpdate {
	if t != nil {
		bmnu.SetDeletedAt(*t)
	}
	return bmnu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bmnu *BatteryModelNewUpdate) ClearDeletedAt() *BatteryModelNewUpdate {
	bmnu.mutation.ClearDeletedAt()
	return bmnu
}

// SetLastModifier sets the "last_modifier" field.
func (bmnu *BatteryModelNewUpdate) SetLastModifier(m *model.Modifier) *BatteryModelNewUpdate {
	bmnu.mutation.SetLastModifier(m)
	return bmnu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bmnu *BatteryModelNewUpdate) ClearLastModifier() *BatteryModelNewUpdate {
	bmnu.mutation.ClearLastModifier()
	return bmnu
}

// SetRemark sets the "remark" field.
func (bmnu *BatteryModelNewUpdate) SetRemark(s string) *BatteryModelNewUpdate {
	bmnu.mutation.SetRemark(s)
	return bmnu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableRemark(s *string) *BatteryModelNewUpdate {
	if s != nil {
		bmnu.SetRemark(*s)
	}
	return bmnu
}

// ClearRemark clears the value of the "remark" field.
func (bmnu *BatteryModelNewUpdate) ClearRemark() *BatteryModelNewUpdate {
	bmnu.mutation.ClearRemark()
	return bmnu
}

// SetType sets the "type" field.
func (bmnu *BatteryModelNewUpdate) SetType(u uint8) *BatteryModelNewUpdate {
	bmnu.mutation.ResetType()
	bmnu.mutation.SetType(u)
	return bmnu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableType(u *uint8) *BatteryModelNewUpdate {
	if u != nil {
		bmnu.SetType(*u)
	}
	return bmnu
}

// AddType adds u to the "type" field.
func (bmnu *BatteryModelNewUpdate) AddType(u int8) *BatteryModelNewUpdate {
	bmnu.mutation.AddType(u)
	return bmnu
}

// SetVoltage sets the "voltage" field.
func (bmnu *BatteryModelNewUpdate) SetVoltage(u uint) *BatteryModelNewUpdate {
	bmnu.mutation.ResetVoltage()
	bmnu.mutation.SetVoltage(u)
	return bmnu
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableVoltage(u *uint) *BatteryModelNewUpdate {
	if u != nil {
		bmnu.SetVoltage(*u)
	}
	return bmnu
}

// AddVoltage adds u to the "voltage" field.
func (bmnu *BatteryModelNewUpdate) AddVoltage(u int) *BatteryModelNewUpdate {
	bmnu.mutation.AddVoltage(u)
	return bmnu
}

// SetCapacity sets the "capacity" field.
func (bmnu *BatteryModelNewUpdate) SetCapacity(u uint) *BatteryModelNewUpdate {
	bmnu.mutation.ResetCapacity()
	bmnu.mutation.SetCapacity(u)
	return bmnu
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableCapacity(u *uint) *BatteryModelNewUpdate {
	if u != nil {
		bmnu.SetCapacity(*u)
	}
	return bmnu
}

// AddCapacity adds u to the "capacity" field.
func (bmnu *BatteryModelNewUpdate) AddCapacity(u int) *BatteryModelNewUpdate {
	bmnu.mutation.AddCapacity(u)
	return bmnu
}

// SetModel sets the "model" field.
func (bmnu *BatteryModelNewUpdate) SetModel(s string) *BatteryModelNewUpdate {
	bmnu.mutation.SetModel(s)
	return bmnu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (bmnu *BatteryModelNewUpdate) SetNillableModel(s *string) *BatteryModelNewUpdate {
	if s != nil {
		bmnu.SetModel(*s)
	}
	return bmnu
}

// Mutation returns the BatteryModelNewMutation object of the builder.
func (bmnu *BatteryModelNewUpdate) Mutation() *BatteryModelNewMutation {
	return bmnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bmnu *BatteryModelNewUpdate) Save(ctx context.Context) (int, error) {
	if err := bmnu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, bmnu.sqlSave, bmnu.mutation, bmnu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmnu *BatteryModelNewUpdate) SaveX(ctx context.Context) int {
	affected, err := bmnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bmnu *BatteryModelNewUpdate) Exec(ctx context.Context) error {
	_, err := bmnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmnu *BatteryModelNewUpdate) ExecX(ctx context.Context) {
	if err := bmnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmnu *BatteryModelNewUpdate) defaults() error {
	if _, ok := bmnu.mutation.UpdatedAt(); !ok {
		if batterymodelnew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodelnew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodelnew.UpdateDefaultUpdatedAt()
		bmnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmnu *BatteryModelNewUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelNewUpdate {
	bmnu.modifiers = append(bmnu.modifiers, modifiers...)
	return bmnu
}

func (bmnu *BatteryModelNewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterymodelnew.Table, batterymodelnew.Columns, sqlgraph.NewFieldSpec(batterymodelnew.FieldID, field.TypeUint64))
	if ps := bmnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmnu.mutation.UpdatedAt(); ok {
		_spec.SetField(batterymodelnew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bmnu.mutation.DeletedAt(); ok {
		_spec.SetField(batterymodelnew.FieldDeletedAt, field.TypeTime, value)
	}
	if bmnu.mutation.DeletedAtCleared() {
		_spec.ClearField(batterymodelnew.FieldDeletedAt, field.TypeTime)
	}
	if bmnu.mutation.CreatorCleared() {
		_spec.ClearField(batterymodelnew.FieldCreator, field.TypeJSON)
	}
	if value, ok := bmnu.mutation.LastModifier(); ok {
		_spec.SetField(batterymodelnew.FieldLastModifier, field.TypeJSON, value)
	}
	if bmnu.mutation.LastModifierCleared() {
		_spec.ClearField(batterymodelnew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bmnu.mutation.Remark(); ok {
		_spec.SetField(batterymodelnew.FieldRemark, field.TypeString, value)
	}
	if bmnu.mutation.RemarkCleared() {
		_spec.ClearField(batterymodelnew.FieldRemark, field.TypeString)
	}
	if value, ok := bmnu.mutation.GetType(); ok {
		_spec.SetField(batterymodelnew.FieldType, field.TypeUint8, value)
	}
	if value, ok := bmnu.mutation.AddedType(); ok {
		_spec.AddField(batterymodelnew.FieldType, field.TypeUint8, value)
	}
	if value, ok := bmnu.mutation.Voltage(); ok {
		_spec.SetField(batterymodelnew.FieldVoltage, field.TypeUint, value)
	}
	if value, ok := bmnu.mutation.AddedVoltage(); ok {
		_spec.AddField(batterymodelnew.FieldVoltage, field.TypeUint, value)
	}
	if value, ok := bmnu.mutation.Capacity(); ok {
		_spec.SetField(batterymodelnew.FieldCapacity, field.TypeUint, value)
	}
	if value, ok := bmnu.mutation.AddedCapacity(); ok {
		_spec.AddField(batterymodelnew.FieldCapacity, field.TypeUint, value)
	}
	if value, ok := bmnu.mutation.Model(); ok {
		_spec.SetField(batterymodelnew.FieldModel, field.TypeString, value)
	}
	_spec.AddModifiers(bmnu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bmnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodelnew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bmnu.mutation.done = true
	return n, nil
}

// BatteryModelNewUpdateOne is the builder for updating a single BatteryModelNew entity.
type BatteryModelNewUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryModelNewMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bmnuo *BatteryModelNewUpdateOne) SetUpdatedAt(t time.Time) *BatteryModelNewUpdateOne {
	bmnuo.mutation.SetUpdatedAt(t)
	return bmnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bmnuo *BatteryModelNewUpdateOne) SetDeletedAt(t time.Time) *BatteryModelNewUpdateOne {
	bmnuo.mutation.SetDeletedAt(t)
	return bmnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableDeletedAt(t *time.Time) *BatteryModelNewUpdateOne {
	if t != nil {
		bmnuo.SetDeletedAt(*t)
	}
	return bmnuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bmnuo *BatteryModelNewUpdateOne) ClearDeletedAt() *BatteryModelNewUpdateOne {
	bmnuo.mutation.ClearDeletedAt()
	return bmnuo
}

// SetLastModifier sets the "last_modifier" field.
func (bmnuo *BatteryModelNewUpdateOne) SetLastModifier(m *model.Modifier) *BatteryModelNewUpdateOne {
	bmnuo.mutation.SetLastModifier(m)
	return bmnuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bmnuo *BatteryModelNewUpdateOne) ClearLastModifier() *BatteryModelNewUpdateOne {
	bmnuo.mutation.ClearLastModifier()
	return bmnuo
}

// SetRemark sets the "remark" field.
func (bmnuo *BatteryModelNewUpdateOne) SetRemark(s string) *BatteryModelNewUpdateOne {
	bmnuo.mutation.SetRemark(s)
	return bmnuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableRemark(s *string) *BatteryModelNewUpdateOne {
	if s != nil {
		bmnuo.SetRemark(*s)
	}
	return bmnuo
}

// ClearRemark clears the value of the "remark" field.
func (bmnuo *BatteryModelNewUpdateOne) ClearRemark() *BatteryModelNewUpdateOne {
	bmnuo.mutation.ClearRemark()
	return bmnuo
}

// SetType sets the "type" field.
func (bmnuo *BatteryModelNewUpdateOne) SetType(u uint8) *BatteryModelNewUpdateOne {
	bmnuo.mutation.ResetType()
	bmnuo.mutation.SetType(u)
	return bmnuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableType(u *uint8) *BatteryModelNewUpdateOne {
	if u != nil {
		bmnuo.SetType(*u)
	}
	return bmnuo
}

// AddType adds u to the "type" field.
func (bmnuo *BatteryModelNewUpdateOne) AddType(u int8) *BatteryModelNewUpdateOne {
	bmnuo.mutation.AddType(u)
	return bmnuo
}

// SetVoltage sets the "voltage" field.
func (bmnuo *BatteryModelNewUpdateOne) SetVoltage(u uint) *BatteryModelNewUpdateOne {
	bmnuo.mutation.ResetVoltage()
	bmnuo.mutation.SetVoltage(u)
	return bmnuo
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableVoltage(u *uint) *BatteryModelNewUpdateOne {
	if u != nil {
		bmnuo.SetVoltage(*u)
	}
	return bmnuo
}

// AddVoltage adds u to the "voltage" field.
func (bmnuo *BatteryModelNewUpdateOne) AddVoltage(u int) *BatteryModelNewUpdateOne {
	bmnuo.mutation.AddVoltage(u)
	return bmnuo
}

// SetCapacity sets the "capacity" field.
func (bmnuo *BatteryModelNewUpdateOne) SetCapacity(u uint) *BatteryModelNewUpdateOne {
	bmnuo.mutation.ResetCapacity()
	bmnuo.mutation.SetCapacity(u)
	return bmnuo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableCapacity(u *uint) *BatteryModelNewUpdateOne {
	if u != nil {
		bmnuo.SetCapacity(*u)
	}
	return bmnuo
}

// AddCapacity adds u to the "capacity" field.
func (bmnuo *BatteryModelNewUpdateOne) AddCapacity(u int) *BatteryModelNewUpdateOne {
	bmnuo.mutation.AddCapacity(u)
	return bmnuo
}

// SetModel sets the "model" field.
func (bmnuo *BatteryModelNewUpdateOne) SetModel(s string) *BatteryModelNewUpdateOne {
	bmnuo.mutation.SetModel(s)
	return bmnuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (bmnuo *BatteryModelNewUpdateOne) SetNillableModel(s *string) *BatteryModelNewUpdateOne {
	if s != nil {
		bmnuo.SetModel(*s)
	}
	return bmnuo
}

// Mutation returns the BatteryModelNewMutation object of the builder.
func (bmnuo *BatteryModelNewUpdateOne) Mutation() *BatteryModelNewMutation {
	return bmnuo.mutation
}

// Where appends a list predicates to the BatteryModelNewUpdate builder.
func (bmnuo *BatteryModelNewUpdateOne) Where(ps ...predicate.BatteryModelNew) *BatteryModelNewUpdateOne {
	bmnuo.mutation.Where(ps...)
	return bmnuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bmnuo *BatteryModelNewUpdateOne) Select(field string, fields ...string) *BatteryModelNewUpdateOne {
	bmnuo.fields = append([]string{field}, fields...)
	return bmnuo
}

// Save executes the query and returns the updated BatteryModelNew entity.
func (bmnuo *BatteryModelNewUpdateOne) Save(ctx context.Context) (*BatteryModelNew, error) {
	if err := bmnuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bmnuo.sqlSave, bmnuo.mutation, bmnuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmnuo *BatteryModelNewUpdateOne) SaveX(ctx context.Context) *BatteryModelNew {
	node, err := bmnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bmnuo *BatteryModelNewUpdateOne) Exec(ctx context.Context) error {
	_, err := bmnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmnuo *BatteryModelNewUpdateOne) ExecX(ctx context.Context) {
	if err := bmnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmnuo *BatteryModelNewUpdateOne) defaults() error {
	if _, ok := bmnuo.mutation.UpdatedAt(); !ok {
		if batterymodelnew.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodelnew.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodelnew.UpdateDefaultUpdatedAt()
		bmnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmnuo *BatteryModelNewUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelNewUpdateOne {
	bmnuo.modifiers = append(bmnuo.modifiers, modifiers...)
	return bmnuo
}

func (bmnuo *BatteryModelNewUpdateOne) sqlSave(ctx context.Context) (_node *BatteryModelNew, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterymodelnew.Table, batterymodelnew.Columns, sqlgraph.NewFieldSpec(batterymodelnew.FieldID, field.TypeUint64))
	id, ok := bmnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryModelNew.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bmnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterymodelnew.FieldID)
		for _, f := range fields {
			if !batterymodelnew.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batterymodelnew.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bmnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmnuo.mutation.UpdatedAt(); ok {
		_spec.SetField(batterymodelnew.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := bmnuo.mutation.DeletedAt(); ok {
		_spec.SetField(batterymodelnew.FieldDeletedAt, field.TypeTime, value)
	}
	if bmnuo.mutation.DeletedAtCleared() {
		_spec.ClearField(batterymodelnew.FieldDeletedAt, field.TypeTime)
	}
	if bmnuo.mutation.CreatorCleared() {
		_spec.ClearField(batterymodelnew.FieldCreator, field.TypeJSON)
	}
	if value, ok := bmnuo.mutation.LastModifier(); ok {
		_spec.SetField(batterymodelnew.FieldLastModifier, field.TypeJSON, value)
	}
	if bmnuo.mutation.LastModifierCleared() {
		_spec.ClearField(batterymodelnew.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := bmnuo.mutation.Remark(); ok {
		_spec.SetField(batterymodelnew.FieldRemark, field.TypeString, value)
	}
	if bmnuo.mutation.RemarkCleared() {
		_spec.ClearField(batterymodelnew.FieldRemark, field.TypeString)
	}
	if value, ok := bmnuo.mutation.GetType(); ok {
		_spec.SetField(batterymodelnew.FieldType, field.TypeUint8, value)
	}
	if value, ok := bmnuo.mutation.AddedType(); ok {
		_spec.AddField(batterymodelnew.FieldType, field.TypeUint8, value)
	}
	if value, ok := bmnuo.mutation.Voltage(); ok {
		_spec.SetField(batterymodelnew.FieldVoltage, field.TypeUint, value)
	}
	if value, ok := bmnuo.mutation.AddedVoltage(); ok {
		_spec.AddField(batterymodelnew.FieldVoltage, field.TypeUint, value)
	}
	if value, ok := bmnuo.mutation.Capacity(); ok {
		_spec.SetField(batterymodelnew.FieldCapacity, field.TypeUint, value)
	}
	if value, ok := bmnuo.mutation.AddedCapacity(); ok {
		_spec.AddField(batterymodelnew.FieldCapacity, field.TypeUint, value)
	}
	if value, ok := bmnuo.mutation.Model(); ok {
		_spec.SetField(batterymodelnew.FieldModel, field.TypeString, value)
	}
	_spec.AddModifiers(bmnuo.modifiers...)
	_node = &BatteryModelNew{config: bmnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bmnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodelnew.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bmnuo.mutation.done = true
	return _node, nil
}
