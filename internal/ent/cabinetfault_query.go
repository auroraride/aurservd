// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetFaultQuery is the builder for querying CabinetFault entities.
type CabinetFaultQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.CabinetFault
	// eager-loading edges.
	withCity    *CityQuery
	withBranch  *BranchQuery
	withCabinet *CabinetQuery
	withRider   *RiderQuery
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CabinetFaultQuery builder.
func (cfq *CabinetFaultQuery) Where(ps ...predicate.CabinetFault) *CabinetFaultQuery {
	cfq.predicates = append(cfq.predicates, ps...)
	return cfq
}

// Limit adds a limit step to the query.
func (cfq *CabinetFaultQuery) Limit(limit int) *CabinetFaultQuery {
	cfq.limit = &limit
	return cfq
}

// Offset adds an offset step to the query.
func (cfq *CabinetFaultQuery) Offset(offset int) *CabinetFaultQuery {
	cfq.offset = &offset
	return cfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cfq *CabinetFaultQuery) Unique(unique bool) *CabinetFaultQuery {
	cfq.unique = &unique
	return cfq
}

// Order adds an order step to the query.
func (cfq *CabinetFaultQuery) Order(o ...OrderFunc) *CabinetFaultQuery {
	cfq.order = append(cfq.order, o...)
	return cfq
}

// QueryCity chains the current query on the "city" edge.
func (cfq *CabinetFaultQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, cabinetfault.CityTable, cabinetfault.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBranch chains the current query on the "branch" edge.
func (cfq *CabinetFaultQuery) QueryBranch() *BranchQuery {
	query := &BranchQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.BranchTable, cabinetfault.BranchColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (cfq *CabinetFaultQuery) QueryCabinet() *CabinetQuery {
	query := &CabinetQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.CabinetTable, cabinetfault.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (cfq *CabinetFaultQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: cfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(cabinetfault.Table, cabinetfault.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cabinetfault.RiderTable, cabinetfault.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(cfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first CabinetFault entity from the query.
// Returns a *NotFoundError when no CabinetFault was found.
func (cfq *CabinetFaultQuery) First(ctx context.Context) (*CabinetFault, error) {
	nodes, err := cfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{cabinetfault.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cfq *CabinetFaultQuery) FirstX(ctx context.Context) *CabinetFault {
	node, err := cfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first CabinetFault ID from the query.
// Returns a *NotFoundError when no CabinetFault ID was found.
func (cfq *CabinetFaultQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{cabinetfault.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cfq *CabinetFaultQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := cfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single CabinetFault entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one CabinetFault entity is found.
// Returns a *NotFoundError when no CabinetFault entities are found.
func (cfq *CabinetFaultQuery) Only(ctx context.Context) (*CabinetFault, error) {
	nodes, err := cfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{cabinetfault.Label}
	default:
		return nil, &NotSingularError{cabinetfault.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cfq *CabinetFaultQuery) OnlyX(ctx context.Context) *CabinetFault {
	node, err := cfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only CabinetFault ID in the query.
// Returns a *NotSingularError when more than one CabinetFault ID is found.
// Returns a *NotFoundError when no entities are found.
func (cfq *CabinetFaultQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = cfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{cabinetfault.Label}
	default:
		err = &NotSingularError{cabinetfault.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cfq *CabinetFaultQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := cfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of CabinetFaults.
func (cfq *CabinetFaultQuery) All(ctx context.Context) ([]*CabinetFault, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return cfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (cfq *CabinetFaultQuery) AllX(ctx context.Context) []*CabinetFault {
	nodes, err := cfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of CabinetFault IDs.
func (cfq *CabinetFaultQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := cfq.Select(cabinetfault.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cfq *CabinetFaultQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := cfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cfq *CabinetFaultQuery) Count(ctx context.Context) (int, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return cfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (cfq *CabinetFaultQuery) CountX(ctx context.Context) int {
	count, err := cfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cfq *CabinetFaultQuery) Exist(ctx context.Context) (bool, error) {
	if err := cfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return cfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (cfq *CabinetFaultQuery) ExistX(ctx context.Context) bool {
	exist, err := cfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CabinetFaultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cfq *CabinetFaultQuery) Clone() *CabinetFaultQuery {
	if cfq == nil {
		return nil
	}
	return &CabinetFaultQuery{
		config:      cfq.config,
		limit:       cfq.limit,
		offset:      cfq.offset,
		order:       append([]OrderFunc{}, cfq.order...),
		predicates:  append([]predicate.CabinetFault{}, cfq.predicates...),
		withCity:    cfq.withCity.Clone(),
		withBranch:  cfq.withBranch.Clone(),
		withCabinet: cfq.withCabinet.Clone(),
		withRider:   cfq.withRider.Clone(),
		// clone intermediate query.
		sql:    cfq.sql.Clone(),
		path:   cfq.path,
		unique: cfq.unique,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CabinetFaultQuery) WithCity(opts ...func(*CityQuery)) *CabinetFaultQuery {
	query := &CityQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withCity = query
	return cfq
}

// WithBranch tells the query-builder to eager-load the nodes that are connected to
// the "branch" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CabinetFaultQuery) WithBranch(opts ...func(*BranchQuery)) *CabinetFaultQuery {
	query := &BranchQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withBranch = query
	return cfq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CabinetFaultQuery) WithCabinet(opts ...func(*CabinetQuery)) *CabinetFaultQuery {
	query := &CabinetQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withCabinet = query
	return cfq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (cfq *CabinetFaultQuery) WithRider(opts ...func(*RiderQuery)) *CabinetFaultQuery {
	query := &RiderQuery{config: cfq.config}
	for _, opt := range opts {
		opt(query)
	}
	cfq.withRider = query
	return cfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.CabinetFault.Query().
//		GroupBy(cabinetfault.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (cfq *CabinetFaultQuery) GroupBy(field string, fields ...string) *CabinetFaultGroupBy {
	grbuild := &CabinetFaultGroupBy{config: cfq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := cfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return cfq.sqlQuery(ctx), nil
	}
	grbuild.label = cabinetfault.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.CabinetFault.Query().
//		Select(cabinetfault.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (cfq *CabinetFaultQuery) Select(fields ...string) *CabinetFaultSelect {
	cfq.fields = append(cfq.fields, fields...)
	selbuild := &CabinetFaultSelect{CabinetFaultQuery: cfq}
	selbuild.label = cabinetfault.Label
	selbuild.flds, selbuild.scan = &cfq.fields, selbuild.Scan
	return selbuild
}

func (cfq *CabinetFaultQuery) prepareQuery(ctx context.Context) error {
	for _, f := range cfq.fields {
		if !cabinetfault.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cfq.path != nil {
		prev, err := cfq.path(ctx)
		if err != nil {
			return err
		}
		cfq.sql = prev
	}
	return nil
}

func (cfq *CabinetFaultQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*CabinetFault, error) {
	var (
		nodes       = []*CabinetFault{}
		_spec       = cfq.querySpec()
		loadedTypes = [4]bool{
			cfq.withCity != nil,
			cfq.withBranch != nil,
			cfq.withCabinet != nil,
			cfq.withRider != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*CabinetFault).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &CabinetFault{config: cfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cfq.modifiers) > 0 {
		_spec.Modifiers = cfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := cfq.withCity; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*CabinetFault)
		for i := range nodes {
			fk := nodes[i].CityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(city.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.City = n
			}
		}
	}

	if query := cfq.withBranch; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*CabinetFault)
		for i := range nodes {
			fk := nodes[i].BranchID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(branch.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "branch_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Branch = n
			}
		}
	}

	if query := cfq.withCabinet; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*CabinetFault)
		for i := range nodes {
			fk := nodes[i].CabinetID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(cabinet.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Cabinet = n
			}
		}
	}

	if query := cfq.withRider; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*CabinetFault)
		for i := range nodes {
			fk := nodes[i].RiderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(rider.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rider = n
			}
		}
	}

	return nodes, nil
}

func (cfq *CabinetFaultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cfq.querySpec()
	if len(cfq.modifiers) > 0 {
		_spec.Modifiers = cfq.modifiers
	}
	_spec.Node.Columns = cfq.fields
	if len(cfq.fields) > 0 {
		_spec.Unique = cfq.unique != nil && *cfq.unique
	}
	return sqlgraph.CountNodes(ctx, cfq.driver, _spec)
}

func (cfq *CabinetFaultQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := cfq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (cfq *CabinetFaultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cabinetfault.Table,
			Columns: cabinetfault.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetfault.FieldID,
			},
		},
		From:   cfq.sql,
		Unique: true,
	}
	if unique := cfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := cfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cabinetfault.FieldID)
		for i := range fields {
			if fields[i] != cabinetfault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cfq *CabinetFaultQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cfq.driver.Dialect())
	t1 := builder.Table(cabinetfault.Table)
	columns := cfq.fields
	if len(columns) == 0 {
		columns = cabinetfault.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cfq.sql != nil {
		selector = cfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cfq.unique != nil && *cfq.unique {
		selector.Distinct()
	}
	for _, m := range cfq.modifiers {
		m(selector)
	}
	for _, p := range cfq.predicates {
		p(selector)
	}
	for _, p := range cfq.order {
		p(selector)
	}
	if offset := cfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cfq *CabinetFaultQuery) Modify(modifiers ...func(s *sql.Selector)) *CabinetFaultSelect {
	cfq.modifiers = append(cfq.modifiers, modifiers...)
	return cfq.Select()
}

// CabinetFaultGroupBy is the group-by builder for CabinetFault entities.
type CabinetFaultGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cfgb *CabinetFaultGroupBy) Aggregate(fns ...AggregateFunc) *CabinetFaultGroupBy {
	cfgb.fns = append(cfgb.fns, fns...)
	return cfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (cfgb *CabinetFaultGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := cfgb.path(ctx)
	if err != nil {
		return err
	}
	cfgb.sql = query
	return cfgb.sqlScan(ctx, v)
}

func (cfgb *CabinetFaultGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range cfgb.fields {
		if !cabinetfault.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := cfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cfgb *CabinetFaultGroupBy) sqlQuery() *sql.Selector {
	selector := cfgb.sql.Select()
	aggregation := make([]string, 0, len(cfgb.fns))
	for _, fn := range cfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(cfgb.fields)+len(cfgb.fns))
		for _, f := range cfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(cfgb.fields...)...)
}

// CabinetFaultSelect is the builder for selecting fields of CabinetFault entities.
type CabinetFaultSelect struct {
	*CabinetFaultQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cfs *CabinetFaultSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cfs.prepareQuery(ctx); err != nil {
		return err
	}
	cfs.sql = cfs.CabinetFaultQuery.sqlQuery(ctx)
	return cfs.sqlScan(ctx, v)
}

func (cfs *CabinetFaultSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cfs.sql.Query()
	if err := cfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cfs *CabinetFaultSelect) Modify(modifiers ...func(s *sql.Selector)) *CabinetFaultSelect {
	cfs.modifiers = append(cfs.modifiers, modifiers...)
	return cfs
}
