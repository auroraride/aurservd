// Code generated by ent, DO NOT EDIT.

package subscribesuspend

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscribesuspend type in the database.
	Label = "subscribe_suspend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldPauseID holds the string denoting the pause_id field in the database.
	FieldPauseID = "pause_id"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldEndReason holds the string denoting the end_reason field in the database.
	FieldEndReason = "end_reason"
	// FieldEndModifier holds the string denoting the end_modifier field in the database.
	FieldEndModifier = "end_modifier"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgePause holds the string denoting the pause edge name in mutations.
	EdgePause = "pause"
	// Table holds the table name of the subscribesuspend in the database.
	Table = "subscribe_suspend"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "subscribe_suspend"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "subscribe_suspend"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "subscribe_suspend"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// PauseTable is the table that holds the pause relation/edge.
	PauseTable = "subscribe_suspend"
	// PauseInverseTable is the table name for the SubscribePause entity.
	// It exists in this package in order to avoid circular dependency with the "subscribepause" package.
	PauseInverseTable = "subscribe_pause"
	// PauseColumn is the table column denoting the pause relation/edge.
	PauseColumn = "pause_id"
)

// Columns holds all SQL columns for subscribesuspend fields.
var Columns = []string{
	FieldID,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldRiderID,
	FieldSubscribeID,
	FieldPauseID,
	FieldDays,
	FieldStartAt,
	FieldEndAt,
	FieldEndReason,
	FieldEndModifier,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultDays holds the default value on creation for the "days" field.
	DefaultDays int
)

// OrderOption defines the ordering options for the SubscribeSuspend queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByPauseID orders the results by the pause_id field.
func ByPauseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPauseID, opts...).ToFunc()
}

// ByDays orders the results by the days field.
func ByDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDays, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByEndReason orders the results by the end_reason field.
func ByEndReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndReason, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByPauseField orders the results by pause field.
func ByPauseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPauseStep(), sql.OrderByField(field, opts...))
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubscribeTable, SubscribeColumn),
	)
}
func newPauseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PauseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PauseTable, PauseColumn),
	)
}
