// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the plan type in the database.
	Label = "plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStart holds the string denoting the start field in the database.
	FieldStart = "start"
	// FieldEnd holds the string denoting the end field in the database.
	FieldEnd = "end"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldCommission holds the string denoting the commission field in the database.
	FieldCommission = "commission"
	// FieldOriginal holds the string denoting the original field in the database.
	FieldOriginal = "original"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldParentID holds the string denoting the parent_id field in the database.
	FieldParentID = "parent_id"
	// FieldDiscountNewly holds the string denoting the discount_newly field in the database.
	FieldDiscountNewly = "discount_newly"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldIntelligent holds the string denoting the intelligent field in the database.
	FieldIntelligent = "intelligent"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeCities holds the string denoting the cities edge name in mutations.
	EdgeCities = "cities"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeComplexes holds the string denoting the complexes edge name in mutations.
	EdgeComplexes = "complexes"
	// EdgeCommissions holds the string denoting the commissions edge name in mutations.
	EdgeCommissions = "commissions"
	// Table holds the table name of the plan in the database.
	Table = "plan"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "plan"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// CitiesTable is the table that holds the cities relation/edge. The primary key declared below.
	CitiesTable = "plan_cities"
	// CitiesInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CitiesInverseTable = "city"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "plan"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_id"
	// ComplexesTable is the table that holds the complexes relation/edge.
	ComplexesTable = "plan"
	// ComplexesColumn is the table column denoting the complexes relation/edge.
	ComplexesColumn = "parent_id"
	// CommissionsTable is the table that holds the commissions relation/edge.
	CommissionsTable = "promotion_commission_plan"
	// CommissionsInverseTable is the table name for the PromotionCommissionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "promotioncommissionplan" package.
	CommissionsInverseTable = "promotion_commission_plan"
	// CommissionsColumn is the table column denoting the commissions relation/edge.
	CommissionsColumn = "plan_id"
)

// Columns holds all SQL columns for plan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldBrandID,
	FieldModel,
	FieldEnable,
	FieldType,
	FieldName,
	FieldStart,
	FieldEnd,
	FieldPrice,
	FieldDays,
	FieldCommission,
	FieldOriginal,
	FieldDesc,
	FieldParentID,
	FieldDiscountNewly,
	FieldNotes,
	FieldIntelligent,
}

var (
	// CitiesPrimaryKey and CitiesColumn2 are the table columns denoting the
	// primary key for the cities relation (M2M).
	CitiesPrimaryKey = []string{"plan_id", "city_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
	// DefaultDiscountNewly holds the default value on creation for the "discount_newly" field.
	DefaultDiscountNewly float64
	// DefaultIntelligent holds the default value on creation for the "intelligent" field.
	DefaultIntelligent bool
)

// OrderOption defines the ordering options for the Plan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStart orders the results by the start field.
func ByStart(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStart, opts...).ToFunc()
}

// ByEnd orders the results by the end field.
func ByEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnd, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByDays orders the results by the days field.
func ByDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDays, opts...).ToFunc()
}

// ByCommission orders the results by the commission field.
func ByCommission(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommission, opts...).ToFunc()
}

// ByOriginal orders the results by the original field.
func ByOriginal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginal, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByParentID orders the results by the parent_id field.
func ByParentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentID, opts...).ToFunc()
}

// ByDiscountNewly orders the results by the discount_newly field.
func ByDiscountNewly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDiscountNewly, opts...).ToFunc()
}

// ByIntelligent orders the results by the intelligent field.
func ByIntelligent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntelligent, opts...).ToFunc()
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByCitiesCount orders the results by cities count.
func ByCitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCitiesStep(), opts...)
	}
}

// ByCities orders the results by cities terms.
func ByCities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByComplexesCount orders the results by complexes count.
func ByComplexesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newComplexesStep(), opts...)
	}
}

// ByComplexes orders the results by complexes terms.
func ByComplexes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComplexesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionsCount orders the results by commissions count.
func ByCommissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommissionsStep(), opts...)
	}
}

// ByCommissions orders the results by commissions terms.
func ByCommissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
	)
}
func newCitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CitiesTable, CitiesPrimaryKey...),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newComplexesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ComplexesTable, ComplexesColumn),
	)
}
func newCommissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommissionsTable, CommissionsColumn),
	)
}
