// Code generated by ent, DO NOT EDIT.

package plan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRemark, v))
}

// AgreementID applies equality check predicate on the "agreement_id" field. It's identical to AgreementIDEQ.
func AgreementID(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldAgreementID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldModel, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEnable, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldType, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStart, v))
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEnd, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPrice, v))
}

// Days applies equality check predicate on the "days" field. It's identical to DaysEQ.
func Days(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDays, v))
}

// Commission applies equality check predicate on the "commission" field. It's identical to CommissionEQ.
func Commission(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCommission, v))
}

// Original applies equality check predicate on the "original" field. It's identical to OriginalEQ.
func Original(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOriginal, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDesc, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldParentID, v))
}

// DiscountNewly applies equality check predicate on the "discount_newly" field. It's identical to DiscountNewlyEQ.
func DiscountNewly(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDiscountNewly, v))
}

// Intelligent applies equality check predicate on the "intelligent" field. It's identical to IntelligentEQ.
func Intelligent(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldIntelligent, v))
}

// Deposit applies equality check predicate on the "deposit" field. It's identical to DepositEQ.
func Deposit(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeposit, v))
}

// DepositAmount applies equality check predicate on the "deposit_amount" field. It's identical to DepositAmountEQ.
func DepositAmount(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositAmount, v))
}

// DepositWechatPayscore applies equality check predicate on the "deposit_wechat_payscore" field. It's identical to DepositWechatPayscoreEQ.
func DepositWechatPayscore(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositWechatPayscore, v))
}

// DepositAlipayAuthFreeze applies equality check predicate on the "deposit_alipay_auth_freeze" field. It's identical to DepositAlipayAuthFreezeEQ.
func DepositAlipayAuthFreeze(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositAlipayAuthFreeze, v))
}

// DepositContract applies equality check predicate on the "deposit_contract" field. It's identical to DepositContractEQ.
func DepositContract(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositContract, v))
}

// DepositPay applies equality check predicate on the "deposit_pay" field. It's identical to DepositPayEQ.
func DepositPay(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositPay, v))
}

// RtoDays applies equality check predicate on the "rto_days" field. It's identical to RtoDaysEQ.
func RtoDays(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRtoDays, v))
}

// OverdueFee applies equality check predicate on the "overdue_fee" field. It's identical to OverdueFeeEQ.
func OverdueFee(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOverdueFee, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldBrandID, v))
}

// Daily applies equality check predicate on the "daily" field. It's identical to DailyEQ.
func Daily(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDaily, v))
}

// IntroductionImage applies equality check predicate on the "introduction_image" field. It's identical to IntroductionImageEQ.
func IntroductionImage(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldIntroductionImage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldRemark, v))
}

// AgreementIDEQ applies the EQ predicate on the "agreement_id" field.
func AgreementIDEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldAgreementID, v))
}

// AgreementIDNEQ applies the NEQ predicate on the "agreement_id" field.
func AgreementIDNEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldAgreementID, v))
}

// AgreementIDIn applies the In predicate on the "agreement_id" field.
func AgreementIDIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldAgreementID, vs...))
}

// AgreementIDNotIn applies the NotIn predicate on the "agreement_id" field.
func AgreementIDNotIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldAgreementID, vs...))
}

// AgreementIDIsNil applies the IsNil predicate on the "agreement_id" field.
func AgreementIDIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldAgreementID))
}

// AgreementIDNotNil applies the NotNil predicate on the "agreement_id" field.
func AgreementIDNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldAgreementID))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldModel, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldEnable, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...uint8) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...uint8) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v uint8) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldType, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldName, v))
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldStart, v))
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldStart, v))
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldStart, vs...))
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldStart, vs...))
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldStart, v))
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldStart, v))
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldStart, v))
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldStart, v))
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldEnd, v))
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldEnd, v))
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldEnd, vs...))
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldEnd, vs...))
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldEnd, v))
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldEnd, v))
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldEnd, v))
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v time.Time) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldEnd, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldPrice, v))
}

// DaysEQ applies the EQ predicate on the "days" field.
func DaysEQ(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDays, v))
}

// DaysNEQ applies the NEQ predicate on the "days" field.
func DaysNEQ(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDays, v))
}

// DaysIn applies the In predicate on the "days" field.
func DaysIn(vs ...uint) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDays, vs...))
}

// DaysNotIn applies the NotIn predicate on the "days" field.
func DaysNotIn(vs ...uint) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDays, vs...))
}

// DaysGT applies the GT predicate on the "days" field.
func DaysGT(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDays, v))
}

// DaysGTE applies the GTE predicate on the "days" field.
func DaysGTE(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDays, v))
}

// DaysLT applies the LT predicate on the "days" field.
func DaysLT(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDays, v))
}

// DaysLTE applies the LTE predicate on the "days" field.
func DaysLTE(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDays, v))
}

// CommissionEQ applies the EQ predicate on the "commission" field.
func CommissionEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldCommission, v))
}

// CommissionNEQ applies the NEQ predicate on the "commission" field.
func CommissionNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldCommission, v))
}

// CommissionIn applies the In predicate on the "commission" field.
func CommissionIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldCommission, vs...))
}

// CommissionNotIn applies the NotIn predicate on the "commission" field.
func CommissionNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldCommission, vs...))
}

// CommissionGT applies the GT predicate on the "commission" field.
func CommissionGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldCommission, v))
}

// CommissionGTE applies the GTE predicate on the "commission" field.
func CommissionGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldCommission, v))
}

// CommissionLT applies the LT predicate on the "commission" field.
func CommissionLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldCommission, v))
}

// CommissionLTE applies the LTE predicate on the "commission" field.
func CommissionLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldCommission, v))
}

// OriginalEQ applies the EQ predicate on the "original" field.
func OriginalEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOriginal, v))
}

// OriginalNEQ applies the NEQ predicate on the "original" field.
func OriginalNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldOriginal, v))
}

// OriginalIn applies the In predicate on the "original" field.
func OriginalIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldOriginal, vs...))
}

// OriginalNotIn applies the NotIn predicate on the "original" field.
func OriginalNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldOriginal, vs...))
}

// OriginalGT applies the GT predicate on the "original" field.
func OriginalGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldOriginal, v))
}

// OriginalGTE applies the GTE predicate on the "original" field.
func OriginalGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldOriginal, v))
}

// OriginalLT applies the LT predicate on the "original" field.
func OriginalLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldOriginal, v))
}

// OriginalLTE applies the LTE predicate on the "original" field.
func OriginalLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldOriginal, v))
}

// OriginalIsNil applies the IsNil predicate on the "original" field.
func OriginalIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldOriginal))
}

// OriginalNotNil applies the NotNil predicate on the "original" field.
func OriginalNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldOriginal))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldDesc, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDesc))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldDesc, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldParentID))
}

// DiscountNewlyEQ applies the EQ predicate on the "discount_newly" field.
func DiscountNewlyEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDiscountNewly, v))
}

// DiscountNewlyNEQ applies the NEQ predicate on the "discount_newly" field.
func DiscountNewlyNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDiscountNewly, v))
}

// DiscountNewlyIn applies the In predicate on the "discount_newly" field.
func DiscountNewlyIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDiscountNewly, vs...))
}

// DiscountNewlyNotIn applies the NotIn predicate on the "discount_newly" field.
func DiscountNewlyNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDiscountNewly, vs...))
}

// DiscountNewlyGT applies the GT predicate on the "discount_newly" field.
func DiscountNewlyGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDiscountNewly, v))
}

// DiscountNewlyGTE applies the GTE predicate on the "discount_newly" field.
func DiscountNewlyGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDiscountNewly, v))
}

// DiscountNewlyLT applies the LT predicate on the "discount_newly" field.
func DiscountNewlyLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDiscountNewly, v))
}

// DiscountNewlyLTE applies the LTE predicate on the "discount_newly" field.
func DiscountNewlyLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDiscountNewly, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldNotes))
}

// IntelligentEQ applies the EQ predicate on the "intelligent" field.
func IntelligentEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldIntelligent, v))
}

// IntelligentNEQ applies the NEQ predicate on the "intelligent" field.
func IntelligentNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldIntelligent, v))
}

// DepositEQ applies the EQ predicate on the "deposit" field.
func DepositEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDeposit, v))
}

// DepositNEQ applies the NEQ predicate on the "deposit" field.
func DepositNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDeposit, v))
}

// DepositAmountEQ applies the EQ predicate on the "deposit_amount" field.
func DepositAmountEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositAmount, v))
}

// DepositAmountNEQ applies the NEQ predicate on the "deposit_amount" field.
func DepositAmountNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDepositAmount, v))
}

// DepositAmountIn applies the In predicate on the "deposit_amount" field.
func DepositAmountIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldDepositAmount, vs...))
}

// DepositAmountNotIn applies the NotIn predicate on the "deposit_amount" field.
func DepositAmountNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldDepositAmount, vs...))
}

// DepositAmountGT applies the GT predicate on the "deposit_amount" field.
func DepositAmountGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldDepositAmount, v))
}

// DepositAmountGTE applies the GTE predicate on the "deposit_amount" field.
func DepositAmountGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldDepositAmount, v))
}

// DepositAmountLT applies the LT predicate on the "deposit_amount" field.
func DepositAmountLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldDepositAmount, v))
}

// DepositAmountLTE applies the LTE predicate on the "deposit_amount" field.
func DepositAmountLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldDepositAmount, v))
}

// DepositAmountIsNil applies the IsNil predicate on the "deposit_amount" field.
func DepositAmountIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDepositAmount))
}

// DepositAmountNotNil applies the NotNil predicate on the "deposit_amount" field.
func DepositAmountNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDepositAmount))
}

// DepositWechatPayscoreEQ applies the EQ predicate on the "deposit_wechat_payscore" field.
func DepositWechatPayscoreEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositWechatPayscore, v))
}

// DepositWechatPayscoreNEQ applies the NEQ predicate on the "deposit_wechat_payscore" field.
func DepositWechatPayscoreNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDepositWechatPayscore, v))
}

// DepositWechatPayscoreIsNil applies the IsNil predicate on the "deposit_wechat_payscore" field.
func DepositWechatPayscoreIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDepositWechatPayscore))
}

// DepositWechatPayscoreNotNil applies the NotNil predicate on the "deposit_wechat_payscore" field.
func DepositWechatPayscoreNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDepositWechatPayscore))
}

// DepositAlipayAuthFreezeEQ applies the EQ predicate on the "deposit_alipay_auth_freeze" field.
func DepositAlipayAuthFreezeEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositAlipayAuthFreeze, v))
}

// DepositAlipayAuthFreezeNEQ applies the NEQ predicate on the "deposit_alipay_auth_freeze" field.
func DepositAlipayAuthFreezeNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDepositAlipayAuthFreeze, v))
}

// DepositAlipayAuthFreezeIsNil applies the IsNil predicate on the "deposit_alipay_auth_freeze" field.
func DepositAlipayAuthFreezeIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDepositAlipayAuthFreeze))
}

// DepositAlipayAuthFreezeNotNil applies the NotNil predicate on the "deposit_alipay_auth_freeze" field.
func DepositAlipayAuthFreezeNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDepositAlipayAuthFreeze))
}

// DepositContractEQ applies the EQ predicate on the "deposit_contract" field.
func DepositContractEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositContract, v))
}

// DepositContractNEQ applies the NEQ predicate on the "deposit_contract" field.
func DepositContractNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDepositContract, v))
}

// DepositContractIsNil applies the IsNil predicate on the "deposit_contract" field.
func DepositContractIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDepositContract))
}

// DepositContractNotNil applies the NotNil predicate on the "deposit_contract" field.
func DepositContractNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDepositContract))
}

// DepositPayEQ applies the EQ predicate on the "deposit_pay" field.
func DepositPayEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDepositPay, v))
}

// DepositPayNEQ applies the NEQ predicate on the "deposit_pay" field.
func DepositPayNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDepositPay, v))
}

// DepositPayIsNil applies the IsNil predicate on the "deposit_pay" field.
func DepositPayIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldDepositPay))
}

// DepositPayNotNil applies the NotNil predicate on the "deposit_pay" field.
func DepositPayNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldDepositPay))
}

// RtoDaysEQ applies the EQ predicate on the "rto_days" field.
func RtoDaysEQ(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldRtoDays, v))
}

// RtoDaysNEQ applies the NEQ predicate on the "rto_days" field.
func RtoDaysNEQ(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldRtoDays, v))
}

// RtoDaysIn applies the In predicate on the "rto_days" field.
func RtoDaysIn(vs ...uint) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldRtoDays, vs...))
}

// RtoDaysNotIn applies the NotIn predicate on the "rto_days" field.
func RtoDaysNotIn(vs ...uint) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldRtoDays, vs...))
}

// RtoDaysGT applies the GT predicate on the "rto_days" field.
func RtoDaysGT(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldRtoDays, v))
}

// RtoDaysGTE applies the GTE predicate on the "rto_days" field.
func RtoDaysGTE(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldRtoDays, v))
}

// RtoDaysLT applies the LT predicate on the "rto_days" field.
func RtoDaysLT(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldRtoDays, v))
}

// RtoDaysLTE applies the LTE predicate on the "rto_days" field.
func RtoDaysLTE(v uint) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldRtoDays, v))
}

// RtoDaysIsNil applies the IsNil predicate on the "rto_days" field.
func RtoDaysIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldRtoDays))
}

// RtoDaysNotNil applies the NotNil predicate on the "rto_days" field.
func RtoDaysNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldRtoDays))
}

// OverdueFeeEQ applies the EQ predicate on the "overdue_fee" field.
func OverdueFeeEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldOverdueFee, v))
}

// OverdueFeeNEQ applies the NEQ predicate on the "overdue_fee" field.
func OverdueFeeNEQ(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldOverdueFee, v))
}

// OverdueFeeIn applies the In predicate on the "overdue_fee" field.
func OverdueFeeIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldOverdueFee, vs...))
}

// OverdueFeeNotIn applies the NotIn predicate on the "overdue_fee" field.
func OverdueFeeNotIn(vs ...float64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldOverdueFee, vs...))
}

// OverdueFeeGT applies the GT predicate on the "overdue_fee" field.
func OverdueFeeGT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldOverdueFee, v))
}

// OverdueFeeGTE applies the GTE predicate on the "overdue_fee" field.
func OverdueFeeGTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldOverdueFee, v))
}

// OverdueFeeLT applies the LT predicate on the "overdue_fee" field.
func OverdueFeeLT(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldOverdueFee, v))
}

// OverdueFeeLTE applies the LTE predicate on the "overdue_fee" field.
func OverdueFeeLTE(v float64) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldOverdueFee, v))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldBrandID))
}

// DailyEQ applies the EQ predicate on the "daily" field.
func DailyEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldDaily, v))
}

// DailyNEQ applies the NEQ predicate on the "daily" field.
func DailyNEQ(v bool) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldDaily, v))
}

// IntroductionImageEQ applies the EQ predicate on the "introduction_image" field.
func IntroductionImageEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEQ(FieldIntroductionImage, v))
}

// IntroductionImageNEQ applies the NEQ predicate on the "introduction_image" field.
func IntroductionImageNEQ(v string) predicate.Plan {
	return predicate.Plan(sql.FieldNEQ(FieldIntroductionImage, v))
}

// IntroductionImageIn applies the In predicate on the "introduction_image" field.
func IntroductionImageIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldIn(FieldIntroductionImage, vs...))
}

// IntroductionImageNotIn applies the NotIn predicate on the "introduction_image" field.
func IntroductionImageNotIn(vs ...string) predicate.Plan {
	return predicate.Plan(sql.FieldNotIn(FieldIntroductionImage, vs...))
}

// IntroductionImageGT applies the GT predicate on the "introduction_image" field.
func IntroductionImageGT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGT(FieldIntroductionImage, v))
}

// IntroductionImageGTE applies the GTE predicate on the "introduction_image" field.
func IntroductionImageGTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldGTE(FieldIntroductionImage, v))
}

// IntroductionImageLT applies the LT predicate on the "introduction_image" field.
func IntroductionImageLT(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLT(FieldIntroductionImage, v))
}

// IntroductionImageLTE applies the LTE predicate on the "introduction_image" field.
func IntroductionImageLTE(v string) predicate.Plan {
	return predicate.Plan(sql.FieldLTE(FieldIntroductionImage, v))
}

// IntroductionImageContains applies the Contains predicate on the "introduction_image" field.
func IntroductionImageContains(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContains(FieldIntroductionImage, v))
}

// IntroductionImageHasPrefix applies the HasPrefix predicate on the "introduction_image" field.
func IntroductionImageHasPrefix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasPrefix(FieldIntroductionImage, v))
}

// IntroductionImageHasSuffix applies the HasSuffix predicate on the "introduction_image" field.
func IntroductionImageHasSuffix(v string) predicate.Plan {
	return predicate.Plan(sql.FieldHasSuffix(FieldIntroductionImage, v))
}

// IntroductionImageIsNil applies the IsNil predicate on the "introduction_image" field.
func IntroductionImageIsNil() predicate.Plan {
	return predicate.Plan(sql.FieldIsNull(FieldIntroductionImage))
}

// IntroductionImageNotNil applies the NotNil predicate on the "introduction_image" field.
func IntroductionImageNotNil() predicate.Plan {
	return predicate.Plan(sql.FieldNotNull(FieldIntroductionImage))
}

// IntroductionImageEqualFold applies the EqualFold predicate on the "introduction_image" field.
func IntroductionImageEqualFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldEqualFold(FieldIntroductionImage, v))
}

// IntroductionImageContainsFold applies the ContainsFold predicate on the "introduction_image" field.
func IntroductionImageContainsFold(v string) predicate.Plan {
	return predicate.Plan(sql.FieldContainsFold(FieldIntroductionImage, v))
}

// HasAgreement applies the HasEdge predicate on the "agreement" edge.
func HasAgreement() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgreementTable, AgreementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgreementWith applies the HasEdge predicate on the "agreement" edge with a given conditions (other predicates).
func HasAgreementWith(preds ...predicate.Agreement) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newAgreementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCities applies the HasEdge predicate on the "cities" edge.
func HasCities() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CitiesTable, CitiesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCitiesWith applies the HasEdge predicate on the "cities" edge with a given conditions (other predicates).
func HasCitiesWith(preds ...predicate.City) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newCitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Plan) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasComplexes applies the HasEdge predicate on the "complexes" edge.
func HasComplexes() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ComplexesTable, ComplexesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComplexesWith applies the HasEdge predicate on the "complexes" edge with a given conditions (other predicates).
func HasComplexesWith(preds ...predicate.Plan) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newComplexesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCommissions applies the HasEdge predicate on the "commissions" edge.
func HasCommissions() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommissionsTable, CommissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommissionsWith applies the HasEdge predicate on the "commissions" edge with a given conditions (other predicates).
func HasCommissionsWith(preds ...predicate.PromotionCommissionPlan) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newCommissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Plan {
	return predicate.Plan(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Plan) predicate.Plan {
	return predicate.Plan(sql.NotPredicates(p))
}
