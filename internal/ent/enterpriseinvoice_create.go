// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseinvoice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// EnterpriseInvoiceCreate is the builder for creating a EnterpriseInvoice entity.
type EnterpriseInvoiceCreate struct {
	config
	mutation *EnterpriseInvoiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (eic *EnterpriseInvoiceCreate) SetCreatedAt(t time.Time) *EnterpriseInvoiceCreate {
	eic.mutation.SetCreatedAt(t)
	return eic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eic *EnterpriseInvoiceCreate) SetNillableCreatedAt(t *time.Time) *EnterpriseInvoiceCreate {
	if t != nil {
		eic.SetCreatedAt(*t)
	}
	return eic
}

// SetUpdatedAt sets the "updated_at" field.
func (eic *EnterpriseInvoiceCreate) SetUpdatedAt(t time.Time) *EnterpriseInvoiceCreate {
	eic.mutation.SetUpdatedAt(t)
	return eic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eic *EnterpriseInvoiceCreate) SetNillableUpdatedAt(t *time.Time) *EnterpriseInvoiceCreate {
	if t != nil {
		eic.SetUpdatedAt(*t)
	}
	return eic
}

// SetDeletedAt sets the "deleted_at" field.
func (eic *EnterpriseInvoiceCreate) SetDeletedAt(t time.Time) *EnterpriseInvoiceCreate {
	eic.mutation.SetDeletedAt(t)
	return eic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (eic *EnterpriseInvoiceCreate) SetNillableDeletedAt(t *time.Time) *EnterpriseInvoiceCreate {
	if t != nil {
		eic.SetDeletedAt(*t)
	}
	return eic
}

// SetCreator sets the "creator" field.
func (eic *EnterpriseInvoiceCreate) SetCreator(m *model.Modifier) *EnterpriseInvoiceCreate {
	eic.mutation.SetCreator(m)
	return eic
}

// SetLastModifier sets the "last_modifier" field.
func (eic *EnterpriseInvoiceCreate) SetLastModifier(m *model.Modifier) *EnterpriseInvoiceCreate {
	eic.mutation.SetLastModifier(m)
	return eic
}

// SetRemark sets the "remark" field.
func (eic *EnterpriseInvoiceCreate) SetRemark(s string) *EnterpriseInvoiceCreate {
	eic.mutation.SetRemark(s)
	return eic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eic *EnterpriseInvoiceCreate) SetNillableRemark(s *string) *EnterpriseInvoiceCreate {
	if s != nil {
		eic.SetRemark(*s)
	}
	return eic
}

// SetStationID sets the "station_id" field.
func (eic *EnterpriseInvoiceCreate) SetStationID(u uint64) *EnterpriseInvoiceCreate {
	eic.mutation.SetStationID(u)
	return eic
}

// SetEnterpriseID sets the "enterprise_id" field.
func (eic *EnterpriseInvoiceCreate) SetEnterpriseID(u uint64) *EnterpriseInvoiceCreate {
	eic.mutation.SetEnterpriseID(u)
	return eic
}

// SetRiderID sets the "rider_id" field.
func (eic *EnterpriseInvoiceCreate) SetRiderID(u uint64) *EnterpriseInvoiceCreate {
	eic.mutation.SetRiderID(u)
	return eic
}

// SetPrice sets the "price" field.
func (eic *EnterpriseInvoiceCreate) SetPrice(f float64) *EnterpriseInvoiceCreate {
	eic.mutation.SetPrice(f)
	return eic
}

// SetStatementID sets the "statement_id" field.
func (eic *EnterpriseInvoiceCreate) SetStatementID(u uint64) *EnterpriseInvoiceCreate {
	eic.mutation.SetStatementID(u)
	return eic
}

// SetNillableStatementID sets the "statement_id" field if the given value is not nil.
func (eic *EnterpriseInvoiceCreate) SetNillableStatementID(u *uint64) *EnterpriseInvoiceCreate {
	if u != nil {
		eic.SetStatementID(*u)
	}
	return eic
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (eic *EnterpriseInvoiceCreate) SetStation(e *EnterpriseStation) *EnterpriseInvoiceCreate {
	return eic.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (eic *EnterpriseInvoiceCreate) SetEnterprise(e *Enterprise) *EnterpriseInvoiceCreate {
	return eic.SetEnterpriseID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eic *EnterpriseInvoiceCreate) SetRider(r *Rider) *EnterpriseInvoiceCreate {
	return eic.SetRiderID(r.ID)
}

// SetStatement sets the "statement" edge to the EnterpriseStatement entity.
func (eic *EnterpriseInvoiceCreate) SetStatement(e *EnterpriseStatement) *EnterpriseInvoiceCreate {
	return eic.SetStatementID(e.ID)
}

// Mutation returns the EnterpriseInvoiceMutation object of the builder.
func (eic *EnterpriseInvoiceCreate) Mutation() *EnterpriseInvoiceMutation {
	return eic.mutation
}

// Save creates the EnterpriseInvoice in the database.
func (eic *EnterpriseInvoiceCreate) Save(ctx context.Context) (*EnterpriseInvoice, error) {
	var (
		err  error
		node *EnterpriseInvoice
	)
	if err := eic.defaults(); err != nil {
		return nil, err
	}
	if len(eic.hooks) == 0 {
		if err = eic.check(); err != nil {
			return nil, err
		}
		node, err = eic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnterpriseInvoiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eic.check(); err != nil {
				return nil, err
			}
			eic.mutation = mutation
			if node, err = eic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(eic.hooks) - 1; i >= 0; i-- {
			if eic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnterpriseInvoice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnterpriseInvoiceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (eic *EnterpriseInvoiceCreate) SaveX(ctx context.Context) *EnterpriseInvoice {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *EnterpriseInvoiceCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *EnterpriseInvoiceCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *EnterpriseInvoiceCreate) defaults() error {
	if _, ok := eic.mutation.CreatedAt(); !ok {
		if enterpriseinvoice.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseinvoice.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseinvoice.DefaultCreatedAt()
		eic.mutation.SetCreatedAt(v)
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		if enterpriseinvoice.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseinvoice.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseinvoice.DefaultUpdatedAt()
		eic.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eic *EnterpriseInvoiceCreate) check() error {
	if _, ok := eic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EnterpriseInvoice.created_at"`)}
	}
	if _, ok := eic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EnterpriseInvoice.updated_at"`)}
	}
	if _, ok := eic.mutation.StationID(); !ok {
		return &ValidationError{Name: "station_id", err: errors.New(`ent: missing required field "EnterpriseInvoice.station_id"`)}
	}
	if _, ok := eic.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise_id", err: errors.New(`ent: missing required field "EnterpriseInvoice.enterprise_id"`)}
	}
	if _, ok := eic.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "EnterpriseInvoice.rider_id"`)}
	}
	if _, ok := eic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "EnterpriseInvoice.price"`)}
	}
	if _, ok := eic.mutation.StationID(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required edge "EnterpriseInvoice.station"`)}
	}
	if _, ok := eic.mutation.EnterpriseID(); !ok {
		return &ValidationError{Name: "enterprise", err: errors.New(`ent: missing required edge "EnterpriseInvoice.enterprise"`)}
	}
	if _, ok := eic.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "EnterpriseInvoice.rider"`)}
	}
	return nil
}

func (eic *EnterpriseInvoiceCreate) sqlSave(ctx context.Context) (*EnterpriseInvoice, error) {
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (eic *EnterpriseInvoiceCreate) createSpec() (*EnterpriseInvoice, *sqlgraph.CreateSpec) {
	var (
		_node = &EnterpriseInvoice{config: eic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enterpriseinvoice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: enterpriseinvoice.FieldID,
			},
		}
	)
	_spec.OnConflict = eic.conflict
	if value, ok := eic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := eic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := eic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: enterpriseinvoice.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := eic.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterpriseinvoice.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := eic.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: enterpriseinvoice.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := eic.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: enterpriseinvoice.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := eic.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: enterpriseinvoice.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := eic.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.StationTable,
			Columns: []string{enterpriseinvoice.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseinvoice.EnterpriseTable,
			Columns: []string{enterpriseinvoice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.RiderTable,
			Columns: []string{enterpriseinvoice.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := eic.mutation.StatementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseinvoice.StatementTable,
			Columns: []string{enterpriseinvoice.StatementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprisestatement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatementID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseInvoice.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseInvoiceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (eic *EnterpriseInvoiceCreate) OnConflict(opts ...sql.ConflictOption) *EnterpriseInvoiceUpsertOne {
	eic.conflict = opts
	return &EnterpriseInvoiceUpsertOne{
		create: eic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseInvoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (eic *EnterpriseInvoiceCreate) OnConflictColumns(columns ...string) *EnterpriseInvoiceUpsertOne {
	eic.conflict = append(eic.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseInvoiceUpsertOne{
		create: eic,
	}
}

type (
	// EnterpriseInvoiceUpsertOne is the builder for "upsert"-ing
	//  one EnterpriseInvoice node.
	EnterpriseInvoiceUpsertOne struct {
		create *EnterpriseInvoiceCreate
	}

	// EnterpriseInvoiceUpsert is the "OnConflict" setter.
	EnterpriseInvoiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseInvoiceUpsert) SetCreatedAt(v time.Time) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateCreatedAt() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseInvoiceUpsert) SetUpdatedAt(v time.Time) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateUpdatedAt() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseInvoiceUpsert) SetDeletedAt(v time.Time) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateDeletedAt() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseInvoiceUpsert) ClearDeletedAt() *EnterpriseInvoiceUpsert {
	u.SetNull(enterpriseinvoice.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *EnterpriseInvoiceUpsert) SetCreator(v *model.Modifier) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateCreator() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseInvoiceUpsert) ClearCreator() *EnterpriseInvoiceUpsert {
	u.SetNull(enterpriseinvoice.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseInvoiceUpsert) SetLastModifier(v *model.Modifier) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateLastModifier() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseInvoiceUpsert) ClearLastModifier() *EnterpriseInvoiceUpsert {
	u.SetNull(enterpriseinvoice.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EnterpriseInvoiceUpsert) SetRemark(v string) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateRemark() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseInvoiceUpsert) ClearRemark() *EnterpriseInvoiceUpsert {
	u.SetNull(enterpriseinvoice.FieldRemark)
	return u
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseInvoiceUpsert) SetStationID(v uint64) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateStationID() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldStationID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseInvoiceUpsert) SetEnterpriseID(v uint64) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateEnterpriseID() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldEnterpriseID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseInvoiceUpsert) SetRiderID(v uint64) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateRiderID() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldRiderID)
	return u
}

// SetPrice sets the "price" field.
func (u *EnterpriseInvoiceUpsert) SetPrice(v float64) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdatePrice() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseInvoiceUpsert) AddPrice(v float64) *EnterpriseInvoiceUpsert {
	u.Add(enterpriseinvoice.FieldPrice, v)
	return u
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseInvoiceUpsert) SetStatementID(v uint64) *EnterpriseInvoiceUpsert {
	u.Set(enterpriseinvoice.FieldStatementID, v)
	return u
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsert) UpdateStatementID() *EnterpriseInvoiceUpsert {
	u.SetExcluded(enterpriseinvoice.FieldStatementID)
	return u
}

// ClearStatementID clears the value of the "statement_id" field.
func (u *EnterpriseInvoiceUpsert) ClearStatementID() *EnterpriseInvoiceUpsert {
	u.SetNull(enterpriseinvoice.FieldStatementID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EnterpriseInvoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseInvoiceUpsertOne) UpdateNewValues() *EnterpriseInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(enterpriseinvoice.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(enterpriseinvoice.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.EnterpriseInvoice.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *EnterpriseInvoiceUpsertOne) Ignore() *EnterpriseInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseInvoiceUpsertOne) DoNothing() *EnterpriseInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseInvoiceCreate.OnConflict
// documentation for more info.
func (u *EnterpriseInvoiceUpsertOne) Update(set func(*EnterpriseInvoiceUpsert)) *EnterpriseInvoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseInvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseInvoiceUpsertOne) SetCreatedAt(v time.Time) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateCreatedAt() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseInvoiceUpsertOne) SetUpdatedAt(v time.Time) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateUpdatedAt() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseInvoiceUpsertOne) SetDeletedAt(v time.Time) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateDeletedAt() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseInvoiceUpsertOne) ClearDeletedAt() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseInvoiceUpsertOne) SetCreator(v *model.Modifier) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateCreator() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseInvoiceUpsertOne) ClearCreator() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseInvoiceUpsertOne) SetLastModifier(v *model.Modifier) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateLastModifier() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseInvoiceUpsertOne) ClearLastModifier() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseInvoiceUpsertOne) SetRemark(v string) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateRemark() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseInvoiceUpsertOne) ClearRemark() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearRemark()
	})
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseInvoiceUpsertOne) SetStationID(v uint64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateStationID() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateStationID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseInvoiceUpsertOne) SetEnterpriseID(v uint64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateEnterpriseID() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseInvoiceUpsertOne) SetRiderID(v uint64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateRiderID() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateRiderID()
	})
}

// SetPrice sets the "price" field.
func (u *EnterpriseInvoiceUpsertOne) SetPrice(v float64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseInvoiceUpsertOne) AddPrice(v float64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdatePrice() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdatePrice()
	})
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseInvoiceUpsertOne) SetStatementID(v uint64) *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetStatementID(v)
	})
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertOne) UpdateStatementID() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateStatementID()
	})
}

// ClearStatementID clears the value of the "statement_id" field.
func (u *EnterpriseInvoiceUpsertOne) ClearStatementID() *EnterpriseInvoiceUpsertOne {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearStatementID()
	})
}

// Exec executes the query.
func (u *EnterpriseInvoiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseInvoiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseInvoiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnterpriseInvoiceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnterpriseInvoiceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnterpriseInvoiceCreateBulk is the builder for creating many EnterpriseInvoice entities in bulk.
type EnterpriseInvoiceCreateBulk struct {
	config
	builders []*EnterpriseInvoiceCreate
	conflict []sql.ConflictOption
}

// Save creates the EnterpriseInvoice entities in the database.
func (eicb *EnterpriseInvoiceCreateBulk) Save(ctx context.Context) ([]*EnterpriseInvoice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*EnterpriseInvoice, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnterpriseInvoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = eicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *EnterpriseInvoiceCreateBulk) SaveX(ctx context.Context) []*EnterpriseInvoice {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *EnterpriseInvoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *EnterpriseInvoiceCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnterpriseInvoice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnterpriseInvoiceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (eicb *EnterpriseInvoiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnterpriseInvoiceUpsertBulk {
	eicb.conflict = opts
	return &EnterpriseInvoiceUpsertBulk{
		create: eicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnterpriseInvoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (eicb *EnterpriseInvoiceCreateBulk) OnConflictColumns(columns ...string) *EnterpriseInvoiceUpsertBulk {
	eicb.conflict = append(eicb.conflict, sql.ConflictColumns(columns...))
	return &EnterpriseInvoiceUpsertBulk{
		create: eicb,
	}
}

// EnterpriseInvoiceUpsertBulk is the builder for "upsert"-ing
// a bulk of EnterpriseInvoice nodes.
type EnterpriseInvoiceUpsertBulk struct {
	create *EnterpriseInvoiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnterpriseInvoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *EnterpriseInvoiceUpsertBulk) UpdateNewValues() *EnterpriseInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(enterpriseinvoice.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(enterpriseinvoice.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnterpriseInvoice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *EnterpriseInvoiceUpsertBulk) Ignore() *EnterpriseInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnterpriseInvoiceUpsertBulk) DoNothing() *EnterpriseInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnterpriseInvoiceCreateBulk.OnConflict
// documentation for more info.
func (u *EnterpriseInvoiceUpsertBulk) Update(set func(*EnterpriseInvoiceUpsert)) *EnterpriseInvoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnterpriseInvoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EnterpriseInvoiceUpsertBulk) SetCreatedAt(v time.Time) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateCreatedAt() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EnterpriseInvoiceUpsertBulk) SetUpdatedAt(v time.Time) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateUpdatedAt() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EnterpriseInvoiceUpsertBulk) SetDeletedAt(v time.Time) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateDeletedAt() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EnterpriseInvoiceUpsertBulk) ClearDeletedAt() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *EnterpriseInvoiceUpsertBulk) SetCreator(v *model.Modifier) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateCreator() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *EnterpriseInvoiceUpsertBulk) ClearCreator() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EnterpriseInvoiceUpsertBulk) SetLastModifier(v *model.Modifier) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateLastModifier() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EnterpriseInvoiceUpsertBulk) ClearLastModifier() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EnterpriseInvoiceUpsertBulk) SetRemark(v string) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateRemark() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EnterpriseInvoiceUpsertBulk) ClearRemark() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearRemark()
	})
}

// SetStationID sets the "station_id" field.
func (u *EnterpriseInvoiceUpsertBulk) SetStationID(v uint64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateStationID() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateStationID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *EnterpriseInvoiceUpsertBulk) SetEnterpriseID(v uint64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateEnterpriseID() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateEnterpriseID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *EnterpriseInvoiceUpsertBulk) SetRiderID(v uint64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateRiderID() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateRiderID()
	})
}

// SetPrice sets the "price" field.
func (u *EnterpriseInvoiceUpsertBulk) SetPrice(v float64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *EnterpriseInvoiceUpsertBulk) AddPrice(v float64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdatePrice() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdatePrice()
	})
}

// SetStatementID sets the "statement_id" field.
func (u *EnterpriseInvoiceUpsertBulk) SetStatementID(v uint64) *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.SetStatementID(v)
	})
}

// UpdateStatementID sets the "statement_id" field to the value that was provided on create.
func (u *EnterpriseInvoiceUpsertBulk) UpdateStatementID() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.UpdateStatementID()
	})
}

// ClearStatementID clears the value of the "statement_id" field.
func (u *EnterpriseInvoiceUpsertBulk) ClearStatementID() *EnterpriseInvoiceUpsertBulk {
	return u.Update(func(s *EnterpriseInvoiceUpsert) {
		s.ClearStatementID()
	})
}

// Exec executes the query.
func (u *EnterpriseInvoiceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnterpriseInvoiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnterpriseInvoiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnterpriseInvoiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
