// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/pushmessage"
)

// PushmessageUpdate is the builder for updating Pushmessage entities.
type PushmessageUpdate struct {
	config
	hooks     []Hook
	mutation  *PushmessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PushmessageUpdate builder.
func (pu *PushmessageUpdate) Where(ps ...predicate.Pushmessage) *PushmessageUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PushmessageUpdate) SetUpdatedAt(t time.Time) *PushmessageUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PushmessageUpdate) SetDeletedAt(t time.Time) *PushmessageUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableDeletedAt(t *time.Time) *PushmessageUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PushmessageUpdate) ClearDeletedAt() *PushmessageUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetLastModifier sets the "last_modifier" field.
func (pu *PushmessageUpdate) SetLastModifier(m *model.Modifier) *PushmessageUpdate {
	pu.mutation.SetLastModifier(m)
	return pu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pu *PushmessageUpdate) ClearLastModifier() *PushmessageUpdate {
	pu.mutation.ClearLastModifier()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *PushmessageUpdate) SetRemark(s string) *PushmessageUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableRemark(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *PushmessageUpdate) ClearRemark() *PushmessageUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetTitle sets the "title" field.
func (pu *PushmessageUpdate) SetTitle(s string) *PushmessageUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableTitle(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetImage sets the "image" field.
func (pu *PushmessageUpdate) SetImage(s string) *PushmessageUpdate {
	pu.mutation.SetImage(s)
	return pu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableImage(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetImage(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PushmessageUpdate) SetContent(s string) *PushmessageUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableContent(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetPushType sets the "push_type" field.
func (pu *PushmessageUpdate) SetPushType(u uint8) *PushmessageUpdate {
	pu.mutation.ResetPushType()
	pu.mutation.SetPushType(u)
	return pu
}

// SetNillablePushType sets the "push_type" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillablePushType(u *uint8) *PushmessageUpdate {
	if u != nil {
		pu.SetPushType(*u)
	}
	return pu
}

// AddPushType adds u to the "push_type" field.
func (pu *PushmessageUpdate) AddPushType(u int8) *PushmessageUpdate {
	pu.mutation.AddPushType(u)
	return pu
}

// SetPushTime sets the "push_time" field.
func (pu *PushmessageUpdate) SetPushTime(t time.Time) *PushmessageUpdate {
	pu.mutation.SetPushTime(t)
	return pu
}

// SetNillablePushTime sets the "push_time" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillablePushTime(t *time.Time) *PushmessageUpdate {
	if t != nil {
		pu.SetPushTime(*t)
	}
	return pu
}

// ClearPushTime clears the value of the "push_time" field.
func (pu *PushmessageUpdate) ClearPushTime() *PushmessageUpdate {
	pu.mutation.ClearPushTime()
	return pu
}

// SetIsHome sets the "is_home" field.
func (pu *PushmessageUpdate) SetIsHome(b bool) *PushmessageUpdate {
	pu.mutation.SetIsHome(b)
	return pu
}

// SetNillableIsHome sets the "is_home" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableIsHome(b *bool) *PushmessageUpdate {
	if b != nil {
		pu.SetIsHome(*b)
	}
	return pu
}

// SetHomeContent sets the "home_content" field.
func (pu *PushmessageUpdate) SetHomeContent(s string) *PushmessageUpdate {
	pu.mutation.SetHomeContent(s)
	return pu
}

// SetNillableHomeContent sets the "home_content" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableHomeContent(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetHomeContent(*s)
	}
	return pu
}

// SetMessageStatus sets the "message_status" field.
func (pu *PushmessageUpdate) SetMessageStatus(u uint8) *PushmessageUpdate {
	pu.mutation.ResetMessageStatus()
	pu.mutation.SetMessageStatus(u)
	return pu
}

// SetNillableMessageStatus sets the "message_status" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableMessageStatus(u *uint8) *PushmessageUpdate {
	if u != nil {
		pu.SetMessageStatus(*u)
	}
	return pu
}

// AddMessageStatus adds u to the "message_status" field.
func (pu *PushmessageUpdate) AddMessageStatus(u int8) *PushmessageUpdate {
	pu.mutation.AddMessageStatus(u)
	return pu
}

// SetMessageType sets the "message_type" field.
func (pu *PushmessageUpdate) SetMessageType(u uint8) *PushmessageUpdate {
	pu.mutation.ResetMessageType()
	pu.mutation.SetMessageType(u)
	return pu
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableMessageType(u *uint8) *PushmessageUpdate {
	if u != nil {
		pu.SetMessageType(*u)
	}
	return pu
}

// AddMessageType adds u to the "message_type" field.
func (pu *PushmessageUpdate) AddMessageType(u int8) *PushmessageUpdate {
	pu.mutation.AddMessageType(u)
	return pu
}

// SetThirdPartyID sets the "third_party_id" field.
func (pu *PushmessageUpdate) SetThirdPartyID(s string) *PushmessageUpdate {
	pu.mutation.SetThirdPartyID(s)
	return pu
}

// SetNillableThirdPartyID sets the "third_party_id" field if the given value is not nil.
func (pu *PushmessageUpdate) SetNillableThirdPartyID(s *string) *PushmessageUpdate {
	if s != nil {
		pu.SetThirdPartyID(*s)
	}
	return pu
}

// Mutation returns the PushmessageMutation object of the builder.
func (pu *PushmessageUpdate) Mutation() *PushmessageMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PushmessageUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PushmessageUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PushmessageUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PushmessageUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PushmessageUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		if pushmessage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pushmessage.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pushmessage.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PushmessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PushmessageUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PushmessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pushmessage.Table, pushmessage.Columns, sqlgraph.NewFieldSpec(pushmessage.FieldID, field.TypeUint64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pushmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(pushmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(pushmessage.FieldDeletedAt, field.TypeTime)
	}
	if pu.mutation.CreatorCleared() {
		_spec.ClearField(pushmessage.FieldCreator, field.TypeJSON)
	}
	if value, ok := pu.mutation.LastModifier(); ok {
		_spec.SetField(pushmessage.FieldLastModifier, field.TypeJSON, value)
	}
	if pu.mutation.LastModifierCleared() {
		_spec.ClearField(pushmessage.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.SetField(pushmessage.FieldRemark, field.TypeString, value)
	}
	if pu.mutation.RemarkCleared() {
		_spec.ClearField(pushmessage.FieldRemark, field.TypeString)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(pushmessage.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Image(); ok {
		_spec.SetField(pushmessage.FieldImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(pushmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.PushType(); ok {
		_spec.SetField(pushmessage.FieldPushType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedPushType(); ok {
		_spec.AddField(pushmessage.FieldPushType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.PushTime(); ok {
		_spec.SetField(pushmessage.FieldPushTime, field.TypeTime, value)
	}
	if pu.mutation.PushTimeCleared() {
		_spec.ClearField(pushmessage.FieldPushTime, field.TypeTime)
	}
	if value, ok := pu.mutation.IsHome(); ok {
		_spec.SetField(pushmessage.FieldIsHome, field.TypeBool, value)
	}
	if value, ok := pu.mutation.HomeContent(); ok {
		_spec.SetField(pushmessage.FieldHomeContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.MessageStatus(); ok {
		_spec.SetField(pushmessage.FieldMessageStatus, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedMessageStatus(); ok {
		_spec.AddField(pushmessage.FieldMessageStatus, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.MessageType(); ok {
		_spec.SetField(pushmessage.FieldMessageType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.AddedMessageType(); ok {
		_spec.AddField(pushmessage.FieldMessageType, field.TypeUint8, value)
	}
	if value, ok := pu.mutation.ThirdPartyID(); ok {
		_spec.SetField(pushmessage.FieldThirdPartyID, field.TypeString, value)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pushmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PushmessageUpdateOne is the builder for updating a single Pushmessage entity.
type PushmessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PushmessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PushmessageUpdateOne) SetUpdatedAt(t time.Time) *PushmessageUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PushmessageUpdateOne) SetDeletedAt(t time.Time) *PushmessageUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableDeletedAt(t *time.Time) *PushmessageUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PushmessageUpdateOne) ClearDeletedAt() *PushmessageUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetLastModifier sets the "last_modifier" field.
func (puo *PushmessageUpdateOne) SetLastModifier(m *model.Modifier) *PushmessageUpdateOne {
	puo.mutation.SetLastModifier(m)
	return puo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (puo *PushmessageUpdateOne) ClearLastModifier() *PushmessageUpdateOne {
	puo.mutation.ClearLastModifier()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *PushmessageUpdateOne) SetRemark(s string) *PushmessageUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableRemark(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *PushmessageUpdateOne) ClearRemark() *PushmessageUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetTitle sets the "title" field.
func (puo *PushmessageUpdateOne) SetTitle(s string) *PushmessageUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableTitle(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetImage sets the "image" field.
func (puo *PushmessageUpdateOne) SetImage(s string) *PushmessageUpdateOne {
	puo.mutation.SetImage(s)
	return puo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableImage(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetImage(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PushmessageUpdateOne) SetContent(s string) *PushmessageUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableContent(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetPushType sets the "push_type" field.
func (puo *PushmessageUpdateOne) SetPushType(u uint8) *PushmessageUpdateOne {
	puo.mutation.ResetPushType()
	puo.mutation.SetPushType(u)
	return puo
}

// SetNillablePushType sets the "push_type" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillablePushType(u *uint8) *PushmessageUpdateOne {
	if u != nil {
		puo.SetPushType(*u)
	}
	return puo
}

// AddPushType adds u to the "push_type" field.
func (puo *PushmessageUpdateOne) AddPushType(u int8) *PushmessageUpdateOne {
	puo.mutation.AddPushType(u)
	return puo
}

// SetPushTime sets the "push_time" field.
func (puo *PushmessageUpdateOne) SetPushTime(t time.Time) *PushmessageUpdateOne {
	puo.mutation.SetPushTime(t)
	return puo
}

// SetNillablePushTime sets the "push_time" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillablePushTime(t *time.Time) *PushmessageUpdateOne {
	if t != nil {
		puo.SetPushTime(*t)
	}
	return puo
}

// ClearPushTime clears the value of the "push_time" field.
func (puo *PushmessageUpdateOne) ClearPushTime() *PushmessageUpdateOne {
	puo.mutation.ClearPushTime()
	return puo
}

// SetIsHome sets the "is_home" field.
func (puo *PushmessageUpdateOne) SetIsHome(b bool) *PushmessageUpdateOne {
	puo.mutation.SetIsHome(b)
	return puo
}

// SetNillableIsHome sets the "is_home" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableIsHome(b *bool) *PushmessageUpdateOne {
	if b != nil {
		puo.SetIsHome(*b)
	}
	return puo
}

// SetHomeContent sets the "home_content" field.
func (puo *PushmessageUpdateOne) SetHomeContent(s string) *PushmessageUpdateOne {
	puo.mutation.SetHomeContent(s)
	return puo
}

// SetNillableHomeContent sets the "home_content" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableHomeContent(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetHomeContent(*s)
	}
	return puo
}

// SetMessageStatus sets the "message_status" field.
func (puo *PushmessageUpdateOne) SetMessageStatus(u uint8) *PushmessageUpdateOne {
	puo.mutation.ResetMessageStatus()
	puo.mutation.SetMessageStatus(u)
	return puo
}

// SetNillableMessageStatus sets the "message_status" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableMessageStatus(u *uint8) *PushmessageUpdateOne {
	if u != nil {
		puo.SetMessageStatus(*u)
	}
	return puo
}

// AddMessageStatus adds u to the "message_status" field.
func (puo *PushmessageUpdateOne) AddMessageStatus(u int8) *PushmessageUpdateOne {
	puo.mutation.AddMessageStatus(u)
	return puo
}

// SetMessageType sets the "message_type" field.
func (puo *PushmessageUpdateOne) SetMessageType(u uint8) *PushmessageUpdateOne {
	puo.mutation.ResetMessageType()
	puo.mutation.SetMessageType(u)
	return puo
}

// SetNillableMessageType sets the "message_type" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableMessageType(u *uint8) *PushmessageUpdateOne {
	if u != nil {
		puo.SetMessageType(*u)
	}
	return puo
}

// AddMessageType adds u to the "message_type" field.
func (puo *PushmessageUpdateOne) AddMessageType(u int8) *PushmessageUpdateOne {
	puo.mutation.AddMessageType(u)
	return puo
}

// SetThirdPartyID sets the "third_party_id" field.
func (puo *PushmessageUpdateOne) SetThirdPartyID(s string) *PushmessageUpdateOne {
	puo.mutation.SetThirdPartyID(s)
	return puo
}

// SetNillableThirdPartyID sets the "third_party_id" field if the given value is not nil.
func (puo *PushmessageUpdateOne) SetNillableThirdPartyID(s *string) *PushmessageUpdateOne {
	if s != nil {
		puo.SetThirdPartyID(*s)
	}
	return puo
}

// Mutation returns the PushmessageMutation object of the builder.
func (puo *PushmessageUpdateOne) Mutation() *PushmessageMutation {
	return puo.mutation
}

// Where appends a list predicates to the PushmessageUpdate builder.
func (puo *PushmessageUpdateOne) Where(ps ...predicate.Pushmessage) *PushmessageUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PushmessageUpdateOne) Select(field string, fields ...string) *PushmessageUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pushmessage entity.
func (puo *PushmessageUpdateOne) Save(ctx context.Context) (*Pushmessage, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PushmessageUpdateOne) SaveX(ctx context.Context) *Pushmessage {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PushmessageUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PushmessageUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PushmessageUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		if pushmessage.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pushmessage.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pushmessage.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PushmessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PushmessageUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PushmessageUpdateOne) sqlSave(ctx context.Context) (_node *Pushmessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(pushmessage.Table, pushmessage.Columns, sqlgraph.NewFieldSpec(pushmessage.FieldID, field.TypeUint64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pushmessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pushmessage.FieldID)
		for _, f := range fields {
			if !pushmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pushmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pushmessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(pushmessage.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(pushmessage.FieldDeletedAt, field.TypeTime)
	}
	if puo.mutation.CreatorCleared() {
		_spec.ClearField(pushmessage.FieldCreator, field.TypeJSON)
	}
	if value, ok := puo.mutation.LastModifier(); ok {
		_spec.SetField(pushmessage.FieldLastModifier, field.TypeJSON, value)
	}
	if puo.mutation.LastModifierCleared() {
		_spec.ClearField(pushmessage.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.SetField(pushmessage.FieldRemark, field.TypeString, value)
	}
	if puo.mutation.RemarkCleared() {
		_spec.ClearField(pushmessage.FieldRemark, field.TypeString)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(pushmessage.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Image(); ok {
		_spec.SetField(pushmessage.FieldImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(pushmessage.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.PushType(); ok {
		_spec.SetField(pushmessage.FieldPushType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedPushType(); ok {
		_spec.AddField(pushmessage.FieldPushType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.PushTime(); ok {
		_spec.SetField(pushmessage.FieldPushTime, field.TypeTime, value)
	}
	if puo.mutation.PushTimeCleared() {
		_spec.ClearField(pushmessage.FieldPushTime, field.TypeTime)
	}
	if value, ok := puo.mutation.IsHome(); ok {
		_spec.SetField(pushmessage.FieldIsHome, field.TypeBool, value)
	}
	if value, ok := puo.mutation.HomeContent(); ok {
		_spec.SetField(pushmessage.FieldHomeContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.MessageStatus(); ok {
		_spec.SetField(pushmessage.FieldMessageStatus, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedMessageStatus(); ok {
		_spec.AddField(pushmessage.FieldMessageStatus, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.MessageType(); ok {
		_spec.SetField(pushmessage.FieldMessageType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.AddedMessageType(); ok {
		_spec.AddField(pushmessage.FieldMessageType, field.TypeUint8, value)
	}
	if value, ok := puo.mutation.ThirdPartyID(); ok {
		_spec.SetField(pushmessage.FieldThirdPartyID, field.TypeString, value)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Pushmessage{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pushmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
