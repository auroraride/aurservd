// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
	"github.com/auroraride/aurservd/internal/ent/purchasepayment"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PurchasePayment is the model entity for the PurchasePayment schema.
type PurchasePayment struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 商品ID
	GoodsID uint64 `json:"goods_id,omitempty"`
	// 交易订单号（自行生成）
	OutTradeNo string `json:"out_trade_no,omitempty"`
	// 分期序号
	Index int `json:"index,omitempty"`
	// 支付状态，obligation: 待付款, paid: 已支付, canceled: 已取消
	Status purchasepayment.Status `json:"status,omitempty"`
	// 支付方式，alipay: 支付宝, wechat: 微信, cash: 现金
	Payway purchasepayment.Payway `json:"payway,omitempty"`
	// 支付金额
	Total float64 `json:"total,omitempty"`
	// 账单金额
	Amount float64 `json:"amount,omitempty"`
	// 滞纳金
	Forfeit float64 `json:"forfeit,omitempty"`
	// 账单日期
	BillingDate time.Time `json:"billing_date,omitempty"`
	// 支付时间
	PaymentDate *time.Time `json:"payment_date,omitempty"`
	// 平台订单号（微信或支付宝）
	TradeNo string `json:"trade_no,omitempty"`
	// 订单id
	OrderID uint64 `json:"order_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PurchasePaymentQuery when eager-loading is set.
	Edges        PurchasePaymentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PurchasePaymentEdges holds the relations/edges for other nodes in the graph.
type PurchasePaymentEdges struct {
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// 商品ID
	Goods *Goods `json:"goods,omitempty"`
	// Order holds the value of the order edge.
	Order *PurchaseOrder `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PurchasePaymentEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// GoodsOrErr returns the Goods value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PurchasePaymentEdges) GoodsOrErr() (*Goods, error) {
	if e.Goods != nil {
		return e.Goods, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: goods.Label}
	}
	return nil, &NotLoadedError{edge: "goods"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PurchasePaymentEdges) OrderOrErr() (*PurchaseOrder, error) {
	if e.Order != nil {
		return e.Order, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: purchaseorder.Label}
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PurchasePayment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case purchasepayment.FieldCreator, purchasepayment.FieldLastModifier:
			values[i] = new([]byte)
		case purchasepayment.FieldTotal, purchasepayment.FieldAmount, purchasepayment.FieldForfeit:
			values[i] = new(sql.NullFloat64)
		case purchasepayment.FieldID, purchasepayment.FieldRiderID, purchasepayment.FieldGoodsID, purchasepayment.FieldIndex, purchasepayment.FieldOrderID:
			values[i] = new(sql.NullInt64)
		case purchasepayment.FieldRemark, purchasepayment.FieldOutTradeNo, purchasepayment.FieldStatus, purchasepayment.FieldPayway, purchasepayment.FieldTradeNo:
			values[i] = new(sql.NullString)
		case purchasepayment.FieldCreatedAt, purchasepayment.FieldUpdatedAt, purchasepayment.FieldDeletedAt, purchasepayment.FieldBillingDate, purchasepayment.FieldPaymentDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PurchasePayment fields.
func (pp *PurchasePayment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case purchasepayment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = uint64(value.Int64)
		case purchasepayment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pp.CreatedAt = value.Time
			}
		case purchasepayment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pp.UpdatedAt = value.Time
			}
		case purchasepayment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pp.DeletedAt = new(time.Time)
				*pp.DeletedAt = value.Time
			}
		case purchasepayment.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case purchasepayment.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pp.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case purchasepayment.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pp.Remark = value.String
			}
		case purchasepayment.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				pp.RiderID = uint64(value.Int64)
			}
		case purchasepayment.FieldGoodsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goods_id", values[i])
			} else if value.Valid {
				pp.GoodsID = uint64(value.Int64)
			}
		case purchasepayment.FieldOutTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_trade_no", values[i])
			} else if value.Valid {
				pp.OutTradeNo = value.String
			}
		case purchasepayment.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				pp.Index = int(value.Int64)
			}
		case purchasepayment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pp.Status = purchasepayment.Status(value.String)
			}
		case purchasepayment.FieldPayway:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payway", values[i])
			} else if value.Valid {
				pp.Payway = purchasepayment.Payway(value.String)
			}
		case purchasepayment.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				pp.Total = value.Float64
			}
		case purchasepayment.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				pp.Amount = value.Float64
			}
		case purchasepayment.FieldForfeit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field forfeit", values[i])
			} else if value.Valid {
				pp.Forfeit = value.Float64
			}
		case purchasepayment.FieldBillingDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field billing_date", values[i])
			} else if value.Valid {
				pp.BillingDate = value.Time
			}
		case purchasepayment.FieldPaymentDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field payment_date", values[i])
			} else if value.Valid {
				pp.PaymentDate = new(time.Time)
				*pp.PaymentDate = value.Time
			}
		case purchasepayment.FieldTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_no", values[i])
			} else if value.Valid {
				pp.TradeNo = value.String
			}
		case purchasepayment.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				pp.OrderID = uint64(value.Int64)
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PurchasePayment.
// This includes values selected through modifiers, order, etc.
func (pp *PurchasePayment) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryRider queries the "rider" edge of the PurchasePayment entity.
func (pp *PurchasePayment) QueryRider() *RiderQuery {
	return NewPurchasePaymentClient(pp.config).QueryRider(pp)
}

// QueryGoods queries the "goods" edge of the PurchasePayment entity.
func (pp *PurchasePayment) QueryGoods() *GoodsQuery {
	return NewPurchasePaymentClient(pp.config).QueryGoods(pp)
}

// QueryOrder queries the "order" edge of the PurchasePayment entity.
func (pp *PurchasePayment) QueryOrder() *PurchaseOrderQuery {
	return NewPurchasePaymentClient(pp.config).QueryOrder(pp)
}

// Update returns a builder for updating this PurchasePayment.
// Note that you need to call PurchasePayment.Unwrap() before calling this method if this PurchasePayment
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PurchasePayment) Update() *PurchasePaymentUpdateOne {
	return NewPurchasePaymentClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PurchasePayment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PurchasePayment) Unwrap() *PurchasePayment {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PurchasePayment is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PurchasePayment) String() string {
	var builder strings.Builder
	builder.WriteString("PurchasePayment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pp.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pp.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pp.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pp.Remark)
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.RiderID))
	builder.WriteString(", ")
	builder.WriteString("goods_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.GoodsID))
	builder.WriteString(", ")
	builder.WriteString("out_trade_no=")
	builder.WriteString(pp.OutTradeNo)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", pp.Index))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pp.Status))
	builder.WriteString(", ")
	builder.WriteString("payway=")
	builder.WriteString(fmt.Sprintf("%v", pp.Payway))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", pp.Total))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", pp.Amount))
	builder.WriteString(", ")
	builder.WriteString("forfeit=")
	builder.WriteString(fmt.Sprintf("%v", pp.Forfeit))
	builder.WriteString(", ")
	builder.WriteString("billing_date=")
	builder.WriteString(pp.BillingDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pp.PaymentDate; v != nil {
		builder.WriteString("payment_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("trade_no=")
	builder.WriteString(pp.TradeNo)
	builder.WriteString(", ")
	builder.WriteString("order_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.OrderID))
	builder.WriteByte(')')
	return builder.String()
}

// PurchasePayments is a parsable slice of PurchasePayment.
type PurchasePayments []*PurchasePayment
