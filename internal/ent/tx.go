// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	stdsql "database/sql"
	"fmt"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// Allocate is the client for interacting with the Allocate builders.
	Allocate *AllocateClient
	// Assistance is the client for interacting with the Assistance builders.
	Assistance *AssistanceClient
	// Attendance is the client for interacting with the Attendance builders.
	Attendance *AttendanceClient
	// Battery is the client for interacting with the Battery builders.
	Battery *BatteryClient
	// BatteryFault is the client for interacting with the BatteryFault builders.
	BatteryFault *BatteryFaultClient
	// BatteryFlow is the client for interacting with the BatteryFlow builders.
	BatteryFlow *BatteryFlowClient
	// BatteryModel is the client for interacting with the BatteryModel builders.
	BatteryModel *BatteryModelClient
	// Branch is the client for interacting with the Branch builders.
	Branch *BranchClient
	// BranchContract is the client for interacting with the BranchContract builders.
	BranchContract *BranchContractClient
	// Business is the client for interacting with the Business builders.
	Business *BusinessClient
	// Cabinet is the client for interacting with the Cabinet builders.
	Cabinet *CabinetClient
	// CabinetFault is the client for interacting with the CabinetFault builders.
	CabinetFault *CabinetFaultClient
	// City is the client for interacting with the City builders.
	City *CityClient
	// Commission is the client for interacting with the Commission builders.
	Commission *CommissionClient
	// Contract is the client for interacting with the Contract builders.
	Contract *ContractClient
	// Coupon is the client for interacting with the Coupon builders.
	Coupon *CouponClient
	// CouponAssembly is the client for interacting with the CouponAssembly builders.
	CouponAssembly *CouponAssemblyClient
	// CouponTemplate is the client for interacting with the CouponTemplate builders.
	CouponTemplate *CouponTemplateClient
	// Ebike is the client for interacting with the Ebike builders.
	Ebike *EbikeClient
	// EbikeBrand is the client for interacting with the EbikeBrand builders.
	EbikeBrand *EbikeBrandClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Enterprise is the client for interacting with the Enterprise builders.
	Enterprise *EnterpriseClient
	// EnterpriseBill is the client for interacting with the EnterpriseBill builders.
	EnterpriseBill *EnterpriseBillClient
	// EnterpriseContract is the client for interacting with the EnterpriseContract builders.
	EnterpriseContract *EnterpriseContractClient
	// EnterprisePrepayment is the client for interacting with the EnterprisePrepayment builders.
	EnterprisePrepayment *EnterprisePrepaymentClient
	// EnterprisePrice is the client for interacting with the EnterprisePrice builders.
	EnterprisePrice *EnterprisePriceClient
	// EnterpriseStatement is the client for interacting with the EnterpriseStatement builders.
	EnterpriseStatement *EnterpriseStatementClient
	// EnterpriseStation is the client for interacting with the EnterpriseStation builders.
	EnterpriseStation *EnterpriseStationClient
	// Exception is the client for interacting with the Exception builders.
	Exception *ExceptionClient
	// Exchange is the client for interacting with the Exchange builders.
	Exchange *ExchangeClient
	// Export is the client for interacting with the Export builders.
	Export *ExportClient
	// Inventory is the client for interacting with the Inventory builders.
	Inventory *InventoryClient
	// Manager is the client for interacting with the Manager builders.
	Manager *ManagerClient
	// Order is the client for interacting with the Order builders.
	Order *OrderClient
	// OrderRefund is the client for interacting with the OrderRefund builders.
	OrderRefund *OrderRefundClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// Plan is the client for interacting with the Plan builders.
	Plan *PlanClient
	// PlanIntroduce is the client for interacting with the PlanIntroduce builders.
	PlanIntroduce *PlanIntroduceClient
	// PointLog is the client for interacting with the PointLog builders.
	PointLog *PointLogClient
	// Reserve is the client for interacting with the Reserve builders.
	Reserve *ReserveClient
	// Rider is the client for interacting with the Rider builders.
	Rider *RiderClient
	// RiderFollowUp is the client for interacting with the RiderFollowUp builders.
	RiderFollowUp *RiderFollowUpClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Setting is the client for interacting with the Setting builders.
	Setting *SettingClient
	// Stock is the client for interacting with the Stock builders.
	Stock *StockClient
	// Store is the client for interacting with the Store builders.
	Store *StoreClient
	// Subscribe is the client for interacting with the Subscribe builders.
	Subscribe *SubscribeClient
	// SubscribeAlter is the client for interacting with the SubscribeAlter builders.
	SubscribeAlter *SubscribeAlterClient
	// SubscribePause is the client for interacting with the SubscribePause builders.
	SubscribePause *SubscribePauseClient
	// SubscribeReminder is the client for interacting with the SubscribeReminder builders.
	SubscribeReminder *SubscribeReminderClient
	// SubscribeSuspend is the client for interacting with the SubscribeSuspend builders.
	SubscribeSuspend *SubscribeSuspendClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Agent = NewAgentClient(tx.config)
	tx.Allocate = NewAllocateClient(tx.config)
	tx.Assistance = NewAssistanceClient(tx.config)
	tx.Attendance = NewAttendanceClient(tx.config)
	tx.Battery = NewBatteryClient(tx.config)
	tx.BatteryFault = NewBatteryFaultClient(tx.config)
	tx.BatteryFlow = NewBatteryFlowClient(tx.config)
	tx.BatteryModel = NewBatteryModelClient(tx.config)
	tx.Branch = NewBranchClient(tx.config)
	tx.BranchContract = NewBranchContractClient(tx.config)
	tx.Business = NewBusinessClient(tx.config)
	tx.Cabinet = NewCabinetClient(tx.config)
	tx.CabinetFault = NewCabinetFaultClient(tx.config)
	tx.City = NewCityClient(tx.config)
	tx.Commission = NewCommissionClient(tx.config)
	tx.Contract = NewContractClient(tx.config)
	tx.Coupon = NewCouponClient(tx.config)
	tx.CouponAssembly = NewCouponAssemblyClient(tx.config)
	tx.CouponTemplate = NewCouponTemplateClient(tx.config)
	tx.Ebike = NewEbikeClient(tx.config)
	tx.EbikeBrand = NewEbikeBrandClient(tx.config)
	tx.Employee = NewEmployeeClient(tx.config)
	tx.Enterprise = NewEnterpriseClient(tx.config)
	tx.EnterpriseBill = NewEnterpriseBillClient(tx.config)
	tx.EnterpriseContract = NewEnterpriseContractClient(tx.config)
	tx.EnterprisePrepayment = NewEnterprisePrepaymentClient(tx.config)
	tx.EnterprisePrice = NewEnterprisePriceClient(tx.config)
	tx.EnterpriseStatement = NewEnterpriseStatementClient(tx.config)
	tx.EnterpriseStation = NewEnterpriseStationClient(tx.config)
	tx.Exception = NewExceptionClient(tx.config)
	tx.Exchange = NewExchangeClient(tx.config)
	tx.Export = NewExportClient(tx.config)
	tx.Inventory = NewInventoryClient(tx.config)
	tx.Manager = NewManagerClient(tx.config)
	tx.Order = NewOrderClient(tx.config)
	tx.OrderRefund = NewOrderRefundClient(tx.config)
	tx.Person = NewPersonClient(tx.config)
	tx.Plan = NewPlanClient(tx.config)
	tx.PlanIntroduce = NewPlanIntroduceClient(tx.config)
	tx.PointLog = NewPointLogClient(tx.config)
	tx.Reserve = NewReserveClient(tx.config)
	tx.Rider = NewRiderClient(tx.config)
	tx.RiderFollowUp = NewRiderFollowUpClient(tx.config)
	tx.Role = NewRoleClient(tx.config)
	tx.Setting = NewSettingClient(tx.config)
	tx.Stock = NewStockClient(tx.config)
	tx.Store = NewStoreClient(tx.config)
	tx.Subscribe = NewSubscribeClient(tx.config)
	tx.SubscribeAlter = NewSubscribeAlterClient(tx.config)
	tx.SubscribePause = NewSubscribePauseClient(tx.config)
	tx.SubscribeReminder = NewSubscribeReminderClient(tx.config)
	tx.SubscribeSuspend = NewSubscribeSuspendClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: Agent.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)

// ExecContext allows calling the underlying ExecContext method of the transaction if it is supported by it.
// See, database/sql#Tx.ExecContext for more information.
func (tx *txDriver) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := tx.tx.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the transaction if it is supported by it.
// See, database/sql#Tx.QueryContext for more information.
func (tx *txDriver) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := tx.tx.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Tx.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
