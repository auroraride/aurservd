// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetscrap"
	"github.com/auroraride/aurservd/internal/ent/assetscrapdetails"
)

// AssetScrapDetailsCreate is the builder for creating a AssetScrapDetails entity.
type AssetScrapDetailsCreate struct {
	config
	mutation *AssetScrapDetailsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (asdc *AssetScrapDetailsCreate) SetCreatedAt(t time.Time) *AssetScrapDetailsCreate {
	asdc.mutation.SetCreatedAt(t)
	return asdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asdc *AssetScrapDetailsCreate) SetNillableCreatedAt(t *time.Time) *AssetScrapDetailsCreate {
	if t != nil {
		asdc.SetCreatedAt(*t)
	}
	return asdc
}

// SetUpdatedAt sets the "updated_at" field.
func (asdc *AssetScrapDetailsCreate) SetUpdatedAt(t time.Time) *AssetScrapDetailsCreate {
	asdc.mutation.SetUpdatedAt(t)
	return asdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asdc *AssetScrapDetailsCreate) SetNillableUpdatedAt(t *time.Time) *AssetScrapDetailsCreate {
	if t != nil {
		asdc.SetUpdatedAt(*t)
	}
	return asdc
}

// SetAssetID sets the "asset_id" field.
func (asdc *AssetScrapDetailsCreate) SetAssetID(u uint64) *AssetScrapDetailsCreate {
	asdc.mutation.SetAssetID(u)
	return asdc
}

// SetScrapID sets the "scrap_id" field.
func (asdc *AssetScrapDetailsCreate) SetScrapID(u uint64) *AssetScrapDetailsCreate {
	asdc.mutation.SetScrapID(u)
	return asdc
}

// SetNillableScrapID sets the "scrap_id" field if the given value is not nil.
func (asdc *AssetScrapDetailsCreate) SetNillableScrapID(u *uint64) *AssetScrapDetailsCreate {
	if u != nil {
		asdc.SetScrapID(*u)
	}
	return asdc
}

// SetAsset sets the "asset" edge to the Asset entity.
func (asdc *AssetScrapDetailsCreate) SetAsset(a *Asset) *AssetScrapDetailsCreate {
	return asdc.SetAssetID(a.ID)
}

// SetScrap sets the "scrap" edge to the AssetScrap entity.
func (asdc *AssetScrapDetailsCreate) SetScrap(a *AssetScrap) *AssetScrapDetailsCreate {
	return asdc.SetScrapID(a.ID)
}

// Mutation returns the AssetScrapDetailsMutation object of the builder.
func (asdc *AssetScrapDetailsCreate) Mutation() *AssetScrapDetailsMutation {
	return asdc.mutation
}

// Save creates the AssetScrapDetails in the database.
func (asdc *AssetScrapDetailsCreate) Save(ctx context.Context) (*AssetScrapDetails, error) {
	asdc.defaults()
	return withHooks(ctx, asdc.sqlSave, asdc.mutation, asdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asdc *AssetScrapDetailsCreate) SaveX(ctx context.Context) *AssetScrapDetails {
	v, err := asdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asdc *AssetScrapDetailsCreate) Exec(ctx context.Context) error {
	_, err := asdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asdc *AssetScrapDetailsCreate) ExecX(ctx context.Context) {
	if err := asdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asdc *AssetScrapDetailsCreate) defaults() {
	if _, ok := asdc.mutation.CreatedAt(); !ok {
		v := assetscrapdetails.DefaultCreatedAt()
		asdc.mutation.SetCreatedAt(v)
	}
	if _, ok := asdc.mutation.UpdatedAt(); !ok {
		v := assetscrapdetails.DefaultUpdatedAt()
		asdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asdc *AssetScrapDetailsCreate) check() error {
	if _, ok := asdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetScrapDetails.created_at"`)}
	}
	if _, ok := asdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetScrapDetails.updated_at"`)}
	}
	if _, ok := asdc.mutation.AssetID(); !ok {
		return &ValidationError{Name: "asset_id", err: errors.New(`ent: missing required field "AssetScrapDetails.asset_id"`)}
	}
	if len(asdc.mutation.AssetIDs()) == 0 {
		return &ValidationError{Name: "asset", err: errors.New(`ent: missing required edge "AssetScrapDetails.asset"`)}
	}
	return nil
}

func (asdc *AssetScrapDetailsCreate) sqlSave(ctx context.Context) (*AssetScrapDetails, error) {
	if err := asdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	asdc.mutation.id = &_node.ID
	asdc.mutation.done = true
	return _node, nil
}

func (asdc *AssetScrapDetailsCreate) createSpec() (*AssetScrapDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetScrapDetails{config: asdc.config}
		_spec = sqlgraph.NewCreateSpec(assetscrapdetails.Table, sqlgraph.NewFieldSpec(assetscrapdetails.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = asdc.conflict
	if value, ok := asdc.mutation.CreatedAt(); ok {
		_spec.SetField(assetscrapdetails.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asdc.mutation.UpdatedAt(); ok {
		_spec.SetField(assetscrapdetails.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := asdc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.AssetTable,
			Columns: []string{assetscrapdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := asdc.mutation.ScrapIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetscrapdetails.ScrapTable,
			Columns: []string{assetscrapdetails.ScrapColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetscrap.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScrapID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetScrapDetails.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetScrapDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (asdc *AssetScrapDetailsCreate) OnConflict(opts ...sql.ConflictOption) *AssetScrapDetailsUpsertOne {
	asdc.conflict = opts
	return &AssetScrapDetailsUpsertOne{
		create: asdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asdc *AssetScrapDetailsCreate) OnConflictColumns(columns ...string) *AssetScrapDetailsUpsertOne {
	asdc.conflict = append(asdc.conflict, sql.ConflictColumns(columns...))
	return &AssetScrapDetailsUpsertOne{
		create: asdc,
	}
}

type (
	// AssetScrapDetailsUpsertOne is the builder for "upsert"-ing
	//  one AssetScrapDetails node.
	AssetScrapDetailsUpsertOne struct {
		create *AssetScrapDetailsCreate
	}

	// AssetScrapDetailsUpsert is the "OnConflict" setter.
	AssetScrapDetailsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapDetailsUpsert) SetUpdatedAt(v time.Time) *AssetScrapDetailsUpsert {
	u.Set(assetscrapdetails.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsert) UpdateUpdatedAt() *AssetScrapDetailsUpsert {
	u.SetExcluded(assetscrapdetails.FieldUpdatedAt)
	return u
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapDetailsUpsert) SetAssetID(v uint64) *AssetScrapDetailsUpsert {
	u.Set(assetscrapdetails.FieldAssetID, v)
	return u
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsert) UpdateAssetID() *AssetScrapDetailsUpsert {
	u.SetExcluded(assetscrapdetails.FieldAssetID)
	return u
}

// SetScrapID sets the "scrap_id" field.
func (u *AssetScrapDetailsUpsert) SetScrapID(v uint64) *AssetScrapDetailsUpsert {
	u.Set(assetscrapdetails.FieldScrapID, v)
	return u
}

// UpdateScrapID sets the "scrap_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsert) UpdateScrapID() *AssetScrapDetailsUpsert {
	u.SetExcluded(assetscrapdetails.FieldScrapID)
	return u
}

// ClearScrapID clears the value of the "scrap_id" field.
func (u *AssetScrapDetailsUpsert) ClearScrapID() *AssetScrapDetailsUpsert {
	u.SetNull(assetscrapdetails.FieldScrapID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetScrapDetailsUpsertOne) UpdateNewValues() *AssetScrapDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assetscrapdetails.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetScrapDetailsUpsertOne) Ignore() *AssetScrapDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetScrapDetailsUpsertOne) DoNothing() *AssetScrapDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetScrapDetailsCreate.OnConflict
// documentation for more info.
func (u *AssetScrapDetailsUpsertOne) Update(set func(*AssetScrapDetailsUpsert)) *AssetScrapDetailsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetScrapDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapDetailsUpsertOne) SetUpdatedAt(v time.Time) *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertOne) UpdateUpdatedAt() *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapDetailsUpsertOne) SetAssetID(v uint64) *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertOne) UpdateAssetID() *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// SetScrapID sets the "scrap_id" field.
func (u *AssetScrapDetailsUpsertOne) SetScrapID(v uint64) *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetScrapID(v)
	})
}

// UpdateScrapID sets the "scrap_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertOne) UpdateScrapID() *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateScrapID()
	})
}

// ClearScrapID clears the value of the "scrap_id" field.
func (u *AssetScrapDetailsUpsertOne) ClearScrapID() *AssetScrapDetailsUpsertOne {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.ClearScrapID()
	})
}

// Exec executes the query.
func (u *AssetScrapDetailsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetScrapDetailsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetScrapDetailsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetScrapDetailsUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetScrapDetailsUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetScrapDetailsCreateBulk is the builder for creating many AssetScrapDetails entities in bulk.
type AssetScrapDetailsCreateBulk struct {
	config
	err      error
	builders []*AssetScrapDetailsCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetScrapDetails entities in the database.
func (asdcb *AssetScrapDetailsCreateBulk) Save(ctx context.Context) ([]*AssetScrapDetails, error) {
	if asdcb.err != nil {
		return nil, asdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(asdcb.builders))
	nodes := make([]*AssetScrapDetails, len(asdcb.builders))
	mutators := make([]Mutator, len(asdcb.builders))
	for i := range asdcb.builders {
		func(i int, root context.Context) {
			builder := asdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetScrapDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, asdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = asdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, asdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, asdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (asdcb *AssetScrapDetailsCreateBulk) SaveX(ctx context.Context) []*AssetScrapDetails {
	v, err := asdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asdcb *AssetScrapDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := asdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asdcb *AssetScrapDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := asdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetScrapDetails.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetScrapDetailsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (asdcb *AssetScrapDetailsCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetScrapDetailsUpsertBulk {
	asdcb.conflict = opts
	return &AssetScrapDetailsUpsertBulk{
		create: asdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asdcb *AssetScrapDetailsCreateBulk) OnConflictColumns(columns ...string) *AssetScrapDetailsUpsertBulk {
	asdcb.conflict = append(asdcb.conflict, sql.ConflictColumns(columns...))
	return &AssetScrapDetailsUpsertBulk{
		create: asdcb,
	}
}

// AssetScrapDetailsUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetScrapDetails nodes.
type AssetScrapDetailsUpsertBulk struct {
	create *AssetScrapDetailsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetScrapDetailsUpsertBulk) UpdateNewValues() *AssetScrapDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assetscrapdetails.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetScrapDetails.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetScrapDetailsUpsertBulk) Ignore() *AssetScrapDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetScrapDetailsUpsertBulk) DoNothing() *AssetScrapDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetScrapDetailsCreateBulk.OnConflict
// documentation for more info.
func (u *AssetScrapDetailsUpsertBulk) Update(set func(*AssetScrapDetailsUpsert)) *AssetScrapDetailsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetScrapDetailsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetScrapDetailsUpsertBulk) SetUpdatedAt(v time.Time) *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertBulk) UpdateUpdatedAt() *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetAssetID sets the "asset_id" field.
func (u *AssetScrapDetailsUpsertBulk) SetAssetID(v uint64) *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetAssetID(v)
	})
}

// UpdateAssetID sets the "asset_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertBulk) UpdateAssetID() *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateAssetID()
	})
}

// SetScrapID sets the "scrap_id" field.
func (u *AssetScrapDetailsUpsertBulk) SetScrapID(v uint64) *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.SetScrapID(v)
	})
}

// UpdateScrapID sets the "scrap_id" field to the value that was provided on create.
func (u *AssetScrapDetailsUpsertBulk) UpdateScrapID() *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.UpdateScrapID()
	})
}

// ClearScrapID clears the value of the "scrap_id" field.
func (u *AssetScrapDetailsUpsertBulk) ClearScrapID() *AssetScrapDetailsUpsertBulk {
	return u.Update(func(s *AssetScrapDetailsUpsert) {
		s.ClearScrapID()
	})
}

// Exec executes the query.
func (u *AssetScrapDetailsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetScrapDetailsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetScrapDetailsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetScrapDetailsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
