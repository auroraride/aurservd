// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/person"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// PersonMutation represents an operation that mutates the Person nodes in the graph.
type PersonMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	status           *uint8
	addstatus        *int8
	banned           *bool
	name             *string
	id_card_number   *string
	id_card_type     *uint8
	addid_card_type  *int8
	id_card_portrait *string
	id_card_national *string
	auth_face        *string
	auth_result      **model.FaceVerifyResult
	auth_at          *time.Time
	esign_account_id *string
	clearedFields    map[string]struct{}
	rider            map[uint64]struct{}
	removedrider     map[uint64]struct{}
	clearedrider     bool
	done             bool
	oldValue         func(context.Context) (*Person, error)
	predicates       []predicate.Person
}

var _ ent.Mutation = (*PersonMutation)(nil)

// personOption allows management of the mutation configuration using functional options.
type personOption func(*PersonMutation)

// newPersonMutation creates new mutation for the Person entity.
func newPersonMutation(c config, op Op, opts ...personOption) *PersonMutation {
	m := &PersonMutation{
		config:        c,
		op:            op,
		typ:           TypePerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonID sets the ID field of the mutation.
func withPersonID(id uint64) personOption {
	return func(m *PersonMutation) {
		var (
			err   error
			once  sync.Once
			value *Person
		)
		m.oldValue = func(ctx context.Context) (*Person, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Person.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerson sets the old Person of the mutation.
func withPerson(node *Person) personOption {
	return func(m *PersonMutation) {
		m.oldValue = func(context.Context) (*Person, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Person.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PersonMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PersonMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PersonMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PersonMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PersonMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PersonMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PersonMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PersonMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PersonMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[person.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PersonMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[person.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PersonMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, person.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *PersonMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *PersonMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *PersonMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[person.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *PersonMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[person.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *PersonMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, person.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *PersonMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *PersonMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *PersonMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[person.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *PersonMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[person.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *PersonMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, person.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *PersonMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *PersonMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *PersonMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[person.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *PersonMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[person.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *PersonMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, person.FieldRemark)
}

// SetStatus sets the "status" field.
func (m *PersonMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *PersonMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *PersonMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *PersonMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *PersonMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetBanned sets the "banned" field.
func (m *PersonMutation) SetBanned(b bool) {
	m.banned = &b
}

// Banned returns the value of the "banned" field in the mutation.
func (m *PersonMutation) Banned() (r bool, exists bool) {
	v := m.banned
	if v == nil {
		return
	}
	return *v, true
}

// OldBanned returns the old "banned" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldBanned(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBanned is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBanned requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBanned: %w", err)
	}
	return oldValue.Banned, nil
}

// ResetBanned resets all changes to the "banned" field.
func (m *PersonMutation) ResetBanned() {
	m.banned = nil
}

// SetName sets the "name" field.
func (m *PersonMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonMutation) ResetName() {
	m.name = nil
}

// SetIDCardNumber sets the "id_card_number" field.
func (m *PersonMutation) SetIDCardNumber(s string) {
	m.id_card_number = &s
}

// IDCardNumber returns the value of the "id_card_number" field in the mutation.
func (m *PersonMutation) IDCardNumber() (r string, exists bool) {
	v := m.id_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNumber returns the old "id_card_number" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNumber: %w", err)
	}
	return oldValue.IDCardNumber, nil
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (m *PersonMutation) ClearIDCardNumber() {
	m.id_card_number = nil
	m.clearedFields[person.FieldIDCardNumber] = struct{}{}
}

// IDCardNumberCleared returns if the "id_card_number" field was cleared in this mutation.
func (m *PersonMutation) IDCardNumberCleared() bool {
	_, ok := m.clearedFields[person.FieldIDCardNumber]
	return ok
}

// ResetIDCardNumber resets all changes to the "id_card_number" field.
func (m *PersonMutation) ResetIDCardNumber() {
	m.id_card_number = nil
	delete(m.clearedFields, person.FieldIDCardNumber)
}

// SetIDCardType sets the "id_card_type" field.
func (m *PersonMutation) SetIDCardType(u uint8) {
	m.id_card_type = &u
	m.addid_card_type = nil
}

// IDCardType returns the value of the "id_card_type" field in the mutation.
func (m *PersonMutation) IDCardType() (r uint8, exists bool) {
	v := m.id_card_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardType returns the old "id_card_type" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardType: %w", err)
	}
	return oldValue.IDCardType, nil
}

// AddIDCardType adds u to the "id_card_type" field.
func (m *PersonMutation) AddIDCardType(u int8) {
	if m.addid_card_type != nil {
		*m.addid_card_type += u
	} else {
		m.addid_card_type = &u
	}
}

// AddedIDCardType returns the value that was added to the "id_card_type" field in this mutation.
func (m *PersonMutation) AddedIDCardType() (r int8, exists bool) {
	v := m.addid_card_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetIDCardType resets all changes to the "id_card_type" field.
func (m *PersonMutation) ResetIDCardType() {
	m.id_card_type = nil
	m.addid_card_type = nil
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (m *PersonMutation) SetIDCardPortrait(s string) {
	m.id_card_portrait = &s
}

// IDCardPortrait returns the value of the "id_card_portrait" field in the mutation.
func (m *PersonMutation) IDCardPortrait() (r string, exists bool) {
	v := m.id_card_portrait
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardPortrait returns the old "id_card_portrait" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardPortrait(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardPortrait is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardPortrait requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardPortrait: %w", err)
	}
	return oldValue.IDCardPortrait, nil
}

// ClearIDCardPortrait clears the value of the "id_card_portrait" field.
func (m *PersonMutation) ClearIDCardPortrait() {
	m.id_card_portrait = nil
	m.clearedFields[person.FieldIDCardPortrait] = struct{}{}
}

// IDCardPortraitCleared returns if the "id_card_portrait" field was cleared in this mutation.
func (m *PersonMutation) IDCardPortraitCleared() bool {
	_, ok := m.clearedFields[person.FieldIDCardPortrait]
	return ok
}

// ResetIDCardPortrait resets all changes to the "id_card_portrait" field.
func (m *PersonMutation) ResetIDCardPortrait() {
	m.id_card_portrait = nil
	delete(m.clearedFields, person.FieldIDCardPortrait)
}

// SetIDCardNational sets the "id_card_national" field.
func (m *PersonMutation) SetIDCardNational(s string) {
	m.id_card_national = &s
}

// IDCardNational returns the value of the "id_card_national" field in the mutation.
func (m *PersonMutation) IDCardNational() (r string, exists bool) {
	v := m.id_card_national
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNational returns the old "id_card_national" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardNational(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDCardNational is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDCardNational requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNational: %w", err)
	}
	return oldValue.IDCardNational, nil
}

// ClearIDCardNational clears the value of the "id_card_national" field.
func (m *PersonMutation) ClearIDCardNational() {
	m.id_card_national = nil
	m.clearedFields[person.FieldIDCardNational] = struct{}{}
}

// IDCardNationalCleared returns if the "id_card_national" field was cleared in this mutation.
func (m *PersonMutation) IDCardNationalCleared() bool {
	_, ok := m.clearedFields[person.FieldIDCardNational]
	return ok
}

// ResetIDCardNational resets all changes to the "id_card_national" field.
func (m *PersonMutation) ResetIDCardNational() {
	m.id_card_national = nil
	delete(m.clearedFields, person.FieldIDCardNational)
}

// SetAuthFace sets the "auth_face" field.
func (m *PersonMutation) SetAuthFace(s string) {
	m.auth_face = &s
}

// AuthFace returns the value of the "auth_face" field in the mutation.
func (m *PersonMutation) AuthFace() (r string, exists bool) {
	v := m.auth_face
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthFace returns the old "auth_face" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthFace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthFace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthFace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthFace: %w", err)
	}
	return oldValue.AuthFace, nil
}

// ClearAuthFace clears the value of the "auth_face" field.
func (m *PersonMutation) ClearAuthFace() {
	m.auth_face = nil
	m.clearedFields[person.FieldAuthFace] = struct{}{}
}

// AuthFaceCleared returns if the "auth_face" field was cleared in this mutation.
func (m *PersonMutation) AuthFaceCleared() bool {
	_, ok := m.clearedFields[person.FieldAuthFace]
	return ok
}

// ResetAuthFace resets all changes to the "auth_face" field.
func (m *PersonMutation) ResetAuthFace() {
	m.auth_face = nil
	delete(m.clearedFields, person.FieldAuthFace)
}

// SetAuthResult sets the "auth_result" field.
func (m *PersonMutation) SetAuthResult(mvr *model.FaceVerifyResult) {
	m.auth_result = &mvr
}

// AuthResult returns the value of the "auth_result" field in the mutation.
func (m *PersonMutation) AuthResult() (r *model.FaceVerifyResult, exists bool) {
	v := m.auth_result
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthResult returns the old "auth_result" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthResult(ctx context.Context) (v *model.FaceVerifyResult, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthResult: %w", err)
	}
	return oldValue.AuthResult, nil
}

// ClearAuthResult clears the value of the "auth_result" field.
func (m *PersonMutation) ClearAuthResult() {
	m.auth_result = nil
	m.clearedFields[person.FieldAuthResult] = struct{}{}
}

// AuthResultCleared returns if the "auth_result" field was cleared in this mutation.
func (m *PersonMutation) AuthResultCleared() bool {
	_, ok := m.clearedFields[person.FieldAuthResult]
	return ok
}

// ResetAuthResult resets all changes to the "auth_result" field.
func (m *PersonMutation) ResetAuthResult() {
	m.auth_result = nil
	delete(m.clearedFields, person.FieldAuthResult)
}

// SetAuthAt sets the "auth_at" field.
func (m *PersonMutation) SetAuthAt(t time.Time) {
	m.auth_at = &t
}

// AuthAt returns the value of the "auth_at" field in the mutation.
func (m *PersonMutation) AuthAt() (r time.Time, exists bool) {
	v := m.auth_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthAt returns the old "auth_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthAt: %w", err)
	}
	return oldValue.AuthAt, nil
}

// ClearAuthAt clears the value of the "auth_at" field.
func (m *PersonMutation) ClearAuthAt() {
	m.auth_at = nil
	m.clearedFields[person.FieldAuthAt] = struct{}{}
}

// AuthAtCleared returns if the "auth_at" field was cleared in this mutation.
func (m *PersonMutation) AuthAtCleared() bool {
	_, ok := m.clearedFields[person.FieldAuthAt]
	return ok
}

// ResetAuthAt resets all changes to the "auth_at" field.
func (m *PersonMutation) ResetAuthAt() {
	m.auth_at = nil
	delete(m.clearedFields, person.FieldAuthAt)
}

// SetEsignAccountID sets the "esign_account_id" field.
func (m *PersonMutation) SetEsignAccountID(s string) {
	m.esign_account_id = &s
}

// EsignAccountID returns the value of the "esign_account_id" field in the mutation.
func (m *PersonMutation) EsignAccountID() (r string, exists bool) {
	v := m.esign_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEsignAccountID returns the old "esign_account_id" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldEsignAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEsignAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEsignAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEsignAccountID: %w", err)
	}
	return oldValue.EsignAccountID, nil
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (m *PersonMutation) ClearEsignAccountID() {
	m.esign_account_id = nil
	m.clearedFields[person.FieldEsignAccountID] = struct{}{}
}

// EsignAccountIDCleared returns if the "esign_account_id" field was cleared in this mutation.
func (m *PersonMutation) EsignAccountIDCleared() bool {
	_, ok := m.clearedFields[person.FieldEsignAccountID]
	return ok
}

// ResetEsignAccountID resets all changes to the "esign_account_id" field.
func (m *PersonMutation) ResetEsignAccountID() {
	m.esign_account_id = nil
	delete(m.clearedFields, person.FieldEsignAccountID)
}

// AddRiderIDs adds the "rider" edge to the Rider entity by ids.
func (m *PersonMutation) AddRiderIDs(ids ...uint64) {
	if m.rider == nil {
		m.rider = make(map[uint64]struct{})
	}
	for i := range ids {
		m.rider[ids[i]] = struct{}{}
	}
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *PersonMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *PersonMutation) RiderCleared() bool {
	return m.clearedrider
}

// RemoveRiderIDs removes the "rider" edge to the Rider entity by IDs.
func (m *PersonMutation) RemoveRiderIDs(ids ...uint64) {
	if m.removedrider == nil {
		m.removedrider = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.rider, ids[i])
		m.removedrider[ids[i]] = struct{}{}
	}
}

// RemovedRider returns the removed IDs of the "rider" edge to the Rider entity.
func (m *PersonMutation) RemovedRiderIDs() (ids []uint64) {
	for id := range m.removedrider {
		ids = append(ids, id)
	}
	return
}

// RiderIDs returns the "rider" edge IDs in the mutation.
func (m *PersonMutation) RiderIDs() (ids []uint64) {
	for id := range m.rider {
		ids = append(ids, id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *PersonMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
	m.removedrider = nil
}

// Where appends a list predicates to the PersonMutation builder.
func (m *PersonMutation) Where(ps ...predicate.Person) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PersonMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Person).
func (m *PersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.created_at != nil {
		fields = append(fields, person.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, person.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, person.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, person.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, person.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, person.FieldRemark)
	}
	if m.status != nil {
		fields = append(fields, person.FieldStatus)
	}
	if m.banned != nil {
		fields = append(fields, person.FieldBanned)
	}
	if m.name != nil {
		fields = append(fields, person.FieldName)
	}
	if m.id_card_number != nil {
		fields = append(fields, person.FieldIDCardNumber)
	}
	if m.id_card_type != nil {
		fields = append(fields, person.FieldIDCardType)
	}
	if m.id_card_portrait != nil {
		fields = append(fields, person.FieldIDCardPortrait)
	}
	if m.id_card_national != nil {
		fields = append(fields, person.FieldIDCardNational)
	}
	if m.auth_face != nil {
		fields = append(fields, person.FieldAuthFace)
	}
	if m.auth_result != nil {
		fields = append(fields, person.FieldAuthResult)
	}
	if m.auth_at != nil {
		fields = append(fields, person.FieldAuthAt)
	}
	if m.esign_account_id != nil {
		fields = append(fields, person.FieldEsignAccountID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case person.FieldCreatedAt:
		return m.CreatedAt()
	case person.FieldUpdatedAt:
		return m.UpdatedAt()
	case person.FieldDeletedAt:
		return m.DeletedAt()
	case person.FieldCreator:
		return m.Creator()
	case person.FieldLastModifier:
		return m.LastModifier()
	case person.FieldRemark:
		return m.Remark()
	case person.FieldStatus:
		return m.Status()
	case person.FieldBanned:
		return m.Banned()
	case person.FieldName:
		return m.Name()
	case person.FieldIDCardNumber:
		return m.IDCardNumber()
	case person.FieldIDCardType:
		return m.IDCardType()
	case person.FieldIDCardPortrait:
		return m.IDCardPortrait()
	case person.FieldIDCardNational:
		return m.IDCardNational()
	case person.FieldAuthFace:
		return m.AuthFace()
	case person.FieldAuthResult:
		return m.AuthResult()
	case person.FieldAuthAt:
		return m.AuthAt()
	case person.FieldEsignAccountID:
		return m.EsignAccountID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case person.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case person.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case person.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case person.FieldCreator:
		return m.OldCreator(ctx)
	case person.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case person.FieldRemark:
		return m.OldRemark(ctx)
	case person.FieldStatus:
		return m.OldStatus(ctx)
	case person.FieldBanned:
		return m.OldBanned(ctx)
	case person.FieldName:
		return m.OldName(ctx)
	case person.FieldIDCardNumber:
		return m.OldIDCardNumber(ctx)
	case person.FieldIDCardType:
		return m.OldIDCardType(ctx)
	case person.FieldIDCardPortrait:
		return m.OldIDCardPortrait(ctx)
	case person.FieldIDCardNational:
		return m.OldIDCardNational(ctx)
	case person.FieldAuthFace:
		return m.OldAuthFace(ctx)
	case person.FieldAuthResult:
		return m.OldAuthResult(ctx)
	case person.FieldAuthAt:
		return m.OldAuthAt(ctx)
	case person.FieldEsignAccountID:
		return m.OldEsignAccountID(ctx)
	}
	return nil, fmt.Errorf("unknown Person field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case person.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case person.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case person.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case person.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case person.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case person.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case person.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case person.FieldBanned:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBanned(v)
		return nil
	case person.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case person.FieldIDCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNumber(v)
		return nil
	case person.FieldIDCardType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardType(v)
		return nil
	case person.FieldIDCardPortrait:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardPortrait(v)
		return nil
	case person.FieldIDCardNational:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNational(v)
		return nil
	case person.FieldAuthFace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthFace(v)
		return nil
	case person.FieldAuthResult:
		v, ok := value.(*model.FaceVerifyResult)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthResult(v)
		return nil
	case person.FieldAuthAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthAt(v)
		return nil
	case person.FieldEsignAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEsignAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, person.FieldStatus)
	}
	if m.addid_card_type != nil {
		fields = append(fields, person.FieldIDCardType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case person.FieldStatus:
		return m.AddedStatus()
	case person.FieldIDCardType:
		return m.AddedIDCardType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	case person.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case person.FieldIDCardType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIDCardType(v)
		return nil
	}
	return fmt.Errorf("unknown Person numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(person.FieldDeletedAt) {
		fields = append(fields, person.FieldDeletedAt)
	}
	if m.FieldCleared(person.FieldCreator) {
		fields = append(fields, person.FieldCreator)
	}
	if m.FieldCleared(person.FieldLastModifier) {
		fields = append(fields, person.FieldLastModifier)
	}
	if m.FieldCleared(person.FieldRemark) {
		fields = append(fields, person.FieldRemark)
	}
	if m.FieldCleared(person.FieldIDCardNumber) {
		fields = append(fields, person.FieldIDCardNumber)
	}
	if m.FieldCleared(person.FieldIDCardPortrait) {
		fields = append(fields, person.FieldIDCardPortrait)
	}
	if m.FieldCleared(person.FieldIDCardNational) {
		fields = append(fields, person.FieldIDCardNational)
	}
	if m.FieldCleared(person.FieldAuthFace) {
		fields = append(fields, person.FieldAuthFace)
	}
	if m.FieldCleared(person.FieldAuthResult) {
		fields = append(fields, person.FieldAuthResult)
	}
	if m.FieldCleared(person.FieldAuthAt) {
		fields = append(fields, person.FieldAuthAt)
	}
	if m.FieldCleared(person.FieldEsignAccountID) {
		fields = append(fields, person.FieldEsignAccountID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonMutation) ClearField(name string) error {
	switch name {
	case person.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case person.FieldCreator:
		m.ClearCreator()
		return nil
	case person.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case person.FieldRemark:
		m.ClearRemark()
		return nil
	case person.FieldIDCardNumber:
		m.ClearIDCardNumber()
		return nil
	case person.FieldIDCardPortrait:
		m.ClearIDCardPortrait()
		return nil
	case person.FieldIDCardNational:
		m.ClearIDCardNational()
		return nil
	case person.FieldAuthFace:
		m.ClearAuthFace()
		return nil
	case person.FieldAuthResult:
		m.ClearAuthResult()
		return nil
	case person.FieldAuthAt:
		m.ClearAuthAt()
		return nil
	case person.FieldEsignAccountID:
		m.ClearEsignAccountID()
		return nil
	}
	return fmt.Errorf("unknown Person nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonMutation) ResetField(name string) error {
	switch name {
	case person.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case person.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case person.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case person.FieldCreator:
		m.ResetCreator()
		return nil
	case person.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case person.FieldRemark:
		m.ResetRemark()
		return nil
	case person.FieldStatus:
		m.ResetStatus()
		return nil
	case person.FieldBanned:
		m.ResetBanned()
		return nil
	case person.FieldName:
		m.ResetName()
		return nil
	case person.FieldIDCardNumber:
		m.ResetIDCardNumber()
		return nil
	case person.FieldIDCardType:
		m.ResetIDCardType()
		return nil
	case person.FieldIDCardPortrait:
		m.ResetIDCardPortrait()
		return nil
	case person.FieldIDCardNational:
		m.ResetIDCardNational()
		return nil
	case person.FieldAuthFace:
		m.ResetAuthFace()
		return nil
	case person.FieldAuthResult:
		m.ResetAuthResult()
		return nil
	case person.FieldAuthAt:
		m.ResetAuthAt()
		return nil
	case person.FieldEsignAccountID:
		m.ResetEsignAccountID()
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rider != nil {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeRider:
		ids := make([]ent.Value, 0, len(m.rider))
		for id := range m.rider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrider != nil {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeRider:
		ids := make([]ent.Value, 0, len(m.removedrider))
		for id := range m.removedrider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrider {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonMutation) EdgeCleared(name string) bool {
	switch name {
	case person.EdgeRider:
		return m.clearedrider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Person unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonMutation) ResetEdge(name string) error {
	switch name {
	case person.EdgeRider:
		m.ResetRider()
		return nil
	}
	return fmt.Errorf("unknown Person edge %s", name)
}

