// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks     []Hook
	mutation  *StockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StockUpdate builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StockUpdate) SetUpdatedAt(t time.Time) *StockUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StockUpdate) SetDeletedAt(t time.Time) *StockUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StockUpdate) SetNillableDeletedAt(t *time.Time) *StockUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StockUpdate) ClearDeletedAt() *StockUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *StockUpdate) SetLastModifier(m *model.Modifier) *StockUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *StockUpdate) ClearLastModifier() *StockUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *StockUpdate) SetRemark(s string) *StockUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StockUpdate) SetNillableRemark(s *string) *StockUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *StockUpdate) ClearRemark() *StockUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetCityID sets the "city_id" field.
func (su *StockUpdate) SetCityID(u uint64) *StockUpdate {
	su.mutation.SetCityID(u)
	return su
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableCityID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetCityID(*u)
	}
	return su
}

// ClearCityID clears the value of the "city_id" field.
func (su *StockUpdate) ClearCityID() *StockUpdate {
	su.mutation.ClearCityID()
	return su
}

// SetSubscribeID sets the "subscribe_id" field.
func (su *StockUpdate) SetSubscribeID(u uint64) *StockUpdate {
	su.mutation.SetSubscribeID(u)
	return su
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableSubscribeID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetSubscribeID(*u)
	}
	return su
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (su *StockUpdate) ClearSubscribeID() *StockUpdate {
	su.mutation.ClearSubscribeID()
	return su
}

// SetEbikeID sets the "ebike_id" field.
func (su *StockUpdate) SetEbikeID(u uint64) *StockUpdate {
	su.mutation.SetEbikeID(u)
	return su
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableEbikeID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetEbikeID(*u)
	}
	return su
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (su *StockUpdate) ClearEbikeID() *StockUpdate {
	su.mutation.ClearEbikeID()
	return su
}

// SetBrandID sets the "brand_id" field.
func (su *StockUpdate) SetBrandID(u uint64) *StockUpdate {
	su.mutation.SetBrandID(u)
	return su
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableBrandID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetBrandID(*u)
	}
	return su
}

// ClearBrandID clears the value of the "brand_id" field.
func (su *StockUpdate) ClearBrandID() *StockUpdate {
	su.mutation.ClearBrandID()
	return su
}

// SetBatteryID sets the "battery_id" field.
func (su *StockUpdate) SetBatteryID(u uint64) *StockUpdate {
	su.mutation.SetBatteryID(u)
	return su
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableBatteryID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetBatteryID(*u)
	}
	return su
}

// ClearBatteryID clears the value of the "battery_id" field.
func (su *StockUpdate) ClearBatteryID() *StockUpdate {
	su.mutation.ClearBatteryID()
	return su
}

// SetParentID sets the "parent_id" field.
func (su *StockUpdate) SetParentID(u uint64) *StockUpdate {
	su.mutation.SetParentID(u)
	return su
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableParentID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetParentID(*u)
	}
	return su
}

// ClearParentID clears the value of the "parent_id" field.
func (su *StockUpdate) ClearParentID() *StockUpdate {
	su.mutation.ClearParentID()
	return su
}

// SetSn sets the "sn" field.
func (su *StockUpdate) SetSn(s string) *StockUpdate {
	su.mutation.SetSn(s)
	return su
}

// SetType sets the "type" field.
func (su *StockUpdate) SetType(u uint8) *StockUpdate {
	su.mutation.ResetType()
	su.mutation.SetType(u)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StockUpdate) SetNillableType(u *uint8) *StockUpdate {
	if u != nil {
		su.SetType(*u)
	}
	return su
}

// AddType adds u to the "type" field.
func (su *StockUpdate) AddType(u int8) *StockUpdate {
	su.mutation.AddType(u)
	return su
}

// SetStoreID sets the "store_id" field.
func (su *StockUpdate) SetStoreID(u uint64) *StockUpdate {
	su.mutation.SetStoreID(u)
	return su
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableStoreID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetStoreID(*u)
	}
	return su
}

// ClearStoreID clears the value of the "store_id" field.
func (su *StockUpdate) ClearStoreID() *StockUpdate {
	su.mutation.ClearStoreID()
	return su
}

// SetCabinetID sets the "cabinet_id" field.
func (su *StockUpdate) SetCabinetID(u uint64) *StockUpdate {
	su.mutation.SetCabinetID(u)
	return su
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableCabinetID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetCabinetID(*u)
	}
	return su
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (su *StockUpdate) ClearCabinetID() *StockUpdate {
	su.mutation.ClearCabinetID()
	return su
}

// SetRiderID sets the "rider_id" field.
func (su *StockUpdate) SetRiderID(u uint64) *StockUpdate {
	su.mutation.SetRiderID(u)
	return su
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableRiderID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetRiderID(*u)
	}
	return su
}

// ClearRiderID clears the value of the "rider_id" field.
func (su *StockUpdate) ClearRiderID() *StockUpdate {
	su.mutation.ClearRiderID()
	return su
}

// SetEmployeeID sets the "employee_id" field.
func (su *StockUpdate) SetEmployeeID(u uint64) *StockUpdate {
	su.mutation.SetEmployeeID(u)
	return su
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableEmployeeID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetEmployeeID(*u)
	}
	return su
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (su *StockUpdate) ClearEmployeeID() *StockUpdate {
	su.mutation.ClearEmployeeID()
	return su
}

// SetEnterpriseID sets the "enterprise_id" field.
func (su *StockUpdate) SetEnterpriseID(u uint64) *StockUpdate {
	su.mutation.SetEnterpriseID(u)
	return su
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableEnterpriseID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetEnterpriseID(*u)
	}
	return su
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (su *StockUpdate) ClearEnterpriseID() *StockUpdate {
	su.mutation.ClearEnterpriseID()
	return su
}

// SetStationID sets the "station_id" field.
func (su *StockUpdate) SetStationID(u uint64) *StockUpdate {
	su.mutation.SetStationID(u)
	return su
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableStationID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetStationID(*u)
	}
	return su
}

// ClearStationID clears the value of the "station_id" field.
func (su *StockUpdate) ClearStationID() *StockUpdate {
	su.mutation.ClearStationID()
	return su
}

// SetName sets the "name" field.
func (su *StockUpdate) SetName(s string) *StockUpdate {
	su.mutation.SetName(s)
	return su
}

// SetModel sets the "model" field.
func (su *StockUpdate) SetModel(s string) *StockUpdate {
	su.mutation.SetModel(s)
	return su
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (su *StockUpdate) SetNillableModel(s *string) *StockUpdate {
	if s != nil {
		su.SetModel(*s)
	}
	return su
}

// ClearModel clears the value of the "model" field.
func (su *StockUpdate) ClearModel() *StockUpdate {
	su.mutation.ClearModel()
	return su
}

// SetMaterial sets the "material" field.
func (su *StockUpdate) SetMaterial(s stock.Material) *StockUpdate {
	su.mutation.SetMaterial(s)
	return su
}

// SetCity sets the "city" edge to the City entity.
func (su *StockUpdate) SetCity(c *City) *StockUpdate {
	return su.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (su *StockUpdate) SetSubscribe(s *Subscribe) *StockUpdate {
	return su.SetSubscribeID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (su *StockUpdate) SetEbike(e *Ebike) *StockUpdate {
	return su.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (su *StockUpdate) SetBrand(e *EbikeBrand) *StockUpdate {
	return su.SetBrandID(e.ID)
}

// SetBattery sets the "battery" edge to the Battery entity.
func (su *StockUpdate) SetBattery(b *Battery) *StockUpdate {
	return su.SetBatteryID(b.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (su *StockUpdate) SetStore(s *Store) *StockUpdate {
	return su.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (su *StockUpdate) SetCabinet(c *Cabinet) *StockUpdate {
	return su.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (su *StockUpdate) SetRider(r *Rider) *StockUpdate {
	return su.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (su *StockUpdate) SetEmployee(e *Employee) *StockUpdate {
	return su.SetEmployeeID(e.ID)
}

// SetSpouseID sets the "spouse" edge to the Stock entity by ID.
func (su *StockUpdate) SetSpouseID(id uint64) *StockUpdate {
	su.mutation.SetSpouseID(id)
	return su
}

// SetNillableSpouseID sets the "spouse" edge to the Stock entity by ID if the given value is not nil.
func (su *StockUpdate) SetNillableSpouseID(id *uint64) *StockUpdate {
	if id != nil {
		su = su.SetSpouseID(*id)
	}
	return su
}

// SetSpouse sets the "spouse" edge to the Stock entity.
func (su *StockUpdate) SetSpouse(s *Stock) *StockUpdate {
	return su.SetSpouseID(s.ID)
}

// SetParent sets the "parent" edge to the Stock entity.
func (su *StockUpdate) SetParent(s *Stock) *StockUpdate {
	return su.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the Stock entity by IDs.
func (su *StockUpdate) AddChildIDs(ids ...uint64) *StockUpdate {
	su.mutation.AddChildIDs(ids...)
	return su
}

// AddChildren adds the "children" edges to the Stock entity.
func (su *StockUpdate) AddChildren(s ...*Stock) *StockUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddChildIDs(ids...)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (su *StockUpdate) SetEnterprise(e *Enterprise) *StockUpdate {
	return su.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (su *StockUpdate) SetStation(e *EnterpriseStation) *StockUpdate {
	return su.SetStationID(e.ID)
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (su *StockUpdate) ClearCity() *StockUpdate {
	su.mutation.ClearCity()
	return su
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (su *StockUpdate) ClearSubscribe() *StockUpdate {
	su.mutation.ClearSubscribe()
	return su
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (su *StockUpdate) ClearEbike() *StockUpdate {
	su.mutation.ClearEbike()
	return su
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (su *StockUpdate) ClearBrand() *StockUpdate {
	su.mutation.ClearBrand()
	return su
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (su *StockUpdate) ClearBattery() *StockUpdate {
	su.mutation.ClearBattery()
	return su
}

// ClearStore clears the "store" edge to the Store entity.
func (su *StockUpdate) ClearStore() *StockUpdate {
	su.mutation.ClearStore()
	return su
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (su *StockUpdate) ClearCabinet() *StockUpdate {
	su.mutation.ClearCabinet()
	return su
}

// ClearRider clears the "rider" edge to the Rider entity.
func (su *StockUpdate) ClearRider() *StockUpdate {
	su.mutation.ClearRider()
	return su
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (su *StockUpdate) ClearEmployee() *StockUpdate {
	su.mutation.ClearEmployee()
	return su
}

// ClearSpouse clears the "spouse" edge to the Stock entity.
func (su *StockUpdate) ClearSpouse() *StockUpdate {
	su.mutation.ClearSpouse()
	return su
}

// ClearParent clears the "parent" edge to the Stock entity.
func (su *StockUpdate) ClearParent() *StockUpdate {
	su.mutation.ClearParent()
	return su
}

// ClearChildren clears all "children" edges to the Stock entity.
func (su *StockUpdate) ClearChildren() *StockUpdate {
	su.mutation.ClearChildren()
	return su
}

// RemoveChildIDs removes the "children" edge to Stock entities by IDs.
func (su *StockUpdate) RemoveChildIDs(ids ...uint64) *StockUpdate {
	su.mutation.RemoveChildIDs(ids...)
	return su
}

// RemoveChildren removes "children" edges to Stock entities.
func (su *StockUpdate) RemoveChildren(s ...*Stock) *StockUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveChildIDs(ids...)
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (su *StockUpdate) ClearEnterprise() *StockUpdate {
	su.mutation.ClearEnterprise()
	return su
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (su *StockUpdate) ClearStation() *StockUpdate {
	su.mutation.ClearStation()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StockUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if stock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stock.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *StockUpdate) check() error {
	if v, ok := su.mutation.Material(); ok {
		if err := stock.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Stock.material": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(stock.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(stock.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(stock.FieldDeletedAt, field.TypeTime)
	}
	if su.mutation.CreatorCleared() {
		_spec.ClearField(stock.FieldCreator, field.TypeJSON)
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.SetField(stock.FieldLastModifier, field.TypeJSON, value)
	}
	if su.mutation.LastModifierCleared() {
		_spec.ClearField(stock.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.SetField(stock.FieldRemark, field.TypeString, value)
	}
	if su.mutation.RemarkCleared() {
		_spec.ClearField(stock.FieldRemark, field.TypeString)
	}
	if value, ok := su.mutation.Sn(); ok {
		_spec.SetField(stock.FieldSn, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(stock.FieldType, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedType(); ok {
		_spec.AddField(stock.FieldType, field.TypeUint8, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Model(); ok {
		_spec.SetField(stock.FieldModel, field.TypeString, value)
	}
	if su.mutation.ModelCleared() {
		_spec.ClearField(stock.FieldModel, field.TypeString)
	}
	if value, ok := su.mutation.Material(); ok {
		_spec.SetField(stock.FieldMaterial, field.TypeEnum, value)
	}
	if su.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BrandTable,
			Columns: []string{stock.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BrandTable,
			Columns: []string{stock.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BatteryTable,
			Columns: []string{stock.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BatteryTable,
			Columns: []string{stock.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ParentTable,
			Columns: []string{stock.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ParentTable,
			Columns: []string{stock.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !su.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EnterpriseTable,
			Columns: []string{stock.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EnterpriseTable,
			Columns: []string{stock.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StationTable,
			Columns: []string{stock.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StationTable,
			Columns: []string{stock.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StockUpdateOne) SetUpdatedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StockUpdateOne) SetDeletedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableDeletedAt(t *time.Time) *StockUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StockUpdateOne) ClearDeletedAt() *StockUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *StockUpdateOne) SetLastModifier(m *model.Modifier) *StockUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *StockUpdateOne) ClearLastModifier() *StockUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StockUpdateOne) SetRemark(s string) *StockUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableRemark(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *StockUpdateOne) ClearRemark() *StockUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetCityID sets the "city_id" field.
func (suo *StockUpdateOne) SetCityID(u uint64) *StockUpdateOne {
	suo.mutation.SetCityID(u)
	return suo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableCityID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetCityID(*u)
	}
	return suo
}

// ClearCityID clears the value of the "city_id" field.
func (suo *StockUpdateOne) ClearCityID() *StockUpdateOne {
	suo.mutation.ClearCityID()
	return suo
}

// SetSubscribeID sets the "subscribe_id" field.
func (suo *StockUpdateOne) SetSubscribeID(u uint64) *StockUpdateOne {
	suo.mutation.SetSubscribeID(u)
	return suo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableSubscribeID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetSubscribeID(*u)
	}
	return suo
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (suo *StockUpdateOne) ClearSubscribeID() *StockUpdateOne {
	suo.mutation.ClearSubscribeID()
	return suo
}

// SetEbikeID sets the "ebike_id" field.
func (suo *StockUpdateOne) SetEbikeID(u uint64) *StockUpdateOne {
	suo.mutation.SetEbikeID(u)
	return suo
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableEbikeID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetEbikeID(*u)
	}
	return suo
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (suo *StockUpdateOne) ClearEbikeID() *StockUpdateOne {
	suo.mutation.ClearEbikeID()
	return suo
}

// SetBrandID sets the "brand_id" field.
func (suo *StockUpdateOne) SetBrandID(u uint64) *StockUpdateOne {
	suo.mutation.SetBrandID(u)
	return suo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableBrandID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetBrandID(*u)
	}
	return suo
}

// ClearBrandID clears the value of the "brand_id" field.
func (suo *StockUpdateOne) ClearBrandID() *StockUpdateOne {
	suo.mutation.ClearBrandID()
	return suo
}

// SetBatteryID sets the "battery_id" field.
func (suo *StockUpdateOne) SetBatteryID(u uint64) *StockUpdateOne {
	suo.mutation.SetBatteryID(u)
	return suo
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableBatteryID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetBatteryID(*u)
	}
	return suo
}

// ClearBatteryID clears the value of the "battery_id" field.
func (suo *StockUpdateOne) ClearBatteryID() *StockUpdateOne {
	suo.mutation.ClearBatteryID()
	return suo
}

// SetParentID sets the "parent_id" field.
func (suo *StockUpdateOne) SetParentID(u uint64) *StockUpdateOne {
	suo.mutation.SetParentID(u)
	return suo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableParentID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetParentID(*u)
	}
	return suo
}

// ClearParentID clears the value of the "parent_id" field.
func (suo *StockUpdateOne) ClearParentID() *StockUpdateOne {
	suo.mutation.ClearParentID()
	return suo
}

// SetSn sets the "sn" field.
func (suo *StockUpdateOne) SetSn(s string) *StockUpdateOne {
	suo.mutation.SetSn(s)
	return suo
}

// SetType sets the "type" field.
func (suo *StockUpdateOne) SetType(u uint8) *StockUpdateOne {
	suo.mutation.ResetType()
	suo.mutation.SetType(u)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableType(u *uint8) *StockUpdateOne {
	if u != nil {
		suo.SetType(*u)
	}
	return suo
}

// AddType adds u to the "type" field.
func (suo *StockUpdateOne) AddType(u int8) *StockUpdateOne {
	suo.mutation.AddType(u)
	return suo
}

// SetStoreID sets the "store_id" field.
func (suo *StockUpdateOne) SetStoreID(u uint64) *StockUpdateOne {
	suo.mutation.SetStoreID(u)
	return suo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableStoreID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetStoreID(*u)
	}
	return suo
}

// ClearStoreID clears the value of the "store_id" field.
func (suo *StockUpdateOne) ClearStoreID() *StockUpdateOne {
	suo.mutation.ClearStoreID()
	return suo
}

// SetCabinetID sets the "cabinet_id" field.
func (suo *StockUpdateOne) SetCabinetID(u uint64) *StockUpdateOne {
	suo.mutation.SetCabinetID(u)
	return suo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableCabinetID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetCabinetID(*u)
	}
	return suo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (suo *StockUpdateOne) ClearCabinetID() *StockUpdateOne {
	suo.mutation.ClearCabinetID()
	return suo
}

// SetRiderID sets the "rider_id" field.
func (suo *StockUpdateOne) SetRiderID(u uint64) *StockUpdateOne {
	suo.mutation.SetRiderID(u)
	return suo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableRiderID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetRiderID(*u)
	}
	return suo
}

// ClearRiderID clears the value of the "rider_id" field.
func (suo *StockUpdateOne) ClearRiderID() *StockUpdateOne {
	suo.mutation.ClearRiderID()
	return suo
}

// SetEmployeeID sets the "employee_id" field.
func (suo *StockUpdateOne) SetEmployeeID(u uint64) *StockUpdateOne {
	suo.mutation.SetEmployeeID(u)
	return suo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableEmployeeID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetEmployeeID(*u)
	}
	return suo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (suo *StockUpdateOne) ClearEmployeeID() *StockUpdateOne {
	suo.mutation.ClearEmployeeID()
	return suo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (suo *StockUpdateOne) SetEnterpriseID(u uint64) *StockUpdateOne {
	suo.mutation.SetEnterpriseID(u)
	return suo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableEnterpriseID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetEnterpriseID(*u)
	}
	return suo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (suo *StockUpdateOne) ClearEnterpriseID() *StockUpdateOne {
	suo.mutation.ClearEnterpriseID()
	return suo
}

// SetStationID sets the "station_id" field.
func (suo *StockUpdateOne) SetStationID(u uint64) *StockUpdateOne {
	suo.mutation.SetStationID(u)
	return suo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableStationID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetStationID(*u)
	}
	return suo
}

// ClearStationID clears the value of the "station_id" field.
func (suo *StockUpdateOne) ClearStationID() *StockUpdateOne {
	suo.mutation.ClearStationID()
	return suo
}

// SetName sets the "name" field.
func (suo *StockUpdateOne) SetName(s string) *StockUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetModel sets the "model" field.
func (suo *StockUpdateOne) SetModel(s string) *StockUpdateOne {
	suo.mutation.SetModel(s)
	return suo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableModel(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetModel(*s)
	}
	return suo
}

// ClearModel clears the value of the "model" field.
func (suo *StockUpdateOne) ClearModel() *StockUpdateOne {
	suo.mutation.ClearModel()
	return suo
}

// SetMaterial sets the "material" field.
func (suo *StockUpdateOne) SetMaterial(s stock.Material) *StockUpdateOne {
	suo.mutation.SetMaterial(s)
	return suo
}

// SetCity sets the "city" edge to the City entity.
func (suo *StockUpdateOne) SetCity(c *City) *StockUpdateOne {
	return suo.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (suo *StockUpdateOne) SetSubscribe(s *Subscribe) *StockUpdateOne {
	return suo.SetSubscribeID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (suo *StockUpdateOne) SetEbike(e *Ebike) *StockUpdateOne {
	return suo.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (suo *StockUpdateOne) SetBrand(e *EbikeBrand) *StockUpdateOne {
	return suo.SetBrandID(e.ID)
}

// SetBattery sets the "battery" edge to the Battery entity.
func (suo *StockUpdateOne) SetBattery(b *Battery) *StockUpdateOne {
	return suo.SetBatteryID(b.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (suo *StockUpdateOne) SetStore(s *Store) *StockUpdateOne {
	return suo.SetStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (suo *StockUpdateOne) SetCabinet(c *Cabinet) *StockUpdateOne {
	return suo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (suo *StockUpdateOne) SetRider(r *Rider) *StockUpdateOne {
	return suo.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (suo *StockUpdateOne) SetEmployee(e *Employee) *StockUpdateOne {
	return suo.SetEmployeeID(e.ID)
}

// SetSpouseID sets the "spouse" edge to the Stock entity by ID.
func (suo *StockUpdateOne) SetSpouseID(id uint64) *StockUpdateOne {
	suo.mutation.SetSpouseID(id)
	return suo
}

// SetNillableSpouseID sets the "spouse" edge to the Stock entity by ID if the given value is not nil.
func (suo *StockUpdateOne) SetNillableSpouseID(id *uint64) *StockUpdateOne {
	if id != nil {
		suo = suo.SetSpouseID(*id)
	}
	return suo
}

// SetSpouse sets the "spouse" edge to the Stock entity.
func (suo *StockUpdateOne) SetSpouse(s *Stock) *StockUpdateOne {
	return suo.SetSpouseID(s.ID)
}

// SetParent sets the "parent" edge to the Stock entity.
func (suo *StockUpdateOne) SetParent(s *Stock) *StockUpdateOne {
	return suo.SetParentID(s.ID)
}

// AddChildIDs adds the "children" edge to the Stock entity by IDs.
func (suo *StockUpdateOne) AddChildIDs(ids ...uint64) *StockUpdateOne {
	suo.mutation.AddChildIDs(ids...)
	return suo
}

// AddChildren adds the "children" edges to the Stock entity.
func (suo *StockUpdateOne) AddChildren(s ...*Stock) *StockUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddChildIDs(ids...)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (suo *StockUpdateOne) SetEnterprise(e *Enterprise) *StockUpdateOne {
	return suo.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (suo *StockUpdateOne) SetStation(e *EnterpriseStation) *StockUpdateOne {
	return suo.SetStationID(e.ID)
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (suo *StockUpdateOne) ClearCity() *StockUpdateOne {
	suo.mutation.ClearCity()
	return suo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (suo *StockUpdateOne) ClearSubscribe() *StockUpdateOne {
	suo.mutation.ClearSubscribe()
	return suo
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (suo *StockUpdateOne) ClearEbike() *StockUpdateOne {
	suo.mutation.ClearEbike()
	return suo
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (suo *StockUpdateOne) ClearBrand() *StockUpdateOne {
	suo.mutation.ClearBrand()
	return suo
}

// ClearBattery clears the "battery" edge to the Battery entity.
func (suo *StockUpdateOne) ClearBattery() *StockUpdateOne {
	suo.mutation.ClearBattery()
	return suo
}

// ClearStore clears the "store" edge to the Store entity.
func (suo *StockUpdateOne) ClearStore() *StockUpdateOne {
	suo.mutation.ClearStore()
	return suo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (suo *StockUpdateOne) ClearCabinet() *StockUpdateOne {
	suo.mutation.ClearCabinet()
	return suo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (suo *StockUpdateOne) ClearRider() *StockUpdateOne {
	suo.mutation.ClearRider()
	return suo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (suo *StockUpdateOne) ClearEmployee() *StockUpdateOne {
	suo.mutation.ClearEmployee()
	return suo
}

// ClearSpouse clears the "spouse" edge to the Stock entity.
func (suo *StockUpdateOne) ClearSpouse() *StockUpdateOne {
	suo.mutation.ClearSpouse()
	return suo
}

// ClearParent clears the "parent" edge to the Stock entity.
func (suo *StockUpdateOne) ClearParent() *StockUpdateOne {
	suo.mutation.ClearParent()
	return suo
}

// ClearChildren clears all "children" edges to the Stock entity.
func (suo *StockUpdateOne) ClearChildren() *StockUpdateOne {
	suo.mutation.ClearChildren()
	return suo
}

// RemoveChildIDs removes the "children" edge to Stock entities by IDs.
func (suo *StockUpdateOne) RemoveChildIDs(ids ...uint64) *StockUpdateOne {
	suo.mutation.RemoveChildIDs(ids...)
	return suo
}

// RemoveChildren removes "children" edges to Stock entities.
func (suo *StockUpdateOne) RemoveChildren(s ...*Stock) *StockUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveChildIDs(ids...)
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (suo *StockUpdateOne) ClearEnterprise() *StockUpdateOne {
	suo.mutation.ClearEnterprise()
	return suo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (suo *StockUpdateOne) ClearStation() *StockUpdateOne {
	suo.mutation.ClearStation()
	return suo
}

// Where appends a list predicates to the StockUpdate builder.
func (suo *StockUpdateOne) Where(ps ...predicate.Stock) *StockUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockUpdateOne) Select(field string, fields ...string) *StockUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stock entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StockUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if stock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stock.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *StockUpdateOne) check() error {
	if v, ok := suo.mutation.Material(); ok {
		if err := stock.MaterialValidator(v); err != nil {
			return &ValidationError{Name: "material", err: fmt.Errorf(`ent: validator failed for field "Stock.material": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StockUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (_node *Stock, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stock.Table, stock.Columns, sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stock.FieldID)
		for _, f := range fields {
			if !stock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(stock.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(stock.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(stock.FieldDeletedAt, field.TypeTime)
	}
	if suo.mutation.CreatorCleared() {
		_spec.ClearField(stock.FieldCreator, field.TypeJSON)
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.SetField(stock.FieldLastModifier, field.TypeJSON, value)
	}
	if suo.mutation.LastModifierCleared() {
		_spec.ClearField(stock.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.SetField(stock.FieldRemark, field.TypeString, value)
	}
	if suo.mutation.RemarkCleared() {
		_spec.ClearField(stock.FieldRemark, field.TypeString)
	}
	if value, ok := suo.mutation.Sn(); ok {
		_spec.SetField(stock.FieldSn, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(stock.FieldType, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedType(); ok {
		_spec.AddField(stock.FieldType, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(stock.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Model(); ok {
		_spec.SetField(stock.FieldModel, field.TypeString, value)
	}
	if suo.mutation.ModelCleared() {
		_spec.ClearField(stock.FieldModel, field.TypeString)
	}
	if value, ok := suo.mutation.Material(); ok {
		_spec.SetField(stock.FieldMaterial, field.TypeEnum, value)
	}
	if suo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.CityTable,
			Columns: []string{stock.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.SubscribeTable,
			Columns: []string{stock.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.EbikeTable,
			Columns: []string{stock.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebike.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BrandTable,
			Columns: []string{stock.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BrandTable,
			Columns: []string{stock.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BatteryTable,
			Columns: []string{stock.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   stock.BatteryTable,
			Columns: []string{stock.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StoreTable,
			Columns: []string{stock.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.CabinetTable,
			Columns: []string{stock.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.RiderTable,
			Columns: []string{stock.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EmployeeTable,
			Columns: []string{stock.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SpouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SpouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stock.SpouseTable,
			Columns: []string{stock.SpouseColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ParentTable,
			Columns: []string{stock.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.ParentTable,
			Columns: []string{stock.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !suo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   stock.ChildrenTable,
			Columns: []string{stock.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EnterpriseTable,
			Columns: []string{stock.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.EnterpriseTable,
			Columns: []string{stock.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StationTable,
			Columns: []string{stock.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.StationTable,
			Columns: []string{stock.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Stock{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
