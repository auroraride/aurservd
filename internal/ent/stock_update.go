// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// StockUpdate is the builder for updating Stock entities.
type StockUpdate struct {
	config
	hooks    []Hook
	mutation *StockMutation
}

// Where appends a list predicates to the StockUpdate builder.
func (su *StockUpdate) Where(ps ...predicate.Stock) *StockUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StockUpdate) SetUpdatedAt(t time.Time) *StockUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *StockUpdate) SetDeletedAt(t time.Time) *StockUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *StockUpdate) SetNillableDeletedAt(t *time.Time) *StockUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *StockUpdate) ClearDeletedAt() *StockUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetLastModifier sets the "last_modifier" field.
func (su *StockUpdate) SetLastModifier(m *model.Modifier) *StockUpdate {
	su.mutation.SetLastModifier(m)
	return su
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (su *StockUpdate) ClearLastModifier() *StockUpdate {
	su.mutation.ClearLastModifier()
	return su
}

// SetRemark sets the "remark" field.
func (su *StockUpdate) SetRemark(s string) *StockUpdate {
	su.mutation.SetRemark(s)
	return su
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (su *StockUpdate) SetNillableRemark(s *string) *StockUpdate {
	if s != nil {
		su.SetRemark(*s)
	}
	return su
}

// ClearRemark clears the value of the "remark" field.
func (su *StockUpdate) ClearRemark() *StockUpdate {
	su.mutation.ClearRemark()
	return su
}

// SetSn sets the "sn" field.
func (su *StockUpdate) SetSn(s string) *StockUpdate {
	su.mutation.SetSn(s)
	return su
}

// SetInboundStoreID sets the "inbound_store_id" field.
func (su *StockUpdate) SetInboundStoreID(u uint64) *StockUpdate {
	su.mutation.SetInboundStoreID(u)
	return su
}

// SetNillableInboundStoreID sets the "inbound_store_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableInboundStoreID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetInboundStoreID(*u)
	}
	return su
}

// ClearInboundStoreID clears the value of the "inbound_store_id" field.
func (su *StockUpdate) ClearInboundStoreID() *StockUpdate {
	su.mutation.ClearInboundStoreID()
	return su
}

// SetOutboundStoreID sets the "outbound_store_id" field.
func (su *StockUpdate) SetOutboundStoreID(u uint64) *StockUpdate {
	su.mutation.SetOutboundStoreID(u)
	return su
}

// SetNillableOutboundStoreID sets the "outbound_store_id" field if the given value is not nil.
func (su *StockUpdate) SetNillableOutboundStoreID(u *uint64) *StockUpdate {
	if u != nil {
		su.SetOutboundStoreID(*u)
	}
	return su
}

// ClearOutboundStoreID clears the value of the "outbound_store_id" field.
func (su *StockUpdate) ClearOutboundStoreID() *StockUpdate {
	su.mutation.ClearOutboundStoreID()
	return su
}

// SetName sets the "name" field.
func (su *StockUpdate) SetName(s string) *StockUpdate {
	su.mutation.SetName(s)
	return su
}

// SetVoltage sets the "voltage" field.
func (su *StockUpdate) SetVoltage(f float64) *StockUpdate {
	su.mutation.ResetVoltage()
	su.mutation.SetVoltage(f)
	return su
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (su *StockUpdate) SetNillableVoltage(f *float64) *StockUpdate {
	if f != nil {
		su.SetVoltage(*f)
	}
	return su
}

// AddVoltage adds f to the "voltage" field.
func (su *StockUpdate) AddVoltage(f float64) *StockUpdate {
	su.mutation.AddVoltage(f)
	return su
}

// ClearVoltage clears the value of the "voltage" field.
func (su *StockUpdate) ClearVoltage() *StockUpdate {
	su.mutation.ClearVoltage()
	return su
}

// SetNum sets the "num" field.
func (su *StockUpdate) SetNum(i int) *StockUpdate {
	su.mutation.ResetNum()
	su.mutation.SetNum(i)
	return su
}

// AddNum adds i to the "num" field.
func (su *StockUpdate) AddNum(i int) *StockUpdate {
	su.mutation.AddNum(i)
	return su
}

// SetInboundStore sets the "inbound_store" edge to the Store entity.
func (su *StockUpdate) SetInboundStore(s *Store) *StockUpdate {
	return su.SetInboundStoreID(s.ID)
}

// SetOutboundStore sets the "outbound_store" edge to the Store entity.
func (su *StockUpdate) SetOutboundStore(s *Store) *StockUpdate {
	return su.SetOutboundStoreID(s.ID)
}

// Mutation returns the StockMutation object of the builder.
func (su *StockUpdate) Mutation() *StockMutation {
	return su.mutation
}

// ClearInboundStore clears the "inbound_store" edge to the Store entity.
func (su *StockUpdate) ClearInboundStore() *StockUpdate {
	su.mutation.ClearInboundStore()
	return su
}

// ClearOutboundStore clears the "outbound_store" edge to the Store entity.
func (su *StockUpdate) ClearOutboundStore() *StockUpdate {
	su.mutation.ClearOutboundStore()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := su.defaults(); err != nil {
		return 0, err
	}
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StockUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		if stock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stock.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (su *StockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stock.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldDeletedAt,
		})
	}
	if su.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stock.FieldDeletedAt,
		})
	}
	if su.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: stock.FieldCreator,
		})
	}
	if value, ok := su.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: stock.FieldLastModifier,
		})
	}
	if su.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: stock.FieldLastModifier,
		})
	}
	if value, ok := su.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldRemark,
		})
	}
	if su.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stock.FieldRemark,
		})
	}
	if value, ok := su.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldSn,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldName,
		})
	}
	if value, ok := su.mutation.Voltage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldVoltage,
		})
	}
	if value, ok := su.mutation.AddedVoltage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldVoltage,
		})
	}
	if su.mutation.VoltageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stock.FieldVoltage,
		})
	}
	if value, ok := su.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldNum,
		})
	}
	if value, ok := su.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldNum,
		})
	}
	if su.mutation.InboundStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.InboundStoreTable,
			Columns: []string{stock.InboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InboundStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.InboundStoreTable,
			Columns: []string{stock.InboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OutboundStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.OutboundStoreTable,
			Columns: []string{stock.OutboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OutboundStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.OutboundStoreTable,
			Columns: []string{stock.OutboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StockUpdateOne is the builder for updating a single Stock entity.
type StockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StockUpdateOne) SetUpdatedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *StockUpdateOne) SetDeletedAt(t time.Time) *StockUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableDeletedAt(t *time.Time) *StockUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *StockUpdateOne) ClearDeletedAt() *StockUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetLastModifier sets the "last_modifier" field.
func (suo *StockUpdateOne) SetLastModifier(m *model.Modifier) *StockUpdateOne {
	suo.mutation.SetLastModifier(m)
	return suo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (suo *StockUpdateOne) ClearLastModifier() *StockUpdateOne {
	suo.mutation.ClearLastModifier()
	return suo
}

// SetRemark sets the "remark" field.
func (suo *StockUpdateOne) SetRemark(s string) *StockUpdateOne {
	suo.mutation.SetRemark(s)
	return suo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableRemark(s *string) *StockUpdateOne {
	if s != nil {
		suo.SetRemark(*s)
	}
	return suo
}

// ClearRemark clears the value of the "remark" field.
func (suo *StockUpdateOne) ClearRemark() *StockUpdateOne {
	suo.mutation.ClearRemark()
	return suo
}

// SetSn sets the "sn" field.
func (suo *StockUpdateOne) SetSn(s string) *StockUpdateOne {
	suo.mutation.SetSn(s)
	return suo
}

// SetInboundStoreID sets the "inbound_store_id" field.
func (suo *StockUpdateOne) SetInboundStoreID(u uint64) *StockUpdateOne {
	suo.mutation.SetInboundStoreID(u)
	return suo
}

// SetNillableInboundStoreID sets the "inbound_store_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableInboundStoreID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetInboundStoreID(*u)
	}
	return suo
}

// ClearInboundStoreID clears the value of the "inbound_store_id" field.
func (suo *StockUpdateOne) ClearInboundStoreID() *StockUpdateOne {
	suo.mutation.ClearInboundStoreID()
	return suo
}

// SetOutboundStoreID sets the "outbound_store_id" field.
func (suo *StockUpdateOne) SetOutboundStoreID(u uint64) *StockUpdateOne {
	suo.mutation.SetOutboundStoreID(u)
	return suo
}

// SetNillableOutboundStoreID sets the "outbound_store_id" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableOutboundStoreID(u *uint64) *StockUpdateOne {
	if u != nil {
		suo.SetOutboundStoreID(*u)
	}
	return suo
}

// ClearOutboundStoreID clears the value of the "outbound_store_id" field.
func (suo *StockUpdateOne) ClearOutboundStoreID() *StockUpdateOne {
	suo.mutation.ClearOutboundStoreID()
	return suo
}

// SetName sets the "name" field.
func (suo *StockUpdateOne) SetName(s string) *StockUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetVoltage sets the "voltage" field.
func (suo *StockUpdateOne) SetVoltage(f float64) *StockUpdateOne {
	suo.mutation.ResetVoltage()
	suo.mutation.SetVoltage(f)
	return suo
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (suo *StockUpdateOne) SetNillableVoltage(f *float64) *StockUpdateOne {
	if f != nil {
		suo.SetVoltage(*f)
	}
	return suo
}

// AddVoltage adds f to the "voltage" field.
func (suo *StockUpdateOne) AddVoltage(f float64) *StockUpdateOne {
	suo.mutation.AddVoltage(f)
	return suo
}

// ClearVoltage clears the value of the "voltage" field.
func (suo *StockUpdateOne) ClearVoltage() *StockUpdateOne {
	suo.mutation.ClearVoltage()
	return suo
}

// SetNum sets the "num" field.
func (suo *StockUpdateOne) SetNum(i int) *StockUpdateOne {
	suo.mutation.ResetNum()
	suo.mutation.SetNum(i)
	return suo
}

// AddNum adds i to the "num" field.
func (suo *StockUpdateOne) AddNum(i int) *StockUpdateOne {
	suo.mutation.AddNum(i)
	return suo
}

// SetInboundStore sets the "inbound_store" edge to the Store entity.
func (suo *StockUpdateOne) SetInboundStore(s *Store) *StockUpdateOne {
	return suo.SetInboundStoreID(s.ID)
}

// SetOutboundStore sets the "outbound_store" edge to the Store entity.
func (suo *StockUpdateOne) SetOutboundStore(s *Store) *StockUpdateOne {
	return suo.SetOutboundStoreID(s.ID)
}

// Mutation returns the StockMutation object of the builder.
func (suo *StockUpdateOne) Mutation() *StockMutation {
	return suo.mutation
}

// ClearInboundStore clears the "inbound_store" edge to the Store entity.
func (suo *StockUpdateOne) ClearInboundStore() *StockUpdateOne {
	suo.mutation.ClearInboundStore()
	return suo
}

// ClearOutboundStore clears the "outbound_store" edge to the Store entity.
func (suo *StockUpdateOne) ClearOutboundStore() *StockUpdateOne {
	suo.mutation.ClearOutboundStore()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockUpdateOne) Select(field string, fields ...string) *StockUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stock entity.
func (suo *StockUpdateOne) Save(ctx context.Context) (*Stock, error) {
	var (
		err  error
		node *Stock
	)
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Stock)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from StockMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockUpdateOne) SaveX(ctx context.Context) *Stock {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StockUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		if stock.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stock.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stock.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suo *StockUpdateOne) sqlSave(ctx context.Context) (_node *Stock, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   stock.Table,
			Columns: stock.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: stock.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stock.FieldID)
		for _, f := range fields {
			if !stock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stock.FieldDeletedAt,
		})
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: stock.FieldDeletedAt,
		})
	}
	if suo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: stock.FieldCreator,
		})
	}
	if value, ok := suo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: stock.FieldLastModifier,
		})
	}
	if suo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: stock.FieldLastModifier,
		})
	}
	if value, ok := suo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldRemark,
		})
	}
	if suo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: stock.FieldRemark,
		})
	}
	if value, ok := suo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldSn,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stock.FieldName,
		})
	}
	if value, ok := suo.mutation.Voltage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldVoltage,
		})
	}
	if value, ok := suo.mutation.AddedVoltage(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: stock.FieldVoltage,
		})
	}
	if suo.mutation.VoltageCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: stock.FieldVoltage,
		})
	}
	if value, ok := suo.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldNum,
		})
	}
	if value, ok := suo.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: stock.FieldNum,
		})
	}
	if suo.mutation.InboundStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.InboundStoreTable,
			Columns: []string{stock.InboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InboundStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.InboundStoreTable,
			Columns: []string{stock.InboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OutboundStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.OutboundStoreTable,
			Columns: []string{stock.OutboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OutboundStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stock.OutboundStoreTable,
			Columns: []string{stock.OutboundStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stock{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
