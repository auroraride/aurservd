// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contracttemplate"
)

// ContractTemplateCreate is the builder for creating a ContractTemplate entity.
type ContractTemplateCreate struct {
	config
	mutation *ContractTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ctc *ContractTemplateCreate) SetCreatedAt(t time.Time) *ContractTemplateCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableCreatedAt(t *time.Time) *ContractTemplateCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *ContractTemplateCreate) SetUpdatedAt(t time.Time) *ContractTemplateCreate {
	ctc.mutation.SetUpdatedAt(t)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableUpdatedAt(t *time.Time) *ContractTemplateCreate {
	if t != nil {
		ctc.SetUpdatedAt(*t)
	}
	return ctc
}

// SetDeletedAt sets the "deleted_at" field.
func (ctc *ContractTemplateCreate) SetDeletedAt(t time.Time) *ContractTemplateCreate {
	ctc.mutation.SetDeletedAt(t)
	return ctc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableDeletedAt(t *time.Time) *ContractTemplateCreate {
	if t != nil {
		ctc.SetDeletedAt(*t)
	}
	return ctc
}

// SetCreator sets the "creator" field.
func (ctc *ContractTemplateCreate) SetCreator(m *model.Modifier) *ContractTemplateCreate {
	ctc.mutation.SetCreator(m)
	return ctc
}

// SetLastModifier sets the "last_modifier" field.
func (ctc *ContractTemplateCreate) SetLastModifier(m *model.Modifier) *ContractTemplateCreate {
	ctc.mutation.SetLastModifier(m)
	return ctc
}

// SetRemark sets the "remark" field.
func (ctc *ContractTemplateCreate) SetRemark(s string) *ContractTemplateCreate {
	ctc.mutation.SetRemark(s)
	return ctc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableRemark(s *string) *ContractTemplateCreate {
	if s != nil {
		ctc.SetRemark(*s)
	}
	return ctc
}

// SetName sets the "name" field.
func (ctc *ContractTemplateCreate) SetName(s string) *ContractTemplateCreate {
	ctc.mutation.SetName(s)
	return ctc
}

// SetURL sets the "url" field.
func (ctc *ContractTemplateCreate) SetURL(s string) *ContractTemplateCreate {
	ctc.mutation.SetURL(s)
	return ctc
}

// SetAimed sets the "aimed" field.
func (ctc *ContractTemplateCreate) SetAimed(u uint8) *ContractTemplateCreate {
	ctc.mutation.SetAimed(u)
	return ctc
}

// SetNillableAimed sets the "aimed" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableAimed(u *uint8) *ContractTemplateCreate {
	if u != nil {
		ctc.SetAimed(*u)
	}
	return ctc
}

// SetPlanType sets the "plan_type" field.
func (ctc *ContractTemplateCreate) SetPlanType(u uint8) *ContractTemplateCreate {
	ctc.mutation.SetPlanType(u)
	return ctc
}

// SetNillablePlanType sets the "plan_type" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillablePlanType(u *uint8) *ContractTemplateCreate {
	if u != nil {
		ctc.SetPlanType(*u)
	}
	return ctc
}

// SetHash sets the "hash" field.
func (ctc *ContractTemplateCreate) SetHash(s string) *ContractTemplateCreate {
	ctc.mutation.SetHash(s)
	return ctc
}

// SetEnable sets the "enable" field.
func (ctc *ContractTemplateCreate) SetEnable(b bool) *ContractTemplateCreate {
	ctc.mutation.SetEnable(b)
	return ctc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctc *ContractTemplateCreate) SetNillableEnable(b *bool) *ContractTemplateCreate {
	if b != nil {
		ctc.SetEnable(*b)
	}
	return ctc
}

// Mutation returns the ContractTemplateMutation object of the builder.
func (ctc *ContractTemplateCreate) Mutation() *ContractTemplateMutation {
	return ctc.mutation
}

// Save creates the ContractTemplate in the database.
func (ctc *ContractTemplateCreate) Save(ctx context.Context) (*ContractTemplate, error) {
	if err := ctc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *ContractTemplateCreate) SaveX(ctx context.Context) *ContractTemplate {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *ContractTemplateCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *ContractTemplateCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *ContractTemplateCreate) defaults() error {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		if contracttemplate.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized contracttemplate.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := contracttemplate.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		if contracttemplate.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contracttemplate.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contracttemplate.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.Aimed(); !ok {
		v := contracttemplate.DefaultAimed
		ctc.mutation.SetAimed(v)
	}
	if _, ok := ctc.mutation.PlanType(); !ok {
		v := contracttemplate.DefaultPlanType
		ctc.mutation.SetPlanType(v)
	}
	if _, ok := ctc.mutation.Enable(); !ok {
		v := contracttemplate.DefaultEnable
		ctc.mutation.SetEnable(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ctc *ContractTemplateCreate) check() error {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ContractTemplate.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ContractTemplate.updated_at"`)}
	}
	if _, ok := ctc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ContractTemplate.name"`)}
	}
	if _, ok := ctc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "ContractTemplate.url"`)}
	}
	if _, ok := ctc.mutation.Aimed(); !ok {
		return &ValidationError{Name: "aimed", err: errors.New(`ent: missing required field "ContractTemplate.aimed"`)}
	}
	if _, ok := ctc.mutation.PlanType(); !ok {
		return &ValidationError{Name: "plan_type", err: errors.New(`ent: missing required field "ContractTemplate.plan_type"`)}
	}
	if _, ok := ctc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "ContractTemplate.hash"`)}
	}
	if _, ok := ctc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "ContractTemplate.enable"`)}
	}
	return nil
}

func (ctc *ContractTemplateCreate) sqlSave(ctx context.Context) (*ContractTemplate, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *ContractTemplateCreate) createSpec() (*ContractTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ContractTemplate{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(contracttemplate.Table, sqlgraph.NewFieldSpec(contracttemplate.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ctc.conflict
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(contracttemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(contracttemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ctc.mutation.DeletedAt(); ok {
		_spec.SetField(contracttemplate.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ctc.mutation.Creator(); ok {
		_spec.SetField(contracttemplate.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ctc.mutation.LastModifier(); ok {
		_spec.SetField(contracttemplate.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ctc.mutation.Remark(); ok {
		_spec.SetField(contracttemplate.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ctc.mutation.Name(); ok {
		_spec.SetField(contracttemplate.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ctc.mutation.URL(); ok {
		_spec.SetField(contracttemplate.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ctc.mutation.Aimed(); ok {
		_spec.SetField(contracttemplate.FieldAimed, field.TypeUint8, value)
		_node.Aimed = value
	}
	if value, ok := ctc.mutation.PlanType(); ok {
		_spec.SetField(contracttemplate.FieldPlanType, field.TypeUint8, value)
		_node.PlanType = value
	}
	if value, ok := ctc.mutation.Hash(); ok {
		_spec.SetField(contracttemplate.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := ctc.mutation.Enable(); ok {
		_spec.SetField(contracttemplate.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContractTemplate.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ctc *ContractTemplateCreate) OnConflict(opts ...sql.ConflictOption) *ContractTemplateUpsertOne {
	ctc.conflict = opts
	return &ContractTemplateUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctc *ContractTemplateCreate) OnConflictColumns(columns ...string) *ContractTemplateUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &ContractTemplateUpsertOne{
		create: ctc,
	}
}

type (
	// ContractTemplateUpsertOne is the builder for "upsert"-ing
	//  one ContractTemplate node.
	ContractTemplateUpsertOne struct {
		create *ContractTemplateCreate
	}

	// ContractTemplateUpsert is the "OnConflict" setter.
	ContractTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractTemplateUpsert) SetUpdatedAt(v time.Time) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateUpdatedAt() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractTemplateUpsert) SetDeletedAt(v time.Time) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateDeletedAt() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ContractTemplateUpsert) ClearDeletedAt() *ContractTemplateUpsert {
	u.SetNull(contracttemplate.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *ContractTemplateUpsert) SetLastModifier(v *model.Modifier) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateLastModifier() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ContractTemplateUpsert) ClearLastModifier() *ContractTemplateUpsert {
	u.SetNull(contracttemplate.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *ContractTemplateUpsert) SetRemark(v string) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateRemark() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractTemplateUpsert) ClearRemark() *ContractTemplateUpsert {
	u.SetNull(contracttemplate.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *ContractTemplateUpsert) SetName(v string) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateName() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldName)
	return u
}

// SetURL sets the "url" field.
func (u *ContractTemplateUpsert) SetURL(v string) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateURL() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldURL)
	return u
}

// SetAimed sets the "aimed" field.
func (u *ContractTemplateUpsert) SetAimed(v uint8) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldAimed, v)
	return u
}

// UpdateAimed sets the "aimed" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateAimed() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldAimed)
	return u
}

// AddAimed adds v to the "aimed" field.
func (u *ContractTemplateUpsert) AddAimed(v uint8) *ContractTemplateUpsert {
	u.Add(contracttemplate.FieldAimed, v)
	return u
}

// SetPlanType sets the "plan_type" field.
func (u *ContractTemplateUpsert) SetPlanType(v uint8) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldPlanType, v)
	return u
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdatePlanType() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldPlanType)
	return u
}

// AddPlanType adds v to the "plan_type" field.
func (u *ContractTemplateUpsert) AddPlanType(v uint8) *ContractTemplateUpsert {
	u.Add(contracttemplate.FieldPlanType, v)
	return u
}

// SetHash sets the "hash" field.
func (u *ContractTemplateUpsert) SetHash(v string) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateHash() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldHash)
	return u
}

// SetEnable sets the "enable" field.
func (u *ContractTemplateUpsert) SetEnable(v bool) *ContractTemplateUpsert {
	u.Set(contracttemplate.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *ContractTemplateUpsert) UpdateEnable() *ContractTemplateUpsert {
	u.SetExcluded(contracttemplate.FieldEnable)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContractTemplateUpsertOne) UpdateNewValues() *ContractTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(contracttemplate.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(contracttemplate.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ContractTemplateUpsertOne) Ignore() *ContractTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractTemplateUpsertOne) DoNothing() *ContractTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractTemplateCreate.OnConflict
// documentation for more info.
func (u *ContractTemplateUpsertOne) Update(set func(*ContractTemplateUpsert)) *ContractTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractTemplateUpsertOne) SetUpdatedAt(v time.Time) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateUpdatedAt() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractTemplateUpsertOne) SetDeletedAt(v time.Time) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateDeletedAt() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ContractTemplateUpsertOne) ClearDeletedAt() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ContractTemplateUpsertOne) SetLastModifier(v *model.Modifier) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateLastModifier() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ContractTemplateUpsertOne) ClearLastModifier() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ContractTemplateUpsertOne) SetRemark(v string) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateRemark() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractTemplateUpsertOne) ClearRemark() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *ContractTemplateUpsertOne) SetName(v string) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateName() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *ContractTemplateUpsertOne) SetURL(v string) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateURL() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateURL()
	})
}

// SetAimed sets the "aimed" field.
func (u *ContractTemplateUpsertOne) SetAimed(v uint8) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetAimed(v)
	})
}

// AddAimed adds v to the "aimed" field.
func (u *ContractTemplateUpsertOne) AddAimed(v uint8) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.AddAimed(v)
	})
}

// UpdateAimed sets the "aimed" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateAimed() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateAimed()
	})
}

// SetPlanType sets the "plan_type" field.
func (u *ContractTemplateUpsertOne) SetPlanType(v uint8) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetPlanType(v)
	})
}

// AddPlanType adds v to the "plan_type" field.
func (u *ContractTemplateUpsertOne) AddPlanType(v uint8) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.AddPlanType(v)
	})
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdatePlanType() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdatePlanType()
	})
}

// SetHash sets the "hash" field.
func (u *ContractTemplateUpsertOne) SetHash(v string) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateHash() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateHash()
	})
}

// SetEnable sets the "enable" field.
func (u *ContractTemplateUpsertOne) SetEnable(v bool) *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *ContractTemplateUpsertOne) UpdateEnable() *ContractTemplateUpsertOne {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateEnable()
	})
}

// Exec executes the query.
func (u *ContractTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContractTemplateUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContractTemplateUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContractTemplateCreateBulk is the builder for creating many ContractTemplate entities in bulk.
type ContractTemplateCreateBulk struct {
	config
	err      error
	builders []*ContractTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the ContractTemplate entities in the database.
func (ctcb *ContractTemplateCreateBulk) Save(ctx context.Context) ([]*ContractTemplate, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*ContractTemplate, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContractTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *ContractTemplateCreateBulk) SaveX(ctx context.Context) []*ContractTemplate {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *ContractTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *ContractTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContractTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContractTemplateUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ctcb *ContractTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContractTemplateUpsertBulk {
	ctcb.conflict = opts
	return &ContractTemplateUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ctcb *ContractTemplateCreateBulk) OnConflictColumns(columns ...string) *ContractTemplateUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &ContractTemplateUpsertBulk{
		create: ctcb,
	}
}

// ContractTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of ContractTemplate nodes.
type ContractTemplateUpsertBulk struct {
	create *ContractTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ContractTemplateUpsertBulk) UpdateNewValues() *ContractTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(contracttemplate.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(contracttemplate.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContractTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ContractTemplateUpsertBulk) Ignore() *ContractTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContractTemplateUpsertBulk) DoNothing() *ContractTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContractTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *ContractTemplateUpsertBulk) Update(set func(*ContractTemplateUpsert)) *ContractTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContractTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ContractTemplateUpsertBulk) SetUpdatedAt(v time.Time) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateUpdatedAt() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ContractTemplateUpsertBulk) SetDeletedAt(v time.Time) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateDeletedAt() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ContractTemplateUpsertBulk) ClearDeletedAt() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ContractTemplateUpsertBulk) SetLastModifier(v *model.Modifier) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateLastModifier() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ContractTemplateUpsertBulk) ClearLastModifier() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ContractTemplateUpsertBulk) SetRemark(v string) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateRemark() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ContractTemplateUpsertBulk) ClearRemark() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *ContractTemplateUpsertBulk) SetName(v string) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateName() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateName()
	})
}

// SetURL sets the "url" field.
func (u *ContractTemplateUpsertBulk) SetURL(v string) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateURL() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateURL()
	})
}

// SetAimed sets the "aimed" field.
func (u *ContractTemplateUpsertBulk) SetAimed(v uint8) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetAimed(v)
	})
}

// AddAimed adds v to the "aimed" field.
func (u *ContractTemplateUpsertBulk) AddAimed(v uint8) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.AddAimed(v)
	})
}

// UpdateAimed sets the "aimed" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateAimed() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateAimed()
	})
}

// SetPlanType sets the "plan_type" field.
func (u *ContractTemplateUpsertBulk) SetPlanType(v uint8) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetPlanType(v)
	})
}

// AddPlanType adds v to the "plan_type" field.
func (u *ContractTemplateUpsertBulk) AddPlanType(v uint8) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.AddPlanType(v)
	})
}

// UpdatePlanType sets the "plan_type" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdatePlanType() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdatePlanType()
	})
}

// SetHash sets the "hash" field.
func (u *ContractTemplateUpsertBulk) SetHash(v string) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateHash() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateHash()
	})
}

// SetEnable sets the "enable" field.
func (u *ContractTemplateUpsertBulk) SetEnable(v bool) *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *ContractTemplateUpsertBulk) UpdateEnable() *ContractTemplateUpsertBulk {
	return u.Update(func(s *ContractTemplateUpsert) {
		s.UpdateEnable()
	})
}

// Exec executes the query.
func (u *ContractTemplateUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContractTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContractTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContractTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
