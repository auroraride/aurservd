// Code generated by ent, DO NOT EDIT.

package planintroduce

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ModelID applies equality check predicate on the "model_id" field. It's identical to ModelIDEQ.
func ModelID(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelID), v))
	})
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ModelIDEQ applies the EQ predicate on the "model_id" field.
func ModelIDEQ(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModelID), v))
	})
}

// ModelIDNEQ applies the NEQ predicate on the "model_id" field.
func ModelIDNEQ(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModelID), v))
	})
}

// ModelIDIn applies the In predicate on the "model_id" field.
func ModelIDIn(vs ...uint64) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldModelID), v...))
	})
}

// ModelIDNotIn applies the NotIn predicate on the "model_id" field.
func ModelIDNotIn(vs ...uint64) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldModelID), v...))
	})
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrandID), v))
	})
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrandID), v...))
	})
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrandID), v...))
	})
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrandID)))
	})
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrandID)))
	})
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImage), v))
	})
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldImage), v...))
	})
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.PlanIntroduce {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldImage), v...))
	})
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImage), v))
	})
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImage), v))
	})
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImage), v))
	})
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImage), v))
	})
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImage), v))
	})
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImage), v))
	})
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImage), v))
	})
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImage), v))
	})
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImage), v))
	})
}

// HasModel applies the HasEdge predicate on the "model" edge.
func HasModel() predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModelWith applies the HasEdge predicate on the "model" edge with a given conditions (other predicates).
func HasModelWith(preds ...predicate.BatteryModel) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ModelTable, ModelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlanIntroduce) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlanIntroduce) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlanIntroduce) predicate.PlanIntroduce {
	return predicate.PlanIntroduce(func(s *sql.Selector) {
		p(s.Not())
	})
}
