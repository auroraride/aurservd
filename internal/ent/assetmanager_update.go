// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assetrole"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetManagerUpdate is the builder for updating AssetManager entities.
type AssetManagerUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetManagerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetManagerUpdate builder.
func (amu *AssetManagerUpdate) Where(ps ...predicate.AssetManager) *AssetManagerUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AssetManagerUpdate) SetUpdatedAt(t time.Time) *AssetManagerUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// SetDeletedAt sets the "deleted_at" field.
func (amu *AssetManagerUpdate) SetDeletedAt(t time.Time) *AssetManagerUpdate {
	amu.mutation.SetDeletedAt(t)
	return amu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableDeletedAt(t *time.Time) *AssetManagerUpdate {
	if t != nil {
		amu.SetDeletedAt(*t)
	}
	return amu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amu *AssetManagerUpdate) ClearDeletedAt() *AssetManagerUpdate {
	amu.mutation.ClearDeletedAt()
	return amu
}

// SetLastModifier sets the "last_modifier" field.
func (amu *AssetManagerUpdate) SetLastModifier(m *model.Modifier) *AssetManagerUpdate {
	amu.mutation.SetLastModifier(m)
	return amu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (amu *AssetManagerUpdate) ClearLastModifier() *AssetManagerUpdate {
	amu.mutation.ClearLastModifier()
	return amu
}

// SetRemark sets the "remark" field.
func (amu *AssetManagerUpdate) SetRemark(s string) *AssetManagerUpdate {
	amu.mutation.SetRemark(s)
	return amu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableRemark(s *string) *AssetManagerUpdate {
	if s != nil {
		amu.SetRemark(*s)
	}
	return amu
}

// ClearRemark clears the value of the "remark" field.
func (amu *AssetManagerUpdate) ClearRemark() *AssetManagerUpdate {
	amu.mutation.ClearRemark()
	return amu
}

// SetName sets the "name" field.
func (amu *AssetManagerUpdate) SetName(s string) *AssetManagerUpdate {
	amu.mutation.SetName(s)
	return amu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableName(s *string) *AssetManagerUpdate {
	if s != nil {
		amu.SetName(*s)
	}
	return amu
}

// SetPhone sets the "phone" field.
func (amu *AssetManagerUpdate) SetPhone(s string) *AssetManagerUpdate {
	amu.mutation.SetPhone(s)
	return amu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillablePhone(s *string) *AssetManagerUpdate {
	if s != nil {
		amu.SetPhone(*s)
	}
	return amu
}

// SetPassword sets the "password" field.
func (amu *AssetManagerUpdate) SetPassword(s string) *AssetManagerUpdate {
	amu.mutation.SetPassword(s)
	return amu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillablePassword(s *string) *AssetManagerUpdate {
	if s != nil {
		amu.SetPassword(*s)
	}
	return amu
}

// SetRoleID sets the "role_id" field.
func (amu *AssetManagerUpdate) SetRoleID(u uint64) *AssetManagerUpdate {
	amu.mutation.SetRoleID(u)
	return amu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableRoleID(u *uint64) *AssetManagerUpdate {
	if u != nil {
		amu.SetRoleID(*u)
	}
	return amu
}

// ClearRoleID clears the value of the "role_id" field.
func (amu *AssetManagerUpdate) ClearRoleID() *AssetManagerUpdate {
	amu.mutation.ClearRoleID()
	return amu
}

// SetMiniEnable sets the "mini_enable" field.
func (amu *AssetManagerUpdate) SetMiniEnable(b bool) *AssetManagerUpdate {
	amu.mutation.SetMiniEnable(b)
	return amu
}

// SetNillableMiniEnable sets the "mini_enable" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableMiniEnable(b *bool) *AssetManagerUpdate {
	if b != nil {
		amu.SetMiniEnable(*b)
	}
	return amu
}

// SetMiniLimit sets the "mini_limit" field.
func (amu *AssetManagerUpdate) SetMiniLimit(u uint) *AssetManagerUpdate {
	amu.mutation.ResetMiniLimit()
	amu.mutation.SetMiniLimit(u)
	return amu
}

// SetNillableMiniLimit sets the "mini_limit" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableMiniLimit(u *uint) *AssetManagerUpdate {
	if u != nil {
		amu.SetMiniLimit(*u)
	}
	return amu
}

// AddMiniLimit adds u to the "mini_limit" field.
func (amu *AssetManagerUpdate) AddMiniLimit(u int) *AssetManagerUpdate {
	amu.mutation.AddMiniLimit(u)
	return amu
}

// SetLastSigninAt sets the "last_signin_at" field.
func (amu *AssetManagerUpdate) SetLastSigninAt(t time.Time) *AssetManagerUpdate {
	amu.mutation.SetLastSigninAt(t)
	return amu
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableLastSigninAt(t *time.Time) *AssetManagerUpdate {
	if t != nil {
		amu.SetLastSigninAt(*t)
	}
	return amu
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (amu *AssetManagerUpdate) ClearLastSigninAt() *AssetManagerUpdate {
	amu.mutation.ClearLastSigninAt()
	return amu
}

// SetWarehouseID sets the "warehouse_id" field.
func (amu *AssetManagerUpdate) SetWarehouseID(u uint64) *AssetManagerUpdate {
	amu.mutation.SetWarehouseID(u)
	return amu
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableWarehouseID(u *uint64) *AssetManagerUpdate {
	if u != nil {
		amu.SetWarehouseID(*u)
	}
	return amu
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (amu *AssetManagerUpdate) ClearWarehouseID() *AssetManagerUpdate {
	amu.mutation.ClearWarehouseID()
	return amu
}

// SetRole sets the "role" edge to the AssetRole entity.
func (amu *AssetManagerUpdate) SetRole(a *AssetRole) *AssetManagerUpdate {
	return amu.SetRoleID(a.ID)
}

// AddBelongWarehouseIDs adds the "belong_warehouses" edge to the Warehouse entity by IDs.
func (amu *AssetManagerUpdate) AddBelongWarehouseIDs(ids ...uint64) *AssetManagerUpdate {
	amu.mutation.AddBelongWarehouseIDs(ids...)
	return amu
}

// AddBelongWarehouses adds the "belong_warehouses" edges to the Warehouse entity.
func (amu *AssetManagerUpdate) AddBelongWarehouses(w ...*Warehouse) *AssetManagerUpdate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return amu.AddBelongWarehouseIDs(ids...)
}

// SetDutyWarehouseID sets the "duty_warehouse" edge to the Warehouse entity by ID.
func (amu *AssetManagerUpdate) SetDutyWarehouseID(id uint64) *AssetManagerUpdate {
	amu.mutation.SetDutyWarehouseID(id)
	return amu
}

// SetNillableDutyWarehouseID sets the "duty_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (amu *AssetManagerUpdate) SetNillableDutyWarehouseID(id *uint64) *AssetManagerUpdate {
	if id != nil {
		amu = amu.SetDutyWarehouseID(*id)
	}
	return amu
}

// SetDutyWarehouse sets the "duty_warehouse" edge to the Warehouse entity.
func (amu *AssetManagerUpdate) SetDutyWarehouse(w *Warehouse) *AssetManagerUpdate {
	return amu.SetDutyWarehouseID(w.ID)
}

// Mutation returns the AssetManagerMutation object of the builder.
func (amu *AssetManagerUpdate) Mutation() *AssetManagerMutation {
	return amu.mutation
}

// ClearRole clears the "role" edge to the AssetRole entity.
func (amu *AssetManagerUpdate) ClearRole() *AssetManagerUpdate {
	amu.mutation.ClearRole()
	return amu
}

// ClearBelongWarehouses clears all "belong_warehouses" edges to the Warehouse entity.
func (amu *AssetManagerUpdate) ClearBelongWarehouses() *AssetManagerUpdate {
	amu.mutation.ClearBelongWarehouses()
	return amu
}

// RemoveBelongWarehouseIDs removes the "belong_warehouses" edge to Warehouse entities by IDs.
func (amu *AssetManagerUpdate) RemoveBelongWarehouseIDs(ids ...uint64) *AssetManagerUpdate {
	amu.mutation.RemoveBelongWarehouseIDs(ids...)
	return amu
}

// RemoveBelongWarehouses removes "belong_warehouses" edges to Warehouse entities.
func (amu *AssetManagerUpdate) RemoveBelongWarehouses(w ...*Warehouse) *AssetManagerUpdate {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return amu.RemoveBelongWarehouseIDs(ids...)
}

// ClearDutyWarehouse clears the "duty_warehouse" edge to the Warehouse entity.
func (amu *AssetManagerUpdate) ClearDutyWarehouse() *AssetManagerUpdate {
	amu.mutation.ClearDutyWarehouse()
	return amu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AssetManagerUpdate) Save(ctx context.Context) (int, error) {
	if err := amu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AssetManagerUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AssetManagerUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AssetManagerUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AssetManagerUpdate) defaults() error {
	if _, ok := amu.mutation.UpdatedAt(); !ok {
		if assetmanager.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmanager.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetmanager.UpdateDefaultUpdatedAt()
		amu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (amu *AssetManagerUpdate) check() error {
	if v, ok := amu.mutation.Name(); ok {
		if err := assetmanager.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AssetManager.name": %w`, err)}
		}
	}
	if v, ok := amu.mutation.Phone(); ok {
		if err := assetmanager.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "AssetManager.phone": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amu *AssetManagerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetManagerUpdate {
	amu.modifiers = append(amu.modifiers, modifiers...)
	return amu
}

func (amu *AssetManagerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := amu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetmanager.Table, assetmanager.Columns, sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amu.mutation.DeletedAt(); ok {
		_spec.SetField(assetmanager.FieldDeletedAt, field.TypeTime, value)
	}
	if amu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetmanager.FieldDeletedAt, field.TypeTime)
	}
	if amu.mutation.CreatorCleared() {
		_spec.ClearField(assetmanager.FieldCreator, field.TypeJSON)
	}
	if value, ok := amu.mutation.LastModifier(); ok {
		_spec.SetField(assetmanager.FieldLastModifier, field.TypeJSON, value)
	}
	if amu.mutation.LastModifierCleared() {
		_spec.ClearField(assetmanager.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := amu.mutation.Remark(); ok {
		_spec.SetField(assetmanager.FieldRemark, field.TypeString, value)
	}
	if amu.mutation.RemarkCleared() {
		_spec.ClearField(assetmanager.FieldRemark, field.TypeString)
	}
	if value, ok := amu.mutation.Name(); ok {
		_spec.SetField(assetmanager.FieldName, field.TypeString, value)
	}
	if value, ok := amu.mutation.Phone(); ok {
		_spec.SetField(assetmanager.FieldPhone, field.TypeString, value)
	}
	if value, ok := amu.mutation.Password(); ok {
		_spec.SetField(assetmanager.FieldPassword, field.TypeString, value)
	}
	if value, ok := amu.mutation.MiniEnable(); ok {
		_spec.SetField(assetmanager.FieldMiniEnable, field.TypeBool, value)
	}
	if value, ok := amu.mutation.MiniLimit(); ok {
		_spec.SetField(assetmanager.FieldMiniLimit, field.TypeUint, value)
	}
	if value, ok := amu.mutation.AddedMiniLimit(); ok {
		_spec.AddField(assetmanager.FieldMiniLimit, field.TypeUint, value)
	}
	if value, ok := amu.mutation.LastSigninAt(); ok {
		_spec.SetField(assetmanager.FieldLastSigninAt, field.TypeTime, value)
	}
	if amu.mutation.LastSigninAtCleared() {
		_spec.ClearField(assetmanager.FieldLastSigninAt, field.TypeTime)
	}
	if amu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.RoleTable,
			Columns: []string{assetmanager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.RoleTable,
			Columns: []string{assetmanager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.BelongWarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.RemovedBelongWarehousesIDs(); len(nodes) > 0 && !amu.mutation.BelongWarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.BelongWarehousesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amu.mutation.DutyWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.DutyWarehouseTable,
			Columns: []string{assetmanager.DutyWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amu.mutation.DutyWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.DutyWarehouseTable,
			Columns: []string{assetmanager.DutyWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(amu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AssetManagerUpdateOne is the builder for updating a single AssetManager entity.
type AssetManagerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetManagerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AssetManagerUpdateOne) SetUpdatedAt(t time.Time) *AssetManagerUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// SetDeletedAt sets the "deleted_at" field.
func (amuo *AssetManagerUpdateOne) SetDeletedAt(t time.Time) *AssetManagerUpdateOne {
	amuo.mutation.SetDeletedAt(t)
	return amuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetManagerUpdateOne {
	if t != nil {
		amuo.SetDeletedAt(*t)
	}
	return amuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (amuo *AssetManagerUpdateOne) ClearDeletedAt() *AssetManagerUpdateOne {
	amuo.mutation.ClearDeletedAt()
	return amuo
}

// SetLastModifier sets the "last_modifier" field.
func (amuo *AssetManagerUpdateOne) SetLastModifier(m *model.Modifier) *AssetManagerUpdateOne {
	amuo.mutation.SetLastModifier(m)
	return amuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (amuo *AssetManagerUpdateOne) ClearLastModifier() *AssetManagerUpdateOne {
	amuo.mutation.ClearLastModifier()
	return amuo
}

// SetRemark sets the "remark" field.
func (amuo *AssetManagerUpdateOne) SetRemark(s string) *AssetManagerUpdateOne {
	amuo.mutation.SetRemark(s)
	return amuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableRemark(s *string) *AssetManagerUpdateOne {
	if s != nil {
		amuo.SetRemark(*s)
	}
	return amuo
}

// ClearRemark clears the value of the "remark" field.
func (amuo *AssetManagerUpdateOne) ClearRemark() *AssetManagerUpdateOne {
	amuo.mutation.ClearRemark()
	return amuo
}

// SetName sets the "name" field.
func (amuo *AssetManagerUpdateOne) SetName(s string) *AssetManagerUpdateOne {
	amuo.mutation.SetName(s)
	return amuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableName(s *string) *AssetManagerUpdateOne {
	if s != nil {
		amuo.SetName(*s)
	}
	return amuo
}

// SetPhone sets the "phone" field.
func (amuo *AssetManagerUpdateOne) SetPhone(s string) *AssetManagerUpdateOne {
	amuo.mutation.SetPhone(s)
	return amuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillablePhone(s *string) *AssetManagerUpdateOne {
	if s != nil {
		amuo.SetPhone(*s)
	}
	return amuo
}

// SetPassword sets the "password" field.
func (amuo *AssetManagerUpdateOne) SetPassword(s string) *AssetManagerUpdateOne {
	amuo.mutation.SetPassword(s)
	return amuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillablePassword(s *string) *AssetManagerUpdateOne {
	if s != nil {
		amuo.SetPassword(*s)
	}
	return amuo
}

// SetRoleID sets the "role_id" field.
func (amuo *AssetManagerUpdateOne) SetRoleID(u uint64) *AssetManagerUpdateOne {
	amuo.mutation.SetRoleID(u)
	return amuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableRoleID(u *uint64) *AssetManagerUpdateOne {
	if u != nil {
		amuo.SetRoleID(*u)
	}
	return amuo
}

// ClearRoleID clears the value of the "role_id" field.
func (amuo *AssetManagerUpdateOne) ClearRoleID() *AssetManagerUpdateOne {
	amuo.mutation.ClearRoleID()
	return amuo
}

// SetMiniEnable sets the "mini_enable" field.
func (amuo *AssetManagerUpdateOne) SetMiniEnable(b bool) *AssetManagerUpdateOne {
	amuo.mutation.SetMiniEnable(b)
	return amuo
}

// SetNillableMiniEnable sets the "mini_enable" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableMiniEnable(b *bool) *AssetManagerUpdateOne {
	if b != nil {
		amuo.SetMiniEnable(*b)
	}
	return amuo
}

// SetMiniLimit sets the "mini_limit" field.
func (amuo *AssetManagerUpdateOne) SetMiniLimit(u uint) *AssetManagerUpdateOne {
	amuo.mutation.ResetMiniLimit()
	amuo.mutation.SetMiniLimit(u)
	return amuo
}

// SetNillableMiniLimit sets the "mini_limit" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableMiniLimit(u *uint) *AssetManagerUpdateOne {
	if u != nil {
		amuo.SetMiniLimit(*u)
	}
	return amuo
}

// AddMiniLimit adds u to the "mini_limit" field.
func (amuo *AssetManagerUpdateOne) AddMiniLimit(u int) *AssetManagerUpdateOne {
	amuo.mutation.AddMiniLimit(u)
	return amuo
}

// SetLastSigninAt sets the "last_signin_at" field.
func (amuo *AssetManagerUpdateOne) SetLastSigninAt(t time.Time) *AssetManagerUpdateOne {
	amuo.mutation.SetLastSigninAt(t)
	return amuo
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableLastSigninAt(t *time.Time) *AssetManagerUpdateOne {
	if t != nil {
		amuo.SetLastSigninAt(*t)
	}
	return amuo
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (amuo *AssetManagerUpdateOne) ClearLastSigninAt() *AssetManagerUpdateOne {
	amuo.mutation.ClearLastSigninAt()
	return amuo
}

// SetWarehouseID sets the "warehouse_id" field.
func (amuo *AssetManagerUpdateOne) SetWarehouseID(u uint64) *AssetManagerUpdateOne {
	amuo.mutation.SetWarehouseID(u)
	return amuo
}

// SetNillableWarehouseID sets the "warehouse_id" field if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableWarehouseID(u *uint64) *AssetManagerUpdateOne {
	if u != nil {
		amuo.SetWarehouseID(*u)
	}
	return amuo
}

// ClearWarehouseID clears the value of the "warehouse_id" field.
func (amuo *AssetManagerUpdateOne) ClearWarehouseID() *AssetManagerUpdateOne {
	amuo.mutation.ClearWarehouseID()
	return amuo
}

// SetRole sets the "role" edge to the AssetRole entity.
func (amuo *AssetManagerUpdateOne) SetRole(a *AssetRole) *AssetManagerUpdateOne {
	return amuo.SetRoleID(a.ID)
}

// AddBelongWarehouseIDs adds the "belong_warehouses" edge to the Warehouse entity by IDs.
func (amuo *AssetManagerUpdateOne) AddBelongWarehouseIDs(ids ...uint64) *AssetManagerUpdateOne {
	amuo.mutation.AddBelongWarehouseIDs(ids...)
	return amuo
}

// AddBelongWarehouses adds the "belong_warehouses" edges to the Warehouse entity.
func (amuo *AssetManagerUpdateOne) AddBelongWarehouses(w ...*Warehouse) *AssetManagerUpdateOne {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return amuo.AddBelongWarehouseIDs(ids...)
}

// SetDutyWarehouseID sets the "duty_warehouse" edge to the Warehouse entity by ID.
func (amuo *AssetManagerUpdateOne) SetDutyWarehouseID(id uint64) *AssetManagerUpdateOne {
	amuo.mutation.SetDutyWarehouseID(id)
	return amuo
}

// SetNillableDutyWarehouseID sets the "duty_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (amuo *AssetManagerUpdateOne) SetNillableDutyWarehouseID(id *uint64) *AssetManagerUpdateOne {
	if id != nil {
		amuo = amuo.SetDutyWarehouseID(*id)
	}
	return amuo
}

// SetDutyWarehouse sets the "duty_warehouse" edge to the Warehouse entity.
func (amuo *AssetManagerUpdateOne) SetDutyWarehouse(w *Warehouse) *AssetManagerUpdateOne {
	return amuo.SetDutyWarehouseID(w.ID)
}

// Mutation returns the AssetManagerMutation object of the builder.
func (amuo *AssetManagerUpdateOne) Mutation() *AssetManagerMutation {
	return amuo.mutation
}

// ClearRole clears the "role" edge to the AssetRole entity.
func (amuo *AssetManagerUpdateOne) ClearRole() *AssetManagerUpdateOne {
	amuo.mutation.ClearRole()
	return amuo
}

// ClearBelongWarehouses clears all "belong_warehouses" edges to the Warehouse entity.
func (amuo *AssetManagerUpdateOne) ClearBelongWarehouses() *AssetManagerUpdateOne {
	amuo.mutation.ClearBelongWarehouses()
	return amuo
}

// RemoveBelongWarehouseIDs removes the "belong_warehouses" edge to Warehouse entities by IDs.
func (amuo *AssetManagerUpdateOne) RemoveBelongWarehouseIDs(ids ...uint64) *AssetManagerUpdateOne {
	amuo.mutation.RemoveBelongWarehouseIDs(ids...)
	return amuo
}

// RemoveBelongWarehouses removes "belong_warehouses" edges to Warehouse entities.
func (amuo *AssetManagerUpdateOne) RemoveBelongWarehouses(w ...*Warehouse) *AssetManagerUpdateOne {
	ids := make([]uint64, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return amuo.RemoveBelongWarehouseIDs(ids...)
}

// ClearDutyWarehouse clears the "duty_warehouse" edge to the Warehouse entity.
func (amuo *AssetManagerUpdateOne) ClearDutyWarehouse() *AssetManagerUpdateOne {
	amuo.mutation.ClearDutyWarehouse()
	return amuo
}

// Where appends a list predicates to the AssetManagerUpdate builder.
func (amuo *AssetManagerUpdateOne) Where(ps ...predicate.AssetManager) *AssetManagerUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AssetManagerUpdateOne) Select(field string, fields ...string) *AssetManagerUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AssetManager entity.
func (amuo *AssetManagerUpdateOne) Save(ctx context.Context) (*AssetManager, error) {
	if err := amuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AssetManagerUpdateOne) SaveX(ctx context.Context) *AssetManager {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AssetManagerUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AssetManagerUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AssetManagerUpdateOne) defaults() error {
	if _, ok := amuo.mutation.UpdatedAt(); !ok {
		if assetmanager.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetmanager.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetmanager.UpdateDefaultUpdatedAt()
		amuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (amuo *AssetManagerUpdateOne) check() error {
	if v, ok := amuo.mutation.Name(); ok {
		if err := assetmanager.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AssetManager.name": %w`, err)}
		}
	}
	if v, ok := amuo.mutation.Phone(); ok {
		if err := assetmanager.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "AssetManager.phone": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amuo *AssetManagerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetManagerUpdateOne {
	amuo.modifiers = append(amuo.modifiers, modifiers...)
	return amuo
}

func (amuo *AssetManagerUpdateOne) sqlSave(ctx context.Context) (_node *AssetManager, err error) {
	if err := amuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assetmanager.Table, assetmanager.Columns, sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetManager.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetmanager.FieldID)
		for _, f := range fields {
			if !assetmanager.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetmanager.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetmanager.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amuo.mutation.DeletedAt(); ok {
		_spec.SetField(assetmanager.FieldDeletedAt, field.TypeTime, value)
	}
	if amuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetmanager.FieldDeletedAt, field.TypeTime)
	}
	if amuo.mutation.CreatorCleared() {
		_spec.ClearField(assetmanager.FieldCreator, field.TypeJSON)
	}
	if value, ok := amuo.mutation.LastModifier(); ok {
		_spec.SetField(assetmanager.FieldLastModifier, field.TypeJSON, value)
	}
	if amuo.mutation.LastModifierCleared() {
		_spec.ClearField(assetmanager.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := amuo.mutation.Remark(); ok {
		_spec.SetField(assetmanager.FieldRemark, field.TypeString, value)
	}
	if amuo.mutation.RemarkCleared() {
		_spec.ClearField(assetmanager.FieldRemark, field.TypeString)
	}
	if value, ok := amuo.mutation.Name(); ok {
		_spec.SetField(assetmanager.FieldName, field.TypeString, value)
	}
	if value, ok := amuo.mutation.Phone(); ok {
		_spec.SetField(assetmanager.FieldPhone, field.TypeString, value)
	}
	if value, ok := amuo.mutation.Password(); ok {
		_spec.SetField(assetmanager.FieldPassword, field.TypeString, value)
	}
	if value, ok := amuo.mutation.MiniEnable(); ok {
		_spec.SetField(assetmanager.FieldMiniEnable, field.TypeBool, value)
	}
	if value, ok := amuo.mutation.MiniLimit(); ok {
		_spec.SetField(assetmanager.FieldMiniLimit, field.TypeUint, value)
	}
	if value, ok := amuo.mutation.AddedMiniLimit(); ok {
		_spec.AddField(assetmanager.FieldMiniLimit, field.TypeUint, value)
	}
	if value, ok := amuo.mutation.LastSigninAt(); ok {
		_spec.SetField(assetmanager.FieldLastSigninAt, field.TypeTime, value)
	}
	if amuo.mutation.LastSigninAtCleared() {
		_spec.ClearField(assetmanager.FieldLastSigninAt, field.TypeTime)
	}
	if amuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.RoleTable,
			Columns: []string{assetmanager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.RoleTable,
			Columns: []string{assetmanager.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetrole.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.BelongWarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.RemovedBelongWarehousesIDs(); len(nodes) > 0 && !amuo.mutation.BelongWarehousesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.BelongWarehousesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   assetmanager.BelongWarehousesTable,
			Columns: assetmanager.BelongWarehousesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if amuo.mutation.DutyWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.DutyWarehouseTable,
			Columns: []string{assetmanager.DutyWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amuo.mutation.DutyWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetmanager.DutyWarehouseTable,
			Columns: []string{assetmanager.DutyWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(amuo.modifiers...)
	_node = &AssetManager{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetmanager.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
