// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/goods"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegoods"
)

// StoreGoodsUpdate is the builder for updating StoreGoods entities.
type StoreGoodsUpdate struct {
	config
	hooks     []Hook
	mutation  *StoreGoodsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StoreGoodsUpdate builder.
func (sgu *StoreGoodsUpdate) Where(ps ...predicate.StoreGoods) *StoreGoodsUpdate {
	sgu.mutation.Where(ps...)
	return sgu
}

// SetUpdatedAt sets the "updated_at" field.
func (sgu *StoreGoodsUpdate) SetUpdatedAt(t time.Time) *StoreGoodsUpdate {
	sgu.mutation.SetUpdatedAt(t)
	return sgu
}

// SetDeletedAt sets the "deleted_at" field.
func (sgu *StoreGoodsUpdate) SetDeletedAt(t time.Time) *StoreGoodsUpdate {
	sgu.mutation.SetDeletedAt(t)
	return sgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sgu *StoreGoodsUpdate) SetNillableDeletedAt(t *time.Time) *StoreGoodsUpdate {
	if t != nil {
		sgu.SetDeletedAt(*t)
	}
	return sgu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sgu *StoreGoodsUpdate) ClearDeletedAt() *StoreGoodsUpdate {
	sgu.mutation.ClearDeletedAt()
	return sgu
}

// SetGoodsID sets the "goods_id" field.
func (sgu *StoreGoodsUpdate) SetGoodsID(u uint64) *StoreGoodsUpdate {
	sgu.mutation.SetGoodsID(u)
	return sgu
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (sgu *StoreGoodsUpdate) SetNillableGoodsID(u *uint64) *StoreGoodsUpdate {
	if u != nil {
		sgu.SetGoodsID(*u)
	}
	return sgu
}

// ClearGoodsID clears the value of the "goods_id" field.
func (sgu *StoreGoodsUpdate) ClearGoodsID() *StoreGoodsUpdate {
	sgu.mutation.ClearGoodsID()
	return sgu
}

// SetStoreID sets the "store_id" field.
func (sgu *StoreGoodsUpdate) SetStoreID(u uint64) *StoreGoodsUpdate {
	sgu.mutation.SetStoreID(u)
	return sgu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (sgu *StoreGoodsUpdate) SetNillableStoreID(u *uint64) *StoreGoodsUpdate {
	if u != nil {
		sgu.SetStoreID(*u)
	}
	return sgu
}

// ClearStoreID clears the value of the "store_id" field.
func (sgu *StoreGoodsUpdate) ClearStoreID() *StoreGoodsUpdate {
	sgu.mutation.ClearStoreID()
	return sgu
}

// SetGoods sets the "goods" edge to the Goods entity.
func (sgu *StoreGoodsUpdate) SetGoods(g *Goods) *StoreGoodsUpdate {
	return sgu.SetGoodsID(g.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (sgu *StoreGoodsUpdate) SetStore(s *Store) *StoreGoodsUpdate {
	return sgu.SetStoreID(s.ID)
}

// Mutation returns the StoreGoodsMutation object of the builder.
func (sgu *StoreGoodsUpdate) Mutation() *StoreGoodsMutation {
	return sgu.mutation
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (sgu *StoreGoodsUpdate) ClearGoods() *StoreGoodsUpdate {
	sgu.mutation.ClearGoods()
	return sgu
}

// ClearStore clears the "store" edge to the Store entity.
func (sgu *StoreGoodsUpdate) ClearStore() *StoreGoodsUpdate {
	sgu.mutation.ClearStore()
	return sgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sgu *StoreGoodsUpdate) Save(ctx context.Context) (int, error) {
	sgu.defaults()
	return withHooks(ctx, sgu.sqlSave, sgu.mutation, sgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sgu *StoreGoodsUpdate) SaveX(ctx context.Context) int {
	affected, err := sgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgu *StoreGoodsUpdate) Exec(ctx context.Context) error {
	_, err := sgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgu *StoreGoodsUpdate) ExecX(ctx context.Context) {
	if err := sgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sgu *StoreGoodsUpdate) defaults() {
	if _, ok := sgu.mutation.UpdatedAt(); !ok {
		v := storegoods.UpdateDefaultUpdatedAt()
		sgu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sgu *StoreGoodsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreGoodsUpdate {
	sgu.modifiers = append(sgu.modifiers, modifiers...)
	return sgu
}

func (sgu *StoreGoodsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(storegoods.Table, storegoods.Columns, sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64))
	if ps := sgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgu.mutation.UpdatedAt(); ok {
		_spec.SetField(storegoods.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sgu.mutation.DeletedAt(); ok {
		_spec.SetField(storegoods.FieldDeletedAt, field.TypeTime, value)
	}
	if sgu.mutation.DeletedAtCleared() {
		_spec.ClearField(storegoods.FieldDeletedAt, field.TypeTime)
	}
	if sgu.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.GoodsTable,
			Columns: []string{storegoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.GoodsTable,
			Columns: []string{storegoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sgu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.StoreTable,
			Columns: []string{storegoods.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sgu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.StoreTable,
			Columns: []string{storegoods.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storegoods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sgu.mutation.done = true
	return n, nil
}

// StoreGoodsUpdateOne is the builder for updating a single StoreGoods entity.
type StoreGoodsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StoreGoodsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sguo *StoreGoodsUpdateOne) SetUpdatedAt(t time.Time) *StoreGoodsUpdateOne {
	sguo.mutation.SetUpdatedAt(t)
	return sguo
}

// SetDeletedAt sets the "deleted_at" field.
func (sguo *StoreGoodsUpdateOne) SetDeletedAt(t time.Time) *StoreGoodsUpdateOne {
	sguo.mutation.SetDeletedAt(t)
	return sguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sguo *StoreGoodsUpdateOne) SetNillableDeletedAt(t *time.Time) *StoreGoodsUpdateOne {
	if t != nil {
		sguo.SetDeletedAt(*t)
	}
	return sguo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sguo *StoreGoodsUpdateOne) ClearDeletedAt() *StoreGoodsUpdateOne {
	sguo.mutation.ClearDeletedAt()
	return sguo
}

// SetGoodsID sets the "goods_id" field.
func (sguo *StoreGoodsUpdateOne) SetGoodsID(u uint64) *StoreGoodsUpdateOne {
	sguo.mutation.SetGoodsID(u)
	return sguo
}

// SetNillableGoodsID sets the "goods_id" field if the given value is not nil.
func (sguo *StoreGoodsUpdateOne) SetNillableGoodsID(u *uint64) *StoreGoodsUpdateOne {
	if u != nil {
		sguo.SetGoodsID(*u)
	}
	return sguo
}

// ClearGoodsID clears the value of the "goods_id" field.
func (sguo *StoreGoodsUpdateOne) ClearGoodsID() *StoreGoodsUpdateOne {
	sguo.mutation.ClearGoodsID()
	return sguo
}

// SetStoreID sets the "store_id" field.
func (sguo *StoreGoodsUpdateOne) SetStoreID(u uint64) *StoreGoodsUpdateOne {
	sguo.mutation.SetStoreID(u)
	return sguo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (sguo *StoreGoodsUpdateOne) SetNillableStoreID(u *uint64) *StoreGoodsUpdateOne {
	if u != nil {
		sguo.SetStoreID(*u)
	}
	return sguo
}

// ClearStoreID clears the value of the "store_id" field.
func (sguo *StoreGoodsUpdateOne) ClearStoreID() *StoreGoodsUpdateOne {
	sguo.mutation.ClearStoreID()
	return sguo
}

// SetGoods sets the "goods" edge to the Goods entity.
func (sguo *StoreGoodsUpdateOne) SetGoods(g *Goods) *StoreGoodsUpdateOne {
	return sguo.SetGoodsID(g.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (sguo *StoreGoodsUpdateOne) SetStore(s *Store) *StoreGoodsUpdateOne {
	return sguo.SetStoreID(s.ID)
}

// Mutation returns the StoreGoodsMutation object of the builder.
func (sguo *StoreGoodsUpdateOne) Mutation() *StoreGoodsMutation {
	return sguo.mutation
}

// ClearGoods clears the "goods" edge to the Goods entity.
func (sguo *StoreGoodsUpdateOne) ClearGoods() *StoreGoodsUpdateOne {
	sguo.mutation.ClearGoods()
	return sguo
}

// ClearStore clears the "store" edge to the Store entity.
func (sguo *StoreGoodsUpdateOne) ClearStore() *StoreGoodsUpdateOne {
	sguo.mutation.ClearStore()
	return sguo
}

// Where appends a list predicates to the StoreGoodsUpdate builder.
func (sguo *StoreGoodsUpdateOne) Where(ps ...predicate.StoreGoods) *StoreGoodsUpdateOne {
	sguo.mutation.Where(ps...)
	return sguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sguo *StoreGoodsUpdateOne) Select(field string, fields ...string) *StoreGoodsUpdateOne {
	sguo.fields = append([]string{field}, fields...)
	return sguo
}

// Save executes the query and returns the updated StoreGoods entity.
func (sguo *StoreGoodsUpdateOne) Save(ctx context.Context) (*StoreGoods, error) {
	sguo.defaults()
	return withHooks(ctx, sguo.sqlSave, sguo.mutation, sguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sguo *StoreGoodsUpdateOne) SaveX(ctx context.Context) *StoreGoods {
	node, err := sguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sguo *StoreGoodsUpdateOne) Exec(ctx context.Context) error {
	_, err := sguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sguo *StoreGoodsUpdateOne) ExecX(ctx context.Context) {
	if err := sguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sguo *StoreGoodsUpdateOne) defaults() {
	if _, ok := sguo.mutation.UpdatedAt(); !ok {
		v := storegoods.UpdateDefaultUpdatedAt()
		sguo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sguo *StoreGoodsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StoreGoodsUpdateOne {
	sguo.modifiers = append(sguo.modifiers, modifiers...)
	return sguo
}

func (sguo *StoreGoodsUpdateOne) sqlSave(ctx context.Context) (_node *StoreGoods, err error) {
	_spec := sqlgraph.NewUpdateSpec(storegoods.Table, storegoods.Columns, sqlgraph.NewFieldSpec(storegoods.FieldID, field.TypeUint64))
	id, ok := sguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StoreGoods.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storegoods.FieldID)
		for _, f := range fields {
			if !storegoods.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storegoods.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sguo.mutation.UpdatedAt(); ok {
		_spec.SetField(storegoods.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sguo.mutation.DeletedAt(); ok {
		_spec.SetField(storegoods.FieldDeletedAt, field.TypeTime, value)
	}
	if sguo.mutation.DeletedAtCleared() {
		_spec.ClearField(storegoods.FieldDeletedAt, field.TypeTime)
	}
	if sguo.mutation.GoodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.GoodsTable,
			Columns: []string{storegoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.GoodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.GoodsTable,
			Columns: []string{storegoods.GoodsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(goods.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sguo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.StoreTable,
			Columns: []string{storegoods.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sguo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   storegoods.StoreTable,
			Columns: []string{storegoods.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sguo.modifiers...)
	_node = &StoreGoods{config: sguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storegoods.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sguo.mutation.done = true
	return _node, nil
}
