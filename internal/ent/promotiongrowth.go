// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionGrowth is the model entity for the PromotionGrowth schema.
type PromotionGrowth struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID *uint64 `json:"member_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID *uint64 `json:"task_id,omitempty"`
	// 状态 1:有效 2:无效
	Status uint8 `json:"status,omitempty"`
	// 成长值
	GrowthValue uint64 `json:"growth_value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PromotionGrowthQuery when eager-loading is set.
	Edges        PromotionGrowthEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PromotionGrowthEdges holds the relations/edges for other nodes in the graph.
type PromotionGrowthEdges struct {
	// Member holds the value of the member edge.
	Member *PromotionMember `json:"member,omitempty"`
	// Task holds the value of the task edge.
	Task *PromotionLevelTask `json:"task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionGrowthEdges) MemberOrErr() (*PromotionMember, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionmember.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PromotionGrowthEdges) TaskOrErr() (*PromotionLevelTask, error) {
	if e.loadedTypes[1] {
		if e.Task == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: promotionleveltask.Label}
		}
		return e.Task, nil
	}
	return nil, &NotLoadedError{edge: "task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionGrowth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotiongrowth.FieldCreator, promotiongrowth.FieldLastModifier:
			values[i] = new([]byte)
		case promotiongrowth.FieldID, promotiongrowth.FieldMemberID, promotiongrowth.FieldTaskID, promotiongrowth.FieldStatus, promotiongrowth.FieldGrowthValue:
			values[i] = new(sql.NullInt64)
		case promotiongrowth.FieldRemark:
			values[i] = new(sql.NullString)
		case promotiongrowth.FieldCreatedAt, promotiongrowth.FieldUpdatedAt, promotiongrowth.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionGrowth fields.
func (pg *PromotionGrowth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotiongrowth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pg.ID = uint64(value.Int64)
		case promotiongrowth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pg.CreatedAt = value.Time
			}
		case promotiongrowth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pg.UpdatedAt = value.Time
			}
		case promotiongrowth.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pg.DeletedAt = new(time.Time)
				*pg.DeletedAt = value.Time
			}
		case promotiongrowth.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pg.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotiongrowth.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pg.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotiongrowth.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pg.Remark = value.String
			}
		case promotiongrowth.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pg.MemberID = new(uint64)
				*pg.MemberID = uint64(value.Int64)
			}
		case promotiongrowth.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				pg.TaskID = new(uint64)
				*pg.TaskID = uint64(value.Int64)
			}
		case promotiongrowth.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pg.Status = uint8(value.Int64)
			}
		case promotiongrowth.FieldGrowthValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field growth_value", values[i])
			} else if value.Valid {
				pg.GrowthValue = uint64(value.Int64)
			}
		default:
			pg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionGrowth.
// This includes values selected through modifiers, order, etc.
func (pg *PromotionGrowth) Value(name string) (ent.Value, error) {
	return pg.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PromotionGrowth entity.
func (pg *PromotionGrowth) QueryMember() *PromotionMemberQuery {
	return NewPromotionGrowthClient(pg.config).QueryMember(pg)
}

// QueryTask queries the "task" edge of the PromotionGrowth entity.
func (pg *PromotionGrowth) QueryTask() *PromotionLevelTaskQuery {
	return NewPromotionGrowthClient(pg.config).QueryTask(pg)
}

// Update returns a builder for updating this PromotionGrowth.
// Note that you need to call PromotionGrowth.Unwrap() before calling this method if this PromotionGrowth
// was returned from a transaction, and the transaction was committed or rolled back.
func (pg *PromotionGrowth) Update() *PromotionGrowthUpdateOne {
	return NewPromotionGrowthClient(pg.config).UpdateOne(pg)
}

// Unwrap unwraps the PromotionGrowth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pg *PromotionGrowth) Unwrap() *PromotionGrowth {
	_tx, ok := pg.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionGrowth is not a transactional entity")
	}
	pg.config.driver = _tx.drv
	return pg
}

// String implements the fmt.Stringer.
func (pg *PromotionGrowth) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionGrowth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pg.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pg.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pg.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pg.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pg.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pg.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pg.Remark)
	builder.WriteString(", ")
	if v := pg.MemberID; v != nil {
		builder.WriteString("member_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pg.TaskID; v != nil {
		builder.WriteString("task_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pg.Status))
	builder.WriteString(", ")
	builder.WriteString("growth_value=")
	builder.WriteString(fmt.Sprintf("%v", pg.GrowthValue))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionGrowths is a parsable slice of PromotionGrowth.
type PromotionGrowths []*PromotionGrowth
