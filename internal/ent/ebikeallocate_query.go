// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikeallocate"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EbikeAllocateQuery is the builder for querying EbikeAllocate entities.
type EbikeAllocateQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	predicates    []predicate.EbikeAllocate
	withEmployee  *EmployeeQuery
	withStore     *StoreQuery
	withEbike     *EbikeQuery
	withBrand     *EbikeBrandQuery
	withSubscribe *SubscribeQuery
	withRider     *RiderQuery
	withContract  *ContractQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EbikeAllocateQuery builder.
func (eaq *EbikeAllocateQuery) Where(ps ...predicate.EbikeAllocate) *EbikeAllocateQuery {
	eaq.predicates = append(eaq.predicates, ps...)
	return eaq
}

// Limit adds a limit step to the query.
func (eaq *EbikeAllocateQuery) Limit(limit int) *EbikeAllocateQuery {
	eaq.limit = &limit
	return eaq
}

// Offset adds an offset step to the query.
func (eaq *EbikeAllocateQuery) Offset(offset int) *EbikeAllocateQuery {
	eaq.offset = &offset
	return eaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eaq *EbikeAllocateQuery) Unique(unique bool) *EbikeAllocateQuery {
	eaq.unique = &unique
	return eaq
}

// Order adds an order step to the query.
func (eaq *EbikeAllocateQuery) Order(o ...OrderFunc) *EbikeAllocateQuery {
	eaq.order = append(eaq.order, o...)
	return eaq
}

// QueryEmployee chains the current query on the "employee" edge.
func (eaq *EbikeAllocateQuery) QueryEmployee() *EmployeeQuery {
	query := &EmployeeQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.EmployeeTable, ebikeallocate.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (eaq *EbikeAllocateQuery) QueryStore() *StoreQuery {
	query := &StoreQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.StoreTable, ebikeallocate.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEbike chains the current query on the "ebike" edge.
func (eaq *EbikeAllocateQuery) QueryEbike() *EbikeQuery {
	query := &EbikeQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.EbikeTable, ebikeallocate.EbikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrand chains the current query on the "brand" edge.
func (eaq *EbikeAllocateQuery) QueryBrand() *EbikeBrandQuery {
	query := &EbikeBrandQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.BrandTable, ebikeallocate.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (eaq *EbikeAllocateQuery) QuerySubscribe() *SubscribeQuery {
	query := &SubscribeQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.SubscribeTable, ebikeallocate.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (eaq *EbikeAllocateQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ebikeallocate.RiderTable, ebikeallocate.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContract chains the current query on the "contract" edge.
func (eaq *EbikeAllocateQuery) QueryContract() *ContractQuery {
	query := &ContractQuery{config: eaq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikeallocate.Table, ebikeallocate.FieldID, selector),
			sqlgraph.To(contract.Table, contract.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ebikeallocate.ContractTable, ebikeallocate.ContractColumn),
		)
		fromU = sqlgraph.SetNeighbors(eaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EbikeAllocate entity from the query.
// Returns a *NotFoundError when no EbikeAllocate was found.
func (eaq *EbikeAllocateQuery) First(ctx context.Context) (*EbikeAllocate, error) {
	nodes, err := eaq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ebikeallocate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) FirstX(ctx context.Context) *EbikeAllocate {
	node, err := eaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EbikeAllocate ID from the query.
// Returns a *NotFoundError when no EbikeAllocate ID was found.
func (eaq *EbikeAllocateQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eaq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ebikeallocate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := eaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EbikeAllocate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EbikeAllocate entity is found.
// Returns a *NotFoundError when no EbikeAllocate entities are found.
func (eaq *EbikeAllocateQuery) Only(ctx context.Context) (*EbikeAllocate, error) {
	nodes, err := eaq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ebikeallocate.Label}
	default:
		return nil, &NotSingularError{ebikeallocate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) OnlyX(ctx context.Context) *EbikeAllocate {
	node, err := eaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EbikeAllocate ID in the query.
// Returns a *NotSingularError when more than one EbikeAllocate ID is found.
// Returns a *NotFoundError when no entities are found.
func (eaq *EbikeAllocateQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eaq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ebikeallocate.Label}
	default:
		err = &NotSingularError{ebikeallocate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := eaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EbikeAllocates.
func (eaq *EbikeAllocateQuery) All(ctx context.Context) ([]*EbikeAllocate, error) {
	if err := eaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return eaq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) AllX(ctx context.Context) []*EbikeAllocate {
	nodes, err := eaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EbikeAllocate IDs.
func (eaq *EbikeAllocateQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := eaq.Select(ebikeallocate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := eaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eaq *EbikeAllocateQuery) Count(ctx context.Context) (int, error) {
	if err := eaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return eaq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) CountX(ctx context.Context) int {
	count, err := eaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eaq *EbikeAllocateQuery) Exist(ctx context.Context) (bool, error) {
	if err := eaq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return eaq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (eaq *EbikeAllocateQuery) ExistX(ctx context.Context) bool {
	exist, err := eaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EbikeAllocateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eaq *EbikeAllocateQuery) Clone() *EbikeAllocateQuery {
	if eaq == nil {
		return nil
	}
	return &EbikeAllocateQuery{
		config:        eaq.config,
		limit:         eaq.limit,
		offset:        eaq.offset,
		order:         append([]OrderFunc{}, eaq.order...),
		predicates:    append([]predicate.EbikeAllocate{}, eaq.predicates...),
		withEmployee:  eaq.withEmployee.Clone(),
		withStore:     eaq.withStore.Clone(),
		withEbike:     eaq.withEbike.Clone(),
		withBrand:     eaq.withBrand.Clone(),
		withSubscribe: eaq.withSubscribe.Clone(),
		withRider:     eaq.withRider.Clone(),
		withContract:  eaq.withContract.Clone(),
		// clone intermediate query.
		sql:    eaq.sql.Clone(),
		path:   eaq.path,
		unique: eaq.unique,
	}
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithEmployee(opts ...func(*EmployeeQuery)) *EbikeAllocateQuery {
	query := &EmployeeQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withEmployee = query
	return eaq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithStore(opts ...func(*StoreQuery)) *EbikeAllocateQuery {
	query := &StoreQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withStore = query
	return eaq
}

// WithEbike tells the query-builder to eager-load the nodes that are connected to
// the "ebike" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithEbike(opts ...func(*EbikeQuery)) *EbikeAllocateQuery {
	query := &EbikeQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withEbike = query
	return eaq
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *EbikeAllocateQuery {
	query := &EbikeBrandQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withBrand = query
	return eaq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *EbikeAllocateQuery {
	query := &SubscribeQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withSubscribe = query
	return eaq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithRider(opts ...func(*RiderQuery)) *EbikeAllocateQuery {
	query := &RiderQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withRider = query
	return eaq
}

// WithContract tells the query-builder to eager-load the nodes that are connected to
// the "contract" edge. The optional arguments are used to configure the query builder of the edge.
func (eaq *EbikeAllocateQuery) WithContract(opts ...func(*ContractQuery)) *EbikeAllocateQuery {
	query := &ContractQuery{config: eaq.config}
	for _, opt := range opts {
		opt(query)
	}
	eaq.withContract = query
	return eaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EmployeeID uint64 `json:"employee_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EbikeAllocate.Query().
//		GroupBy(ebikeallocate.FieldEmployeeID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eaq *EbikeAllocateQuery) GroupBy(field string, fields ...string) *EbikeAllocateGroupBy {
	grbuild := &EbikeAllocateGroupBy{config: eaq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := eaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return eaq.sqlQuery(ctx), nil
	}
	grbuild.label = ebikeallocate.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EmployeeID uint64 `json:"employee_id,omitempty"`
//	}
//
//	client.EbikeAllocate.Query().
//		Select(ebikeallocate.FieldEmployeeID).
//		Scan(ctx, &v)
func (eaq *EbikeAllocateQuery) Select(fields ...string) *EbikeAllocateSelect {
	eaq.fields = append(eaq.fields, fields...)
	selbuild := &EbikeAllocateSelect{EbikeAllocateQuery: eaq}
	selbuild.label = ebikeallocate.Label
	selbuild.flds, selbuild.scan = &eaq.fields, selbuild.Scan
	return selbuild
}

func (eaq *EbikeAllocateQuery) prepareQuery(ctx context.Context) error {
	for _, f := range eaq.fields {
		if !ebikeallocate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eaq.path != nil {
		prev, err := eaq.path(ctx)
		if err != nil {
			return err
		}
		eaq.sql = prev
	}
	return nil
}

func (eaq *EbikeAllocateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EbikeAllocate, error) {
	var (
		nodes       = []*EbikeAllocate{}
		_spec       = eaq.querySpec()
		loadedTypes = [7]bool{
			eaq.withEmployee != nil,
			eaq.withStore != nil,
			eaq.withEbike != nil,
			eaq.withBrand != nil,
			eaq.withSubscribe != nil,
			eaq.withRider != nil,
			eaq.withContract != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EbikeAllocate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EbikeAllocate{config: eaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eaq.modifiers) > 0 {
		_spec.Modifiers = eaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eaq.withEmployee; query != nil {
		if err := eaq.loadEmployee(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withStore; query != nil {
		if err := eaq.loadStore(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withEbike; query != nil {
		if err := eaq.loadEbike(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Ebike) { n.Edges.Ebike = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withBrand; query != nil {
		if err := eaq.loadBrand(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withSubscribe; query != nil {
		if err := eaq.loadSubscribe(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withRider; query != nil {
		if err := eaq.loadRider(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := eaq.withContract; query != nil {
		if err := eaq.loadContract(ctx, query, nodes, nil,
			func(n *EbikeAllocate, e *Contract) { n.Edges.Contract = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eaq *EbikeAllocateQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		if nodes[i].EmployeeID == nil {
			continue
		}
		fk := *nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		fk := nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadEbike(ctx context.Context, query *EbikeQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Ebike)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		fk := nodes[i].EbikeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ebike.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ebike_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		fk := nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		fk := nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeAllocate)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eaq *EbikeAllocateQuery) loadContract(ctx context.Context, query *ContractQuery, nodes []*EbikeAllocate, init func(*EbikeAllocate), assign func(*EbikeAllocate, *Contract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*EbikeAllocate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.Where(predicate.Contract(func(s *sql.Selector) {
		s.Where(sql.InValues(ebikeallocate.ContractColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AllocateID
		if fk == nil {
			return fmt.Errorf(`foreign-key "allocate_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "allocate_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eaq *EbikeAllocateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eaq.querySpec()
	if len(eaq.modifiers) > 0 {
		_spec.Modifiers = eaq.modifiers
	}
	_spec.Node.Columns = eaq.fields
	if len(eaq.fields) > 0 {
		_spec.Unique = eaq.unique != nil && *eaq.unique
	}
	return sqlgraph.CountNodes(ctx, eaq.driver, _spec)
}

func (eaq *EbikeAllocateQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := eaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (eaq *EbikeAllocateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ebikeallocate.Table,
			Columns: ebikeallocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikeallocate.FieldID,
			},
		},
		From:   eaq.sql,
		Unique: true,
	}
	if unique := eaq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := eaq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebikeallocate.FieldID)
		for i := range fields {
			if fields[i] != ebikeallocate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eaq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eaq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eaq *EbikeAllocateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eaq.driver.Dialect())
	t1 := builder.Table(ebikeallocate.Table)
	columns := eaq.fields
	if len(columns) == 0 {
		columns = ebikeallocate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eaq.sql != nil {
		selector = eaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eaq.unique != nil && *eaq.unique {
		selector.Distinct()
	}
	for _, m := range eaq.modifiers {
		m(selector)
	}
	for _, p := range eaq.predicates {
		p(selector)
	}
	for _, p := range eaq.order {
		p(selector)
	}
	if offset := eaq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eaq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eaq *EbikeAllocateQuery) Modify(modifiers ...func(s *sql.Selector)) *EbikeAllocateSelect {
	eaq.modifiers = append(eaq.modifiers, modifiers...)
	return eaq.Select()
}

// EbikeAllocateGroupBy is the group-by builder for EbikeAllocate entities.
type EbikeAllocateGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (eagb *EbikeAllocateGroupBy) Aggregate(fns ...AggregateFunc) *EbikeAllocateGroupBy {
	eagb.fns = append(eagb.fns, fns...)
	return eagb
}

// Scan applies the group-by query and scans the result into the given value.
func (eagb *EbikeAllocateGroupBy) Scan(ctx context.Context, v any) error {
	query, err := eagb.path(ctx)
	if err != nil {
		return err
	}
	eagb.sql = query
	return eagb.sqlScan(ctx, v)
}

func (eagb *EbikeAllocateGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range eagb.fields {
		if !ebikeallocate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := eagb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := eagb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (eagb *EbikeAllocateGroupBy) sqlQuery() *sql.Selector {
	selector := eagb.sql.Select()
	aggregation := make([]string, 0, len(eagb.fns))
	for _, fn := range eagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(eagb.fields)+len(eagb.fns))
		for _, f := range eagb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(eagb.fields...)...)
}

// EbikeAllocateSelect is the builder for selecting fields of EbikeAllocate entities.
type EbikeAllocateSelect struct {
	*EbikeAllocateQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (eas *EbikeAllocateSelect) Scan(ctx context.Context, v any) error {
	if err := eas.prepareQuery(ctx); err != nil {
		return err
	}
	eas.sql = eas.EbikeAllocateQuery.sqlQuery(ctx)
	return eas.sqlScan(ctx, v)
}

func (eas *EbikeAllocateSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := eas.sql.Query()
	if err := eas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eas *EbikeAllocateSelect) Modify(modifiers ...func(s *sql.Selector)) *EbikeAllocateSelect {
	eas.modifiers = append(eas.modifiers, modifiers...)
	return eas
}
