// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/assetexport"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
)

// AssetExport is the model entity for the AssetExport schema.
type AssetExport struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 仓库管理人ID
	AssetManagerID uint64 `json:"asset_manager_id,omitempty"`
	// 分类
	Taxonomy string `json:"taxonomy,omitempty"`
	// 编号
	Sn string `json:"sn,omitempty"`
	// 状态
	Status uint8 `json:"status,omitempty"`
	// 文件路径
	Path string `json:"path,omitempty"`
	// 失败原因
	Message string `json:"message,omitempty"`
	// 生成时间
	FinishAt time.Time `json:"finish_at,omitempty"`
	// 耗时
	Duration int64 `json:"duration,omitempty"`
	// 筛选条件
	Condition string `json:"condition,omitempty"`
	// 详细信息
	Info map[string]interface{} `json:"info,omitempty"`
	// 备注信息
	Remark string `json:"remark,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetExportQuery when eager-loading is set.
	Edges        AssetExportEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetExportEdges holds the relations/edges for other nodes in the graph.
type AssetExportEdges struct {
	// AssetManager holds the value of the asset_manager edge.
	AssetManager *AssetManager `json:"asset_manager,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetManagerOrErr returns the AssetManager value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetExportEdges) AssetManagerOrErr() (*AssetManager, error) {
	if e.AssetManager != nil {
		return e.AssetManager, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: assetmanager.Label}
	}
	return nil, &NotLoadedError{edge: "asset_manager"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetExport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetexport.FieldInfo:
			values[i] = new([]byte)
		case assetexport.FieldID, assetexport.FieldAssetManagerID, assetexport.FieldStatus, assetexport.FieldDuration:
			values[i] = new(sql.NullInt64)
		case assetexport.FieldTaxonomy, assetexport.FieldSn, assetexport.FieldPath, assetexport.FieldMessage, assetexport.FieldCondition, assetexport.FieldRemark:
			values[i] = new(sql.NullString)
		case assetexport.FieldCreatedAt, assetexport.FieldUpdatedAt, assetexport.FieldDeletedAt, assetexport.FieldFinishAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetExport fields.
func (ae *AssetExport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetexport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ae.ID = uint64(value.Int64)
		case assetexport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ae.CreatedAt = value.Time
			}
		case assetexport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ae.UpdatedAt = value.Time
			}
		case assetexport.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ae.DeletedAt = new(time.Time)
				*ae.DeletedAt = value.Time
			}
		case assetexport.FieldAssetManagerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_manager_id", values[i])
			} else if value.Valid {
				ae.AssetManagerID = uint64(value.Int64)
			}
		case assetexport.FieldTaxonomy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field taxonomy", values[i])
			} else if value.Valid {
				ae.Taxonomy = value.String
			}
		case assetexport.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				ae.Sn = value.String
			}
		case assetexport.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ae.Status = uint8(value.Int64)
			}
		case assetexport.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				ae.Path = value.String
			}
		case assetexport.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				ae.Message = value.String
			}
		case assetexport.FieldFinishAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finish_at", values[i])
			} else if value.Valid {
				ae.FinishAt = value.Time
			}
		case assetexport.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				ae.Duration = value.Int64
			}
		case assetexport.FieldCondition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field condition", values[i])
			} else if value.Valid {
				ae.Condition = value.String
			}
		case assetexport.FieldInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ae.Info); err != nil {
					return fmt.Errorf("unmarshal field info: %w", err)
				}
			}
		case assetexport.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ae.Remark = value.String
			}
		default:
			ae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetExport.
// This includes values selected through modifiers, order, etc.
func (ae *AssetExport) Value(name string) (ent.Value, error) {
	return ae.selectValues.Get(name)
}

// QueryAssetManager queries the "asset_manager" edge of the AssetExport entity.
func (ae *AssetExport) QueryAssetManager() *AssetManagerQuery {
	return NewAssetExportClient(ae.config).QueryAssetManager(ae)
}

// Update returns a builder for updating this AssetExport.
// Note that you need to call AssetExport.Unwrap() before calling this method if this AssetExport
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AssetExport) Update() *AssetExportUpdateOne {
	return NewAssetExportClient(ae.config).UpdateOne(ae)
}

// Unwrap unwraps the AssetExport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AssetExport) Unwrap() *AssetExport {
	_tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetExport is not a transactional entity")
	}
	ae.config.driver = _tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AssetExport) String() string {
	var builder strings.Builder
	builder.WriteString("AssetExport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ae.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ae.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ae.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ae.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("asset_manager_id=")
	builder.WriteString(fmt.Sprintf("%v", ae.AssetManagerID))
	builder.WriteString(", ")
	builder.WriteString("taxonomy=")
	builder.WriteString(ae.Taxonomy)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(ae.Sn)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ae.Status))
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(ae.Path)
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(ae.Message)
	builder.WriteString(", ")
	builder.WriteString("finish_at=")
	builder.WriteString(ae.FinishAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", ae.Duration))
	builder.WriteString(", ")
	builder.WriteString("condition=")
	builder.WriteString(ae.Condition)
	builder.WriteString(", ")
	builder.WriteString("info=")
	builder.WriteString(fmt.Sprintf("%v", ae.Info))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ae.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// AssetExports is a parsable slice of AssetExport.
type AssetExports []*AssetExport
