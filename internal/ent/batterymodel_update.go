// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelUpdate is the builder for updating BatteryModel entities.
type BatteryModelUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryModelUpdate builder.
func (bmu *BatteryModelUpdate) Where(ps ...predicate.BatteryModel) *BatteryModelUpdate {
	bmu.mutation.Where(ps...)
	return bmu
}

// SetUpdatedAt sets the "updated_at" field.
func (bmu *BatteryModelUpdate) SetUpdatedAt(t time.Time) *BatteryModelUpdate {
	bmu.mutation.SetUpdatedAt(t)
	return bmu
}

// SetDeletedAt sets the "deleted_at" field.
func (bmu *BatteryModelUpdate) SetDeletedAt(t time.Time) *BatteryModelUpdate {
	bmu.mutation.SetDeletedAt(t)
	return bmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmu *BatteryModelUpdate) SetNillableDeletedAt(t *time.Time) *BatteryModelUpdate {
	if t != nil {
		bmu.SetDeletedAt(*t)
	}
	return bmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bmu *BatteryModelUpdate) ClearDeletedAt() *BatteryModelUpdate {
	bmu.mutation.ClearDeletedAt()
	return bmu
}

// SetLastModifier sets the "last_modifier" field.
func (bmu *BatteryModelUpdate) SetLastModifier(m *model.Modifier) *BatteryModelUpdate {
	bmu.mutation.SetLastModifier(m)
	return bmu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bmu *BatteryModelUpdate) ClearLastModifier() *BatteryModelUpdate {
	bmu.mutation.ClearLastModifier()
	return bmu
}

// SetRemark sets the "remark" field.
func (bmu *BatteryModelUpdate) SetRemark(s string) *BatteryModelUpdate {
	bmu.mutation.SetRemark(s)
	return bmu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmu *BatteryModelUpdate) SetNillableRemark(s *string) *BatteryModelUpdate {
	if s != nil {
		bmu.SetRemark(*s)
	}
	return bmu
}

// ClearRemark clears the value of the "remark" field.
func (bmu *BatteryModelUpdate) ClearRemark() *BatteryModelUpdate {
	bmu.mutation.ClearRemark()
	return bmu
}

// SetModel sets the "model" field.
func (bmu *BatteryModelUpdate) SetModel(s string) *BatteryModelUpdate {
	bmu.mutation.SetModel(s)
	return bmu
}

// SetEnable sets the "enable" field.
func (bmu *BatteryModelUpdate) SetEnable(b bool) *BatteryModelUpdate {
	bmu.mutation.SetEnable(b)
	return bmu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bmu *BatteryModelUpdate) SetNillableEnable(b *bool) *BatteryModelUpdate {
	if b != nil {
		bmu.SetEnable(*b)
	}
	return bmu
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmu *BatteryModelUpdate) AddCabinetIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.AddCabinetIDs(ids...)
	return bmu
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmu *BatteryModelUpdate) AddCabinets(c ...*Cabinet) *BatteryModelUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmu.AddCabinetIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (bmu *BatteryModelUpdate) AddPlanIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.AddPlanIDs(ids...)
	return bmu
}

// AddPlans adds the "plans" edges to the Plan entity.
func (bmu *BatteryModelUpdate) AddPlans(p ...*Plan) *BatteryModelUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bmu.AddPlanIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmu *BatteryModelUpdate) Mutation() *BatteryModelMutation {
	return bmu.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (bmu *BatteryModelUpdate) ClearCabinets() *BatteryModelUpdate {
	bmu.mutation.ClearCabinets()
	return bmu
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (bmu *BatteryModelUpdate) RemoveCabinetIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.RemoveCabinetIDs(ids...)
	return bmu
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (bmu *BatteryModelUpdate) RemoveCabinets(c ...*Cabinet) *BatteryModelUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmu.RemoveCabinetIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (bmu *BatteryModelUpdate) ClearPlans() *BatteryModelUpdate {
	bmu.mutation.ClearPlans()
	return bmu
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (bmu *BatteryModelUpdate) RemovePlanIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.RemovePlanIDs(ids...)
	return bmu
}

// RemovePlans removes "plans" edges to Plan entities.
func (bmu *BatteryModelUpdate) RemovePlans(p ...*Plan) *BatteryModelUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bmu.RemovePlanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bmu *BatteryModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := bmu.defaults(); err != nil {
		return 0, err
	}
	if len(bmu.hooks) == 0 {
		affected, err = bmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BatteryModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bmu.mutation = mutation
			affected, err = bmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bmu.hooks) - 1; i >= 0; i-- {
			if bmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bmu *BatteryModelUpdate) SaveX(ctx context.Context) int {
	affected, err := bmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bmu *BatteryModelUpdate) Exec(ctx context.Context) error {
	_, err := bmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmu *BatteryModelUpdate) ExecX(ctx context.Context) {
	if err := bmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmu *BatteryModelUpdate) defaults() error {
	if _, ok := bmu.mutation.UpdatedAt(); !ok {
		if batterymodel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodel.UpdateDefaultUpdatedAt()
		bmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmu *BatteryModelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelUpdate {
	bmu.modifiers = append(bmu.modifiers, modifiers...)
	return bmu
}

func (bmu *BatteryModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
	}
	if ps := bmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldUpdatedAt,
		})
	}
	if value, ok := bmu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldDeletedAt,
		})
	}
	if bmu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: batterymodel.FieldDeletedAt,
		})
	}
	if bmu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: batterymodel.FieldCreator,
		})
	}
	if value, ok := bmu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: batterymodel.FieldLastModifier,
		})
	}
	if bmu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: batterymodel.FieldLastModifier,
		})
	}
	if value, ok := bmu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldRemark,
		})
	}
	if bmu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: batterymodel.FieldRemark,
		})
	}
	if value, ok := bmu.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldModel,
		})
	}
	if value, ok := bmu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: batterymodel.FieldEnable,
		})
	}
	if bmu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !bmu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bmu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.RemovedPlansIDs(); len(nodes) > 0 && !bmu.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = bmu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, bmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BatteryModelUpdateOne is the builder for updating a single BatteryModel entity.
type BatteryModelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (bmuo *BatteryModelUpdateOne) SetUpdatedAt(t time.Time) *BatteryModelUpdateOne {
	bmuo.mutation.SetUpdatedAt(t)
	return bmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bmuo *BatteryModelUpdateOne) SetDeletedAt(t time.Time) *BatteryModelUpdateOne {
	bmuo.mutation.SetDeletedAt(t)
	return bmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmuo *BatteryModelUpdateOne) SetNillableDeletedAt(t *time.Time) *BatteryModelUpdateOne {
	if t != nil {
		bmuo.SetDeletedAt(*t)
	}
	return bmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (bmuo *BatteryModelUpdateOne) ClearDeletedAt() *BatteryModelUpdateOne {
	bmuo.mutation.ClearDeletedAt()
	return bmuo
}

// SetLastModifier sets the "last_modifier" field.
func (bmuo *BatteryModelUpdateOne) SetLastModifier(m *model.Modifier) *BatteryModelUpdateOne {
	bmuo.mutation.SetLastModifier(m)
	return bmuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (bmuo *BatteryModelUpdateOne) ClearLastModifier() *BatteryModelUpdateOne {
	bmuo.mutation.ClearLastModifier()
	return bmuo
}

// SetRemark sets the "remark" field.
func (bmuo *BatteryModelUpdateOne) SetRemark(s string) *BatteryModelUpdateOne {
	bmuo.mutation.SetRemark(s)
	return bmuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmuo *BatteryModelUpdateOne) SetNillableRemark(s *string) *BatteryModelUpdateOne {
	if s != nil {
		bmuo.SetRemark(*s)
	}
	return bmuo
}

// ClearRemark clears the value of the "remark" field.
func (bmuo *BatteryModelUpdateOne) ClearRemark() *BatteryModelUpdateOne {
	bmuo.mutation.ClearRemark()
	return bmuo
}

// SetModel sets the "model" field.
func (bmuo *BatteryModelUpdateOne) SetModel(s string) *BatteryModelUpdateOne {
	bmuo.mutation.SetModel(s)
	return bmuo
}

// SetEnable sets the "enable" field.
func (bmuo *BatteryModelUpdateOne) SetEnable(b bool) *BatteryModelUpdateOne {
	bmuo.mutation.SetEnable(b)
	return bmuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bmuo *BatteryModelUpdateOne) SetNillableEnable(b *bool) *BatteryModelUpdateOne {
	if b != nil {
		bmuo.SetEnable(*b)
	}
	return bmuo
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmuo *BatteryModelUpdateOne) AddCabinetIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.AddCabinetIDs(ids...)
	return bmuo
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmuo *BatteryModelUpdateOne) AddCabinets(c ...*Cabinet) *BatteryModelUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmuo.AddCabinetIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (bmuo *BatteryModelUpdateOne) AddPlanIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.AddPlanIDs(ids...)
	return bmuo
}

// AddPlans adds the "plans" edges to the Plan entity.
func (bmuo *BatteryModelUpdateOne) AddPlans(p ...*Plan) *BatteryModelUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bmuo.AddPlanIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmuo *BatteryModelUpdateOne) Mutation() *BatteryModelMutation {
	return bmuo.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (bmuo *BatteryModelUpdateOne) ClearCabinets() *BatteryModelUpdateOne {
	bmuo.mutation.ClearCabinets()
	return bmuo
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (bmuo *BatteryModelUpdateOne) RemoveCabinetIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.RemoveCabinetIDs(ids...)
	return bmuo
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (bmuo *BatteryModelUpdateOne) RemoveCabinets(c ...*Cabinet) *BatteryModelUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmuo.RemoveCabinetIDs(ids...)
}

// ClearPlans clears all "plans" edges to the Plan entity.
func (bmuo *BatteryModelUpdateOne) ClearPlans() *BatteryModelUpdateOne {
	bmuo.mutation.ClearPlans()
	return bmuo
}

// RemovePlanIDs removes the "plans" edge to Plan entities by IDs.
func (bmuo *BatteryModelUpdateOne) RemovePlanIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.RemovePlanIDs(ids...)
	return bmuo
}

// RemovePlans removes "plans" edges to Plan entities.
func (bmuo *BatteryModelUpdateOne) RemovePlans(p ...*Plan) *BatteryModelUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return bmuo.RemovePlanIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bmuo *BatteryModelUpdateOne) Select(field string, fields ...string) *BatteryModelUpdateOne {
	bmuo.fields = append([]string{field}, fields...)
	return bmuo
}

// Save executes the query and returns the updated BatteryModel entity.
func (bmuo *BatteryModelUpdateOne) Save(ctx context.Context) (*BatteryModel, error) {
	var (
		err  error
		node *BatteryModel
	)
	if err := bmuo.defaults(); err != nil {
		return nil, err
	}
	if len(bmuo.hooks) == 0 {
		node, err = bmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BatteryModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bmuo.mutation = mutation
			node, err = bmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bmuo.hooks) - 1; i >= 0; i-- {
			if bmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BatteryModel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BatteryModelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bmuo *BatteryModelUpdateOne) SaveX(ctx context.Context) *BatteryModel {
	node, err := bmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bmuo *BatteryModelUpdateOne) Exec(ctx context.Context) error {
	_, err := bmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmuo *BatteryModelUpdateOne) ExecX(ctx context.Context) {
	if err := bmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmuo *BatteryModelUpdateOne) defaults() error {
	if _, ok := bmuo.mutation.UpdatedAt(); !ok {
		if batterymodel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodel.UpdateDefaultUpdatedAt()
		bmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmuo *BatteryModelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelUpdateOne {
	bmuo.modifiers = append(bmuo.modifiers, modifiers...)
	return bmuo
}

func (bmuo *BatteryModelUpdateOne) sqlSave(ctx context.Context) (_node *BatteryModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   batterymodel.Table,
			Columns: batterymodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: batterymodel.FieldID,
			},
		},
	}
	id, ok := bmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterymodel.FieldID)
		for _, f := range fields {
			if !batterymodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batterymodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldUpdatedAt,
		})
	}
	if value, ok := bmuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: batterymodel.FieldDeletedAt,
		})
	}
	if bmuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: batterymodel.FieldDeletedAt,
		})
	}
	if bmuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: batterymodel.FieldCreator,
		})
	}
	if value, ok := bmuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: batterymodel.FieldLastModifier,
		})
	}
	if bmuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: batterymodel.FieldLastModifier,
		})
	}
	if value, ok := bmuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldRemark,
		})
	}
	if bmuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: batterymodel.FieldRemark,
		})
	}
	if value, ok := bmuo.mutation.Model(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: batterymodel.FieldModel,
		})
	}
	if value, ok := bmuo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: batterymodel.FieldEnable,
		})
	}
	if bmuo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !bmuo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bmuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.RemovedPlansIDs(); len(nodes) > 0 && !bmuo.mutation.PlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.PlansTable,
			Columns: batterymodel.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = bmuo.modifiers
	_node = &BatteryModel{config: bmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
