// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryModelUpdate is the builder for updating BatteryModel entities.
type BatteryModelUpdate struct {
	config
	hooks     []Hook
	mutation  *BatteryModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BatteryModelUpdate builder.
func (bmu *BatteryModelUpdate) Where(ps ...predicate.BatteryModel) *BatteryModelUpdate {
	bmu.mutation.Where(ps...)
	return bmu
}

// SetModel sets the "model" field.
func (bmu *BatteryModelUpdate) SetModel(s string) *BatteryModelUpdate {
	bmu.mutation.SetModel(s)
	return bmu
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmu *BatteryModelUpdate) AddCabinetIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.AddCabinetIDs(ids...)
	return bmu
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmu *BatteryModelUpdate) AddCabinets(c ...*Cabinet) *BatteryModelUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmu.AddCabinetIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmu *BatteryModelUpdate) Mutation() *BatteryModelMutation {
	return bmu.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (bmu *BatteryModelUpdate) ClearCabinets() *BatteryModelUpdate {
	bmu.mutation.ClearCabinets()
	return bmu
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (bmu *BatteryModelUpdate) RemoveCabinetIDs(ids ...uint64) *BatteryModelUpdate {
	bmu.mutation.RemoveCabinetIDs(ids...)
	return bmu
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (bmu *BatteryModelUpdate) RemoveCabinets(c ...*Cabinet) *BatteryModelUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmu.RemoveCabinetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bmu *BatteryModelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, BatteryModelMutation](ctx, bmu.sqlSave, bmu.mutation, bmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmu *BatteryModelUpdate) SaveX(ctx context.Context) int {
	affected, err := bmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bmu *BatteryModelUpdate) Exec(ctx context.Context) error {
	_, err := bmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmu *BatteryModelUpdate) ExecX(ctx context.Context) {
	if err := bmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmu *BatteryModelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelUpdate {
	bmu.modifiers = append(bmu.modifiers, modifiers...)
	return bmu
}

func (bmu *BatteryModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterymodel.Table, batterymodel.Columns, sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64))
	if ps := bmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmu.mutation.Model(); ok {
		_spec.SetField(batterymodel.FieldModel, field.TypeString, value)
	}
	if bmu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !bmu.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmu.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bmu.mutation.done = true
	return n, nil
}

// BatteryModelUpdateOne is the builder for updating a single BatteryModel entity.
type BatteryModelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BatteryModelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetModel sets the "model" field.
func (bmuo *BatteryModelUpdateOne) SetModel(s string) *BatteryModelUpdateOne {
	bmuo.mutation.SetModel(s)
	return bmuo
}

// AddCabinetIDs adds the "cabinets" edge to the Cabinet entity by IDs.
func (bmuo *BatteryModelUpdateOne) AddCabinetIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.AddCabinetIDs(ids...)
	return bmuo
}

// AddCabinets adds the "cabinets" edges to the Cabinet entity.
func (bmuo *BatteryModelUpdateOne) AddCabinets(c ...*Cabinet) *BatteryModelUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmuo.AddCabinetIDs(ids...)
}

// Mutation returns the BatteryModelMutation object of the builder.
func (bmuo *BatteryModelUpdateOne) Mutation() *BatteryModelMutation {
	return bmuo.mutation
}

// ClearCabinets clears all "cabinets" edges to the Cabinet entity.
func (bmuo *BatteryModelUpdateOne) ClearCabinets() *BatteryModelUpdateOne {
	bmuo.mutation.ClearCabinets()
	return bmuo
}

// RemoveCabinetIDs removes the "cabinets" edge to Cabinet entities by IDs.
func (bmuo *BatteryModelUpdateOne) RemoveCabinetIDs(ids ...uint64) *BatteryModelUpdateOne {
	bmuo.mutation.RemoveCabinetIDs(ids...)
	return bmuo
}

// RemoveCabinets removes "cabinets" edges to Cabinet entities.
func (bmuo *BatteryModelUpdateOne) RemoveCabinets(c ...*Cabinet) *BatteryModelUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bmuo.RemoveCabinetIDs(ids...)
}

// Where appends a list predicates to the BatteryModelUpdate builder.
func (bmuo *BatteryModelUpdateOne) Where(ps ...predicate.BatteryModel) *BatteryModelUpdateOne {
	bmuo.mutation.Where(ps...)
	return bmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bmuo *BatteryModelUpdateOne) Select(field string, fields ...string) *BatteryModelUpdateOne {
	bmuo.fields = append([]string{field}, fields...)
	return bmuo
}

// Save executes the query and returns the updated BatteryModel entity.
func (bmuo *BatteryModelUpdateOne) Save(ctx context.Context) (*BatteryModel, error) {
	return withHooks[*BatteryModel, BatteryModelMutation](ctx, bmuo.sqlSave, bmuo.mutation, bmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bmuo *BatteryModelUpdateOne) SaveX(ctx context.Context) *BatteryModel {
	node, err := bmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bmuo *BatteryModelUpdateOne) Exec(ctx context.Context) error {
	_, err := bmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmuo *BatteryModelUpdateOne) ExecX(ctx context.Context) {
	if err := bmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bmuo *BatteryModelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BatteryModelUpdateOne {
	bmuo.modifiers = append(bmuo.modifiers, modifiers...)
	return bmuo
}

func (bmuo *BatteryModelUpdateOne) sqlSave(ctx context.Context) (_node *BatteryModel, err error) {
	_spec := sqlgraph.NewUpdateSpec(batterymodel.Table, batterymodel.Columns, sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64))
	id, ok := bmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatteryModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterymodel.FieldID)
		for _, f := range fields {
			if !batterymodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batterymodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bmuo.mutation.Model(); ok {
		_spec.SetField(batterymodel.FieldModel, field.TypeString, value)
	}
	if bmuo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.RemovedCabinetsIDs(); len(nodes) > 0 && !bmuo.mutation.CabinetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bmuo.mutation.CabinetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   batterymodel.CabinetsTable,
			Columns: batterymodel.CabinetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(bmuo.modifiers...)
	_node = &BatteryModel{config: bmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterymodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bmuo.mutation.done = true
	return _node, nil
}
