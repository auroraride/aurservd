// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
	"github.com/auroraride/aurservd/internal/ent/promotioncommissionplan"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionCommissionPlanQuery is the builder for querying PromotionCommissionPlan entities.
type PromotionCommissionPlanQuery struct {
	config
	ctx                     *QueryContext
	order                   []promotioncommissionplan.OrderOption
	inters                  []Interceptor
	predicates              []predicate.PromotionCommissionPlan
	withMember              *PromotionMemberQuery
	withPromotionCommission *PromotionCommissionQuery
	withPlan                *PlanQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionCommissionPlanQuery builder.
func (pcpq *PromotionCommissionPlanQuery) Where(ps ...predicate.PromotionCommissionPlan) *PromotionCommissionPlanQuery {
	pcpq.predicates = append(pcpq.predicates, ps...)
	return pcpq
}

// Limit the number of records to be returned by this query.
func (pcpq *PromotionCommissionPlanQuery) Limit(limit int) *PromotionCommissionPlanQuery {
	pcpq.ctx.Limit = &limit
	return pcpq
}

// Offset to start from.
func (pcpq *PromotionCommissionPlanQuery) Offset(offset int) *PromotionCommissionPlanQuery {
	pcpq.ctx.Offset = &offset
	return pcpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcpq *PromotionCommissionPlanQuery) Unique(unique bool) *PromotionCommissionPlanQuery {
	pcpq.ctx.Unique = &unique
	return pcpq
}

// Order specifies how the records should be ordered.
func (pcpq *PromotionCommissionPlanQuery) Order(o ...promotioncommissionplan.OrderOption) *PromotionCommissionPlanQuery {
	pcpq.order = append(pcpq.order, o...)
	return pcpq
}

// QueryMember chains the current query on the "member" edge.
func (pcpq *PromotionCommissionPlanQuery) QueryMember() *PromotionMemberQuery {
	query := (&PromotionMemberClient{config: pcpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, selector),
			sqlgraph.To(promotionmember.Table, promotionmember.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotioncommissionplan.MemberTable, promotioncommissionplan.MemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPromotionCommission chains the current query on the "promotion_commission" edge.
func (pcpq *PromotionCommissionPlanQuery) QueryPromotionCommission() *PromotionCommissionQuery {
	query := (&PromotionCommissionClient{config: pcpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, selector),
			sqlgraph.To(promotioncommission.Table, promotioncommission.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotioncommissionplan.PromotionCommissionTable, promotioncommissionplan.PromotionCommissionColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlan chains the current query on the "plan" edge.
func (pcpq *PromotionCommissionPlanQuery) QueryPlan() *PlanQuery {
	query := (&PlanClient{config: pcpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pcpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pcpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotioncommissionplan.Table, promotioncommissionplan.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotioncommissionplan.PlanTable, promotioncommissionplan.PlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(pcpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PromotionCommissionPlan entity from the query.
// Returns a *NotFoundError when no PromotionCommissionPlan was found.
func (pcpq *PromotionCommissionPlanQuery) First(ctx context.Context) (*PromotionCommissionPlan, error) {
	nodes, err := pcpq.Limit(1).All(setContextOp(ctx, pcpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotioncommissionplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) FirstX(ctx context.Context) *PromotionCommissionPlan {
	node, err := pcpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionCommissionPlan ID from the query.
// Returns a *NotFoundError when no PromotionCommissionPlan ID was found.
func (pcpq *PromotionCommissionPlanQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pcpq.Limit(1).IDs(setContextOp(ctx, pcpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotioncommissionplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := pcpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionCommissionPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionCommissionPlan entity is found.
// Returns a *NotFoundError when no PromotionCommissionPlan entities are found.
func (pcpq *PromotionCommissionPlanQuery) Only(ctx context.Context) (*PromotionCommissionPlan, error) {
	nodes, err := pcpq.Limit(2).All(setContextOp(ctx, pcpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotioncommissionplan.Label}
	default:
		return nil, &NotSingularError{promotioncommissionplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) OnlyX(ctx context.Context) *PromotionCommissionPlan {
	node, err := pcpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionCommissionPlan ID in the query.
// Returns a *NotSingularError when more than one PromotionCommissionPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcpq *PromotionCommissionPlanQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pcpq.Limit(2).IDs(setContextOp(ctx, pcpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotioncommissionplan.Label}
	default:
		err = &NotSingularError{promotioncommissionplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := pcpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionCommissionPlans.
func (pcpq *PromotionCommissionPlanQuery) All(ctx context.Context) ([]*PromotionCommissionPlan, error) {
	ctx = setContextOp(ctx, pcpq.ctx, ent.OpQueryAll)
	if err := pcpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionCommissionPlan, *PromotionCommissionPlanQuery]()
	return withInterceptors[[]*PromotionCommissionPlan](ctx, pcpq, qr, pcpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) AllX(ctx context.Context) []*PromotionCommissionPlan {
	nodes, err := pcpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionCommissionPlan IDs.
func (pcpq *PromotionCommissionPlanQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if pcpq.ctx.Unique == nil && pcpq.path != nil {
		pcpq.Unique(true)
	}
	ctx = setContextOp(ctx, pcpq.ctx, ent.OpQueryIDs)
	if err = pcpq.Select(promotioncommissionplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := pcpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcpq *PromotionCommissionPlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcpq.ctx, ent.OpQueryCount)
	if err := pcpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcpq, querierCount[*PromotionCommissionPlanQuery](), pcpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) CountX(ctx context.Context) int {
	count, err := pcpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcpq *PromotionCommissionPlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcpq.ctx, ent.OpQueryExist)
	switch _, err := pcpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcpq *PromotionCommissionPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := pcpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionCommissionPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcpq *PromotionCommissionPlanQuery) Clone() *PromotionCommissionPlanQuery {
	if pcpq == nil {
		return nil
	}
	return &PromotionCommissionPlanQuery{
		config:                  pcpq.config,
		ctx:                     pcpq.ctx.Clone(),
		order:                   append([]promotioncommissionplan.OrderOption{}, pcpq.order...),
		inters:                  append([]Interceptor{}, pcpq.inters...),
		predicates:              append([]predicate.PromotionCommissionPlan{}, pcpq.predicates...),
		withMember:              pcpq.withMember.Clone(),
		withPromotionCommission: pcpq.withPromotionCommission.Clone(),
		withPlan:                pcpq.withPlan.Clone(),
		// clone intermediate query.
		sql:       pcpq.sql.Clone(),
		path:      pcpq.path,
		modifiers: append([]func(*sql.Selector){}, pcpq.modifiers...),
	}
}

// WithMember tells the query-builder to eager-load the nodes that are connected to
// the "member" edge. The optional arguments are used to configure the query builder of the edge.
func (pcpq *PromotionCommissionPlanQuery) WithMember(opts ...func(*PromotionMemberQuery)) *PromotionCommissionPlanQuery {
	query := (&PromotionMemberClient{config: pcpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcpq.withMember = query
	return pcpq
}

// WithPromotionCommission tells the query-builder to eager-load the nodes that are connected to
// the "promotion_commission" edge. The optional arguments are used to configure the query builder of the edge.
func (pcpq *PromotionCommissionPlanQuery) WithPromotionCommission(opts ...func(*PromotionCommissionQuery)) *PromotionCommissionPlanQuery {
	query := (&PromotionCommissionClient{config: pcpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcpq.withPromotionCommission = query
	return pcpq
}

// WithPlan tells the query-builder to eager-load the nodes that are connected to
// the "plan" edge. The optional arguments are used to configure the query builder of the edge.
func (pcpq *PromotionCommissionPlanQuery) WithPlan(opts ...func(*PlanQuery)) *PromotionCommissionPlanQuery {
	query := (&PlanClient{config: pcpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pcpq.withPlan = query
	return pcpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionCommissionPlan.Query().
//		GroupBy(promotioncommissionplan.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pcpq *PromotionCommissionPlanQuery) GroupBy(field string, fields ...string) *PromotionCommissionPlanGroupBy {
	pcpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionCommissionPlanGroupBy{build: pcpq}
	grbuild.flds = &pcpq.ctx.Fields
	grbuild.label = promotioncommissionplan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionCommissionPlan.Query().
//		Select(promotioncommissionplan.FieldCreatedAt).
//		Scan(ctx, &v)
func (pcpq *PromotionCommissionPlanQuery) Select(fields ...string) *PromotionCommissionPlanSelect {
	pcpq.ctx.Fields = append(pcpq.ctx.Fields, fields...)
	sbuild := &PromotionCommissionPlanSelect{PromotionCommissionPlanQuery: pcpq}
	sbuild.label = promotioncommissionplan.Label
	sbuild.flds, sbuild.scan = &pcpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionCommissionPlanSelect configured with the given aggregations.
func (pcpq *PromotionCommissionPlanQuery) Aggregate(fns ...AggregateFunc) *PromotionCommissionPlanSelect {
	return pcpq.Select().Aggregate(fns...)
}

func (pcpq *PromotionCommissionPlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcpq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcpq.ctx.Fields {
		if !promotioncommissionplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pcpq.path != nil {
		prev, err := pcpq.path(ctx)
		if err != nil {
			return err
		}
		pcpq.sql = prev
	}
	return nil
}

func (pcpq *PromotionCommissionPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionCommissionPlan, error) {
	var (
		nodes       = []*PromotionCommissionPlan{}
		_spec       = pcpq.querySpec()
		loadedTypes = [3]bool{
			pcpq.withMember != nil,
			pcpq.withPromotionCommission != nil,
			pcpq.withPlan != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionCommissionPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionCommissionPlan{config: pcpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pcpq.modifiers) > 0 {
		_spec.Modifiers = pcpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pcpq.withMember; query != nil {
		if err := pcpq.loadMember(ctx, query, nodes, nil,
			func(n *PromotionCommissionPlan, e *PromotionMember) { n.Edges.Member = e }); err != nil {
			return nil, err
		}
	}
	if query := pcpq.withPromotionCommission; query != nil {
		if err := pcpq.loadPromotionCommission(ctx, query, nodes, nil,
			func(n *PromotionCommissionPlan, e *PromotionCommission) { n.Edges.PromotionCommission = e }); err != nil {
			return nil, err
		}
	}
	if query := pcpq.withPlan; query != nil {
		if err := pcpq.loadPlan(ctx, query, nodes, nil,
			func(n *PromotionCommissionPlan, e *Plan) { n.Edges.Plan = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pcpq *PromotionCommissionPlanQuery) loadMember(ctx context.Context, query *PromotionMemberQuery, nodes []*PromotionCommissionPlan, init func(*PromotionCommissionPlan), assign func(*PromotionCommissionPlan, *PromotionMember)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionCommissionPlan)
	for i := range nodes {
		if nodes[i].MemberID == nil {
			continue
		}
		fk := *nodes[i].MemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotionmember.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcpq *PromotionCommissionPlanQuery) loadPromotionCommission(ctx context.Context, query *PromotionCommissionQuery, nodes []*PromotionCommissionPlan, init func(*PromotionCommissionPlan), assign func(*PromotionCommissionPlan, *PromotionCommission)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionCommissionPlan)
	for i := range nodes {
		fk := nodes[i].CommissionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotioncommission.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "commission_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pcpq *PromotionCommissionPlanQuery) loadPlan(ctx context.Context, query *PlanQuery, nodes []*PromotionCommissionPlan, init func(*PromotionCommissionPlan), assign func(*PromotionCommissionPlan, *Plan)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionCommissionPlan)
	for i := range nodes {
		fk := nodes[i].PlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pcpq *PromotionCommissionPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcpq.querySpec()
	if len(pcpq.modifiers) > 0 {
		_spec.Modifiers = pcpq.modifiers
	}
	_spec.Node.Columns = pcpq.ctx.Fields
	if len(pcpq.ctx.Fields) > 0 {
		_spec.Unique = pcpq.ctx.Unique != nil && *pcpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcpq.driver, _spec)
}

func (pcpq *PromotionCommissionPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotioncommissionplan.Table, promotioncommissionplan.Columns, sqlgraph.NewFieldSpec(promotioncommissionplan.FieldID, field.TypeUint64))
	_spec.From = pcpq.sql
	if unique := pcpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcpq.path != nil {
		_spec.Unique = true
	}
	if fields := pcpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotioncommissionplan.FieldID)
		for i := range fields {
			if fields[i] != promotioncommissionplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pcpq.withMember != nil {
			_spec.Node.AddColumnOnce(promotioncommissionplan.FieldMemberID)
		}
		if pcpq.withPromotionCommission != nil {
			_spec.Node.AddColumnOnce(promotioncommissionplan.FieldCommissionID)
		}
		if pcpq.withPlan != nil {
			_spec.Node.AddColumnOnce(promotioncommissionplan.FieldPlanID)
		}
	}
	if ps := pcpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcpq *PromotionCommissionPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcpq.driver.Dialect())
	t1 := builder.Table(promotioncommissionplan.Table)
	columns := pcpq.ctx.Fields
	if len(columns) == 0 {
		columns = promotioncommissionplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcpq.sql != nil {
		selector = pcpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcpq.ctx.Unique != nil && *pcpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pcpq.modifiers {
		m(selector)
	}
	for _, p := range pcpq.predicates {
		p(selector)
	}
	for _, p := range pcpq.order {
		p(selector)
	}
	if offset := pcpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcpq *PromotionCommissionPlanQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionCommissionPlanSelect {
	pcpq.modifiers = append(pcpq.modifiers, modifiers...)
	return pcpq.Select()
}

type PromotionCommissionPlanQueryWith string

var (
	PromotionCommissionPlanQueryWithMember              PromotionCommissionPlanQueryWith = "Member"
	PromotionCommissionPlanQueryWithPromotionCommission PromotionCommissionPlanQueryWith = "PromotionCommission"
	PromotionCommissionPlanQueryWithPlan                PromotionCommissionPlanQueryWith = "Plan"
)

func (pcpq *PromotionCommissionPlanQuery) With(withEdges ...PromotionCommissionPlanQueryWith) *PromotionCommissionPlanQuery {
	for _, v := range withEdges {
		switch v {
		case PromotionCommissionPlanQueryWithMember:
			pcpq.WithMember()
		case PromotionCommissionPlanQueryWithPromotionCommission:
			pcpq.WithPromotionCommission()
		case PromotionCommissionPlanQueryWithPlan:
			pcpq.WithPlan()
		}
	}
	return pcpq
}

// PromotionCommissionPlanGroupBy is the group-by builder for PromotionCommissionPlan entities.
type PromotionCommissionPlanGroupBy struct {
	selector
	build *PromotionCommissionPlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcpgb *PromotionCommissionPlanGroupBy) Aggregate(fns ...AggregateFunc) *PromotionCommissionPlanGroupBy {
	pcpgb.fns = append(pcpgb.fns, fns...)
	return pcpgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcpgb *PromotionCommissionPlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcpgb.build.ctx, ent.OpQueryGroupBy)
	if err := pcpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionCommissionPlanQuery, *PromotionCommissionPlanGroupBy](ctx, pcpgb.build, pcpgb, pcpgb.build.inters, v)
}

func (pcpgb *PromotionCommissionPlanGroupBy) sqlScan(ctx context.Context, root *PromotionCommissionPlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcpgb.fns))
	for _, fn := range pcpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcpgb.flds)+len(pcpgb.fns))
		for _, f := range *pcpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionCommissionPlanSelect is the builder for selecting fields of PromotionCommissionPlan entities.
type PromotionCommissionPlanSelect struct {
	*PromotionCommissionPlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcps *PromotionCommissionPlanSelect) Aggregate(fns ...AggregateFunc) *PromotionCommissionPlanSelect {
	pcps.fns = append(pcps.fns, fns...)
	return pcps
}

// Scan applies the selector query and scans the result into the given value.
func (pcps *PromotionCommissionPlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcps.ctx, ent.OpQuerySelect)
	if err := pcps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionCommissionPlanQuery, *PromotionCommissionPlanSelect](ctx, pcps.PromotionCommissionPlanQuery, pcps, pcps.inters, v)
}

func (pcps *PromotionCommissionPlanSelect) sqlScan(ctx context.Context, root *PromotionCommissionPlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcps.fns))
	for _, fn := range pcps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pcps *PromotionCommissionPlanSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionCommissionPlanSelect {
	pcps.modifiers = append(pcps.modifiers, modifiers...)
	return pcps
}
