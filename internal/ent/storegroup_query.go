// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// StoreGroupQuery is the builder for querying StoreGroup entities.
type StoreGroupQuery struct {
	config
	ctx        *QueryContext
	order      []storegroup.OrderOption
	inters     []Interceptor
	predicates []predicate.StoreGroup
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StoreGroupQuery builder.
func (sgq *StoreGroupQuery) Where(ps ...predicate.StoreGroup) *StoreGroupQuery {
	sgq.predicates = append(sgq.predicates, ps...)
	return sgq
}

// Limit the number of records to be returned by this query.
func (sgq *StoreGroupQuery) Limit(limit int) *StoreGroupQuery {
	sgq.ctx.Limit = &limit
	return sgq
}

// Offset to start from.
func (sgq *StoreGroupQuery) Offset(offset int) *StoreGroupQuery {
	sgq.ctx.Offset = &offset
	return sgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sgq *StoreGroupQuery) Unique(unique bool) *StoreGroupQuery {
	sgq.ctx.Unique = &unique
	return sgq
}

// Order specifies how the records should be ordered.
func (sgq *StoreGroupQuery) Order(o ...storegroup.OrderOption) *StoreGroupQuery {
	sgq.order = append(sgq.order, o...)
	return sgq
}

// First returns the first StoreGroup entity from the query.
// Returns a *NotFoundError when no StoreGroup was found.
func (sgq *StoreGroupQuery) First(ctx context.Context) (*StoreGroup, error) {
	nodes, err := sgq.Limit(1).All(setContextOp(ctx, sgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{storegroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sgq *StoreGroupQuery) FirstX(ctx context.Context) *StoreGroup {
	node, err := sgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StoreGroup ID from the query.
// Returns a *NotFoundError when no StoreGroup ID was found.
func (sgq *StoreGroupQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sgq.Limit(1).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{storegroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sgq *StoreGroupQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StoreGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StoreGroup entity is found.
// Returns a *NotFoundError when no StoreGroup entities are found.
func (sgq *StoreGroupQuery) Only(ctx context.Context) (*StoreGroup, error) {
	nodes, err := sgq.Limit(2).All(setContextOp(ctx, sgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{storegroup.Label}
	default:
		return nil, &NotSingularError{storegroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sgq *StoreGroupQuery) OnlyX(ctx context.Context) *StoreGroup {
	node, err := sgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StoreGroup ID in the query.
// Returns a *NotSingularError when more than one StoreGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (sgq *StoreGroupQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sgq.Limit(2).IDs(setContextOp(ctx, sgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{storegroup.Label}
	default:
		err = &NotSingularError{storegroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sgq *StoreGroupQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StoreGroups.
func (sgq *StoreGroupQuery) All(ctx context.Context) ([]*StoreGroup, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryAll)
	if err := sgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*StoreGroup, *StoreGroupQuery]()
	return withInterceptors[[]*StoreGroup](ctx, sgq, qr, sgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sgq *StoreGroupQuery) AllX(ctx context.Context) []*StoreGroup {
	nodes, err := sgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StoreGroup IDs.
func (sgq *StoreGroupQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if sgq.ctx.Unique == nil && sgq.path != nil {
		sgq.Unique(true)
	}
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryIDs)
	if err = sgq.Select(storegroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sgq *StoreGroupQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sgq *StoreGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryCount)
	if err := sgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sgq, querierCount[*StoreGroupQuery](), sgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sgq *StoreGroupQuery) CountX(ctx context.Context) int {
	count, err := sgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sgq *StoreGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sgq.ctx, ent.OpQueryExist)
	switch _, err := sgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sgq *StoreGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := sgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StoreGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sgq *StoreGroupQuery) Clone() *StoreGroupQuery {
	if sgq == nil {
		return nil
	}
	return &StoreGroupQuery{
		config:     sgq.config,
		ctx:        sgq.ctx.Clone(),
		order:      append([]storegroup.OrderOption{}, sgq.order...),
		inters:     append([]Interceptor{}, sgq.inters...),
		predicates: append([]predicate.StoreGroup{}, sgq.predicates...),
		// clone intermediate query.
		sql:       sgq.sql.Clone(),
		path:      sgq.path,
		modifiers: append([]func(*sql.Selector){}, sgq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StoreGroup.Query().
//		GroupBy(storegroup.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sgq *StoreGroupQuery) GroupBy(field string, fields ...string) *StoreGroupGroupBy {
	sgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StoreGroupGroupBy{build: sgq}
	grbuild.flds = &sgq.ctx.Fields
	grbuild.label = storegroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.StoreGroup.Query().
//		Select(storegroup.FieldCreatedAt).
//		Scan(ctx, &v)
func (sgq *StoreGroupQuery) Select(fields ...string) *StoreGroupSelect {
	sgq.ctx.Fields = append(sgq.ctx.Fields, fields...)
	sbuild := &StoreGroupSelect{StoreGroupQuery: sgq}
	sbuild.label = storegroup.Label
	sbuild.flds, sbuild.scan = &sgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StoreGroupSelect configured with the given aggregations.
func (sgq *StoreGroupQuery) Aggregate(fns ...AggregateFunc) *StoreGroupSelect {
	return sgq.Select().Aggregate(fns...)
}

func (sgq *StoreGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sgq); err != nil {
				return err
			}
		}
	}
	for _, f := range sgq.ctx.Fields {
		if !storegroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sgq.path != nil {
		prev, err := sgq.path(ctx)
		if err != nil {
			return err
		}
		sgq.sql = prev
	}
	return nil
}

func (sgq *StoreGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*StoreGroup, error) {
	var (
		nodes = []*StoreGroup{}
		_spec = sgq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*StoreGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &StoreGroup{config: sgq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (sgq *StoreGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sgq.querySpec()
	if len(sgq.modifiers) > 0 {
		_spec.Modifiers = sgq.modifiers
	}
	_spec.Node.Columns = sgq.ctx.Fields
	if len(sgq.ctx.Fields) > 0 {
		_spec.Unique = sgq.ctx.Unique != nil && *sgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sgq.driver, _spec)
}

func (sgq *StoreGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(storegroup.Table, storegroup.Columns, sqlgraph.NewFieldSpec(storegroup.FieldID, field.TypeUint64))
	_spec.From = sgq.sql
	if unique := sgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sgq.path != nil {
		_spec.Unique = true
	}
	if fields := sgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storegroup.FieldID)
		for i := range fields {
			if fields[i] != storegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sgq *StoreGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sgq.driver.Dialect())
	t1 := builder.Table(storegroup.Table)
	columns := sgq.ctx.Fields
	if len(columns) == 0 {
		columns = storegroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sgq.sql != nil {
		selector = sgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sgq.ctx.Unique != nil && *sgq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range sgq.modifiers {
		m(selector)
	}
	for _, p := range sgq.predicates {
		p(selector)
	}
	for _, p := range sgq.order {
		p(selector)
	}
	if offset := sgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sgq *StoreGroupQuery) Modify(modifiers ...func(s *sql.Selector)) *StoreGroupSelect {
	sgq.modifiers = append(sgq.modifiers, modifiers...)
	return sgq.Select()
}

type StoreGroupQueryWith string

var ()

func (sgq *StoreGroupQuery) With(withEdges ...StoreGroupQueryWith) *StoreGroupQuery {
	for _, v := range withEdges {
		switch v {
		}
	}
	return sgq
}

// StoreGroupGroupBy is the group-by builder for StoreGroup entities.
type StoreGroupGroupBy struct {
	selector
	build *StoreGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sggb *StoreGroupGroupBy) Aggregate(fns ...AggregateFunc) *StoreGroupGroupBy {
	sggb.fns = append(sggb.fns, fns...)
	return sggb
}

// Scan applies the selector query and scans the result into the given value.
func (sggb *StoreGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sggb.build.ctx, ent.OpQueryGroupBy)
	if err := sggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StoreGroupQuery, *StoreGroupGroupBy](ctx, sggb.build, sggb, sggb.build.inters, v)
}

func (sggb *StoreGroupGroupBy) sqlScan(ctx context.Context, root *StoreGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sggb.fns))
	for _, fn := range sggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sggb.flds)+len(sggb.fns))
		for _, f := range *sggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StoreGroupSelect is the builder for selecting fields of StoreGroup entities.
type StoreGroupSelect struct {
	*StoreGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sgs *StoreGroupSelect) Aggregate(fns ...AggregateFunc) *StoreGroupSelect {
	sgs.fns = append(sgs.fns, fns...)
	return sgs
}

// Scan applies the selector query and scans the result into the given value.
func (sgs *StoreGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgs.ctx, ent.OpQuerySelect)
	if err := sgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StoreGroupQuery, *StoreGroupSelect](ctx, sgs.StoreGroupQuery, sgs, sgs.inters, v)
}

func (sgs *StoreGroupSelect) sqlScan(ctx context.Context, root *StoreGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sgs.fns))
	for _, fn := range sgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sgs *StoreGroupSelect) Modify(modifiers ...func(s *sql.Selector)) *StoreGroupSelect {
	sgs.modifiers = append(sgs.modifiers, modifiers...)
	return sgs
}
