// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribeSuspendQuery is the builder for querying SubscribeSuspend entities.
type SubscribeSuspendQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	inters        []Interceptor
	predicates    []predicate.SubscribeSuspend
	withCity      *CityQuery
	withRider     *RiderQuery
	withSubscribe *SubscribeQuery
	withPause     *SubscribePauseQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscribeSuspendQuery builder.
func (ssq *SubscribeSuspendQuery) Where(ps ...predicate.SubscribeSuspend) *SubscribeSuspendQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit the number of records to be returned by this query.
func (ssq *SubscribeSuspendQuery) Limit(limit int) *SubscribeSuspendQuery {
	ssq.limit = &limit
	return ssq
}

// Offset to start from.
func (ssq *SubscribeSuspendQuery) Offset(offset int) *SubscribeSuspendQuery {
	ssq.offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *SubscribeSuspendQuery) Unique(unique bool) *SubscribeSuspendQuery {
	ssq.unique = &unique
	return ssq
}

// Order specifies how the records should be ordered.
func (ssq *SubscribeSuspendQuery) Order(o ...OrderFunc) *SubscribeSuspendQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryCity chains the current query on the "city" edge.
func (ssq *SubscribeSuspendQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.CityTable, subscribesuspend.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (ssq *SubscribeSuspendQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribesuspend.RiderTable, subscribesuspend.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (ssq *SubscribeSuspendQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.SubscribeTable, subscribesuspend.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPause chains the current query on the "pause" edge.
func (ssq *SubscribeSuspendQuery) QueryPause() *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribesuspend.Table, subscribesuspend.FieldID, selector),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribesuspend.PauseTable, subscribesuspend.PauseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubscribeSuspend entity from the query.
// Returns a *NotFoundError when no SubscribeSuspend was found.
func (ssq *SubscribeSuspendQuery) First(ctx context.Context) (*SubscribeSuspend, error) {
	nodes, err := ssq.Limit(1).All(newQueryContext(ctx, TypeSubscribeSuspend, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscribesuspend.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) FirstX(ctx context.Context) *SubscribeSuspend {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubscribeSuspend ID from the query.
// Returns a *NotFoundError when no SubscribeSuspend ID was found.
func (ssq *SubscribeSuspendQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ssq.Limit(1).IDs(newQueryContext(ctx, TypeSubscribeSuspend, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscribesuspend.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubscribeSuspend entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubscribeSuspend entity is found.
// Returns a *NotFoundError when no SubscribeSuspend entities are found.
func (ssq *SubscribeSuspendQuery) Only(ctx context.Context) (*SubscribeSuspend, error) {
	nodes, err := ssq.Limit(2).All(newQueryContext(ctx, TypeSubscribeSuspend, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscribesuspend.Label}
	default:
		return nil, &NotSingularError{subscribesuspend.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) OnlyX(ctx context.Context) *SubscribeSuspend {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubscribeSuspend ID in the query.
// Returns a *NotSingularError when more than one SubscribeSuspend ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *SubscribeSuspendQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ssq.Limit(2).IDs(newQueryContext(ctx, TypeSubscribeSuspend, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscribesuspend.Label}
	default:
		err = &NotSingularError{subscribesuspend.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubscribeSuspends.
func (ssq *SubscribeSuspendQuery) All(ctx context.Context) ([]*SubscribeSuspend, error) {
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "All")
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubscribeSuspend, *SubscribeSuspendQuery]()
	return withInterceptors[[]*SubscribeSuspend](ctx, ssq, qr, ssq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) AllX(ctx context.Context) []*SubscribeSuspend {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubscribeSuspend IDs.
func (ssq *SubscribeSuspendQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "IDs")
	if err := ssq.Select(subscribesuspend.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *SubscribeSuspendQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "Count")
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssq, querierCount[*SubscribeSuspendQuery](), ssq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *SubscribeSuspendQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "Exist")
	switch _, err := ssq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *SubscribeSuspendQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscribeSuspendQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *SubscribeSuspendQuery) Clone() *SubscribeSuspendQuery {
	if ssq == nil {
		return nil
	}
	return &SubscribeSuspendQuery{
		config:        ssq.config,
		limit:         ssq.limit,
		offset:        ssq.offset,
		order:         append([]OrderFunc{}, ssq.order...),
		predicates:    append([]predicate.SubscribeSuspend{}, ssq.predicates...),
		withCity:      ssq.withCity.Clone(),
		withRider:     ssq.withRider.Clone(),
		withSubscribe: ssq.withSubscribe.Clone(),
		withPause:     ssq.withPause.Clone(),
		// clone intermediate query.
		sql:    ssq.sql.Clone(),
		path:   ssq.path,
		unique: ssq.unique,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscribeSuspendQuery) WithCity(opts ...func(*CityQuery)) *SubscribeSuspendQuery {
	query := (&CityClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withCity = query
	return ssq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscribeSuspendQuery) WithRider(opts ...func(*RiderQuery)) *SubscribeSuspendQuery {
	query := (&RiderClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withRider = query
	return ssq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscribeSuspendQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *SubscribeSuspendQuery {
	query := (&SubscribeClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withSubscribe = query
	return ssq
}

// WithPause tells the query-builder to eager-load the nodes that are connected to
// the "pause" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *SubscribeSuspendQuery) WithPause(opts ...func(*SubscribePauseQuery)) *SubscribeSuspendQuery {
	query := (&SubscribePauseClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withPause = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Creator *model.Modifier `json:"creator,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubscribeSuspend.Query().
//		GroupBy(subscribesuspend.FieldCreator).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *SubscribeSuspendQuery) GroupBy(field string, fields ...string) *SubscribeSuspendGroupBy {
	ssq.fields = append([]string{field}, fields...)
	grbuild := &SubscribeSuspendGroupBy{build: ssq}
	grbuild.flds = &ssq.fields
	grbuild.label = subscribesuspend.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Creator *model.Modifier `json:"creator,omitempty"`
//	}
//
//	client.SubscribeSuspend.Query().
//		Select(subscribesuspend.FieldCreator).
//		Scan(ctx, &v)
func (ssq *SubscribeSuspendQuery) Select(fields ...string) *SubscribeSuspendSelect {
	ssq.fields = append(ssq.fields, fields...)
	sbuild := &SubscribeSuspendSelect{SubscribeSuspendQuery: ssq}
	sbuild.label = subscribesuspend.Label
	sbuild.flds, sbuild.scan = &ssq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscribeSuspendSelect configured with the given aggregations.
func (ssq *SubscribeSuspendQuery) Aggregate(fns ...AggregateFunc) *SubscribeSuspendSelect {
	return ssq.Select().Aggregate(fns...)
}

func (ssq *SubscribeSuspendQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssq.fields {
		if !subscribesuspend.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *SubscribeSuspendQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubscribeSuspend, error) {
	var (
		nodes       = []*SubscribeSuspend{}
		_spec       = ssq.querySpec()
		loadedTypes = [4]bool{
			ssq.withCity != nil,
			ssq.withRider != nil,
			ssq.withSubscribe != nil,
			ssq.withPause != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubscribeSuspend).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubscribeSuspend{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ssq.modifiers) > 0 {
		_spec.Modifiers = ssq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withCity; query != nil {
		if err := ssq.loadCity(ctx, query, nodes, nil,
			func(n *SubscribeSuspend, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withRider; query != nil {
		if err := ssq.loadRider(ctx, query, nodes, nil,
			func(n *SubscribeSuspend, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withSubscribe; query != nil {
		if err := ssq.loadSubscribe(ctx, query, nodes, nil,
			func(n *SubscribeSuspend, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withPause; query != nil {
		if err := ssq.loadPause(ctx, query, nodes, nil,
			func(n *SubscribeSuspend, e *SubscribePause) { n.Edges.Pause = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *SubscribeSuspendQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*SubscribeSuspend, init func(*SubscribeSuspend), assign func(*SubscribeSuspend, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribeSuspend)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SubscribeSuspendQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*SubscribeSuspend, init func(*SubscribeSuspend), assign func(*SubscribeSuspend, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribeSuspend)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SubscribeSuspendQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*SubscribeSuspend, init func(*SubscribeSuspend), assign func(*SubscribeSuspend, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribeSuspend)
	for i := range nodes {
		fk := nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *SubscribeSuspendQuery) loadPause(ctx context.Context, query *SubscribePauseQuery, nodes []*SubscribeSuspend, init func(*SubscribeSuspend), assign func(*SubscribeSuspend, *SubscribePause)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*SubscribeSuspend)
	for i := range nodes {
		fk := nodes[i].PauseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(subscribepause.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "pause_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ssq *SubscribeSuspendQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	if len(ssq.modifiers) > 0 {
		_spec.Modifiers = ssq.modifiers
	}
	_spec.Node.Columns = ssq.fields
	if len(ssq.fields) > 0 {
		_spec.Unique = ssq.unique != nil && *ssq.unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *SubscribeSuspendQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribesuspend.Table,
			Columns: subscribesuspend.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribesuspend.FieldID,
			},
		},
		From:   ssq.sql,
		Unique: true,
	}
	if unique := ssq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ssq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribesuspend.FieldID)
		for i := range fields {
			if fields[i] != subscribesuspend.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *SubscribeSuspendQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(subscribesuspend.Table)
	columns := ssq.fields
	if len(columns) == 0 {
		columns = subscribesuspend.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.unique != nil && *ssq.unique {
		selector.Distinct()
	}
	for _, m := range ssq.modifiers {
		m(selector)
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ssq *SubscribeSuspendQuery) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSuspendSelect {
	ssq.modifiers = append(ssq.modifiers, modifiers...)
	return ssq.Select()
}

// SubscribeSuspendGroupBy is the group-by builder for SubscribeSuspend entities.
type SubscribeSuspendGroupBy struct {
	selector
	build *SubscribeSuspendQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *SubscribeSuspendGroupBy) Aggregate(fns ...AggregateFunc) *SubscribeSuspendGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssgb *SubscribeSuspendGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "GroupBy")
	if err := ssgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribeSuspendQuery, *SubscribeSuspendGroupBy](ctx, ssgb.build, ssgb, ssgb.build.inters, v)
}

func (ssgb *SubscribeSuspendGroupBy) sqlScan(ctx context.Context, root *SubscribeSuspendQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssgb.flds)+len(ssgb.fns))
		for _, f := range *ssgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscribeSuspendSelect is the builder for selecting fields of SubscribeSuspend entities.
type SubscribeSuspendSelect struct {
	*SubscribeSuspendQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sss *SubscribeSuspendSelect) Aggregate(fns ...AggregateFunc) *SubscribeSuspendSelect {
	sss.fns = append(sss.fns, fns...)
	return sss
}

// Scan applies the selector query and scans the result into the given value.
func (sss *SubscribeSuspendSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSubscribeSuspend, "Select")
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribeSuspendQuery, *SubscribeSuspendSelect](ctx, sss.SubscribeSuspendQuery, sss, sss.inters, v)
}

func (sss *SubscribeSuspendSelect) sqlScan(ctx context.Context, root *SubscribeSuspendQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sss.fns))
	for _, fn := range sss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sss *SubscribeSuspendSelect) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSuspendSelect {
	sss.modifiers = append(sss.modifiers, modifiers...)
	return sss
}
