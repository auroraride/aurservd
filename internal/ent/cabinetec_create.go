// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetec"
)

// CabinetEcCreate is the builder for creating a CabinetEc entity.
type CabinetEcCreate struct {
	config
	mutation *CabinetEcMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cec *CabinetEcCreate) SetCreatedAt(t time.Time) *CabinetEcCreate {
	cec.mutation.SetCreatedAt(t)
	return cec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cec *CabinetEcCreate) SetNillableCreatedAt(t *time.Time) *CabinetEcCreate {
	if t != nil {
		cec.SetCreatedAt(*t)
	}
	return cec
}

// SetUpdatedAt sets the "updated_at" field.
func (cec *CabinetEcCreate) SetUpdatedAt(t time.Time) *CabinetEcCreate {
	cec.mutation.SetUpdatedAt(t)
	return cec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cec *CabinetEcCreate) SetNillableUpdatedAt(t *time.Time) *CabinetEcCreate {
	if t != nil {
		cec.SetUpdatedAt(*t)
	}
	return cec
}

// SetDeletedAt sets the "deleted_at" field.
func (cec *CabinetEcCreate) SetDeletedAt(t time.Time) *CabinetEcCreate {
	cec.mutation.SetDeletedAt(t)
	return cec
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cec *CabinetEcCreate) SetNillableDeletedAt(t *time.Time) *CabinetEcCreate {
	if t != nil {
		cec.SetDeletedAt(*t)
	}
	return cec
}

// SetCabinetID sets the "cabinet_id" field.
func (cec *CabinetEcCreate) SetCabinetID(u uint64) *CabinetEcCreate {
	cec.mutation.SetCabinetID(u)
	return cec
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (cec *CabinetEcCreate) SetNillableCabinetID(u *uint64) *CabinetEcCreate {
	if u != nil {
		cec.SetCabinetID(*u)
	}
	return cec
}

// SetSerial sets the "serial" field.
func (cec *CabinetEcCreate) SetSerial(s string) *CabinetEcCreate {
	cec.mutation.SetSerial(s)
	return cec
}

// SetDate sets the "date" field.
func (cec *CabinetEcCreate) SetDate(s string) *CabinetEcCreate {
	cec.mutation.SetDate(s)
	return cec
}

// SetStart sets the "start" field.
func (cec *CabinetEcCreate) SetStart(f float64) *CabinetEcCreate {
	cec.mutation.SetStart(f)
	return cec
}

// SetEnd sets the "end" field.
func (cec *CabinetEcCreate) SetEnd(f float64) *CabinetEcCreate {
	cec.mutation.SetEnd(f)
	return cec
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (cec *CabinetEcCreate) SetNillableEnd(f *float64) *CabinetEcCreate {
	if f != nil {
		cec.SetEnd(*f)
	}
	return cec
}

// SetTotal sets the "total" field.
func (cec *CabinetEcCreate) SetTotal(f float64) *CabinetEcCreate {
	cec.mutation.SetTotal(f)
	return cec
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cec *CabinetEcCreate) SetCabinet(c *Cabinet) *CabinetEcCreate {
	return cec.SetCabinetID(c.ID)
}

// Mutation returns the CabinetEcMutation object of the builder.
func (cec *CabinetEcCreate) Mutation() *CabinetEcMutation {
	return cec.mutation
}

// Save creates the CabinetEc in the database.
func (cec *CabinetEcCreate) Save(ctx context.Context) (*CabinetEc, error) {
	cec.defaults()
	return withHooks(ctx, cec.sqlSave, cec.mutation, cec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cec *CabinetEcCreate) SaveX(ctx context.Context) *CabinetEc {
	v, err := cec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cec *CabinetEcCreate) Exec(ctx context.Context) error {
	_, err := cec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cec *CabinetEcCreate) ExecX(ctx context.Context) {
	if err := cec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cec *CabinetEcCreate) defaults() {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		v := cabinetec.DefaultCreatedAt()
		cec.mutation.SetCreatedAt(v)
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		v := cabinetec.DefaultUpdatedAt()
		cec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cec *CabinetEcCreate) check() error {
	if _, ok := cec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CabinetEc.created_at"`)}
	}
	if _, ok := cec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CabinetEc.updated_at"`)}
	}
	if _, ok := cec.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "CabinetEc.serial"`)}
	}
	if _, ok := cec.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "CabinetEc.date"`)}
	}
	if _, ok := cec.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "CabinetEc.start"`)}
	}
	if _, ok := cec.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "CabinetEc.total"`)}
	}
	return nil
}

func (cec *CabinetEcCreate) sqlSave(ctx context.Context) (*CabinetEc, error) {
	if err := cec.check(); err != nil {
		return nil, err
	}
	_node, _spec := cec.createSpec()
	if err := sqlgraph.CreateNode(ctx, cec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	cec.mutation.id = &_node.ID
	cec.mutation.done = true
	return _node, nil
}

func (cec *CabinetEcCreate) createSpec() (*CabinetEc, *sqlgraph.CreateSpec) {
	var (
		_node = &CabinetEc{config: cec.config}
		_spec = sqlgraph.NewCreateSpec(cabinetec.Table, sqlgraph.NewFieldSpec(cabinetec.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = cec.conflict
	if value, ok := cec.mutation.CreatedAt(); ok {
		_spec.SetField(cabinetec.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cec.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinetec.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cec.mutation.DeletedAt(); ok {
		_spec.SetField(cabinetec.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cec.mutation.Serial(); ok {
		_spec.SetField(cabinetec.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := cec.mutation.Date(); ok {
		_spec.SetField(cabinetec.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := cec.mutation.Start(); ok {
		_spec.SetField(cabinetec.FieldStart, field.TypeFloat64, value)
		_node.Start = value
	}
	if value, ok := cec.mutation.End(); ok {
		_spec.SetField(cabinetec.FieldEnd, field.TypeFloat64, value)
		_node.End = value
	}
	if value, ok := cec.mutation.Total(); ok {
		_spec.SetField(cabinetec.FieldTotal, field.TypeFloat64, value)
		_node.Total = value
	}
	if nodes := cec.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinetec.CabinetTable,
			Columns: []string{cabinetec.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetEc.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetEcUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cec *CabinetEcCreate) OnConflict(opts ...sql.ConflictOption) *CabinetEcUpsertOne {
	cec.conflict = opts
	return &CabinetEcUpsertOne{
		create: cec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cec *CabinetEcCreate) OnConflictColumns(columns ...string) *CabinetEcUpsertOne {
	cec.conflict = append(cec.conflict, sql.ConflictColumns(columns...))
	return &CabinetEcUpsertOne{
		create: cec,
	}
}

type (
	// CabinetEcUpsertOne is the builder for "upsert"-ing
	//  one CabinetEc node.
	CabinetEcUpsertOne struct {
		create *CabinetEcCreate
	}

	// CabinetEcUpsert is the "OnConflict" setter.
	CabinetEcUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetEcUpsert) SetUpdatedAt(v time.Time) *CabinetEcUpsert {
	u.Set(cabinetec.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateUpdatedAt() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetEcUpsert) SetDeletedAt(v time.Time) *CabinetEcUpsert {
	u.Set(cabinetec.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateDeletedAt() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetEcUpsert) ClearDeletedAt() *CabinetEcUpsert {
	u.SetNull(cabinetec.FieldDeletedAt)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetEcUpsert) SetCabinetID(v uint64) *CabinetEcUpsert {
	u.Set(cabinetec.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateCabinetID() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *CabinetEcUpsert) ClearCabinetID() *CabinetEcUpsert {
	u.SetNull(cabinetec.FieldCabinetID)
	return u
}

// SetSerial sets the "serial" field.
func (u *CabinetEcUpsert) SetSerial(v string) *CabinetEcUpsert {
	u.Set(cabinetec.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateSerial() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldSerial)
	return u
}

// SetDate sets the "date" field.
func (u *CabinetEcUpsert) SetDate(v string) *CabinetEcUpsert {
	u.Set(cabinetec.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateDate() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldDate)
	return u
}

// SetStart sets the "start" field.
func (u *CabinetEcUpsert) SetStart(v float64) *CabinetEcUpsert {
	u.Set(cabinetec.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateStart() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *CabinetEcUpsert) AddStart(v float64) *CabinetEcUpsert {
	u.Add(cabinetec.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *CabinetEcUpsert) SetEnd(v float64) *CabinetEcUpsert {
	u.Set(cabinetec.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateEnd() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *CabinetEcUpsert) AddEnd(v float64) *CabinetEcUpsert {
	u.Add(cabinetec.FieldEnd, v)
	return u
}

// ClearEnd clears the value of the "end" field.
func (u *CabinetEcUpsert) ClearEnd() *CabinetEcUpsert {
	u.SetNull(cabinetec.FieldEnd)
	return u
}

// SetTotal sets the "total" field.
func (u *CabinetEcUpsert) SetTotal(v float64) *CabinetEcUpsert {
	u.Set(cabinetec.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CabinetEcUpsert) UpdateTotal() *CabinetEcUpsert {
	u.SetExcluded(cabinetec.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *CabinetEcUpsert) AddTotal(v float64) *CabinetEcUpsert {
	u.Add(cabinetec.FieldTotal, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetEcUpsertOne) UpdateNewValues() *CabinetEcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinetec.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CabinetEcUpsertOne) Ignore() *CabinetEcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetEcUpsertOne) DoNothing() *CabinetEcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetEcCreate.OnConflict
// documentation for more info.
func (u *CabinetEcUpsertOne) Update(set func(*CabinetEcUpsert)) *CabinetEcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetEcUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetEcUpsertOne) SetUpdatedAt(v time.Time) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateUpdatedAt() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetEcUpsertOne) SetDeletedAt(v time.Time) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateDeletedAt() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetEcUpsertOne) ClearDeletedAt() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetEcUpsertOne) SetCabinetID(v uint64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateCabinetID() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *CabinetEcUpsertOne) ClearCabinetID() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetEcUpsertOne) SetSerial(v string) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateSerial() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateSerial()
	})
}

// SetDate sets the "date" field.
func (u *CabinetEcUpsertOne) SetDate(v string) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateDate() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateDate()
	})
}

// SetStart sets the "start" field.
func (u *CabinetEcUpsertOne) SetStart(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *CabinetEcUpsertOne) AddStart(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateStart() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *CabinetEcUpsertOne) SetEnd(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *CabinetEcUpsertOne) AddEnd(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateEnd() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "end" field.
func (u *CabinetEcUpsertOne) ClearEnd() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearEnd()
	})
}

// SetTotal sets the "total" field.
func (u *CabinetEcUpsertOne) SetTotal(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *CabinetEcUpsertOne) AddTotal(v float64) *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CabinetEcUpsertOne) UpdateTotal() *CabinetEcUpsertOne {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateTotal()
	})
}

// Exec executes the query.
func (u *CabinetEcUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetEcCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetEcUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetEcUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetEcUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CabinetEcCreateBulk is the builder for creating many CabinetEc entities in bulk.
type CabinetEcCreateBulk struct {
	config
	err      error
	builders []*CabinetEcCreate
	conflict []sql.ConflictOption
}

// Save creates the CabinetEc entities in the database.
func (cecb *CabinetEcCreateBulk) Save(ctx context.Context) ([]*CabinetEc, error) {
	if cecb.err != nil {
		return nil, cecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cecb.builders))
	nodes := make([]*CabinetEc, len(cecb.builders))
	mutators := make([]Mutator, len(cecb.builders))
	for i := range cecb.builders {
		func(i int, root context.Context) {
			builder := cecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetEcMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cecb *CabinetEcCreateBulk) SaveX(ctx context.Context) []*CabinetEc {
	v, err := cecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cecb *CabinetEcCreateBulk) Exec(ctx context.Context) error {
	_, err := cecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cecb *CabinetEcCreateBulk) ExecX(ctx context.Context) {
	if err := cecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetEc.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetEcUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cecb *CabinetEcCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetEcUpsertBulk {
	cecb.conflict = opts
	return &CabinetEcUpsertBulk{
		create: cecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cecb *CabinetEcCreateBulk) OnConflictColumns(columns ...string) *CabinetEcUpsertBulk {
	cecb.conflict = append(cecb.conflict, sql.ConflictColumns(columns...))
	return &CabinetEcUpsertBulk{
		create: cecb,
	}
}

// CabinetEcUpsertBulk is the builder for "upsert"-ing
// a bulk of CabinetEc nodes.
type CabinetEcUpsertBulk struct {
	create *CabinetEcCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetEcUpsertBulk) UpdateNewValues() *CabinetEcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinetec.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetEc.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CabinetEcUpsertBulk) Ignore() *CabinetEcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetEcUpsertBulk) DoNothing() *CabinetEcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetEcCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetEcUpsertBulk) Update(set func(*CabinetEcUpsert)) *CabinetEcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetEcUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetEcUpsertBulk) SetUpdatedAt(v time.Time) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateUpdatedAt() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetEcUpsertBulk) SetDeletedAt(v time.Time) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateDeletedAt() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetEcUpsertBulk) ClearDeletedAt() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *CabinetEcUpsertBulk) SetCabinetID(v uint64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateCabinetID() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *CabinetEcUpsertBulk) ClearCabinetID() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetEcUpsertBulk) SetSerial(v string) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateSerial() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateSerial()
	})
}

// SetDate sets the "date" field.
func (u *CabinetEcUpsertBulk) SetDate(v string) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateDate() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateDate()
	})
}

// SetStart sets the "start" field.
func (u *CabinetEcUpsertBulk) SetStart(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *CabinetEcUpsertBulk) AddStart(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateStart() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *CabinetEcUpsertBulk) SetEnd(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *CabinetEcUpsertBulk) AddEnd(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateEnd() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateEnd()
	})
}

// ClearEnd clears the value of the "end" field.
func (u *CabinetEcUpsertBulk) ClearEnd() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.ClearEnd()
	})
}

// SetTotal sets the "total" field.
func (u *CabinetEcUpsertBulk) SetTotal(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *CabinetEcUpsertBulk) AddTotal(v float64) *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *CabinetEcUpsertBulk) UpdateTotal() *CabinetEcUpsertBulk {
	return u.Update(func(s *CabinetEcUpsert) {
		s.UpdateTotal()
	})
}

// Exec executes the query.
func (u *CabinetEcUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetEcCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetEcCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetEcUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
