// Code generated by ent, DO NOT EDIT.

package goods

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the goods type in the database.
	Label = "goods"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLables holds the string denoting the lables field in the database.
	FieldLables = "lables"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeadPic holds the string denoting the head_pic field in the database.
	FieldHeadPic = "head_pic"
	// FieldPhotos holds the string denoting the photos field in the database.
	FieldPhotos = "photos"
	// FieldIntro holds the string denoting the intro field in the database.
	FieldIntro = "intro"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldInstallment holds the string denoting the installment field in the database.
	FieldInstallment = "installment"
	// EdgeStores holds the string denoting the stores edge name in mutations.
	EdgeStores = "stores"
	// Table holds the table name of the goods in the database.
	Table = "goods"
	// StoresTable is the table that holds the stores relation/edge.
	StoresTable = "store_goods"
	// StoresInverseTable is the table name for the StoreGoods entity.
	// It exists in this package in order to avoid circular dependency with the "storegoods" package.
	StoresInverseTable = "store_goods"
	// StoresColumn is the table column denoting the stores relation/edge.
	StoresColumn = "goods_id"
)

// Columns holds all SQL columns for goods fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldSn,
	FieldName,
	FieldType,
	FieldLables,
	FieldPrice,
	FieldWeight,
	FieldHeadPic,
	FieldPhotos,
	FieldIntro,
	FieldStatus,
	FieldInstallment,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType uint8
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the Goods queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByHeadPic orders the results by the head_pic field.
func ByHeadPic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeadPic, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStoresCount orders the results by stores count.
func ByStoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStoresStep(), opts...)
	}
}

// ByStores orders the results by stores terms.
func ByStores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StoresTable, StoresColumn),
	)
}
