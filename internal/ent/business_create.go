// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BusinessCreate is the builder for creating a Business entity.
type BusinessCreate struct {
	config
	mutation *BusinessMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BusinessCreate) SetCreatedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCreatedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BusinessCreate) SetUpdatedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableUpdatedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetDeletedAt sets the "deleted_at" field.
func (bc *BusinessCreate) SetDeletedAt(t time.Time) *BusinessCreate {
	bc.mutation.SetDeletedAt(t)
	return bc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableDeletedAt(t *time.Time) *BusinessCreate {
	if t != nil {
		bc.SetDeletedAt(*t)
	}
	return bc
}

// SetCreator sets the "creator" field.
func (bc *BusinessCreate) SetCreator(m *model.Modifier) *BusinessCreate {
	bc.mutation.SetCreator(m)
	return bc
}

// SetLastModifier sets the "last_modifier" field.
func (bc *BusinessCreate) SetLastModifier(m *model.Modifier) *BusinessCreate {
	bc.mutation.SetLastModifier(m)
	return bc
}

// SetRemark sets the "remark" field.
func (bc *BusinessCreate) SetRemark(s string) *BusinessCreate {
	bc.mutation.SetRemark(s)
	return bc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableRemark(s *string) *BusinessCreate {
	if s != nil {
		bc.SetRemark(*s)
	}
	return bc
}

// SetRiderID sets the "rider_id" field.
func (bc *BusinessCreate) SetRiderID(u uint64) *BusinessCreate {
	bc.mutation.SetRiderID(u)
	return bc
}

// SetCityID sets the "city_id" field.
func (bc *BusinessCreate) SetCityID(u uint64) *BusinessCreate {
	bc.mutation.SetCityID(u)
	return bc
}

// SetSubscribeID sets the "subscribe_id" field.
func (bc *BusinessCreate) SetSubscribeID(u uint64) *BusinessCreate {
	bc.mutation.SetSubscribeID(u)
	return bc
}

// SetEmployeeID sets the "employee_id" field.
func (bc *BusinessCreate) SetEmployeeID(u uint64) *BusinessCreate {
	bc.mutation.SetEmployeeID(u)
	return bc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableEmployeeID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetEmployeeID(*u)
	}
	return bc
}

// SetStoreID sets the "store_id" field.
func (bc *BusinessCreate) SetStoreID(u uint64) *BusinessCreate {
	bc.mutation.SetStoreID(u)
	return bc
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableStoreID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetStoreID(*u)
	}
	return bc
}

// SetPlanID sets the "plan_id" field.
func (bc *BusinessCreate) SetPlanID(u uint64) *BusinessCreate {
	bc.mutation.SetPlanID(u)
	return bc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillablePlanID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetPlanID(*u)
	}
	return bc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (bc *BusinessCreate) SetEnterpriseID(u uint64) *BusinessCreate {
	bc.mutation.SetEnterpriseID(u)
	return bc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableEnterpriseID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetEnterpriseID(*u)
	}
	return bc
}

// SetStationID sets the "station_id" field.
func (bc *BusinessCreate) SetStationID(u uint64) *BusinessCreate {
	bc.mutation.SetStationID(u)
	return bc
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableStationID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetStationID(*u)
	}
	return bc
}

// SetCabinetID sets the "cabinet_id" field.
func (bc *BusinessCreate) SetCabinetID(u uint64) *BusinessCreate {
	bc.mutation.SetCabinetID(u)
	return bc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableCabinetID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetCabinetID(*u)
	}
	return bc
}

// SetAgentID sets the "agent_id" field.
func (bc *BusinessCreate) SetAgentID(u uint64) *BusinessCreate {
	bc.mutation.SetAgentID(u)
	return bc
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableAgentID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetAgentID(*u)
	}
	return bc
}

// SetType sets the "type" field.
func (bc *BusinessCreate) SetType(mt model.BusinessType) *BusinessCreate {
	bc.mutation.SetType(mt)
	return bc
}

// SetBinInfo sets the "bin_info" field.
func (bc *BusinessCreate) SetBinInfo(mi *model.BinInfo) *BusinessCreate {
	bc.mutation.SetBinInfo(mi)
	return bc
}

// SetStockSn sets the "stock_sn" field.
func (bc *BusinessCreate) SetStockSn(s string) *BusinessCreate {
	bc.mutation.SetStockSn(s)
	return bc
}

// SetNillableStockSn sets the "stock_sn" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableStockSn(s *string) *BusinessCreate {
	if s != nil {
		bc.SetStockSn(*s)
	}
	return bc
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (bc *BusinessCreate) SetRtoEbikeID(u uint64) *BusinessCreate {
	bc.mutation.SetRtoEbikeID(u)
	return bc
}

// SetNillableRtoEbikeID sets the "rto_ebike_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableRtoEbikeID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetRtoEbikeID(*u)
	}
	return bc
}

// SetBatteryID sets the "battery_id" field.
func (bc *BusinessCreate) SetBatteryID(u uint64) *BusinessCreate {
	bc.mutation.SetBatteryID(u)
	return bc
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (bc *BusinessCreate) SetNillableBatteryID(u *uint64) *BusinessCreate {
	if u != nil {
		bc.SetBatteryID(*u)
	}
	return bc
}

// SetRider sets the "rider" edge to the Rider entity.
func (bc *BusinessCreate) SetRider(r *Rider) *BusinessCreate {
	return bc.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (bc *BusinessCreate) SetCity(c *City) *BusinessCreate {
	return bc.SetCityID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bc *BusinessCreate) SetSubscribe(s *Subscribe) *BusinessCreate {
	return bc.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (bc *BusinessCreate) SetEmployee(e *Employee) *BusinessCreate {
	return bc.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (bc *BusinessCreate) SetStore(s *Store) *BusinessCreate {
	return bc.SetStoreID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (bc *BusinessCreate) SetPlan(p *Plan) *BusinessCreate {
	return bc.SetPlanID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (bc *BusinessCreate) SetEnterprise(e *Enterprise) *BusinessCreate {
	return bc.SetEnterpriseID(e.ID)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (bc *BusinessCreate) SetStation(e *EnterpriseStation) *BusinessCreate {
	return bc.SetStationID(e.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bc *BusinessCreate) SetCabinet(c *Cabinet) *BusinessCreate {
	return bc.SetCabinetID(c.ID)
}

// SetAgent sets the "agent" edge to the Agent entity.
func (bc *BusinessCreate) SetAgent(a *Agent) *BusinessCreate {
	return bc.SetAgentID(a.ID)
}

// SetRtoEbike sets the "rto_ebike" edge to the Asset entity.
func (bc *BusinessCreate) SetRtoEbike(a *Asset) *BusinessCreate {
	return bc.SetRtoEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (bc *BusinessCreate) SetBattery(a *Asset) *BusinessCreate {
	return bc.SetBatteryID(a.ID)
}

// Mutation returns the BusinessMutation object of the builder.
func (bc *BusinessCreate) Mutation() *BusinessMutation {
	return bc.mutation
}

// Save creates the Business in the database.
func (bc *BusinessCreate) Save(ctx context.Context) (*Business, error) {
	if err := bc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BusinessCreate) SaveX(ctx context.Context) *Business {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BusinessCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BusinessCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BusinessCreate) defaults() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		if business.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := business.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		if business.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized business.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := business.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bc *BusinessCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Business.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Business.updated_at"`)}
	}
	if _, ok := bc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Business.rider_id"`)}
	}
	if _, ok := bc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Business.city_id"`)}
	}
	if _, ok := bc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "Business.subscribe_id"`)}
	}
	if _, ok := bc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Business.type"`)}
	}
	if _, ok := bc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Business.rider"`)}
	}
	if _, ok := bc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Business.city"`)}
	}
	if _, ok := bc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "Business.subscribe"`)}
	}
	return nil
}

func (bc *BusinessCreate) sqlSave(ctx context.Context) (*Business, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BusinessCreate) createSpec() (*Business, *sqlgraph.CreateSpec) {
	var (
		_node = &Business{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(business.Table, sqlgraph.NewFieldSpec(business.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(business.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(business.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.DeletedAt(); ok {
		_spec.SetField(business.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bc.mutation.Creator(); ok {
		_spec.SetField(business.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := bc.mutation.LastModifier(); ok {
		_spec.SetField(business.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := bc.mutation.Remark(); ok {
		_spec.SetField(business.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.SetField(business.FieldType, field.TypeOther, value)
		_node.Type = value
	}
	if value, ok := bc.mutation.BinInfo(); ok {
		_spec.SetField(business.FieldBinInfo, field.TypeJSON, value)
		_node.BinInfo = value
	}
	if value, ok := bc.mutation.StockSn(); ok {
		_spec.SetField(business.FieldStockSn, field.TypeString, value)
		_node.StockSn = value
	}
	if nodes := bc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RiderTable,
			Columns: []string{business.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CityTable,
			Columns: []string{business.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.SubscribeTable,
			Columns: []string{business.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EmployeeTable,
			Columns: []string{business.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StoreTable,
			Columns: []string{business.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StoreID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.PlanTable,
			Columns: []string{business.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.EnterpriseTable,
			Columns: []string{business.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.StationTable,
			Columns: []string{business.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.CabinetTable,
			Columns: []string{business.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.AgentTable,
			Columns: []string{business.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.RtoEbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.RtoEbikeTable,
			Columns: []string{business.RtoEbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RtoEbikeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   business.BatteryTable,
			Columns: []string{business.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BatteryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Business.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BusinessCreate) OnConflict(opts ...sql.ConflictOption) *BusinessUpsertOne {
	bc.conflict = opts
	return &BusinessUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Business.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BusinessCreate) OnConflictColumns(columns ...string) *BusinessUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BusinessUpsertOne{
		create: bc,
	}
}

type (
	// BusinessUpsertOne is the builder for "upsert"-ing
	//  one Business node.
	BusinessUpsertOne struct {
		create *BusinessCreate
	}

	// BusinessUpsert is the "OnConflict" setter.
	BusinessUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BusinessUpsert) SetUpdatedAt(v time.Time) *BusinessUpsert {
	u.Set(business.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateUpdatedAt() *BusinessUpsert {
	u.SetExcluded(business.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BusinessUpsert) SetDeletedAt(v time.Time) *BusinessUpsert {
	u.Set(business.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateDeletedAt() *BusinessUpsert {
	u.SetExcluded(business.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BusinessUpsert) ClearDeletedAt() *BusinessUpsert {
	u.SetNull(business.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BusinessUpsert) SetLastModifier(v *model.Modifier) *BusinessUpsert {
	u.Set(business.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateLastModifier() *BusinessUpsert {
	u.SetExcluded(business.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BusinessUpsert) ClearLastModifier() *BusinessUpsert {
	u.SetNull(business.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BusinessUpsert) SetRemark(v string) *BusinessUpsert {
	u.Set(business.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateRemark() *BusinessUpsert {
	u.SetExcluded(business.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BusinessUpsert) ClearRemark() *BusinessUpsert {
	u.SetNull(business.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *BusinessUpsert) SetRiderID(v uint64) *BusinessUpsert {
	u.Set(business.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateRiderID() *BusinessUpsert {
	u.SetExcluded(business.FieldRiderID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *BusinessUpsert) SetCityID(v uint64) *BusinessUpsert {
	u.Set(business.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateCityID() *BusinessUpsert {
	u.SetExcluded(business.FieldCityID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BusinessUpsert) SetSubscribeID(v uint64) *BusinessUpsert {
	u.Set(business.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateSubscribeID() *BusinessUpsert {
	u.SetExcluded(business.FieldSubscribeID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *BusinessUpsert) SetEmployeeID(v uint64) *BusinessUpsert {
	u.Set(business.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateEmployeeID() *BusinessUpsert {
	u.SetExcluded(business.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *BusinessUpsert) ClearEmployeeID() *BusinessUpsert {
	u.SetNull(business.FieldEmployeeID)
	return u
}

// SetStoreID sets the "store_id" field.
func (u *BusinessUpsert) SetStoreID(v uint64) *BusinessUpsert {
	u.Set(business.FieldStoreID, v)
	return u
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateStoreID() *BusinessUpsert {
	u.SetExcluded(business.FieldStoreID)
	return u
}

// ClearStoreID clears the value of the "store_id" field.
func (u *BusinessUpsert) ClearStoreID() *BusinessUpsert {
	u.SetNull(business.FieldStoreID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *BusinessUpsert) SetPlanID(v uint64) *BusinessUpsert {
	u.Set(business.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdatePlanID() *BusinessUpsert {
	u.SetExcluded(business.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *BusinessUpsert) ClearPlanID() *BusinessUpsert {
	u.SetNull(business.FieldPlanID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BusinessUpsert) SetEnterpriseID(v uint64) *BusinessUpsert {
	u.Set(business.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateEnterpriseID() *BusinessUpsert {
	u.SetExcluded(business.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BusinessUpsert) ClearEnterpriseID() *BusinessUpsert {
	u.SetNull(business.FieldEnterpriseID)
	return u
}

// SetStationID sets the "station_id" field.
func (u *BusinessUpsert) SetStationID(v uint64) *BusinessUpsert {
	u.Set(business.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateStationID() *BusinessUpsert {
	u.SetExcluded(business.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *BusinessUpsert) ClearStationID() *BusinessUpsert {
	u.SetNull(business.FieldStationID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BusinessUpsert) SetCabinetID(v uint64) *BusinessUpsert {
	u.Set(business.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateCabinetID() *BusinessUpsert {
	u.SetExcluded(business.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BusinessUpsert) ClearCabinetID() *BusinessUpsert {
	u.SetNull(business.FieldCabinetID)
	return u
}

// SetAgentID sets the "agent_id" field.
func (u *BusinessUpsert) SetAgentID(v uint64) *BusinessUpsert {
	u.Set(business.FieldAgentID, v)
	return u
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateAgentID() *BusinessUpsert {
	u.SetExcluded(business.FieldAgentID)
	return u
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *BusinessUpsert) ClearAgentID() *BusinessUpsert {
	u.SetNull(business.FieldAgentID)
	return u
}

// SetType sets the "type" field.
func (u *BusinessUpsert) SetType(v model.BusinessType) *BusinessUpsert {
	u.Set(business.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateType() *BusinessUpsert {
	u.SetExcluded(business.FieldType)
	return u
}

// SetBinInfo sets the "bin_info" field.
func (u *BusinessUpsert) SetBinInfo(v *model.BinInfo) *BusinessUpsert {
	u.Set(business.FieldBinInfo, v)
	return u
}

// UpdateBinInfo sets the "bin_info" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateBinInfo() *BusinessUpsert {
	u.SetExcluded(business.FieldBinInfo)
	return u
}

// ClearBinInfo clears the value of the "bin_info" field.
func (u *BusinessUpsert) ClearBinInfo() *BusinessUpsert {
	u.SetNull(business.FieldBinInfo)
	return u
}

// SetStockSn sets the "stock_sn" field.
func (u *BusinessUpsert) SetStockSn(v string) *BusinessUpsert {
	u.Set(business.FieldStockSn, v)
	return u
}

// UpdateStockSn sets the "stock_sn" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateStockSn() *BusinessUpsert {
	u.SetExcluded(business.FieldStockSn)
	return u
}

// ClearStockSn clears the value of the "stock_sn" field.
func (u *BusinessUpsert) ClearStockSn() *BusinessUpsert {
	u.SetNull(business.FieldStockSn)
	return u
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (u *BusinessUpsert) SetRtoEbikeID(v uint64) *BusinessUpsert {
	u.Set(business.FieldRtoEbikeID, v)
	return u
}

// UpdateRtoEbikeID sets the "rto_ebike_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateRtoEbikeID() *BusinessUpsert {
	u.SetExcluded(business.FieldRtoEbikeID)
	return u
}

// ClearRtoEbikeID clears the value of the "rto_ebike_id" field.
func (u *BusinessUpsert) ClearRtoEbikeID() *BusinessUpsert {
	u.SetNull(business.FieldRtoEbikeID)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *BusinessUpsert) SetBatteryID(v uint64) *BusinessUpsert {
	u.Set(business.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BusinessUpsert) UpdateBatteryID() *BusinessUpsert {
	u.SetExcluded(business.FieldBatteryID)
	return u
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *BusinessUpsert) ClearBatteryID() *BusinessUpsert {
	u.SetNull(business.FieldBatteryID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Business.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BusinessUpsertOne) UpdateNewValues() *BusinessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(business.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(business.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Business.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BusinessUpsertOne) Ignore() *BusinessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessUpsertOne) DoNothing() *BusinessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessCreate.OnConflict
// documentation for more info.
func (u *BusinessUpsertOne) Update(set func(*BusinessUpsert)) *BusinessUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BusinessUpsertOne) SetUpdatedAt(v time.Time) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateUpdatedAt() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BusinessUpsertOne) SetDeletedAt(v time.Time) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateDeletedAt() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BusinessUpsertOne) ClearDeletedAt() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BusinessUpsertOne) SetLastModifier(v *model.Modifier) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateLastModifier() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BusinessUpsertOne) ClearLastModifier() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BusinessUpsertOne) SetRemark(v string) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateRemark() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BusinessUpsertOne) ClearRemark() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BusinessUpsertOne) SetRiderID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateRiderID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRiderID()
	})
}

// SetCityID sets the "city_id" field.
func (u *BusinessUpsertOne) SetCityID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateCityID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateCityID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BusinessUpsertOne) SetSubscribeID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateSubscribeID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *BusinessUpsertOne) SetEmployeeID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateEmployeeID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *BusinessUpsertOne) ClearEmployeeID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *BusinessUpsertOne) SetStoreID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateStoreID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *BusinessUpsertOne) ClearStoreID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStoreID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *BusinessUpsertOne) SetPlanID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdatePlanID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *BusinessUpsertOne) ClearPlanID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearPlanID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BusinessUpsertOne) SetEnterpriseID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateEnterpriseID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BusinessUpsertOne) ClearEnterpriseID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *BusinessUpsertOne) SetStationID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateStationID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *BusinessUpsertOne) ClearStationID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStationID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BusinessUpsertOne) SetCabinetID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateCabinetID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BusinessUpsertOne) ClearCabinetID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearCabinetID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *BusinessUpsertOne) SetAgentID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateAgentID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *BusinessUpsertOne) ClearAgentID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearAgentID()
	})
}

// SetType sets the "type" field.
func (u *BusinessUpsertOne) SetType(v model.BusinessType) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateType() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateType()
	})
}

// SetBinInfo sets the "bin_info" field.
func (u *BusinessUpsertOne) SetBinInfo(v *model.BinInfo) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetBinInfo(v)
	})
}

// UpdateBinInfo sets the "bin_info" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateBinInfo() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateBinInfo()
	})
}

// ClearBinInfo clears the value of the "bin_info" field.
func (u *BusinessUpsertOne) ClearBinInfo() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearBinInfo()
	})
}

// SetStockSn sets the "stock_sn" field.
func (u *BusinessUpsertOne) SetStockSn(v string) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStockSn(v)
	})
}

// UpdateStockSn sets the "stock_sn" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateStockSn() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStockSn()
	})
}

// ClearStockSn clears the value of the "stock_sn" field.
func (u *BusinessUpsertOne) ClearStockSn() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStockSn()
	})
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (u *BusinessUpsertOne) SetRtoEbikeID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRtoEbikeID(v)
	})
}

// UpdateRtoEbikeID sets the "rto_ebike_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateRtoEbikeID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRtoEbikeID()
	})
}

// ClearRtoEbikeID clears the value of the "rto_ebike_id" field.
func (u *BusinessUpsertOne) ClearRtoEbikeID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearRtoEbikeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BusinessUpsertOne) SetBatteryID(v uint64) *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BusinessUpsertOne) UpdateBatteryID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *BusinessUpsertOne) ClearBatteryID() *BusinessUpsertOne {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearBatteryID()
	})
}

// Exec executes the query.
func (u *BusinessUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BusinessUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BusinessUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BusinessCreateBulk is the builder for creating many Business entities in bulk.
type BusinessCreateBulk struct {
	config
	err      error
	builders []*BusinessCreate
	conflict []sql.ConflictOption
}

// Save creates the Business entities in the database.
func (bcb *BusinessCreateBulk) Save(ctx context.Context) ([]*Business, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Business, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BusinessMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BusinessCreateBulk) SaveX(ctx context.Context) []*Business {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BusinessCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BusinessCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Business.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BusinessUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BusinessCreateBulk) OnConflict(opts ...sql.ConflictOption) *BusinessUpsertBulk {
	bcb.conflict = opts
	return &BusinessUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Business.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BusinessCreateBulk) OnConflictColumns(columns ...string) *BusinessUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BusinessUpsertBulk{
		create: bcb,
	}
}

// BusinessUpsertBulk is the builder for "upsert"-ing
// a bulk of Business nodes.
type BusinessUpsertBulk struct {
	create *BusinessCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Business.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BusinessUpsertBulk) UpdateNewValues() *BusinessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(business.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(business.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Business.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BusinessUpsertBulk) Ignore() *BusinessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BusinessUpsertBulk) DoNothing() *BusinessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BusinessCreateBulk.OnConflict
// documentation for more info.
func (u *BusinessUpsertBulk) Update(set func(*BusinessUpsert)) *BusinessUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BusinessUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BusinessUpsertBulk) SetUpdatedAt(v time.Time) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateUpdatedAt() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BusinessUpsertBulk) SetDeletedAt(v time.Time) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateDeletedAt() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BusinessUpsertBulk) ClearDeletedAt() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BusinessUpsertBulk) SetLastModifier(v *model.Modifier) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateLastModifier() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BusinessUpsertBulk) ClearLastModifier() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BusinessUpsertBulk) SetRemark(v string) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateRemark() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BusinessUpsertBulk) ClearRemark() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BusinessUpsertBulk) SetRiderID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateRiderID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRiderID()
	})
}

// SetCityID sets the "city_id" field.
func (u *BusinessUpsertBulk) SetCityID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateCityID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateCityID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BusinessUpsertBulk) SetSubscribeID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateSubscribeID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *BusinessUpsertBulk) SetEmployeeID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateEmployeeID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *BusinessUpsertBulk) ClearEmployeeID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearEmployeeID()
	})
}

// SetStoreID sets the "store_id" field.
func (u *BusinessUpsertBulk) SetStoreID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStoreID(v)
	})
}

// UpdateStoreID sets the "store_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateStoreID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStoreID()
	})
}

// ClearStoreID clears the value of the "store_id" field.
func (u *BusinessUpsertBulk) ClearStoreID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStoreID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *BusinessUpsertBulk) SetPlanID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdatePlanID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *BusinessUpsertBulk) ClearPlanID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearPlanID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *BusinessUpsertBulk) SetEnterpriseID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateEnterpriseID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *BusinessUpsertBulk) ClearEnterpriseID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetStationID sets the "station_id" field.
func (u *BusinessUpsertBulk) SetStationID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateStationID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *BusinessUpsertBulk) ClearStationID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStationID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BusinessUpsertBulk) SetCabinetID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateCabinetID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BusinessUpsertBulk) ClearCabinetID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearCabinetID()
	})
}

// SetAgentID sets the "agent_id" field.
func (u *BusinessUpsertBulk) SetAgentID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetAgentID(v)
	})
}

// UpdateAgentID sets the "agent_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateAgentID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateAgentID()
	})
}

// ClearAgentID clears the value of the "agent_id" field.
func (u *BusinessUpsertBulk) ClearAgentID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearAgentID()
	})
}

// SetType sets the "type" field.
func (u *BusinessUpsertBulk) SetType(v model.BusinessType) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateType() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateType()
	})
}

// SetBinInfo sets the "bin_info" field.
func (u *BusinessUpsertBulk) SetBinInfo(v *model.BinInfo) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetBinInfo(v)
	})
}

// UpdateBinInfo sets the "bin_info" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateBinInfo() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateBinInfo()
	})
}

// ClearBinInfo clears the value of the "bin_info" field.
func (u *BusinessUpsertBulk) ClearBinInfo() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearBinInfo()
	})
}

// SetStockSn sets the "stock_sn" field.
func (u *BusinessUpsertBulk) SetStockSn(v string) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetStockSn(v)
	})
}

// UpdateStockSn sets the "stock_sn" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateStockSn() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateStockSn()
	})
}

// ClearStockSn clears the value of the "stock_sn" field.
func (u *BusinessUpsertBulk) ClearStockSn() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearStockSn()
	})
}

// SetRtoEbikeID sets the "rto_ebike_id" field.
func (u *BusinessUpsertBulk) SetRtoEbikeID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetRtoEbikeID(v)
	})
}

// UpdateRtoEbikeID sets the "rto_ebike_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateRtoEbikeID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateRtoEbikeID()
	})
}

// ClearRtoEbikeID clears the value of the "rto_ebike_id" field.
func (u *BusinessUpsertBulk) ClearRtoEbikeID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearRtoEbikeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BusinessUpsertBulk) SetBatteryID(v uint64) *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.SetBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BusinessUpsertBulk) UpdateBatteryID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.UpdateBatteryID()
	})
}

// ClearBatteryID clears the value of the "battery_id" field.
func (u *BusinessUpsertBulk) ClearBatteryID() *BusinessUpsertBulk {
	return u.Update(func(s *BusinessUpsert) {
		s.ClearBatteryID()
	})
}

// Exec executes the query.
func (u *BusinessUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BusinessCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BusinessCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BusinessUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
