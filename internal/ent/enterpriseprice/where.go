// Code generated by ent, DO NOT EDIT.

package enterpriseprice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldRemark, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldCityID, v))
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldBrandID, v))
}

// AgreementID applies equality check predicate on the "agreement_id" field. It's identical to AgreementIDEQ.
func AgreementID(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldAgreementID, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldEnterpriseID, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldPrice, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldModel, v))
}

// Intelligent applies equality check predicate on the "intelligent" field. It's identical to IntelligentEQ.
func Intelligent(v bool) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldIntelligent, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldContainsFold(FieldRemark, v))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldCityID, vs...))
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldBrandID, v))
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldBrandID, v))
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldBrandID, vs...))
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldBrandID, vs...))
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldBrandID))
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldBrandID))
}

// AgreementIDEQ applies the EQ predicate on the "agreement_id" field.
func AgreementIDEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldAgreementID, v))
}

// AgreementIDNEQ applies the NEQ predicate on the "agreement_id" field.
func AgreementIDNEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldAgreementID, v))
}

// AgreementIDIn applies the In predicate on the "agreement_id" field.
func AgreementIDIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldAgreementID, vs...))
}

// AgreementIDNotIn applies the NotIn predicate on the "agreement_id" field.
func AgreementIDNotIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldAgreementID, vs...))
}

// AgreementIDIsNil applies the IsNil predicate on the "agreement_id" field.
func AgreementIDIsNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIsNull(FieldAgreementID))
}

// AgreementIDNotNil applies the NotNil predicate on the "agreement_id" field.
func AgreementIDNotNil() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotNull(FieldAgreementID))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldPrice, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldContainsFold(FieldModel, v))
}

// IntelligentEQ applies the EQ predicate on the "intelligent" field.
func IntelligentEQ(v bool) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldEQ(FieldIntelligent, v))
}

// IntelligentNEQ applies the NEQ predicate on the "intelligent" field.
func IntelligentNEQ(v bool) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.FieldNEQ(FieldIntelligent, v))
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := newCityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := newBrandStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgreement applies the HasEdge predicate on the "agreement" edge.
func HasAgreement() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgreementTable, AgreementColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgreementWith applies the HasEdge predicate on the "agreement" edge with a given conditions (other predicates).
func HasAgreementWith(preds ...predicate.Agreement) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := newAgreementStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EnterprisePrice) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EnterprisePrice) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EnterprisePrice) predicate.EnterprisePrice {
	return predicate.EnterprisePrice(sql.NotPredicates(p))
}
