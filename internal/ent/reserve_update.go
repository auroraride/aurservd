// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/reserve"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// ReserveUpdate is the builder for updating Reserve entities.
type ReserveUpdate struct {
	config
	hooks     []Hook
	mutation  *ReserveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ReserveUpdate builder.
func (ru *ReserveUpdate) Where(ps ...predicate.Reserve) *ReserveUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReserveUpdate) SetUpdatedAt(t time.Time) *ReserveUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *ReserveUpdate) SetDeletedAt(t time.Time) *ReserveUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableDeletedAt(t *time.Time) *ReserveUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *ReserveUpdate) ClearDeletedAt() *ReserveUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetLastModifier sets the "last_modifier" field.
func (ru *ReserveUpdate) SetLastModifier(m *model.Modifier) *ReserveUpdate {
	ru.mutation.SetLastModifier(m)
	return ru
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ru *ReserveUpdate) ClearLastModifier() *ReserveUpdate {
	ru.mutation.ClearLastModifier()
	return ru
}

// SetRemark sets the "remark" field.
func (ru *ReserveUpdate) SetRemark(s string) *ReserveUpdate {
	ru.mutation.SetRemark(s)
	return ru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableRemark(s *string) *ReserveUpdate {
	if s != nil {
		ru.SetRemark(*s)
	}
	return ru
}

// ClearRemark clears the value of the "remark" field.
func (ru *ReserveUpdate) ClearRemark() *ReserveUpdate {
	ru.mutation.ClearRemark()
	return ru
}

// SetCabinetID sets the "cabinet_id" field.
func (ru *ReserveUpdate) SetCabinetID(u uint64) *ReserveUpdate {
	ru.mutation.SetCabinetID(u)
	return ru
}

// SetRiderID sets the "rider_id" field.
func (ru *ReserveUpdate) SetRiderID(u uint64) *ReserveUpdate {
	ru.mutation.SetRiderID(u)
	return ru
}

// SetCityID sets the "city_id" field.
func (ru *ReserveUpdate) SetCityID(u uint64) *ReserveUpdate {
	ru.mutation.SetCityID(u)
	return ru
}

// SetBusinessID sets the "business_id" field.
func (ru *ReserveUpdate) SetBusinessID(u uint64) *ReserveUpdate {
	ru.mutation.SetBusinessID(u)
	return ru
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableBusinessID(u *uint64) *ReserveUpdate {
	if u != nil {
		ru.SetBusinessID(*u)
	}
	return ru
}

// ClearBusinessID clears the value of the "business_id" field.
func (ru *ReserveUpdate) ClearBusinessID() *ReserveUpdate {
	ru.mutation.ClearBusinessID()
	return ru
}

// SetStatus sets the "status" field.
func (ru *ReserveUpdate) SetStatus(u uint8) *ReserveUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(u)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *ReserveUpdate) SetNillableStatus(u *uint8) *ReserveUpdate {
	if u != nil {
		ru.SetStatus(*u)
	}
	return ru
}

// AddStatus adds u to the "status" field.
func (ru *ReserveUpdate) AddStatus(u int8) *ReserveUpdate {
	ru.mutation.AddStatus(u)
	return ru
}

// SetType sets the "type" field.
func (ru *ReserveUpdate) SetType(s string) *ReserveUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ru *ReserveUpdate) SetCabinet(c *Cabinet) *ReserveUpdate {
	return ru.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ru *ReserveUpdate) SetRider(r *Rider) *ReserveUpdate {
	return ru.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ru *ReserveUpdate) SetCity(c *City) *ReserveUpdate {
	return ru.SetCityID(c.ID)
}

// SetBusiness sets the "business" edge to the Business entity.
func (ru *ReserveUpdate) SetBusiness(b *Business) *ReserveUpdate {
	return ru.SetBusinessID(b.ID)
}

// Mutation returns the ReserveMutation object of the builder.
func (ru *ReserveUpdate) Mutation() *ReserveMutation {
	return ru.mutation
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ru *ReserveUpdate) ClearCabinet() *ReserveUpdate {
	ru.mutation.ClearCabinet()
	return ru
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ru *ReserveUpdate) ClearRider() *ReserveUpdate {
	ru.mutation.ClearRider()
	return ru
}

// ClearCity clears the "city" edge to the City entity.
func (ru *ReserveUpdate) ClearCity() *ReserveUpdate {
	ru.mutation.ClearCity()
	return ru
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ru *ReserveUpdate) ClearBusiness() *ReserveUpdate {
	ru.mutation.ClearBusiness()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReserveUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReserveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReserveUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReserveUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReserveUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReserveUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if reserve.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reserve.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reserve.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReserveUpdate) check() error {
	if _, ok := ru.mutation.CabinetID(); ru.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.cabinet"`)
	}
	if _, ok := ru.mutation.RiderID(); ru.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.rider"`)
	}
	if _, ok := ru.mutation.CityID(); ru.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *ReserveUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReserveUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *ReserveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reserve.Table,
			Columns: reserve.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: reserve.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserve.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserve.FieldDeletedAt,
		})
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reserve.FieldDeletedAt,
		})
	}
	if ru.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: reserve.FieldCreator,
		})
	}
	if value, ok := ru.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: reserve.FieldLastModifier,
		})
	}
	if ru.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: reserve.FieldLastModifier,
		})
	}
	if value, ok := ru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserve.FieldRemark,
		})
	}
	if ru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reserve.FieldRemark,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: reserve.FieldStatus,
		})
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: reserve.FieldStatus,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserve.FieldType,
		})
	}
	if ru.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = ru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReserveUpdateOne is the builder for updating a single Reserve entity.
type ReserveUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ReserveMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReserveUpdateOne) SetUpdatedAt(t time.Time) *ReserveUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *ReserveUpdateOne) SetDeletedAt(t time.Time) *ReserveUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableDeletedAt(t *time.Time) *ReserveUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *ReserveUpdateOne) ClearDeletedAt() *ReserveUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetLastModifier sets the "last_modifier" field.
func (ruo *ReserveUpdateOne) SetLastModifier(m *model.Modifier) *ReserveUpdateOne {
	ruo.mutation.SetLastModifier(m)
	return ruo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ruo *ReserveUpdateOne) ClearLastModifier() *ReserveUpdateOne {
	ruo.mutation.ClearLastModifier()
	return ruo
}

// SetRemark sets the "remark" field.
func (ruo *ReserveUpdateOne) SetRemark(s string) *ReserveUpdateOne {
	ruo.mutation.SetRemark(s)
	return ruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableRemark(s *string) *ReserveUpdateOne {
	if s != nil {
		ruo.SetRemark(*s)
	}
	return ruo
}

// ClearRemark clears the value of the "remark" field.
func (ruo *ReserveUpdateOne) ClearRemark() *ReserveUpdateOne {
	ruo.mutation.ClearRemark()
	return ruo
}

// SetCabinetID sets the "cabinet_id" field.
func (ruo *ReserveUpdateOne) SetCabinetID(u uint64) *ReserveUpdateOne {
	ruo.mutation.SetCabinetID(u)
	return ruo
}

// SetRiderID sets the "rider_id" field.
func (ruo *ReserveUpdateOne) SetRiderID(u uint64) *ReserveUpdateOne {
	ruo.mutation.SetRiderID(u)
	return ruo
}

// SetCityID sets the "city_id" field.
func (ruo *ReserveUpdateOne) SetCityID(u uint64) *ReserveUpdateOne {
	ruo.mutation.SetCityID(u)
	return ruo
}

// SetBusinessID sets the "business_id" field.
func (ruo *ReserveUpdateOne) SetBusinessID(u uint64) *ReserveUpdateOne {
	ruo.mutation.SetBusinessID(u)
	return ruo
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableBusinessID(u *uint64) *ReserveUpdateOne {
	if u != nil {
		ruo.SetBusinessID(*u)
	}
	return ruo
}

// ClearBusinessID clears the value of the "business_id" field.
func (ruo *ReserveUpdateOne) ClearBusinessID() *ReserveUpdateOne {
	ruo.mutation.ClearBusinessID()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *ReserveUpdateOne) SetStatus(u uint8) *ReserveUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(u)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *ReserveUpdateOne) SetNillableStatus(u *uint8) *ReserveUpdateOne {
	if u != nil {
		ruo.SetStatus(*u)
	}
	return ruo
}

// AddStatus adds u to the "status" field.
func (ruo *ReserveUpdateOne) AddStatus(u int8) *ReserveUpdateOne {
	ruo.mutation.AddStatus(u)
	return ruo
}

// SetType sets the "type" field.
func (ruo *ReserveUpdateOne) SetType(s string) *ReserveUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (ruo *ReserveUpdateOne) SetCabinet(c *Cabinet) *ReserveUpdateOne {
	return ruo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ruo *ReserveUpdateOne) SetRider(r *Rider) *ReserveUpdateOne {
	return ruo.SetRiderID(r.ID)
}

// SetCity sets the "city" edge to the City entity.
func (ruo *ReserveUpdateOne) SetCity(c *City) *ReserveUpdateOne {
	return ruo.SetCityID(c.ID)
}

// SetBusiness sets the "business" edge to the Business entity.
func (ruo *ReserveUpdateOne) SetBusiness(b *Business) *ReserveUpdateOne {
	return ruo.SetBusinessID(b.ID)
}

// Mutation returns the ReserveMutation object of the builder.
func (ruo *ReserveUpdateOne) Mutation() *ReserveMutation {
	return ruo.mutation
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (ruo *ReserveUpdateOne) ClearCabinet() *ReserveUpdateOne {
	ruo.mutation.ClearCabinet()
	return ruo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (ruo *ReserveUpdateOne) ClearRider() *ReserveUpdateOne {
	ruo.mutation.ClearRider()
	return ruo
}

// ClearCity clears the "city" edge to the City entity.
func (ruo *ReserveUpdateOne) ClearCity() *ReserveUpdateOne {
	ruo.mutation.ClearCity()
	return ruo
}

// ClearBusiness clears the "business" edge to the Business entity.
func (ruo *ReserveUpdateOne) ClearBusiness() *ReserveUpdateOne {
	ruo.mutation.ClearBusiness()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReserveUpdateOne) Select(field string, fields ...string) *ReserveUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reserve entity.
func (ruo *ReserveUpdateOne) Save(ctx context.Context) (*Reserve, error) {
	var (
		err  error
		node *Reserve
	)
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReserveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Reserve)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReserveMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReserveUpdateOne) SaveX(ctx context.Context) *Reserve {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReserveUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReserveUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReserveUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if reserve.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reserve.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reserve.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReserveUpdateOne) check() error {
	if _, ok := ruo.mutation.CabinetID(); ruo.mutation.CabinetCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.cabinet"`)
	}
	if _, ok := ruo.mutation.RiderID(); ruo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.rider"`)
	}
	if _, ok := ruo.mutation.CityID(); ruo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reserve.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *ReserveUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ReserveUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *ReserveUpdateOne) sqlSave(ctx context.Context) (_node *Reserve, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reserve.Table,
			Columns: reserve.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: reserve.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reserve.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reserve.FieldID)
		for _, f := range fields {
			if !reserve.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reserve.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserve.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reserve.FieldDeletedAt,
		})
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: reserve.FieldDeletedAt,
		})
	}
	if ruo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: reserve.FieldCreator,
		})
	}
	if value, ok := ruo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: reserve.FieldLastModifier,
		})
	}
	if ruo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: reserve.FieldLastModifier,
		})
	}
	if value, ok := ruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserve.FieldRemark,
		})
	}
	if ruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: reserve.FieldRemark,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: reserve.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: reserve.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: reserve.FieldType,
		})
	}
	if ruo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CabinetTable,
			Columns: []string{reserve.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.RiderTable,
			Columns: []string{reserve.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.CityTable,
			Columns: []string{reserve.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reserve.BusinessTable,
			Columns: []string{reserve.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = ruo.modifiers
	_node = &Reserve{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reserve.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
