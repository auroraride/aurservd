// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
)

// SubscribeReminderUpdate is the builder for updating SubscribeReminder entities.
type SubscribeReminderUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscribeReminderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscribeReminderUpdate builder.
func (sru *SubscribeReminderUpdate) Where(ps ...predicate.SubscribeReminder) *SubscribeReminderUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SubscribeReminderUpdate) SetUpdatedAt(t time.Time) *SubscribeReminderUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetSubscribeID sets the "subscribe_id" field.
func (sru *SubscribeReminderUpdate) SetSubscribeID(u uint64) *SubscribeReminderUpdate {
	sru.mutation.SetSubscribeID(u)
	return sru
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableSubscribeID(u *uint64) *SubscribeReminderUpdate {
	if u != nil {
		sru.SetSubscribeID(*u)
	}
	return sru
}

// SetPlanID sets the "plan_id" field.
func (sru *SubscribeReminderUpdate) SetPlanID(u uint64) *SubscribeReminderUpdate {
	sru.mutation.SetPlanID(u)
	return sru
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillablePlanID(u *uint64) *SubscribeReminderUpdate {
	if u != nil {
		sru.SetPlanID(*u)
	}
	return sru
}

// SetRiderID sets the "rider_id" field.
func (sru *SubscribeReminderUpdate) SetRiderID(u uint64) *SubscribeReminderUpdate {
	sru.mutation.SetRiderID(u)
	return sru
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableRiderID(u *uint64) *SubscribeReminderUpdate {
	if u != nil {
		sru.SetRiderID(*u)
	}
	return sru
}

// SetType sets the "type" field.
func (sru *SubscribeReminderUpdate) SetType(s subscribereminder.Type) *SubscribeReminderUpdate {
	sru.mutation.SetType(s)
	return sru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableType(s *subscribereminder.Type) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetType(*s)
	}
	return sru
}

// SetPhone sets the "phone" field.
func (sru *SubscribeReminderUpdate) SetPhone(s string) *SubscribeReminderUpdate {
	sru.mutation.SetPhone(s)
	return sru
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillablePhone(s *string) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetPhone(*s)
	}
	return sru
}

// SetName sets the "name" field.
func (sru *SubscribeReminderUpdate) SetName(s string) *SubscribeReminderUpdate {
	sru.mutation.SetName(s)
	return sru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableName(s *string) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetName(*s)
	}
	return sru
}

// SetSuccess sets the "success" field.
func (sru *SubscribeReminderUpdate) SetSuccess(b bool) *SubscribeReminderUpdate {
	sru.mutation.SetSuccess(b)
	return sru
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableSuccess(b *bool) *SubscribeReminderUpdate {
	if b != nil {
		sru.SetSuccess(*b)
	}
	return sru
}

// SetDays sets the "days" field.
func (sru *SubscribeReminderUpdate) SetDays(i int) *SubscribeReminderUpdate {
	sru.mutation.ResetDays()
	sru.mutation.SetDays(i)
	return sru
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableDays(i *int) *SubscribeReminderUpdate {
	if i != nil {
		sru.SetDays(*i)
	}
	return sru
}

// AddDays adds i to the "days" field.
func (sru *SubscribeReminderUpdate) AddDays(i int) *SubscribeReminderUpdate {
	sru.mutation.AddDays(i)
	return sru
}

// SetPlanName sets the "plan_name" field.
func (sru *SubscribeReminderUpdate) SetPlanName(s string) *SubscribeReminderUpdate {
	sru.mutation.SetPlanName(s)
	return sru
}

// SetNillablePlanName sets the "plan_name" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillablePlanName(s *string) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetPlanName(*s)
	}
	return sru
}

// SetDate sets the "date" field.
func (sru *SubscribeReminderUpdate) SetDate(s string) *SubscribeReminderUpdate {
	sru.mutation.SetDate(s)
	return sru
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableDate(s *string) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetDate(*s)
	}
	return sru
}

// SetFee sets the "fee" field.
func (sru *SubscribeReminderUpdate) SetFee(f float64) *SubscribeReminderUpdate {
	sru.mutation.ResetFee()
	sru.mutation.SetFee(f)
	return sru
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableFee(f *float64) *SubscribeReminderUpdate {
	if f != nil {
		sru.SetFee(*f)
	}
	return sru
}

// AddFee adds f to the "fee" field.
func (sru *SubscribeReminderUpdate) AddFee(f float64) *SubscribeReminderUpdate {
	sru.mutation.AddFee(f)
	return sru
}

// SetFeeFormula sets the "fee_formula" field.
func (sru *SubscribeReminderUpdate) SetFeeFormula(s string) *SubscribeReminderUpdate {
	sru.mutation.SetFeeFormula(s)
	return sru
}

// SetNillableFeeFormula sets the "fee_formula" field if the given value is not nil.
func (sru *SubscribeReminderUpdate) SetNillableFeeFormula(s *string) *SubscribeReminderUpdate {
	if s != nil {
		sru.SetFeeFormula(*s)
	}
	return sru
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (sru *SubscribeReminderUpdate) ClearFeeFormula() *SubscribeReminderUpdate {
	sru.mutation.ClearFeeFormula()
	return sru
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sru *SubscribeReminderUpdate) SetSubscribe(s *Subscribe) *SubscribeReminderUpdate {
	return sru.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (sru *SubscribeReminderUpdate) SetPlan(p *Plan) *SubscribeReminderUpdate {
	return sru.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (sru *SubscribeReminderUpdate) SetRider(r *Rider) *SubscribeReminderUpdate {
	return sru.SetRiderID(r.ID)
}

// Mutation returns the SubscribeReminderMutation object of the builder.
func (sru *SubscribeReminderUpdate) Mutation() *SubscribeReminderMutation {
	return sru.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sru *SubscribeReminderUpdate) ClearSubscribe() *SubscribeReminderUpdate {
	sru.mutation.ClearSubscribe()
	return sru
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (sru *SubscribeReminderUpdate) ClearPlan() *SubscribeReminderUpdate {
	sru.mutation.ClearPlan()
	return sru
}

// ClearRider clears the "rider" edge to the Rider entity.
func (sru *SubscribeReminderUpdate) ClearRider() *SubscribeReminderUpdate {
	sru.mutation.ClearRider()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SubscribeReminderUpdate) Save(ctx context.Context) (int, error) {
	sru.defaults()
	return withHooks(ctx, sru.sqlSave, sru.mutation, sru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SubscribeReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SubscribeReminderUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SubscribeReminderUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SubscribeReminderUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := subscribereminder.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SubscribeReminderUpdate) check() error {
	if v, ok := sru.mutation.GetType(); ok {
		if err := subscribereminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SubscribeReminder.type": %w`, err)}
		}
	}
	if _, ok := sru.mutation.SubscribeID(); sru.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.subscribe"`)
	}
	if _, ok := sru.mutation.PlanID(); sru.mutation.PlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.plan"`)
	}
	if _, ok := sru.mutation.RiderID(); sru.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sru *SubscribeReminderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeReminderUpdate {
	sru.modifiers = append(sru.modifiers, modifiers...)
	return sru
}

func (sru *SubscribeReminderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribereminder.Table, subscribereminder.Columns, sqlgraph.NewFieldSpec(subscribereminder.FieldID, field.TypeUint64))
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribereminder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sru.mutation.GetType(); ok {
		_spec.SetField(subscribereminder.FieldType, field.TypeEnum, value)
	}
	if value, ok := sru.mutation.Phone(); ok {
		_spec.SetField(subscribereminder.FieldPhone, field.TypeString, value)
	}
	if value, ok := sru.mutation.Name(); ok {
		_spec.SetField(subscribereminder.FieldName, field.TypeString, value)
	}
	if value, ok := sru.mutation.Success(); ok {
		_spec.SetField(subscribereminder.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := sru.mutation.Days(); ok {
		_spec.SetField(subscribereminder.FieldDays, field.TypeInt, value)
	}
	if value, ok := sru.mutation.AddedDays(); ok {
		_spec.AddField(subscribereminder.FieldDays, field.TypeInt, value)
	}
	if value, ok := sru.mutation.PlanName(); ok {
		_spec.SetField(subscribereminder.FieldPlanName, field.TypeString, value)
	}
	if value, ok := sru.mutation.Date(); ok {
		_spec.SetField(subscribereminder.FieldDate, field.TypeString, value)
	}
	if value, ok := sru.mutation.Fee(); ok {
		_spec.SetField(subscribereminder.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.AddedFee(); ok {
		_spec.AddField(subscribereminder.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := sru.mutation.FeeFormula(); ok {
		_spec.SetField(subscribereminder.FieldFeeFormula, field.TypeString, value)
	}
	if sru.mutation.FeeFormulaCleared() {
		_spec.ClearField(subscribereminder.FieldFeeFormula, field.TypeString)
	}
	if sru.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sru.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribereminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sru.mutation.done = true
	return n, nil
}

// SubscribeReminderUpdateOne is the builder for updating a single SubscribeReminder entity.
type SubscribeReminderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscribeReminderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SubscribeReminderUpdateOne) SetUpdatedAt(t time.Time) *SubscribeReminderUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetSubscribeID sets the "subscribe_id" field.
func (sruo *SubscribeReminderUpdateOne) SetSubscribeID(u uint64) *SubscribeReminderUpdateOne {
	sruo.mutation.SetSubscribeID(u)
	return sruo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableSubscribeID(u *uint64) *SubscribeReminderUpdateOne {
	if u != nil {
		sruo.SetSubscribeID(*u)
	}
	return sruo
}

// SetPlanID sets the "plan_id" field.
func (sruo *SubscribeReminderUpdateOne) SetPlanID(u uint64) *SubscribeReminderUpdateOne {
	sruo.mutation.SetPlanID(u)
	return sruo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillablePlanID(u *uint64) *SubscribeReminderUpdateOne {
	if u != nil {
		sruo.SetPlanID(*u)
	}
	return sruo
}

// SetRiderID sets the "rider_id" field.
func (sruo *SubscribeReminderUpdateOne) SetRiderID(u uint64) *SubscribeReminderUpdateOne {
	sruo.mutation.SetRiderID(u)
	return sruo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableRiderID(u *uint64) *SubscribeReminderUpdateOne {
	if u != nil {
		sruo.SetRiderID(*u)
	}
	return sruo
}

// SetType sets the "type" field.
func (sruo *SubscribeReminderUpdateOne) SetType(s subscribereminder.Type) *SubscribeReminderUpdateOne {
	sruo.mutation.SetType(s)
	return sruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableType(s *subscribereminder.Type) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetType(*s)
	}
	return sruo
}

// SetPhone sets the "phone" field.
func (sruo *SubscribeReminderUpdateOne) SetPhone(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetPhone(s)
	return sruo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillablePhone(s *string) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetPhone(*s)
	}
	return sruo
}

// SetName sets the "name" field.
func (sruo *SubscribeReminderUpdateOne) SetName(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetName(s)
	return sruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableName(s *string) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetName(*s)
	}
	return sruo
}

// SetSuccess sets the "success" field.
func (sruo *SubscribeReminderUpdateOne) SetSuccess(b bool) *SubscribeReminderUpdateOne {
	sruo.mutation.SetSuccess(b)
	return sruo
}

// SetNillableSuccess sets the "success" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableSuccess(b *bool) *SubscribeReminderUpdateOne {
	if b != nil {
		sruo.SetSuccess(*b)
	}
	return sruo
}

// SetDays sets the "days" field.
func (sruo *SubscribeReminderUpdateOne) SetDays(i int) *SubscribeReminderUpdateOne {
	sruo.mutation.ResetDays()
	sruo.mutation.SetDays(i)
	return sruo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableDays(i *int) *SubscribeReminderUpdateOne {
	if i != nil {
		sruo.SetDays(*i)
	}
	return sruo
}

// AddDays adds i to the "days" field.
func (sruo *SubscribeReminderUpdateOne) AddDays(i int) *SubscribeReminderUpdateOne {
	sruo.mutation.AddDays(i)
	return sruo
}

// SetPlanName sets the "plan_name" field.
func (sruo *SubscribeReminderUpdateOne) SetPlanName(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetPlanName(s)
	return sruo
}

// SetNillablePlanName sets the "plan_name" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillablePlanName(s *string) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetPlanName(*s)
	}
	return sruo
}

// SetDate sets the "date" field.
func (sruo *SubscribeReminderUpdateOne) SetDate(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetDate(s)
	return sruo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableDate(s *string) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetDate(*s)
	}
	return sruo
}

// SetFee sets the "fee" field.
func (sruo *SubscribeReminderUpdateOne) SetFee(f float64) *SubscribeReminderUpdateOne {
	sruo.mutation.ResetFee()
	sruo.mutation.SetFee(f)
	return sruo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableFee(f *float64) *SubscribeReminderUpdateOne {
	if f != nil {
		sruo.SetFee(*f)
	}
	return sruo
}

// AddFee adds f to the "fee" field.
func (sruo *SubscribeReminderUpdateOne) AddFee(f float64) *SubscribeReminderUpdateOne {
	sruo.mutation.AddFee(f)
	return sruo
}

// SetFeeFormula sets the "fee_formula" field.
func (sruo *SubscribeReminderUpdateOne) SetFeeFormula(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetFeeFormula(s)
	return sruo
}

// SetNillableFeeFormula sets the "fee_formula" field if the given value is not nil.
func (sruo *SubscribeReminderUpdateOne) SetNillableFeeFormula(s *string) *SubscribeReminderUpdateOne {
	if s != nil {
		sruo.SetFeeFormula(*s)
	}
	return sruo
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (sruo *SubscribeReminderUpdateOne) ClearFeeFormula() *SubscribeReminderUpdateOne {
	sruo.mutation.ClearFeeFormula()
	return sruo
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sruo *SubscribeReminderUpdateOne) SetSubscribe(s *Subscribe) *SubscribeReminderUpdateOne {
	return sruo.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (sruo *SubscribeReminderUpdateOne) SetPlan(p *Plan) *SubscribeReminderUpdateOne {
	return sruo.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (sruo *SubscribeReminderUpdateOne) SetRider(r *Rider) *SubscribeReminderUpdateOne {
	return sruo.SetRiderID(r.ID)
}

// Mutation returns the SubscribeReminderMutation object of the builder.
func (sruo *SubscribeReminderUpdateOne) Mutation() *SubscribeReminderMutation {
	return sruo.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sruo *SubscribeReminderUpdateOne) ClearSubscribe() *SubscribeReminderUpdateOne {
	sruo.mutation.ClearSubscribe()
	return sruo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (sruo *SubscribeReminderUpdateOne) ClearPlan() *SubscribeReminderUpdateOne {
	sruo.mutation.ClearPlan()
	return sruo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (sruo *SubscribeReminderUpdateOne) ClearRider() *SubscribeReminderUpdateOne {
	sruo.mutation.ClearRider()
	return sruo
}

// Where appends a list predicates to the SubscribeReminderUpdate builder.
func (sruo *SubscribeReminderUpdateOne) Where(ps ...predicate.SubscribeReminder) *SubscribeReminderUpdateOne {
	sruo.mutation.Where(ps...)
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SubscribeReminderUpdateOne) Select(field string, fields ...string) *SubscribeReminderUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SubscribeReminder entity.
func (sruo *SubscribeReminderUpdateOne) Save(ctx context.Context) (*SubscribeReminder, error) {
	sruo.defaults()
	return withHooks(ctx, sruo.sqlSave, sruo.mutation, sruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SubscribeReminderUpdateOne) SaveX(ctx context.Context) *SubscribeReminder {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SubscribeReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SubscribeReminderUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SubscribeReminderUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := subscribereminder.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SubscribeReminderUpdateOne) check() error {
	if v, ok := sruo.mutation.GetType(); ok {
		if err := subscribereminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SubscribeReminder.type": %w`, err)}
		}
	}
	if _, ok := sruo.mutation.SubscribeID(); sruo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.subscribe"`)
	}
	if _, ok := sruo.mutation.PlanID(); sruo.mutation.PlanCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.plan"`)
	}
	if _, ok := sruo.mutation.RiderID(); sruo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sruo *SubscribeReminderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribeReminderUpdateOne {
	sruo.modifiers = append(sruo.modifiers, modifiers...)
	return sruo
}

func (sruo *SubscribeReminderUpdateOne) sqlSave(ctx context.Context) (_node *SubscribeReminder, err error) {
	if err := sruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribereminder.Table, subscribereminder.Columns, sqlgraph.NewFieldSpec(subscribereminder.FieldID, field.TypeUint64))
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscribeReminder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribereminder.FieldID)
		for _, f := range fields {
			if !subscribereminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribereminder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribereminder.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := sruo.mutation.GetType(); ok {
		_spec.SetField(subscribereminder.FieldType, field.TypeEnum, value)
	}
	if value, ok := sruo.mutation.Phone(); ok {
		_spec.SetField(subscribereminder.FieldPhone, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Name(); ok {
		_spec.SetField(subscribereminder.FieldName, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Success(); ok {
		_spec.SetField(subscribereminder.FieldSuccess, field.TypeBool, value)
	}
	if value, ok := sruo.mutation.Days(); ok {
		_spec.SetField(subscribereminder.FieldDays, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.AddedDays(); ok {
		_spec.AddField(subscribereminder.FieldDays, field.TypeInt, value)
	}
	if value, ok := sruo.mutation.PlanName(); ok {
		_spec.SetField(subscribereminder.FieldPlanName, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Date(); ok {
		_spec.SetField(subscribereminder.FieldDate, field.TypeString, value)
	}
	if value, ok := sruo.mutation.Fee(); ok {
		_spec.SetField(subscribereminder.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.AddedFee(); ok {
		_spec.AddField(subscribereminder.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := sruo.mutation.FeeFormula(); ok {
		_spec.SetField(subscribereminder.FieldFeeFormula, field.TypeString, value)
	}
	if sruo.mutation.FeeFormulaCleared() {
		_spec.ClearField(subscribereminder.FieldFeeFormula, field.TypeString)
	}
	if sruo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sruo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(sruo.modifiers...)
	_node = &SubscribeReminder{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribereminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sruo.mutation.done = true
	return _node, nil
}
