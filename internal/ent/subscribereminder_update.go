// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
)

// SubscribeReminderUpdate is the builder for updating SubscribeReminder entities.
type SubscribeReminderUpdate struct {
	config
	hooks    []Hook
	mutation *SubscribeReminderMutation
}

// Where appends a list predicates to the SubscribeReminderUpdate builder.
func (sru *SubscribeReminderUpdate) Where(ps ...predicate.SubscribeReminder) *SubscribeReminderUpdate {
	sru.mutation.Where(ps...)
	return sru
}

// SetUpdatedAt sets the "updated_at" field.
func (sru *SubscribeReminderUpdate) SetUpdatedAt(t time.Time) *SubscribeReminderUpdate {
	sru.mutation.SetUpdatedAt(t)
	return sru
}

// SetSubscribeID sets the "subscribe_id" field.
func (sru *SubscribeReminderUpdate) SetSubscribeID(u uint64) *SubscribeReminderUpdate {
	sru.mutation.SetSubscribeID(u)
	return sru
}

// SetType sets the "type" field.
func (sru *SubscribeReminderUpdate) SetType(s subscribereminder.Type) *SubscribeReminderUpdate {
	sru.mutation.SetType(s)
	return sru
}

// SetPhone sets the "phone" field.
func (sru *SubscribeReminderUpdate) SetPhone(s string) *SubscribeReminderUpdate {
	sru.mutation.SetPhone(s)
	return sru
}

// SetName sets the "name" field.
func (sru *SubscribeReminderUpdate) SetName(s string) *SubscribeReminderUpdate {
	sru.mutation.SetName(s)
	return sru
}

// SetSuccess sets the "success" field.
func (sru *SubscribeReminderUpdate) SetSuccess(b bool) *SubscribeReminderUpdate {
	sru.mutation.SetSuccess(b)
	return sru
}

// SetDays sets the "days" field.
func (sru *SubscribeReminderUpdate) SetDays(i int) *SubscribeReminderUpdate {
	sru.mutation.ResetDays()
	sru.mutation.SetDays(i)
	return sru
}

// AddDays adds i to the "days" field.
func (sru *SubscribeReminderUpdate) AddDays(i int) *SubscribeReminderUpdate {
	sru.mutation.AddDays(i)
	return sru
}

// SetPlanName sets the "plan_name" field.
func (sru *SubscribeReminderUpdate) SetPlanName(s string) *SubscribeReminderUpdate {
	sru.mutation.SetPlanName(s)
	return sru
}

// SetDate sets the "date" field.
func (sru *SubscribeReminderUpdate) SetDate(s string) *SubscribeReminderUpdate {
	sru.mutation.SetDate(s)
	return sru
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sru *SubscribeReminderUpdate) SetSubscribe(s *Subscribe) *SubscribeReminderUpdate {
	return sru.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeReminderMutation object of the builder.
func (sru *SubscribeReminderUpdate) Mutation() *SubscribeReminderMutation {
	return sru.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sru *SubscribeReminderUpdate) ClearSubscribe() *SubscribeReminderUpdate {
	sru.mutation.ClearSubscribe()
	return sru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sru *SubscribeReminderUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sru.defaults()
	if len(sru.hooks) == 0 {
		if err = sru.check(); err != nil {
			return 0, err
		}
		affected, err = sru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeReminderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sru.check(); err != nil {
				return 0, err
			}
			sru.mutation = mutation
			affected, err = sru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sru.hooks) - 1; i >= 0; i-- {
			if sru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sru *SubscribeReminderUpdate) SaveX(ctx context.Context) int {
	affected, err := sru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sru *SubscribeReminderUpdate) Exec(ctx context.Context) error {
	_, err := sru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sru *SubscribeReminderUpdate) ExecX(ctx context.Context) {
	if err := sru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sru *SubscribeReminderUpdate) defaults() {
	if _, ok := sru.mutation.UpdatedAt(); !ok {
		v := subscribereminder.UpdateDefaultUpdatedAt()
		sru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sru *SubscribeReminderUpdate) check() error {
	if v, ok := sru.mutation.GetType(); ok {
		if err := subscribereminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SubscribeReminder.type": %w`, err)}
		}
	}
	if _, ok := sru.mutation.SubscribeID(); sru.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.subscribe"`)
	}
	return nil
}

func (sru *SubscribeReminderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribereminder.Table,
			Columns: subscribereminder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribereminder.FieldID,
			},
		},
	}
	if ps := sru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribereminder.FieldUpdatedAt,
		})
	}
	if value, ok := sru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: subscribereminder.FieldType,
		})
	}
	if value, ok := sru.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldPhone,
		})
	}
	if value, ok := sru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldName,
		})
	}
	if value, ok := sru.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subscribereminder.FieldSuccess,
		})
	}
	if value, ok := sru.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribereminder.FieldDays,
		})
	}
	if value, ok := sru.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribereminder.FieldDays,
		})
	}
	if value, ok := sru.mutation.PlanName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldPlanName,
		})
	}
	if value, ok := sru.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldDate,
		})
	}
	if sru.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sru.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribereminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubscribeReminderUpdateOne is the builder for updating a single SubscribeReminder entity.
type SubscribeReminderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscribeReminderMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sruo *SubscribeReminderUpdateOne) SetUpdatedAt(t time.Time) *SubscribeReminderUpdateOne {
	sruo.mutation.SetUpdatedAt(t)
	return sruo
}

// SetSubscribeID sets the "subscribe_id" field.
func (sruo *SubscribeReminderUpdateOne) SetSubscribeID(u uint64) *SubscribeReminderUpdateOne {
	sruo.mutation.SetSubscribeID(u)
	return sruo
}

// SetType sets the "type" field.
func (sruo *SubscribeReminderUpdateOne) SetType(s subscribereminder.Type) *SubscribeReminderUpdateOne {
	sruo.mutation.SetType(s)
	return sruo
}

// SetPhone sets the "phone" field.
func (sruo *SubscribeReminderUpdateOne) SetPhone(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetPhone(s)
	return sruo
}

// SetName sets the "name" field.
func (sruo *SubscribeReminderUpdateOne) SetName(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetName(s)
	return sruo
}

// SetSuccess sets the "success" field.
func (sruo *SubscribeReminderUpdateOne) SetSuccess(b bool) *SubscribeReminderUpdateOne {
	sruo.mutation.SetSuccess(b)
	return sruo
}

// SetDays sets the "days" field.
func (sruo *SubscribeReminderUpdateOne) SetDays(i int) *SubscribeReminderUpdateOne {
	sruo.mutation.ResetDays()
	sruo.mutation.SetDays(i)
	return sruo
}

// AddDays adds i to the "days" field.
func (sruo *SubscribeReminderUpdateOne) AddDays(i int) *SubscribeReminderUpdateOne {
	sruo.mutation.AddDays(i)
	return sruo
}

// SetPlanName sets the "plan_name" field.
func (sruo *SubscribeReminderUpdateOne) SetPlanName(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetPlanName(s)
	return sruo
}

// SetDate sets the "date" field.
func (sruo *SubscribeReminderUpdateOne) SetDate(s string) *SubscribeReminderUpdateOne {
	sruo.mutation.SetDate(s)
	return sruo
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (sruo *SubscribeReminderUpdateOne) SetSubscribe(s *Subscribe) *SubscribeReminderUpdateOne {
	return sruo.SetSubscribeID(s.ID)
}

// Mutation returns the SubscribeReminderMutation object of the builder.
func (sruo *SubscribeReminderUpdateOne) Mutation() *SubscribeReminderMutation {
	return sruo.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (sruo *SubscribeReminderUpdateOne) ClearSubscribe() *SubscribeReminderUpdateOne {
	sruo.mutation.ClearSubscribe()
	return sruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sruo *SubscribeReminderUpdateOne) Select(field string, fields ...string) *SubscribeReminderUpdateOne {
	sruo.fields = append([]string{field}, fields...)
	return sruo
}

// Save executes the query and returns the updated SubscribeReminder entity.
func (sruo *SubscribeReminderUpdateOne) Save(ctx context.Context) (*SubscribeReminder, error) {
	var (
		err  error
		node *SubscribeReminder
	)
	sruo.defaults()
	if len(sruo.hooks) == 0 {
		if err = sruo.check(); err != nil {
			return nil, err
		}
		node, err = sruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeReminderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sruo.check(); err != nil {
				return nil, err
			}
			sruo.mutation = mutation
			node, err = sruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sruo.hooks) - 1; i >= 0; i-- {
			if sruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscribeReminder)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribeReminderMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sruo *SubscribeReminderUpdateOne) SaveX(ctx context.Context) *SubscribeReminder {
	node, err := sruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sruo *SubscribeReminderUpdateOne) Exec(ctx context.Context) error {
	_, err := sruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sruo *SubscribeReminderUpdateOne) ExecX(ctx context.Context) {
	if err := sruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sruo *SubscribeReminderUpdateOne) defaults() {
	if _, ok := sruo.mutation.UpdatedAt(); !ok {
		v := subscribereminder.UpdateDefaultUpdatedAt()
		sruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sruo *SubscribeReminderUpdateOne) check() error {
	if v, ok := sruo.mutation.GetType(); ok {
		if err := subscribereminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SubscribeReminder.type": %w`, err)}
		}
	}
	if _, ok := sruo.mutation.SubscribeID(); sruo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribeReminder.subscribe"`)
	}
	return nil
}

func (sruo *SubscribeReminderUpdateOne) sqlSave(ctx context.Context) (_node *SubscribeReminder, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribereminder.Table,
			Columns: subscribereminder.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribereminder.FieldID,
			},
		},
	}
	id, ok := sruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscribeReminder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribereminder.FieldID)
		for _, f := range fields {
			if !subscribereminder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribereminder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribereminder.FieldUpdatedAt,
		})
	}
	if value, ok := sruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: subscribereminder.FieldType,
		})
	}
	if value, ok := sruo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldPhone,
		})
	}
	if value, ok := sruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldName,
		})
	}
	if value, ok := sruo.mutation.Success(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subscribereminder.FieldSuccess,
		})
	}
	if value, ok := sruo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribereminder.FieldDays,
		})
	}
	if value, ok := sruo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribereminder.FieldDays,
		})
	}
	if value, ok := sruo.mutation.PlanName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldPlanName,
		})
	}
	if value, ok := sruo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribereminder.FieldDate,
		})
	}
	if sruo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sruo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubscribeReminder{config: sruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribereminder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
