// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// AttendanceUpdate is the builder for updating Attendance entities.
type AttendanceUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (au *AttendanceUpdate) Where(ps ...predicate.Attendance) *AttendanceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttendanceUpdate) SetUpdatedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AttendanceUpdate) SetDeletedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableDeletedAt(t *time.Time) *AttendanceUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AttendanceUpdate) ClearDeletedAt() *AttendanceUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AttendanceUpdate) SetLastModifier(m *model.Modifier) *AttendanceUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AttendanceUpdate) ClearLastModifier() *AttendanceUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AttendanceUpdate) SetRemark(s string) *AttendanceUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableRemark(s *string) *AttendanceUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AttendanceUpdate) ClearRemark() *AttendanceUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetStoreID sets the "store_id" field.
func (au *AttendanceUpdate) SetStoreID(u uint64) *AttendanceUpdate {
	au.mutation.SetStoreID(u)
	return au
}

// SetEmployeeID sets the "employee_id" field.
func (au *AttendanceUpdate) SetEmployeeID(u uint64) *AttendanceUpdate {
	au.mutation.SetEmployeeID(u)
	return au
}

// SetInventory sets the "inventory" field.
func (au *AttendanceUpdate) SetInventory(m map[string]int) *AttendanceUpdate {
	au.mutation.SetInventory(m)
	return au
}

// ClearInventory clears the value of the "inventory" field.
func (au *AttendanceUpdate) ClearInventory() *AttendanceUpdate {
	au.mutation.ClearInventory()
	return au
}

// SetPhoto sets the "photo" field.
func (au *AttendanceUpdate) SetPhoto(s string) *AttendanceUpdate {
	au.mutation.SetPhoto(s)
	return au
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillablePhoto(s *string) *AttendanceUpdate {
	if s != nil {
		au.SetPhoto(*s)
	}
	return au
}

// ClearPhoto clears the value of the "photo" field.
func (au *AttendanceUpdate) ClearPhoto() *AttendanceUpdate {
	au.mutation.ClearPhoto()
	return au
}

// SetDuty sets the "duty" field.
func (au *AttendanceUpdate) SetDuty(b bool) *AttendanceUpdate {
	au.mutation.SetDuty(b)
	return au
}

// SetDate sets the "date" field.
func (au *AttendanceUpdate) SetDate(t time.Time) *AttendanceUpdate {
	au.mutation.SetDate(t)
	return au
}

// SetLng sets the "lng" field.
func (au *AttendanceUpdate) SetLng(f float64) *AttendanceUpdate {
	au.mutation.ResetLng()
	au.mutation.SetLng(f)
	return au
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableLng(f *float64) *AttendanceUpdate {
	if f != nil {
		au.SetLng(*f)
	}
	return au
}

// AddLng adds f to the "lng" field.
func (au *AttendanceUpdate) AddLng(f float64) *AttendanceUpdate {
	au.mutation.AddLng(f)
	return au
}

// ClearLng clears the value of the "lng" field.
func (au *AttendanceUpdate) ClearLng() *AttendanceUpdate {
	au.mutation.ClearLng()
	return au
}

// SetLat sets the "lat" field.
func (au *AttendanceUpdate) SetLat(f float64) *AttendanceUpdate {
	au.mutation.ResetLat()
	au.mutation.SetLat(f)
	return au
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableLat(f *float64) *AttendanceUpdate {
	if f != nil {
		au.SetLat(*f)
	}
	return au
}

// AddLat adds f to the "lat" field.
func (au *AttendanceUpdate) AddLat(f float64) *AttendanceUpdate {
	au.mutation.AddLat(f)
	return au
}

// ClearLat clears the value of the "lat" field.
func (au *AttendanceUpdate) ClearLat() *AttendanceUpdate {
	au.mutation.ClearLat()
	return au
}

// SetAddress sets the "address" field.
func (au *AttendanceUpdate) SetAddress(s string) *AttendanceUpdate {
	au.mutation.SetAddress(s)
	return au
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableAddress(s *string) *AttendanceUpdate {
	if s != nil {
		au.SetAddress(*s)
	}
	return au
}

// ClearAddress clears the value of the "address" field.
func (au *AttendanceUpdate) ClearAddress() *AttendanceUpdate {
	au.mutation.ClearAddress()
	return au
}

// SetDistance sets the "distance" field.
func (au *AttendanceUpdate) SetDistance(f float64) *AttendanceUpdate {
	au.mutation.ResetDistance()
	au.mutation.SetDistance(f)
	return au
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (au *AttendanceUpdate) SetNillableDistance(f *float64) *AttendanceUpdate {
	if f != nil {
		au.SetDistance(*f)
	}
	return au
}

// AddDistance adds f to the "distance" field.
func (au *AttendanceUpdate) AddDistance(f float64) *AttendanceUpdate {
	au.mutation.AddDistance(f)
	return au
}

// ClearDistance clears the value of the "distance" field.
func (au *AttendanceUpdate) ClearDistance() *AttendanceUpdate {
	au.mutation.ClearDistance()
	return au
}

// SetStore sets the "store" edge to the Store entity.
func (au *AttendanceUpdate) SetStore(s *Store) *AttendanceUpdate {
	return au.SetStoreID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (au *AttendanceUpdate) SetEmployee(e *Employee) *AttendanceUpdate {
	return au.SetEmployeeID(e.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (au *AttendanceUpdate) Mutation() *AttendanceMutation {
	return au.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (au *AttendanceUpdate) ClearStore() *AttendanceUpdate {
	au.mutation.ClearStore()
	return au
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (au *AttendanceUpdate) ClearEmployee() *AttendanceUpdate {
	au.mutation.ClearEmployee()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttendanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttendanceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttendanceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttendanceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AttendanceUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if attendance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized attendance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := attendance.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AttendanceUpdate) check() error {
	if _, ok := au.mutation.StoreID(); au.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attendance.store"`)
	}
	if _, ok := au.mutation.EmployeeID(); au.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attendance.employee"`)
	}
	return nil
}

func (au *AttendanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attendance.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attendance.FieldDeletedAt,
		})
	}
	if au.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldCreator,
		})
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldLastModifier,
		})
	}
	if au.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldLastModifier,
		})
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldRemark,
		})
	}
	if au.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldRemark,
		})
	}
	if value, ok := au.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldInventory,
		})
	}
	if au.mutation.InventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldInventory,
		})
	}
	if value, ok := au.mutation.Photo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldPhoto,
		})
	}
	if au.mutation.PhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldPhoto,
		})
	}
	if value, ok := au.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attendance.FieldDuty,
		})
	}
	if value, ok := au.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldDate,
		})
	}
	if value, ok := au.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLng,
		})
	}
	if value, ok := au.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLng,
		})
	}
	if au.mutation.LngCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldLng,
		})
	}
	if value, ok := au.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLat,
		})
	}
	if value, ok := au.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLat,
		})
	}
	if au.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldLat,
		})
	}
	if value, ok := au.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldAddress,
		})
	}
	if au.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldAddress,
		})
	}
	if value, ok := au.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldDistance,
		})
	}
	if value, ok := au.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldDistance,
		})
	}
	if au.mutation.DistanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldDistance,
		})
	}
	if au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AttendanceUpdateOne is the builder for updating a single Attendance entity.
type AttendanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttendanceUpdateOne) SetUpdatedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AttendanceUpdateOne) SetDeletedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableDeletedAt(t *time.Time) *AttendanceUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AttendanceUpdateOne) ClearDeletedAt() *AttendanceUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AttendanceUpdateOne) SetLastModifier(m *model.Modifier) *AttendanceUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AttendanceUpdateOne) ClearLastModifier() *AttendanceUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AttendanceUpdateOne) SetRemark(s string) *AttendanceUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableRemark(s *string) *AttendanceUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AttendanceUpdateOne) ClearRemark() *AttendanceUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetStoreID sets the "store_id" field.
func (auo *AttendanceUpdateOne) SetStoreID(u uint64) *AttendanceUpdateOne {
	auo.mutation.SetStoreID(u)
	return auo
}

// SetEmployeeID sets the "employee_id" field.
func (auo *AttendanceUpdateOne) SetEmployeeID(u uint64) *AttendanceUpdateOne {
	auo.mutation.SetEmployeeID(u)
	return auo
}

// SetInventory sets the "inventory" field.
func (auo *AttendanceUpdateOne) SetInventory(m map[string]int) *AttendanceUpdateOne {
	auo.mutation.SetInventory(m)
	return auo
}

// ClearInventory clears the value of the "inventory" field.
func (auo *AttendanceUpdateOne) ClearInventory() *AttendanceUpdateOne {
	auo.mutation.ClearInventory()
	return auo
}

// SetPhoto sets the "photo" field.
func (auo *AttendanceUpdateOne) SetPhoto(s string) *AttendanceUpdateOne {
	auo.mutation.SetPhoto(s)
	return auo
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillablePhoto(s *string) *AttendanceUpdateOne {
	if s != nil {
		auo.SetPhoto(*s)
	}
	return auo
}

// ClearPhoto clears the value of the "photo" field.
func (auo *AttendanceUpdateOne) ClearPhoto() *AttendanceUpdateOne {
	auo.mutation.ClearPhoto()
	return auo
}

// SetDuty sets the "duty" field.
func (auo *AttendanceUpdateOne) SetDuty(b bool) *AttendanceUpdateOne {
	auo.mutation.SetDuty(b)
	return auo
}

// SetDate sets the "date" field.
func (auo *AttendanceUpdateOne) SetDate(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetDate(t)
	return auo
}

// SetLng sets the "lng" field.
func (auo *AttendanceUpdateOne) SetLng(f float64) *AttendanceUpdateOne {
	auo.mutation.ResetLng()
	auo.mutation.SetLng(f)
	return auo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableLng(f *float64) *AttendanceUpdateOne {
	if f != nil {
		auo.SetLng(*f)
	}
	return auo
}

// AddLng adds f to the "lng" field.
func (auo *AttendanceUpdateOne) AddLng(f float64) *AttendanceUpdateOne {
	auo.mutation.AddLng(f)
	return auo
}

// ClearLng clears the value of the "lng" field.
func (auo *AttendanceUpdateOne) ClearLng() *AttendanceUpdateOne {
	auo.mutation.ClearLng()
	return auo
}

// SetLat sets the "lat" field.
func (auo *AttendanceUpdateOne) SetLat(f float64) *AttendanceUpdateOne {
	auo.mutation.ResetLat()
	auo.mutation.SetLat(f)
	return auo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableLat(f *float64) *AttendanceUpdateOne {
	if f != nil {
		auo.SetLat(*f)
	}
	return auo
}

// AddLat adds f to the "lat" field.
func (auo *AttendanceUpdateOne) AddLat(f float64) *AttendanceUpdateOne {
	auo.mutation.AddLat(f)
	return auo
}

// ClearLat clears the value of the "lat" field.
func (auo *AttendanceUpdateOne) ClearLat() *AttendanceUpdateOne {
	auo.mutation.ClearLat()
	return auo
}

// SetAddress sets the "address" field.
func (auo *AttendanceUpdateOne) SetAddress(s string) *AttendanceUpdateOne {
	auo.mutation.SetAddress(s)
	return auo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableAddress(s *string) *AttendanceUpdateOne {
	if s != nil {
		auo.SetAddress(*s)
	}
	return auo
}

// ClearAddress clears the value of the "address" field.
func (auo *AttendanceUpdateOne) ClearAddress() *AttendanceUpdateOne {
	auo.mutation.ClearAddress()
	return auo
}

// SetDistance sets the "distance" field.
func (auo *AttendanceUpdateOne) SetDistance(f float64) *AttendanceUpdateOne {
	auo.mutation.ResetDistance()
	auo.mutation.SetDistance(f)
	return auo
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (auo *AttendanceUpdateOne) SetNillableDistance(f *float64) *AttendanceUpdateOne {
	if f != nil {
		auo.SetDistance(*f)
	}
	return auo
}

// AddDistance adds f to the "distance" field.
func (auo *AttendanceUpdateOne) AddDistance(f float64) *AttendanceUpdateOne {
	auo.mutation.AddDistance(f)
	return auo
}

// ClearDistance clears the value of the "distance" field.
func (auo *AttendanceUpdateOne) ClearDistance() *AttendanceUpdateOne {
	auo.mutation.ClearDistance()
	return auo
}

// SetStore sets the "store" edge to the Store entity.
func (auo *AttendanceUpdateOne) SetStore(s *Store) *AttendanceUpdateOne {
	return auo.SetStoreID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (auo *AttendanceUpdateOne) SetEmployee(e *Employee) *AttendanceUpdateOne {
	return auo.SetEmployeeID(e.ID)
}

// Mutation returns the AttendanceMutation object of the builder.
func (auo *AttendanceUpdateOne) Mutation() *AttendanceMutation {
	return auo.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (auo *AttendanceUpdateOne) ClearStore() *AttendanceUpdateOne {
	auo.mutation.ClearStore()
	return auo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (auo *AttendanceUpdateOne) ClearEmployee() *AttendanceUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttendanceUpdateOne) Select(field string, fields ...string) *AttendanceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attendance entity.
func (auo *AttendanceUpdateOne) Save(ctx context.Context) (*Attendance, error) {
	var (
		err  error
		node *Attendance
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AttendanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Attendance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AttendanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttendanceUpdateOne) SaveX(ctx context.Context) *Attendance {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttendanceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttendanceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AttendanceUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if attendance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized attendance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := attendance.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttendanceUpdateOne) check() error {
	if _, ok := auo.mutation.StoreID(); auo.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attendance.store"`)
	}
	if _, ok := auo.mutation.EmployeeID(); auo.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Attendance.employee"`)
	}
	return nil
}

func (auo *AttendanceUpdateOne) sqlSave(ctx context.Context) (_node *Attendance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   attendance.Table,
			Columns: attendance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: attendance.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attendance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendance.FieldID)
		for _, f := range fields {
			if !attendance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: attendance.FieldDeletedAt,
		})
	}
	if auo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldCreator,
		})
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldLastModifier,
		})
	}
	if auo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldLastModifier,
		})
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldRemark,
		})
	}
	if auo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldRemark,
		})
	}
	if value, ok := auo.mutation.Inventory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: attendance.FieldInventory,
		})
	}
	if auo.mutation.InventoryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: attendance.FieldInventory,
		})
	}
	if value, ok := auo.mutation.Photo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldPhoto,
		})
	}
	if auo.mutation.PhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldPhoto,
		})
	}
	if value, ok := auo.mutation.Duty(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: attendance.FieldDuty,
		})
	}
	if value, ok := auo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: attendance.FieldDate,
		})
	}
	if value, ok := auo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLng,
		})
	}
	if value, ok := auo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLng,
		})
	}
	if auo.mutation.LngCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldLng,
		})
	}
	if value, ok := auo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLat,
		})
	}
	if value, ok := auo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldLat,
		})
	}
	if auo.mutation.LatCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldLat,
		})
	}
	if value, ok := auo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: attendance.FieldAddress,
		})
	}
	if auo.mutation.AddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: attendance.FieldAddress,
		})
	}
	if value, ok := auo.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldDistance,
		})
	}
	if value, ok := auo.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: attendance.FieldDistance,
		})
	}
	if auo.mutation.DistanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: attendance.FieldDistance,
		})
	}
	if auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.StoreTable,
			Columns: []string{attendance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attendance.EmployeeTable,
			Columns: []string{attendance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Attendance{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
