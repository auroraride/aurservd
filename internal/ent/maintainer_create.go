// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
)

// MaintainerCreate is the builder for creating a Maintainer entity.
type MaintainerCreate struct {
	config
	mutation *MaintainerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEnable sets the "enable" field.
func (mc *MaintainerCreate) SetEnable(b bool) *MaintainerCreate {
	mc.mutation.SetEnable(b)
	return mc
}

// SetName sets the "name" field.
func (mc *MaintainerCreate) SetName(s string) *MaintainerCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetPhone sets the "phone" field.
func (mc *MaintainerCreate) SetPhone(s string) *MaintainerCreate {
	mc.mutation.SetPhone(s)
	return mc
}

// SetPassword sets the "password" field.
func (mc *MaintainerCreate) SetPassword(s string) *MaintainerCreate {
	mc.mutation.SetPassword(s)
	return mc
}

// AddCityIDs adds the "cities" edge to the City entity by IDs.
func (mc *MaintainerCreate) AddCityIDs(ids ...uint64) *MaintainerCreate {
	mc.mutation.AddCityIDs(ids...)
	return mc
}

// AddCities adds the "cities" edges to the City entity.
func (mc *MaintainerCreate) AddCities(c ...*City) *MaintainerCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCityIDs(ids...)
}

// Mutation returns the MaintainerMutation object of the builder.
func (mc *MaintainerCreate) Mutation() *MaintainerMutation {
	return mc.mutation
}

// Save creates the Maintainer in the database.
func (mc *MaintainerCreate) Save(ctx context.Context) (*Maintainer, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MaintainerCreate) SaveX(ctx context.Context) *Maintainer {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MaintainerCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MaintainerCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MaintainerCreate) check() error {
	if _, ok := mc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Maintainer.enable"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Maintainer.name"`)}
	}
	if _, ok := mc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Maintainer.phone"`)}
	}
	if _, ok := mc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Maintainer.password"`)}
	}
	return nil
}

func (mc *MaintainerCreate) sqlSave(ctx context.Context) (*Maintainer, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MaintainerCreate) createSpec() (*Maintainer, *sqlgraph.CreateSpec) {
	var (
		_node = &Maintainer{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(maintainer.Table, sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.Enable(); ok {
		_spec.SetField(maintainer.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(maintainer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Phone(); ok {
		_spec.SetField(maintainer.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := mc.mutation.Password(); ok {
		_spec.SetField(maintainer.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if nodes := mc.mutation.CitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   maintainer.CitiesTable,
			Columns: maintainer.CitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Maintainer.Create().
//		SetEnable(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaintainerUpsert) {
//			SetEnable(v+v).
//		}).
//		Exec(ctx)
func (mc *MaintainerCreate) OnConflict(opts ...sql.ConflictOption) *MaintainerUpsertOne {
	mc.conflict = opts
	return &MaintainerUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MaintainerCreate) OnConflictColumns(columns ...string) *MaintainerUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MaintainerUpsertOne{
		create: mc,
	}
}

type (
	// MaintainerUpsertOne is the builder for "upsert"-ing
	//  one Maintainer node.
	MaintainerUpsertOne struct {
		create *MaintainerCreate
	}

	// MaintainerUpsert is the "OnConflict" setter.
	MaintainerUpsert struct {
		*sql.UpdateSet
	}
)

// SetEnable sets the "enable" field.
func (u *MaintainerUpsert) SetEnable(v bool) *MaintainerUpsert {
	u.Set(maintainer.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *MaintainerUpsert) UpdateEnable() *MaintainerUpsert {
	u.SetExcluded(maintainer.FieldEnable)
	return u
}

// SetName sets the "name" field.
func (u *MaintainerUpsert) SetName(v string) *MaintainerUpsert {
	u.Set(maintainer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaintainerUpsert) UpdateName() *MaintainerUpsert {
	u.SetExcluded(maintainer.FieldName)
	return u
}

// SetPhone sets the "phone" field.
func (u *MaintainerUpsert) SetPhone(v string) *MaintainerUpsert {
	u.Set(maintainer.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MaintainerUpsert) UpdatePhone() *MaintainerUpsert {
	u.SetExcluded(maintainer.FieldPhone)
	return u
}

// SetPassword sets the "password" field.
func (u *MaintainerUpsert) SetPassword(v string) *MaintainerUpsert {
	u.Set(maintainer.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MaintainerUpsert) UpdatePassword() *MaintainerUpsert {
	u.SetExcluded(maintainer.FieldPassword)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MaintainerUpsertOne) UpdateNewValues() *MaintainerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MaintainerUpsertOne) Ignore() *MaintainerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaintainerUpsertOne) DoNothing() *MaintainerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaintainerCreate.OnConflict
// documentation for more info.
func (u *MaintainerUpsertOne) Update(set func(*MaintainerUpsert)) *MaintainerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaintainerUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnable sets the "enable" field.
func (u *MaintainerUpsertOne) SetEnable(v bool) *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *MaintainerUpsertOne) UpdateEnable() *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdateEnable()
	})
}

// SetName sets the "name" field.
func (u *MaintainerUpsertOne) SetName(v string) *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaintainerUpsertOne) UpdateName() *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *MaintainerUpsertOne) SetPhone(v string) *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MaintainerUpsertOne) UpdatePhone() *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *MaintainerUpsertOne) SetPassword(v string) *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MaintainerUpsertOne) UpdatePassword() *MaintainerUpsertOne {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdatePassword()
	})
}

// Exec executes the query.
func (u *MaintainerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaintainerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaintainerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MaintainerUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MaintainerUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MaintainerCreateBulk is the builder for creating many Maintainer entities in bulk.
type MaintainerCreateBulk struct {
	config
	builders []*MaintainerCreate
	conflict []sql.ConflictOption
}

// Save creates the Maintainer entities in the database.
func (mcb *MaintainerCreateBulk) Save(ctx context.Context) ([]*Maintainer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Maintainer, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MaintainerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MaintainerCreateBulk) SaveX(ctx context.Context) []*Maintainer {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MaintainerCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MaintainerCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Maintainer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MaintainerUpsert) {
//			SetEnable(v+v).
//		}).
//		Exec(ctx)
func (mcb *MaintainerCreateBulk) OnConflict(opts ...sql.ConflictOption) *MaintainerUpsertBulk {
	mcb.conflict = opts
	return &MaintainerUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MaintainerCreateBulk) OnConflictColumns(columns ...string) *MaintainerUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MaintainerUpsertBulk{
		create: mcb,
	}
}

// MaintainerUpsertBulk is the builder for "upsert"-ing
// a bulk of Maintainer nodes.
type MaintainerUpsertBulk struct {
	create *MaintainerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MaintainerUpsertBulk) UpdateNewValues() *MaintainerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Maintainer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MaintainerUpsertBulk) Ignore() *MaintainerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MaintainerUpsertBulk) DoNothing() *MaintainerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MaintainerCreateBulk.OnConflict
// documentation for more info.
func (u *MaintainerUpsertBulk) Update(set func(*MaintainerUpsert)) *MaintainerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MaintainerUpsert{UpdateSet: update})
	}))
	return u
}

// SetEnable sets the "enable" field.
func (u *MaintainerUpsertBulk) SetEnable(v bool) *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *MaintainerUpsertBulk) UpdateEnable() *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdateEnable()
	})
}

// SetName sets the "name" field.
func (u *MaintainerUpsertBulk) SetName(v string) *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MaintainerUpsertBulk) UpdateName() *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdateName()
	})
}

// SetPhone sets the "phone" field.
func (u *MaintainerUpsertBulk) SetPhone(v string) *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MaintainerUpsertBulk) UpdatePhone() *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdatePhone()
	})
}

// SetPassword sets the "password" field.
func (u *MaintainerUpsertBulk) SetPassword(v string) *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MaintainerUpsertBulk) UpdatePassword() *MaintainerUpsertBulk {
	return u.Update(func(s *MaintainerUpsert) {
		s.UpdatePassword()
	})
}

// Exec executes the query.
func (u *MaintainerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MaintainerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MaintainerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MaintainerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
