// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/riderphonedevice"
)

// RiderPhoneDeviceUpdate is the builder for updating RiderPhoneDevice entities.
type RiderPhoneDeviceUpdate struct {
	config
	hooks     []Hook
	mutation  *RiderPhoneDeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiderPhoneDeviceUpdate builder.
func (rpdu *RiderPhoneDeviceUpdate) Where(ps ...predicate.RiderPhoneDevice) *RiderPhoneDeviceUpdate {
	rpdu.mutation.Where(ps...)
	return rpdu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpdu *RiderPhoneDeviceUpdate) SetUpdatedAt(t time.Time) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetUpdatedAt(t)
	return rpdu
}

// SetDeletedAt sets the "deleted_at" field.
func (rpdu *RiderPhoneDeviceUpdate) SetDeletedAt(t time.Time) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetDeletedAt(t)
	return rpdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableDeletedAt(t *time.Time) *RiderPhoneDeviceUpdate {
	if t != nil {
		rpdu.SetDeletedAt(*t)
	}
	return rpdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearDeletedAt() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearDeletedAt()
	return rpdu
}

// SetDeviceSn sets the "device_sn" field.
func (rpdu *RiderPhoneDeviceUpdate) SetDeviceSn(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetDeviceSn(s)
	return rpdu
}

// SetNillableDeviceSn sets the "device_sn" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableDeviceSn(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetDeviceSn(*s)
	}
	return rpdu
}

// ClearDeviceSn clears the value of the "device_sn" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearDeviceSn() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearDeviceSn()
	return rpdu
}

// SetModel sets the "model" field.
func (rpdu *RiderPhoneDeviceUpdate) SetModel(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetModel(s)
	return rpdu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableModel(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetModel(*s)
	}
	return rpdu
}

// ClearModel clears the value of the "model" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearModel() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearModel()
	return rpdu
}

// SetBrand sets the "brand" field.
func (rpdu *RiderPhoneDeviceUpdate) SetBrand(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetBrand(s)
	return rpdu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableBrand(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetBrand(*s)
	}
	return rpdu
}

// ClearBrand clears the value of the "brand" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearBrand() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearBrand()
	return rpdu
}

// SetOsVersion sets the "os_version" field.
func (rpdu *RiderPhoneDeviceUpdate) SetOsVersion(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetOsVersion(s)
	return rpdu
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableOsVersion(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetOsVersion(*s)
	}
	return rpdu
}

// ClearOsVersion clears the value of the "os_version" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearOsVersion() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearOsVersion()
	return rpdu
}

// SetOsName sets the "os_name" field.
func (rpdu *RiderPhoneDeviceUpdate) SetOsName(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetOsName(s)
	return rpdu
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableOsName(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetOsName(*s)
	}
	return rpdu
}

// ClearOsName clears the value of the "os_name" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearOsName() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearOsName()
	return rpdu
}

// SetScreenWidth sets the "screen_width" field.
func (rpdu *RiderPhoneDeviceUpdate) SetScreenWidth(u uint64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.ResetScreenWidth()
	rpdu.mutation.SetScreenWidth(u)
	return rpdu
}

// SetNillableScreenWidth sets the "screen_width" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableScreenWidth(u *uint64) *RiderPhoneDeviceUpdate {
	if u != nil {
		rpdu.SetScreenWidth(*u)
	}
	return rpdu
}

// AddScreenWidth adds u to the "screen_width" field.
func (rpdu *RiderPhoneDeviceUpdate) AddScreenWidth(u int64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.AddScreenWidth(u)
	return rpdu
}

// ClearScreenWidth clears the value of the "screen_width" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearScreenWidth() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearScreenWidth()
	return rpdu
}

// SetScreenHeight sets the "screen_height" field.
func (rpdu *RiderPhoneDeviceUpdate) SetScreenHeight(u uint64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.ResetScreenHeight()
	rpdu.mutation.SetScreenHeight(u)
	return rpdu
}

// SetNillableScreenHeight sets the "screen_height" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableScreenHeight(u *uint64) *RiderPhoneDeviceUpdate {
	if u != nil {
		rpdu.SetScreenHeight(*u)
	}
	return rpdu
}

// AddScreenHeight adds u to the "screen_height" field.
func (rpdu *RiderPhoneDeviceUpdate) AddScreenHeight(u int64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.AddScreenHeight(u)
	return rpdu
}

// ClearScreenHeight clears the value of the "screen_height" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearScreenHeight() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearScreenHeight()
	return rpdu
}

// SetImei sets the "imei" field.
func (rpdu *RiderPhoneDeviceUpdate) SetImei(s string) *RiderPhoneDeviceUpdate {
	rpdu.mutation.SetImei(s)
	return rpdu
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableImei(s *string) *RiderPhoneDeviceUpdate {
	if s != nil {
		rpdu.SetImei(*s)
	}
	return rpdu
}

// ClearImei clears the value of the "imei" field.
func (rpdu *RiderPhoneDeviceUpdate) ClearImei() *RiderPhoneDeviceUpdate {
	rpdu.mutation.ClearImei()
	return rpdu
}

// SetRiderID sets the "rider_id" field.
func (rpdu *RiderPhoneDeviceUpdate) SetRiderID(u uint64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.ResetRiderID()
	rpdu.mutation.SetRiderID(u)
	return rpdu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (rpdu *RiderPhoneDeviceUpdate) SetNillableRiderID(u *uint64) *RiderPhoneDeviceUpdate {
	if u != nil {
		rpdu.SetRiderID(*u)
	}
	return rpdu
}

// AddRiderID adds u to the "rider_id" field.
func (rpdu *RiderPhoneDeviceUpdate) AddRiderID(u int64) *RiderPhoneDeviceUpdate {
	rpdu.mutation.AddRiderID(u)
	return rpdu
}

// Mutation returns the RiderPhoneDeviceMutation object of the builder.
func (rpdu *RiderPhoneDeviceUpdate) Mutation() *RiderPhoneDeviceMutation {
	return rpdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpdu *RiderPhoneDeviceUpdate) Save(ctx context.Context) (int, error) {
	rpdu.defaults()
	return withHooks(ctx, rpdu.sqlSave, rpdu.mutation, rpdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpdu *RiderPhoneDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := rpdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpdu *RiderPhoneDeviceUpdate) Exec(ctx context.Context) error {
	_, err := rpdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpdu *RiderPhoneDeviceUpdate) ExecX(ctx context.Context) {
	if err := rpdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpdu *RiderPhoneDeviceUpdate) defaults() {
	if _, ok := rpdu.mutation.UpdatedAt(); !ok {
		v := riderphonedevice.UpdateDefaultUpdatedAt()
		rpdu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpdu *RiderPhoneDeviceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiderPhoneDeviceUpdate {
	rpdu.modifiers = append(rpdu.modifiers, modifiers...)
	return rpdu
}

func (rpdu *RiderPhoneDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(riderphonedevice.Table, riderphonedevice.Columns, sqlgraph.NewFieldSpec(riderphonedevice.FieldID, field.TypeUint64))
	if ps := rpdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpdu.mutation.UpdatedAt(); ok {
		_spec.SetField(riderphonedevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rpdu.mutation.DeletedAt(); ok {
		_spec.SetField(riderphonedevice.FieldDeletedAt, field.TypeTime, value)
	}
	if rpdu.mutation.DeletedAtCleared() {
		_spec.ClearField(riderphonedevice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rpdu.mutation.DeviceSn(); ok {
		_spec.SetField(riderphonedevice.FieldDeviceSn, field.TypeString, value)
	}
	if rpdu.mutation.DeviceSnCleared() {
		_spec.ClearField(riderphonedevice.FieldDeviceSn, field.TypeString)
	}
	if value, ok := rpdu.mutation.Model(); ok {
		_spec.SetField(riderphonedevice.FieldModel, field.TypeString, value)
	}
	if rpdu.mutation.ModelCleared() {
		_spec.ClearField(riderphonedevice.FieldModel, field.TypeString)
	}
	if value, ok := rpdu.mutation.Brand(); ok {
		_spec.SetField(riderphonedevice.FieldBrand, field.TypeString, value)
	}
	if rpdu.mutation.BrandCleared() {
		_spec.ClearField(riderphonedevice.FieldBrand, field.TypeString)
	}
	if value, ok := rpdu.mutation.OsVersion(); ok {
		_spec.SetField(riderphonedevice.FieldOsVersion, field.TypeString, value)
	}
	if rpdu.mutation.OsVersionCleared() {
		_spec.ClearField(riderphonedevice.FieldOsVersion, field.TypeString)
	}
	if value, ok := rpdu.mutation.OsName(); ok {
		_spec.SetField(riderphonedevice.FieldOsName, field.TypeString, value)
	}
	if rpdu.mutation.OsNameCleared() {
		_spec.ClearField(riderphonedevice.FieldOsName, field.TypeString)
	}
	if value, ok := rpdu.mutation.ScreenWidth(); ok {
		_spec.SetField(riderphonedevice.FieldScreenWidth, field.TypeUint64, value)
	}
	if value, ok := rpdu.mutation.AddedScreenWidth(); ok {
		_spec.AddField(riderphonedevice.FieldScreenWidth, field.TypeUint64, value)
	}
	if rpdu.mutation.ScreenWidthCleared() {
		_spec.ClearField(riderphonedevice.FieldScreenWidth, field.TypeUint64)
	}
	if value, ok := rpdu.mutation.ScreenHeight(); ok {
		_spec.SetField(riderphonedevice.FieldScreenHeight, field.TypeUint64, value)
	}
	if value, ok := rpdu.mutation.AddedScreenHeight(); ok {
		_spec.AddField(riderphonedevice.FieldScreenHeight, field.TypeUint64, value)
	}
	if rpdu.mutation.ScreenHeightCleared() {
		_spec.ClearField(riderphonedevice.FieldScreenHeight, field.TypeUint64)
	}
	if value, ok := rpdu.mutation.Imei(); ok {
		_spec.SetField(riderphonedevice.FieldImei, field.TypeString, value)
	}
	if rpdu.mutation.ImeiCleared() {
		_spec.ClearField(riderphonedevice.FieldImei, field.TypeString)
	}
	if value, ok := rpdu.mutation.RiderID(); ok {
		_spec.SetField(riderphonedevice.FieldRiderID, field.TypeUint64, value)
	}
	if value, ok := rpdu.mutation.AddedRiderID(); ok {
		_spec.AddField(riderphonedevice.FieldRiderID, field.TypeUint64, value)
	}
	_spec.AddModifiers(rpdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rpdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderphonedevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpdu.mutation.done = true
	return n, nil
}

// RiderPhoneDeviceUpdateOne is the builder for updating a single RiderPhoneDevice entity.
type RiderPhoneDeviceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiderPhoneDeviceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetUpdatedAt(t time.Time) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetUpdatedAt(t)
	return rpduo
}

// SetDeletedAt sets the "deleted_at" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetDeletedAt(t time.Time) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetDeletedAt(t)
	return rpduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableDeletedAt(t *time.Time) *RiderPhoneDeviceUpdateOne {
	if t != nil {
		rpduo.SetDeletedAt(*t)
	}
	return rpduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearDeletedAt() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearDeletedAt()
	return rpduo
}

// SetDeviceSn sets the "device_sn" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetDeviceSn(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetDeviceSn(s)
	return rpduo
}

// SetNillableDeviceSn sets the "device_sn" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableDeviceSn(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetDeviceSn(*s)
	}
	return rpduo
}

// ClearDeviceSn clears the value of the "device_sn" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearDeviceSn() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearDeviceSn()
	return rpduo
}

// SetModel sets the "model" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetModel(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetModel(s)
	return rpduo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableModel(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetModel(*s)
	}
	return rpduo
}

// ClearModel clears the value of the "model" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearModel() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearModel()
	return rpduo
}

// SetBrand sets the "brand" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetBrand(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetBrand(s)
	return rpduo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableBrand(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetBrand(*s)
	}
	return rpduo
}

// ClearBrand clears the value of the "brand" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearBrand() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearBrand()
	return rpduo
}

// SetOsVersion sets the "os_version" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetOsVersion(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetOsVersion(s)
	return rpduo
}

// SetNillableOsVersion sets the "os_version" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableOsVersion(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetOsVersion(*s)
	}
	return rpduo
}

// ClearOsVersion clears the value of the "os_version" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearOsVersion() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearOsVersion()
	return rpduo
}

// SetOsName sets the "os_name" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetOsName(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetOsName(s)
	return rpduo
}

// SetNillableOsName sets the "os_name" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableOsName(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetOsName(*s)
	}
	return rpduo
}

// ClearOsName clears the value of the "os_name" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearOsName() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearOsName()
	return rpduo
}

// SetScreenWidth sets the "screen_width" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetScreenWidth(u uint64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ResetScreenWidth()
	rpduo.mutation.SetScreenWidth(u)
	return rpduo
}

// SetNillableScreenWidth sets the "screen_width" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableScreenWidth(u *uint64) *RiderPhoneDeviceUpdateOne {
	if u != nil {
		rpduo.SetScreenWidth(*u)
	}
	return rpduo
}

// AddScreenWidth adds u to the "screen_width" field.
func (rpduo *RiderPhoneDeviceUpdateOne) AddScreenWidth(u int64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.AddScreenWidth(u)
	return rpduo
}

// ClearScreenWidth clears the value of the "screen_width" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearScreenWidth() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearScreenWidth()
	return rpduo
}

// SetScreenHeight sets the "screen_height" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetScreenHeight(u uint64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ResetScreenHeight()
	rpduo.mutation.SetScreenHeight(u)
	return rpduo
}

// SetNillableScreenHeight sets the "screen_height" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableScreenHeight(u *uint64) *RiderPhoneDeviceUpdateOne {
	if u != nil {
		rpduo.SetScreenHeight(*u)
	}
	return rpduo
}

// AddScreenHeight adds u to the "screen_height" field.
func (rpduo *RiderPhoneDeviceUpdateOne) AddScreenHeight(u int64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.AddScreenHeight(u)
	return rpduo
}

// ClearScreenHeight clears the value of the "screen_height" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearScreenHeight() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearScreenHeight()
	return rpduo
}

// SetImei sets the "imei" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetImei(s string) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.SetImei(s)
	return rpduo
}

// SetNillableImei sets the "imei" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableImei(s *string) *RiderPhoneDeviceUpdateOne {
	if s != nil {
		rpduo.SetImei(*s)
	}
	return rpduo
}

// ClearImei clears the value of the "imei" field.
func (rpduo *RiderPhoneDeviceUpdateOne) ClearImei() *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ClearImei()
	return rpduo
}

// SetRiderID sets the "rider_id" field.
func (rpduo *RiderPhoneDeviceUpdateOne) SetRiderID(u uint64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.ResetRiderID()
	rpduo.mutation.SetRiderID(u)
	return rpduo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (rpduo *RiderPhoneDeviceUpdateOne) SetNillableRiderID(u *uint64) *RiderPhoneDeviceUpdateOne {
	if u != nil {
		rpduo.SetRiderID(*u)
	}
	return rpduo
}

// AddRiderID adds u to the "rider_id" field.
func (rpduo *RiderPhoneDeviceUpdateOne) AddRiderID(u int64) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.AddRiderID(u)
	return rpduo
}

// Mutation returns the RiderPhoneDeviceMutation object of the builder.
func (rpduo *RiderPhoneDeviceUpdateOne) Mutation() *RiderPhoneDeviceMutation {
	return rpduo.mutation
}

// Where appends a list predicates to the RiderPhoneDeviceUpdate builder.
func (rpduo *RiderPhoneDeviceUpdateOne) Where(ps ...predicate.RiderPhoneDevice) *RiderPhoneDeviceUpdateOne {
	rpduo.mutation.Where(ps...)
	return rpduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpduo *RiderPhoneDeviceUpdateOne) Select(field string, fields ...string) *RiderPhoneDeviceUpdateOne {
	rpduo.fields = append([]string{field}, fields...)
	return rpduo
}

// Save executes the query and returns the updated RiderPhoneDevice entity.
func (rpduo *RiderPhoneDeviceUpdateOne) Save(ctx context.Context) (*RiderPhoneDevice, error) {
	rpduo.defaults()
	return withHooks(ctx, rpduo.sqlSave, rpduo.mutation, rpduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpduo *RiderPhoneDeviceUpdateOne) SaveX(ctx context.Context) *RiderPhoneDevice {
	node, err := rpduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpduo *RiderPhoneDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := rpduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpduo *RiderPhoneDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := rpduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rpduo *RiderPhoneDeviceUpdateOne) defaults() {
	if _, ok := rpduo.mutation.UpdatedAt(); !ok {
		v := riderphonedevice.UpdateDefaultUpdatedAt()
		rpduo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rpduo *RiderPhoneDeviceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiderPhoneDeviceUpdateOne {
	rpduo.modifiers = append(rpduo.modifiers, modifiers...)
	return rpduo
}

func (rpduo *RiderPhoneDeviceUpdateOne) sqlSave(ctx context.Context) (_node *RiderPhoneDevice, err error) {
	_spec := sqlgraph.NewUpdateSpec(riderphonedevice.Table, riderphonedevice.Columns, sqlgraph.NewFieldSpec(riderphonedevice.FieldID, field.TypeUint64))
	id, ok := rpduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RiderPhoneDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riderphonedevice.FieldID)
		for _, f := range fields {
			if !riderphonedevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != riderphonedevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpduo.mutation.UpdatedAt(); ok {
		_spec.SetField(riderphonedevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rpduo.mutation.DeletedAt(); ok {
		_spec.SetField(riderphonedevice.FieldDeletedAt, field.TypeTime, value)
	}
	if rpduo.mutation.DeletedAtCleared() {
		_spec.ClearField(riderphonedevice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := rpduo.mutation.DeviceSn(); ok {
		_spec.SetField(riderphonedevice.FieldDeviceSn, field.TypeString, value)
	}
	if rpduo.mutation.DeviceSnCleared() {
		_spec.ClearField(riderphonedevice.FieldDeviceSn, field.TypeString)
	}
	if value, ok := rpduo.mutation.Model(); ok {
		_spec.SetField(riderphonedevice.FieldModel, field.TypeString, value)
	}
	if rpduo.mutation.ModelCleared() {
		_spec.ClearField(riderphonedevice.FieldModel, field.TypeString)
	}
	if value, ok := rpduo.mutation.Brand(); ok {
		_spec.SetField(riderphonedevice.FieldBrand, field.TypeString, value)
	}
	if rpduo.mutation.BrandCleared() {
		_spec.ClearField(riderphonedevice.FieldBrand, field.TypeString)
	}
	if value, ok := rpduo.mutation.OsVersion(); ok {
		_spec.SetField(riderphonedevice.FieldOsVersion, field.TypeString, value)
	}
	if rpduo.mutation.OsVersionCleared() {
		_spec.ClearField(riderphonedevice.FieldOsVersion, field.TypeString)
	}
	if value, ok := rpduo.mutation.OsName(); ok {
		_spec.SetField(riderphonedevice.FieldOsName, field.TypeString, value)
	}
	if rpduo.mutation.OsNameCleared() {
		_spec.ClearField(riderphonedevice.FieldOsName, field.TypeString)
	}
	if value, ok := rpduo.mutation.ScreenWidth(); ok {
		_spec.SetField(riderphonedevice.FieldScreenWidth, field.TypeUint64, value)
	}
	if value, ok := rpduo.mutation.AddedScreenWidth(); ok {
		_spec.AddField(riderphonedevice.FieldScreenWidth, field.TypeUint64, value)
	}
	if rpduo.mutation.ScreenWidthCleared() {
		_spec.ClearField(riderphonedevice.FieldScreenWidth, field.TypeUint64)
	}
	if value, ok := rpduo.mutation.ScreenHeight(); ok {
		_spec.SetField(riderphonedevice.FieldScreenHeight, field.TypeUint64, value)
	}
	if value, ok := rpduo.mutation.AddedScreenHeight(); ok {
		_spec.AddField(riderphonedevice.FieldScreenHeight, field.TypeUint64, value)
	}
	if rpduo.mutation.ScreenHeightCleared() {
		_spec.ClearField(riderphonedevice.FieldScreenHeight, field.TypeUint64)
	}
	if value, ok := rpduo.mutation.Imei(); ok {
		_spec.SetField(riderphonedevice.FieldImei, field.TypeString, value)
	}
	if rpduo.mutation.ImeiCleared() {
		_spec.ClearField(riderphonedevice.FieldImei, field.TypeString)
	}
	if value, ok := rpduo.mutation.RiderID(); ok {
		_spec.SetField(riderphonedevice.FieldRiderID, field.TypeUint64, value)
	}
	if value, ok := rpduo.mutation.AddedRiderID(); ok {
		_spec.AddField(riderphonedevice.FieldRiderID, field.TypeUint64, value)
	}
	_spec.AddModifiers(rpduo.modifiers...)
	_node = &RiderPhoneDevice{config: rpduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderphonedevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpduo.mutation.done = true
	return _node, nil
}
