// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/purchasecommodity"
)

// PurchaseCommodityCreate is the builder for creating a PurchaseCommodity entity.
type PurchaseCommodityCreate struct {
	config
	mutation *PurchaseCommodityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PurchaseCommodityCreate) SetCreatedAt(t time.Time) *PurchaseCommodityCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PurchaseCommodityCreate) SetNillableCreatedAt(t *time.Time) *PurchaseCommodityCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PurchaseCommodityCreate) SetUpdatedAt(t time.Time) *PurchaseCommodityCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PurchaseCommodityCreate) SetNillableUpdatedAt(t *time.Time) *PurchaseCommodityCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetDeletedAt sets the "deleted_at" field.
func (pcc *PurchaseCommodityCreate) SetDeletedAt(t time.Time) *PurchaseCommodityCreate {
	pcc.mutation.SetDeletedAt(t)
	return pcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pcc *PurchaseCommodityCreate) SetNillableDeletedAt(t *time.Time) *PurchaseCommodityCreate {
	if t != nil {
		pcc.SetDeletedAt(*t)
	}
	return pcc
}

// SetCreator sets the "creator" field.
func (pcc *PurchaseCommodityCreate) SetCreator(m *model.Modifier) *PurchaseCommodityCreate {
	pcc.mutation.SetCreator(m)
	return pcc
}

// SetLastModifier sets the "last_modifier" field.
func (pcc *PurchaseCommodityCreate) SetLastModifier(m *model.Modifier) *PurchaseCommodityCreate {
	pcc.mutation.SetLastModifier(m)
	return pcc
}

// SetRemark sets the "remark" field.
func (pcc *PurchaseCommodityCreate) SetRemark(s string) *PurchaseCommodityCreate {
	pcc.mutation.SetRemark(s)
	return pcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pcc *PurchaseCommodityCreate) SetNillableRemark(s *string) *PurchaseCommodityCreate {
	if s != nil {
		pcc.SetRemark(*s)
	}
	return pcc
}

// Mutation returns the PurchaseCommodityMutation object of the builder.
func (pcc *PurchaseCommodityCreate) Mutation() *PurchaseCommodityMutation {
	return pcc.mutation
}

// Save creates the PurchaseCommodity in the database.
func (pcc *PurchaseCommodityCreate) Save(ctx context.Context) (*PurchaseCommodity, error) {
	if err := pcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PurchaseCommodityCreate) SaveX(ctx context.Context) *PurchaseCommodity {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PurchaseCommodityCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PurchaseCommodityCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PurchaseCommodityCreate) defaults() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		if purchasecommodity.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasecommodity.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := purchasecommodity.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		if purchasecommodity.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasecommodity.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasecommodity.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PurchaseCommodityCreate) check() error {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PurchaseCommodity.created_at"`)}
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PurchaseCommodity.updated_at"`)}
	}
	return nil
}

func (pcc *PurchaseCommodityCreate) sqlSave(ctx context.Context) (*PurchaseCommodity, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PurchaseCommodityCreate) createSpec() (*PurchaseCommodity, *sqlgraph.CreateSpec) {
	var (
		_node = &PurchaseCommodity{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(purchasecommodity.Table, sqlgraph.NewFieldSpec(purchasecommodity.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pcc.conflict
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(purchasecommodity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasecommodity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.DeletedAt(); ok {
		_spec.SetField(purchasecommodity.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pcc.mutation.Creator(); ok {
		_spec.SetField(purchasecommodity.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pcc.mutation.LastModifier(); ok {
		_spec.SetField(purchasecommodity.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pcc.mutation.Remark(); ok {
		_spec.SetField(purchasecommodity.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseCommodity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseCommodityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcc *PurchaseCommodityCreate) OnConflict(opts ...sql.ConflictOption) *PurchaseCommodityUpsertOne {
	pcc.conflict = opts
	return &PurchaseCommodityUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PurchaseCommodityCreate) OnConflictColumns(columns ...string) *PurchaseCommodityUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PurchaseCommodityUpsertOne{
		create: pcc,
	}
}

type (
	// PurchaseCommodityUpsertOne is the builder for "upsert"-ing
	//  one PurchaseCommodity node.
	PurchaseCommodityUpsertOne struct {
		create *PurchaseCommodityCreate
	}

	// PurchaseCommodityUpsert is the "OnConflict" setter.
	PurchaseCommodityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseCommodityUpsert) SetUpdatedAt(v time.Time) *PurchaseCommodityUpsert {
	u.Set(purchasecommodity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsert) UpdateUpdatedAt() *PurchaseCommodityUpsert {
	u.SetExcluded(purchasecommodity.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseCommodityUpsert) SetDeletedAt(v time.Time) *PurchaseCommodityUpsert {
	u.Set(purchasecommodity.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsert) UpdateDeletedAt() *PurchaseCommodityUpsert {
	u.SetExcluded(purchasecommodity.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseCommodityUpsert) ClearDeletedAt() *PurchaseCommodityUpsert {
	u.SetNull(purchasecommodity.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseCommodityUpsert) SetLastModifier(v *model.Modifier) *PurchaseCommodityUpsert {
	u.Set(purchasecommodity.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseCommodityUpsert) UpdateLastModifier() *PurchaseCommodityUpsert {
	u.SetExcluded(purchasecommodity.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseCommodityUpsert) ClearLastModifier() *PurchaseCommodityUpsert {
	u.SetNull(purchasecommodity.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PurchaseCommodityUpsert) SetRemark(v string) *PurchaseCommodityUpsert {
	u.Set(purchasecommodity.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseCommodityUpsert) UpdateRemark() *PurchaseCommodityUpsert {
	u.SetExcluded(purchasecommodity.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseCommodityUpsert) ClearRemark() *PurchaseCommodityUpsert {
	u.SetNull(purchasecommodity.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseCommodityUpsertOne) UpdateNewValues() *PurchaseCommodityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(purchasecommodity.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(purchasecommodity.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PurchaseCommodityUpsertOne) Ignore() *PurchaseCommodityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseCommodityUpsertOne) DoNothing() *PurchaseCommodityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseCommodityCreate.OnConflict
// documentation for more info.
func (u *PurchaseCommodityUpsertOne) Update(set func(*PurchaseCommodityUpsert)) *PurchaseCommodityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseCommodityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseCommodityUpsertOne) SetUpdatedAt(v time.Time) *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertOne) UpdateUpdatedAt() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseCommodityUpsertOne) SetDeletedAt(v time.Time) *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertOne) UpdateDeletedAt() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseCommodityUpsertOne) ClearDeletedAt() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseCommodityUpsertOne) SetLastModifier(v *model.Modifier) *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertOne) UpdateLastModifier() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseCommodityUpsertOne) ClearLastModifier() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseCommodityUpsertOne) SetRemark(v string) *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertOne) UpdateRemark() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseCommodityUpsertOne) ClearRemark() *PurchaseCommodityUpsertOne {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *PurchaseCommodityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseCommodityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseCommodityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PurchaseCommodityUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PurchaseCommodityUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PurchaseCommodityCreateBulk is the builder for creating many PurchaseCommodity entities in bulk.
type PurchaseCommodityCreateBulk struct {
	config
	err      error
	builders []*PurchaseCommodityCreate
	conflict []sql.ConflictOption
}

// Save creates the PurchaseCommodity entities in the database.
func (pccb *PurchaseCommodityCreateBulk) Save(ctx context.Context) ([]*PurchaseCommodity, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PurchaseCommodity, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchaseCommodityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PurchaseCommodityCreateBulk) SaveX(ctx context.Context) []*PurchaseCommodity {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PurchaseCommodityCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PurchaseCommodityCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseCommodity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseCommodityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pccb *PurchaseCommodityCreateBulk) OnConflict(opts ...sql.ConflictOption) *PurchaseCommodityUpsertBulk {
	pccb.conflict = opts
	return &PurchaseCommodityUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PurchaseCommodityCreateBulk) OnConflictColumns(columns ...string) *PurchaseCommodityUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PurchaseCommodityUpsertBulk{
		create: pccb,
	}
}

// PurchaseCommodityUpsertBulk is the builder for "upsert"-ing
// a bulk of PurchaseCommodity nodes.
type PurchaseCommodityUpsertBulk struct {
	create *PurchaseCommodityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseCommodityUpsertBulk) UpdateNewValues() *PurchaseCommodityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(purchasecommodity.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(purchasecommodity.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseCommodity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PurchaseCommodityUpsertBulk) Ignore() *PurchaseCommodityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseCommodityUpsertBulk) DoNothing() *PurchaseCommodityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseCommodityCreateBulk.OnConflict
// documentation for more info.
func (u *PurchaseCommodityUpsertBulk) Update(set func(*PurchaseCommodityUpsert)) *PurchaseCommodityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseCommodityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseCommodityUpsertBulk) SetUpdatedAt(v time.Time) *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertBulk) UpdateUpdatedAt() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseCommodityUpsertBulk) SetDeletedAt(v time.Time) *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertBulk) UpdateDeletedAt() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseCommodityUpsertBulk) ClearDeletedAt() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseCommodityUpsertBulk) SetLastModifier(v *model.Modifier) *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertBulk) UpdateLastModifier() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseCommodityUpsertBulk) ClearLastModifier() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseCommodityUpsertBulk) SetRemark(v string) *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseCommodityUpsertBulk) UpdateRemark() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseCommodityUpsertBulk) ClearRemark() *PurchaseCommodityUpsertBulk {
	return u.Update(func(s *PurchaseCommodityUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *PurchaseCommodityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PurchaseCommodityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseCommodityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseCommodityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
