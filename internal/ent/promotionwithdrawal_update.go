// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
)

// PromotionWithdrawalUpdate is the builder for updating PromotionWithdrawal entities.
type PromotionWithdrawalUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionWithdrawalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionWithdrawalUpdate builder.
func (pwu *PromotionWithdrawalUpdate) Where(ps ...predicate.PromotionWithdrawal) *PromotionWithdrawalUpdate {
	pwu.mutation.Where(ps...)
	return pwu
}

// SetUpdatedAt sets the "updated_at" field.
func (pwu *PromotionWithdrawalUpdate) SetUpdatedAt(t time.Time) *PromotionWithdrawalUpdate {
	pwu.mutation.SetUpdatedAt(t)
	return pwu
}

// SetDeletedAt sets the "deleted_at" field.
func (pwu *PromotionWithdrawalUpdate) SetDeletedAt(t time.Time) *PromotionWithdrawalUpdate {
	pwu.mutation.SetDeletedAt(t)
	return pwu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableDeletedAt(t *time.Time) *PromotionWithdrawalUpdate {
	if t != nil {
		pwu.SetDeletedAt(*t)
	}
	return pwu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pwu *PromotionWithdrawalUpdate) ClearDeletedAt() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearDeletedAt()
	return pwu
}

// SetLastModifier sets the "last_modifier" field.
func (pwu *PromotionWithdrawalUpdate) SetLastModifier(m *model.Modifier) *PromotionWithdrawalUpdate {
	pwu.mutation.SetLastModifier(m)
	return pwu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pwu *PromotionWithdrawalUpdate) ClearLastModifier() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearLastModifier()
	return pwu
}

// SetRemark sets the "remark" field.
func (pwu *PromotionWithdrawalUpdate) SetRemark(s string) *PromotionWithdrawalUpdate {
	pwu.mutation.SetRemark(s)
	return pwu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableRemark(s *string) *PromotionWithdrawalUpdate {
	if s != nil {
		pwu.SetRemark(*s)
	}
	return pwu
}

// ClearRemark clears the value of the "remark" field.
func (pwu *PromotionWithdrawalUpdate) ClearRemark() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearRemark()
	return pwu
}

// SetMemberID sets the "member_id" field.
func (pwu *PromotionWithdrawalUpdate) SetMemberID(u uint64) *PromotionWithdrawalUpdate {
	pwu.mutation.SetMemberID(u)
	return pwu
}

// SetStatus sets the "status" field.
func (pwu *PromotionWithdrawalUpdate) SetStatus(u uint8) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetStatus()
	pwu.mutation.SetStatus(u)
	return pwu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableStatus(u *uint8) *PromotionWithdrawalUpdate {
	if u != nil {
		pwu.SetStatus(*u)
	}
	return pwu
}

// AddStatus adds u to the "status" field.
func (pwu *PromotionWithdrawalUpdate) AddStatus(u int8) *PromotionWithdrawalUpdate {
	pwu.mutation.AddStatus(u)
	return pwu
}

// SetApplyAmount sets the "apply_amount" field.
func (pwu *PromotionWithdrawalUpdate) SetApplyAmount(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetApplyAmount()
	pwu.mutation.SetApplyAmount(f)
	return pwu
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableApplyAmount(f *float64) *PromotionWithdrawalUpdate {
	if f != nil {
		pwu.SetApplyAmount(*f)
	}
	return pwu
}

// AddApplyAmount adds f to the "apply_amount" field.
func (pwu *PromotionWithdrawalUpdate) AddApplyAmount(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.AddApplyAmount(f)
	return pwu
}

// SetAmount sets the "amount" field.
func (pwu *PromotionWithdrawalUpdate) SetAmount(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetAmount()
	pwu.mutation.SetAmount(f)
	return pwu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableAmount(f *float64) *PromotionWithdrawalUpdate {
	if f != nil {
		pwu.SetAmount(*f)
	}
	return pwu
}

// AddAmount adds f to the "amount" field.
func (pwu *PromotionWithdrawalUpdate) AddAmount(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.AddAmount(f)
	return pwu
}

// SetFee sets the "fee" field.
func (pwu *PromotionWithdrawalUpdate) SetFee(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetFee()
	pwu.mutation.SetFee(f)
	return pwu
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableFee(f *float64) *PromotionWithdrawalUpdate {
	if f != nil {
		pwu.SetFee(*f)
	}
	return pwu
}

// AddFee adds f to the "fee" field.
func (pwu *PromotionWithdrawalUpdate) AddFee(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.AddFee(f)
	return pwu
}

// SetTex sets the "tex" field.
func (pwu *PromotionWithdrawalUpdate) SetTex(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetTex()
	pwu.mutation.SetTex(f)
	return pwu
}

// SetNillableTex sets the "tex" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableTex(f *float64) *PromotionWithdrawalUpdate {
	if f != nil {
		pwu.SetTex(*f)
	}
	return pwu
}

// AddTex adds f to the "tex" field.
func (pwu *PromotionWithdrawalUpdate) AddTex(f float64) *PromotionWithdrawalUpdate {
	pwu.mutation.AddTex(f)
	return pwu
}

// SetMethod sets the "method" field.
func (pwu *PromotionWithdrawalUpdate) SetMethod(u uint8) *PromotionWithdrawalUpdate {
	pwu.mutation.ResetMethod()
	pwu.mutation.SetMethod(u)
	return pwu
}

// AddMethod adds u to the "method" field.
func (pwu *PromotionWithdrawalUpdate) AddMethod(u int8) *PromotionWithdrawalUpdate {
	pwu.mutation.AddMethod(u)
	return pwu
}

// SetAccountID sets the "account_id" field.
func (pwu *PromotionWithdrawalUpdate) SetAccountID(u uint64) *PromotionWithdrawalUpdate {
	pwu.mutation.SetAccountID(u)
	return pwu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableAccountID(u *uint64) *PromotionWithdrawalUpdate {
	if u != nil {
		pwu.SetAccountID(*u)
	}
	return pwu
}

// ClearAccountID clears the value of the "account_id" field.
func (pwu *PromotionWithdrawalUpdate) ClearAccountID() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearAccountID()
	return pwu
}

// SetApplyTime sets the "apply_time" field.
func (pwu *PromotionWithdrawalUpdate) SetApplyTime(t time.Time) *PromotionWithdrawalUpdate {
	pwu.mutation.SetApplyTime(t)
	return pwu
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableApplyTime(t *time.Time) *PromotionWithdrawalUpdate {
	if t != nil {
		pwu.SetApplyTime(*t)
	}
	return pwu
}

// ClearApplyTime clears the value of the "apply_time" field.
func (pwu *PromotionWithdrawalUpdate) ClearApplyTime() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearApplyTime()
	return pwu
}

// SetReviewTime sets the "review_time" field.
func (pwu *PromotionWithdrawalUpdate) SetReviewTime(t time.Time) *PromotionWithdrawalUpdate {
	pwu.mutation.SetReviewTime(t)
	return pwu
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableReviewTime(t *time.Time) *PromotionWithdrawalUpdate {
	if t != nil {
		pwu.SetReviewTime(*t)
	}
	return pwu
}

// ClearReviewTime clears the value of the "review_time" field.
func (pwu *PromotionWithdrawalUpdate) ClearReviewTime() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearReviewTime()
	return pwu
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pwu *PromotionWithdrawalUpdate) SetMember(p *PromotionMember) *PromotionWithdrawalUpdate {
	return pwu.SetMemberID(p.ID)
}

// SetCardsID sets the "cards" edge to the PromotionBankCard entity by ID.
func (pwu *PromotionWithdrawalUpdate) SetCardsID(id uint64) *PromotionWithdrawalUpdate {
	pwu.mutation.SetCardsID(id)
	return pwu
}

// SetNillableCardsID sets the "cards" edge to the PromotionBankCard entity by ID if the given value is not nil.
func (pwu *PromotionWithdrawalUpdate) SetNillableCardsID(id *uint64) *PromotionWithdrawalUpdate {
	if id != nil {
		pwu = pwu.SetCardsID(*id)
	}
	return pwu
}

// SetCards sets the "cards" edge to the PromotionBankCard entity.
func (pwu *PromotionWithdrawalUpdate) SetCards(p *PromotionBankCard) *PromotionWithdrawalUpdate {
	return pwu.SetCardsID(p.ID)
}

// Mutation returns the PromotionWithdrawalMutation object of the builder.
func (pwu *PromotionWithdrawalUpdate) Mutation() *PromotionWithdrawalMutation {
	return pwu.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pwu *PromotionWithdrawalUpdate) ClearMember() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearMember()
	return pwu
}

// ClearCards clears the "cards" edge to the PromotionBankCard entity.
func (pwu *PromotionWithdrawalUpdate) ClearCards() *PromotionWithdrawalUpdate {
	pwu.mutation.ClearCards()
	return pwu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pwu *PromotionWithdrawalUpdate) Save(ctx context.Context) (int, error) {
	if err := pwu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pwu.sqlSave, pwu.mutation, pwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwu *PromotionWithdrawalUpdate) SaveX(ctx context.Context) int {
	affected, err := pwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pwu *PromotionWithdrawalUpdate) Exec(ctx context.Context) error {
	_, err := pwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwu *PromotionWithdrawalUpdate) ExecX(ctx context.Context) {
	if err := pwu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwu *PromotionWithdrawalUpdate) defaults() error {
	if _, ok := pwu.mutation.UpdatedAt(); !ok {
		if promotionwithdrawal.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionwithdrawal.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionwithdrawal.UpdateDefaultUpdatedAt()
		pwu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pwu *PromotionWithdrawalUpdate) check() error {
	if _, ok := pwu.mutation.MemberID(); pwu.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionWithdrawal.member"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pwu *PromotionWithdrawalUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionWithdrawalUpdate {
	pwu.modifiers = append(pwu.modifiers, modifiers...)
	return pwu
}

func (pwu *PromotionWithdrawalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pwu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionwithdrawal.Table, promotionwithdrawal.Columns, sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64))
	if ps := pwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pwu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldDeletedAt, field.TypeTime, value)
	}
	if pwu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionwithdrawal.FieldDeletedAt, field.TypeTime)
	}
	if pwu.mutation.CreatorCleared() {
		_spec.ClearField(promotionwithdrawal.FieldCreator, field.TypeJSON)
	}
	if value, ok := pwu.mutation.LastModifier(); ok {
		_spec.SetField(promotionwithdrawal.FieldLastModifier, field.TypeJSON, value)
	}
	if pwu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionwithdrawal.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pwu.mutation.Remark(); ok {
		_spec.SetField(promotionwithdrawal.FieldRemark, field.TypeString, value)
	}
	if pwu.mutation.RemarkCleared() {
		_spec.ClearField(promotionwithdrawal.FieldRemark, field.TypeString)
	}
	if value, ok := pwu.mutation.Status(); ok {
		_spec.SetField(promotionwithdrawal.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pwu.mutation.AddedStatus(); ok {
		_spec.AddField(promotionwithdrawal.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pwu.mutation.ApplyAmount(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.AddedApplyAmount(); ok {
		_spec.AddField(promotionwithdrawal.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.Amount(); ok {
		_spec.SetField(promotionwithdrawal.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.AddedAmount(); ok {
		_spec.AddField(promotionwithdrawal.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.Fee(); ok {
		_spec.SetField(promotionwithdrawal.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.AddedFee(); ok {
		_spec.AddField(promotionwithdrawal.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.Tex(); ok {
		_spec.SetField(promotionwithdrawal.FieldTex, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.AddedTex(); ok {
		_spec.AddField(promotionwithdrawal.FieldTex, field.TypeFloat64, value)
	}
	if value, ok := pwu.mutation.Method(); ok {
		_spec.SetField(promotionwithdrawal.FieldMethod, field.TypeUint8, value)
	}
	if value, ok := pwu.mutation.AddedMethod(); ok {
		_spec.AddField(promotionwithdrawal.FieldMethod, field.TypeUint8, value)
	}
	if value, ok := pwu.mutation.ApplyTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyTime, field.TypeTime, value)
	}
	if pwu.mutation.ApplyTimeCleared() {
		_spec.ClearField(promotionwithdrawal.FieldApplyTime, field.TypeTime)
	}
	if value, ok := pwu.mutation.ReviewTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldReviewTime, field.TypeTime, value)
	}
	if pwu.mutation.ReviewTimeCleared() {
		_spec.ClearField(promotionwithdrawal.FieldReviewTime, field.TypeTime)
	}
	if pwu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pwu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwu.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pwu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionwithdrawal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pwu.mutation.done = true
	return n, nil
}

// PromotionWithdrawalUpdateOne is the builder for updating a single PromotionWithdrawal entity.
type PromotionWithdrawalUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionWithdrawalMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetUpdatedAt(t time.Time) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetUpdatedAt(t)
	return pwuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetDeletedAt(t time.Time) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetDeletedAt(t)
	return pwuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionWithdrawalUpdateOne {
	if t != nil {
		pwuo.SetDeletedAt(*t)
	}
	return pwuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearDeletedAt() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearDeletedAt()
	return pwuo
}

// SetLastModifier sets the "last_modifier" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetLastModifier(m *model.Modifier) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetLastModifier(m)
	return pwuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearLastModifier() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearLastModifier()
	return pwuo
}

// SetRemark sets the "remark" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetRemark(s string) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetRemark(s)
	return pwuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableRemark(s *string) *PromotionWithdrawalUpdateOne {
	if s != nil {
		pwuo.SetRemark(*s)
	}
	return pwuo
}

// ClearRemark clears the value of the "remark" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearRemark() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearRemark()
	return pwuo
}

// SetMemberID sets the "member_id" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetMemberID(u uint64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetMemberID(u)
	return pwuo
}

// SetStatus sets the "status" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetStatus(u uint8) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetStatus()
	pwuo.mutation.SetStatus(u)
	return pwuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableStatus(u *uint8) *PromotionWithdrawalUpdateOne {
	if u != nil {
		pwuo.SetStatus(*u)
	}
	return pwuo
}

// AddStatus adds u to the "status" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddStatus(u int8) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddStatus(u)
	return pwuo
}

// SetApplyAmount sets the "apply_amount" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetApplyAmount(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetApplyAmount()
	pwuo.mutation.SetApplyAmount(f)
	return pwuo
}

// SetNillableApplyAmount sets the "apply_amount" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableApplyAmount(f *float64) *PromotionWithdrawalUpdateOne {
	if f != nil {
		pwuo.SetApplyAmount(*f)
	}
	return pwuo
}

// AddApplyAmount adds f to the "apply_amount" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddApplyAmount(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddApplyAmount(f)
	return pwuo
}

// SetAmount sets the "amount" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetAmount(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetAmount()
	pwuo.mutation.SetAmount(f)
	return pwuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableAmount(f *float64) *PromotionWithdrawalUpdateOne {
	if f != nil {
		pwuo.SetAmount(*f)
	}
	return pwuo
}

// AddAmount adds f to the "amount" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddAmount(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddAmount(f)
	return pwuo
}

// SetFee sets the "fee" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetFee(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetFee()
	pwuo.mutation.SetFee(f)
	return pwuo
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableFee(f *float64) *PromotionWithdrawalUpdateOne {
	if f != nil {
		pwuo.SetFee(*f)
	}
	return pwuo
}

// AddFee adds f to the "fee" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddFee(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddFee(f)
	return pwuo
}

// SetTex sets the "tex" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetTex(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetTex()
	pwuo.mutation.SetTex(f)
	return pwuo
}

// SetNillableTex sets the "tex" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableTex(f *float64) *PromotionWithdrawalUpdateOne {
	if f != nil {
		pwuo.SetTex(*f)
	}
	return pwuo
}

// AddTex adds f to the "tex" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddTex(f float64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddTex(f)
	return pwuo
}

// SetMethod sets the "method" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetMethod(u uint8) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ResetMethod()
	pwuo.mutation.SetMethod(u)
	return pwuo
}

// AddMethod adds u to the "method" field.
func (pwuo *PromotionWithdrawalUpdateOne) AddMethod(u int8) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.AddMethod(u)
	return pwuo
}

// SetAccountID sets the "account_id" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetAccountID(u uint64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetAccountID(u)
	return pwuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableAccountID(u *uint64) *PromotionWithdrawalUpdateOne {
	if u != nil {
		pwuo.SetAccountID(*u)
	}
	return pwuo
}

// ClearAccountID clears the value of the "account_id" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearAccountID() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearAccountID()
	return pwuo
}

// SetApplyTime sets the "apply_time" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetApplyTime(t time.Time) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetApplyTime(t)
	return pwuo
}

// SetNillableApplyTime sets the "apply_time" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableApplyTime(t *time.Time) *PromotionWithdrawalUpdateOne {
	if t != nil {
		pwuo.SetApplyTime(*t)
	}
	return pwuo
}

// ClearApplyTime clears the value of the "apply_time" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearApplyTime() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearApplyTime()
	return pwuo
}

// SetReviewTime sets the "review_time" field.
func (pwuo *PromotionWithdrawalUpdateOne) SetReviewTime(t time.Time) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetReviewTime(t)
	return pwuo
}

// SetNillableReviewTime sets the "review_time" field if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableReviewTime(t *time.Time) *PromotionWithdrawalUpdateOne {
	if t != nil {
		pwuo.SetReviewTime(*t)
	}
	return pwuo
}

// ClearReviewTime clears the value of the "review_time" field.
func (pwuo *PromotionWithdrawalUpdateOne) ClearReviewTime() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearReviewTime()
	return pwuo
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pwuo *PromotionWithdrawalUpdateOne) SetMember(p *PromotionMember) *PromotionWithdrawalUpdateOne {
	return pwuo.SetMemberID(p.ID)
}

// SetCardsID sets the "cards" edge to the PromotionBankCard entity by ID.
func (pwuo *PromotionWithdrawalUpdateOne) SetCardsID(id uint64) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.SetCardsID(id)
	return pwuo
}

// SetNillableCardsID sets the "cards" edge to the PromotionBankCard entity by ID if the given value is not nil.
func (pwuo *PromotionWithdrawalUpdateOne) SetNillableCardsID(id *uint64) *PromotionWithdrawalUpdateOne {
	if id != nil {
		pwuo = pwuo.SetCardsID(*id)
	}
	return pwuo
}

// SetCards sets the "cards" edge to the PromotionBankCard entity.
func (pwuo *PromotionWithdrawalUpdateOne) SetCards(p *PromotionBankCard) *PromotionWithdrawalUpdateOne {
	return pwuo.SetCardsID(p.ID)
}

// Mutation returns the PromotionWithdrawalMutation object of the builder.
func (pwuo *PromotionWithdrawalUpdateOne) Mutation() *PromotionWithdrawalMutation {
	return pwuo.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pwuo *PromotionWithdrawalUpdateOne) ClearMember() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearMember()
	return pwuo
}

// ClearCards clears the "cards" edge to the PromotionBankCard entity.
func (pwuo *PromotionWithdrawalUpdateOne) ClearCards() *PromotionWithdrawalUpdateOne {
	pwuo.mutation.ClearCards()
	return pwuo
}

// Where appends a list predicates to the PromotionWithdrawalUpdate builder.
func (pwuo *PromotionWithdrawalUpdateOne) Where(ps ...predicate.PromotionWithdrawal) *PromotionWithdrawalUpdateOne {
	pwuo.mutation.Where(ps...)
	return pwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pwuo *PromotionWithdrawalUpdateOne) Select(field string, fields ...string) *PromotionWithdrawalUpdateOne {
	pwuo.fields = append([]string{field}, fields...)
	return pwuo
}

// Save executes the query and returns the updated PromotionWithdrawal entity.
func (pwuo *PromotionWithdrawalUpdateOne) Save(ctx context.Context) (*PromotionWithdrawal, error) {
	if err := pwuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pwuo.sqlSave, pwuo.mutation, pwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pwuo *PromotionWithdrawalUpdateOne) SaveX(ctx context.Context) *PromotionWithdrawal {
	node, err := pwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pwuo *PromotionWithdrawalUpdateOne) Exec(ctx context.Context) error {
	_, err := pwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pwuo *PromotionWithdrawalUpdateOne) ExecX(ctx context.Context) {
	if err := pwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pwuo *PromotionWithdrawalUpdateOne) defaults() error {
	if _, ok := pwuo.mutation.UpdatedAt(); !ok {
		if promotionwithdrawal.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionwithdrawal.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionwithdrawal.UpdateDefaultUpdatedAt()
		pwuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pwuo *PromotionWithdrawalUpdateOne) check() error {
	if _, ok := pwuo.mutation.MemberID(); pwuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PromotionWithdrawal.member"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pwuo *PromotionWithdrawalUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionWithdrawalUpdateOne {
	pwuo.modifiers = append(pwuo.modifiers, modifiers...)
	return pwuo
}

func (pwuo *PromotionWithdrawalUpdateOne) sqlSave(ctx context.Context) (_node *PromotionWithdrawal, err error) {
	if err := pwuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(promotionwithdrawal.Table, promotionwithdrawal.Columns, sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64))
	id, ok := pwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionWithdrawal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionwithdrawal.FieldID)
		for _, f := range fields {
			if !promotionwithdrawal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionwithdrawal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pwuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pwuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionwithdrawal.FieldDeletedAt, field.TypeTime, value)
	}
	if pwuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionwithdrawal.FieldDeletedAt, field.TypeTime)
	}
	if pwuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionwithdrawal.FieldCreator, field.TypeJSON)
	}
	if value, ok := pwuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionwithdrawal.FieldLastModifier, field.TypeJSON, value)
	}
	if pwuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionwithdrawal.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pwuo.mutation.Remark(); ok {
		_spec.SetField(promotionwithdrawal.FieldRemark, field.TypeString, value)
	}
	if pwuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionwithdrawal.FieldRemark, field.TypeString)
	}
	if value, ok := pwuo.mutation.Status(); ok {
		_spec.SetField(promotionwithdrawal.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pwuo.mutation.AddedStatus(); ok {
		_spec.AddField(promotionwithdrawal.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pwuo.mutation.ApplyAmount(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.AddedApplyAmount(); ok {
		_spec.AddField(promotionwithdrawal.FieldApplyAmount, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.Amount(); ok {
		_spec.SetField(promotionwithdrawal.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.AddedAmount(); ok {
		_spec.AddField(promotionwithdrawal.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.Fee(); ok {
		_spec.SetField(promotionwithdrawal.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.AddedFee(); ok {
		_spec.AddField(promotionwithdrawal.FieldFee, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.Tex(); ok {
		_spec.SetField(promotionwithdrawal.FieldTex, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.AddedTex(); ok {
		_spec.AddField(promotionwithdrawal.FieldTex, field.TypeFloat64, value)
	}
	if value, ok := pwuo.mutation.Method(); ok {
		_spec.SetField(promotionwithdrawal.FieldMethod, field.TypeUint8, value)
	}
	if value, ok := pwuo.mutation.AddedMethod(); ok {
		_spec.AddField(promotionwithdrawal.FieldMethod, field.TypeUint8, value)
	}
	if value, ok := pwuo.mutation.ApplyTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldApplyTime, field.TypeTime, value)
	}
	if pwuo.mutation.ApplyTimeCleared() {
		_spec.ClearField(promotionwithdrawal.FieldApplyTime, field.TypeTime)
	}
	if value, ok := pwuo.mutation.ReviewTime(); ok {
		_spec.SetField(promotionwithdrawal.FieldReviewTime, field.TypeTime, value)
	}
	if pwuo.mutation.ReviewTimeCleared() {
		_spec.ClearField(promotionwithdrawal.FieldReviewTime, field.TypeTime)
	}
	if pwuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionwithdrawal.MemberTable,
			Columns: []string{promotionwithdrawal.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pwuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pwuo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionwithdrawal.CardsTable,
			Columns: []string{promotionwithdrawal.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pwuo.modifiers...)
	_node = &PromotionWithdrawal{config: pwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionwithdrawal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pwuo.mutation.done = true
	return _node, nil
}
