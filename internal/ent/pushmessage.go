// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/pushmessage"
)

// Pushmessage is the model entity for the Pushmessage schema.
type Pushmessage struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 标题
	Title string `json:"title,omitempty"`
	// 封面图片
	Image string `json:"image,omitempty"`
	// 内容
	Content string `json:"content,omitempty"`
	// 推送类型
	PushType uint8 `json:"push_type,omitempty"`
	// 推送时间
	PushTime *time.Time `json:"push_time,omitempty"`
	// 是否首页推送
	IsHome bool `json:"is_home,omitempty"`
	// 首页推送内容
	HomeContent string `json:"home_content,omitempty"`
	// 消息状态
	MessageStatus uint8 `json:"message_status,omitempty"`
	// 消息类型
	MessageType uint8 `json:"message_type,omitempty"`
	// 第三方推送平台消息ID
	ThirdPartyID string `json:"third_party_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Pushmessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pushmessage.FieldCreator, pushmessage.FieldLastModifier:
			values[i] = new([]byte)
		case pushmessage.FieldIsHome:
			values[i] = new(sql.NullBool)
		case pushmessage.FieldID, pushmessage.FieldPushType, pushmessage.FieldMessageStatus, pushmessage.FieldMessageType:
			values[i] = new(sql.NullInt64)
		case pushmessage.FieldRemark, pushmessage.FieldTitle, pushmessage.FieldImage, pushmessage.FieldContent, pushmessage.FieldHomeContent, pushmessage.FieldThirdPartyID:
			values[i] = new(sql.NullString)
		case pushmessage.FieldCreatedAt, pushmessage.FieldUpdatedAt, pushmessage.FieldDeletedAt, pushmessage.FieldPushTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Pushmessage fields.
func (pu *Pushmessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pushmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = uint64(value.Int64)
		case pushmessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pu.CreatedAt = value.Time
			}
		case pushmessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pu.UpdatedAt = value.Time
			}
		case pushmessage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pu.DeletedAt = new(time.Time)
				*pu.DeletedAt = value.Time
			}
		case pushmessage.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pu.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case pushmessage.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pu.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case pushmessage.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pu.Remark = value.String
			}
		case pushmessage.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				pu.Title = value.String
			}
		case pushmessage.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				pu.Image = value.String
			}
		case pushmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pu.Content = value.String
			}
		case pushmessage.FieldPushType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field push_type", values[i])
			} else if value.Valid {
				pu.PushType = uint8(value.Int64)
			}
		case pushmessage.FieldPushTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field push_time", values[i])
			} else if value.Valid {
				pu.PushTime = new(time.Time)
				*pu.PushTime = value.Time
			}
		case pushmessage.FieldIsHome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_home", values[i])
			} else if value.Valid {
				pu.IsHome = value.Bool
			}
		case pushmessage.FieldHomeContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field home_content", values[i])
			} else if value.Valid {
				pu.HomeContent = value.String
			}
		case pushmessage.FieldMessageStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_status", values[i])
			} else if value.Valid {
				pu.MessageStatus = uint8(value.Int64)
			}
		case pushmessage.FieldMessageType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field message_type", values[i])
			} else if value.Valid {
				pu.MessageType = uint8(value.Int64)
			}
		case pushmessage.FieldThirdPartyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field third_party_id", values[i])
			} else if value.Valid {
				pu.ThirdPartyID = value.String
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Pushmessage.
// This includes values selected through modifiers, order, etc.
func (pu *Pushmessage) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// Update returns a builder for updating this Pushmessage.
// Note that you need to call Pushmessage.Unwrap() before calling this method if this Pushmessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Pushmessage) Update() *PushmessageUpdateOne {
	return NewPushmessageClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the Pushmessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Pushmessage) Unwrap() *Pushmessage {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Pushmessage is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Pushmessage) String() string {
	var builder strings.Builder
	builder.WriteString("Pushmessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pu.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pu.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pu.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pu.Remark)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(pu.Title)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(pu.Image)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pu.Content)
	builder.WriteString(", ")
	builder.WriteString("push_type=")
	builder.WriteString(fmt.Sprintf("%v", pu.PushType))
	builder.WriteString(", ")
	if v := pu.PushTime; v != nil {
		builder.WriteString("push_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_home=")
	builder.WriteString(fmt.Sprintf("%v", pu.IsHome))
	builder.WriteString(", ")
	builder.WriteString("home_content=")
	builder.WriteString(pu.HomeContent)
	builder.WriteString(", ")
	builder.WriteString("message_status=")
	builder.WriteString(fmt.Sprintf("%v", pu.MessageStatus))
	builder.WriteString(", ")
	builder.WriteString("message_type=")
	builder.WriteString(fmt.Sprintf("%v", pu.MessageType))
	builder.WriteString(", ")
	builder.WriteString("third_party_id=")
	builder.WriteString(pu.ThirdPartyID)
	builder.WriteByte(')')
	return builder.String()
}

// Pushmessages is a parsable slice of Pushmessage.
type Pushmessages []*Pushmessage
