// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionreferralsprogress"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PromotionReferralsProgressCreate is the builder for creating a PromotionReferralsProgress entity.
type PromotionReferralsProgressCreate struct {
	config
	mutation *PromotionReferralsProgressMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (prpc *PromotionReferralsProgressCreate) SetCreatedAt(t time.Time) *PromotionReferralsProgressCreate {
	prpc.mutation.SetCreatedAt(t)
	return prpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableCreatedAt(t *time.Time) *PromotionReferralsProgressCreate {
	if t != nil {
		prpc.SetCreatedAt(*t)
	}
	return prpc
}

// SetUpdatedAt sets the "updated_at" field.
func (prpc *PromotionReferralsProgressCreate) SetUpdatedAt(t time.Time) *PromotionReferralsProgressCreate {
	prpc.mutation.SetUpdatedAt(t)
	return prpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableUpdatedAt(t *time.Time) *PromotionReferralsProgressCreate {
	if t != nil {
		prpc.SetUpdatedAt(*t)
	}
	return prpc
}

// SetCreator sets the "creator" field.
func (prpc *PromotionReferralsProgressCreate) SetCreator(m *model.Modifier) *PromotionReferralsProgressCreate {
	prpc.mutation.SetCreator(m)
	return prpc
}

// SetLastModifier sets the "last_modifier" field.
func (prpc *PromotionReferralsProgressCreate) SetLastModifier(m *model.Modifier) *PromotionReferralsProgressCreate {
	prpc.mutation.SetLastModifier(m)
	return prpc
}

// SetRemark sets the "remark" field.
func (prpc *PromotionReferralsProgressCreate) SetRemark(s string) *PromotionReferralsProgressCreate {
	prpc.mutation.SetRemark(s)
	return prpc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableRemark(s *string) *PromotionReferralsProgressCreate {
	if s != nil {
		prpc.SetRemark(*s)
	}
	return prpc
}

// SetRiderID sets the "rider_id" field.
func (prpc *PromotionReferralsProgressCreate) SetRiderID(u uint64) *PromotionReferralsProgressCreate {
	prpc.mutation.SetRiderID(u)
	return prpc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableRiderID(u *uint64) *PromotionReferralsProgressCreate {
	if u != nil {
		prpc.SetRiderID(*u)
	}
	return prpc
}

// SetReferringMemberID sets the "referring_member_id" field.
func (prpc *PromotionReferralsProgressCreate) SetReferringMemberID(u uint64) *PromotionReferralsProgressCreate {
	prpc.mutation.SetReferringMemberID(u)
	return prpc
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableReferringMemberID(u *uint64) *PromotionReferralsProgressCreate {
	if u != nil {
		prpc.SetReferringMemberID(*u)
	}
	return prpc
}

// SetReferredMemberID sets the "referred_member_id" field.
func (prpc *PromotionReferralsProgressCreate) SetReferredMemberID(u uint64) *PromotionReferralsProgressCreate {
	prpc.mutation.SetReferredMemberID(u)
	return prpc
}

// SetName sets the "name" field.
func (prpc *PromotionReferralsProgressCreate) SetName(s string) *PromotionReferralsProgressCreate {
	prpc.mutation.SetName(s)
	return prpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableName(s *string) *PromotionReferralsProgressCreate {
	if s != nil {
		prpc.SetName(*s)
	}
	return prpc
}

// SetStatus sets the "status" field.
func (prpc *PromotionReferralsProgressCreate) SetStatus(u uint8) *PromotionReferralsProgressCreate {
	prpc.mutation.SetStatus(u)
	return prpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (prpc *PromotionReferralsProgressCreate) SetNillableStatus(u *uint8) *PromotionReferralsProgressCreate {
	if u != nil {
		prpc.SetStatus(*u)
	}
	return prpc
}

// SetRider sets the "rider" edge to the Rider entity.
func (prpc *PromotionReferralsProgressCreate) SetRider(r *Rider) *PromotionReferralsProgressCreate {
	return prpc.SetRiderID(r.ID)
}

// Mutation returns the PromotionReferralsProgressMutation object of the builder.
func (prpc *PromotionReferralsProgressCreate) Mutation() *PromotionReferralsProgressMutation {
	return prpc.mutation
}

// Save creates the PromotionReferralsProgress in the database.
func (prpc *PromotionReferralsProgressCreate) Save(ctx context.Context) (*PromotionReferralsProgress, error) {
	if err := prpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, prpc.sqlSave, prpc.mutation, prpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prpc *PromotionReferralsProgressCreate) SaveX(ctx context.Context) *PromotionReferralsProgress {
	v, err := prpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prpc *PromotionReferralsProgressCreate) Exec(ctx context.Context) error {
	_, err := prpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prpc *PromotionReferralsProgressCreate) ExecX(ctx context.Context) {
	if err := prpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prpc *PromotionReferralsProgressCreate) defaults() error {
	if _, ok := prpc.mutation.CreatedAt(); !ok {
		if promotionreferralsprogress.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferralsprogress.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferralsprogress.DefaultCreatedAt()
		prpc.mutation.SetCreatedAt(v)
	}
	if _, ok := prpc.mutation.UpdatedAt(); !ok {
		if promotionreferralsprogress.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferralsprogress.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferralsprogress.DefaultUpdatedAt()
		prpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := prpc.mutation.Status(); !ok {
		v := promotionreferralsprogress.DefaultStatus
		prpc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (prpc *PromotionReferralsProgressCreate) check() error {
	if _, ok := prpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionReferralsProgress.created_at"`)}
	}
	if _, ok := prpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionReferralsProgress.updated_at"`)}
	}
	if _, ok := prpc.mutation.ReferredMemberID(); !ok {
		return &ValidationError{Name: "referred_member_id", err: errors.New(`ent: missing required field "PromotionReferralsProgress.referred_member_id"`)}
	}
	if _, ok := prpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PromotionReferralsProgress.status"`)}
	}
	return nil
}

func (prpc *PromotionReferralsProgressCreate) sqlSave(ctx context.Context) (*PromotionReferralsProgress, error) {
	if err := prpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	prpc.mutation.id = &_node.ID
	prpc.mutation.done = true
	return _node, nil
}

func (prpc *PromotionReferralsProgressCreate) createSpec() (*PromotionReferralsProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionReferralsProgress{config: prpc.config}
		_spec = sqlgraph.NewCreateSpec(promotionreferralsprogress.Table, sqlgraph.NewFieldSpec(promotionreferralsprogress.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = prpc.conflict
	if value, ok := prpc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionreferralsprogress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prpc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferralsprogress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := prpc.mutation.Creator(); ok {
		_spec.SetField(promotionreferralsprogress.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := prpc.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferralsprogress.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := prpc.mutation.Remark(); ok {
		_spec.SetField(promotionreferralsprogress.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := prpc.mutation.ReferringMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferringMemberID, field.TypeUint64, value)
		_node.ReferringMemberID = &value
	}
	if value, ok := prpc.mutation.ReferredMemberID(); ok {
		_spec.SetField(promotionreferralsprogress.FieldReferredMemberID, field.TypeUint64, value)
		_node.ReferredMemberID = value
	}
	if value, ok := prpc.mutation.Name(); ok {
		_spec.SetField(promotionreferralsprogress.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := prpc.mutation.Status(); ok {
		_spec.SetField(promotionreferralsprogress.FieldStatus, field.TypeUint8, value)
		_node.Status = &value
	}
	if nodes := prpc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionreferralsprogress.RiderTable,
			Columns: []string{promotionreferralsprogress.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionReferralsProgress.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionReferralsProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (prpc *PromotionReferralsProgressCreate) OnConflict(opts ...sql.ConflictOption) *PromotionReferralsProgressUpsertOne {
	prpc.conflict = opts
	return &PromotionReferralsProgressUpsertOne{
		create: prpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prpc *PromotionReferralsProgressCreate) OnConflictColumns(columns ...string) *PromotionReferralsProgressUpsertOne {
	prpc.conflict = append(prpc.conflict, sql.ConflictColumns(columns...))
	return &PromotionReferralsProgressUpsertOne{
		create: prpc,
	}
}

type (
	// PromotionReferralsProgressUpsertOne is the builder for "upsert"-ing
	//  one PromotionReferralsProgress node.
	PromotionReferralsProgressUpsertOne struct {
		create *PromotionReferralsProgressCreate
	}

	// PromotionReferralsProgressUpsert is the "OnConflict" setter.
	PromotionReferralsProgressUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsProgressUpsert) SetUpdatedAt(v time.Time) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateUpdatedAt() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsProgressUpsert) SetLastModifier(v *model.Modifier) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateLastModifier() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsProgressUpsert) ClearLastModifier() *PromotionReferralsProgressUpsert {
	u.SetNull(promotionreferralsprogress.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsProgressUpsert) SetRemark(v string) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateRemark() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsProgressUpsert) ClearRemark() *PromotionReferralsProgressUpsert {
	u.SetNull(promotionreferralsprogress.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsProgressUpsert) SetRiderID(v uint64) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateRiderID() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsProgressUpsert) ClearRiderID() *PromotionReferralsProgressUpsert {
	u.SetNull(promotionreferralsprogress.FieldRiderID)
	return u
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsert) SetReferringMemberID(v uint64) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldReferringMemberID, v)
	return u
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateReferringMemberID() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldReferringMemberID)
	return u
}

// AddReferringMemberID adds v to the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsert) AddReferringMemberID(v uint64) *PromotionReferralsProgressUpsert {
	u.Add(promotionreferralsprogress.FieldReferringMemberID, v)
	return u
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsert) ClearReferringMemberID() *PromotionReferralsProgressUpsert {
	u.SetNull(promotionreferralsprogress.FieldReferringMemberID)
	return u
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsert) SetReferredMemberID(v uint64) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldReferredMemberID, v)
	return u
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateReferredMemberID() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldReferredMemberID)
	return u
}

// AddReferredMemberID adds v to the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsert) AddReferredMemberID(v uint64) *PromotionReferralsProgressUpsert {
	u.Add(promotionreferralsprogress.FieldReferredMemberID, v)
	return u
}

// SetName sets the "name" field.
func (u *PromotionReferralsProgressUpsert) SetName(v string) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateName() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PromotionReferralsProgressUpsert) ClearName() *PromotionReferralsProgressUpsert {
	u.SetNull(promotionreferralsprogress.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *PromotionReferralsProgressUpsert) SetStatus(v uint8) *PromotionReferralsProgressUpsert {
	u.Set(promotionreferralsprogress.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsert) UpdateStatus() *PromotionReferralsProgressUpsert {
	u.SetExcluded(promotionreferralsprogress.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *PromotionReferralsProgressUpsert) AddStatus(v uint8) *PromotionReferralsProgressUpsert {
	u.Add(promotionreferralsprogress.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionReferralsProgressUpsertOne) UpdateNewValues() *PromotionReferralsProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionreferralsprogress.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionreferralsprogress.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionReferralsProgressUpsertOne) Ignore() *PromotionReferralsProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionReferralsProgressUpsertOne) DoNothing() *PromotionReferralsProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionReferralsProgressCreate.OnConflict
// documentation for more info.
func (u *PromotionReferralsProgressUpsertOne) Update(set func(*PromotionReferralsProgressUpsert)) *PromotionReferralsProgressUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionReferralsProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsProgressUpsertOne) SetUpdatedAt(v time.Time) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateUpdatedAt() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsProgressUpsertOne) SetLastModifier(v *model.Modifier) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateLastModifier() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsProgressUpsertOne) ClearLastModifier() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsProgressUpsertOne) SetRemark(v string) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateRemark() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsProgressUpsertOne) ClearRemark() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsProgressUpsertOne) SetRiderID(v uint64) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateRiderID() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsProgressUpsertOne) ClearRiderID() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearRiderID()
	})
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertOne) SetReferringMemberID(v uint64) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetReferringMemberID(v)
	})
}

// AddReferringMemberID adds v to the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertOne) AddReferringMemberID(v uint64) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddReferringMemberID(v)
	})
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateReferringMemberID() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateReferringMemberID()
	})
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertOne) ClearReferringMemberID() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearReferringMemberID()
	})
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsertOne) SetReferredMemberID(v uint64) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetReferredMemberID(v)
	})
}

// AddReferredMemberID adds v to the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsertOne) AddReferredMemberID(v uint64) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddReferredMemberID(v)
	})
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateReferredMemberID() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateReferredMemberID()
	})
}

// SetName sets the "name" field.
func (u *PromotionReferralsProgressUpsertOne) SetName(v string) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateName() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PromotionReferralsProgressUpsertOne) ClearName() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionReferralsProgressUpsertOne) SetStatus(v uint8) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionReferralsProgressUpsertOne) AddStatus(v uint8) *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertOne) UpdateStatus() *PromotionReferralsProgressUpsertOne {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PromotionReferralsProgressUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionReferralsProgressCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionReferralsProgressUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionReferralsProgressUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionReferralsProgressUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionReferralsProgressCreateBulk is the builder for creating many PromotionReferralsProgress entities in bulk.
type PromotionReferralsProgressCreateBulk struct {
	config
	builders []*PromotionReferralsProgressCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionReferralsProgress entities in the database.
func (prpcb *PromotionReferralsProgressCreateBulk) Save(ctx context.Context) ([]*PromotionReferralsProgress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prpcb.builders))
	nodes := make([]*PromotionReferralsProgress, len(prpcb.builders))
	mutators := make([]Mutator, len(prpcb.builders))
	for i := range prpcb.builders {
		func(i int, root context.Context) {
			builder := prpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionReferralsProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = prpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prpcb *PromotionReferralsProgressCreateBulk) SaveX(ctx context.Context) []*PromotionReferralsProgress {
	v, err := prpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prpcb *PromotionReferralsProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := prpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prpcb *PromotionReferralsProgressCreateBulk) ExecX(ctx context.Context) {
	if err := prpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionReferralsProgress.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionReferralsProgressUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (prpcb *PromotionReferralsProgressCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionReferralsProgressUpsertBulk {
	prpcb.conflict = opts
	return &PromotionReferralsProgressUpsertBulk{
		create: prpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (prpcb *PromotionReferralsProgressCreateBulk) OnConflictColumns(columns ...string) *PromotionReferralsProgressUpsertBulk {
	prpcb.conflict = append(prpcb.conflict, sql.ConflictColumns(columns...))
	return &PromotionReferralsProgressUpsertBulk{
		create: prpcb,
	}
}

// PromotionReferralsProgressUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionReferralsProgress nodes.
type PromotionReferralsProgressUpsertBulk struct {
	create *PromotionReferralsProgressCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionReferralsProgressUpsertBulk) UpdateNewValues() *PromotionReferralsProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionreferralsprogress.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionreferralsprogress.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionReferralsProgress.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionReferralsProgressUpsertBulk) Ignore() *PromotionReferralsProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionReferralsProgressUpsertBulk) DoNothing() *PromotionReferralsProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionReferralsProgressCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionReferralsProgressUpsertBulk) Update(set func(*PromotionReferralsProgressUpsert)) *PromotionReferralsProgressUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionReferralsProgressUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionReferralsProgressUpsertBulk) SetUpdatedAt(v time.Time) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateUpdatedAt() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionReferralsProgressUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateLastModifier() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionReferralsProgressUpsertBulk) ClearLastModifier() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionReferralsProgressUpsertBulk) SetRemark(v string) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateRemark() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionReferralsProgressUpsertBulk) ClearRemark() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PromotionReferralsProgressUpsertBulk) SetRiderID(v uint64) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateRiderID() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *PromotionReferralsProgressUpsertBulk) ClearRiderID() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearRiderID()
	})
}

// SetReferringMemberID sets the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertBulk) SetReferringMemberID(v uint64) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetReferringMemberID(v)
	})
}

// AddReferringMemberID adds v to the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertBulk) AddReferringMemberID(v uint64) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddReferringMemberID(v)
	})
}

// UpdateReferringMemberID sets the "referring_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateReferringMemberID() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateReferringMemberID()
	})
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (u *PromotionReferralsProgressUpsertBulk) ClearReferringMemberID() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearReferringMemberID()
	})
}

// SetReferredMemberID sets the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsertBulk) SetReferredMemberID(v uint64) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetReferredMemberID(v)
	})
}

// AddReferredMemberID adds v to the "referred_member_id" field.
func (u *PromotionReferralsProgressUpsertBulk) AddReferredMemberID(v uint64) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddReferredMemberID(v)
	})
}

// UpdateReferredMemberID sets the "referred_member_id" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateReferredMemberID() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateReferredMemberID()
	})
}

// SetName sets the "name" field.
func (u *PromotionReferralsProgressUpsertBulk) SetName(v string) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateName() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PromotionReferralsProgressUpsertBulk) ClearName() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *PromotionReferralsProgressUpsertBulk) SetStatus(v uint8) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *PromotionReferralsProgressUpsertBulk) AddStatus(v uint8) *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PromotionReferralsProgressUpsertBulk) UpdateStatus() *PromotionReferralsProgressUpsertBulk {
	return u.Update(func(s *PromotionReferralsProgressUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *PromotionReferralsProgressUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionReferralsProgressCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionReferralsProgressCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionReferralsProgressUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
