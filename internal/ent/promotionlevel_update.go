// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
)

// PromotionLevelUpdate is the builder for updating PromotionLevel entities.
type PromotionLevelUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionLevelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionLevelUpdate builder.
func (plu *PromotionLevelUpdate) Where(ps ...predicate.PromotionLevel) *PromotionLevelUpdate {
	plu.mutation.Where(ps...)
	return plu
}

// SetUpdatedAt sets the "updated_at" field.
func (plu *PromotionLevelUpdate) SetUpdatedAt(t time.Time) *PromotionLevelUpdate {
	plu.mutation.SetUpdatedAt(t)
	return plu
}

// SetDeletedAt sets the "deleted_at" field.
func (plu *PromotionLevelUpdate) SetDeletedAt(t time.Time) *PromotionLevelUpdate {
	plu.mutation.SetDeletedAt(t)
	return plu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (plu *PromotionLevelUpdate) SetNillableDeletedAt(t *time.Time) *PromotionLevelUpdate {
	if t != nil {
		plu.SetDeletedAt(*t)
	}
	return plu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (plu *PromotionLevelUpdate) ClearDeletedAt() *PromotionLevelUpdate {
	plu.mutation.ClearDeletedAt()
	return plu
}

// SetLastModifier sets the "last_modifier" field.
func (plu *PromotionLevelUpdate) SetLastModifier(m *model.Modifier) *PromotionLevelUpdate {
	plu.mutation.SetLastModifier(m)
	return plu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (plu *PromotionLevelUpdate) ClearLastModifier() *PromotionLevelUpdate {
	plu.mutation.ClearLastModifier()
	return plu
}

// SetRemark sets the "remark" field.
func (plu *PromotionLevelUpdate) SetRemark(s string) *PromotionLevelUpdate {
	plu.mutation.SetRemark(s)
	return plu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (plu *PromotionLevelUpdate) SetNillableRemark(s *string) *PromotionLevelUpdate {
	if s != nil {
		plu.SetRemark(*s)
	}
	return plu
}

// ClearRemark clears the value of the "remark" field.
func (plu *PromotionLevelUpdate) ClearRemark() *PromotionLevelUpdate {
	plu.mutation.ClearRemark()
	return plu
}

// SetLevel sets the "level" field.
func (plu *PromotionLevelUpdate) SetLevel(u uint64) *PromotionLevelUpdate {
	plu.mutation.ResetLevel()
	plu.mutation.SetLevel(u)
	return plu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (plu *PromotionLevelUpdate) SetNillableLevel(u *uint64) *PromotionLevelUpdate {
	if u != nil {
		plu.SetLevel(*u)
	}
	return plu
}

// AddLevel adds u to the "level" field.
func (plu *PromotionLevelUpdate) AddLevel(u int64) *PromotionLevelUpdate {
	plu.mutation.AddLevel(u)
	return plu
}

// SetGrowthValue sets the "growth_value" field.
func (plu *PromotionLevelUpdate) SetGrowthValue(u uint64) *PromotionLevelUpdate {
	plu.mutation.ResetGrowthValue()
	plu.mutation.SetGrowthValue(u)
	return plu
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (plu *PromotionLevelUpdate) SetNillableGrowthValue(u *uint64) *PromotionLevelUpdate {
	if u != nil {
		plu.SetGrowthValue(*u)
	}
	return plu
}

// AddGrowthValue adds u to the "growth_value" field.
func (plu *PromotionLevelUpdate) AddGrowthValue(u int64) *PromotionLevelUpdate {
	plu.mutation.AddGrowthValue(u)
	return plu
}

// SetCommissionRatio sets the "commission_ratio" field.
func (plu *PromotionLevelUpdate) SetCommissionRatio(f float64) *PromotionLevelUpdate {
	plu.mutation.ResetCommissionRatio()
	plu.mutation.SetCommissionRatio(f)
	return plu
}

// SetNillableCommissionRatio sets the "commission_ratio" field if the given value is not nil.
func (plu *PromotionLevelUpdate) SetNillableCommissionRatio(f *float64) *PromotionLevelUpdate {
	if f != nil {
		plu.SetCommissionRatio(*f)
	}
	return plu
}

// AddCommissionRatio adds f to the "commission_ratio" field.
func (plu *PromotionLevelUpdate) AddCommissionRatio(f float64) *PromotionLevelUpdate {
	plu.mutation.AddCommissionRatio(f)
	return plu
}

// Mutation returns the PromotionLevelMutation object of the builder.
func (plu *PromotionLevelUpdate) Mutation() *PromotionLevelMutation {
	return plu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *PromotionLevelUpdate) Save(ctx context.Context) (int, error) {
	if err := plu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, plu.sqlSave, plu.mutation, plu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (plu *PromotionLevelUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *PromotionLevelUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *PromotionLevelUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plu *PromotionLevelUpdate) defaults() error {
	if _, ok := plu.mutation.UpdatedAt(); !ok {
		if promotionlevel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionlevel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionlevel.UpdateDefaultUpdatedAt()
		plu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (plu *PromotionLevelUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionLevelUpdate {
	plu.modifiers = append(plu.modifiers, modifiers...)
	return plu
}

func (plu *PromotionLevelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionlevel.Table, promotionlevel.Columns, sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64))
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionlevel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := plu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionlevel.FieldDeletedAt, field.TypeTime, value)
	}
	if plu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionlevel.FieldDeletedAt, field.TypeTime)
	}
	if plu.mutation.CreatorCleared() {
		_spec.ClearField(promotionlevel.FieldCreator, field.TypeJSON)
	}
	if value, ok := plu.mutation.LastModifier(); ok {
		_spec.SetField(promotionlevel.FieldLastModifier, field.TypeJSON, value)
	}
	if plu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionlevel.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := plu.mutation.Remark(); ok {
		_spec.SetField(promotionlevel.FieldRemark, field.TypeString, value)
	}
	if plu.mutation.RemarkCleared() {
		_spec.ClearField(promotionlevel.FieldRemark, field.TypeString)
	}
	if value, ok := plu.mutation.Level(); ok {
		_spec.SetField(promotionlevel.FieldLevel, field.TypeUint64, value)
	}
	if value, ok := plu.mutation.AddedLevel(); ok {
		_spec.AddField(promotionlevel.FieldLevel, field.TypeUint64, value)
	}
	if value, ok := plu.mutation.GrowthValue(); ok {
		_spec.SetField(promotionlevel.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := plu.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotionlevel.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := plu.mutation.CommissionRatio(); ok {
		_spec.SetField(promotionlevel.FieldCommissionRatio, field.TypeFloat64, value)
	}
	if value, ok := plu.mutation.AddedCommissionRatio(); ok {
		_spec.AddField(promotionlevel.FieldCommissionRatio, field.TypeFloat64, value)
	}
	_spec.AddModifiers(plu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	plu.mutation.done = true
	return n, nil
}

// PromotionLevelUpdateOne is the builder for updating a single PromotionLevel entity.
type PromotionLevelUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionLevelMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pluo *PromotionLevelUpdateOne) SetUpdatedAt(t time.Time) *PromotionLevelUpdateOne {
	pluo.mutation.SetUpdatedAt(t)
	return pluo
}

// SetDeletedAt sets the "deleted_at" field.
func (pluo *PromotionLevelUpdateOne) SetDeletedAt(t time.Time) *PromotionLevelUpdateOne {
	pluo.mutation.SetDeletedAt(t)
	return pluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pluo *PromotionLevelUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionLevelUpdateOne {
	if t != nil {
		pluo.SetDeletedAt(*t)
	}
	return pluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pluo *PromotionLevelUpdateOne) ClearDeletedAt() *PromotionLevelUpdateOne {
	pluo.mutation.ClearDeletedAt()
	return pluo
}

// SetLastModifier sets the "last_modifier" field.
func (pluo *PromotionLevelUpdateOne) SetLastModifier(m *model.Modifier) *PromotionLevelUpdateOne {
	pluo.mutation.SetLastModifier(m)
	return pluo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pluo *PromotionLevelUpdateOne) ClearLastModifier() *PromotionLevelUpdateOne {
	pluo.mutation.ClearLastModifier()
	return pluo
}

// SetRemark sets the "remark" field.
func (pluo *PromotionLevelUpdateOne) SetRemark(s string) *PromotionLevelUpdateOne {
	pluo.mutation.SetRemark(s)
	return pluo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pluo *PromotionLevelUpdateOne) SetNillableRemark(s *string) *PromotionLevelUpdateOne {
	if s != nil {
		pluo.SetRemark(*s)
	}
	return pluo
}

// ClearRemark clears the value of the "remark" field.
func (pluo *PromotionLevelUpdateOne) ClearRemark() *PromotionLevelUpdateOne {
	pluo.mutation.ClearRemark()
	return pluo
}

// SetLevel sets the "level" field.
func (pluo *PromotionLevelUpdateOne) SetLevel(u uint64) *PromotionLevelUpdateOne {
	pluo.mutation.ResetLevel()
	pluo.mutation.SetLevel(u)
	return pluo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (pluo *PromotionLevelUpdateOne) SetNillableLevel(u *uint64) *PromotionLevelUpdateOne {
	if u != nil {
		pluo.SetLevel(*u)
	}
	return pluo
}

// AddLevel adds u to the "level" field.
func (pluo *PromotionLevelUpdateOne) AddLevel(u int64) *PromotionLevelUpdateOne {
	pluo.mutation.AddLevel(u)
	return pluo
}

// SetGrowthValue sets the "growth_value" field.
func (pluo *PromotionLevelUpdateOne) SetGrowthValue(u uint64) *PromotionLevelUpdateOne {
	pluo.mutation.ResetGrowthValue()
	pluo.mutation.SetGrowthValue(u)
	return pluo
}

// SetNillableGrowthValue sets the "growth_value" field if the given value is not nil.
func (pluo *PromotionLevelUpdateOne) SetNillableGrowthValue(u *uint64) *PromotionLevelUpdateOne {
	if u != nil {
		pluo.SetGrowthValue(*u)
	}
	return pluo
}

// AddGrowthValue adds u to the "growth_value" field.
func (pluo *PromotionLevelUpdateOne) AddGrowthValue(u int64) *PromotionLevelUpdateOne {
	pluo.mutation.AddGrowthValue(u)
	return pluo
}

// SetCommissionRatio sets the "commission_ratio" field.
func (pluo *PromotionLevelUpdateOne) SetCommissionRatio(f float64) *PromotionLevelUpdateOne {
	pluo.mutation.ResetCommissionRatio()
	pluo.mutation.SetCommissionRatio(f)
	return pluo
}

// SetNillableCommissionRatio sets the "commission_ratio" field if the given value is not nil.
func (pluo *PromotionLevelUpdateOne) SetNillableCommissionRatio(f *float64) *PromotionLevelUpdateOne {
	if f != nil {
		pluo.SetCommissionRatio(*f)
	}
	return pluo
}

// AddCommissionRatio adds f to the "commission_ratio" field.
func (pluo *PromotionLevelUpdateOne) AddCommissionRatio(f float64) *PromotionLevelUpdateOne {
	pluo.mutation.AddCommissionRatio(f)
	return pluo
}

// Mutation returns the PromotionLevelMutation object of the builder.
func (pluo *PromotionLevelUpdateOne) Mutation() *PromotionLevelMutation {
	return pluo.mutation
}

// Where appends a list predicates to the PromotionLevelUpdate builder.
func (pluo *PromotionLevelUpdateOne) Where(ps ...predicate.PromotionLevel) *PromotionLevelUpdateOne {
	pluo.mutation.Where(ps...)
	return pluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *PromotionLevelUpdateOne) Select(field string, fields ...string) *PromotionLevelUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated PromotionLevel entity.
func (pluo *PromotionLevelUpdateOne) Save(ctx context.Context) (*PromotionLevel, error) {
	if err := pluo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pluo.sqlSave, pluo.mutation, pluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *PromotionLevelUpdateOne) SaveX(ctx context.Context) *PromotionLevel {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *PromotionLevelUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *PromotionLevelUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pluo *PromotionLevelUpdateOne) defaults() error {
	if _, ok := pluo.mutation.UpdatedAt(); !ok {
		if promotionlevel.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionlevel.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionlevel.UpdateDefaultUpdatedAt()
		pluo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pluo *PromotionLevelUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionLevelUpdateOne {
	pluo.modifiers = append(pluo.modifiers, modifiers...)
	return pluo
}

func (pluo *PromotionLevelUpdateOne) sqlSave(ctx context.Context) (_node *PromotionLevel, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionlevel.Table, promotionlevel.Columns, sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64))
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionLevel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionlevel.FieldID)
		for _, f := range fields {
			if !promotionlevel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionlevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionlevel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pluo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionlevel.FieldDeletedAt, field.TypeTime, value)
	}
	if pluo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionlevel.FieldDeletedAt, field.TypeTime)
	}
	if pluo.mutation.CreatorCleared() {
		_spec.ClearField(promotionlevel.FieldCreator, field.TypeJSON)
	}
	if value, ok := pluo.mutation.LastModifier(); ok {
		_spec.SetField(promotionlevel.FieldLastModifier, field.TypeJSON, value)
	}
	if pluo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionlevel.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pluo.mutation.Remark(); ok {
		_spec.SetField(promotionlevel.FieldRemark, field.TypeString, value)
	}
	if pluo.mutation.RemarkCleared() {
		_spec.ClearField(promotionlevel.FieldRemark, field.TypeString)
	}
	if value, ok := pluo.mutation.Level(); ok {
		_spec.SetField(promotionlevel.FieldLevel, field.TypeUint64, value)
	}
	if value, ok := pluo.mutation.AddedLevel(); ok {
		_spec.AddField(promotionlevel.FieldLevel, field.TypeUint64, value)
	}
	if value, ok := pluo.mutation.GrowthValue(); ok {
		_spec.SetField(promotionlevel.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pluo.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotionlevel.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pluo.mutation.CommissionRatio(); ok {
		_spec.SetField(promotionlevel.FieldCommissionRatio, field.TypeFloat64, value)
	}
	if value, ok := pluo.mutation.AddedCommissionRatio(); ok {
		_spec.AddField(promotionlevel.FieldCommissionRatio, field.TypeFloat64, value)
	}
	_spec.AddModifiers(pluo.modifiers...)
	_node = &PromotionLevel{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionlevel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pluo.mutation.done = true
	return _node, nil
}
