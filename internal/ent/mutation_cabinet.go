// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/cabinet"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// CabinetMutation represents an operation that mutates the Cabinet nodes in the graph.
type CabinetMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	creator             **model.Modifier
	last_modifier       **model.Modifier
	remark              *string
	sn                  *string
	brand               *string
	serial              *string
	name                *string
	doors               *uint
	adddoors            *int
	status              *uint8
	addstatus           *int8
	health              *uint8
	addhealth           *int8
	bin                 *model.CabinetBins
	battery_num         *uint
	addbattery_num      *int
	battery_full_num    *uint
	addbattery_full_num *int
	lng                 *float64
	addlng              *float64
	lat                 *float64
	addlat              *float64
	address             *string
	sim_sn              *string
	sim_date            *time.Time
	transferred         *bool
	clearedFields       map[string]struct{}
	city                *uint64
	clearedcity         bool
	branch              *uint64
	clearedbranch       bool
	bms                 map[uint64]struct{}
	removedbms          map[uint64]struct{}
	clearedbms          bool
	faults              map[uint64]struct{}
	removedfaults       map[uint64]struct{}
	clearedfaults       bool
	exchanges           map[uint64]struct{}
	removedexchanges    map[uint64]struct{}
	clearedexchanges    bool
	stocks              map[uint64]struct{}
	removedstocks       map[uint64]struct{}
	clearedstocks       bool
	done                bool
	oldValue            func(context.Context) (*Cabinet, error)
	predicates          []predicate.Cabinet
}

var _ ent.Mutation = (*CabinetMutation)(nil)

// cabinetOption allows management of the mutation configuration using functional options.
type cabinetOption func(*CabinetMutation)

// newCabinetMutation creates new mutation for the Cabinet entity.
func newCabinetMutation(c config, op Op, opts ...cabinetOption) *CabinetMutation {
	m := &CabinetMutation{
		config:        c,
		op:            op,
		typ:           TypeCabinet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCabinetID sets the ID field of the mutation.
func withCabinetID(id uint64) cabinetOption {
	return func(m *CabinetMutation) {
		var (
			err   error
			once  sync.Once
			value *Cabinet
		)
		m.oldValue = func(ctx context.Context) (*Cabinet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cabinet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCabinet sets the old Cabinet of the mutation.
func withCabinet(node *Cabinet) cabinetOption {
	return func(m *CabinetMutation) {
		m.oldValue = func(context.Context) (*Cabinet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CabinetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CabinetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CabinetMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CabinetMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cabinet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CabinetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CabinetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CabinetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CabinetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CabinetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CabinetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *CabinetMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *CabinetMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *CabinetMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[cabinet.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *CabinetMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *CabinetMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, cabinet.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *CabinetMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *CabinetMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *CabinetMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[cabinet.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *CabinetMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *CabinetMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, cabinet.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *CabinetMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *CabinetMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *CabinetMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[cabinet.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *CabinetMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *CabinetMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, cabinet.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *CabinetMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CabinetMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CabinetMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[cabinet.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CabinetMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CabinetMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, cabinet.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *CabinetMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *CabinetMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldCityID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ClearCityID clears the value of the "city_id" field.
func (m *CabinetMutation) ClearCityID() {
	m.city = nil
	m.clearedFields[cabinet.FieldCityID] = struct{}{}
}

// CityIDCleared returns if the "city_id" field was cleared in this mutation.
func (m *CabinetMutation) CityIDCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldCityID]
	return ok
}

// ResetCityID resets all changes to the "city_id" field.
func (m *CabinetMutation) ResetCityID() {
	m.city = nil
	delete(m.clearedFields, cabinet.FieldCityID)
}

// SetBranchID sets the "branch_id" field.
func (m *CabinetMutation) SetBranchID(u uint64) {
	m.branch = &u
}

// BranchID returns the value of the "branch_id" field in the mutation.
func (m *CabinetMutation) BranchID() (r uint64, exists bool) {
	v := m.branch
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branch_id" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldBranchID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// ClearBranchID clears the value of the "branch_id" field.
func (m *CabinetMutation) ClearBranchID() {
	m.branch = nil
	m.clearedFields[cabinet.FieldBranchID] = struct{}{}
}

// BranchIDCleared returns if the "branch_id" field was cleared in this mutation.
func (m *CabinetMutation) BranchIDCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldBranchID]
	return ok
}

// ResetBranchID resets all changes to the "branch_id" field.
func (m *CabinetMutation) ResetBranchID() {
	m.branch = nil
	delete(m.clearedFields, cabinet.FieldBranchID)
}

// SetSn sets the "sn" field.
func (m *CabinetMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *CabinetMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *CabinetMutation) ResetSn() {
	m.sn = nil
}

// SetBrand sets the "brand" field.
func (m *CabinetMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *CabinetMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ResetBrand resets all changes to the "brand" field.
func (m *CabinetMutation) ResetBrand() {
	m.brand = nil
}

// SetSerial sets the "serial" field.
func (m *CabinetMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *CabinetMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ResetSerial resets all changes to the "serial" field.
func (m *CabinetMutation) ResetSerial() {
	m.serial = nil
}

// SetName sets the "name" field.
func (m *CabinetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CabinetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CabinetMutation) ResetName() {
	m.name = nil
}

// SetDoors sets the "doors" field.
func (m *CabinetMutation) SetDoors(u uint) {
	m.doors = &u
	m.adddoors = nil
}

// Doors returns the value of the "doors" field in the mutation.
func (m *CabinetMutation) Doors() (r uint, exists bool) {
	v := m.doors
	if v == nil {
		return
	}
	return *v, true
}

// OldDoors returns the old "doors" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldDoors(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDoors is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDoors requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoors: %w", err)
	}
	return oldValue.Doors, nil
}

// AddDoors adds u to the "doors" field.
func (m *CabinetMutation) AddDoors(u int) {
	if m.adddoors != nil {
		*m.adddoors += u
	} else {
		m.adddoors = &u
	}
}

// AddedDoors returns the value that was added to the "doors" field in this mutation.
func (m *CabinetMutation) AddedDoors() (r int, exists bool) {
	v := m.adddoors
	if v == nil {
		return
	}
	return *v, true
}

// ResetDoors resets all changes to the "doors" field.
func (m *CabinetMutation) ResetDoors() {
	m.doors = nil
	m.adddoors = nil
}

// SetStatus sets the "status" field.
func (m *CabinetMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *CabinetMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *CabinetMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *CabinetMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *CabinetMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetHealth sets the "health" field.
func (m *CabinetMutation) SetHealth(u uint8) {
	m.health = &u
	m.addhealth = nil
}

// Health returns the value of the "health" field in the mutation.
func (m *CabinetMutation) Health() (r uint8, exists bool) {
	v := m.health
	if v == nil {
		return
	}
	return *v, true
}

// OldHealth returns the old "health" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldHealth(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHealth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHealth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHealth: %w", err)
	}
	return oldValue.Health, nil
}

// AddHealth adds u to the "health" field.
func (m *CabinetMutation) AddHealth(u int8) {
	if m.addhealth != nil {
		*m.addhealth += u
	} else {
		m.addhealth = &u
	}
}

// AddedHealth returns the value that was added to the "health" field in this mutation.
func (m *CabinetMutation) AddedHealth() (r int8, exists bool) {
	v := m.addhealth
	if v == nil {
		return
	}
	return *v, true
}

// ResetHealth resets all changes to the "health" field.
func (m *CabinetMutation) ResetHealth() {
	m.health = nil
	m.addhealth = nil
}

// SetBin sets the "bin" field.
func (m *CabinetMutation) SetBin(mb model.CabinetBins) {
	m.bin = &mb
}

// Bin returns the value of the "bin" field in the mutation.
func (m *CabinetMutation) Bin() (r model.CabinetBins, exists bool) {
	v := m.bin
	if v == nil {
		return
	}
	return *v, true
}

// OldBin returns the old "bin" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldBin(ctx context.Context) (v model.CabinetBins, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBin: %w", err)
	}
	return oldValue.Bin, nil
}

// ClearBin clears the value of the "bin" field.
func (m *CabinetMutation) ClearBin() {
	m.bin = nil
	m.clearedFields[cabinet.FieldBin] = struct{}{}
}

// BinCleared returns if the "bin" field was cleared in this mutation.
func (m *CabinetMutation) BinCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldBin]
	return ok
}

// ResetBin resets all changes to the "bin" field.
func (m *CabinetMutation) ResetBin() {
	m.bin = nil
	delete(m.clearedFields, cabinet.FieldBin)
}

// SetBatteryNum sets the "battery_num" field.
func (m *CabinetMutation) SetBatteryNum(u uint) {
	m.battery_num = &u
	m.addbattery_num = nil
}

// BatteryNum returns the value of the "battery_num" field in the mutation.
func (m *CabinetMutation) BatteryNum() (r uint, exists bool) {
	v := m.battery_num
	if v == nil {
		return
	}
	return *v, true
}

// OldBatteryNum returns the old "battery_num" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldBatteryNum(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatteryNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatteryNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatteryNum: %w", err)
	}
	return oldValue.BatteryNum, nil
}

// AddBatteryNum adds u to the "battery_num" field.
func (m *CabinetMutation) AddBatteryNum(u int) {
	if m.addbattery_num != nil {
		*m.addbattery_num += u
	} else {
		m.addbattery_num = &u
	}
}

// AddedBatteryNum returns the value that was added to the "battery_num" field in this mutation.
func (m *CabinetMutation) AddedBatteryNum() (r int, exists bool) {
	v := m.addbattery_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetBatteryNum resets all changes to the "battery_num" field.
func (m *CabinetMutation) ResetBatteryNum() {
	m.battery_num = nil
	m.addbattery_num = nil
}

// SetBatteryFullNum sets the "battery_full_num" field.
func (m *CabinetMutation) SetBatteryFullNum(u uint) {
	m.battery_full_num = &u
	m.addbattery_full_num = nil
}

// BatteryFullNum returns the value of the "battery_full_num" field in the mutation.
func (m *CabinetMutation) BatteryFullNum() (r uint, exists bool) {
	v := m.battery_full_num
	if v == nil {
		return
	}
	return *v, true
}

// OldBatteryFullNum returns the old "battery_full_num" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldBatteryFullNum(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatteryFullNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatteryFullNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatteryFullNum: %w", err)
	}
	return oldValue.BatteryFullNum, nil
}

// AddBatteryFullNum adds u to the "battery_full_num" field.
func (m *CabinetMutation) AddBatteryFullNum(u int) {
	if m.addbattery_full_num != nil {
		*m.addbattery_full_num += u
	} else {
		m.addbattery_full_num = &u
	}
}

// AddedBatteryFullNum returns the value that was added to the "battery_full_num" field in this mutation.
func (m *CabinetMutation) AddedBatteryFullNum() (r int, exists bool) {
	v := m.addbattery_full_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetBatteryFullNum resets all changes to the "battery_full_num" field.
func (m *CabinetMutation) ResetBatteryFullNum() {
	m.battery_full_num = nil
	m.addbattery_full_num = nil
}

// SetLng sets the "lng" field.
func (m *CabinetMutation) SetLng(f float64) {
	m.lng = &f
	m.addlng = nil
}

// Lng returns the value of the "lng" field in the mutation.
func (m *CabinetMutation) Lng() (r float64, exists bool) {
	v := m.lng
	if v == nil {
		return
	}
	return *v, true
}

// OldLng returns the old "lng" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldLng(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLng: %w", err)
	}
	return oldValue.Lng, nil
}

// AddLng adds f to the "lng" field.
func (m *CabinetMutation) AddLng(f float64) {
	if m.addlng != nil {
		*m.addlng += f
	} else {
		m.addlng = &f
	}
}

// AddedLng returns the value that was added to the "lng" field in this mutation.
func (m *CabinetMutation) AddedLng() (r float64, exists bool) {
	v := m.addlng
	if v == nil {
		return
	}
	return *v, true
}

// ClearLng clears the value of the "lng" field.
func (m *CabinetMutation) ClearLng() {
	m.lng = nil
	m.addlng = nil
	m.clearedFields[cabinet.FieldLng] = struct{}{}
}

// LngCleared returns if the "lng" field was cleared in this mutation.
func (m *CabinetMutation) LngCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldLng]
	return ok
}

// ResetLng resets all changes to the "lng" field.
func (m *CabinetMutation) ResetLng() {
	m.lng = nil
	m.addlng = nil
	delete(m.clearedFields, cabinet.FieldLng)
}

// SetLat sets the "lat" field.
func (m *CabinetMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *CabinetMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldLat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *CabinetMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *CabinetMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ClearLat clears the value of the "lat" field.
func (m *CabinetMutation) ClearLat() {
	m.lat = nil
	m.addlat = nil
	m.clearedFields[cabinet.FieldLat] = struct{}{}
}

// LatCleared returns if the "lat" field was cleared in this mutation.
func (m *CabinetMutation) LatCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldLat]
	return ok
}

// ResetLat resets all changes to the "lat" field.
func (m *CabinetMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
	delete(m.clearedFields, cabinet.FieldLat)
}

// SetAddress sets the "address" field.
func (m *CabinetMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CabinetMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *CabinetMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[cabinet.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *CabinetMutation) AddressCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *CabinetMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, cabinet.FieldAddress)
}

// SetSimSn sets the "sim_sn" field.
func (m *CabinetMutation) SetSimSn(s string) {
	m.sim_sn = &s
}

// SimSn returns the value of the "sim_sn" field in the mutation.
func (m *CabinetMutation) SimSn() (r string, exists bool) {
	v := m.sim_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSimSn returns the old "sim_sn" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldSimSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimSn: %w", err)
	}
	return oldValue.SimSn, nil
}

// ClearSimSn clears the value of the "sim_sn" field.
func (m *CabinetMutation) ClearSimSn() {
	m.sim_sn = nil
	m.clearedFields[cabinet.FieldSimSn] = struct{}{}
}

// SimSnCleared returns if the "sim_sn" field was cleared in this mutation.
func (m *CabinetMutation) SimSnCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldSimSn]
	return ok
}

// ResetSimSn resets all changes to the "sim_sn" field.
func (m *CabinetMutation) ResetSimSn() {
	m.sim_sn = nil
	delete(m.clearedFields, cabinet.FieldSimSn)
}

// SetSimDate sets the "sim_date" field.
func (m *CabinetMutation) SetSimDate(t time.Time) {
	m.sim_date = &t
}

// SimDate returns the value of the "sim_date" field in the mutation.
func (m *CabinetMutation) SimDate() (r time.Time, exists bool) {
	v := m.sim_date
	if v == nil {
		return
	}
	return *v, true
}

// OldSimDate returns the old "sim_date" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldSimDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSimDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSimDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSimDate: %w", err)
	}
	return oldValue.SimDate, nil
}

// ClearSimDate clears the value of the "sim_date" field.
func (m *CabinetMutation) ClearSimDate() {
	m.sim_date = nil
	m.clearedFields[cabinet.FieldSimDate] = struct{}{}
}

// SimDateCleared returns if the "sim_date" field was cleared in this mutation.
func (m *CabinetMutation) SimDateCleared() bool {
	_, ok := m.clearedFields[cabinet.FieldSimDate]
	return ok
}

// ResetSimDate resets all changes to the "sim_date" field.
func (m *CabinetMutation) ResetSimDate() {
	m.sim_date = nil
	delete(m.clearedFields, cabinet.FieldSimDate)
}

// SetTransferred sets the "transferred" field.
func (m *CabinetMutation) SetTransferred(b bool) {
	m.transferred = &b
}

// Transferred returns the value of the "transferred" field in the mutation.
func (m *CabinetMutation) Transferred() (r bool, exists bool) {
	v := m.transferred
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferred returns the old "transferred" field's value of the Cabinet entity.
// If the Cabinet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CabinetMutation) OldTransferred(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferred is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferred requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferred: %w", err)
	}
	return oldValue.Transferred, nil
}

// ResetTransferred resets all changes to the "transferred" field.
func (m *CabinetMutation) ResetTransferred() {
	m.transferred = nil
}

// ClearCity clears the "city" edge to the City entity.
func (m *CabinetMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *CabinetMutation) CityCleared() bool {
	return m.CityIDCleared() || m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *CabinetMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *CabinetMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (m *CabinetMutation) ClearBranch() {
	m.clearedbranch = true
}

// BranchCleared reports if the "branch" edge to the Branch entity was cleared.
func (m *CabinetMutation) BranchCleared() bool {
	return m.BranchIDCleared() || m.clearedbranch
}

// BranchIDs returns the "branch" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BranchID instead. It exists only for internal usage by the builders.
func (m *CabinetMutation) BranchIDs() (ids []uint64) {
	if id := m.branch; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBranch resets all changes to the "branch" edge.
func (m *CabinetMutation) ResetBranch() {
	m.branch = nil
	m.clearedbranch = false
}

// AddBmIDs adds the "bms" edge to the BatteryModel entity by ids.
func (m *CabinetMutation) AddBmIDs(ids ...uint64) {
	if m.bms == nil {
		m.bms = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bms[ids[i]] = struct{}{}
	}
}

// ClearBms clears the "bms" edge to the BatteryModel entity.
func (m *CabinetMutation) ClearBms() {
	m.clearedbms = true
}

// BmsCleared reports if the "bms" edge to the BatteryModel entity was cleared.
func (m *CabinetMutation) BmsCleared() bool {
	return m.clearedbms
}

// RemoveBmIDs removes the "bms" edge to the BatteryModel entity by IDs.
func (m *CabinetMutation) RemoveBmIDs(ids ...uint64) {
	if m.removedbms == nil {
		m.removedbms = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.bms, ids[i])
		m.removedbms[ids[i]] = struct{}{}
	}
}

// RemovedBms returns the removed IDs of the "bms" edge to the BatteryModel entity.
func (m *CabinetMutation) RemovedBmsIDs() (ids []uint64) {
	for id := range m.removedbms {
		ids = append(ids, id)
	}
	return
}

// BmsIDs returns the "bms" edge IDs in the mutation.
func (m *CabinetMutation) BmsIDs() (ids []uint64) {
	for id := range m.bms {
		ids = append(ids, id)
	}
	return
}

// ResetBms resets all changes to the "bms" edge.
func (m *CabinetMutation) ResetBms() {
	m.bms = nil
	m.clearedbms = false
	m.removedbms = nil
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by ids.
func (m *CabinetMutation) AddFaultIDs(ids ...uint64) {
	if m.faults == nil {
		m.faults = make(map[uint64]struct{})
	}
	for i := range ids {
		m.faults[ids[i]] = struct{}{}
	}
}

// ClearFaults clears the "faults" edge to the CabinetFault entity.
func (m *CabinetMutation) ClearFaults() {
	m.clearedfaults = true
}

// FaultsCleared reports if the "faults" edge to the CabinetFault entity was cleared.
func (m *CabinetMutation) FaultsCleared() bool {
	return m.clearedfaults
}

// RemoveFaultIDs removes the "faults" edge to the CabinetFault entity by IDs.
func (m *CabinetMutation) RemoveFaultIDs(ids ...uint64) {
	if m.removedfaults == nil {
		m.removedfaults = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.faults, ids[i])
		m.removedfaults[ids[i]] = struct{}{}
	}
}

// RemovedFaults returns the removed IDs of the "faults" edge to the CabinetFault entity.
func (m *CabinetMutation) RemovedFaultsIDs() (ids []uint64) {
	for id := range m.removedfaults {
		ids = append(ids, id)
	}
	return
}

// FaultsIDs returns the "faults" edge IDs in the mutation.
func (m *CabinetMutation) FaultsIDs() (ids []uint64) {
	for id := range m.faults {
		ids = append(ids, id)
	}
	return
}

// ResetFaults resets all changes to the "faults" edge.
func (m *CabinetMutation) ResetFaults() {
	m.faults = nil
	m.clearedfaults = false
	m.removedfaults = nil
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by ids.
func (m *CabinetMutation) AddExchangeIDs(ids ...uint64) {
	if m.exchanges == nil {
		m.exchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		m.exchanges[ids[i]] = struct{}{}
	}
}

// ClearExchanges clears the "exchanges" edge to the Exchange entity.
func (m *CabinetMutation) ClearExchanges() {
	m.clearedexchanges = true
}

// ExchangesCleared reports if the "exchanges" edge to the Exchange entity was cleared.
func (m *CabinetMutation) ExchangesCleared() bool {
	return m.clearedexchanges
}

// RemoveExchangeIDs removes the "exchanges" edge to the Exchange entity by IDs.
func (m *CabinetMutation) RemoveExchangeIDs(ids ...uint64) {
	if m.removedexchanges == nil {
		m.removedexchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.exchanges, ids[i])
		m.removedexchanges[ids[i]] = struct{}{}
	}
}

// RemovedExchanges returns the removed IDs of the "exchanges" edge to the Exchange entity.
func (m *CabinetMutation) RemovedExchangesIDs() (ids []uint64) {
	for id := range m.removedexchanges {
		ids = append(ids, id)
	}
	return
}

// ExchangesIDs returns the "exchanges" edge IDs in the mutation.
func (m *CabinetMutation) ExchangesIDs() (ids []uint64) {
	for id := range m.exchanges {
		ids = append(ids, id)
	}
	return
}

// ResetExchanges resets all changes to the "exchanges" edge.
func (m *CabinetMutation) ResetExchanges() {
	m.exchanges = nil
	m.clearedexchanges = false
	m.removedexchanges = nil
}

// AddStockIDs adds the "stocks" edge to the Stock entity by ids.
func (m *CabinetMutation) AddStockIDs(ids ...uint64) {
	if m.stocks == nil {
		m.stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.stocks[ids[i]] = struct{}{}
	}
}

// ClearStocks clears the "stocks" edge to the Stock entity.
func (m *CabinetMutation) ClearStocks() {
	m.clearedstocks = true
}

// StocksCleared reports if the "stocks" edge to the Stock entity was cleared.
func (m *CabinetMutation) StocksCleared() bool {
	return m.clearedstocks
}

// RemoveStockIDs removes the "stocks" edge to the Stock entity by IDs.
func (m *CabinetMutation) RemoveStockIDs(ids ...uint64) {
	if m.removedstocks == nil {
		m.removedstocks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.stocks, ids[i])
		m.removedstocks[ids[i]] = struct{}{}
	}
}

// RemovedStocks returns the removed IDs of the "stocks" edge to the Stock entity.
func (m *CabinetMutation) RemovedStocksIDs() (ids []uint64) {
	for id := range m.removedstocks {
		ids = append(ids, id)
	}
	return
}

// StocksIDs returns the "stocks" edge IDs in the mutation.
func (m *CabinetMutation) StocksIDs() (ids []uint64) {
	for id := range m.stocks {
		ids = append(ids, id)
	}
	return
}

// ResetStocks resets all changes to the "stocks" edge.
func (m *CabinetMutation) ResetStocks() {
	m.stocks = nil
	m.clearedstocks = false
	m.removedstocks = nil
}

// Where appends a list predicates to the CabinetMutation builder.
func (m *CabinetMutation) Where(ps ...predicate.Cabinet) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CabinetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Cabinet).
func (m *CabinetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CabinetMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.created_at != nil {
		fields = append(fields, cabinet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cabinet.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, cabinet.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, cabinet.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, cabinet.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, cabinet.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, cabinet.FieldCityID)
	}
	if m.branch != nil {
		fields = append(fields, cabinet.FieldBranchID)
	}
	if m.sn != nil {
		fields = append(fields, cabinet.FieldSn)
	}
	if m.brand != nil {
		fields = append(fields, cabinet.FieldBrand)
	}
	if m.serial != nil {
		fields = append(fields, cabinet.FieldSerial)
	}
	if m.name != nil {
		fields = append(fields, cabinet.FieldName)
	}
	if m.doors != nil {
		fields = append(fields, cabinet.FieldDoors)
	}
	if m.status != nil {
		fields = append(fields, cabinet.FieldStatus)
	}
	if m.health != nil {
		fields = append(fields, cabinet.FieldHealth)
	}
	if m.bin != nil {
		fields = append(fields, cabinet.FieldBin)
	}
	if m.battery_num != nil {
		fields = append(fields, cabinet.FieldBatteryNum)
	}
	if m.battery_full_num != nil {
		fields = append(fields, cabinet.FieldBatteryFullNum)
	}
	if m.lng != nil {
		fields = append(fields, cabinet.FieldLng)
	}
	if m.lat != nil {
		fields = append(fields, cabinet.FieldLat)
	}
	if m.address != nil {
		fields = append(fields, cabinet.FieldAddress)
	}
	if m.sim_sn != nil {
		fields = append(fields, cabinet.FieldSimSn)
	}
	if m.sim_date != nil {
		fields = append(fields, cabinet.FieldSimDate)
	}
	if m.transferred != nil {
		fields = append(fields, cabinet.FieldTransferred)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CabinetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cabinet.FieldCreatedAt:
		return m.CreatedAt()
	case cabinet.FieldUpdatedAt:
		return m.UpdatedAt()
	case cabinet.FieldDeletedAt:
		return m.DeletedAt()
	case cabinet.FieldCreator:
		return m.Creator()
	case cabinet.FieldLastModifier:
		return m.LastModifier()
	case cabinet.FieldRemark:
		return m.Remark()
	case cabinet.FieldCityID:
		return m.CityID()
	case cabinet.FieldBranchID:
		return m.BranchID()
	case cabinet.FieldSn:
		return m.Sn()
	case cabinet.FieldBrand:
		return m.Brand()
	case cabinet.FieldSerial:
		return m.Serial()
	case cabinet.FieldName:
		return m.Name()
	case cabinet.FieldDoors:
		return m.Doors()
	case cabinet.FieldStatus:
		return m.Status()
	case cabinet.FieldHealth:
		return m.Health()
	case cabinet.FieldBin:
		return m.Bin()
	case cabinet.FieldBatteryNum:
		return m.BatteryNum()
	case cabinet.FieldBatteryFullNum:
		return m.BatteryFullNum()
	case cabinet.FieldLng:
		return m.Lng()
	case cabinet.FieldLat:
		return m.Lat()
	case cabinet.FieldAddress:
		return m.Address()
	case cabinet.FieldSimSn:
		return m.SimSn()
	case cabinet.FieldSimDate:
		return m.SimDate()
	case cabinet.FieldTransferred:
		return m.Transferred()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CabinetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cabinet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cabinet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cabinet.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case cabinet.FieldCreator:
		return m.OldCreator(ctx)
	case cabinet.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case cabinet.FieldRemark:
		return m.OldRemark(ctx)
	case cabinet.FieldCityID:
		return m.OldCityID(ctx)
	case cabinet.FieldBranchID:
		return m.OldBranchID(ctx)
	case cabinet.FieldSn:
		return m.OldSn(ctx)
	case cabinet.FieldBrand:
		return m.OldBrand(ctx)
	case cabinet.FieldSerial:
		return m.OldSerial(ctx)
	case cabinet.FieldName:
		return m.OldName(ctx)
	case cabinet.FieldDoors:
		return m.OldDoors(ctx)
	case cabinet.FieldStatus:
		return m.OldStatus(ctx)
	case cabinet.FieldHealth:
		return m.OldHealth(ctx)
	case cabinet.FieldBin:
		return m.OldBin(ctx)
	case cabinet.FieldBatteryNum:
		return m.OldBatteryNum(ctx)
	case cabinet.FieldBatteryFullNum:
		return m.OldBatteryFullNum(ctx)
	case cabinet.FieldLng:
		return m.OldLng(ctx)
	case cabinet.FieldLat:
		return m.OldLat(ctx)
	case cabinet.FieldAddress:
		return m.OldAddress(ctx)
	case cabinet.FieldSimSn:
		return m.OldSimSn(ctx)
	case cabinet.FieldSimDate:
		return m.OldSimDate(ctx)
	case cabinet.FieldTransferred:
		return m.OldTransferred(ctx)
	}
	return nil, fmt.Errorf("unknown Cabinet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CabinetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cabinet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cabinet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cabinet.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case cabinet.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case cabinet.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case cabinet.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case cabinet.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case cabinet.FieldBranchID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case cabinet.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case cabinet.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case cabinet.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	case cabinet.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case cabinet.FieldDoors:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoors(v)
		return nil
	case cabinet.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case cabinet.FieldHealth:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHealth(v)
		return nil
	case cabinet.FieldBin:
		v, ok := value.(model.CabinetBins)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBin(v)
		return nil
	case cabinet.FieldBatteryNum:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatteryNum(v)
		return nil
	case cabinet.FieldBatteryFullNum:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatteryFullNum(v)
		return nil
	case cabinet.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLng(v)
		return nil
	case cabinet.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case cabinet.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case cabinet.FieldSimSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimSn(v)
		return nil
	case cabinet.FieldSimDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSimDate(v)
		return nil
	case cabinet.FieldTransferred:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferred(v)
		return nil
	}
	return fmt.Errorf("unknown Cabinet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CabinetMutation) AddedFields() []string {
	var fields []string
	if m.adddoors != nil {
		fields = append(fields, cabinet.FieldDoors)
	}
	if m.addstatus != nil {
		fields = append(fields, cabinet.FieldStatus)
	}
	if m.addhealth != nil {
		fields = append(fields, cabinet.FieldHealth)
	}
	if m.addbattery_num != nil {
		fields = append(fields, cabinet.FieldBatteryNum)
	}
	if m.addbattery_full_num != nil {
		fields = append(fields, cabinet.FieldBatteryFullNum)
	}
	if m.addlng != nil {
		fields = append(fields, cabinet.FieldLng)
	}
	if m.addlat != nil {
		fields = append(fields, cabinet.FieldLat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CabinetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cabinet.FieldDoors:
		return m.AddedDoors()
	case cabinet.FieldStatus:
		return m.AddedStatus()
	case cabinet.FieldHealth:
		return m.AddedHealth()
	case cabinet.FieldBatteryNum:
		return m.AddedBatteryNum()
	case cabinet.FieldBatteryFullNum:
		return m.AddedBatteryFullNum()
	case cabinet.FieldLng:
		return m.AddedLng()
	case cabinet.FieldLat:
		return m.AddedLat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CabinetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cabinet.FieldDoors:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDoors(v)
		return nil
	case cabinet.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case cabinet.FieldHealth:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHealth(v)
		return nil
	case cabinet.FieldBatteryNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBatteryNum(v)
		return nil
	case cabinet.FieldBatteryFullNum:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBatteryFullNum(v)
		return nil
	case cabinet.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLng(v)
		return nil
	case cabinet.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	}
	return fmt.Errorf("unknown Cabinet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CabinetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cabinet.FieldDeletedAt) {
		fields = append(fields, cabinet.FieldDeletedAt)
	}
	if m.FieldCleared(cabinet.FieldCreator) {
		fields = append(fields, cabinet.FieldCreator)
	}
	if m.FieldCleared(cabinet.FieldLastModifier) {
		fields = append(fields, cabinet.FieldLastModifier)
	}
	if m.FieldCleared(cabinet.FieldRemark) {
		fields = append(fields, cabinet.FieldRemark)
	}
	if m.FieldCleared(cabinet.FieldCityID) {
		fields = append(fields, cabinet.FieldCityID)
	}
	if m.FieldCleared(cabinet.FieldBranchID) {
		fields = append(fields, cabinet.FieldBranchID)
	}
	if m.FieldCleared(cabinet.FieldBin) {
		fields = append(fields, cabinet.FieldBin)
	}
	if m.FieldCleared(cabinet.FieldLng) {
		fields = append(fields, cabinet.FieldLng)
	}
	if m.FieldCleared(cabinet.FieldLat) {
		fields = append(fields, cabinet.FieldLat)
	}
	if m.FieldCleared(cabinet.FieldAddress) {
		fields = append(fields, cabinet.FieldAddress)
	}
	if m.FieldCleared(cabinet.FieldSimSn) {
		fields = append(fields, cabinet.FieldSimSn)
	}
	if m.FieldCleared(cabinet.FieldSimDate) {
		fields = append(fields, cabinet.FieldSimDate)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CabinetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CabinetMutation) ClearField(name string) error {
	switch name {
	case cabinet.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case cabinet.FieldCreator:
		m.ClearCreator()
		return nil
	case cabinet.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case cabinet.FieldRemark:
		m.ClearRemark()
		return nil
	case cabinet.FieldCityID:
		m.ClearCityID()
		return nil
	case cabinet.FieldBranchID:
		m.ClearBranchID()
		return nil
	case cabinet.FieldBin:
		m.ClearBin()
		return nil
	case cabinet.FieldLng:
		m.ClearLng()
		return nil
	case cabinet.FieldLat:
		m.ClearLat()
		return nil
	case cabinet.FieldAddress:
		m.ClearAddress()
		return nil
	case cabinet.FieldSimSn:
		m.ClearSimSn()
		return nil
	case cabinet.FieldSimDate:
		m.ClearSimDate()
		return nil
	}
	return fmt.Errorf("unknown Cabinet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CabinetMutation) ResetField(name string) error {
	switch name {
	case cabinet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cabinet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cabinet.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case cabinet.FieldCreator:
		m.ResetCreator()
		return nil
	case cabinet.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case cabinet.FieldRemark:
		m.ResetRemark()
		return nil
	case cabinet.FieldCityID:
		m.ResetCityID()
		return nil
	case cabinet.FieldBranchID:
		m.ResetBranchID()
		return nil
	case cabinet.FieldSn:
		m.ResetSn()
		return nil
	case cabinet.FieldBrand:
		m.ResetBrand()
		return nil
	case cabinet.FieldSerial:
		m.ResetSerial()
		return nil
	case cabinet.FieldName:
		m.ResetName()
		return nil
	case cabinet.FieldDoors:
		m.ResetDoors()
		return nil
	case cabinet.FieldStatus:
		m.ResetStatus()
		return nil
	case cabinet.FieldHealth:
		m.ResetHealth()
		return nil
	case cabinet.FieldBin:
		m.ResetBin()
		return nil
	case cabinet.FieldBatteryNum:
		m.ResetBatteryNum()
		return nil
	case cabinet.FieldBatteryFullNum:
		m.ResetBatteryFullNum()
		return nil
	case cabinet.FieldLng:
		m.ResetLng()
		return nil
	case cabinet.FieldLat:
		m.ResetLat()
		return nil
	case cabinet.FieldAddress:
		m.ResetAddress()
		return nil
	case cabinet.FieldSimSn:
		m.ResetSimSn()
		return nil
	case cabinet.FieldSimDate:
		m.ResetSimDate()
		return nil
	case cabinet.FieldTransferred:
		m.ResetTransferred()
		return nil
	}
	return fmt.Errorf("unknown Cabinet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CabinetMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.city != nil {
		edges = append(edges, cabinet.EdgeCity)
	}
	if m.branch != nil {
		edges = append(edges, cabinet.EdgeBranch)
	}
	if m.bms != nil {
		edges = append(edges, cabinet.EdgeBms)
	}
	if m.faults != nil {
		edges = append(edges, cabinet.EdgeFaults)
	}
	if m.exchanges != nil {
		edges = append(edges, cabinet.EdgeExchanges)
	}
	if m.stocks != nil {
		edges = append(edges, cabinet.EdgeStocks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CabinetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cabinet.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case cabinet.EdgeBranch:
		if id := m.branch; id != nil {
			return []ent.Value{*id}
		}
	case cabinet.EdgeBms:
		ids := make([]ent.Value, 0, len(m.bms))
		for id := range m.bms {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeFaults:
		ids := make([]ent.Value, 0, len(m.faults))
		for id := range m.faults {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.exchanges))
		for id := range m.exchanges {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.stocks))
		for id := range m.stocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CabinetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedbms != nil {
		edges = append(edges, cabinet.EdgeBms)
	}
	if m.removedfaults != nil {
		edges = append(edges, cabinet.EdgeFaults)
	}
	if m.removedexchanges != nil {
		edges = append(edges, cabinet.EdgeExchanges)
	}
	if m.removedstocks != nil {
		edges = append(edges, cabinet.EdgeStocks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CabinetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cabinet.EdgeBms:
		ids := make([]ent.Value, 0, len(m.removedbms))
		for id := range m.removedbms {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeFaults:
		ids := make([]ent.Value, 0, len(m.removedfaults))
		for id := range m.removedfaults {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.removedexchanges))
		for id := range m.removedexchanges {
			ids = append(ids, id)
		}
		return ids
	case cabinet.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.removedstocks))
		for id := range m.removedstocks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CabinetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedcity {
		edges = append(edges, cabinet.EdgeCity)
	}
	if m.clearedbranch {
		edges = append(edges, cabinet.EdgeBranch)
	}
	if m.clearedbms {
		edges = append(edges, cabinet.EdgeBms)
	}
	if m.clearedfaults {
		edges = append(edges, cabinet.EdgeFaults)
	}
	if m.clearedexchanges {
		edges = append(edges, cabinet.EdgeExchanges)
	}
	if m.clearedstocks {
		edges = append(edges, cabinet.EdgeStocks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CabinetMutation) EdgeCleared(name string) bool {
	switch name {
	case cabinet.EdgeCity:
		return m.clearedcity
	case cabinet.EdgeBranch:
		return m.clearedbranch
	case cabinet.EdgeBms:
		return m.clearedbms
	case cabinet.EdgeFaults:
		return m.clearedfaults
	case cabinet.EdgeExchanges:
		return m.clearedexchanges
	case cabinet.EdgeStocks:
		return m.clearedstocks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CabinetMutation) ClearEdge(name string) error {
	switch name {
	case cabinet.EdgeCity:
		m.ClearCity()
		return nil
	case cabinet.EdgeBranch:
		m.ClearBranch()
		return nil
	}
	return fmt.Errorf("unknown Cabinet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CabinetMutation) ResetEdge(name string) error {
	switch name {
	case cabinet.EdgeCity:
		m.ResetCity()
		return nil
	case cabinet.EdgeBranch:
		m.ResetBranch()
		return nil
	case cabinet.EdgeBms:
		m.ResetBms()
		return nil
	case cabinet.EdgeFaults:
		m.ResetFaults()
		return nil
	case cabinet.EdgeExchanges:
		m.ResetExchanges()
		return nil
	case cabinet.EdgeStocks:
		m.ResetStocks()
		return nil
	}
	return fmt.Errorf("unknown Cabinet edge %s", name)
}

