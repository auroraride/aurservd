// Code generated by ent, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBanned holds the string denoting the banned field in the database.
	FieldBanned = "banned"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIDCardNumber holds the string denoting the id_card_number field in the database.
	FieldIDCardNumber = "id_card_number"
	// FieldIDCardType holds the string denoting the id_card_type field in the database.
	FieldIDCardType = "id_card_type"
	// FieldIDCardPortrait holds the string denoting the id_card_portrait field in the database.
	FieldIDCardPortrait = "id_card_portrait"
	// FieldIDCardNational holds the string denoting the id_card_national field in the database.
	FieldIDCardNational = "id_card_national"
	// FieldAuthFace holds the string denoting the auth_face field in the database.
	FieldAuthFace = "auth_face"
	// FieldAuthResult holds the string denoting the auth_result field in the database.
	FieldAuthResult = "auth_result"
	// FieldAuthAt holds the string denoting the auth_at field in the database.
	FieldAuthAt = "auth_at"
	// FieldEsignAccountID holds the string denoting the esign_account_id field in the database.
	FieldEsignAccountID = "esign_account_id"
	// FieldBaiduVerifyToken holds the string denoting the baidu_verify_token field in the database.
	FieldBaiduVerifyToken = "baidu_verify_token"
	// FieldBaiduLogID holds the string denoting the baidu_log_id field in the database.
	FieldBaiduLogID = "baidu_log_id"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// Table holds the table name of the person in the database.
	Table = "person"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "rider"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "person_id"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldStatus,
	FieldBanned,
	FieldName,
	FieldIDCardNumber,
	FieldIDCardType,
	FieldIDCardPortrait,
	FieldIDCardNational,
	FieldAuthFace,
	FieldAuthResult,
	FieldAuthAt,
	FieldEsignAccountID,
	FieldBaiduVerifyToken,
	FieldBaiduLogID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [2]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
	// DefaultBanned holds the default value on creation for the "banned" field.
	DefaultBanned bool
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// IDCardNumberValidator is a validator for the "id_card_number" field. It is called by the builders before save.
	IDCardNumberValidator func(string) error
	// DefaultIDCardType holds the default value on creation for the "id_card_type" field.
	DefaultIDCardType uint8
)

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByBanned orders the results by the banned field.
func ByBanned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanned, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIDCardNumber orders the results by the id_card_number field.
func ByIDCardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNumber, opts...).ToFunc()
}

// ByIDCardType orders the results by the id_card_type field.
func ByIDCardType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardType, opts...).ToFunc()
}

// ByIDCardPortrait orders the results by the id_card_portrait field.
func ByIDCardPortrait(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardPortrait, opts...).ToFunc()
}

// ByIDCardNational orders the results by the id_card_national field.
func ByIDCardNational(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCardNational, opts...).ToFunc()
}

// ByAuthFace orders the results by the auth_face field.
func ByAuthFace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthFace, opts...).ToFunc()
}

// ByAuthAt orders the results by the auth_at field.
func ByAuthAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthAt, opts...).ToFunc()
}

// ByEsignAccountID orders the results by the esign_account_id field.
func ByEsignAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEsignAccountID, opts...).ToFunc()
}

// ByBaiduVerifyToken orders the results by the baidu_verify_token field.
func ByBaiduVerifyToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaiduVerifyToken, opts...).ToFunc()
}

// ByBaiduLogID orders the results by the baidu_log_id field.
func ByBaiduLogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBaiduLogID, opts...).ToFunc()
}

// ByRiderCount orders the results by rider count.
func ByRiderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiderStep(), opts...)
	}
}

// ByRider orders the results by rider terms.
func ByRider(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiderTable, RiderColumn),
	)
}
