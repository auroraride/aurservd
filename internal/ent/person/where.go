// Code generated by entc, DO NOT EDIT.

package person

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// LastModify applies equality check predicate on the "last_modify" field. It's identical to LastModifyEQ.
func LastModify(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModify), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Block applies equality check predicate on the "block" field. It's identical to BlockEQ.
func Block(v bool) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlock), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IcNumber applies equality check predicate on the "ic_number" field. It's identical to IcNumberEQ.
func IcNumber(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcNumber), v))
	})
}

// IcType applies equality check predicate on the "ic_type" field. It's identical to IcTypeEQ.
func IcType(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcType), v))
	})
}

// IcPortrait applies equality check predicate on the "ic_portrait" field. It's identical to IcPortraitEQ.
func IcPortrait(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcPortrait), v))
	})
}

// IcNational applies equality check predicate on the "ic_national" field. It's identical to IcNationalEQ.
func IcNational(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcNational), v))
	})
}

// IcHandheld applies equality check predicate on the "ic_handheld" field. It's identical to IcHandheldEQ.
func IcHandheld(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcHandheld), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// LastModifyEQ applies the EQ predicate on the "last_modify" field.
func LastModifyEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastModify), v))
	})
}

// LastModifyNEQ applies the NEQ predicate on the "last_modify" field.
func LastModifyNEQ(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastModify), v))
	})
}

// LastModifyIn applies the In predicate on the "last_modify" field.
func LastModifyIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastModify), v...))
	})
}

// LastModifyNotIn applies the NotIn predicate on the "last_modify" field.
func LastModifyNotIn(vs ...time.Time) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastModify), v...))
	})
}

// LastModifyGT applies the GT predicate on the "last_modify" field.
func LastModifyGT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastModify), v))
	})
}

// LastModifyGTE applies the GTE predicate on the "last_modify" field.
func LastModifyGTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastModify), v))
	})
}

// LastModifyLT applies the LT predicate on the "last_modify" field.
func LastModifyLT(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastModify), v))
	})
}

// LastModifyLTE applies the LTE predicate on the "last_modify" field.
func LastModifyLTE(v time.Time) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastModify), v))
	})
}

// LastModifyIsNil applies the IsNil predicate on the "last_modify" field.
func LastModifyIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModify)))
	})
}

// LastModifyNotNil applies the NotNil predicate on the "last_modify" field.
func LastModifyNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModify)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// BlockEQ applies the EQ predicate on the "block" field.
func BlockEQ(v bool) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBlock), v))
	})
}

// BlockNEQ applies the NEQ predicate on the "block" field.
func BlockNEQ(v bool) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBlock), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IcNumberEQ applies the EQ predicate on the "ic_number" field.
func IcNumberEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcNumber), v))
	})
}

// IcNumberNEQ applies the NEQ predicate on the "ic_number" field.
func IcNumberNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcNumber), v))
	})
}

// IcNumberIn applies the In predicate on the "ic_number" field.
func IcNumberIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcNumber), v...))
	})
}

// IcNumberNotIn applies the NotIn predicate on the "ic_number" field.
func IcNumberNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcNumber), v...))
	})
}

// IcNumberGT applies the GT predicate on the "ic_number" field.
func IcNumberGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcNumber), v))
	})
}

// IcNumberGTE applies the GTE predicate on the "ic_number" field.
func IcNumberGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcNumber), v))
	})
}

// IcNumberLT applies the LT predicate on the "ic_number" field.
func IcNumberLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcNumber), v))
	})
}

// IcNumberLTE applies the LTE predicate on the "ic_number" field.
func IcNumberLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcNumber), v))
	})
}

// IcNumberContains applies the Contains predicate on the "ic_number" field.
func IcNumberContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcNumber), v))
	})
}

// IcNumberHasPrefix applies the HasPrefix predicate on the "ic_number" field.
func IcNumberHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcNumber), v))
	})
}

// IcNumberHasSuffix applies the HasSuffix predicate on the "ic_number" field.
func IcNumberHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcNumber), v))
	})
}

// IcNumberEqualFold applies the EqualFold predicate on the "ic_number" field.
func IcNumberEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcNumber), v))
	})
}

// IcNumberContainsFold applies the ContainsFold predicate on the "ic_number" field.
func IcNumberContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcNumber), v))
	})
}

// IcTypeEQ applies the EQ predicate on the "ic_type" field.
func IcTypeEQ(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcType), v))
	})
}

// IcTypeNEQ applies the NEQ predicate on the "ic_type" field.
func IcTypeNEQ(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcType), v))
	})
}

// IcTypeIn applies the In predicate on the "ic_type" field.
func IcTypeIn(vs ...uint8) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcType), v...))
	})
}

// IcTypeNotIn applies the NotIn predicate on the "ic_type" field.
func IcTypeNotIn(vs ...uint8) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcType), v...))
	})
}

// IcTypeGT applies the GT predicate on the "ic_type" field.
func IcTypeGT(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcType), v))
	})
}

// IcTypeGTE applies the GTE predicate on the "ic_type" field.
func IcTypeGTE(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcType), v))
	})
}

// IcTypeLT applies the LT predicate on the "ic_type" field.
func IcTypeLT(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcType), v))
	})
}

// IcTypeLTE applies the LTE predicate on the "ic_type" field.
func IcTypeLTE(v uint8) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcType), v))
	})
}

// IcPortraitEQ applies the EQ predicate on the "ic_portrait" field.
func IcPortraitEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitNEQ applies the NEQ predicate on the "ic_portrait" field.
func IcPortraitNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitIn applies the In predicate on the "ic_portrait" field.
func IcPortraitIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcPortrait), v...))
	})
}

// IcPortraitNotIn applies the NotIn predicate on the "ic_portrait" field.
func IcPortraitNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcPortrait), v...))
	})
}

// IcPortraitGT applies the GT predicate on the "ic_portrait" field.
func IcPortraitGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitGTE applies the GTE predicate on the "ic_portrait" field.
func IcPortraitGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitLT applies the LT predicate on the "ic_portrait" field.
func IcPortraitLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitLTE applies the LTE predicate on the "ic_portrait" field.
func IcPortraitLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitContains applies the Contains predicate on the "ic_portrait" field.
func IcPortraitContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitHasPrefix applies the HasPrefix predicate on the "ic_portrait" field.
func IcPortraitHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitHasSuffix applies the HasSuffix predicate on the "ic_portrait" field.
func IcPortraitHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitEqualFold applies the EqualFold predicate on the "ic_portrait" field.
func IcPortraitEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcPortrait), v))
	})
}

// IcPortraitContainsFold applies the ContainsFold predicate on the "ic_portrait" field.
func IcPortraitContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcPortrait), v))
	})
}

// IcNationalEQ applies the EQ predicate on the "ic_national" field.
func IcNationalEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcNational), v))
	})
}

// IcNationalNEQ applies the NEQ predicate on the "ic_national" field.
func IcNationalNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcNational), v))
	})
}

// IcNationalIn applies the In predicate on the "ic_national" field.
func IcNationalIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcNational), v...))
	})
}

// IcNationalNotIn applies the NotIn predicate on the "ic_national" field.
func IcNationalNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcNational), v...))
	})
}

// IcNationalGT applies the GT predicate on the "ic_national" field.
func IcNationalGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcNational), v))
	})
}

// IcNationalGTE applies the GTE predicate on the "ic_national" field.
func IcNationalGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcNational), v))
	})
}

// IcNationalLT applies the LT predicate on the "ic_national" field.
func IcNationalLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcNational), v))
	})
}

// IcNationalLTE applies the LTE predicate on the "ic_national" field.
func IcNationalLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcNational), v))
	})
}

// IcNationalContains applies the Contains predicate on the "ic_national" field.
func IcNationalContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcNational), v))
	})
}

// IcNationalHasPrefix applies the HasPrefix predicate on the "ic_national" field.
func IcNationalHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcNational), v))
	})
}

// IcNationalHasSuffix applies the HasSuffix predicate on the "ic_national" field.
func IcNationalHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcNational), v))
	})
}

// IcNationalEqualFold applies the EqualFold predicate on the "ic_national" field.
func IcNationalEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcNational), v))
	})
}

// IcNationalContainsFold applies the ContainsFold predicate on the "ic_national" field.
func IcNationalContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcNational), v))
	})
}

// IcHandheldEQ applies the EQ predicate on the "ic_handheld" field.
func IcHandheldEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldNEQ applies the NEQ predicate on the "ic_handheld" field.
func IcHandheldNEQ(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldIn applies the In predicate on the "ic_handheld" field.
func IcHandheldIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIcHandheld), v...))
	})
}

// IcHandheldNotIn applies the NotIn predicate on the "ic_handheld" field.
func IcHandheldNotIn(vs ...string) predicate.Person {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Person(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIcHandheld), v...))
	})
}

// IcHandheldGT applies the GT predicate on the "ic_handheld" field.
func IcHandheldGT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldGTE applies the GTE predicate on the "ic_handheld" field.
func IcHandheldGTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldLT applies the LT predicate on the "ic_handheld" field.
func IcHandheldLT(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldLTE applies the LTE predicate on the "ic_handheld" field.
func IcHandheldLTE(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldContains applies the Contains predicate on the "ic_handheld" field.
func IcHandheldContains(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldHasPrefix applies the HasPrefix predicate on the "ic_handheld" field.
func IcHandheldHasPrefix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldHasSuffix applies the HasSuffix predicate on the "ic_handheld" field.
func IcHandheldHasSuffix(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldEqualFold applies the EqualFold predicate on the "ic_handheld" field.
func IcHandheldEqualFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcHandheld), v))
	})
}

// IcHandheldContainsFold applies the ContainsFold predicate on the "ic_handheld" field.
func IcHandheldContainsFold(v string) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcHandheld), v))
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Person) predicate.Person {
	return predicate.Person(func(s *sql.Selector) {
		p(s.Not())
	})
}
