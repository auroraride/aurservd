// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
)

// PromotionBankCardCreate is the builder for creating a PromotionBankCard entity.
type PromotionBankCardCreate struct {
	config
	mutation *PromotionBankCardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pbcc *PromotionBankCardCreate) SetCreatedAt(t time.Time) *PromotionBankCardCreate {
	pbcc.mutation.SetCreatedAt(t)
	return pbcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableCreatedAt(t *time.Time) *PromotionBankCardCreate {
	if t != nil {
		pbcc.SetCreatedAt(*t)
	}
	return pbcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pbcc *PromotionBankCardCreate) SetUpdatedAt(t time.Time) *PromotionBankCardCreate {
	pbcc.mutation.SetUpdatedAt(t)
	return pbcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableUpdatedAt(t *time.Time) *PromotionBankCardCreate {
	if t != nil {
		pbcc.SetUpdatedAt(*t)
	}
	return pbcc
}

// SetDeletedAt sets the "deleted_at" field.
func (pbcc *PromotionBankCardCreate) SetDeletedAt(t time.Time) *PromotionBankCardCreate {
	pbcc.mutation.SetDeletedAt(t)
	return pbcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableDeletedAt(t *time.Time) *PromotionBankCardCreate {
	if t != nil {
		pbcc.SetDeletedAt(*t)
	}
	return pbcc
}

// SetCreator sets the "creator" field.
func (pbcc *PromotionBankCardCreate) SetCreator(m *model.Modifier) *PromotionBankCardCreate {
	pbcc.mutation.SetCreator(m)
	return pbcc
}

// SetLastModifier sets the "last_modifier" field.
func (pbcc *PromotionBankCardCreate) SetLastModifier(m *model.Modifier) *PromotionBankCardCreate {
	pbcc.mutation.SetLastModifier(m)
	return pbcc
}

// SetRemark sets the "remark" field.
func (pbcc *PromotionBankCardCreate) SetRemark(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetRemark(s)
	return pbcc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableRemark(s *string) *PromotionBankCardCreate {
	if s != nil {
		pbcc.SetRemark(*s)
	}
	return pbcc
}

// SetMemberID sets the "member_id" field.
func (pbcc *PromotionBankCardCreate) SetMemberID(u uint64) *PromotionBankCardCreate {
	pbcc.mutation.SetMemberID(u)
	return pbcc
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableMemberID(u *uint64) *PromotionBankCardCreate {
	if u != nil {
		pbcc.SetMemberID(*u)
	}
	return pbcc
}

// SetCardNo sets the "card_no" field.
func (pbcc *PromotionBankCardCreate) SetCardNo(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetCardNo(s)
	return pbcc
}

// SetBank sets the "bank" field.
func (pbcc *PromotionBankCardCreate) SetBank(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetBank(s)
	return pbcc
}

// SetNillableBank sets the "bank" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableBank(s *string) *PromotionBankCardCreate {
	if s != nil {
		pbcc.SetBank(*s)
	}
	return pbcc
}

// SetIsDefault sets the "is_default" field.
func (pbcc *PromotionBankCardCreate) SetIsDefault(b bool) *PromotionBankCardCreate {
	pbcc.mutation.SetIsDefault(b)
	return pbcc
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableIsDefault(b *bool) *PromotionBankCardCreate {
	if b != nil {
		pbcc.SetIsDefault(*b)
	}
	return pbcc
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (pbcc *PromotionBankCardCreate) SetBankLogoURL(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetBankLogoURL(s)
	return pbcc
}

// SetNillableBankLogoURL sets the "bank_logo_url" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableBankLogoURL(s *string) *PromotionBankCardCreate {
	if s != nil {
		pbcc.SetBankLogoURL(*s)
	}
	return pbcc
}

// SetProvince sets the "province" field.
func (pbcc *PromotionBankCardCreate) SetProvince(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetProvince(s)
	return pbcc
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableProvince(s *string) *PromotionBankCardCreate {
	if s != nil {
		pbcc.SetProvince(*s)
	}
	return pbcc
}

// SetCity sets the "city" field.
func (pbcc *PromotionBankCardCreate) SetCity(s string) *PromotionBankCardCreate {
	pbcc.mutation.SetCity(s)
	return pbcc
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (pbcc *PromotionBankCardCreate) SetNillableCity(s *string) *PromotionBankCardCreate {
	if s != nil {
		pbcc.SetCity(*s)
	}
	return pbcc
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pbcc *PromotionBankCardCreate) SetMember(p *PromotionMember) *PromotionBankCardCreate {
	return pbcc.SetMemberID(p.ID)
}

// AddWithdrawalIDs adds the "withdrawals" edge to the PromotionWithdrawal entity by IDs.
func (pbcc *PromotionBankCardCreate) AddWithdrawalIDs(ids ...uint64) *PromotionBankCardCreate {
	pbcc.mutation.AddWithdrawalIDs(ids...)
	return pbcc
}

// AddWithdrawals adds the "withdrawals" edges to the PromotionWithdrawal entity.
func (pbcc *PromotionBankCardCreate) AddWithdrawals(p ...*PromotionWithdrawal) *PromotionBankCardCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcc.AddWithdrawalIDs(ids...)
}

// Mutation returns the PromotionBankCardMutation object of the builder.
func (pbcc *PromotionBankCardCreate) Mutation() *PromotionBankCardMutation {
	return pbcc.mutation
}

// Save creates the PromotionBankCard in the database.
func (pbcc *PromotionBankCardCreate) Save(ctx context.Context) (*PromotionBankCard, error) {
	if err := pbcc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pbcc.sqlSave, pbcc.mutation, pbcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pbcc *PromotionBankCardCreate) SaveX(ctx context.Context) *PromotionBankCard {
	v, err := pbcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbcc *PromotionBankCardCreate) Exec(ctx context.Context) error {
	_, err := pbcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcc *PromotionBankCardCreate) ExecX(ctx context.Context) {
	if err := pbcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbcc *PromotionBankCardCreate) defaults() error {
	if _, ok := pbcc.mutation.CreatedAt(); !ok {
		if promotionbankcard.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionbankcard.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := promotionbankcard.DefaultCreatedAt()
		pbcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pbcc.mutation.UpdatedAt(); !ok {
		if promotionbankcard.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionbankcard.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionbankcard.DefaultUpdatedAt()
		pbcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pbcc.mutation.IsDefault(); !ok {
		v := promotionbankcard.DefaultIsDefault
		pbcc.mutation.SetIsDefault(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pbcc *PromotionBankCardCreate) check() error {
	if _, ok := pbcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PromotionBankCard.created_at"`)}
	}
	if _, ok := pbcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PromotionBankCard.updated_at"`)}
	}
	if _, ok := pbcc.mutation.CardNo(); !ok {
		return &ValidationError{Name: "card_no", err: errors.New(`ent: missing required field "PromotionBankCard.card_no"`)}
	}
	if _, ok := pbcc.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "PromotionBankCard.is_default"`)}
	}
	return nil
}

func (pbcc *PromotionBankCardCreate) sqlSave(ctx context.Context) (*PromotionBankCard, error) {
	if err := pbcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pbcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pbcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pbcc.mutation.id = &_node.ID
	pbcc.mutation.done = true
	return _node, nil
}

func (pbcc *PromotionBankCardCreate) createSpec() (*PromotionBankCard, *sqlgraph.CreateSpec) {
	var (
		_node = &PromotionBankCard{config: pbcc.config}
		_spec = sqlgraph.NewCreateSpec(promotionbankcard.Table, sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pbcc.conflict
	if value, ok := pbcc.mutation.CreatedAt(); ok {
		_spec.SetField(promotionbankcard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pbcc.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionbankcard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pbcc.mutation.DeletedAt(); ok {
		_spec.SetField(promotionbankcard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pbcc.mutation.Creator(); ok {
		_spec.SetField(promotionbankcard.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pbcc.mutation.LastModifier(); ok {
		_spec.SetField(promotionbankcard.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pbcc.mutation.Remark(); ok {
		_spec.SetField(promotionbankcard.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pbcc.mutation.CardNo(); ok {
		_spec.SetField(promotionbankcard.FieldCardNo, field.TypeString, value)
		_node.CardNo = value
	}
	if value, ok := pbcc.mutation.Bank(); ok {
		_spec.SetField(promotionbankcard.FieldBank, field.TypeString, value)
		_node.Bank = value
	}
	if value, ok := pbcc.mutation.IsDefault(); ok {
		_spec.SetField(promotionbankcard.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := pbcc.mutation.BankLogoURL(); ok {
		_spec.SetField(promotionbankcard.FieldBankLogoURL, field.TypeString, value)
		_node.BankLogoURL = value
	}
	if value, ok := pbcc.mutation.Province(); ok {
		_spec.SetField(promotionbankcard.FieldProvince, field.TypeString, value)
		_node.Province = value
	}
	if value, ok := pbcc.mutation.City(); ok {
		_spec.SetField(promotionbankcard.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if nodes := pbcc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pbcc.mutation.WithdrawalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionBankCard.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionBankCardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pbcc *PromotionBankCardCreate) OnConflict(opts ...sql.ConflictOption) *PromotionBankCardUpsertOne {
	pbcc.conflict = opts
	return &PromotionBankCardUpsertOne{
		create: pbcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pbcc *PromotionBankCardCreate) OnConflictColumns(columns ...string) *PromotionBankCardUpsertOne {
	pbcc.conflict = append(pbcc.conflict, sql.ConflictColumns(columns...))
	return &PromotionBankCardUpsertOne{
		create: pbcc,
	}
}

type (
	// PromotionBankCardUpsertOne is the builder for "upsert"-ing
	//  one PromotionBankCard node.
	PromotionBankCardUpsertOne struct {
		create *PromotionBankCardCreate
	}

	// PromotionBankCardUpsert is the "OnConflict" setter.
	PromotionBankCardUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionBankCardUpsert) SetUpdatedAt(v time.Time) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateUpdatedAt() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionBankCardUpsert) SetDeletedAt(v time.Time) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateDeletedAt() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionBankCardUpsert) ClearDeletedAt() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionBankCardUpsert) SetLastModifier(v *model.Modifier) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateLastModifier() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionBankCardUpsert) ClearLastModifier() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PromotionBankCardUpsert) SetRemark(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateRemark() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionBankCardUpsert) ClearRemark() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldRemark)
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PromotionBankCardUpsert) SetMemberID(v uint64) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateMemberID() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldMemberID)
	return u
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionBankCardUpsert) ClearMemberID() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldMemberID)
	return u
}

// SetCardNo sets the "card_no" field.
func (u *PromotionBankCardUpsert) SetCardNo(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldCardNo, v)
	return u
}

// UpdateCardNo sets the "card_no" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateCardNo() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldCardNo)
	return u
}

// SetBank sets the "bank" field.
func (u *PromotionBankCardUpsert) SetBank(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldBank, v)
	return u
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateBank() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldBank)
	return u
}

// ClearBank clears the value of the "bank" field.
func (u *PromotionBankCardUpsert) ClearBank() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldBank)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *PromotionBankCardUpsert) SetIsDefault(v bool) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateIsDefault() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldIsDefault)
	return u
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (u *PromotionBankCardUpsert) SetBankLogoURL(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldBankLogoURL, v)
	return u
}

// UpdateBankLogoURL sets the "bank_logo_url" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateBankLogoURL() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldBankLogoURL)
	return u
}

// ClearBankLogoURL clears the value of the "bank_logo_url" field.
func (u *PromotionBankCardUpsert) ClearBankLogoURL() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldBankLogoURL)
	return u
}

// SetProvince sets the "province" field.
func (u *PromotionBankCardUpsert) SetProvince(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldProvince, v)
	return u
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateProvince() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldProvince)
	return u
}

// ClearProvince clears the value of the "province" field.
func (u *PromotionBankCardUpsert) ClearProvince() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldProvince)
	return u
}

// SetCity sets the "city" field.
func (u *PromotionBankCardUpsert) SetCity(v string) *PromotionBankCardUpsert {
	u.Set(promotionbankcard.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PromotionBankCardUpsert) UpdateCity() *PromotionBankCardUpsert {
	u.SetExcluded(promotionbankcard.FieldCity)
	return u
}

// ClearCity clears the value of the "city" field.
func (u *PromotionBankCardUpsert) ClearCity() *PromotionBankCardUpsert {
	u.SetNull(promotionbankcard.FieldCity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionBankCardUpsertOne) UpdateNewValues() *PromotionBankCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(promotionbankcard.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(promotionbankcard.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PromotionBankCardUpsertOne) Ignore() *PromotionBankCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionBankCardUpsertOne) DoNothing() *PromotionBankCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionBankCardCreate.OnConflict
// documentation for more info.
func (u *PromotionBankCardUpsertOne) Update(set func(*PromotionBankCardUpsert)) *PromotionBankCardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionBankCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionBankCardUpsertOne) SetUpdatedAt(v time.Time) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateUpdatedAt() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionBankCardUpsertOne) SetDeletedAt(v time.Time) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateDeletedAt() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionBankCardUpsertOne) ClearDeletedAt() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionBankCardUpsertOne) SetLastModifier(v *model.Modifier) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateLastModifier() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionBankCardUpsertOne) ClearLastModifier() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionBankCardUpsertOne) SetRemark(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateRemark() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionBankCardUpsertOne) ClearRemark() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionBankCardUpsertOne) SetMemberID(v uint64) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateMemberID() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionBankCardUpsertOne) ClearMemberID() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearMemberID()
	})
}

// SetCardNo sets the "card_no" field.
func (u *PromotionBankCardUpsertOne) SetCardNo(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetCardNo(v)
	})
}

// UpdateCardNo sets the "card_no" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateCardNo() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateCardNo()
	})
}

// SetBank sets the "bank" field.
func (u *PromotionBankCardUpsertOne) SetBank(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateBank() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateBank()
	})
}

// ClearBank clears the value of the "bank" field.
func (u *PromotionBankCardUpsertOne) ClearBank() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearBank()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *PromotionBankCardUpsertOne) SetIsDefault(v bool) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateIsDefault() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateIsDefault()
	})
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (u *PromotionBankCardUpsertOne) SetBankLogoURL(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetBankLogoURL(v)
	})
}

// UpdateBankLogoURL sets the "bank_logo_url" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateBankLogoURL() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateBankLogoURL()
	})
}

// ClearBankLogoURL clears the value of the "bank_logo_url" field.
func (u *PromotionBankCardUpsertOne) ClearBankLogoURL() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearBankLogoURL()
	})
}

// SetProvince sets the "province" field.
func (u *PromotionBankCardUpsertOne) SetProvince(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateProvince() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *PromotionBankCardUpsertOne) ClearProvince() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearProvince()
	})
}

// SetCity sets the "city" field.
func (u *PromotionBankCardUpsertOne) SetCity(v string) *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PromotionBankCardUpsertOne) UpdateCity() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *PromotionBankCardUpsertOne) ClearCity() *PromotionBankCardUpsertOne {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearCity()
	})
}

// Exec executes the query.
func (u *PromotionBankCardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionBankCardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionBankCardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PromotionBankCardUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PromotionBankCardUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PromotionBankCardCreateBulk is the builder for creating many PromotionBankCard entities in bulk.
type PromotionBankCardCreateBulk struct {
	config
	err      error
	builders []*PromotionBankCardCreate
	conflict []sql.ConflictOption
}

// Save creates the PromotionBankCard entities in the database.
func (pbccb *PromotionBankCardCreateBulk) Save(ctx context.Context) ([]*PromotionBankCard, error) {
	if pbccb.err != nil {
		return nil, pbccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pbccb.builders))
	nodes := make([]*PromotionBankCard, len(pbccb.builders))
	mutators := make([]Mutator, len(pbccb.builders))
	for i := range pbccb.builders {
		func(i int, root context.Context) {
			builder := pbccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PromotionBankCardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pbccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pbccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pbccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pbccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pbccb *PromotionBankCardCreateBulk) SaveX(ctx context.Context) []*PromotionBankCard {
	v, err := pbccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pbccb *PromotionBankCardCreateBulk) Exec(ctx context.Context) error {
	_, err := pbccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbccb *PromotionBankCardCreateBulk) ExecX(ctx context.Context) {
	if err := pbccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PromotionBankCard.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PromotionBankCardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pbccb *PromotionBankCardCreateBulk) OnConflict(opts ...sql.ConflictOption) *PromotionBankCardUpsertBulk {
	pbccb.conflict = opts
	return &PromotionBankCardUpsertBulk{
		create: pbccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pbccb *PromotionBankCardCreateBulk) OnConflictColumns(columns ...string) *PromotionBankCardUpsertBulk {
	pbccb.conflict = append(pbccb.conflict, sql.ConflictColumns(columns...))
	return &PromotionBankCardUpsertBulk{
		create: pbccb,
	}
}

// PromotionBankCardUpsertBulk is the builder for "upsert"-ing
// a bulk of PromotionBankCard nodes.
type PromotionBankCardUpsertBulk struct {
	create *PromotionBankCardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PromotionBankCardUpsertBulk) UpdateNewValues() *PromotionBankCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(promotionbankcard.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(promotionbankcard.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PromotionBankCard.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PromotionBankCardUpsertBulk) Ignore() *PromotionBankCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PromotionBankCardUpsertBulk) DoNothing() *PromotionBankCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PromotionBankCardCreateBulk.OnConflict
// documentation for more info.
func (u *PromotionBankCardUpsertBulk) Update(set func(*PromotionBankCardUpsert)) *PromotionBankCardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PromotionBankCardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PromotionBankCardUpsertBulk) SetUpdatedAt(v time.Time) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateUpdatedAt() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PromotionBankCardUpsertBulk) SetDeletedAt(v time.Time) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateDeletedAt() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PromotionBankCardUpsertBulk) ClearDeletedAt() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PromotionBankCardUpsertBulk) SetLastModifier(v *model.Modifier) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateLastModifier() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PromotionBankCardUpsertBulk) ClearLastModifier() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PromotionBankCardUpsertBulk) SetRemark(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateRemark() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PromotionBankCardUpsertBulk) ClearRemark() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearRemark()
	})
}

// SetMemberID sets the "member_id" field.
func (u *PromotionBankCardUpsertBulk) SetMemberID(v uint64) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateMemberID() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateMemberID()
	})
}

// ClearMemberID clears the value of the "member_id" field.
func (u *PromotionBankCardUpsertBulk) ClearMemberID() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearMemberID()
	})
}

// SetCardNo sets the "card_no" field.
func (u *PromotionBankCardUpsertBulk) SetCardNo(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetCardNo(v)
	})
}

// UpdateCardNo sets the "card_no" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateCardNo() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateCardNo()
	})
}

// SetBank sets the "bank" field.
func (u *PromotionBankCardUpsertBulk) SetBank(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetBank(v)
	})
}

// UpdateBank sets the "bank" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateBank() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateBank()
	})
}

// ClearBank clears the value of the "bank" field.
func (u *PromotionBankCardUpsertBulk) ClearBank() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearBank()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *PromotionBankCardUpsertBulk) SetIsDefault(v bool) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateIsDefault() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateIsDefault()
	})
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (u *PromotionBankCardUpsertBulk) SetBankLogoURL(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetBankLogoURL(v)
	})
}

// UpdateBankLogoURL sets the "bank_logo_url" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateBankLogoURL() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateBankLogoURL()
	})
}

// ClearBankLogoURL clears the value of the "bank_logo_url" field.
func (u *PromotionBankCardUpsertBulk) ClearBankLogoURL() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearBankLogoURL()
	})
}

// SetProvince sets the "province" field.
func (u *PromotionBankCardUpsertBulk) SetProvince(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetProvince(v)
	})
}

// UpdateProvince sets the "province" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateProvince() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateProvince()
	})
}

// ClearProvince clears the value of the "province" field.
func (u *PromotionBankCardUpsertBulk) ClearProvince() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearProvince()
	})
}

// SetCity sets the "city" field.
func (u *PromotionBankCardUpsertBulk) SetCity(v string) *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *PromotionBankCardUpsertBulk) UpdateCity() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.UpdateCity()
	})
}

// ClearCity clears the value of the "city" field.
func (u *PromotionBankCardUpsertBulk) ClearCity() *PromotionBankCardUpsertBulk {
	return u.Update(func(s *PromotionBankCardUpsert) {
		s.ClearCity()
	})
}

// Exec executes the query.
func (u *PromotionBankCardUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PromotionBankCardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PromotionBankCardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PromotionBankCardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
