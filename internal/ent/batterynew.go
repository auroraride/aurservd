// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterynew"
	"github.com/auroraride/aurservd/internal/ent/city"
)

// BatteryNew is the model entity for the BatteryNew schema.
type BatteryNew struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 所属团签
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// 资产位置类型 1:仓库 2:门店 3:电柜 4:站点 5:骑手 6:运维
	AssetLocationsType uint8 `json:"asset_locations_type,omitempty"`
	// 资产位置ID
	AssetLocationsID uint64 `json:"asset_locations_id,omitempty"`
	// 资产位置
	AssetLocations string `json:"asset_locations,omitempty"`
	// 品牌
	Brand string `json:"brand,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// 资产状态0:待入库 1:库存中 2:配送中 3:使用中 4:故障 5:报废
	AssetStatus uint8 `json:"asset_status,omitempty"`
	// 电池状态 1:正常 2:故障 3:报废
	Status uint64 `json:"status,omitempty"`
	// 报废原因 1:丢失 2:损坏 3:其他
	ScrapReasonType uint8 `json:"scrap_reason_type,omitempty"`
	// 报废时间
	ScrapAt time.Time `json:"scrap_at,omitempty"`
	// 操作报废人员ID
	OperateID uint64 `json:"operate_id,omitempty"`
	// 操作人员角色
	OperateRole uint64 `json:"operate_role,omitempty"`
	// 操作人员
	OperateUser string `json:"operate_user,omitempty"`
	// 仓库ID
	WarehouseID uint64 `json:"warehouse_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryNewQuery when eager-loading is set.
	Edges        BatteryNewEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BatteryNewEdges holds the relations/edges for other nodes in the graph.
type BatteryNewEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryNewEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatteryNew) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batterynew.FieldCreator, batterynew.FieldLastModifier:
			values[i] = new([]byte)
		case batterynew.FieldEnable:
			values[i] = new(sql.NullBool)
		case batterynew.FieldID, batterynew.FieldCityID, batterynew.FieldEnterpriseID, batterynew.FieldAssetLocationsType, batterynew.FieldAssetLocationsID, batterynew.FieldAssetStatus, batterynew.FieldStatus, batterynew.FieldScrapReasonType, batterynew.FieldOperateID, batterynew.FieldOperateRole, batterynew.FieldWarehouseID:
			values[i] = new(sql.NullInt64)
		case batterynew.FieldRemark, batterynew.FieldSn, batterynew.FieldAssetLocations, batterynew.FieldBrand, batterynew.FieldModel, batterynew.FieldOperateUser:
			values[i] = new(sql.NullString)
		case batterynew.FieldCreatedAt, batterynew.FieldUpdatedAt, batterynew.FieldDeletedAt, batterynew.FieldScrapAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatteryNew fields.
func (bn *BatteryNew) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batterynew.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bn.ID = uint64(value.Int64)
		case batterynew.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bn.CreatedAt = value.Time
			}
		case batterynew.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bn.UpdatedAt = value.Time
			}
		case batterynew.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bn.DeletedAt = new(time.Time)
				*bn.DeletedAt = value.Time
			}
		case batterynew.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bn.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case batterynew.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bn.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case batterynew.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				bn.Remark = value.String
			}
		case batterynew.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				bn.CityID = new(uint64)
				*bn.CityID = uint64(value.Int64)
			}
		case batterynew.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				bn.Sn = value.String
			}
		case batterynew.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				bn.EnterpriseID = new(uint64)
				*bn.EnterpriseID = uint64(value.Int64)
			}
		case batterynew.FieldAssetLocationsType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_locations_type", values[i])
			} else if value.Valid {
				bn.AssetLocationsType = uint8(value.Int64)
			}
		case batterynew.FieldAssetLocationsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_locations_id", values[i])
			} else if value.Valid {
				bn.AssetLocationsID = uint64(value.Int64)
			}
		case batterynew.FieldAssetLocations:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field asset_locations", values[i])
			} else if value.Valid {
				bn.AssetLocations = value.String
			}
		case batterynew.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				bn.Brand = value.String
			}
		case batterynew.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				bn.Enable = value.Bool
			}
		case batterynew.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				bn.Model = value.String
			}
		case batterynew.FieldAssetStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field asset_status", values[i])
			} else if value.Valid {
				bn.AssetStatus = uint8(value.Int64)
			}
		case batterynew.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bn.Status = uint64(value.Int64)
			}
		case batterynew.FieldScrapReasonType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field scrap_reason_type", values[i])
			} else if value.Valid {
				bn.ScrapReasonType = uint8(value.Int64)
			}
		case batterynew.FieldScrapAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scrap_at", values[i])
			} else if value.Valid {
				bn.ScrapAt = value.Time
			}
		case batterynew.FieldOperateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operate_id", values[i])
			} else if value.Valid {
				bn.OperateID = uint64(value.Int64)
			}
		case batterynew.FieldOperateRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field operate_role", values[i])
			} else if value.Valid {
				bn.OperateRole = uint64(value.Int64)
			}
		case batterynew.FieldOperateUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operate_user", values[i])
			} else if value.Valid {
				bn.OperateUser = value.String
			}
		case batterynew.FieldWarehouseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field warehouse_id", values[i])
			} else if value.Valid {
				bn.WarehouseID = uint64(value.Int64)
			}
		default:
			bn.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BatteryNew.
// This includes values selected through modifiers, order, etc.
func (bn *BatteryNew) Value(name string) (ent.Value, error) {
	return bn.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the BatteryNew entity.
func (bn *BatteryNew) QueryCity() *CityQuery {
	return NewBatteryNewClient(bn.config).QueryCity(bn)
}

// Update returns a builder for updating this BatteryNew.
// Note that you need to call BatteryNew.Unwrap() before calling this method if this BatteryNew
// was returned from a transaction, and the transaction was committed or rolled back.
func (bn *BatteryNew) Update() *BatteryNewUpdateOne {
	return NewBatteryNewClient(bn.config).UpdateOne(bn)
}

// Unwrap unwraps the BatteryNew entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bn *BatteryNew) Unwrap() *BatteryNew {
	_tx, ok := bn.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatteryNew is not a transactional entity")
	}
	bn.config.driver = _tx.drv
	return bn
}

// String implements the fmt.Stringer.
func (bn *BatteryNew) String() string {
	var builder strings.Builder
	builder.WriteString("BatteryNew(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(bn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bn.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bn.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", bn.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", bn.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(bn.Remark)
	builder.WriteString(", ")
	if v := bn.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(bn.Sn)
	builder.WriteString(", ")
	if v := bn.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("asset_locations_type=")
	builder.WriteString(fmt.Sprintf("%v", bn.AssetLocationsType))
	builder.WriteString(", ")
	builder.WriteString("asset_locations_id=")
	builder.WriteString(fmt.Sprintf("%v", bn.AssetLocationsID))
	builder.WriteString(", ")
	builder.WriteString("asset_locations=")
	builder.WriteString(bn.AssetLocations)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(bn.Brand)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", bn.Enable))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(bn.Model)
	builder.WriteString(", ")
	builder.WriteString("asset_status=")
	builder.WriteString(fmt.Sprintf("%v", bn.AssetStatus))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bn.Status))
	builder.WriteString(", ")
	builder.WriteString("scrap_reason_type=")
	builder.WriteString(fmt.Sprintf("%v", bn.ScrapReasonType))
	builder.WriteString(", ")
	builder.WriteString("scrap_at=")
	builder.WriteString(bn.ScrapAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operate_id=")
	builder.WriteString(fmt.Sprintf("%v", bn.OperateID))
	builder.WriteString(", ")
	builder.WriteString("operate_role=")
	builder.WriteString(fmt.Sprintf("%v", bn.OperateRole))
	builder.WriteString(", ")
	builder.WriteString("operate_user=")
	builder.WriteString(bn.OperateUser)
	builder.WriteString(", ")
	builder.WriteString("warehouse_id=")
	builder.WriteString(fmt.Sprintf("%v", bn.WarehouseID))
	builder.WriteByte(')')
	return builder.String()
}

// BatteryNews is a parsable slice of BatteryNew.
type BatteryNews []*BatteryNew
