// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterprisePriceUpdate is the builder for updating EnterprisePrice entities.
type EnterprisePriceUpdate struct {
	config
	hooks     []Hook
	mutation  *EnterprisePriceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EnterprisePriceUpdate builder.
func (epu *EnterprisePriceUpdate) Where(ps ...predicate.EnterprisePrice) *EnterprisePriceUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetUpdatedAt sets the "updated_at" field.
func (epu *EnterprisePriceUpdate) SetUpdatedAt(t time.Time) *EnterprisePriceUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// SetDeletedAt sets the "deleted_at" field.
func (epu *EnterprisePriceUpdate) SetDeletedAt(t time.Time) *EnterprisePriceUpdate {
	epu.mutation.SetDeletedAt(t)
	return epu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableDeletedAt(t *time.Time) *EnterprisePriceUpdate {
	if t != nil {
		epu.SetDeletedAt(*t)
	}
	return epu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epu *EnterprisePriceUpdate) ClearDeletedAt() *EnterprisePriceUpdate {
	epu.mutation.ClearDeletedAt()
	return epu
}

// SetLastModifier sets the "last_modifier" field.
func (epu *EnterprisePriceUpdate) SetLastModifier(m *model.Modifier) *EnterprisePriceUpdate {
	epu.mutation.SetLastModifier(m)
	return epu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (epu *EnterprisePriceUpdate) ClearLastModifier() *EnterprisePriceUpdate {
	epu.mutation.ClearLastModifier()
	return epu
}

// SetRemark sets the "remark" field.
func (epu *EnterprisePriceUpdate) SetRemark(s string) *EnterprisePriceUpdate {
	epu.mutation.SetRemark(s)
	return epu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableRemark(s *string) *EnterprisePriceUpdate {
	if s != nil {
		epu.SetRemark(*s)
	}
	return epu
}

// ClearRemark clears the value of the "remark" field.
func (epu *EnterprisePriceUpdate) ClearRemark() *EnterprisePriceUpdate {
	epu.mutation.ClearRemark()
	return epu
}

// SetCityID sets the "city_id" field.
func (epu *EnterprisePriceUpdate) SetCityID(u uint64) *EnterprisePriceUpdate {
	epu.mutation.SetCityID(u)
	return epu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableCityID(u *uint64) *EnterprisePriceUpdate {
	if u != nil {
		epu.SetCityID(*u)
	}
	return epu
}

// SetBrandID sets the "brand_id" field.
func (epu *EnterprisePriceUpdate) SetBrandID(u uint64) *EnterprisePriceUpdate {
	epu.mutation.SetBrandID(u)
	return epu
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableBrandID(u *uint64) *EnterprisePriceUpdate {
	if u != nil {
		epu.SetBrandID(*u)
	}
	return epu
}

// ClearBrandID clears the value of the "brand_id" field.
func (epu *EnterprisePriceUpdate) ClearBrandID() *EnterprisePriceUpdate {
	epu.mutation.ClearBrandID()
	return epu
}

// SetAgreementID sets the "agreement_id" field.
func (epu *EnterprisePriceUpdate) SetAgreementID(u uint64) *EnterprisePriceUpdate {
	epu.mutation.SetAgreementID(u)
	return epu
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableAgreementID(u *uint64) *EnterprisePriceUpdate {
	if u != nil {
		epu.SetAgreementID(*u)
	}
	return epu
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (epu *EnterprisePriceUpdate) ClearAgreementID() *EnterprisePriceUpdate {
	epu.mutation.ClearAgreementID()
	return epu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (epu *EnterprisePriceUpdate) SetEnterpriseID(u uint64) *EnterprisePriceUpdate {
	epu.mutation.SetEnterpriseID(u)
	return epu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableEnterpriseID(u *uint64) *EnterprisePriceUpdate {
	if u != nil {
		epu.SetEnterpriseID(*u)
	}
	return epu
}

// SetPrice sets the "price" field.
func (epu *EnterprisePriceUpdate) SetPrice(f float64) *EnterprisePriceUpdate {
	epu.mutation.ResetPrice()
	epu.mutation.SetPrice(f)
	return epu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillablePrice(f *float64) *EnterprisePriceUpdate {
	if f != nil {
		epu.SetPrice(*f)
	}
	return epu
}

// AddPrice adds f to the "price" field.
func (epu *EnterprisePriceUpdate) AddPrice(f float64) *EnterprisePriceUpdate {
	epu.mutation.AddPrice(f)
	return epu
}

// SetModel sets the "model" field.
func (epu *EnterprisePriceUpdate) SetModel(s string) *EnterprisePriceUpdate {
	epu.mutation.SetModel(s)
	return epu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableModel(s *string) *EnterprisePriceUpdate {
	if s != nil {
		epu.SetModel(*s)
	}
	return epu
}

// SetIntelligent sets the "intelligent" field.
func (epu *EnterprisePriceUpdate) SetIntelligent(b bool) *EnterprisePriceUpdate {
	epu.mutation.SetIntelligent(b)
	return epu
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (epu *EnterprisePriceUpdate) SetNillableIntelligent(b *bool) *EnterprisePriceUpdate {
	if b != nil {
		epu.SetIntelligent(*b)
	}
	return epu
}

// SetCity sets the "city" edge to the City entity.
func (epu *EnterprisePriceUpdate) SetCity(c *City) *EnterprisePriceUpdate {
	return epu.SetCityID(c.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (epu *EnterprisePriceUpdate) SetBrand(e *EbikeBrand) *EnterprisePriceUpdate {
	return epu.SetBrandID(e.ID)
}

// SetAgreement sets the "agreement" edge to the Agreement entity.
func (epu *EnterprisePriceUpdate) SetAgreement(a *Agreement) *EnterprisePriceUpdate {
	return epu.SetAgreementID(a.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (epu *EnterprisePriceUpdate) SetEnterprise(e *Enterprise) *EnterprisePriceUpdate {
	return epu.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterprisePriceMutation object of the builder.
func (epu *EnterprisePriceUpdate) Mutation() *EnterprisePriceMutation {
	return epu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (epu *EnterprisePriceUpdate) ClearCity() *EnterprisePriceUpdate {
	epu.mutation.ClearCity()
	return epu
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (epu *EnterprisePriceUpdate) ClearBrand() *EnterprisePriceUpdate {
	epu.mutation.ClearBrand()
	return epu
}

// ClearAgreement clears the "agreement" edge to the Agreement entity.
func (epu *EnterprisePriceUpdate) ClearAgreement() *EnterprisePriceUpdate {
	epu.mutation.ClearAgreement()
	return epu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (epu *EnterprisePriceUpdate) ClearEnterprise() *EnterprisePriceUpdate {
	epu.mutation.ClearEnterprise()
	return epu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EnterprisePriceUpdate) Save(ctx context.Context) (int, error) {
	if err := epu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EnterprisePriceUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EnterprisePriceUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EnterprisePriceUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EnterprisePriceUpdate) defaults() error {
	if _, ok := epu.mutation.UpdatedAt(); !ok {
		if enterpriseprice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprice.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprice.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epu *EnterprisePriceUpdate) check() error {
	if epu.mutation.CityCleared() && len(epu.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrice.city"`)
	}
	if epu.mutation.EnterpriseCleared() && len(epu.mutation.EnterpriseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrice.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epu *EnterprisePriceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterprisePriceUpdate {
	epu.modifiers = append(epu.modifiers, modifiers...)
	return epu
}

func (epu *EnterprisePriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterpriseprice.Table, enterpriseprice.Columns, sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(enterpriseprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epu.mutation.DeletedAt(); ok {
		_spec.SetField(enterpriseprice.FieldDeletedAt, field.TypeTime, value)
	}
	if epu.mutation.DeletedAtCleared() {
		_spec.ClearField(enterpriseprice.FieldDeletedAt, field.TypeTime)
	}
	if epu.mutation.CreatorCleared() {
		_spec.ClearField(enterpriseprice.FieldCreator, field.TypeJSON)
	}
	if value, ok := epu.mutation.LastModifier(); ok {
		_spec.SetField(enterpriseprice.FieldLastModifier, field.TypeJSON, value)
	}
	if epu.mutation.LastModifierCleared() {
		_spec.ClearField(enterpriseprice.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := epu.mutation.Remark(); ok {
		_spec.SetField(enterpriseprice.FieldRemark, field.TypeString, value)
	}
	if epu.mutation.RemarkCleared() {
		_spec.ClearField(enterpriseprice.FieldRemark, field.TypeString)
	}
	if value, ok := epu.mutation.Price(); ok {
		_spec.SetField(enterpriseprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := epu.mutation.AddedPrice(); ok {
		_spec.AddField(enterpriseprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := epu.mutation.Model(); ok {
		_spec.SetField(enterpriseprice.FieldModel, field.TypeString, value)
	}
	if value, ok := epu.mutation.Intelligent(); ok {
		_spec.SetField(enterpriseprice.FieldIntelligent, field.TypeBool, value)
	}
	if epu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.AgreementTable,
			Columns: []string{enterpriseprice.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.AgreementTable,
			Columns: []string{enterpriseprice.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(epu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EnterprisePriceUpdateOne is the builder for updating a single EnterprisePrice entity.
type EnterprisePriceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EnterprisePriceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (epuo *EnterprisePriceUpdateOne) SetUpdatedAt(t time.Time) *EnterprisePriceUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// SetDeletedAt sets the "deleted_at" field.
func (epuo *EnterprisePriceUpdateOne) SetDeletedAt(t time.Time) *EnterprisePriceUpdateOne {
	epuo.mutation.SetDeletedAt(t)
	return epuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableDeletedAt(t *time.Time) *EnterprisePriceUpdateOne {
	if t != nil {
		epuo.SetDeletedAt(*t)
	}
	return epuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epuo *EnterprisePriceUpdateOne) ClearDeletedAt() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearDeletedAt()
	return epuo
}

// SetLastModifier sets the "last_modifier" field.
func (epuo *EnterprisePriceUpdateOne) SetLastModifier(m *model.Modifier) *EnterprisePriceUpdateOne {
	epuo.mutation.SetLastModifier(m)
	return epuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (epuo *EnterprisePriceUpdateOne) ClearLastModifier() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearLastModifier()
	return epuo
}

// SetRemark sets the "remark" field.
func (epuo *EnterprisePriceUpdateOne) SetRemark(s string) *EnterprisePriceUpdateOne {
	epuo.mutation.SetRemark(s)
	return epuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableRemark(s *string) *EnterprisePriceUpdateOne {
	if s != nil {
		epuo.SetRemark(*s)
	}
	return epuo
}

// ClearRemark clears the value of the "remark" field.
func (epuo *EnterprisePriceUpdateOne) ClearRemark() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearRemark()
	return epuo
}

// SetCityID sets the "city_id" field.
func (epuo *EnterprisePriceUpdateOne) SetCityID(u uint64) *EnterprisePriceUpdateOne {
	epuo.mutation.SetCityID(u)
	return epuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableCityID(u *uint64) *EnterprisePriceUpdateOne {
	if u != nil {
		epuo.SetCityID(*u)
	}
	return epuo
}

// SetBrandID sets the "brand_id" field.
func (epuo *EnterprisePriceUpdateOne) SetBrandID(u uint64) *EnterprisePriceUpdateOne {
	epuo.mutation.SetBrandID(u)
	return epuo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableBrandID(u *uint64) *EnterprisePriceUpdateOne {
	if u != nil {
		epuo.SetBrandID(*u)
	}
	return epuo
}

// ClearBrandID clears the value of the "brand_id" field.
func (epuo *EnterprisePriceUpdateOne) ClearBrandID() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearBrandID()
	return epuo
}

// SetAgreementID sets the "agreement_id" field.
func (epuo *EnterprisePriceUpdateOne) SetAgreementID(u uint64) *EnterprisePriceUpdateOne {
	epuo.mutation.SetAgreementID(u)
	return epuo
}

// SetNillableAgreementID sets the "agreement_id" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableAgreementID(u *uint64) *EnterprisePriceUpdateOne {
	if u != nil {
		epuo.SetAgreementID(*u)
	}
	return epuo
}

// ClearAgreementID clears the value of the "agreement_id" field.
func (epuo *EnterprisePriceUpdateOne) ClearAgreementID() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearAgreementID()
	return epuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (epuo *EnterprisePriceUpdateOne) SetEnterpriseID(u uint64) *EnterprisePriceUpdateOne {
	epuo.mutation.SetEnterpriseID(u)
	return epuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableEnterpriseID(u *uint64) *EnterprisePriceUpdateOne {
	if u != nil {
		epuo.SetEnterpriseID(*u)
	}
	return epuo
}

// SetPrice sets the "price" field.
func (epuo *EnterprisePriceUpdateOne) SetPrice(f float64) *EnterprisePriceUpdateOne {
	epuo.mutation.ResetPrice()
	epuo.mutation.SetPrice(f)
	return epuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillablePrice(f *float64) *EnterprisePriceUpdateOne {
	if f != nil {
		epuo.SetPrice(*f)
	}
	return epuo
}

// AddPrice adds f to the "price" field.
func (epuo *EnterprisePriceUpdateOne) AddPrice(f float64) *EnterprisePriceUpdateOne {
	epuo.mutation.AddPrice(f)
	return epuo
}

// SetModel sets the "model" field.
func (epuo *EnterprisePriceUpdateOne) SetModel(s string) *EnterprisePriceUpdateOne {
	epuo.mutation.SetModel(s)
	return epuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableModel(s *string) *EnterprisePriceUpdateOne {
	if s != nil {
		epuo.SetModel(*s)
	}
	return epuo
}

// SetIntelligent sets the "intelligent" field.
func (epuo *EnterprisePriceUpdateOne) SetIntelligent(b bool) *EnterprisePriceUpdateOne {
	epuo.mutation.SetIntelligent(b)
	return epuo
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (epuo *EnterprisePriceUpdateOne) SetNillableIntelligent(b *bool) *EnterprisePriceUpdateOne {
	if b != nil {
		epuo.SetIntelligent(*b)
	}
	return epuo
}

// SetCity sets the "city" edge to the City entity.
func (epuo *EnterprisePriceUpdateOne) SetCity(c *City) *EnterprisePriceUpdateOne {
	return epuo.SetCityID(c.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (epuo *EnterprisePriceUpdateOne) SetBrand(e *EbikeBrand) *EnterprisePriceUpdateOne {
	return epuo.SetBrandID(e.ID)
}

// SetAgreement sets the "agreement" edge to the Agreement entity.
func (epuo *EnterprisePriceUpdateOne) SetAgreement(a *Agreement) *EnterprisePriceUpdateOne {
	return epuo.SetAgreementID(a.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (epuo *EnterprisePriceUpdateOne) SetEnterprise(e *Enterprise) *EnterprisePriceUpdateOne {
	return epuo.SetEnterpriseID(e.ID)
}

// Mutation returns the EnterprisePriceMutation object of the builder.
func (epuo *EnterprisePriceUpdateOne) Mutation() *EnterprisePriceMutation {
	return epuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (epuo *EnterprisePriceUpdateOne) ClearCity() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearCity()
	return epuo
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (epuo *EnterprisePriceUpdateOne) ClearBrand() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearBrand()
	return epuo
}

// ClearAgreement clears the "agreement" edge to the Agreement entity.
func (epuo *EnterprisePriceUpdateOne) ClearAgreement() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearAgreement()
	return epuo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (epuo *EnterprisePriceUpdateOne) ClearEnterprise() *EnterprisePriceUpdateOne {
	epuo.mutation.ClearEnterprise()
	return epuo
}

// Where appends a list predicates to the EnterprisePriceUpdate builder.
func (epuo *EnterprisePriceUpdateOne) Where(ps ...predicate.EnterprisePrice) *EnterprisePriceUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EnterprisePriceUpdateOne) Select(field string, fields ...string) *EnterprisePriceUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EnterprisePrice entity.
func (epuo *EnterprisePriceUpdateOne) Save(ctx context.Context) (*EnterprisePrice, error) {
	if err := epuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EnterprisePriceUpdateOne) SaveX(ctx context.Context) *EnterprisePrice {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EnterprisePriceUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EnterprisePriceUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EnterprisePriceUpdateOne) defaults() error {
	if _, ok := epuo.mutation.UpdatedAt(); !ok {
		if enterpriseprice.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized enterpriseprice.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := enterpriseprice.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epuo *EnterprisePriceUpdateOne) check() error {
	if epuo.mutation.CityCleared() && len(epuo.mutation.CityIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrice.city"`)
	}
	if epuo.mutation.EnterpriseCleared() && len(epuo.mutation.EnterpriseIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "EnterprisePrice.enterprise"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epuo *EnterprisePriceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EnterprisePriceUpdateOne {
	epuo.modifiers = append(epuo.modifiers, modifiers...)
	return epuo
}

func (epuo *EnterprisePriceUpdateOne) sqlSave(ctx context.Context) (_node *EnterprisePrice, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enterpriseprice.Table, enterpriseprice.Columns, sqlgraph.NewFieldSpec(enterpriseprice.FieldID, field.TypeUint64))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnterprisePrice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterpriseprice.FieldID)
		for _, f := range fields {
			if !enterpriseprice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enterpriseprice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(enterpriseprice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := epuo.mutation.DeletedAt(); ok {
		_spec.SetField(enterpriseprice.FieldDeletedAt, field.TypeTime, value)
	}
	if epuo.mutation.DeletedAtCleared() {
		_spec.ClearField(enterpriseprice.FieldDeletedAt, field.TypeTime)
	}
	if epuo.mutation.CreatorCleared() {
		_spec.ClearField(enterpriseprice.FieldCreator, field.TypeJSON)
	}
	if value, ok := epuo.mutation.LastModifier(); ok {
		_spec.SetField(enterpriseprice.FieldLastModifier, field.TypeJSON, value)
	}
	if epuo.mutation.LastModifierCleared() {
		_spec.ClearField(enterpriseprice.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := epuo.mutation.Remark(); ok {
		_spec.SetField(enterpriseprice.FieldRemark, field.TypeString, value)
	}
	if epuo.mutation.RemarkCleared() {
		_spec.ClearField(enterpriseprice.FieldRemark, field.TypeString)
	}
	if value, ok := epuo.mutation.Price(); ok {
		_spec.SetField(enterpriseprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := epuo.mutation.AddedPrice(); ok {
		_spec.AddField(enterpriseprice.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := epuo.mutation.Model(); ok {
		_spec.SetField(enterpriseprice.FieldModel, field.TypeString, value)
	}
	if value, ok := epuo.mutation.Intelligent(); ok {
		_spec.SetField(enterpriseprice.FieldIntelligent, field.TypeBool, value)
	}
	if epuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.CityTable,
			Columns: []string{enterpriseprice.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.BrandTable,
			Columns: []string{enterpriseprice.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.AgreementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.AgreementTable,
			Columns: []string{enterpriseprice.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.AgreementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   enterpriseprice.AgreementTable,
			Columns: []string{enterpriseprice.AgreementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enterpriseprice.EnterpriseTable,
			Columns: []string{enterpriseprice.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(epuo.modifiers...)
	_node = &EnterprisePrice{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enterpriseprice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
