// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// RiderCreate is the builder for creating a Rider entity.
type RiderCreate struct {
	config
	mutation *RiderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RiderCreate) SetCreatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableCreatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RiderCreate) SetUpdatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableUpdatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RiderCreate) SetDeletedAt(t time.Time) *RiderCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableDeletedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetLastModifier sets the "last_modifier" field.
func (rc *RiderCreate) SetLastModifier(m *model.Modifier) *RiderCreate {
	rc.mutation.SetLastModifier(m)
	return rc
}

// SetRemark sets the "remark" field.
func (rc *RiderCreate) SetRemark(s string) *RiderCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *RiderCreate) SetNillableRemark(s *string) *RiderCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetPersonID sets the "person_id" field.
func (rc *RiderCreate) SetPersonID(u uint64) *RiderCreate {
	rc.mutation.SetPersonID(u)
	return rc
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePersonID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetPersonID(*u)
	}
	return rc
}

// SetCityID sets the "city_id" field.
func (rc *RiderCreate) SetCityID(u uint64) *RiderCreate {
	rc.mutation.SetCityID(u)
	return rc
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableCityID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetCityID(*u)
	}
	return rc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (rc *RiderCreate) SetEnterpriseID(u uint64) *RiderCreate {
	rc.mutation.SetEnterpriseID(u)
	return rc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableEnterpriseID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetEnterpriseID(*u)
	}
	return rc
}

// SetPhone sets the "phone" field.
func (rc *RiderCreate) SetPhone(s string) *RiderCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetContact sets the "contact" field.
func (rc *RiderCreate) SetContact(mc *model.RiderContact) *RiderCreate {
	rc.mutation.SetContact(mc)
	return rc
}

// SetDeviceType sets the "device_type" field.
func (rc *RiderCreate) SetDeviceType(u uint8) *RiderCreate {
	rc.mutation.SetDeviceType(u)
	return rc
}

// SetLastDevice sets the "last_device" field.
func (rc *RiderCreate) SetLastDevice(s string) *RiderCreate {
	rc.mutation.SetLastDevice(s)
	return rc
}

// SetIsNewDevice sets the "is_new_device" field.
func (rc *RiderCreate) SetIsNewDevice(b bool) *RiderCreate {
	rc.mutation.SetIsNewDevice(b)
	return rc
}

// SetNillableIsNewDevice sets the "is_new_device" field if the given value is not nil.
func (rc *RiderCreate) SetNillableIsNewDevice(b *bool) *RiderCreate {
	if b != nil {
		rc.SetIsNewDevice(*b)
	}
	return rc
}

// SetLastFace sets the "last_face" field.
func (rc *RiderCreate) SetLastFace(s string) *RiderCreate {
	rc.mutation.SetLastFace(s)
	return rc
}

// SetNillableLastFace sets the "last_face" field if the given value is not nil.
func (rc *RiderCreate) SetNillableLastFace(s *string) *RiderCreate {
	if s != nil {
		rc.SetLastFace(*s)
	}
	return rc
}

// SetPushID sets the "push_id" field.
func (rc *RiderCreate) SetPushID(s string) *RiderCreate {
	rc.mutation.SetPushID(s)
	return rc
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePushID(s *string) *RiderCreate {
	if s != nil {
		rc.SetPushID(*s)
	}
	return rc
}

// SetLastSigninAt sets the "last_signin_at" field.
func (rc *RiderCreate) SetLastSigninAt(t time.Time) *RiderCreate {
	rc.mutation.SetLastSigninAt(t)
	return rc
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableLastSigninAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetLastSigninAt(*t)
	}
	return rc
}

// SetEsignAccountID sets the "esign_account_id" field.
func (rc *RiderCreate) SetEsignAccountID(s string) *RiderCreate {
	rc.mutation.SetEsignAccountID(s)
	return rc
}

// SetNillableEsignAccountID sets the "esign_account_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableEsignAccountID(s *string) *RiderCreate {
	if s != nil {
		rc.SetEsignAccountID(*s)
	}
	return rc
}

// SetPlanAt sets the "plan_at" field.
func (rc *RiderCreate) SetPlanAt(t time.Time) *RiderCreate {
	rc.mutation.SetPlanAt(t)
	return rc
}

// SetNillablePlanAt sets the "plan_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePlanAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetPlanAt(*t)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RiderCreate) SetID(u uint64) *RiderCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetPerson sets the "person" edge to the Person entity.
func (rc *RiderCreate) SetPerson(p *Person) *RiderCreate {
	return rc.SetPersonID(p.ID)
}

// SetCity sets the "city" edge to the City entity.
func (rc *RiderCreate) SetCity(c *City) *RiderCreate {
	return rc.SetCityID(c.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (rc *RiderCreate) SetEnterprise(e *Enterprise) *RiderCreate {
	return rc.SetEnterpriseID(e.ID)
}

// AddContractIDs adds the "contract" edge to the Contract entity by IDs.
func (rc *RiderCreate) AddContractIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddContractIDs(ids...)
	return rc
}

// AddContract adds the "contract" edges to the Contract entity.
func (rc *RiderCreate) AddContract(c ...*Contract) *RiderCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddContractIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (rc *RiderCreate) AddFaultIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddFaultIDs(ids...)
	return rc
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (rc *RiderCreate) AddFaults(c ...*CabinetFault) *RiderCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddFaultIDs(ids...)
}

// Mutation returns the RiderMutation object of the builder.
func (rc *RiderCreate) Mutation() *RiderMutation {
	return rc.mutation
}

// Save creates the Rider in the database.
func (rc *RiderCreate) Save(ctx context.Context) (*Rider, error) {
	var (
		err  error
		node *Rider
	)
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RiderCreate) SaveX(ctx context.Context) *Rider {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RiderCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RiderCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RiderCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if rider.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := rider.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if rider.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rider.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.IsNewDevice(); !ok {
		v := rider.DefaultIsNewDevice
		rc.mutation.SetIsNewDevice(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RiderCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Rider.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Rider.updated_at"`)}
	}
	if _, ok := rc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Rider.phone"`)}
	}
	if v, ok := rc.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Rider.phone": %w`, err)}
		}
	}
	if _, ok := rc.mutation.DeviceType(); !ok {
		return &ValidationError{Name: "device_type", err: errors.New(`ent: missing required field "Rider.device_type"`)}
	}
	if _, ok := rc.mutation.LastDevice(); !ok {
		return &ValidationError{Name: "last_device", err: errors.New(`ent: missing required field "Rider.last_device"`)}
	}
	if v, ok := rc.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf(`ent: validator failed for field "Rider.last_device": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsNewDevice(); !ok {
		return &ValidationError{Name: "is_new_device", err: errors.New(`ent: missing required field "Rider.is_new_device"`)}
	}
	if v, ok := rc.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf(`ent: validator failed for field "Rider.push_id": %w`, err)}
		}
	}
	return nil
}

func (rc *RiderCreate) sqlSave(ctx context.Context) (*Rider, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (rc *RiderCreate) createSpec() (*Rider, *sqlgraph.CreateSpec) {
	var (
		_node = &Rider{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rider.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		}
	)
	_spec.OnConflict = rc.conflict
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := rc.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
		_node.Contact = value
	}
	if value, ok := rc.mutation.DeviceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldDeviceType,
		})
		_node.DeviceType = value
	}
	if value, ok := rc.mutation.LastDevice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastDevice,
		})
		_node.LastDevice = value
	}
	if value, ok := rc.mutation.IsNewDevice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rider.FieldIsNewDevice,
		})
		_node.IsNewDevice = value
	}
	if value, ok := rc.mutation.LastFace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldLastFace,
		})
		_node.LastFace = &value
	}
	if value, ok := rc.mutation.PushID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPushID,
		})
		_node.PushID = value
	}
	if value, ok := rc.mutation.LastSigninAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastSigninAt,
		})
		_node.LastSigninAt = &value
	}
	if value, ok := rc.mutation.EsignAccountID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldEsignAccountID,
		})
		_node.EsignAccountID = value
	}
	if value, ok := rc.mutation.PlanAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldPlanAt,
		})
		_node.PlanAt = value
	}
	if nodes := rc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.CityTable,
			Columns: []string{rider.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: enterprise.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractTable,
			Columns: []string{rider.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinetfault.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rider.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rc *RiderCreate) OnConflict(opts ...sql.ConflictOption) *RiderUpsertOne {
	rc.conflict = opts
	return &RiderUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rc *RiderCreate) OnConflictColumns(columns ...string) *RiderUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RiderUpsertOne{
		create: rc,
	}
}

type (
	// RiderUpsertOne is the builder for "upsert"-ing
	//  one Rider node.
	RiderUpsertOne struct {
		create *RiderCreate
	}

	// RiderUpsert is the "OnConflict" setter.
	RiderUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RiderUpsert) SetCreatedAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateCreatedAt() *RiderUpsert {
	u.SetExcluded(rider.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsert) SetUpdatedAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateUpdatedAt() *RiderUpsert {
	u.SetExcluded(rider.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsert) SetDeletedAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateDeletedAt() *RiderUpsert {
	u.SetExcluded(rider.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsert) ClearDeletedAt() *RiderUpsert {
	u.SetNull(rider.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsert) SetLastModifier(v *model.Modifier) *RiderUpsert {
	u.Set(rider.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastModifier() *RiderUpsert {
	u.SetExcluded(rider.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsert) ClearLastModifier() *RiderUpsert {
	u.SetNull(rider.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *RiderUpsert) SetRemark(v string) *RiderUpsert {
	u.Set(rider.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsert) UpdateRemark() *RiderUpsert {
	u.SetExcluded(rider.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsert) ClearRemark() *RiderUpsert {
	u.SetNull(rider.FieldRemark)
	return u
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsert) SetPersonID(v uint64) *RiderUpsert {
	u.Set(rider.FieldPersonID, v)
	return u
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePersonID() *RiderUpsert {
	u.SetExcluded(rider.FieldPersonID)
	return u
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsert) ClearPersonID() *RiderUpsert {
	u.SetNull(rider.FieldPersonID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *RiderUpsert) SetCityID(v uint64) *RiderUpsert {
	u.Set(rider.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdateCityID() *RiderUpsert {
	u.SetExcluded(rider.FieldCityID)
	return u
}

// ClearCityID clears the value of the "city_id" field.
func (u *RiderUpsert) ClearCityID() *RiderUpsert {
	u.SetNull(rider.FieldCityID)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsert) SetEnterpriseID(v uint64) *RiderUpsert {
	u.Set(rider.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdateEnterpriseID() *RiderUpsert {
	u.SetExcluded(rider.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsert) ClearEnterpriseID() *RiderUpsert {
	u.SetNull(rider.FieldEnterpriseID)
	return u
}

// SetPhone sets the "phone" field.
func (u *RiderUpsert) SetPhone(v string) *RiderUpsert {
	u.Set(rider.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePhone() *RiderUpsert {
	u.SetExcluded(rider.FieldPhone)
	return u
}

// SetContact sets the "contact" field.
func (u *RiderUpsert) SetContact(v *model.RiderContact) *RiderUpsert {
	u.Set(rider.FieldContact, v)
	return u
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsert) UpdateContact() *RiderUpsert {
	u.SetExcluded(rider.FieldContact)
	return u
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsert) ClearContact() *RiderUpsert {
	u.SetNull(rider.FieldContact)
	return u
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsert) SetDeviceType(v uint8) *RiderUpsert {
	u.Set(rider.FieldDeviceType, v)
	return u
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsert) UpdateDeviceType() *RiderUpsert {
	u.SetExcluded(rider.FieldDeviceType)
	return u
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsert) AddDeviceType(v uint8) *RiderUpsert {
	u.Add(rider.FieldDeviceType, v)
	return u
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsert) SetLastDevice(v string) *RiderUpsert {
	u.Set(rider.FieldLastDevice, v)
	return u
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastDevice() *RiderUpsert {
	u.SetExcluded(rider.FieldLastDevice)
	return u
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsert) SetIsNewDevice(v bool) *RiderUpsert {
	u.Set(rider.FieldIsNewDevice, v)
	return u
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsert) UpdateIsNewDevice() *RiderUpsert {
	u.SetExcluded(rider.FieldIsNewDevice)
	return u
}

// SetLastFace sets the "last_face" field.
func (u *RiderUpsert) SetLastFace(v string) *RiderUpsert {
	u.Set(rider.FieldLastFace, v)
	return u
}

// UpdateLastFace sets the "last_face" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastFace() *RiderUpsert {
	u.SetExcluded(rider.FieldLastFace)
	return u
}

// ClearLastFace clears the value of the "last_face" field.
func (u *RiderUpsert) ClearLastFace() *RiderUpsert {
	u.SetNull(rider.FieldLastFace)
	return u
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsert) SetPushID(v string) *RiderUpsert {
	u.Set(rider.FieldPushID, v)
	return u
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePushID() *RiderUpsert {
	u.SetExcluded(rider.FieldPushID)
	return u
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsert) ClearPushID() *RiderUpsert {
	u.SetNull(rider.FieldPushID)
	return u
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsert) SetLastSigninAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldLastSigninAt, v)
	return u
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastSigninAt() *RiderUpsert {
	u.SetExcluded(rider.FieldLastSigninAt)
	return u
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsert) ClearLastSigninAt() *RiderUpsert {
	u.SetNull(rider.FieldLastSigninAt)
	return u
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *RiderUpsert) SetEsignAccountID(v string) *RiderUpsert {
	u.Set(rider.FieldEsignAccountID, v)
	return u
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdateEsignAccountID() *RiderUpsert {
	u.SetExcluded(rider.FieldEsignAccountID)
	return u
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *RiderUpsert) ClearEsignAccountID() *RiderUpsert {
	u.SetNull(rider.FieldEsignAccountID)
	return u
}

// SetPlanAt sets the "plan_at" field.
func (u *RiderUpsert) SetPlanAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldPlanAt, v)
	return u
}

// UpdatePlanAt sets the "plan_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePlanAt() *RiderUpsert {
	u.SetExcluded(rider.FieldPlanAt)
	return u
}

// ClearPlanAt clears the value of the "plan_at" field.
func (u *RiderUpsert) ClearPlanAt() *RiderUpsert {
	u.SetNull(rider.FieldPlanAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rider.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RiderUpsertOne) UpdateNewValues() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rider.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rider.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Rider.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RiderUpsertOne) Ignore() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderUpsertOne) DoNothing() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderCreate.OnConflict
// documentation for more info.
func (u *RiderUpsertOne) Update(set func(*RiderUpsert)) *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RiderUpsertOne) SetCreatedAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateCreatedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsertOne) SetUpdatedAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateUpdatedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsertOne) SetDeletedAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateDeletedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsertOne) ClearDeletedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsertOne) SetLastModifier(v *model.Modifier) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastModifier() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsertOne) ClearLastModifier() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderUpsertOne) SetRemark(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateRemark() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsertOne) ClearRemark() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearRemark()
	})
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsertOne) SetPersonID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePersonID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsertOne) ClearPersonID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPersonID()
	})
}

// SetCityID sets the "city_id" field.
func (u *RiderUpsertOne) SetCityID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateCityID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *RiderUpsertOne) ClearCityID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearCityID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsertOne) SetEnterpriseID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateEnterpriseID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsertOne) ClearEnterpriseID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetPhone sets the "phone" field.
func (u *RiderUpsertOne) SetPhone(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePhone() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePhone()
	})
}

// SetContact sets the "contact" field.
func (u *RiderUpsertOne) SetContact(v *model.RiderContact) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateContact() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateContact()
	})
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsertOne) ClearContact() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearContact()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsertOne) SetDeviceType(v uint8) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeviceType(v)
	})
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsertOne) AddDeviceType(v uint8) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.AddDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateDeviceType() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeviceType()
	})
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsertOne) SetLastDevice(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastDevice(v)
	})
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastDevice() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastDevice()
	})
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsertOne) SetIsNewDevice(v bool) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetIsNewDevice(v)
	})
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateIsNewDevice() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIsNewDevice()
	})
}

// SetLastFace sets the "last_face" field.
func (u *RiderUpsertOne) SetLastFace(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastFace(v)
	})
}

// UpdateLastFace sets the "last_face" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastFace() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastFace()
	})
}

// ClearLastFace clears the value of the "last_face" field.
func (u *RiderUpsertOne) ClearLastFace() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastFace()
	})
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsertOne) SetPushID(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePushID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePushID()
	})
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsertOne) ClearPushID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPushID()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsertOne) SetLastSigninAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastSigninAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsertOne) ClearLastSigninAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastSigninAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *RiderUpsertOne) SetEsignAccountID(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateEsignAccountID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *RiderUpsertOne) ClearEsignAccountID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEsignAccountID()
	})
}

// SetPlanAt sets the "plan_at" field.
func (u *RiderUpsertOne) SetPlanAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPlanAt(v)
	})
}

// UpdatePlanAt sets the "plan_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePlanAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePlanAt()
	})
}

// ClearPlanAt clears the value of the "plan_at" field.
func (u *RiderUpsertOne) ClearPlanAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPlanAt()
	})
}

// Exec executes the query.
func (u *RiderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RiderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RiderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RiderCreateBulk is the builder for creating many Rider entities in bulk.
type RiderCreateBulk struct {
	config
	builders []*RiderCreate
	conflict []sql.ConflictOption
}

// Save creates the Rider entities in the database.
func (rcb *RiderCreateBulk) Save(ctx context.Context) ([]*Rider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rider, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RiderCreateBulk) SaveX(ctx context.Context) []*Rider {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RiderCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RiderCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rcb *RiderCreateBulk) OnConflict(opts ...sql.ConflictOption) *RiderUpsertBulk {
	rcb.conflict = opts
	return &RiderUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rcb *RiderCreateBulk) OnConflictColumns(columns ...string) *RiderUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RiderUpsertBulk{
		create: rcb,
	}
}

// RiderUpsertBulk is the builder for "upsert"-ing
// a bulk of Rider nodes.
type RiderUpsertBulk struct {
	create *RiderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rider.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RiderUpsertBulk) UpdateNewValues() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rider.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rider.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RiderUpsertBulk) Ignore() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderUpsertBulk) DoNothing() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderCreateBulk.OnConflict
// documentation for more info.
func (u *RiderUpsertBulk) Update(set func(*RiderUpsert)) *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RiderUpsertBulk) SetCreatedAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateCreatedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsertBulk) SetUpdatedAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateUpdatedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsertBulk) SetDeletedAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateDeletedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsertBulk) ClearDeletedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsertBulk) SetLastModifier(v *model.Modifier) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastModifier() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsertBulk) ClearLastModifier() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderUpsertBulk) SetRemark(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateRemark() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsertBulk) ClearRemark() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearRemark()
	})
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsertBulk) SetPersonID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePersonID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsertBulk) ClearPersonID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPersonID()
	})
}

// SetCityID sets the "city_id" field.
func (u *RiderUpsertBulk) SetCityID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateCityID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateCityID()
	})
}

// ClearCityID clears the value of the "city_id" field.
func (u *RiderUpsertBulk) ClearCityID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearCityID()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsertBulk) SetEnterpriseID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateEnterpriseID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsertBulk) ClearEnterpriseID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetPhone sets the "phone" field.
func (u *RiderUpsertBulk) SetPhone(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePhone() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePhone()
	})
}

// SetContact sets the "contact" field.
func (u *RiderUpsertBulk) SetContact(v *model.RiderContact) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateContact() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateContact()
	})
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsertBulk) ClearContact() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearContact()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsertBulk) SetDeviceType(v uint8) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeviceType(v)
	})
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsertBulk) AddDeviceType(v uint8) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.AddDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateDeviceType() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeviceType()
	})
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsertBulk) SetLastDevice(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastDevice(v)
	})
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastDevice() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastDevice()
	})
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsertBulk) SetIsNewDevice(v bool) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetIsNewDevice(v)
	})
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateIsNewDevice() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIsNewDevice()
	})
}

// SetLastFace sets the "last_face" field.
func (u *RiderUpsertBulk) SetLastFace(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastFace(v)
	})
}

// UpdateLastFace sets the "last_face" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastFace() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastFace()
	})
}

// ClearLastFace clears the value of the "last_face" field.
func (u *RiderUpsertBulk) ClearLastFace() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastFace()
	})
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsertBulk) SetPushID(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePushID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePushID()
	})
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsertBulk) ClearPushID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPushID()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsertBulk) SetLastSigninAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastSigninAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsertBulk) ClearLastSigninAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastSigninAt()
	})
}

// SetEsignAccountID sets the "esign_account_id" field.
func (u *RiderUpsertBulk) SetEsignAccountID(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetEsignAccountID(v)
	})
}

// UpdateEsignAccountID sets the "esign_account_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateEsignAccountID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEsignAccountID()
	})
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (u *RiderUpsertBulk) ClearEsignAccountID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEsignAccountID()
	})
}

// SetPlanAt sets the "plan_at" field.
func (u *RiderUpsertBulk) SetPlanAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPlanAt(v)
	})
}

// UpdatePlanAt sets the "plan_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePlanAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePlanAt()
	})
}

// ClearPlanAt clears the value of the "plan_at" field.
func (u *RiderUpsertBulk) ClearPlanAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPlanAt()
	})
}

// Exec executes the query.
func (u *RiderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RiderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
