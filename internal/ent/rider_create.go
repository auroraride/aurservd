// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/riderfollowup"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// RiderCreate is the builder for creating a Rider entity.
type RiderCreate struct {
	config
	mutation *RiderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rc *RiderCreate) SetCreatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableCreatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RiderCreate) SetUpdatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableUpdatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RiderCreate) SetDeletedAt(t time.Time) *RiderCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableDeletedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetCreator sets the "creator" field.
func (rc *RiderCreate) SetCreator(m *model.Modifier) *RiderCreate {
	rc.mutation.SetCreator(m)
	return rc
}

// SetLastModifier sets the "last_modifier" field.
func (rc *RiderCreate) SetLastModifier(m *model.Modifier) *RiderCreate {
	rc.mutation.SetLastModifier(m)
	return rc
}

// SetRemark sets the "remark" field.
func (rc *RiderCreate) SetRemark(s string) *RiderCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *RiderCreate) SetNillableRemark(s *string) *RiderCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetStationID sets the "station_id" field.
func (rc *RiderCreate) SetStationID(u uint64) *RiderCreate {
	rc.mutation.SetStationID(u)
	return rc
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableStationID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetStationID(*u)
	}
	return rc
}

// SetPersonID sets the "person_id" field.
func (rc *RiderCreate) SetPersonID(u uint64) *RiderCreate {
	rc.mutation.SetPersonID(u)
	return rc
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePersonID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetPersonID(*u)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RiderCreate) SetName(s string) *RiderCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rc *RiderCreate) SetNillableName(s *string) *RiderCreate {
	if s != nil {
		rc.SetName(*s)
	}
	return rc
}

// SetIDCardNumber sets the "id_card_number" field.
func (rc *RiderCreate) SetIDCardNumber(s string) *RiderCreate {
	rc.mutation.SetIDCardNumber(s)
	return rc
}

// SetNillableIDCardNumber sets the "id_card_number" field if the given value is not nil.
func (rc *RiderCreate) SetNillableIDCardNumber(s *string) *RiderCreate {
	if s != nil {
		rc.SetIDCardNumber(*s)
	}
	return rc
}

// SetEnterpriseID sets the "enterprise_id" field.
func (rc *RiderCreate) SetEnterpriseID(u uint64) *RiderCreate {
	rc.mutation.SetEnterpriseID(u)
	return rc
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableEnterpriseID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetEnterpriseID(*u)
	}
	return rc
}

// SetPhone sets the "phone" field.
func (rc *RiderCreate) SetPhone(s string) *RiderCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetContact sets the "contact" field.
func (rc *RiderCreate) SetContact(mc *model.RiderContact) *RiderCreate {
	rc.mutation.SetContact(mc)
	return rc
}

// SetDeviceType sets the "device_type" field.
func (rc *RiderCreate) SetDeviceType(u uint8) *RiderCreate {
	rc.mutation.SetDeviceType(u)
	return rc
}

// SetNillableDeviceType sets the "device_type" field if the given value is not nil.
func (rc *RiderCreate) SetNillableDeviceType(u *uint8) *RiderCreate {
	if u != nil {
		rc.SetDeviceType(*u)
	}
	return rc
}

// SetLastDevice sets the "last_device" field.
func (rc *RiderCreate) SetLastDevice(s string) *RiderCreate {
	rc.mutation.SetLastDevice(s)
	return rc
}

// SetNillableLastDevice sets the "last_device" field if the given value is not nil.
func (rc *RiderCreate) SetNillableLastDevice(s *string) *RiderCreate {
	if s != nil {
		rc.SetLastDevice(*s)
	}
	return rc
}

// SetIsNewDevice sets the "is_new_device" field.
func (rc *RiderCreate) SetIsNewDevice(b bool) *RiderCreate {
	rc.mutation.SetIsNewDevice(b)
	return rc
}

// SetNillableIsNewDevice sets the "is_new_device" field if the given value is not nil.
func (rc *RiderCreate) SetNillableIsNewDevice(b *bool) *RiderCreate {
	if b != nil {
		rc.SetIsNewDevice(*b)
	}
	return rc
}

// SetPushID sets the "push_id" field.
func (rc *RiderCreate) SetPushID(s string) *RiderCreate {
	rc.mutation.SetPushID(s)
	return rc
}

// SetNillablePushID sets the "push_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePushID(s *string) *RiderCreate {
	if s != nil {
		rc.SetPushID(*s)
	}
	return rc
}

// SetLastSigninAt sets the "last_signin_at" field.
func (rc *RiderCreate) SetLastSigninAt(t time.Time) *RiderCreate {
	rc.mutation.SetLastSigninAt(t)
	return rc
}

// SetNillableLastSigninAt sets the "last_signin_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableLastSigninAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetLastSigninAt(*t)
	}
	return rc
}

// SetBlocked sets the "blocked" field.
func (rc *RiderCreate) SetBlocked(b bool) *RiderCreate {
	rc.mutation.SetBlocked(b)
	return rc
}

// SetNillableBlocked sets the "blocked" field if the given value is not nil.
func (rc *RiderCreate) SetNillableBlocked(b *bool) *RiderCreate {
	if b != nil {
		rc.SetBlocked(*b)
	}
	return rc
}

// SetPoints sets the "points" field.
func (rc *RiderCreate) SetPoints(i int64) *RiderCreate {
	rc.mutation.SetPoints(i)
	return rc
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePoints(i *int64) *RiderCreate {
	if i != nil {
		rc.SetPoints(*i)
	}
	return rc
}

// SetExchangeLimit sets the "exchange_limit" field.
func (rc *RiderCreate) SetExchangeLimit(mel model.RiderExchangeLimit) *RiderCreate {
	rc.mutation.SetExchangeLimit(mel)
	return rc
}

// SetExchangeFrequency sets the "exchange_frequency" field.
func (rc *RiderCreate) SetExchangeFrequency(mef model.RiderExchangeFrequency) *RiderCreate {
	rc.mutation.SetExchangeFrequency(mef)
	return rc
}

// SetJoinEnterpriseAt sets the "join_enterprise_at" field.
func (rc *RiderCreate) SetJoinEnterpriseAt(t time.Time) *RiderCreate {
	rc.mutation.SetJoinEnterpriseAt(t)
	return rc
}

// SetNillableJoinEnterpriseAt sets the "join_enterprise_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableJoinEnterpriseAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetJoinEnterpriseAt(*t)
	}
	return rc
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (rc *RiderCreate) SetStation(e *EnterpriseStation) *RiderCreate {
	return rc.SetStationID(e.ID)
}

// SetPerson sets the "person" edge to the Person entity.
func (rc *RiderCreate) SetPerson(p *Person) *RiderCreate {
	return rc.SetPersonID(p.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (rc *RiderCreate) SetEnterprise(e *Enterprise) *RiderCreate {
	return rc.SetEnterpriseID(e.ID)
}

// AddContractIDs adds the "contracts" edge to the Contract entity by IDs.
func (rc *RiderCreate) AddContractIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddContractIDs(ids...)
	return rc
}

// AddContracts adds the "contracts" edges to the Contract entity.
func (rc *RiderCreate) AddContracts(c ...*Contract) *RiderCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddContractIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (rc *RiderCreate) AddFaultIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddFaultIDs(ids...)
	return rc
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (rc *RiderCreate) AddFaults(c ...*CabinetFault) *RiderCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddFaultIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (rc *RiderCreate) AddOrderIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddOrderIDs(ids...)
	return rc
}

// AddOrders adds the "orders" edges to the Order entity.
func (rc *RiderCreate) AddOrders(o ...*Order) *RiderCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return rc.AddOrderIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (rc *RiderCreate) AddExchangeIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddExchangeIDs(ids...)
	return rc
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (rc *RiderCreate) AddExchanges(e ...*Exchange) *RiderCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddExchangeIDs(ids...)
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by IDs.
func (rc *RiderCreate) AddSubscribeIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddSubscribeIDs(ids...)
	return rc
}

// AddSubscribes adds the "subscribes" edges to the Subscribe entity.
func (rc *RiderCreate) AddSubscribes(s ...*Subscribe) *RiderCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddSubscribeIDs(ids...)
}

// AddAssetIDs adds the "asset" edge to the Asset entity by IDs.
func (rc *RiderCreate) AddAssetIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddAssetIDs(ids...)
	return rc
}

// AddAsset adds the "asset" edges to the Asset entity.
func (rc *RiderCreate) AddAsset(a ...*Asset) *RiderCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddAssetIDs(ids...)
}

// AddFollowupIDs adds the "followups" edge to the RiderFollowUp entity by IDs.
func (rc *RiderCreate) AddFollowupIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddFollowupIDs(ids...)
	return rc
}

// AddFollowups adds the "followups" edges to the RiderFollowUp entity.
func (rc *RiderCreate) AddFollowups(r ...*RiderFollowUp) *RiderCreate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddFollowupIDs(ids...)
}

// SetBatteryID sets the "battery" edge to the Battery entity by ID.
func (rc *RiderCreate) SetBatteryID(id uint64) *RiderCreate {
	rc.mutation.SetBatteryID(id)
	return rc
}

// SetNillableBatteryID sets the "battery" edge to the Battery entity by ID if the given value is not nil.
func (rc *RiderCreate) SetNillableBatteryID(id *uint64) *RiderCreate {
	if id != nil {
		rc = rc.SetBatteryID(*id)
	}
	return rc
}

// SetBattery sets the "battery" edge to the Battery entity.
func (rc *RiderCreate) SetBattery(b *Battery) *RiderCreate {
	return rc.SetBatteryID(b.ID)
}

// AddBatteryFlowIDs adds the "battery_flows" edge to the BatteryFlow entity by IDs.
func (rc *RiderCreate) AddBatteryFlowIDs(ids ...uint64) *RiderCreate {
	rc.mutation.AddBatteryFlowIDs(ids...)
	return rc
}

// AddBatteryFlows adds the "battery_flows" edges to the BatteryFlow entity.
func (rc *RiderCreate) AddBatteryFlows(b ...*BatteryFlow) *RiderCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rc.AddBatteryFlowIDs(ids...)
}

// Mutation returns the RiderMutation object of the builder.
func (rc *RiderCreate) Mutation() *RiderMutation {
	return rc.mutation
}

// Save creates the Rider in the database.
func (rc *RiderCreate) Save(ctx context.Context) (*Rider, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RiderCreate) SaveX(ctx context.Context) *Rider {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RiderCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RiderCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RiderCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if rider.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := rider.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if rider.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rider.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rider.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.IsNewDevice(); !ok {
		v := rider.DefaultIsNewDevice
		rc.mutation.SetIsNewDevice(v)
	}
	if _, ok := rc.mutation.Blocked(); !ok {
		v := rider.DefaultBlocked
		rc.mutation.SetBlocked(v)
	}
	if _, ok := rc.mutation.Points(); !ok {
		v := rider.DefaultPoints
		rc.mutation.SetPoints(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RiderCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Rider.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Rider.updated_at"`)}
	}
	if _, ok := rc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Rider.phone"`)}
	}
	if v, ok := rc.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Rider.phone": %w`, err)}
		}
	}
	if v, ok := rc.mutation.LastDevice(); ok {
		if err := rider.LastDeviceValidator(v); err != nil {
			return &ValidationError{Name: "last_device", err: fmt.Errorf(`ent: validator failed for field "Rider.last_device": %w`, err)}
		}
	}
	if _, ok := rc.mutation.IsNewDevice(); !ok {
		return &ValidationError{Name: "is_new_device", err: errors.New(`ent: missing required field "Rider.is_new_device"`)}
	}
	if v, ok := rc.mutation.PushID(); ok {
		if err := rider.PushIDValidator(v); err != nil {
			return &ValidationError{Name: "push_id", err: fmt.Errorf(`ent: validator failed for field "Rider.push_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Blocked(); !ok {
		return &ValidationError{Name: "blocked", err: errors.New(`ent: missing required field "Rider.blocked"`)}
	}
	if _, ok := rc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "Rider.points"`)}
	}
	return nil
}

func (rc *RiderCreate) sqlSave(ctx context.Context) (*Rider, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RiderCreate) createSpec() (*Rider, *sqlgraph.CreateSpec) {
	var (
		_node = &Rider{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rider.Table, sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(rider.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(rider.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(rider.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.Creator(); ok {
		_spec.SetField(rider.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := rc.mutation.LastModifier(); ok {
		_spec.SetField(rider.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.SetField(rider.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(rider.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.IDCardNumber(); ok {
		_spec.SetField(rider.FieldIDCardNumber, field.TypeString, value)
		_node.IDCardNumber = value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.SetField(rider.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := rc.mutation.Contact(); ok {
		_spec.SetField(rider.FieldContact, field.TypeJSON, value)
		_node.Contact = value
	}
	if value, ok := rc.mutation.DeviceType(); ok {
		_spec.SetField(rider.FieldDeviceType, field.TypeUint8, value)
		_node.DeviceType = value
	}
	if value, ok := rc.mutation.LastDevice(); ok {
		_spec.SetField(rider.FieldLastDevice, field.TypeString, value)
		_node.LastDevice = value
	}
	if value, ok := rc.mutation.IsNewDevice(); ok {
		_spec.SetField(rider.FieldIsNewDevice, field.TypeBool, value)
		_node.IsNewDevice = value
	}
	if value, ok := rc.mutation.PushID(); ok {
		_spec.SetField(rider.FieldPushID, field.TypeString, value)
		_node.PushID = value
	}
	if value, ok := rc.mutation.LastSigninAt(); ok {
		_spec.SetField(rider.FieldLastSigninAt, field.TypeTime, value)
		_node.LastSigninAt = &value
	}
	if value, ok := rc.mutation.Blocked(); ok {
		_spec.SetField(rider.FieldBlocked, field.TypeBool, value)
		_node.Blocked = value
	}
	if value, ok := rc.mutation.Points(); ok {
		_spec.SetField(rider.FieldPoints, field.TypeInt64, value)
		_node.Points = value
	}
	if value, ok := rc.mutation.ExchangeLimit(); ok {
		_spec.SetField(rider.FieldExchangeLimit, field.TypeJSON, value)
		_node.ExchangeLimit = value
	}
	if value, ok := rc.mutation.ExchangeFrequency(); ok {
		_spec.SetField(rider.FieldExchangeFrequency, field.TypeJSON, value)
		_node.ExchangeFrequency = value
	}
	if value, ok := rc.mutation.JoinEnterpriseAt(); ok {
		_spec.SetField(rider.FieldJoinEnterpriseAt, field.TypeTime, value)
		_node.JoinEnterpriseAt = &value
	}
	if nodes := rc.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rider.StationTable,
			Columns: []string{rider.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.EnterpriseTable,
			Columns: []string{rider.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnterpriseID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ContractsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ContractsTable,
			Columns: []string{rider.ContractsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FaultsTable,
			Columns: []string{rider.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.OrdersTable,
			Columns: []string{rider.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.ExchangesTable,
			Columns: []string{rider.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SubscribesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.SubscribesTable,
			Columns: []string{rider.SubscribesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.AssetTable,
			Columns: []string{rider.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.FollowupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.FollowupsTable,
			Columns: []string{rider.FollowupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(riderfollowup.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rider.BatteryTable,
			Columns: []string{rider.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BatteryFlowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rider.BatteryFlowsTable,
			Columns: []string{rider.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rider.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rc *RiderCreate) OnConflict(opts ...sql.ConflictOption) *RiderUpsertOne {
	rc.conflict = opts
	return &RiderUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RiderCreate) OnConflictColumns(columns ...string) *RiderUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RiderUpsertOne{
		create: rc,
	}
}

type (
	// RiderUpsertOne is the builder for "upsert"-ing
	//  one Rider node.
	RiderUpsertOne struct {
		create *RiderCreate
	}

	// RiderUpsert is the "OnConflict" setter.
	RiderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsert) SetUpdatedAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateUpdatedAt() *RiderUpsert {
	u.SetExcluded(rider.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsert) SetDeletedAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateDeletedAt() *RiderUpsert {
	u.SetExcluded(rider.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsert) ClearDeletedAt() *RiderUpsert {
	u.SetNull(rider.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsert) SetLastModifier(v *model.Modifier) *RiderUpsert {
	u.Set(rider.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastModifier() *RiderUpsert {
	u.SetExcluded(rider.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsert) ClearLastModifier() *RiderUpsert {
	u.SetNull(rider.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *RiderUpsert) SetRemark(v string) *RiderUpsert {
	u.Set(rider.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsert) UpdateRemark() *RiderUpsert {
	u.SetExcluded(rider.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsert) ClearRemark() *RiderUpsert {
	u.SetNull(rider.FieldRemark)
	return u
}

// SetStationID sets the "station_id" field.
func (u *RiderUpsert) SetStationID(v uint64) *RiderUpsert {
	u.Set(rider.FieldStationID, v)
	return u
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdateStationID() *RiderUpsert {
	u.SetExcluded(rider.FieldStationID)
	return u
}

// ClearStationID clears the value of the "station_id" field.
func (u *RiderUpsert) ClearStationID() *RiderUpsert {
	u.SetNull(rider.FieldStationID)
	return u
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsert) SetPersonID(v uint64) *RiderUpsert {
	u.Set(rider.FieldPersonID, v)
	return u
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePersonID() *RiderUpsert {
	u.SetExcluded(rider.FieldPersonID)
	return u
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsert) ClearPersonID() *RiderUpsert {
	u.SetNull(rider.FieldPersonID)
	return u
}

// SetName sets the "name" field.
func (u *RiderUpsert) SetName(v string) *RiderUpsert {
	u.Set(rider.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RiderUpsert) UpdateName() *RiderUpsert {
	u.SetExcluded(rider.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RiderUpsert) ClearName() *RiderUpsert {
	u.SetNull(rider.FieldName)
	return u
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *RiderUpsert) SetIDCardNumber(v string) *RiderUpsert {
	u.Set(rider.FieldIDCardNumber, v)
	return u
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *RiderUpsert) UpdateIDCardNumber() *RiderUpsert {
	u.SetExcluded(rider.FieldIDCardNumber)
	return u
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *RiderUpsert) ClearIDCardNumber() *RiderUpsert {
	u.SetNull(rider.FieldIDCardNumber)
	return u
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsert) SetEnterpriseID(v uint64) *RiderUpsert {
	u.Set(rider.FieldEnterpriseID, v)
	return u
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdateEnterpriseID() *RiderUpsert {
	u.SetExcluded(rider.FieldEnterpriseID)
	return u
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsert) ClearEnterpriseID() *RiderUpsert {
	u.SetNull(rider.FieldEnterpriseID)
	return u
}

// SetPhone sets the "phone" field.
func (u *RiderUpsert) SetPhone(v string) *RiderUpsert {
	u.Set(rider.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePhone() *RiderUpsert {
	u.SetExcluded(rider.FieldPhone)
	return u
}

// SetContact sets the "contact" field.
func (u *RiderUpsert) SetContact(v *model.RiderContact) *RiderUpsert {
	u.Set(rider.FieldContact, v)
	return u
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsert) UpdateContact() *RiderUpsert {
	u.SetExcluded(rider.FieldContact)
	return u
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsert) ClearContact() *RiderUpsert {
	u.SetNull(rider.FieldContact)
	return u
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsert) SetDeviceType(v uint8) *RiderUpsert {
	u.Set(rider.FieldDeviceType, v)
	return u
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsert) UpdateDeviceType() *RiderUpsert {
	u.SetExcluded(rider.FieldDeviceType)
	return u
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsert) AddDeviceType(v uint8) *RiderUpsert {
	u.Add(rider.FieldDeviceType, v)
	return u
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *RiderUpsert) ClearDeviceType() *RiderUpsert {
	u.SetNull(rider.FieldDeviceType)
	return u
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsert) SetLastDevice(v string) *RiderUpsert {
	u.Set(rider.FieldLastDevice, v)
	return u
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastDevice() *RiderUpsert {
	u.SetExcluded(rider.FieldLastDevice)
	return u
}

// ClearLastDevice clears the value of the "last_device" field.
func (u *RiderUpsert) ClearLastDevice() *RiderUpsert {
	u.SetNull(rider.FieldLastDevice)
	return u
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsert) SetIsNewDevice(v bool) *RiderUpsert {
	u.Set(rider.FieldIsNewDevice, v)
	return u
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsert) UpdateIsNewDevice() *RiderUpsert {
	u.SetExcluded(rider.FieldIsNewDevice)
	return u
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsert) SetPushID(v string) *RiderUpsert {
	u.Set(rider.FieldPushID, v)
	return u
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePushID() *RiderUpsert {
	u.SetExcluded(rider.FieldPushID)
	return u
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsert) ClearPushID() *RiderUpsert {
	u.SetNull(rider.FieldPushID)
	return u
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsert) SetLastSigninAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldLastSigninAt, v)
	return u
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateLastSigninAt() *RiderUpsert {
	u.SetExcluded(rider.FieldLastSigninAt)
	return u
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsert) ClearLastSigninAt() *RiderUpsert {
	u.SetNull(rider.FieldLastSigninAt)
	return u
}

// SetBlocked sets the "blocked" field.
func (u *RiderUpsert) SetBlocked(v bool) *RiderUpsert {
	u.Set(rider.FieldBlocked, v)
	return u
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *RiderUpsert) UpdateBlocked() *RiderUpsert {
	u.SetExcluded(rider.FieldBlocked)
	return u
}

// SetPoints sets the "points" field.
func (u *RiderUpsert) SetPoints(v int64) *RiderUpsert {
	u.Set(rider.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *RiderUpsert) UpdatePoints() *RiderUpsert {
	u.SetExcluded(rider.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *RiderUpsert) AddPoints(v int64) *RiderUpsert {
	u.Add(rider.FieldPoints, v)
	return u
}

// SetExchangeLimit sets the "exchange_limit" field.
func (u *RiderUpsert) SetExchangeLimit(v model.RiderExchangeLimit) *RiderUpsert {
	u.Set(rider.FieldExchangeLimit, v)
	return u
}

// UpdateExchangeLimit sets the "exchange_limit" field to the value that was provided on create.
func (u *RiderUpsert) UpdateExchangeLimit() *RiderUpsert {
	u.SetExcluded(rider.FieldExchangeLimit)
	return u
}

// ClearExchangeLimit clears the value of the "exchange_limit" field.
func (u *RiderUpsert) ClearExchangeLimit() *RiderUpsert {
	u.SetNull(rider.FieldExchangeLimit)
	return u
}

// SetExchangeFrequency sets the "exchange_frequency" field.
func (u *RiderUpsert) SetExchangeFrequency(v model.RiderExchangeFrequency) *RiderUpsert {
	u.Set(rider.FieldExchangeFrequency, v)
	return u
}

// UpdateExchangeFrequency sets the "exchange_frequency" field to the value that was provided on create.
func (u *RiderUpsert) UpdateExchangeFrequency() *RiderUpsert {
	u.SetExcluded(rider.FieldExchangeFrequency)
	return u
}

// ClearExchangeFrequency clears the value of the "exchange_frequency" field.
func (u *RiderUpsert) ClearExchangeFrequency() *RiderUpsert {
	u.SetNull(rider.FieldExchangeFrequency)
	return u
}

// SetJoinEnterpriseAt sets the "join_enterprise_at" field.
func (u *RiderUpsert) SetJoinEnterpriseAt(v time.Time) *RiderUpsert {
	u.Set(rider.FieldJoinEnterpriseAt, v)
	return u
}

// UpdateJoinEnterpriseAt sets the "join_enterprise_at" field to the value that was provided on create.
func (u *RiderUpsert) UpdateJoinEnterpriseAt() *RiderUpsert {
	u.SetExcluded(rider.FieldJoinEnterpriseAt)
	return u
}

// ClearJoinEnterpriseAt clears the value of the "join_enterprise_at" field.
func (u *RiderUpsert) ClearJoinEnterpriseAt() *RiderUpsert {
	u.SetNull(rider.FieldJoinEnterpriseAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderUpsertOne) UpdateNewValues() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(rider.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(rider.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rider.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RiderUpsertOne) Ignore() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderUpsertOne) DoNothing() *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderCreate.OnConflict
// documentation for more info.
func (u *RiderUpsertOne) Update(set func(*RiderUpsert)) *RiderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsertOne) SetUpdatedAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateUpdatedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsertOne) SetDeletedAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateDeletedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsertOne) ClearDeletedAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsertOne) SetLastModifier(v *model.Modifier) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastModifier() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsertOne) ClearLastModifier() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderUpsertOne) SetRemark(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateRemark() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsertOne) ClearRemark() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearRemark()
	})
}

// SetStationID sets the "station_id" field.
func (u *RiderUpsertOne) SetStationID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateStationID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *RiderUpsertOne) ClearStationID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearStationID()
	})
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsertOne) SetPersonID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePersonID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsertOne) ClearPersonID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPersonID()
	})
}

// SetName sets the "name" field.
func (u *RiderUpsertOne) SetName(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateName() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RiderUpsertOne) ClearName() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *RiderUpsertOne) SetIDCardNumber(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateIDCardNumber() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIDCardNumber()
	})
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *RiderUpsertOne) ClearIDCardNumber() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearIDCardNumber()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsertOne) SetEnterpriseID(v uint64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateEnterpriseID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsertOne) ClearEnterpriseID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetPhone sets the "phone" field.
func (u *RiderUpsertOne) SetPhone(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePhone() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePhone()
	})
}

// SetContact sets the "contact" field.
func (u *RiderUpsertOne) SetContact(v *model.RiderContact) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateContact() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateContact()
	})
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsertOne) ClearContact() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearContact()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsertOne) SetDeviceType(v uint8) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeviceType(v)
	})
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsertOne) AddDeviceType(v uint8) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.AddDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateDeviceType() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeviceType()
	})
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *RiderUpsertOne) ClearDeviceType() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeviceType()
	})
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsertOne) SetLastDevice(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastDevice(v)
	})
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastDevice() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastDevice()
	})
}

// ClearLastDevice clears the value of the "last_device" field.
func (u *RiderUpsertOne) ClearLastDevice() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastDevice()
	})
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsertOne) SetIsNewDevice(v bool) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetIsNewDevice(v)
	})
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateIsNewDevice() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIsNewDevice()
	})
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsertOne) SetPushID(v string) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePushID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePushID()
	})
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsertOne) ClearPushID() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPushID()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsertOne) SetLastSigninAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateLastSigninAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsertOne) ClearLastSigninAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastSigninAt()
	})
}

// SetBlocked sets the "blocked" field.
func (u *RiderUpsertOne) SetBlocked(v bool) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateBlocked() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateBlocked()
	})
}

// SetPoints sets the "points" field.
func (u *RiderUpsertOne) SetPoints(v int64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *RiderUpsertOne) AddPoints(v int64) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdatePoints() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePoints()
	})
}

// SetExchangeLimit sets the "exchange_limit" field.
func (u *RiderUpsertOne) SetExchangeLimit(v model.RiderExchangeLimit) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetExchangeLimit(v)
	})
}

// UpdateExchangeLimit sets the "exchange_limit" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateExchangeLimit() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateExchangeLimit()
	})
}

// ClearExchangeLimit clears the value of the "exchange_limit" field.
func (u *RiderUpsertOne) ClearExchangeLimit() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearExchangeLimit()
	})
}

// SetExchangeFrequency sets the "exchange_frequency" field.
func (u *RiderUpsertOne) SetExchangeFrequency(v model.RiderExchangeFrequency) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetExchangeFrequency(v)
	})
}

// UpdateExchangeFrequency sets the "exchange_frequency" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateExchangeFrequency() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateExchangeFrequency()
	})
}

// ClearExchangeFrequency clears the value of the "exchange_frequency" field.
func (u *RiderUpsertOne) ClearExchangeFrequency() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearExchangeFrequency()
	})
}

// SetJoinEnterpriseAt sets the "join_enterprise_at" field.
func (u *RiderUpsertOne) SetJoinEnterpriseAt(v time.Time) *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.SetJoinEnterpriseAt(v)
	})
}

// UpdateJoinEnterpriseAt sets the "join_enterprise_at" field to the value that was provided on create.
func (u *RiderUpsertOne) UpdateJoinEnterpriseAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateJoinEnterpriseAt()
	})
}

// ClearJoinEnterpriseAt clears the value of the "join_enterprise_at" field.
func (u *RiderUpsertOne) ClearJoinEnterpriseAt() *RiderUpsertOne {
	return u.Update(func(s *RiderUpsert) {
		s.ClearJoinEnterpriseAt()
	})
}

// Exec executes the query.
func (u *RiderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RiderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RiderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RiderCreateBulk is the builder for creating many Rider entities in bulk.
type RiderCreateBulk struct {
	config
	err      error
	builders []*RiderCreate
	conflict []sql.ConflictOption
}

// Save creates the Rider entities in the database.
func (rcb *RiderCreateBulk) Save(ctx context.Context) ([]*Rider, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rider, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RiderCreateBulk) SaveX(ctx context.Context) []*Rider {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RiderCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RiderCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rider.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RiderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rcb *RiderCreateBulk) OnConflict(opts ...sql.ConflictOption) *RiderUpsertBulk {
	rcb.conflict = opts
	return &RiderUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RiderCreateBulk) OnConflictColumns(columns ...string) *RiderUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RiderUpsertBulk{
		create: rcb,
	}
}

// RiderUpsertBulk is the builder for "upsert"-ing
// a bulk of Rider nodes.
type RiderUpsertBulk struct {
	create *RiderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RiderUpsertBulk) UpdateNewValues() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(rider.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(rider.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rider.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RiderUpsertBulk) Ignore() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RiderUpsertBulk) DoNothing() *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RiderCreateBulk.OnConflict
// documentation for more info.
func (u *RiderUpsertBulk) Update(set func(*RiderUpsert)) *RiderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RiderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RiderUpsertBulk) SetUpdatedAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateUpdatedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RiderUpsertBulk) SetDeletedAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateDeletedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RiderUpsertBulk) ClearDeletedAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *RiderUpsertBulk) SetLastModifier(v *model.Modifier) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastModifier() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *RiderUpsertBulk) ClearLastModifier() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *RiderUpsertBulk) SetRemark(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateRemark() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RiderUpsertBulk) ClearRemark() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearRemark()
	})
}

// SetStationID sets the "station_id" field.
func (u *RiderUpsertBulk) SetStationID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetStationID(v)
	})
}

// UpdateStationID sets the "station_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateStationID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateStationID()
	})
}

// ClearStationID clears the value of the "station_id" field.
func (u *RiderUpsertBulk) ClearStationID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearStationID()
	})
}

// SetPersonID sets the "person_id" field.
func (u *RiderUpsertBulk) SetPersonID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPersonID(v)
	})
}

// UpdatePersonID sets the "person_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePersonID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePersonID()
	})
}

// ClearPersonID clears the value of the "person_id" field.
func (u *RiderUpsertBulk) ClearPersonID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPersonID()
	})
}

// SetName sets the "name" field.
func (u *RiderUpsertBulk) SetName(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateName() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RiderUpsertBulk) ClearName() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearName()
	})
}

// SetIDCardNumber sets the "id_card_number" field.
func (u *RiderUpsertBulk) SetIDCardNumber(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetIDCardNumber(v)
	})
}

// UpdateIDCardNumber sets the "id_card_number" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateIDCardNumber() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIDCardNumber()
	})
}

// ClearIDCardNumber clears the value of the "id_card_number" field.
func (u *RiderUpsertBulk) ClearIDCardNumber() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearIDCardNumber()
	})
}

// SetEnterpriseID sets the "enterprise_id" field.
func (u *RiderUpsertBulk) SetEnterpriseID(v uint64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetEnterpriseID(v)
	})
}

// UpdateEnterpriseID sets the "enterprise_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateEnterpriseID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateEnterpriseID()
	})
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (u *RiderUpsertBulk) ClearEnterpriseID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearEnterpriseID()
	})
}

// SetPhone sets the "phone" field.
func (u *RiderUpsertBulk) SetPhone(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePhone() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePhone()
	})
}

// SetContact sets the "contact" field.
func (u *RiderUpsertBulk) SetContact(v *model.RiderContact) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetContact(v)
	})
}

// UpdateContact sets the "contact" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateContact() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateContact()
	})
}

// ClearContact clears the value of the "contact" field.
func (u *RiderUpsertBulk) ClearContact() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearContact()
	})
}

// SetDeviceType sets the "device_type" field.
func (u *RiderUpsertBulk) SetDeviceType(v uint8) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetDeviceType(v)
	})
}

// AddDeviceType adds v to the "device_type" field.
func (u *RiderUpsertBulk) AddDeviceType(v uint8) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.AddDeviceType(v)
	})
}

// UpdateDeviceType sets the "device_type" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateDeviceType() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateDeviceType()
	})
}

// ClearDeviceType clears the value of the "device_type" field.
func (u *RiderUpsertBulk) ClearDeviceType() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearDeviceType()
	})
}

// SetLastDevice sets the "last_device" field.
func (u *RiderUpsertBulk) SetLastDevice(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastDevice(v)
	})
}

// UpdateLastDevice sets the "last_device" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastDevice() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastDevice()
	})
}

// ClearLastDevice clears the value of the "last_device" field.
func (u *RiderUpsertBulk) ClearLastDevice() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastDevice()
	})
}

// SetIsNewDevice sets the "is_new_device" field.
func (u *RiderUpsertBulk) SetIsNewDevice(v bool) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetIsNewDevice(v)
	})
}

// UpdateIsNewDevice sets the "is_new_device" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateIsNewDevice() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateIsNewDevice()
	})
}

// SetPushID sets the "push_id" field.
func (u *RiderUpsertBulk) SetPushID(v string) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPushID(v)
	})
}

// UpdatePushID sets the "push_id" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePushID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePushID()
	})
}

// ClearPushID clears the value of the "push_id" field.
func (u *RiderUpsertBulk) ClearPushID() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearPushID()
	})
}

// SetLastSigninAt sets the "last_signin_at" field.
func (u *RiderUpsertBulk) SetLastSigninAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetLastSigninAt(v)
	})
}

// UpdateLastSigninAt sets the "last_signin_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateLastSigninAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateLastSigninAt()
	})
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (u *RiderUpsertBulk) ClearLastSigninAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearLastSigninAt()
	})
}

// SetBlocked sets the "blocked" field.
func (u *RiderUpsertBulk) SetBlocked(v bool) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetBlocked(v)
	})
}

// UpdateBlocked sets the "blocked" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateBlocked() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateBlocked()
	})
}

// SetPoints sets the "points" field.
func (u *RiderUpsertBulk) SetPoints(v int64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *RiderUpsertBulk) AddPoints(v int64) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdatePoints() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdatePoints()
	})
}

// SetExchangeLimit sets the "exchange_limit" field.
func (u *RiderUpsertBulk) SetExchangeLimit(v model.RiderExchangeLimit) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetExchangeLimit(v)
	})
}

// UpdateExchangeLimit sets the "exchange_limit" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateExchangeLimit() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateExchangeLimit()
	})
}

// ClearExchangeLimit clears the value of the "exchange_limit" field.
func (u *RiderUpsertBulk) ClearExchangeLimit() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearExchangeLimit()
	})
}

// SetExchangeFrequency sets the "exchange_frequency" field.
func (u *RiderUpsertBulk) SetExchangeFrequency(v model.RiderExchangeFrequency) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetExchangeFrequency(v)
	})
}

// UpdateExchangeFrequency sets the "exchange_frequency" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateExchangeFrequency() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateExchangeFrequency()
	})
}

// ClearExchangeFrequency clears the value of the "exchange_frequency" field.
func (u *RiderUpsertBulk) ClearExchangeFrequency() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearExchangeFrequency()
	})
}

// SetJoinEnterpriseAt sets the "join_enterprise_at" field.
func (u *RiderUpsertBulk) SetJoinEnterpriseAt(v time.Time) *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.SetJoinEnterpriseAt(v)
	})
}

// UpdateJoinEnterpriseAt sets the "join_enterprise_at" field to the value that was provided on create.
func (u *RiderUpsertBulk) UpdateJoinEnterpriseAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.UpdateJoinEnterpriseAt()
	})
}

// ClearJoinEnterpriseAt clears the value of the "join_enterprise_at" field.
func (u *RiderUpsertBulk) ClearJoinEnterpriseAt() *RiderUpsertBulk {
	return u.Update(func(s *RiderUpsert) {
		s.ClearJoinEnterpriseAt()
	})
}

// Exec executes the query.
func (u *RiderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RiderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RiderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RiderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
