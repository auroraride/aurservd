// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/schema"
)

// RiderCreate is the builder for creating a Rider entity.
type RiderCreate struct {
	config
	mutation *RiderMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RiderCreate) SetCreatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableCreatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RiderCreate) SetUpdatedAt(t time.Time) *RiderCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableUpdatedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RiderCreate) SetDeletedAt(t time.Time) *RiderCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RiderCreate) SetNillableDeletedAt(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetLastModify sets the "last_modify" field.
func (rc *RiderCreate) SetLastModify(t time.Time) *RiderCreate {
	rc.mutation.SetLastModify(t)
	return rc
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (rc *RiderCreate) SetNillableLastModify(t *time.Time) *RiderCreate {
	if t != nil {
		rc.SetLastModify(*t)
	}
	return rc
}

// SetRemark sets the "remark" field.
func (rc *RiderCreate) SetRemark(s string) *RiderCreate {
	rc.mutation.SetRemark(s)
	return rc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rc *RiderCreate) SetNillableRemark(s *string) *RiderCreate {
	if s != nil {
		rc.SetRemark(*s)
	}
	return rc
}

// SetPersonID sets the "person_id" field.
func (rc *RiderCreate) SetPersonID(u uint64) *RiderCreate {
	rc.mutation.SetPersonID(u)
	return rc
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillablePersonID(u *uint64) *RiderCreate {
	if u != nil {
		rc.SetPersonID(*u)
	}
	return rc
}

// SetPhone sets the "phone" field.
func (rc *RiderCreate) SetPhone(s string) *RiderCreate {
	rc.mutation.SetPhone(s)
	return rc
}

// SetContact sets the "contact" field.
func (rc *RiderCreate) SetContact(sc *schema.RiderContact) *RiderCreate {
	rc.mutation.SetContact(sc)
	return rc
}

// SetClientType sets the "client_type" field.
func (rc *RiderCreate) SetClientType(u uint8) *RiderCreate {
	rc.mutation.SetClientType(u)
	return rc
}

// SetClientSn sets the "client_sn" field.
func (rc *RiderCreate) SetClientSn(s string) *RiderCreate {
	rc.mutation.SetClientSn(s)
	return rc
}

// SetClientID sets the "client_id" field.
func (rc *RiderCreate) SetClientID(s string) *RiderCreate {
	rc.mutation.SetClientID(s)
	return rc
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (rc *RiderCreate) SetNillableClientID(s *string) *RiderCreate {
	if s != nil {
		rc.SetClientID(*s)
	}
	return rc
}

// SetPerson sets the "person" edge to the Person entity.
func (rc *RiderCreate) SetPerson(p *Person) *RiderCreate {
	return rc.SetPersonID(p.ID)
}

// Mutation returns the RiderMutation object of the builder.
func (rc *RiderCreate) Mutation() *RiderMutation {
	return rc.mutation
}

// Save creates the Rider in the database.
func (rc *RiderCreate) Save(ctx context.Context) (*Rider, error) {
	var (
		err  error
		node *Rider
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RiderMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RiderCreate) SaveX(ctx context.Context) *Rider {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RiderCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RiderCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RiderCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := rider.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := rider.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RiderCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := rc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "phone"`)}
	}
	if v, ok := rc.mutation.Phone(); ok {
		if err := rider.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "phone": %w`, err)}
		}
	}
	if _, ok := rc.mutation.ClientType(); !ok {
		return &ValidationError{Name: "client_type", err: errors.New(`ent: missing required field "client_type"`)}
	}
	if _, ok := rc.mutation.ClientSn(); !ok {
		return &ValidationError{Name: "client_sn", err: errors.New(`ent: missing required field "client_sn"`)}
	}
	if v, ok := rc.mutation.ClientSn(); ok {
		if err := rider.ClientSnValidator(v); err != nil {
			return &ValidationError{Name: "client_sn", err: fmt.Errorf(`ent: validator failed for field "client_sn": %w`, err)}
		}
	}
	if v, ok := rc.mutation.ClientID(); ok {
		if err := rider.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`ent: validator failed for field "client_id": %w`, err)}
		}
	}
	return nil
}

func (rc *RiderCreate) sqlSave(ctx context.Context) (*Rider, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (rc *RiderCreate) createSpec() (*Rider, *sqlgraph.CreateSpec) {
	var (
		_node = &Rider{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rider.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rider.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := rc.mutation.LastModify(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rider.FieldLastModify,
		})
		_node.LastModify = &value
	}
	if value, ok := rc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldRemark,
		})
		_node.Remark = &value
	}
	if value, ok := rc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := rc.mutation.Contact(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rider.FieldContact,
		})
		_node.Contact = value
	}
	if value, ok := rc.mutation.ClientType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: rider.FieldClientType,
		})
		_node.ClientType = value
	}
	if value, ok := rc.mutation.ClientSn(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldClientSn,
		})
		_node.ClientSn = value
	}
	if value, ok := rc.mutation.ClientID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rider.FieldClientID,
		})
		_node.ClientID = &value
	}
	if nodes := rc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rider.PersonTable,
			Columns: []string{rider.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RiderCreateBulk is the builder for creating many Rider entities in bulk.
type RiderCreateBulk struct {
	config
	builders []*RiderCreate
}

// Save creates the Rider entities in the database.
func (rcb *RiderCreateBulk) Save(ctx context.Context) ([]*Rider, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rider, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RiderCreateBulk) SaveX(ctx context.Context) []*Rider {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RiderCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RiderCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
