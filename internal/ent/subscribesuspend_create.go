// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribeSuspendCreate is the builder for creating a SubscribeSuspend entity.
type SubscribeSuspendCreate struct {
	config
	mutation *SubscribeSuspendMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreator sets the "creator" field.
func (ssc *SubscribeSuspendCreate) SetCreator(m *model.Modifier) *SubscribeSuspendCreate {
	ssc.mutation.SetCreator(m)
	return ssc
}

// SetLastModifier sets the "last_modifier" field.
func (ssc *SubscribeSuspendCreate) SetLastModifier(m *model.Modifier) *SubscribeSuspendCreate {
	ssc.mutation.SetLastModifier(m)
	return ssc
}

// SetRemark sets the "remark" field.
func (ssc *SubscribeSuspendCreate) SetRemark(s string) *SubscribeSuspendCreate {
	ssc.mutation.SetRemark(s)
	return ssc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ssc *SubscribeSuspendCreate) SetNillableRemark(s *string) *SubscribeSuspendCreate {
	if s != nil {
		ssc.SetRemark(*s)
	}
	return ssc
}

// SetCityID sets the "city_id" field.
func (ssc *SubscribeSuspendCreate) SetCityID(u uint64) *SubscribeSuspendCreate {
	ssc.mutation.SetCityID(u)
	return ssc
}

// SetRiderID sets the "rider_id" field.
func (ssc *SubscribeSuspendCreate) SetRiderID(u uint64) *SubscribeSuspendCreate {
	ssc.mutation.SetRiderID(u)
	return ssc
}

// SetSubscribeID sets the "subscribe_id" field.
func (ssc *SubscribeSuspendCreate) SetSubscribeID(u uint64) *SubscribeSuspendCreate {
	ssc.mutation.SetSubscribeID(u)
	return ssc
}

// SetPauseID sets the "pause_id" field.
func (ssc *SubscribeSuspendCreate) SetPauseID(u uint64) *SubscribeSuspendCreate {
	ssc.mutation.SetPauseID(u)
	return ssc
}

// SetNillablePauseID sets the "pause_id" field if the given value is not nil.
func (ssc *SubscribeSuspendCreate) SetNillablePauseID(u *uint64) *SubscribeSuspendCreate {
	if u != nil {
		ssc.SetPauseID(*u)
	}
	return ssc
}

// SetDays sets the "days" field.
func (ssc *SubscribeSuspendCreate) SetDays(i int) *SubscribeSuspendCreate {
	ssc.mutation.SetDays(i)
	return ssc
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (ssc *SubscribeSuspendCreate) SetNillableDays(i *int) *SubscribeSuspendCreate {
	if i != nil {
		ssc.SetDays(*i)
	}
	return ssc
}

// SetStartAt sets the "start_at" field.
func (ssc *SubscribeSuspendCreate) SetStartAt(t time.Time) *SubscribeSuspendCreate {
	ssc.mutation.SetStartAt(t)
	return ssc
}

// SetEndAt sets the "end_at" field.
func (ssc *SubscribeSuspendCreate) SetEndAt(t time.Time) *SubscribeSuspendCreate {
	ssc.mutation.SetEndAt(t)
	return ssc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (ssc *SubscribeSuspendCreate) SetNillableEndAt(t *time.Time) *SubscribeSuspendCreate {
	if t != nil {
		ssc.SetEndAt(*t)
	}
	return ssc
}

// SetEndReason sets the "end_reason" field.
func (ssc *SubscribeSuspendCreate) SetEndReason(s string) *SubscribeSuspendCreate {
	ssc.mutation.SetEndReason(s)
	return ssc
}

// SetNillableEndReason sets the "end_reason" field if the given value is not nil.
func (ssc *SubscribeSuspendCreate) SetNillableEndReason(s *string) *SubscribeSuspendCreate {
	if s != nil {
		ssc.SetEndReason(*s)
	}
	return ssc
}

// SetEndModifier sets the "end_modifier" field.
func (ssc *SubscribeSuspendCreate) SetEndModifier(m *model.Modifier) *SubscribeSuspendCreate {
	ssc.mutation.SetEndModifier(m)
	return ssc
}

// SetCity sets the "city" edge to the City entity.
func (ssc *SubscribeSuspendCreate) SetCity(c *City) *SubscribeSuspendCreate {
	return ssc.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (ssc *SubscribeSuspendCreate) SetRider(r *Rider) *SubscribeSuspendCreate {
	return ssc.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (ssc *SubscribeSuspendCreate) SetSubscribe(s *Subscribe) *SubscribeSuspendCreate {
	return ssc.SetSubscribeID(s.ID)
}

// SetPause sets the "pause" edge to the SubscribePause entity.
func (ssc *SubscribeSuspendCreate) SetPause(s *SubscribePause) *SubscribeSuspendCreate {
	return ssc.SetPauseID(s.ID)
}

// Mutation returns the SubscribeSuspendMutation object of the builder.
func (ssc *SubscribeSuspendCreate) Mutation() *SubscribeSuspendMutation {
	return ssc.mutation
}

// Save creates the SubscribeSuspend in the database.
func (ssc *SubscribeSuspendCreate) Save(ctx context.Context) (*SubscribeSuspend, error) {
	if err := ssc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SubscribeSuspendCreate) SaveX(ctx context.Context) *SubscribeSuspend {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SubscribeSuspendCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SubscribeSuspendCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SubscribeSuspendCreate) defaults() error {
	if _, ok := ssc.mutation.Days(); !ok {
		v := subscribesuspend.DefaultDays
		ssc.mutation.SetDays(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SubscribeSuspendCreate) check() error {
	if _, ok := ssc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "SubscribeSuspend.city_id"`)}
	}
	if _, ok := ssc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "SubscribeSuspend.rider_id"`)}
	}
	if _, ok := ssc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "SubscribeSuspend.subscribe_id"`)}
	}
	if _, ok := ssc.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "SubscribeSuspend.days"`)}
	}
	if _, ok := ssc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "SubscribeSuspend.start_at"`)}
	}
	if _, ok := ssc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "SubscribeSuspend.city"`)}
	}
	if _, ok := ssc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "SubscribeSuspend.rider"`)}
	}
	if _, ok := ssc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "SubscribeSuspend.subscribe"`)}
	}
	return nil
}

func (ssc *SubscribeSuspendCreate) sqlSave(ctx context.Context) (*SubscribeSuspend, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SubscribeSuspendCreate) createSpec() (*SubscribeSuspend, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscribeSuspend{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(subscribesuspend.Table, sqlgraph.NewFieldSpec(subscribesuspend.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ssc.conflict
	if value, ok := ssc.mutation.Creator(); ok {
		_spec.SetField(subscribesuspend.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ssc.mutation.LastModifier(); ok {
		_spec.SetField(subscribesuspend.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ssc.mutation.Remark(); ok {
		_spec.SetField(subscribesuspend.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ssc.mutation.Days(); ok {
		_spec.SetField(subscribesuspend.FieldDays, field.TypeInt, value)
		_node.Days = value
	}
	if value, ok := ssc.mutation.StartAt(); ok {
		_spec.SetField(subscribesuspend.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := ssc.mutation.EndAt(); ok {
		_spec.SetField(subscribesuspend.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := ssc.mutation.EndReason(); ok {
		_spec.SetField(subscribesuspend.FieldEndReason, field.TypeString, value)
		_node.EndReason = value
	}
	if value, ok := ssc.mutation.EndModifier(); ok {
		_spec.SetField(subscribesuspend.FieldEndModifier, field.TypeJSON, value)
		_node.EndModifier = value
	}
	if nodes := ssc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.CityTable,
			Columns: []string{subscribesuspend.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribesuspend.RiderTable,
			Columns: []string{subscribesuspend.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.SubscribeTable,
			Columns: []string{subscribesuspend.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.PauseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribesuspend.PauseTable,
			Columns: []string{subscribesuspend.PauseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribepause.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PauseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeSuspend.Create().
//		SetCreator(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeSuspendUpsert) {
//			SetCreator(v+v).
//		}).
//		Exec(ctx)
func (ssc *SubscribeSuspendCreate) OnConflict(opts ...sql.ConflictOption) *SubscribeSuspendUpsertOne {
	ssc.conflict = opts
	return &SubscribeSuspendUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SubscribeSuspendCreate) OnConflictColumns(columns ...string) *SubscribeSuspendUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SubscribeSuspendUpsertOne{
		create: ssc,
	}
}

type (
	// SubscribeSuspendUpsertOne is the builder for "upsert"-ing
	//  one SubscribeSuspend node.
	SubscribeSuspendUpsertOne struct {
		create *SubscribeSuspendCreate
	}

	// SubscribeSuspendUpsert is the "OnConflict" setter.
	SubscribeSuspendUpsert struct {
		*sql.UpdateSet
	}
)

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeSuspendUpsert) SetLastModifier(v *model.Modifier) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateLastModifier() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeSuspendUpsert) ClearLastModifier() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *SubscribeSuspendUpsert) SetRemark(v string) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateRemark() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeSuspendUpsert) ClearRemark() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldRemark)
	return u
}

// SetCityID sets the "city_id" field.
func (u *SubscribeSuspendUpsert) SetCityID(v uint64) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateCityID() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldCityID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeSuspendUpsert) SetRiderID(v uint64) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateRiderID() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldRiderID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeSuspendUpsert) SetSubscribeID(v uint64) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateSubscribeID() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldSubscribeID)
	return u
}

// SetPauseID sets the "pause_id" field.
func (u *SubscribeSuspendUpsert) SetPauseID(v uint64) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldPauseID, v)
	return u
}

// UpdatePauseID sets the "pause_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdatePauseID() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldPauseID)
	return u
}

// ClearPauseID clears the value of the "pause_id" field.
func (u *SubscribeSuspendUpsert) ClearPauseID() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldPauseID)
	return u
}

// SetDays sets the "days" field.
func (u *SubscribeSuspendUpsert) SetDays(v int) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateDays() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *SubscribeSuspendUpsert) AddDays(v int) *SubscribeSuspendUpsert {
	u.Add(subscribesuspend.FieldDays, v)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeSuspendUpsert) SetStartAt(v time.Time) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateStartAt() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeSuspendUpsert) SetEndAt(v time.Time) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateEndAt() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeSuspendUpsert) ClearEndAt() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldEndAt)
	return u
}

// SetEndReason sets the "end_reason" field.
func (u *SubscribeSuspendUpsert) SetEndReason(v string) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldEndReason, v)
	return u
}

// UpdateEndReason sets the "end_reason" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateEndReason() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldEndReason)
	return u
}

// ClearEndReason clears the value of the "end_reason" field.
func (u *SubscribeSuspendUpsert) ClearEndReason() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldEndReason)
	return u
}

// SetEndModifier sets the "end_modifier" field.
func (u *SubscribeSuspendUpsert) SetEndModifier(v *model.Modifier) *SubscribeSuspendUpsert {
	u.Set(subscribesuspend.FieldEndModifier, v)
	return u
}

// UpdateEndModifier sets the "end_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsert) UpdateEndModifier() *SubscribeSuspendUpsert {
	u.SetExcluded(subscribesuspend.FieldEndModifier)
	return u
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (u *SubscribeSuspendUpsert) ClearEndModifier() *SubscribeSuspendUpsert {
	u.SetNull(subscribesuspend.FieldEndModifier)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeSuspendUpsertOne) UpdateNewValues() *SubscribeSuspendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(subscribesuspend.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscribeSuspendUpsertOne) Ignore() *SubscribeSuspendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeSuspendUpsertOne) DoNothing() *SubscribeSuspendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeSuspendCreate.OnConflict
// documentation for more info.
func (u *SubscribeSuspendUpsertOne) Update(set func(*SubscribeSuspendUpsert)) *SubscribeSuspendUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeSuspendUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeSuspendUpsertOne) SetLastModifier(v *model.Modifier) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateLastModifier() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeSuspendUpsertOne) ClearLastModifier() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeSuspendUpsertOne) SetRemark(v string) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateRemark() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeSuspendUpsertOne) ClearRemark() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *SubscribeSuspendUpsertOne) SetCityID(v uint64) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateCityID() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeSuspendUpsertOne) SetRiderID(v uint64) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateRiderID() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeSuspendUpsertOne) SetSubscribeID(v uint64) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateSubscribeID() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetPauseID sets the "pause_id" field.
func (u *SubscribeSuspendUpsertOne) SetPauseID(v uint64) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetPauseID(v)
	})
}

// UpdatePauseID sets the "pause_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdatePauseID() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdatePauseID()
	})
}

// ClearPauseID clears the value of the "pause_id" field.
func (u *SubscribeSuspendUpsertOne) ClearPauseID() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearPauseID()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeSuspendUpsertOne) SetDays(v int) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeSuspendUpsertOne) AddDays(v int) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateDays() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateDays()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeSuspendUpsertOne) SetStartAt(v time.Time) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateStartAt() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeSuspendUpsertOne) SetEndAt(v time.Time) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateEndAt() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeSuspendUpsertOne) ClearEndAt() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndAt()
	})
}

// SetEndReason sets the "end_reason" field.
func (u *SubscribeSuspendUpsertOne) SetEndReason(v string) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndReason(v)
	})
}

// UpdateEndReason sets the "end_reason" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateEndReason() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndReason()
	})
}

// ClearEndReason clears the value of the "end_reason" field.
func (u *SubscribeSuspendUpsertOne) ClearEndReason() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndReason()
	})
}

// SetEndModifier sets the "end_modifier" field.
func (u *SubscribeSuspendUpsertOne) SetEndModifier(v *model.Modifier) *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndModifier(v)
	})
}

// UpdateEndModifier sets the "end_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertOne) UpdateEndModifier() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndModifier()
	})
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (u *SubscribeSuspendUpsertOne) ClearEndModifier() *SubscribeSuspendUpsertOne {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndModifier()
	})
}

// Exec executes the query.
func (u *SubscribeSuspendUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeSuspendCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeSuspendUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscribeSuspendUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscribeSuspendUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscribeSuspendCreateBulk is the builder for creating many SubscribeSuspend entities in bulk.
type SubscribeSuspendCreateBulk struct {
	config
	err      error
	builders []*SubscribeSuspendCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscribeSuspend entities in the database.
func (sscb *SubscribeSuspendCreateBulk) Save(ctx context.Context) ([]*SubscribeSuspend, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SubscribeSuspend, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeSuspendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SubscribeSuspendCreateBulk) SaveX(ctx context.Context) []*SubscribeSuspend {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SubscribeSuspendCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SubscribeSuspendCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeSuspend.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeSuspendUpsert) {
//			SetCreator(v+v).
//		}).
//		Exec(ctx)
func (sscb *SubscribeSuspendCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscribeSuspendUpsertBulk {
	sscb.conflict = opts
	return &SubscribeSuspendUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SubscribeSuspendCreateBulk) OnConflictColumns(columns ...string) *SubscribeSuspendUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SubscribeSuspendUpsertBulk{
		create: sscb,
	}
}

// SubscribeSuspendUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscribeSuspend nodes.
type SubscribeSuspendUpsertBulk struct {
	create *SubscribeSuspendCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeSuspendUpsertBulk) UpdateNewValues() *SubscribeSuspendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(subscribesuspend.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeSuspend.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscribeSuspendUpsertBulk) Ignore() *SubscribeSuspendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeSuspendUpsertBulk) DoNothing() *SubscribeSuspendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeSuspendCreateBulk.OnConflict
// documentation for more info.
func (u *SubscribeSuspendUpsertBulk) Update(set func(*SubscribeSuspendUpsert)) *SubscribeSuspendUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeSuspendUpsert{UpdateSet: update})
	}))
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeSuspendUpsertBulk) SetLastModifier(v *model.Modifier) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateLastModifier() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeSuspendUpsertBulk) ClearLastModifier() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeSuspendUpsertBulk) SetRemark(v string) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateRemark() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeSuspendUpsertBulk) ClearRemark() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearRemark()
	})
}

// SetCityID sets the "city_id" field.
func (u *SubscribeSuspendUpsertBulk) SetCityID(v uint64) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateCityID() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeSuspendUpsertBulk) SetRiderID(v uint64) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateRiderID() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateRiderID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeSuspendUpsertBulk) SetSubscribeID(v uint64) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateSubscribeID() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetPauseID sets the "pause_id" field.
func (u *SubscribeSuspendUpsertBulk) SetPauseID(v uint64) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetPauseID(v)
	})
}

// UpdatePauseID sets the "pause_id" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdatePauseID() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdatePauseID()
	})
}

// ClearPauseID clears the value of the "pause_id" field.
func (u *SubscribeSuspendUpsertBulk) ClearPauseID() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearPauseID()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeSuspendUpsertBulk) SetDays(v int) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeSuspendUpsertBulk) AddDays(v int) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateDays() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateDays()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeSuspendUpsertBulk) SetStartAt(v time.Time) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateStartAt() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeSuspendUpsertBulk) SetEndAt(v time.Time) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateEndAt() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeSuspendUpsertBulk) ClearEndAt() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndAt()
	})
}

// SetEndReason sets the "end_reason" field.
func (u *SubscribeSuspendUpsertBulk) SetEndReason(v string) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndReason(v)
	})
}

// UpdateEndReason sets the "end_reason" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateEndReason() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndReason()
	})
}

// ClearEndReason clears the value of the "end_reason" field.
func (u *SubscribeSuspendUpsertBulk) ClearEndReason() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndReason()
	})
}

// SetEndModifier sets the "end_modifier" field.
func (u *SubscribeSuspendUpsertBulk) SetEndModifier(v *model.Modifier) *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.SetEndModifier(v)
	})
}

// UpdateEndModifier sets the "end_modifier" field to the value that was provided on create.
func (u *SubscribeSuspendUpsertBulk) UpdateEndModifier() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.UpdateEndModifier()
	})
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (u *SubscribeSuspendUpsertBulk) ClearEndModifier() *SubscribeSuspendUpsertBulk {
	return u.Update(func(s *SubscribeSuspendUpsert) {
		s.ClearEndModifier()
	})
}

// Exec executes the query.
func (u *SubscribeSuspendUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscribeSuspendCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeSuspendCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeSuspendUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
