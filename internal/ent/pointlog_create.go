// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/pointlog"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// PointLogCreate is the builder for creating a PointLog entity.
type PointLogCreate struct {
	config
	mutation *PointLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (plc *PointLogCreate) SetCreatedAt(t time.Time) *PointLogCreate {
	plc.mutation.SetCreatedAt(t)
	return plc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (plc *PointLogCreate) SetNillableCreatedAt(t *time.Time) *PointLogCreate {
	if t != nil {
		plc.SetCreatedAt(*t)
	}
	return plc
}

// SetUpdatedAt sets the "updated_at" field.
func (plc *PointLogCreate) SetUpdatedAt(t time.Time) *PointLogCreate {
	plc.mutation.SetUpdatedAt(t)
	return plc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (plc *PointLogCreate) SetNillableUpdatedAt(t *time.Time) *PointLogCreate {
	if t != nil {
		plc.SetUpdatedAt(*t)
	}
	return plc
}

// SetRiderID sets the "rider_id" field.
func (plc *PointLogCreate) SetRiderID(u uint64) *PointLogCreate {
	plc.mutation.SetRiderID(u)
	return plc
}

// SetOrderID sets the "order_id" field.
func (plc *PointLogCreate) SetOrderID(u uint64) *PointLogCreate {
	plc.mutation.SetOrderID(u)
	return plc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (plc *PointLogCreate) SetNillableOrderID(u *uint64) *PointLogCreate {
	if u != nil {
		plc.SetOrderID(*u)
	}
	return plc
}

// SetModifier sets the "modifier" field.
func (plc *PointLogCreate) SetModifier(m *model.Modifier) *PointLogCreate {
	plc.mutation.SetModifier(m)
	return plc
}

// SetEmployeeInfo sets the "employee_info" field.
func (plc *PointLogCreate) SetEmployeeInfo(m *model.Employee) *PointLogCreate {
	plc.mutation.SetEmployeeInfo(m)
	return plc
}

// SetType sets the "type" field.
func (plc *PointLogCreate) SetType(u uint8) *PointLogCreate {
	plc.mutation.SetType(u)
	return plc
}

// SetPoints sets the "points" field.
func (plc *PointLogCreate) SetPoints(i int64) *PointLogCreate {
	plc.mutation.SetPoints(i)
	return plc
}

// SetAfter sets the "after" field.
func (plc *PointLogCreate) SetAfter(i int64) *PointLogCreate {
	plc.mutation.SetAfter(i)
	return plc
}

// SetReason sets the "reason" field.
func (plc *PointLogCreate) SetReason(s string) *PointLogCreate {
	plc.mutation.SetReason(s)
	return plc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (plc *PointLogCreate) SetNillableReason(s *string) *PointLogCreate {
	if s != nil {
		plc.SetReason(*s)
	}
	return plc
}

// SetAttach sets the "attach" field.
func (plc *PointLogCreate) SetAttach(mla *model.PointLogAttach) *PointLogCreate {
	plc.mutation.SetAttach(mla)
	return plc
}

// SetRider sets the "rider" edge to the Rider entity.
func (plc *PointLogCreate) SetRider(r *Rider) *PointLogCreate {
	return plc.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (plc *PointLogCreate) SetOrder(o *Order) *PointLogCreate {
	return plc.SetOrderID(o.ID)
}

// Mutation returns the PointLogMutation object of the builder.
func (plc *PointLogCreate) Mutation() *PointLogMutation {
	return plc.mutation
}

// Save creates the PointLog in the database.
func (plc *PointLogCreate) Save(ctx context.Context) (*PointLog, error) {
	if err := plc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, plc.sqlSave, plc.mutation, plc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PointLogCreate) SaveX(ctx context.Context) *PointLog {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PointLogCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PointLogCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (plc *PointLogCreate) defaults() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		if pointlog.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pointlog.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pointlog.DefaultCreatedAt()
		plc.mutation.SetCreatedAt(v)
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		if pointlog.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pointlog.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pointlog.DefaultUpdatedAt()
		plc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (plc *PointLogCreate) check() error {
	if _, ok := plc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PointLog.created_at"`)}
	}
	if _, ok := plc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PointLog.updated_at"`)}
	}
	if _, ok := plc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "PointLog.rider_id"`)}
	}
	if _, ok := plc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PointLog.type"`)}
	}
	if _, ok := plc.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "PointLog.points"`)}
	}
	if _, ok := plc.mutation.After(); !ok {
		return &ValidationError{Name: "after", err: errors.New(`ent: missing required field "PointLog.after"`)}
	}
	if len(plc.mutation.RiderIDs()) == 0 {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "PointLog.rider"`)}
	}
	return nil
}

func (plc *PointLogCreate) sqlSave(ctx context.Context) (*PointLog, error) {
	if err := plc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	plc.mutation.id = &_node.ID
	plc.mutation.done = true
	return _node, nil
}

func (plc *PointLogCreate) createSpec() (*PointLog, *sqlgraph.CreateSpec) {
	var (
		_node = &PointLog{config: plc.config}
		_spec = sqlgraph.NewCreateSpec(pointlog.Table, sqlgraph.NewFieldSpec(pointlog.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = plc.conflict
	if value, ok := plc.mutation.CreatedAt(); ok {
		_spec.SetField(pointlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := plc.mutation.UpdatedAt(); ok {
		_spec.SetField(pointlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := plc.mutation.Modifier(); ok {
		_spec.SetField(pointlog.FieldModifier, field.TypeJSON, value)
		_node.Modifier = value
	}
	if value, ok := plc.mutation.EmployeeInfo(); ok {
		_spec.SetField(pointlog.FieldEmployeeInfo, field.TypeJSON, value)
		_node.EmployeeInfo = value
	}
	if value, ok := plc.mutation.GetType(); ok {
		_spec.SetField(pointlog.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := plc.mutation.Points(); ok {
		_spec.SetField(pointlog.FieldPoints, field.TypeInt64, value)
		_node.Points = value
	}
	if value, ok := plc.mutation.After(); ok {
		_spec.SetField(pointlog.FieldAfter, field.TypeInt64, value)
		_node.After = value
	}
	if value, ok := plc.mutation.Reason(); ok {
		_spec.SetField(pointlog.FieldReason, field.TypeString, value)
		_node.Reason = &value
	}
	if value, ok := plc.mutation.Attach(); ok {
		_spec.SetField(pointlog.FieldAttach, field.TypeJSON, value)
		_node.Attach = value
	}
	if nodes := plc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointlog.RiderTable,
			Columns: []string{pointlog.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := plc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   pointlog.OrderTable,
			Columns: []string{pointlog.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PointLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PointLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (plc *PointLogCreate) OnConflict(opts ...sql.ConflictOption) *PointLogUpsertOne {
	plc.conflict = opts
	return &PointLogUpsertOne{
		create: plc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PointLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (plc *PointLogCreate) OnConflictColumns(columns ...string) *PointLogUpsertOne {
	plc.conflict = append(plc.conflict, sql.ConflictColumns(columns...))
	return &PointLogUpsertOne{
		create: plc,
	}
}

type (
	// PointLogUpsertOne is the builder for "upsert"-ing
	//  one PointLog node.
	PointLogUpsertOne struct {
		create *PointLogCreate
	}

	// PointLogUpsert is the "OnConflict" setter.
	PointLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PointLogUpsert) SetUpdatedAt(v time.Time) *PointLogUpsert {
	u.Set(pointlog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateUpdatedAt() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldUpdatedAt)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *PointLogUpsert) SetRiderID(v uint64) *PointLogUpsert {
	u.Set(pointlog.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateRiderID() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldRiderID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PointLogUpsert) SetOrderID(v uint64) *PointLogUpsert {
	u.Set(pointlog.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateOrderID() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PointLogUpsert) ClearOrderID() *PointLogUpsert {
	u.SetNull(pointlog.FieldOrderID)
	return u
}

// SetModifier sets the "modifier" field.
func (u *PointLogUpsert) SetModifier(v *model.Modifier) *PointLogUpsert {
	u.Set(pointlog.FieldModifier, v)
	return u
}

// UpdateModifier sets the "modifier" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateModifier() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldModifier)
	return u
}

// ClearModifier clears the value of the "modifier" field.
func (u *PointLogUpsert) ClearModifier() *PointLogUpsert {
	u.SetNull(pointlog.FieldModifier)
	return u
}

// SetEmployeeInfo sets the "employee_info" field.
func (u *PointLogUpsert) SetEmployeeInfo(v *model.Employee) *PointLogUpsert {
	u.Set(pointlog.FieldEmployeeInfo, v)
	return u
}

// UpdateEmployeeInfo sets the "employee_info" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateEmployeeInfo() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldEmployeeInfo)
	return u
}

// ClearEmployeeInfo clears the value of the "employee_info" field.
func (u *PointLogUpsert) ClearEmployeeInfo() *PointLogUpsert {
	u.SetNull(pointlog.FieldEmployeeInfo)
	return u
}

// SetType sets the "type" field.
func (u *PointLogUpsert) SetType(v uint8) *PointLogUpsert {
	u.Set(pointlog.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateType() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *PointLogUpsert) AddType(v uint8) *PointLogUpsert {
	u.Add(pointlog.FieldType, v)
	return u
}

// SetPoints sets the "points" field.
func (u *PointLogUpsert) SetPoints(v int64) *PointLogUpsert {
	u.Set(pointlog.FieldPoints, v)
	return u
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *PointLogUpsert) UpdatePoints() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldPoints)
	return u
}

// AddPoints adds v to the "points" field.
func (u *PointLogUpsert) AddPoints(v int64) *PointLogUpsert {
	u.Add(pointlog.FieldPoints, v)
	return u
}

// SetAfter sets the "after" field.
func (u *PointLogUpsert) SetAfter(v int64) *PointLogUpsert {
	u.Set(pointlog.FieldAfter, v)
	return u
}

// UpdateAfter sets the "after" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateAfter() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldAfter)
	return u
}

// AddAfter adds v to the "after" field.
func (u *PointLogUpsert) AddAfter(v int64) *PointLogUpsert {
	u.Add(pointlog.FieldAfter, v)
	return u
}

// SetReason sets the "reason" field.
func (u *PointLogUpsert) SetReason(v string) *PointLogUpsert {
	u.Set(pointlog.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateReason() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldReason)
	return u
}

// ClearReason clears the value of the "reason" field.
func (u *PointLogUpsert) ClearReason() *PointLogUpsert {
	u.SetNull(pointlog.FieldReason)
	return u
}

// SetAttach sets the "attach" field.
func (u *PointLogUpsert) SetAttach(v *model.PointLogAttach) *PointLogUpsert {
	u.Set(pointlog.FieldAttach, v)
	return u
}

// UpdateAttach sets the "attach" field to the value that was provided on create.
func (u *PointLogUpsert) UpdateAttach() *PointLogUpsert {
	u.SetExcluded(pointlog.FieldAttach)
	return u
}

// ClearAttach clears the value of the "attach" field.
func (u *PointLogUpsert) ClearAttach() *PointLogUpsert {
	u.SetNull(pointlog.FieldAttach)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PointLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PointLogUpsertOne) UpdateNewValues() *PointLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pointlog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PointLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PointLogUpsertOne) Ignore() *PointLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PointLogUpsertOne) DoNothing() *PointLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PointLogCreate.OnConflict
// documentation for more info.
func (u *PointLogUpsertOne) Update(set func(*PointLogUpsert)) *PointLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PointLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PointLogUpsertOne) SetUpdatedAt(v time.Time) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateUpdatedAt() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PointLogUpsertOne) SetRiderID(v uint64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateRiderID() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PointLogUpsertOne) SetOrderID(v uint64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateOrderID() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PointLogUpsertOne) ClearOrderID() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearOrderID()
	})
}

// SetModifier sets the "modifier" field.
func (u *PointLogUpsertOne) SetModifier(v *model.Modifier) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetModifier(v)
	})
}

// UpdateModifier sets the "modifier" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateModifier() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateModifier()
	})
}

// ClearModifier clears the value of the "modifier" field.
func (u *PointLogUpsertOne) ClearModifier() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearModifier()
	})
}

// SetEmployeeInfo sets the "employee_info" field.
func (u *PointLogUpsertOne) SetEmployeeInfo(v *model.Employee) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetEmployeeInfo(v)
	})
}

// UpdateEmployeeInfo sets the "employee_info" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateEmployeeInfo() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateEmployeeInfo()
	})
}

// ClearEmployeeInfo clears the value of the "employee_info" field.
func (u *PointLogUpsertOne) ClearEmployeeInfo() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearEmployeeInfo()
	})
}

// SetType sets the "type" field.
func (u *PointLogUpsertOne) SetType(v uint8) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PointLogUpsertOne) AddType(v uint8) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateType() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateType()
	})
}

// SetPoints sets the "points" field.
func (u *PointLogUpsertOne) SetPoints(v int64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *PointLogUpsertOne) AddPoints(v int64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdatePoints() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdatePoints()
	})
}

// SetAfter sets the "after" field.
func (u *PointLogUpsertOne) SetAfter(v int64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetAfter(v)
	})
}

// AddAfter adds v to the "after" field.
func (u *PointLogUpsertOne) AddAfter(v int64) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.AddAfter(v)
	})
}

// UpdateAfter sets the "after" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateAfter() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateAfter()
	})
}

// SetReason sets the "reason" field.
func (u *PointLogUpsertOne) SetReason(v string) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateReason() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *PointLogUpsertOne) ClearReason() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearReason()
	})
}

// SetAttach sets the "attach" field.
func (u *PointLogUpsertOne) SetAttach(v *model.PointLogAttach) *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.SetAttach(v)
	})
}

// UpdateAttach sets the "attach" field to the value that was provided on create.
func (u *PointLogUpsertOne) UpdateAttach() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateAttach()
	})
}

// ClearAttach clears the value of the "attach" field.
func (u *PointLogUpsertOne) ClearAttach() *PointLogUpsertOne {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearAttach()
	})
}

// Exec executes the query.
func (u *PointLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PointLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PointLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PointLogUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PointLogUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PointLogCreateBulk is the builder for creating many PointLog entities in bulk.
type PointLogCreateBulk struct {
	config
	err      error
	builders []*PointLogCreate
	conflict []sql.ConflictOption
}

// Save creates the PointLog entities in the database.
func (plcb *PointLogCreateBulk) Save(ctx context.Context) ([]*PointLog, error) {
	if plcb.err != nil {
		return nil, plcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PointLog, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PointLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = plcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PointLogCreateBulk) SaveX(ctx context.Context) []*PointLog {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PointLogCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PointLogCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PointLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PointLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (plcb *PointLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *PointLogUpsertBulk {
	plcb.conflict = opts
	return &PointLogUpsertBulk{
		create: plcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PointLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (plcb *PointLogCreateBulk) OnConflictColumns(columns ...string) *PointLogUpsertBulk {
	plcb.conflict = append(plcb.conflict, sql.ConflictColumns(columns...))
	return &PointLogUpsertBulk{
		create: plcb,
	}
}

// PointLogUpsertBulk is the builder for "upsert"-ing
// a bulk of PointLog nodes.
type PointLogUpsertBulk struct {
	create *PointLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PointLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PointLogUpsertBulk) UpdateNewValues() *PointLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pointlog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PointLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PointLogUpsertBulk) Ignore() *PointLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PointLogUpsertBulk) DoNothing() *PointLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PointLogCreateBulk.OnConflict
// documentation for more info.
func (u *PointLogUpsertBulk) Update(set func(*PointLogUpsert)) *PointLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PointLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PointLogUpsertBulk) SetUpdatedAt(v time.Time) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateUpdatedAt() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *PointLogUpsertBulk) SetRiderID(v uint64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateRiderID() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PointLogUpsertBulk) SetOrderID(v uint64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateOrderID() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PointLogUpsertBulk) ClearOrderID() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearOrderID()
	})
}

// SetModifier sets the "modifier" field.
func (u *PointLogUpsertBulk) SetModifier(v *model.Modifier) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetModifier(v)
	})
}

// UpdateModifier sets the "modifier" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateModifier() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateModifier()
	})
}

// ClearModifier clears the value of the "modifier" field.
func (u *PointLogUpsertBulk) ClearModifier() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearModifier()
	})
}

// SetEmployeeInfo sets the "employee_info" field.
func (u *PointLogUpsertBulk) SetEmployeeInfo(v *model.Employee) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetEmployeeInfo(v)
	})
}

// UpdateEmployeeInfo sets the "employee_info" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateEmployeeInfo() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateEmployeeInfo()
	})
}

// ClearEmployeeInfo clears the value of the "employee_info" field.
func (u *PointLogUpsertBulk) ClearEmployeeInfo() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearEmployeeInfo()
	})
}

// SetType sets the "type" field.
func (u *PointLogUpsertBulk) SetType(v uint8) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *PointLogUpsertBulk) AddType(v uint8) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateType() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateType()
	})
}

// SetPoints sets the "points" field.
func (u *PointLogUpsertBulk) SetPoints(v int64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetPoints(v)
	})
}

// AddPoints adds v to the "points" field.
func (u *PointLogUpsertBulk) AddPoints(v int64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.AddPoints(v)
	})
}

// UpdatePoints sets the "points" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdatePoints() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdatePoints()
	})
}

// SetAfter sets the "after" field.
func (u *PointLogUpsertBulk) SetAfter(v int64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetAfter(v)
	})
}

// AddAfter adds v to the "after" field.
func (u *PointLogUpsertBulk) AddAfter(v int64) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.AddAfter(v)
	})
}

// UpdateAfter sets the "after" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateAfter() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateAfter()
	})
}

// SetReason sets the "reason" field.
func (u *PointLogUpsertBulk) SetReason(v string) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateReason() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *PointLogUpsertBulk) ClearReason() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearReason()
	})
}

// SetAttach sets the "attach" field.
func (u *PointLogUpsertBulk) SetAttach(v *model.PointLogAttach) *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.SetAttach(v)
	})
}

// UpdateAttach sets the "attach" field to the value that was provided on create.
func (u *PointLogUpsertBulk) UpdateAttach() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.UpdateAttach()
	})
}

// ClearAttach clears the value of the "attach" field.
func (u *PointLogUpsertBulk) ClearAttach() *PointLogUpsertBulk {
	return u.Update(func(s *PointLogUpsert) {
		s.ClearAttach()
	})
}

// Exec executes the query.
func (u *PointLogUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PointLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PointLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PointLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
