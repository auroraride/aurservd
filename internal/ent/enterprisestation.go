// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
)

// EnterpriseStation is the model entity for the EnterpriseStation schema.
type EnterpriseStation struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 企业ID
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// 站点名称
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseStationQuery when eager-loading is set.
	Edges        EnterpriseStationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnterpriseStationEdges holds the relations/edges for other nodes in the graph.
type EnterpriseStationEdges struct {
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// Cabinets holds the value of the cabinets edge.
	Cabinets []*Cabinet `json:"cabinets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseStationEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[0] {
		if e.Enterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.Enterprise, nil
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// CabinetsOrErr returns the Cabinets value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseStationEdges) CabinetsOrErr() ([]*Cabinet, error) {
	if e.loadedTypes[1] {
		return e.Cabinets, nil
	}
	return nil, &NotLoadedError{edge: "cabinets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseStation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprisestation.FieldCreator, enterprisestation.FieldLastModifier:
			values[i] = new([]byte)
		case enterprisestation.FieldID, enterprisestation.FieldEnterpriseID:
			values[i] = new(sql.NullInt64)
		case enterprisestation.FieldRemark, enterprisestation.FieldName:
			values[i] = new(sql.NullString)
		case enterprisestation.FieldCreatedAt, enterprisestation.FieldUpdatedAt, enterprisestation.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseStation fields.
func (es *EnterpriseStation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprisestation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			es.ID = uint64(value.Int64)
		case enterprisestation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				es.CreatedAt = value.Time
			}
		case enterprisestation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				es.UpdatedAt = value.Time
			}
		case enterprisestation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				es.DeletedAt = new(time.Time)
				*es.DeletedAt = value.Time
			}
		case enterprisestation.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprisestation.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &es.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprisestation.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				es.Remark = value.String
			}
		case enterprisestation.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				es.EnterpriseID = uint64(value.Int64)
			}
		case enterprisestation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				es.Name = value.String
			}
		default:
			es.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnterpriseStation.
// This includes values selected through modifiers, order, etc.
func (es *EnterpriseStation) Value(name string) (ent.Value, error) {
	return es.selectValues.Get(name)
}

// QueryEnterprise queries the "enterprise" edge of the EnterpriseStation entity.
func (es *EnterpriseStation) QueryEnterprise() *EnterpriseQuery {
	return NewEnterpriseStationClient(es.config).QueryEnterprise(es)
}

// QueryCabinets queries the "cabinets" edge of the EnterpriseStation entity.
func (es *EnterpriseStation) QueryCabinets() *CabinetQuery {
	return NewEnterpriseStationClient(es.config).QueryCabinets(es)
}

// Update returns a builder for updating this EnterpriseStation.
// Note that you need to call EnterpriseStation.Unwrap() before calling this method if this EnterpriseStation
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EnterpriseStation) Update() *EnterpriseStationUpdateOne {
	return NewEnterpriseStationClient(es.config).UpdateOne(es)
}

// Unwrap unwraps the EnterpriseStation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EnterpriseStation) Unwrap() *EnterpriseStation {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseStation is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EnterpriseStation) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseStation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("created_at=")
	builder.WriteString(es.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(es.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := es.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", es.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", es.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(es.Remark)
	builder.WriteString(", ")
	builder.WriteString("enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", es.EnterpriseID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(es.Name)
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseStations is a parsable slice of EnterpriseStation.
type EnterpriseStations []*EnterpriseStation
