// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/activity"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCreatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ActivityCreate) SetUpdatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableUpdatedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *ActivityCreate) SetDeletedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableDeletedAt(t *time.Time) *ActivityCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *ActivityCreate) SetCreator(m *model.Modifier) *ActivityCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *ActivityCreate) SetLastModifier(m *model.Modifier) *ActivityCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *ActivityCreate) SetRemark(s string) *ActivityCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableRemark(s *string) *ActivityCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *ActivityCreate) SetName(s string) *ActivityCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetImage sets the "image" field.
func (ac *ActivityCreate) SetImage(s string) *ActivityCreate {
	ac.mutation.SetImage(s)
	return ac
}

// SetLink sets the "link" field.
func (ac *ActivityCreate) SetLink(s string) *ActivityCreate {
	ac.mutation.SetLink(s)
	return ac
}

// SetSort sets the "sort" field.
func (ac *ActivityCreate) SetSort(i int) *ActivityCreate {
	ac.mutation.SetSort(i)
	return ac
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableSort(i *int) *ActivityCreate {
	if i != nil {
		ac.SetSort(*i)
	}
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if activity.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized activity.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := activity.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if activity.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized activity.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := activity.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.Sort(); !ok {
		v := activity.DefaultSort
		ac.mutation.SetSort(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Activity.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Activity.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Activity.name"`)}
	}
	if _, ok := ac.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Activity.image"`)}
	}
	if _, ok := ac.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "Activity.link"`)}
	}
	if _, ok := ac.mutation.Sort(); !ok {
		return &ValidationError{Name: "sort", err: errors.New(`ent: missing required field "Activity.sort"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(activity.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(activity.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(activity.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(activity.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(activity.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(activity.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Image(); ok {
		_spec.SetField(activity.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ac.mutation.Link(); ok {
		_spec.SetField(activity.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := ac.mutation.Sort(); ok {
		_spec.SetField(activity.FieldSort, field.TypeInt, value)
		_node.Sort = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertOne {
	ac.conflict = opts
	return &ActivityUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflictColumns(columns ...string) *ActivityUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertOne{
		create: ac,
	}
}

type (
	// ActivityUpsertOne is the builder for "upsert"-ing
	//  one Activity node.
	ActivityUpsertOne struct {
		create *ActivityCreate
	}

	// ActivityUpsert is the "OnConflict" setter.
	ActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ActivityUpsert) SetUpdatedAt(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateUpdatedAt() *ActivityUpsert {
	u.SetExcluded(activity.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ActivityUpsert) SetDeletedAt(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateDeletedAt() *ActivityUpsert {
	u.SetExcluded(activity.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ActivityUpsert) ClearDeletedAt() *ActivityUpsert {
	u.SetNull(activity.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *ActivityUpsert) SetLastModifier(v *model.Modifier) *ActivityUpsert {
	u.Set(activity.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateLastModifier() *ActivityUpsert {
	u.SetExcluded(activity.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ActivityUpsert) ClearLastModifier() *ActivityUpsert {
	u.SetNull(activity.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *ActivityUpsert) SetRemark(v string) *ActivityUpsert {
	u.Set(activity.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateRemark() *ActivityUpsert {
	u.SetExcluded(activity.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *ActivityUpsert) ClearRemark() *ActivityUpsert {
	u.SetNull(activity.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *ActivityUpsert) SetName(v string) *ActivityUpsert {
	u.Set(activity.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateName() *ActivityUpsert {
	u.SetExcluded(activity.FieldName)
	return u
}

// SetImage sets the "image" field.
func (u *ActivityUpsert) SetImage(v string) *ActivityUpsert {
	u.Set(activity.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateImage() *ActivityUpsert {
	u.SetExcluded(activity.FieldImage)
	return u
}

// SetLink sets the "link" field.
func (u *ActivityUpsert) SetLink(v string) *ActivityUpsert {
	u.Set(activity.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateLink() *ActivityUpsert {
	u.SetExcluded(activity.FieldLink)
	return u
}

// SetSort sets the "sort" field.
func (u *ActivityUpsert) SetSort(v int) *ActivityUpsert {
	u.Set(activity.FieldSort, v)
	return u
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateSort() *ActivityUpsert {
	u.SetExcluded(activity.FieldSort)
	return u
}

// AddSort adds v to the "sort" field.
func (u *ActivityUpsert) AddSort(v int) *ActivityUpsert {
	u.Add(activity.FieldSort, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActivityUpsertOne) UpdateNewValues() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(activity.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(activity.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityUpsertOne) Ignore() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertOne) DoNothing() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreate.OnConflict
// documentation for more info.
func (u *ActivityUpsertOne) Update(set func(*ActivityUpsert)) *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ActivityUpsertOne) SetUpdatedAt(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateUpdatedAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ActivityUpsertOne) SetDeletedAt(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateDeletedAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ActivityUpsertOne) ClearDeletedAt() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ActivityUpsertOne) SetLastModifier(v *model.Modifier) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateLastModifier() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ActivityUpsertOne) ClearLastModifier() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ActivityUpsertOne) SetRemark(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateRemark() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ActivityUpsertOne) ClearRemark() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *ActivityUpsertOne) SetName(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateName() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *ActivityUpsertOne) SetImage(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateImage() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *ActivityUpsertOne) SetLink(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateLink() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLink()
	})
}

// SetSort sets the "sort" field.
func (u *ActivityUpsertOne) SetSort(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *ActivityUpsertOne) AddSort(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateSort() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *ActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertBulk {
	acb.conflict = opts
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflictColumns(columns ...string) *ActivityUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// ActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of Activity nodes.
type ActivityUpsertBulk struct {
	create *ActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ActivityUpsertBulk) UpdateNewValues() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(activity.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(activity.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityUpsertBulk) Ignore() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertBulk) DoNothing() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityUpsertBulk) Update(set func(*ActivityUpsert)) *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ActivityUpsertBulk) SetUpdatedAt(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateUpdatedAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ActivityUpsertBulk) SetDeletedAt(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateDeletedAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *ActivityUpsertBulk) ClearDeletedAt() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *ActivityUpsertBulk) SetLastModifier(v *model.Modifier) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateLastModifier() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *ActivityUpsertBulk) ClearLastModifier() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *ActivityUpsertBulk) SetRemark(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateRemark() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *ActivityUpsertBulk) ClearRemark() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *ActivityUpsertBulk) SetName(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateName() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateName()
	})
}

// SetImage sets the "image" field.
func (u *ActivityUpsertBulk) SetImage(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateImage() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateImage()
	})
}

// SetLink sets the "link" field.
func (u *ActivityUpsertBulk) SetLink(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateLink() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateLink()
	})
}

// SetSort sets the "sort" field.
func (u *ActivityUpsertBulk) SetSort(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetSort(v)
	})
}

// AddSort adds v to the "sort" field.
func (u *ActivityUpsertBulk) AddSort(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddSort(v)
	})
}

// UpdateSort sets the "sort" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateSort() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateSort()
	})
}

// Exec executes the query.
func (u *ActivityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
