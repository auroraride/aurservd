// Code generated by ent, DO NOT EDIT.

package ebikeallocate

const (
	// Label holds the string label denoting the ebikeallocate type in the database.
	Label = "ebike_allocate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldInfo holds the string denoting the info field in the database.
	FieldInfo = "info"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// Table holds the table name of the ebikeallocate in the database.
	Table = "ebike_allocate"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "ebike_allocate"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "ebike_allocate"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "ebike_allocate"
	// EbikeInverseTable is the table name for the Ebike entity.
	// It exists in this package in order to avoid circular dependency with the "ebike" package.
	EbikeInverseTable = "ebike"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "ebike_allocate"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "ebike_allocate"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "ebike_allocate"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "contract"
	// ContractInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractInverseTable = "contract"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "allocate_id"
)

// Columns holds all SQL columns for ebikeallocate fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldStoreID,
	FieldEbikeID,
	FieldBrandID,
	FieldSubscribeID,
	FieldRiderID,
	FieldStatus,
	FieldInfo,
	FieldTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
