// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assetcheck"
	"github.com/auroraride/aurservd/internal/ent/assetcheckdetails"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetCheckUpdate is the builder for updating AssetCheck entities.
type AssetCheckUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetCheckMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetCheckUpdate builder.
func (acu *AssetCheckUpdate) Where(ps ...predicate.AssetCheck) *AssetCheckUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AssetCheckUpdate) SetUpdatedAt(t time.Time) *AssetCheckUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetDeletedAt sets the "deleted_at" field.
func (acu *AssetCheckUpdate) SetDeletedAt(t time.Time) *AssetCheckUpdate {
	acu.mutation.SetDeletedAt(t)
	return acu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableDeletedAt(t *time.Time) *AssetCheckUpdate {
	if t != nil {
		acu.SetDeletedAt(*t)
	}
	return acu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acu *AssetCheckUpdate) ClearDeletedAt() *AssetCheckUpdate {
	acu.mutation.ClearDeletedAt()
	return acu
}

// SetLastModifier sets the "last_modifier" field.
func (acu *AssetCheckUpdate) SetLastModifier(m *model.Modifier) *AssetCheckUpdate {
	acu.mutation.SetLastModifier(m)
	return acu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (acu *AssetCheckUpdate) ClearLastModifier() *AssetCheckUpdate {
	acu.mutation.ClearLastModifier()
	return acu
}

// SetRemark sets the "remark" field.
func (acu *AssetCheckUpdate) SetRemark(s string) *AssetCheckUpdate {
	acu.mutation.SetRemark(s)
	return acu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableRemark(s *string) *AssetCheckUpdate {
	if s != nil {
		acu.SetRemark(*s)
	}
	return acu
}

// ClearRemark clears the value of the "remark" field.
func (acu *AssetCheckUpdate) ClearRemark() *AssetCheckUpdate {
	acu.mutation.ClearRemark()
	return acu
}

// SetStatus sets the "status" field.
func (acu *AssetCheckUpdate) SetStatus(u uint8) *AssetCheckUpdate {
	acu.mutation.ResetStatus()
	acu.mutation.SetStatus(u)
	return acu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableStatus(u *uint8) *AssetCheckUpdate {
	if u != nil {
		acu.SetStatus(*u)
	}
	return acu
}

// AddStatus adds u to the "status" field.
func (acu *AssetCheckUpdate) AddStatus(u int8) *AssetCheckUpdate {
	acu.mutation.AddStatus(u)
	return acu
}

// ClearStatus clears the value of the "status" field.
func (acu *AssetCheckUpdate) ClearStatus() *AssetCheckUpdate {
	acu.mutation.ClearStatus()
	return acu
}

// SetBatteryNum sets the "battery_num" field.
func (acu *AssetCheckUpdate) SetBatteryNum(u uint) *AssetCheckUpdate {
	acu.mutation.ResetBatteryNum()
	acu.mutation.SetBatteryNum(u)
	return acu
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableBatteryNum(u *uint) *AssetCheckUpdate {
	if u != nil {
		acu.SetBatteryNum(*u)
	}
	return acu
}

// AddBatteryNum adds u to the "battery_num" field.
func (acu *AssetCheckUpdate) AddBatteryNum(u int) *AssetCheckUpdate {
	acu.mutation.AddBatteryNum(u)
	return acu
}

// ClearBatteryNum clears the value of the "battery_num" field.
func (acu *AssetCheckUpdate) ClearBatteryNum() *AssetCheckUpdate {
	acu.mutation.ClearBatteryNum()
	return acu
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (acu *AssetCheckUpdate) SetBatteryNumReal(u uint) *AssetCheckUpdate {
	acu.mutation.ResetBatteryNumReal()
	acu.mutation.SetBatteryNumReal(u)
	return acu
}

// SetNillableBatteryNumReal sets the "battery_num_real" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableBatteryNumReal(u *uint) *AssetCheckUpdate {
	if u != nil {
		acu.SetBatteryNumReal(*u)
	}
	return acu
}

// AddBatteryNumReal adds u to the "battery_num_real" field.
func (acu *AssetCheckUpdate) AddBatteryNumReal(u int) *AssetCheckUpdate {
	acu.mutation.AddBatteryNumReal(u)
	return acu
}

// ClearBatteryNumReal clears the value of the "battery_num_real" field.
func (acu *AssetCheckUpdate) ClearBatteryNumReal() *AssetCheckUpdate {
	acu.mutation.ClearBatteryNumReal()
	return acu
}

// SetEbikeNum sets the "ebike_num" field.
func (acu *AssetCheckUpdate) SetEbikeNum(u uint) *AssetCheckUpdate {
	acu.mutation.ResetEbikeNum()
	acu.mutation.SetEbikeNum(u)
	return acu
}

// SetNillableEbikeNum sets the "ebike_num" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableEbikeNum(u *uint) *AssetCheckUpdate {
	if u != nil {
		acu.SetEbikeNum(*u)
	}
	return acu
}

// AddEbikeNum adds u to the "ebike_num" field.
func (acu *AssetCheckUpdate) AddEbikeNum(u int) *AssetCheckUpdate {
	acu.mutation.AddEbikeNum(u)
	return acu
}

// ClearEbikeNum clears the value of the "ebike_num" field.
func (acu *AssetCheckUpdate) ClearEbikeNum() *AssetCheckUpdate {
	acu.mutation.ClearEbikeNum()
	return acu
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (acu *AssetCheckUpdate) SetEbikeNumReal(u uint) *AssetCheckUpdate {
	acu.mutation.ResetEbikeNumReal()
	acu.mutation.SetEbikeNumReal(u)
	return acu
}

// SetNillableEbikeNumReal sets the "ebike_num_real" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableEbikeNumReal(u *uint) *AssetCheckUpdate {
	if u != nil {
		acu.SetEbikeNumReal(*u)
	}
	return acu
}

// AddEbikeNumReal adds u to the "ebike_num_real" field.
func (acu *AssetCheckUpdate) AddEbikeNumReal(u int) *AssetCheckUpdate {
	acu.mutation.AddEbikeNumReal(u)
	return acu
}

// ClearEbikeNumReal clears the value of the "ebike_num_real" field.
func (acu *AssetCheckUpdate) ClearEbikeNumReal() *AssetCheckUpdate {
	acu.mutation.ClearEbikeNumReal()
	return acu
}

// SetOperateID sets the "operate_id" field.
func (acu *AssetCheckUpdate) SetOperateID(u uint64) *AssetCheckUpdate {
	acu.mutation.SetOperateID(u)
	return acu
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableOperateID(u *uint64) *AssetCheckUpdate {
	if u != nil {
		acu.SetOperateID(*u)
	}
	return acu
}

// ClearOperateID clears the value of the "operate_id" field.
func (acu *AssetCheckUpdate) ClearOperateID() *AssetCheckUpdate {
	acu.mutation.ClearOperateID()
	return acu
}

// SetOperateType sets the "operate_type" field.
func (acu *AssetCheckUpdate) SetOperateType(u uint8) *AssetCheckUpdate {
	acu.mutation.ResetOperateType()
	acu.mutation.SetOperateType(u)
	return acu
}

// SetNillableOperateType sets the "operate_type" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableOperateType(u *uint8) *AssetCheckUpdate {
	if u != nil {
		acu.SetOperateType(*u)
	}
	return acu
}

// AddOperateType adds u to the "operate_type" field.
func (acu *AssetCheckUpdate) AddOperateType(u int8) *AssetCheckUpdate {
	acu.mutation.AddOperateType(u)
	return acu
}

// ClearOperateType clears the value of the "operate_type" field.
func (acu *AssetCheckUpdate) ClearOperateType() *AssetCheckUpdate {
	acu.mutation.ClearOperateType()
	return acu
}

// SetLocationsType sets the "locations_type" field.
func (acu *AssetCheckUpdate) SetLocationsType(u uint8) *AssetCheckUpdate {
	acu.mutation.ResetLocationsType()
	acu.mutation.SetLocationsType(u)
	return acu
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableLocationsType(u *uint8) *AssetCheckUpdate {
	if u != nil {
		acu.SetLocationsType(*u)
	}
	return acu
}

// AddLocationsType adds u to the "locations_type" field.
func (acu *AssetCheckUpdate) AddLocationsType(u int8) *AssetCheckUpdate {
	acu.mutation.AddLocationsType(u)
	return acu
}

// ClearLocationsType clears the value of the "locations_type" field.
func (acu *AssetCheckUpdate) ClearLocationsType() *AssetCheckUpdate {
	acu.mutation.ClearLocationsType()
	return acu
}

// SetLocationsID sets the "locations_id" field.
func (acu *AssetCheckUpdate) SetLocationsID(u uint64) *AssetCheckUpdate {
	acu.mutation.SetLocationsID(u)
	return acu
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableLocationsID(u *uint64) *AssetCheckUpdate {
	if u != nil {
		acu.SetLocationsID(*u)
	}
	return acu
}

// ClearLocationsID clears the value of the "locations_id" field.
func (acu *AssetCheckUpdate) ClearLocationsID() *AssetCheckUpdate {
	acu.mutation.ClearLocationsID()
	return acu
}

// SetStartAt sets the "start_at" field.
func (acu *AssetCheckUpdate) SetStartAt(t time.Time) *AssetCheckUpdate {
	acu.mutation.SetStartAt(t)
	return acu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableStartAt(t *time.Time) *AssetCheckUpdate {
	if t != nil {
		acu.SetStartAt(*t)
	}
	return acu
}

// ClearStartAt clears the value of the "start_at" field.
func (acu *AssetCheckUpdate) ClearStartAt() *AssetCheckUpdate {
	acu.mutation.ClearStartAt()
	return acu
}

// SetEndAt sets the "end_at" field.
func (acu *AssetCheckUpdate) SetEndAt(t time.Time) *AssetCheckUpdate {
	acu.mutation.SetEndAt(t)
	return acu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableEndAt(t *time.Time) *AssetCheckUpdate {
	if t != nil {
		acu.SetEndAt(*t)
	}
	return acu
}

// ClearEndAt clears the value of the "end_at" field.
func (acu *AssetCheckUpdate) ClearEndAt() *AssetCheckUpdate {
	acu.mutation.ClearEndAt()
	return acu
}

// AddCheckDetailIDs adds the "check_details" edge to the AssetCheckDetails entity by IDs.
func (acu *AssetCheckUpdate) AddCheckDetailIDs(ids ...uint64) *AssetCheckUpdate {
	acu.mutation.AddCheckDetailIDs(ids...)
	return acu
}

// AddCheckDetails adds the "check_details" edges to the AssetCheckDetails entity.
func (acu *AssetCheckUpdate) AddCheckDetails(a ...*AssetCheckDetails) *AssetCheckUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.AddCheckDetailIDs(ids...)
}

// SetOperateAssetManagerID sets the "operate_asset_manager" edge to the AssetManager entity by ID.
func (acu *AssetCheckUpdate) SetOperateAssetManagerID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetOperateAssetManagerID(id)
	return acu
}

// SetNillableOperateAssetManagerID sets the "operate_asset_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableOperateAssetManagerID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetOperateAssetManagerID(*id)
	}
	return acu
}

// SetOperateAssetManager sets the "operate_asset_manager" edge to the AssetManager entity.
func (acu *AssetCheckUpdate) SetOperateAssetManager(a *AssetManager) *AssetCheckUpdate {
	return acu.SetOperateAssetManagerID(a.ID)
}

// SetOperateEmployeeID sets the "operate_employee" edge to the Employee entity by ID.
func (acu *AssetCheckUpdate) SetOperateEmployeeID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetOperateEmployeeID(id)
	return acu
}

// SetNillableOperateEmployeeID sets the "operate_employee" edge to the Employee entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableOperateEmployeeID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetOperateEmployeeID(*id)
	}
	return acu
}

// SetOperateEmployee sets the "operate_employee" edge to the Employee entity.
func (acu *AssetCheckUpdate) SetOperateEmployee(e *Employee) *AssetCheckUpdate {
	return acu.SetOperateEmployeeID(e.ID)
}

// SetOperateAgentID sets the "operate_agent" edge to the Agent entity by ID.
func (acu *AssetCheckUpdate) SetOperateAgentID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetOperateAgentID(id)
	return acu
}

// SetNillableOperateAgentID sets the "operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableOperateAgentID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetOperateAgentID(*id)
	}
	return acu
}

// SetOperateAgent sets the "operate_agent" edge to the Agent entity.
func (acu *AssetCheckUpdate) SetOperateAgent(a *Agent) *AssetCheckUpdate {
	return acu.SetOperateAgentID(a.ID)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (acu *AssetCheckUpdate) SetWarehouseID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetWarehouseID(id)
	return acu
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableWarehouseID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetWarehouseID(*id)
	}
	return acu
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (acu *AssetCheckUpdate) SetWarehouse(w *Warehouse) *AssetCheckUpdate {
	return acu.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (acu *AssetCheckUpdate) SetStoreID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetStoreID(id)
	return acu
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableStoreID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetStoreID(*id)
	}
	return acu
}

// SetStore sets the "store" edge to the Store entity.
func (acu *AssetCheckUpdate) SetStore(s *Store) *AssetCheckUpdate {
	return acu.SetStoreID(s.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (acu *AssetCheckUpdate) SetStationID(id uint64) *AssetCheckUpdate {
	acu.mutation.SetStationID(id)
	return acu
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (acu *AssetCheckUpdate) SetNillableStationID(id *uint64) *AssetCheckUpdate {
	if id != nil {
		acu = acu.SetStationID(*id)
	}
	return acu
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (acu *AssetCheckUpdate) SetStation(e *EnterpriseStation) *AssetCheckUpdate {
	return acu.SetStationID(e.ID)
}

// Mutation returns the AssetCheckMutation object of the builder.
func (acu *AssetCheckUpdate) Mutation() *AssetCheckMutation {
	return acu.mutation
}

// ClearCheckDetails clears all "check_details" edges to the AssetCheckDetails entity.
func (acu *AssetCheckUpdate) ClearCheckDetails() *AssetCheckUpdate {
	acu.mutation.ClearCheckDetails()
	return acu
}

// RemoveCheckDetailIDs removes the "check_details" edge to AssetCheckDetails entities by IDs.
func (acu *AssetCheckUpdate) RemoveCheckDetailIDs(ids ...uint64) *AssetCheckUpdate {
	acu.mutation.RemoveCheckDetailIDs(ids...)
	return acu
}

// RemoveCheckDetails removes "check_details" edges to AssetCheckDetails entities.
func (acu *AssetCheckUpdate) RemoveCheckDetails(a ...*AssetCheckDetails) *AssetCheckUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acu.RemoveCheckDetailIDs(ids...)
}

// ClearOperateAssetManager clears the "operate_asset_manager" edge to the AssetManager entity.
func (acu *AssetCheckUpdate) ClearOperateAssetManager() *AssetCheckUpdate {
	acu.mutation.ClearOperateAssetManager()
	return acu
}

// ClearOperateEmployee clears the "operate_employee" edge to the Employee entity.
func (acu *AssetCheckUpdate) ClearOperateEmployee() *AssetCheckUpdate {
	acu.mutation.ClearOperateEmployee()
	return acu
}

// ClearOperateAgent clears the "operate_agent" edge to the Agent entity.
func (acu *AssetCheckUpdate) ClearOperateAgent() *AssetCheckUpdate {
	acu.mutation.ClearOperateAgent()
	return acu
}

// ClearWarehouse clears the "warehouse" edge to the Warehouse entity.
func (acu *AssetCheckUpdate) ClearWarehouse() *AssetCheckUpdate {
	acu.mutation.ClearWarehouse()
	return acu
}

// ClearStore clears the "store" edge to the Store entity.
func (acu *AssetCheckUpdate) ClearStore() *AssetCheckUpdate {
	acu.mutation.ClearStore()
	return acu
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (acu *AssetCheckUpdate) ClearStation() *AssetCheckUpdate {
	acu.mutation.ClearStation()
	return acu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AssetCheckUpdate) Save(ctx context.Context) (int, error) {
	if err := acu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AssetCheckUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AssetCheckUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AssetCheckUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AssetCheckUpdate) defaults() error {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		if assetcheck.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheck.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheck.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *AssetCheckUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetCheckUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *AssetCheckUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetcheck.Table, assetcheck.Columns, sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheck.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheck.FieldDeletedAt, field.TypeTime, value)
	}
	if acu.mutation.DeletedAtCleared() {
		_spec.ClearField(assetcheck.FieldDeletedAt, field.TypeTime)
	}
	if acu.mutation.CreatorCleared() {
		_spec.ClearField(assetcheck.FieldCreator, field.TypeJSON)
	}
	if value, ok := acu.mutation.LastModifier(); ok {
		_spec.SetField(assetcheck.FieldLastModifier, field.TypeJSON, value)
	}
	if acu.mutation.LastModifierCleared() {
		_spec.ClearField(assetcheck.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := acu.mutation.Remark(); ok {
		_spec.SetField(assetcheck.FieldRemark, field.TypeString, value)
	}
	if acu.mutation.RemarkCleared() {
		_spec.ClearField(assetcheck.FieldRemark, field.TypeString)
	}
	if value, ok := acu.mutation.Status(); ok {
		_spec.SetField(assetcheck.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := acu.mutation.AddedStatus(); ok {
		_spec.AddField(assetcheck.FieldStatus, field.TypeUint8, value)
	}
	if acu.mutation.StatusCleared() {
		_spec.ClearField(assetcheck.FieldStatus, field.TypeUint8)
	}
	if value, ok := acu.mutation.BatteryNum(); ok {
		_spec.SetField(assetcheck.FieldBatteryNum, field.TypeUint, value)
	}
	if value, ok := acu.mutation.AddedBatteryNum(); ok {
		_spec.AddField(assetcheck.FieldBatteryNum, field.TypeUint, value)
	}
	if acu.mutation.BatteryNumCleared() {
		_spec.ClearField(assetcheck.FieldBatteryNum, field.TypeUint)
	}
	if value, ok := acu.mutation.BatteryNumReal(); ok {
		_spec.SetField(assetcheck.FieldBatteryNumReal, field.TypeUint, value)
	}
	if value, ok := acu.mutation.AddedBatteryNumReal(); ok {
		_spec.AddField(assetcheck.FieldBatteryNumReal, field.TypeUint, value)
	}
	if acu.mutation.BatteryNumRealCleared() {
		_spec.ClearField(assetcheck.FieldBatteryNumReal, field.TypeUint)
	}
	if value, ok := acu.mutation.EbikeNum(); ok {
		_spec.SetField(assetcheck.FieldEbikeNum, field.TypeUint, value)
	}
	if value, ok := acu.mutation.AddedEbikeNum(); ok {
		_spec.AddField(assetcheck.FieldEbikeNum, field.TypeUint, value)
	}
	if acu.mutation.EbikeNumCleared() {
		_spec.ClearField(assetcheck.FieldEbikeNum, field.TypeUint)
	}
	if value, ok := acu.mutation.EbikeNumReal(); ok {
		_spec.SetField(assetcheck.FieldEbikeNumReal, field.TypeUint, value)
	}
	if value, ok := acu.mutation.AddedEbikeNumReal(); ok {
		_spec.AddField(assetcheck.FieldEbikeNumReal, field.TypeUint, value)
	}
	if acu.mutation.EbikeNumRealCleared() {
		_spec.ClearField(assetcheck.FieldEbikeNumReal, field.TypeUint)
	}
	if value, ok := acu.mutation.OperateType(); ok {
		_spec.SetField(assetcheck.FieldOperateType, field.TypeUint8, value)
	}
	if value, ok := acu.mutation.AddedOperateType(); ok {
		_spec.AddField(assetcheck.FieldOperateType, field.TypeUint8, value)
	}
	if acu.mutation.OperateTypeCleared() {
		_spec.ClearField(assetcheck.FieldOperateType, field.TypeUint8)
	}
	if value, ok := acu.mutation.LocationsType(); ok {
		_spec.SetField(assetcheck.FieldLocationsType, field.TypeUint8, value)
	}
	if value, ok := acu.mutation.AddedLocationsType(); ok {
		_spec.AddField(assetcheck.FieldLocationsType, field.TypeUint8, value)
	}
	if acu.mutation.LocationsTypeCleared() {
		_spec.ClearField(assetcheck.FieldLocationsType, field.TypeUint8)
	}
	if value, ok := acu.mutation.StartAt(); ok {
		_spec.SetField(assetcheck.FieldStartAt, field.TypeTime, value)
	}
	if acu.mutation.StartAtCleared() {
		_spec.ClearField(assetcheck.FieldStartAt, field.TypeTime)
	}
	if value, ok := acu.mutation.EndAt(); ok {
		_spec.SetField(assetcheck.FieldEndAt, field.TypeTime, value)
	}
	if acu.mutation.EndAtCleared() {
		_spec.ClearField(assetcheck.FieldEndAt, field.TypeTime)
	}
	if acu.mutation.CheckDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.RemovedCheckDetailsIDs(); len(nodes) > 0 && !acu.mutation.CheckDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.CheckDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.OperateAssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAssetManagerTable,
			Columns: []string{assetcheck.OperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.OperateAssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAssetManagerTable,
			Columns: []string{assetcheck.OperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.OperateEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateEmployeeTable,
			Columns: []string{assetcheck.OperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.OperateEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateEmployeeTable,
			Columns: []string{assetcheck.OperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.OperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAgentTable,
			Columns: []string{assetcheck.OperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.OperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAgentTable,
			Columns: []string{assetcheck.OperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.WarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.WarehouseTable,
			Columns: []string{assetcheck.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.WarehouseTable,
			Columns: []string{assetcheck.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StoreTable,
			Columns: []string{assetcheck.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StoreTable,
			Columns: []string{assetcheck.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StationTable,
			Columns: []string{assetcheck.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StationTable,
			Columns: []string{assetcheck.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AssetCheckUpdateOne is the builder for updating a single AssetCheck entity.
type AssetCheckUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetCheckMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AssetCheckUpdateOne) SetUpdatedAt(t time.Time) *AssetCheckUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetDeletedAt sets the "deleted_at" field.
func (acuo *AssetCheckUpdateOne) SetDeletedAt(t time.Time) *AssetCheckUpdateOne {
	acuo.mutation.SetDeletedAt(t)
	return acuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetCheckUpdateOne {
	if t != nil {
		acuo.SetDeletedAt(*t)
	}
	return acuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (acuo *AssetCheckUpdateOne) ClearDeletedAt() *AssetCheckUpdateOne {
	acuo.mutation.ClearDeletedAt()
	return acuo
}

// SetLastModifier sets the "last_modifier" field.
func (acuo *AssetCheckUpdateOne) SetLastModifier(m *model.Modifier) *AssetCheckUpdateOne {
	acuo.mutation.SetLastModifier(m)
	return acuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (acuo *AssetCheckUpdateOne) ClearLastModifier() *AssetCheckUpdateOne {
	acuo.mutation.ClearLastModifier()
	return acuo
}

// SetRemark sets the "remark" field.
func (acuo *AssetCheckUpdateOne) SetRemark(s string) *AssetCheckUpdateOne {
	acuo.mutation.SetRemark(s)
	return acuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableRemark(s *string) *AssetCheckUpdateOne {
	if s != nil {
		acuo.SetRemark(*s)
	}
	return acuo
}

// ClearRemark clears the value of the "remark" field.
func (acuo *AssetCheckUpdateOne) ClearRemark() *AssetCheckUpdateOne {
	acuo.mutation.ClearRemark()
	return acuo
}

// SetStatus sets the "status" field.
func (acuo *AssetCheckUpdateOne) SetStatus(u uint8) *AssetCheckUpdateOne {
	acuo.mutation.ResetStatus()
	acuo.mutation.SetStatus(u)
	return acuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableStatus(u *uint8) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetStatus(*u)
	}
	return acuo
}

// AddStatus adds u to the "status" field.
func (acuo *AssetCheckUpdateOne) AddStatus(u int8) *AssetCheckUpdateOne {
	acuo.mutation.AddStatus(u)
	return acuo
}

// ClearStatus clears the value of the "status" field.
func (acuo *AssetCheckUpdateOne) ClearStatus() *AssetCheckUpdateOne {
	acuo.mutation.ClearStatus()
	return acuo
}

// SetBatteryNum sets the "battery_num" field.
func (acuo *AssetCheckUpdateOne) SetBatteryNum(u uint) *AssetCheckUpdateOne {
	acuo.mutation.ResetBatteryNum()
	acuo.mutation.SetBatteryNum(u)
	return acuo
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableBatteryNum(u *uint) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetBatteryNum(*u)
	}
	return acuo
}

// AddBatteryNum adds u to the "battery_num" field.
func (acuo *AssetCheckUpdateOne) AddBatteryNum(u int) *AssetCheckUpdateOne {
	acuo.mutation.AddBatteryNum(u)
	return acuo
}

// ClearBatteryNum clears the value of the "battery_num" field.
func (acuo *AssetCheckUpdateOne) ClearBatteryNum() *AssetCheckUpdateOne {
	acuo.mutation.ClearBatteryNum()
	return acuo
}

// SetBatteryNumReal sets the "battery_num_real" field.
func (acuo *AssetCheckUpdateOne) SetBatteryNumReal(u uint) *AssetCheckUpdateOne {
	acuo.mutation.ResetBatteryNumReal()
	acuo.mutation.SetBatteryNumReal(u)
	return acuo
}

// SetNillableBatteryNumReal sets the "battery_num_real" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableBatteryNumReal(u *uint) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetBatteryNumReal(*u)
	}
	return acuo
}

// AddBatteryNumReal adds u to the "battery_num_real" field.
func (acuo *AssetCheckUpdateOne) AddBatteryNumReal(u int) *AssetCheckUpdateOne {
	acuo.mutation.AddBatteryNumReal(u)
	return acuo
}

// ClearBatteryNumReal clears the value of the "battery_num_real" field.
func (acuo *AssetCheckUpdateOne) ClearBatteryNumReal() *AssetCheckUpdateOne {
	acuo.mutation.ClearBatteryNumReal()
	return acuo
}

// SetEbikeNum sets the "ebike_num" field.
func (acuo *AssetCheckUpdateOne) SetEbikeNum(u uint) *AssetCheckUpdateOne {
	acuo.mutation.ResetEbikeNum()
	acuo.mutation.SetEbikeNum(u)
	return acuo
}

// SetNillableEbikeNum sets the "ebike_num" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableEbikeNum(u *uint) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetEbikeNum(*u)
	}
	return acuo
}

// AddEbikeNum adds u to the "ebike_num" field.
func (acuo *AssetCheckUpdateOne) AddEbikeNum(u int) *AssetCheckUpdateOne {
	acuo.mutation.AddEbikeNum(u)
	return acuo
}

// ClearEbikeNum clears the value of the "ebike_num" field.
func (acuo *AssetCheckUpdateOne) ClearEbikeNum() *AssetCheckUpdateOne {
	acuo.mutation.ClearEbikeNum()
	return acuo
}

// SetEbikeNumReal sets the "ebike_num_real" field.
func (acuo *AssetCheckUpdateOne) SetEbikeNumReal(u uint) *AssetCheckUpdateOne {
	acuo.mutation.ResetEbikeNumReal()
	acuo.mutation.SetEbikeNumReal(u)
	return acuo
}

// SetNillableEbikeNumReal sets the "ebike_num_real" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableEbikeNumReal(u *uint) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetEbikeNumReal(*u)
	}
	return acuo
}

// AddEbikeNumReal adds u to the "ebike_num_real" field.
func (acuo *AssetCheckUpdateOne) AddEbikeNumReal(u int) *AssetCheckUpdateOne {
	acuo.mutation.AddEbikeNumReal(u)
	return acuo
}

// ClearEbikeNumReal clears the value of the "ebike_num_real" field.
func (acuo *AssetCheckUpdateOne) ClearEbikeNumReal() *AssetCheckUpdateOne {
	acuo.mutation.ClearEbikeNumReal()
	return acuo
}

// SetOperateID sets the "operate_id" field.
func (acuo *AssetCheckUpdateOne) SetOperateID(u uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetOperateID(u)
	return acuo
}

// SetNillableOperateID sets the "operate_id" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableOperateID(u *uint64) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetOperateID(*u)
	}
	return acuo
}

// ClearOperateID clears the value of the "operate_id" field.
func (acuo *AssetCheckUpdateOne) ClearOperateID() *AssetCheckUpdateOne {
	acuo.mutation.ClearOperateID()
	return acuo
}

// SetOperateType sets the "operate_type" field.
func (acuo *AssetCheckUpdateOne) SetOperateType(u uint8) *AssetCheckUpdateOne {
	acuo.mutation.ResetOperateType()
	acuo.mutation.SetOperateType(u)
	return acuo
}

// SetNillableOperateType sets the "operate_type" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableOperateType(u *uint8) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetOperateType(*u)
	}
	return acuo
}

// AddOperateType adds u to the "operate_type" field.
func (acuo *AssetCheckUpdateOne) AddOperateType(u int8) *AssetCheckUpdateOne {
	acuo.mutation.AddOperateType(u)
	return acuo
}

// ClearOperateType clears the value of the "operate_type" field.
func (acuo *AssetCheckUpdateOne) ClearOperateType() *AssetCheckUpdateOne {
	acuo.mutation.ClearOperateType()
	return acuo
}

// SetLocationsType sets the "locations_type" field.
func (acuo *AssetCheckUpdateOne) SetLocationsType(u uint8) *AssetCheckUpdateOne {
	acuo.mutation.ResetLocationsType()
	acuo.mutation.SetLocationsType(u)
	return acuo
}

// SetNillableLocationsType sets the "locations_type" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableLocationsType(u *uint8) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetLocationsType(*u)
	}
	return acuo
}

// AddLocationsType adds u to the "locations_type" field.
func (acuo *AssetCheckUpdateOne) AddLocationsType(u int8) *AssetCheckUpdateOne {
	acuo.mutation.AddLocationsType(u)
	return acuo
}

// ClearLocationsType clears the value of the "locations_type" field.
func (acuo *AssetCheckUpdateOne) ClearLocationsType() *AssetCheckUpdateOne {
	acuo.mutation.ClearLocationsType()
	return acuo
}

// SetLocationsID sets the "locations_id" field.
func (acuo *AssetCheckUpdateOne) SetLocationsID(u uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetLocationsID(u)
	return acuo
}

// SetNillableLocationsID sets the "locations_id" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableLocationsID(u *uint64) *AssetCheckUpdateOne {
	if u != nil {
		acuo.SetLocationsID(*u)
	}
	return acuo
}

// ClearLocationsID clears the value of the "locations_id" field.
func (acuo *AssetCheckUpdateOne) ClearLocationsID() *AssetCheckUpdateOne {
	acuo.mutation.ClearLocationsID()
	return acuo
}

// SetStartAt sets the "start_at" field.
func (acuo *AssetCheckUpdateOne) SetStartAt(t time.Time) *AssetCheckUpdateOne {
	acuo.mutation.SetStartAt(t)
	return acuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableStartAt(t *time.Time) *AssetCheckUpdateOne {
	if t != nil {
		acuo.SetStartAt(*t)
	}
	return acuo
}

// ClearStartAt clears the value of the "start_at" field.
func (acuo *AssetCheckUpdateOne) ClearStartAt() *AssetCheckUpdateOne {
	acuo.mutation.ClearStartAt()
	return acuo
}

// SetEndAt sets the "end_at" field.
func (acuo *AssetCheckUpdateOne) SetEndAt(t time.Time) *AssetCheckUpdateOne {
	acuo.mutation.SetEndAt(t)
	return acuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableEndAt(t *time.Time) *AssetCheckUpdateOne {
	if t != nil {
		acuo.SetEndAt(*t)
	}
	return acuo
}

// ClearEndAt clears the value of the "end_at" field.
func (acuo *AssetCheckUpdateOne) ClearEndAt() *AssetCheckUpdateOne {
	acuo.mutation.ClearEndAt()
	return acuo
}

// AddCheckDetailIDs adds the "check_details" edge to the AssetCheckDetails entity by IDs.
func (acuo *AssetCheckUpdateOne) AddCheckDetailIDs(ids ...uint64) *AssetCheckUpdateOne {
	acuo.mutation.AddCheckDetailIDs(ids...)
	return acuo
}

// AddCheckDetails adds the "check_details" edges to the AssetCheckDetails entity.
func (acuo *AssetCheckUpdateOne) AddCheckDetails(a ...*AssetCheckDetails) *AssetCheckUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.AddCheckDetailIDs(ids...)
}

// SetOperateAssetManagerID sets the "operate_asset_manager" edge to the AssetManager entity by ID.
func (acuo *AssetCheckUpdateOne) SetOperateAssetManagerID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetOperateAssetManagerID(id)
	return acuo
}

// SetNillableOperateAssetManagerID sets the "operate_asset_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableOperateAssetManagerID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetOperateAssetManagerID(*id)
	}
	return acuo
}

// SetOperateAssetManager sets the "operate_asset_manager" edge to the AssetManager entity.
func (acuo *AssetCheckUpdateOne) SetOperateAssetManager(a *AssetManager) *AssetCheckUpdateOne {
	return acuo.SetOperateAssetManagerID(a.ID)
}

// SetOperateEmployeeID sets the "operate_employee" edge to the Employee entity by ID.
func (acuo *AssetCheckUpdateOne) SetOperateEmployeeID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetOperateEmployeeID(id)
	return acuo
}

// SetNillableOperateEmployeeID sets the "operate_employee" edge to the Employee entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableOperateEmployeeID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetOperateEmployeeID(*id)
	}
	return acuo
}

// SetOperateEmployee sets the "operate_employee" edge to the Employee entity.
func (acuo *AssetCheckUpdateOne) SetOperateEmployee(e *Employee) *AssetCheckUpdateOne {
	return acuo.SetOperateEmployeeID(e.ID)
}

// SetOperateAgentID sets the "operate_agent" edge to the Agent entity by ID.
func (acuo *AssetCheckUpdateOne) SetOperateAgentID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetOperateAgentID(id)
	return acuo
}

// SetNillableOperateAgentID sets the "operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableOperateAgentID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetOperateAgentID(*id)
	}
	return acuo
}

// SetOperateAgent sets the "operate_agent" edge to the Agent entity.
func (acuo *AssetCheckUpdateOne) SetOperateAgent(a *Agent) *AssetCheckUpdateOne {
	return acuo.SetOperateAgentID(a.ID)
}

// SetWarehouseID sets the "warehouse" edge to the Warehouse entity by ID.
func (acuo *AssetCheckUpdateOne) SetWarehouseID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetWarehouseID(id)
	return acuo
}

// SetNillableWarehouseID sets the "warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableWarehouseID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetWarehouseID(*id)
	}
	return acuo
}

// SetWarehouse sets the "warehouse" edge to the Warehouse entity.
func (acuo *AssetCheckUpdateOne) SetWarehouse(w *Warehouse) *AssetCheckUpdateOne {
	return acuo.SetWarehouseID(w.ID)
}

// SetStoreID sets the "store" edge to the Store entity by ID.
func (acuo *AssetCheckUpdateOne) SetStoreID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetStoreID(id)
	return acuo
}

// SetNillableStoreID sets the "store" edge to the Store entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableStoreID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetStoreID(*id)
	}
	return acuo
}

// SetStore sets the "store" edge to the Store entity.
func (acuo *AssetCheckUpdateOne) SetStore(s *Store) *AssetCheckUpdateOne {
	return acuo.SetStoreID(s.ID)
}

// SetStationID sets the "station" edge to the EnterpriseStation entity by ID.
func (acuo *AssetCheckUpdateOne) SetStationID(id uint64) *AssetCheckUpdateOne {
	acuo.mutation.SetStationID(id)
	return acuo
}

// SetNillableStationID sets the "station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (acuo *AssetCheckUpdateOne) SetNillableStationID(id *uint64) *AssetCheckUpdateOne {
	if id != nil {
		acuo = acuo.SetStationID(*id)
	}
	return acuo
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (acuo *AssetCheckUpdateOne) SetStation(e *EnterpriseStation) *AssetCheckUpdateOne {
	return acuo.SetStationID(e.ID)
}

// Mutation returns the AssetCheckMutation object of the builder.
func (acuo *AssetCheckUpdateOne) Mutation() *AssetCheckMutation {
	return acuo.mutation
}

// ClearCheckDetails clears all "check_details" edges to the AssetCheckDetails entity.
func (acuo *AssetCheckUpdateOne) ClearCheckDetails() *AssetCheckUpdateOne {
	acuo.mutation.ClearCheckDetails()
	return acuo
}

// RemoveCheckDetailIDs removes the "check_details" edge to AssetCheckDetails entities by IDs.
func (acuo *AssetCheckUpdateOne) RemoveCheckDetailIDs(ids ...uint64) *AssetCheckUpdateOne {
	acuo.mutation.RemoveCheckDetailIDs(ids...)
	return acuo
}

// RemoveCheckDetails removes "check_details" edges to AssetCheckDetails entities.
func (acuo *AssetCheckUpdateOne) RemoveCheckDetails(a ...*AssetCheckDetails) *AssetCheckUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return acuo.RemoveCheckDetailIDs(ids...)
}

// ClearOperateAssetManager clears the "operate_asset_manager" edge to the AssetManager entity.
func (acuo *AssetCheckUpdateOne) ClearOperateAssetManager() *AssetCheckUpdateOne {
	acuo.mutation.ClearOperateAssetManager()
	return acuo
}

// ClearOperateEmployee clears the "operate_employee" edge to the Employee entity.
func (acuo *AssetCheckUpdateOne) ClearOperateEmployee() *AssetCheckUpdateOne {
	acuo.mutation.ClearOperateEmployee()
	return acuo
}

// ClearOperateAgent clears the "operate_agent" edge to the Agent entity.
func (acuo *AssetCheckUpdateOne) ClearOperateAgent() *AssetCheckUpdateOne {
	acuo.mutation.ClearOperateAgent()
	return acuo
}

// ClearWarehouse clears the "warehouse" edge to the Warehouse entity.
func (acuo *AssetCheckUpdateOne) ClearWarehouse() *AssetCheckUpdateOne {
	acuo.mutation.ClearWarehouse()
	return acuo
}

// ClearStore clears the "store" edge to the Store entity.
func (acuo *AssetCheckUpdateOne) ClearStore() *AssetCheckUpdateOne {
	acuo.mutation.ClearStore()
	return acuo
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (acuo *AssetCheckUpdateOne) ClearStation() *AssetCheckUpdateOne {
	acuo.mutation.ClearStation()
	return acuo
}

// Where appends a list predicates to the AssetCheckUpdate builder.
func (acuo *AssetCheckUpdateOne) Where(ps ...predicate.AssetCheck) *AssetCheckUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AssetCheckUpdateOne) Select(field string, fields ...string) *AssetCheckUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AssetCheck entity.
func (acuo *AssetCheckUpdateOne) Save(ctx context.Context) (*AssetCheck, error) {
	if err := acuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AssetCheckUpdateOne) SaveX(ctx context.Context) *AssetCheck {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AssetCheckUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AssetCheckUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AssetCheckUpdateOne) defaults() error {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		if assetcheck.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetcheck.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetcheck.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *AssetCheckUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetCheckUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *AssetCheckUpdateOne) sqlSave(ctx context.Context) (_node *AssetCheck, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetcheck.Table, assetcheck.Columns, sqlgraph.NewFieldSpec(assetcheck.FieldID, field.TypeUint64))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetCheck.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetcheck.FieldID)
		for _, f := range fields {
			if !assetcheck.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetcheck.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetcheck.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.DeletedAt(); ok {
		_spec.SetField(assetcheck.FieldDeletedAt, field.TypeTime, value)
	}
	if acuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assetcheck.FieldDeletedAt, field.TypeTime)
	}
	if acuo.mutation.CreatorCleared() {
		_spec.ClearField(assetcheck.FieldCreator, field.TypeJSON)
	}
	if value, ok := acuo.mutation.LastModifier(); ok {
		_spec.SetField(assetcheck.FieldLastModifier, field.TypeJSON, value)
	}
	if acuo.mutation.LastModifierCleared() {
		_spec.ClearField(assetcheck.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := acuo.mutation.Remark(); ok {
		_spec.SetField(assetcheck.FieldRemark, field.TypeString, value)
	}
	if acuo.mutation.RemarkCleared() {
		_spec.ClearField(assetcheck.FieldRemark, field.TypeString)
	}
	if value, ok := acuo.mutation.Status(); ok {
		_spec.SetField(assetcheck.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := acuo.mutation.AddedStatus(); ok {
		_spec.AddField(assetcheck.FieldStatus, field.TypeUint8, value)
	}
	if acuo.mutation.StatusCleared() {
		_spec.ClearField(assetcheck.FieldStatus, field.TypeUint8)
	}
	if value, ok := acuo.mutation.BatteryNum(); ok {
		_spec.SetField(assetcheck.FieldBatteryNum, field.TypeUint, value)
	}
	if value, ok := acuo.mutation.AddedBatteryNum(); ok {
		_spec.AddField(assetcheck.FieldBatteryNum, field.TypeUint, value)
	}
	if acuo.mutation.BatteryNumCleared() {
		_spec.ClearField(assetcheck.FieldBatteryNum, field.TypeUint)
	}
	if value, ok := acuo.mutation.BatteryNumReal(); ok {
		_spec.SetField(assetcheck.FieldBatteryNumReal, field.TypeUint, value)
	}
	if value, ok := acuo.mutation.AddedBatteryNumReal(); ok {
		_spec.AddField(assetcheck.FieldBatteryNumReal, field.TypeUint, value)
	}
	if acuo.mutation.BatteryNumRealCleared() {
		_spec.ClearField(assetcheck.FieldBatteryNumReal, field.TypeUint)
	}
	if value, ok := acuo.mutation.EbikeNum(); ok {
		_spec.SetField(assetcheck.FieldEbikeNum, field.TypeUint, value)
	}
	if value, ok := acuo.mutation.AddedEbikeNum(); ok {
		_spec.AddField(assetcheck.FieldEbikeNum, field.TypeUint, value)
	}
	if acuo.mutation.EbikeNumCleared() {
		_spec.ClearField(assetcheck.FieldEbikeNum, field.TypeUint)
	}
	if value, ok := acuo.mutation.EbikeNumReal(); ok {
		_spec.SetField(assetcheck.FieldEbikeNumReal, field.TypeUint, value)
	}
	if value, ok := acuo.mutation.AddedEbikeNumReal(); ok {
		_spec.AddField(assetcheck.FieldEbikeNumReal, field.TypeUint, value)
	}
	if acuo.mutation.EbikeNumRealCleared() {
		_spec.ClearField(assetcheck.FieldEbikeNumReal, field.TypeUint)
	}
	if value, ok := acuo.mutation.OperateType(); ok {
		_spec.SetField(assetcheck.FieldOperateType, field.TypeUint8, value)
	}
	if value, ok := acuo.mutation.AddedOperateType(); ok {
		_spec.AddField(assetcheck.FieldOperateType, field.TypeUint8, value)
	}
	if acuo.mutation.OperateTypeCleared() {
		_spec.ClearField(assetcheck.FieldOperateType, field.TypeUint8)
	}
	if value, ok := acuo.mutation.LocationsType(); ok {
		_spec.SetField(assetcheck.FieldLocationsType, field.TypeUint8, value)
	}
	if value, ok := acuo.mutation.AddedLocationsType(); ok {
		_spec.AddField(assetcheck.FieldLocationsType, field.TypeUint8, value)
	}
	if acuo.mutation.LocationsTypeCleared() {
		_spec.ClearField(assetcheck.FieldLocationsType, field.TypeUint8)
	}
	if value, ok := acuo.mutation.StartAt(); ok {
		_spec.SetField(assetcheck.FieldStartAt, field.TypeTime, value)
	}
	if acuo.mutation.StartAtCleared() {
		_spec.ClearField(assetcheck.FieldStartAt, field.TypeTime)
	}
	if value, ok := acuo.mutation.EndAt(); ok {
		_spec.SetField(assetcheck.FieldEndAt, field.TypeTime, value)
	}
	if acuo.mutation.EndAtCleared() {
		_spec.ClearField(assetcheck.FieldEndAt, field.TypeTime)
	}
	if acuo.mutation.CheckDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.RemovedCheckDetailsIDs(); len(nodes) > 0 && !acuo.mutation.CheckDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.CheckDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetcheck.CheckDetailsTable,
			Columns: []string{assetcheck.CheckDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetcheckdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.OperateAssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAssetManagerTable,
			Columns: []string{assetcheck.OperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.OperateAssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAssetManagerTable,
			Columns: []string{assetcheck.OperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.OperateEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateEmployeeTable,
			Columns: []string{assetcheck.OperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.OperateEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateEmployeeTable,
			Columns: []string{assetcheck.OperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.OperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAgentTable,
			Columns: []string{assetcheck.OperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.OperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.OperateAgentTable,
			Columns: []string{assetcheck.OperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.WarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.WarehouseTable,
			Columns: []string{assetcheck.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.WarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.WarehouseTable,
			Columns: []string{assetcheck.WarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StoreTable,
			Columns: []string{assetcheck.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StoreTable,
			Columns: []string{assetcheck.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if acuo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StationTable,
			Columns: []string{assetcheck.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := acuo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assetcheck.StationTable,
			Columns: []string{assetcheck.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &AssetCheck{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetcheck.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
