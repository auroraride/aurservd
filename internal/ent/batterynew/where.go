// Code generated by ent, DO NOT EDIT.

package batterynew

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldRemark, v))
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldCityID, v))
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldSn, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldEnterpriseID, v))
}

// AssetLocationsType applies equality check predicate on the "asset_locations_type" field. It's identical to AssetLocationsTypeEQ.
func AssetLocationsType(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocationsType, v))
}

// AssetLocationsID applies equality check predicate on the "asset_locations_id" field. It's identical to AssetLocationsIDEQ.
func AssetLocationsID(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocationsID, v))
}

// AssetLocations applies equality check predicate on the "asset_locations" field. It's identical to AssetLocationsEQ.
func AssetLocations(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocations, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldBrand, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldEnable, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldModel, v))
}

// AssetStatus applies equality check predicate on the "asset_status" field. It's identical to AssetStatusEQ.
func AssetStatus(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetStatus, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldStatus, v))
}

// ScrapReasonType applies equality check predicate on the "scrap_reason_type" field. It's identical to ScrapReasonTypeEQ.
func ScrapReasonType(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldScrapReasonType, v))
}

// ScrapAt applies equality check predicate on the "scrap_at" field. It's identical to ScrapAtEQ.
func ScrapAt(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldScrapAt, v))
}

// OperateID applies equality check predicate on the "operate_id" field. It's identical to OperateIDEQ.
func OperateID(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateID, v))
}

// OperateRole applies equality check predicate on the "operate_role" field. It's identical to OperateRoleEQ.
func OperateRole(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateRole, v))
}

// OperateUser applies equality check predicate on the "operate_user" field. It's identical to OperateUserEQ.
func OperateUser(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateUser, v))
}

// WarehouseID applies equality check predicate on the "warehouse_id" field. It's identical to WarehouseIDEQ.
func WarehouseID(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldWarehouseID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldRemark, v))
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldCityID, v))
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldCityID, v))
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldCityID, vs...))
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldCityID, vs...))
}

// CityIDIsNil applies the IsNil predicate on the "city_id" field.
func CityIDIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldCityID))
}

// CityIDNotNil applies the NotNil predicate on the "city_id" field.
func CityIDNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldCityID))
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldSn, v))
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldSn, v))
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldSn, vs...))
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldSn, vs...))
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldSn, v))
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldSn, v))
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldSn, v))
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldSn, v))
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldSn, v))
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldSn, v))
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldSn, v))
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldSn, v))
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldSn, v))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDGT applies the GT predicate on the "enterprise_id" field.
func EnterpriseIDGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldEnterpriseID, v))
}

// EnterpriseIDGTE applies the GTE predicate on the "enterprise_id" field.
func EnterpriseIDGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldEnterpriseID, v))
}

// EnterpriseIDLT applies the LT predicate on the "enterprise_id" field.
func EnterpriseIDLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldEnterpriseID, v))
}

// EnterpriseIDLTE applies the LTE predicate on the "enterprise_id" field.
func EnterpriseIDLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldEnterpriseID, v))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldEnterpriseID))
}

// AssetLocationsTypeEQ applies the EQ predicate on the "asset_locations_type" field.
func AssetLocationsTypeEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocationsType, v))
}

// AssetLocationsTypeNEQ applies the NEQ predicate on the "asset_locations_type" field.
func AssetLocationsTypeNEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldAssetLocationsType, v))
}

// AssetLocationsTypeIn applies the In predicate on the "asset_locations_type" field.
func AssetLocationsTypeIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldAssetLocationsType, vs...))
}

// AssetLocationsTypeNotIn applies the NotIn predicate on the "asset_locations_type" field.
func AssetLocationsTypeNotIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldAssetLocationsType, vs...))
}

// AssetLocationsTypeGT applies the GT predicate on the "asset_locations_type" field.
func AssetLocationsTypeGT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldAssetLocationsType, v))
}

// AssetLocationsTypeGTE applies the GTE predicate on the "asset_locations_type" field.
func AssetLocationsTypeGTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldAssetLocationsType, v))
}

// AssetLocationsTypeLT applies the LT predicate on the "asset_locations_type" field.
func AssetLocationsTypeLT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldAssetLocationsType, v))
}

// AssetLocationsTypeLTE applies the LTE predicate on the "asset_locations_type" field.
func AssetLocationsTypeLTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldAssetLocationsType, v))
}

// AssetLocationsIDEQ applies the EQ predicate on the "asset_locations_id" field.
func AssetLocationsIDEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocationsID, v))
}

// AssetLocationsIDNEQ applies the NEQ predicate on the "asset_locations_id" field.
func AssetLocationsIDNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldAssetLocationsID, v))
}

// AssetLocationsIDIn applies the In predicate on the "asset_locations_id" field.
func AssetLocationsIDIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldAssetLocationsID, vs...))
}

// AssetLocationsIDNotIn applies the NotIn predicate on the "asset_locations_id" field.
func AssetLocationsIDNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldAssetLocationsID, vs...))
}

// AssetLocationsIDGT applies the GT predicate on the "asset_locations_id" field.
func AssetLocationsIDGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldAssetLocationsID, v))
}

// AssetLocationsIDGTE applies the GTE predicate on the "asset_locations_id" field.
func AssetLocationsIDGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldAssetLocationsID, v))
}

// AssetLocationsIDLT applies the LT predicate on the "asset_locations_id" field.
func AssetLocationsIDLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldAssetLocationsID, v))
}

// AssetLocationsIDLTE applies the LTE predicate on the "asset_locations_id" field.
func AssetLocationsIDLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldAssetLocationsID, v))
}

// AssetLocationsEQ applies the EQ predicate on the "asset_locations" field.
func AssetLocationsEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetLocations, v))
}

// AssetLocationsNEQ applies the NEQ predicate on the "asset_locations" field.
func AssetLocationsNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldAssetLocations, v))
}

// AssetLocationsIn applies the In predicate on the "asset_locations" field.
func AssetLocationsIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldAssetLocations, vs...))
}

// AssetLocationsNotIn applies the NotIn predicate on the "asset_locations" field.
func AssetLocationsNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldAssetLocations, vs...))
}

// AssetLocationsGT applies the GT predicate on the "asset_locations" field.
func AssetLocationsGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldAssetLocations, v))
}

// AssetLocationsGTE applies the GTE predicate on the "asset_locations" field.
func AssetLocationsGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldAssetLocations, v))
}

// AssetLocationsLT applies the LT predicate on the "asset_locations" field.
func AssetLocationsLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldAssetLocations, v))
}

// AssetLocationsLTE applies the LTE predicate on the "asset_locations" field.
func AssetLocationsLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldAssetLocations, v))
}

// AssetLocationsContains applies the Contains predicate on the "asset_locations" field.
func AssetLocationsContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldAssetLocations, v))
}

// AssetLocationsHasPrefix applies the HasPrefix predicate on the "asset_locations" field.
func AssetLocationsHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldAssetLocations, v))
}

// AssetLocationsHasSuffix applies the HasSuffix predicate on the "asset_locations" field.
func AssetLocationsHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldAssetLocations, v))
}

// AssetLocationsIsNil applies the IsNil predicate on the "asset_locations" field.
func AssetLocationsIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldAssetLocations))
}

// AssetLocationsNotNil applies the NotNil predicate on the "asset_locations" field.
func AssetLocationsNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldAssetLocations))
}

// AssetLocationsEqualFold applies the EqualFold predicate on the "asset_locations" field.
func AssetLocationsEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldAssetLocations, v))
}

// AssetLocationsContainsFold applies the ContainsFold predicate on the "asset_locations" field.
func AssetLocationsContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldAssetLocations, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldBrand, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldEnable, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldModel, v))
}

// AssetStatusEQ applies the EQ predicate on the "asset_status" field.
func AssetStatusEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldAssetStatus, v))
}

// AssetStatusNEQ applies the NEQ predicate on the "asset_status" field.
func AssetStatusNEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldAssetStatus, v))
}

// AssetStatusIn applies the In predicate on the "asset_status" field.
func AssetStatusIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldAssetStatus, vs...))
}

// AssetStatusNotIn applies the NotIn predicate on the "asset_status" field.
func AssetStatusNotIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldAssetStatus, vs...))
}

// AssetStatusGT applies the GT predicate on the "asset_status" field.
func AssetStatusGT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldAssetStatus, v))
}

// AssetStatusGTE applies the GTE predicate on the "asset_status" field.
func AssetStatusGTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldAssetStatus, v))
}

// AssetStatusLT applies the LT predicate on the "asset_status" field.
func AssetStatusLT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldAssetStatus, v))
}

// AssetStatusLTE applies the LTE predicate on the "asset_status" field.
func AssetStatusLTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldAssetStatus, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldStatus, v))
}

// ScrapReasonTypeEQ applies the EQ predicate on the "scrap_reason_type" field.
func ScrapReasonTypeEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldScrapReasonType, v))
}

// ScrapReasonTypeNEQ applies the NEQ predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNEQ(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldScrapReasonType, v))
}

// ScrapReasonTypeIn applies the In predicate on the "scrap_reason_type" field.
func ScrapReasonTypeIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldScrapReasonType, vs...))
}

// ScrapReasonTypeNotIn applies the NotIn predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNotIn(vs ...uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldScrapReasonType, vs...))
}

// ScrapReasonTypeGT applies the GT predicate on the "scrap_reason_type" field.
func ScrapReasonTypeGT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldScrapReasonType, v))
}

// ScrapReasonTypeGTE applies the GTE predicate on the "scrap_reason_type" field.
func ScrapReasonTypeGTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldScrapReasonType, v))
}

// ScrapReasonTypeLT applies the LT predicate on the "scrap_reason_type" field.
func ScrapReasonTypeLT(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldScrapReasonType, v))
}

// ScrapReasonTypeLTE applies the LTE predicate on the "scrap_reason_type" field.
func ScrapReasonTypeLTE(v uint8) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldScrapReasonType, v))
}

// ScrapReasonTypeIsNil applies the IsNil predicate on the "scrap_reason_type" field.
func ScrapReasonTypeIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldScrapReasonType))
}

// ScrapReasonTypeNotNil applies the NotNil predicate on the "scrap_reason_type" field.
func ScrapReasonTypeNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldScrapReasonType))
}

// ScrapAtEQ applies the EQ predicate on the "scrap_at" field.
func ScrapAtEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldScrapAt, v))
}

// ScrapAtNEQ applies the NEQ predicate on the "scrap_at" field.
func ScrapAtNEQ(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldScrapAt, v))
}

// ScrapAtIn applies the In predicate on the "scrap_at" field.
func ScrapAtIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldScrapAt, vs...))
}

// ScrapAtNotIn applies the NotIn predicate on the "scrap_at" field.
func ScrapAtNotIn(vs ...time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldScrapAt, vs...))
}

// ScrapAtGT applies the GT predicate on the "scrap_at" field.
func ScrapAtGT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldScrapAt, v))
}

// ScrapAtGTE applies the GTE predicate on the "scrap_at" field.
func ScrapAtGTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldScrapAt, v))
}

// ScrapAtLT applies the LT predicate on the "scrap_at" field.
func ScrapAtLT(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldScrapAt, v))
}

// ScrapAtLTE applies the LTE predicate on the "scrap_at" field.
func ScrapAtLTE(v time.Time) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldScrapAt, v))
}

// ScrapAtIsNil applies the IsNil predicate on the "scrap_at" field.
func ScrapAtIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldScrapAt))
}

// ScrapAtNotNil applies the NotNil predicate on the "scrap_at" field.
func ScrapAtNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldScrapAt))
}

// OperateIDEQ applies the EQ predicate on the "operate_id" field.
func OperateIDEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateID, v))
}

// OperateIDNEQ applies the NEQ predicate on the "operate_id" field.
func OperateIDNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldOperateID, v))
}

// OperateIDIn applies the In predicate on the "operate_id" field.
func OperateIDIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldOperateID, vs...))
}

// OperateIDNotIn applies the NotIn predicate on the "operate_id" field.
func OperateIDNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldOperateID, vs...))
}

// OperateIDGT applies the GT predicate on the "operate_id" field.
func OperateIDGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldOperateID, v))
}

// OperateIDGTE applies the GTE predicate on the "operate_id" field.
func OperateIDGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldOperateID, v))
}

// OperateIDLT applies the LT predicate on the "operate_id" field.
func OperateIDLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldOperateID, v))
}

// OperateIDLTE applies the LTE predicate on the "operate_id" field.
func OperateIDLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldOperateID, v))
}

// OperateIDIsNil applies the IsNil predicate on the "operate_id" field.
func OperateIDIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldOperateID))
}

// OperateIDNotNil applies the NotNil predicate on the "operate_id" field.
func OperateIDNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldOperateID))
}

// OperateRoleEQ applies the EQ predicate on the "operate_role" field.
func OperateRoleEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateRole, v))
}

// OperateRoleNEQ applies the NEQ predicate on the "operate_role" field.
func OperateRoleNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldOperateRole, v))
}

// OperateRoleIn applies the In predicate on the "operate_role" field.
func OperateRoleIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldOperateRole, vs...))
}

// OperateRoleNotIn applies the NotIn predicate on the "operate_role" field.
func OperateRoleNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldOperateRole, vs...))
}

// OperateRoleGT applies the GT predicate on the "operate_role" field.
func OperateRoleGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldOperateRole, v))
}

// OperateRoleGTE applies the GTE predicate on the "operate_role" field.
func OperateRoleGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldOperateRole, v))
}

// OperateRoleLT applies the LT predicate on the "operate_role" field.
func OperateRoleLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldOperateRole, v))
}

// OperateRoleLTE applies the LTE predicate on the "operate_role" field.
func OperateRoleLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldOperateRole, v))
}

// OperateRoleIsNil applies the IsNil predicate on the "operate_role" field.
func OperateRoleIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldOperateRole))
}

// OperateRoleNotNil applies the NotNil predicate on the "operate_role" field.
func OperateRoleNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldOperateRole))
}

// OperateUserEQ applies the EQ predicate on the "operate_user" field.
func OperateUserEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldOperateUser, v))
}

// OperateUserNEQ applies the NEQ predicate on the "operate_user" field.
func OperateUserNEQ(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldOperateUser, v))
}

// OperateUserIn applies the In predicate on the "operate_user" field.
func OperateUserIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldOperateUser, vs...))
}

// OperateUserNotIn applies the NotIn predicate on the "operate_user" field.
func OperateUserNotIn(vs ...string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldOperateUser, vs...))
}

// OperateUserGT applies the GT predicate on the "operate_user" field.
func OperateUserGT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldOperateUser, v))
}

// OperateUserGTE applies the GTE predicate on the "operate_user" field.
func OperateUserGTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldOperateUser, v))
}

// OperateUserLT applies the LT predicate on the "operate_user" field.
func OperateUserLT(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldOperateUser, v))
}

// OperateUserLTE applies the LTE predicate on the "operate_user" field.
func OperateUserLTE(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldOperateUser, v))
}

// OperateUserContains applies the Contains predicate on the "operate_user" field.
func OperateUserContains(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContains(FieldOperateUser, v))
}

// OperateUserHasPrefix applies the HasPrefix predicate on the "operate_user" field.
func OperateUserHasPrefix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasPrefix(FieldOperateUser, v))
}

// OperateUserHasSuffix applies the HasSuffix predicate on the "operate_user" field.
func OperateUserHasSuffix(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldHasSuffix(FieldOperateUser, v))
}

// OperateUserIsNil applies the IsNil predicate on the "operate_user" field.
func OperateUserIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldOperateUser))
}

// OperateUserNotNil applies the NotNil predicate on the "operate_user" field.
func OperateUserNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldOperateUser))
}

// OperateUserEqualFold applies the EqualFold predicate on the "operate_user" field.
func OperateUserEqualFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEqualFold(FieldOperateUser, v))
}

// OperateUserContainsFold applies the ContainsFold predicate on the "operate_user" field.
func OperateUserContainsFold(v string) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldContainsFold(FieldOperateUser, v))
}

// WarehouseIDEQ applies the EQ predicate on the "warehouse_id" field.
func WarehouseIDEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldEQ(FieldWarehouseID, v))
}

// WarehouseIDNEQ applies the NEQ predicate on the "warehouse_id" field.
func WarehouseIDNEQ(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNEQ(FieldWarehouseID, v))
}

// WarehouseIDIn applies the In predicate on the "warehouse_id" field.
func WarehouseIDIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIn(FieldWarehouseID, vs...))
}

// WarehouseIDNotIn applies the NotIn predicate on the "warehouse_id" field.
func WarehouseIDNotIn(vs ...uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotIn(FieldWarehouseID, vs...))
}

// WarehouseIDGT applies the GT predicate on the "warehouse_id" field.
func WarehouseIDGT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGT(FieldWarehouseID, v))
}

// WarehouseIDGTE applies the GTE predicate on the "warehouse_id" field.
func WarehouseIDGTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldGTE(FieldWarehouseID, v))
}

// WarehouseIDLT applies the LT predicate on the "warehouse_id" field.
func WarehouseIDLT(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLT(FieldWarehouseID, v))
}

// WarehouseIDLTE applies the LTE predicate on the "warehouse_id" field.
func WarehouseIDLTE(v uint64) predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldLTE(FieldWarehouseID, v))
}

// WarehouseIDIsNil applies the IsNil predicate on the "warehouse_id" field.
func WarehouseIDIsNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldIsNull(FieldWarehouseID))
}

// WarehouseIDNotNil applies the NotNil predicate on the "warehouse_id" field.
func WarehouseIDNotNil() predicate.BatteryNew {
	return predicate.BatteryNew(sql.FieldNotNull(FieldWarehouseID))
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.BatteryNew {
	return predicate.BatteryNew(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.BatteryNew {
	return predicate.BatteryNew(func(s *sql.Selector) {
		step := newCityStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BatteryNew) predicate.BatteryNew {
	return predicate.BatteryNew(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BatteryNew) predicate.BatteryNew {
	return predicate.BatteryNew(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BatteryNew) predicate.BatteryNew {
	return predicate.BatteryNew(sql.NotPredicates(p))
}
