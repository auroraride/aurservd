// Code generated by ent, DO NOT EDIT.

package batterynew

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the batterynew type in the database.
	Label = "battery_new"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldEnterpriseID holds the string denoting the enterprise_id field in the database.
	FieldEnterpriseID = "enterprise_id"
	// FieldAssetLocationsType holds the string denoting the asset_locations_type field in the database.
	FieldAssetLocationsType = "asset_locations_type"
	// FieldAssetLocationsID holds the string denoting the asset_locations_id field in the database.
	FieldAssetLocationsID = "asset_locations_id"
	// FieldAssetLocations holds the string denoting the asset_locations field in the database.
	FieldAssetLocations = "asset_locations"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldAssetStatus holds the string denoting the asset_status field in the database.
	FieldAssetStatus = "asset_status"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldScrapReasonType holds the string denoting the scrap_reason_type field in the database.
	FieldScrapReasonType = "scrap_reason_type"
	// FieldScrapAt holds the string denoting the scrap_at field in the database.
	FieldScrapAt = "scrap_at"
	// FieldOperateID holds the string denoting the operate_id field in the database.
	FieldOperateID = "operate_id"
	// FieldOperateRole holds the string denoting the operate_role field in the database.
	FieldOperateRole = "operate_role"
	// FieldOperateUser holds the string denoting the operate_user field in the database.
	FieldOperateUser = "operate_user"
	// FieldWarehouseID holds the string denoting the warehouse_id field in the database.
	FieldWarehouseID = "warehouse_id"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// Table holds the table name of the batterynew in the database.
	Table = "battery_new"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "battery_new"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
)

// Columns holds all SQL columns for batterynew fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldSn,
	FieldEnterpriseID,
	FieldAssetLocationsType,
	FieldAssetLocationsID,
	FieldAssetLocations,
	FieldBrand,
	FieldEnable,
	FieldModel,
	FieldAssetStatus,
	FieldStatus,
	FieldScrapReasonType,
	FieldScrapAt,
	FieldOperateID,
	FieldOperateRole,
	FieldOperateUser,
	FieldWarehouseID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultAssetLocationsType holds the default value on creation for the "asset_locations_type" field.
	DefaultAssetLocationsType uint8
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultAssetStatus holds the default value on creation for the "asset_status" field.
	DefaultAssetStatus uint8
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint64
)

// OrderOption defines the ordering options for the BatteryNew queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByEnterpriseID orders the results by the enterprise_id field.
func ByEnterpriseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnterpriseID, opts...).ToFunc()
}

// ByAssetLocationsType orders the results by the asset_locations_type field.
func ByAssetLocationsType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetLocationsType, opts...).ToFunc()
}

// ByAssetLocationsID orders the results by the asset_locations_id field.
func ByAssetLocationsID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetLocationsID, opts...).ToFunc()
}

// ByAssetLocations orders the results by the asset_locations field.
func ByAssetLocations(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetLocations, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByAssetStatus orders the results by the asset_status field.
func ByAssetStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetStatus, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByScrapReasonType orders the results by the scrap_reason_type field.
func ByScrapReasonType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScrapReasonType, opts...).ToFunc()
}

// ByScrapAt orders the results by the scrap_at field.
func ByScrapAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScrapAt, opts...).ToFunc()
}

// ByOperateID orders the results by the operate_id field.
func ByOperateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateID, opts...).ToFunc()
}

// ByOperateRole orders the results by the operate_role field.
func ByOperateRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateRole, opts...).ToFunc()
}

// ByOperateUser orders the results by the operate_user field.
func ByOperateUser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateUser, opts...).ToFunc()
}

// ByWarehouseID orders the results by the warehouse_id field.
func ByWarehouseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWarehouseID, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
