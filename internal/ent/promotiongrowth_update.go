// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotiongrowth"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
)

// PromotionGrowthUpdate is the builder for updating PromotionGrowth entities.
type PromotionGrowthUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionGrowthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionGrowthUpdate builder.
func (pgu *PromotionGrowthUpdate) Where(ps ...predicate.PromotionGrowth) *PromotionGrowthUpdate {
	pgu.mutation.Where(ps...)
	return pgu
}

// SetUpdatedAt sets the "updated_at" field.
func (pgu *PromotionGrowthUpdate) SetUpdatedAt(t time.Time) *PromotionGrowthUpdate {
	pgu.mutation.SetUpdatedAt(t)
	return pgu
}

// SetDeletedAt sets the "deleted_at" field.
func (pgu *PromotionGrowthUpdate) SetDeletedAt(t time.Time) *PromotionGrowthUpdate {
	pgu.mutation.SetDeletedAt(t)
	return pgu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pgu *PromotionGrowthUpdate) SetNillableDeletedAt(t *time.Time) *PromotionGrowthUpdate {
	if t != nil {
		pgu.SetDeletedAt(*t)
	}
	return pgu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pgu *PromotionGrowthUpdate) ClearDeletedAt() *PromotionGrowthUpdate {
	pgu.mutation.ClearDeletedAt()
	return pgu
}

// SetLastModifier sets the "last_modifier" field.
func (pgu *PromotionGrowthUpdate) SetLastModifier(m *model.Modifier) *PromotionGrowthUpdate {
	pgu.mutation.SetLastModifier(m)
	return pgu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pgu *PromotionGrowthUpdate) ClearLastModifier() *PromotionGrowthUpdate {
	pgu.mutation.ClearLastModifier()
	return pgu
}

// SetRemark sets the "remark" field.
func (pgu *PromotionGrowthUpdate) SetRemark(s string) *PromotionGrowthUpdate {
	pgu.mutation.SetRemark(s)
	return pgu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pgu *PromotionGrowthUpdate) SetNillableRemark(s *string) *PromotionGrowthUpdate {
	if s != nil {
		pgu.SetRemark(*s)
	}
	return pgu
}

// ClearRemark clears the value of the "remark" field.
func (pgu *PromotionGrowthUpdate) ClearRemark() *PromotionGrowthUpdate {
	pgu.mutation.ClearRemark()
	return pgu
}

// SetMemberID sets the "member_id" field.
func (pgu *PromotionGrowthUpdate) SetMemberID(u uint64) *PromotionGrowthUpdate {
	pgu.mutation.SetMemberID(u)
	return pgu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pgu *PromotionGrowthUpdate) SetNillableMemberID(u *uint64) *PromotionGrowthUpdate {
	if u != nil {
		pgu.SetMemberID(*u)
	}
	return pgu
}

// ClearMemberID clears the value of the "member_id" field.
func (pgu *PromotionGrowthUpdate) ClearMemberID() *PromotionGrowthUpdate {
	pgu.mutation.ClearMemberID()
	return pgu
}

// SetTaskID sets the "task_id" field.
func (pgu *PromotionGrowthUpdate) SetTaskID(u uint64) *PromotionGrowthUpdate {
	pgu.mutation.SetTaskID(u)
	return pgu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pgu *PromotionGrowthUpdate) SetNillableTaskID(u *uint64) *PromotionGrowthUpdate {
	if u != nil {
		pgu.SetTaskID(*u)
	}
	return pgu
}

// ClearTaskID clears the value of the "task_id" field.
func (pgu *PromotionGrowthUpdate) ClearTaskID() *PromotionGrowthUpdate {
	pgu.mutation.ClearTaskID()
	return pgu
}

// SetStatus sets the "status" field.
func (pgu *PromotionGrowthUpdate) SetStatus(u uint8) *PromotionGrowthUpdate {
	pgu.mutation.ResetStatus()
	pgu.mutation.SetStatus(u)
	return pgu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pgu *PromotionGrowthUpdate) SetNillableStatus(u *uint8) *PromotionGrowthUpdate {
	if u != nil {
		pgu.SetStatus(*u)
	}
	return pgu
}

// AddStatus adds u to the "status" field.
func (pgu *PromotionGrowthUpdate) AddStatus(u int8) *PromotionGrowthUpdate {
	pgu.mutation.AddStatus(u)
	return pgu
}

// SetGrowthValue sets the "growth_value" field.
func (pgu *PromotionGrowthUpdate) SetGrowthValue(u uint64) *PromotionGrowthUpdate {
	pgu.mutation.ResetGrowthValue()
	pgu.mutation.SetGrowthValue(u)
	return pgu
}

// AddGrowthValue adds u to the "growth_value" field.
func (pgu *PromotionGrowthUpdate) AddGrowthValue(u int64) *PromotionGrowthUpdate {
	pgu.mutation.AddGrowthValue(u)
	return pgu
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pgu *PromotionGrowthUpdate) SetMember(p *PromotionMember) *PromotionGrowthUpdate {
	return pgu.SetMemberID(p.ID)
}

// SetTask sets the "task" edge to the PromotionLevelTask entity.
func (pgu *PromotionGrowthUpdate) SetTask(p *PromotionLevelTask) *PromotionGrowthUpdate {
	return pgu.SetTaskID(p.ID)
}

// Mutation returns the PromotionGrowthMutation object of the builder.
func (pgu *PromotionGrowthUpdate) Mutation() *PromotionGrowthMutation {
	return pgu.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pgu *PromotionGrowthUpdate) ClearMember() *PromotionGrowthUpdate {
	pgu.mutation.ClearMember()
	return pgu
}

// ClearTask clears the "task" edge to the PromotionLevelTask entity.
func (pgu *PromotionGrowthUpdate) ClearTask() *PromotionGrowthUpdate {
	pgu.mutation.ClearTask()
	return pgu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pgu *PromotionGrowthUpdate) Save(ctx context.Context) (int, error) {
	if err := pgu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pgu.sqlSave, pgu.mutation, pgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pgu *PromotionGrowthUpdate) SaveX(ctx context.Context) int {
	affected, err := pgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pgu *PromotionGrowthUpdate) Exec(ctx context.Context) error {
	_, err := pgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pgu *PromotionGrowthUpdate) ExecX(ctx context.Context) {
	if err := pgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pgu *PromotionGrowthUpdate) defaults() error {
	if _, ok := pgu.mutation.UpdatedAt(); !ok {
		if promotiongrowth.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotiongrowth.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotiongrowth.UpdateDefaultUpdatedAt()
		pgu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pgu *PromotionGrowthUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionGrowthUpdate {
	pgu.modifiers = append(pgu.modifiers, modifiers...)
	return pgu
}

func (pgu *PromotionGrowthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotiongrowth.Table, promotiongrowth.Columns, sqlgraph.NewFieldSpec(promotiongrowth.FieldID, field.TypeUint64))
	if ps := pgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pgu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotiongrowth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pgu.mutation.DeletedAt(); ok {
		_spec.SetField(promotiongrowth.FieldDeletedAt, field.TypeTime, value)
	}
	if pgu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotiongrowth.FieldDeletedAt, field.TypeTime)
	}
	if pgu.mutation.CreatorCleared() {
		_spec.ClearField(promotiongrowth.FieldCreator, field.TypeJSON)
	}
	if value, ok := pgu.mutation.LastModifier(); ok {
		_spec.SetField(promotiongrowth.FieldLastModifier, field.TypeJSON, value)
	}
	if pgu.mutation.LastModifierCleared() {
		_spec.ClearField(promotiongrowth.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pgu.mutation.Remark(); ok {
		_spec.SetField(promotiongrowth.FieldRemark, field.TypeString, value)
	}
	if pgu.mutation.RemarkCleared() {
		_spec.ClearField(promotiongrowth.FieldRemark, field.TypeString)
	}
	if value, ok := pgu.mutation.Status(); ok {
		_spec.SetField(promotiongrowth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pgu.mutation.AddedStatus(); ok {
		_spec.AddField(promotiongrowth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pgu.mutation.GrowthValue(); ok {
		_spec.SetField(promotiongrowth.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pgu.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotiongrowth.FieldGrowthValue, field.TypeUint64, value)
	}
	if pgu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pgu.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pgu.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pgu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotiongrowth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pgu.mutation.done = true
	return n, nil
}

// PromotionGrowthUpdateOne is the builder for updating a single PromotionGrowth entity.
type PromotionGrowthUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionGrowthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pguo *PromotionGrowthUpdateOne) SetUpdatedAt(t time.Time) *PromotionGrowthUpdateOne {
	pguo.mutation.SetUpdatedAt(t)
	return pguo
}

// SetDeletedAt sets the "deleted_at" field.
func (pguo *PromotionGrowthUpdateOne) SetDeletedAt(t time.Time) *PromotionGrowthUpdateOne {
	pguo.mutation.SetDeletedAt(t)
	return pguo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pguo *PromotionGrowthUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionGrowthUpdateOne {
	if t != nil {
		pguo.SetDeletedAt(*t)
	}
	return pguo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pguo *PromotionGrowthUpdateOne) ClearDeletedAt() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearDeletedAt()
	return pguo
}

// SetLastModifier sets the "last_modifier" field.
func (pguo *PromotionGrowthUpdateOne) SetLastModifier(m *model.Modifier) *PromotionGrowthUpdateOne {
	pguo.mutation.SetLastModifier(m)
	return pguo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pguo *PromotionGrowthUpdateOne) ClearLastModifier() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearLastModifier()
	return pguo
}

// SetRemark sets the "remark" field.
func (pguo *PromotionGrowthUpdateOne) SetRemark(s string) *PromotionGrowthUpdateOne {
	pguo.mutation.SetRemark(s)
	return pguo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pguo *PromotionGrowthUpdateOne) SetNillableRemark(s *string) *PromotionGrowthUpdateOne {
	if s != nil {
		pguo.SetRemark(*s)
	}
	return pguo
}

// ClearRemark clears the value of the "remark" field.
func (pguo *PromotionGrowthUpdateOne) ClearRemark() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearRemark()
	return pguo
}

// SetMemberID sets the "member_id" field.
func (pguo *PromotionGrowthUpdateOne) SetMemberID(u uint64) *PromotionGrowthUpdateOne {
	pguo.mutation.SetMemberID(u)
	return pguo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pguo *PromotionGrowthUpdateOne) SetNillableMemberID(u *uint64) *PromotionGrowthUpdateOne {
	if u != nil {
		pguo.SetMemberID(*u)
	}
	return pguo
}

// ClearMemberID clears the value of the "member_id" field.
func (pguo *PromotionGrowthUpdateOne) ClearMemberID() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearMemberID()
	return pguo
}

// SetTaskID sets the "task_id" field.
func (pguo *PromotionGrowthUpdateOne) SetTaskID(u uint64) *PromotionGrowthUpdateOne {
	pguo.mutation.SetTaskID(u)
	return pguo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pguo *PromotionGrowthUpdateOne) SetNillableTaskID(u *uint64) *PromotionGrowthUpdateOne {
	if u != nil {
		pguo.SetTaskID(*u)
	}
	return pguo
}

// ClearTaskID clears the value of the "task_id" field.
func (pguo *PromotionGrowthUpdateOne) ClearTaskID() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearTaskID()
	return pguo
}

// SetStatus sets the "status" field.
func (pguo *PromotionGrowthUpdateOne) SetStatus(u uint8) *PromotionGrowthUpdateOne {
	pguo.mutation.ResetStatus()
	pguo.mutation.SetStatus(u)
	return pguo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pguo *PromotionGrowthUpdateOne) SetNillableStatus(u *uint8) *PromotionGrowthUpdateOne {
	if u != nil {
		pguo.SetStatus(*u)
	}
	return pguo
}

// AddStatus adds u to the "status" field.
func (pguo *PromotionGrowthUpdateOne) AddStatus(u int8) *PromotionGrowthUpdateOne {
	pguo.mutation.AddStatus(u)
	return pguo
}

// SetGrowthValue sets the "growth_value" field.
func (pguo *PromotionGrowthUpdateOne) SetGrowthValue(u uint64) *PromotionGrowthUpdateOne {
	pguo.mutation.ResetGrowthValue()
	pguo.mutation.SetGrowthValue(u)
	return pguo
}

// AddGrowthValue adds u to the "growth_value" field.
func (pguo *PromotionGrowthUpdateOne) AddGrowthValue(u int64) *PromotionGrowthUpdateOne {
	pguo.mutation.AddGrowthValue(u)
	return pguo
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pguo *PromotionGrowthUpdateOne) SetMember(p *PromotionMember) *PromotionGrowthUpdateOne {
	return pguo.SetMemberID(p.ID)
}

// SetTask sets the "task" edge to the PromotionLevelTask entity.
func (pguo *PromotionGrowthUpdateOne) SetTask(p *PromotionLevelTask) *PromotionGrowthUpdateOne {
	return pguo.SetTaskID(p.ID)
}

// Mutation returns the PromotionGrowthMutation object of the builder.
func (pguo *PromotionGrowthUpdateOne) Mutation() *PromotionGrowthMutation {
	return pguo.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pguo *PromotionGrowthUpdateOne) ClearMember() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearMember()
	return pguo
}

// ClearTask clears the "task" edge to the PromotionLevelTask entity.
func (pguo *PromotionGrowthUpdateOne) ClearTask() *PromotionGrowthUpdateOne {
	pguo.mutation.ClearTask()
	return pguo
}

// Where appends a list predicates to the PromotionGrowthUpdate builder.
func (pguo *PromotionGrowthUpdateOne) Where(ps ...predicate.PromotionGrowth) *PromotionGrowthUpdateOne {
	pguo.mutation.Where(ps...)
	return pguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pguo *PromotionGrowthUpdateOne) Select(field string, fields ...string) *PromotionGrowthUpdateOne {
	pguo.fields = append([]string{field}, fields...)
	return pguo
}

// Save executes the query and returns the updated PromotionGrowth entity.
func (pguo *PromotionGrowthUpdateOne) Save(ctx context.Context) (*PromotionGrowth, error) {
	if err := pguo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pguo.sqlSave, pguo.mutation, pguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pguo *PromotionGrowthUpdateOne) SaveX(ctx context.Context) *PromotionGrowth {
	node, err := pguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pguo *PromotionGrowthUpdateOne) Exec(ctx context.Context) error {
	_, err := pguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pguo *PromotionGrowthUpdateOne) ExecX(ctx context.Context) {
	if err := pguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pguo *PromotionGrowthUpdateOne) defaults() error {
	if _, ok := pguo.mutation.UpdatedAt(); !ok {
		if promotiongrowth.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotiongrowth.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotiongrowth.UpdateDefaultUpdatedAt()
		pguo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pguo *PromotionGrowthUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionGrowthUpdateOne {
	pguo.modifiers = append(pguo.modifiers, modifiers...)
	return pguo
}

func (pguo *PromotionGrowthUpdateOne) sqlSave(ctx context.Context) (_node *PromotionGrowth, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotiongrowth.Table, promotiongrowth.Columns, sqlgraph.NewFieldSpec(promotiongrowth.FieldID, field.TypeUint64))
	id, ok := pguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionGrowth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotiongrowth.FieldID)
		for _, f := range fields {
			if !promotiongrowth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotiongrowth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pguo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotiongrowth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pguo.mutation.DeletedAt(); ok {
		_spec.SetField(promotiongrowth.FieldDeletedAt, field.TypeTime, value)
	}
	if pguo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotiongrowth.FieldDeletedAt, field.TypeTime)
	}
	if pguo.mutation.CreatorCleared() {
		_spec.ClearField(promotiongrowth.FieldCreator, field.TypeJSON)
	}
	if value, ok := pguo.mutation.LastModifier(); ok {
		_spec.SetField(promotiongrowth.FieldLastModifier, field.TypeJSON, value)
	}
	if pguo.mutation.LastModifierCleared() {
		_spec.ClearField(promotiongrowth.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pguo.mutation.Remark(); ok {
		_spec.SetField(promotiongrowth.FieldRemark, field.TypeString, value)
	}
	if pguo.mutation.RemarkCleared() {
		_spec.ClearField(promotiongrowth.FieldRemark, field.TypeString)
	}
	if value, ok := pguo.mutation.Status(); ok {
		_spec.SetField(promotiongrowth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pguo.mutation.AddedStatus(); ok {
		_spec.AddField(promotiongrowth.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := pguo.mutation.GrowthValue(); ok {
		_spec.SetField(promotiongrowth.FieldGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pguo.mutation.AddedGrowthValue(); ok {
		_spec.AddField(promotiongrowth.FieldGrowthValue, field.TypeUint64, value)
	}
	if pguo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.MemberTable,
			Columns: []string{promotiongrowth.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pguo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pguo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotiongrowth.TaskTable,
			Columns: []string{promotiongrowth.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionleveltask.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pguo.modifiers...)
	_node = &PromotionGrowth{config: pguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotiongrowth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pguo.mutation.done = true
	return _node, nil
}
