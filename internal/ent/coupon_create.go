// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/coupon"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/coupontemplate"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CouponCreate is the builder for creating a Coupon entity.
type CouponCreate struct {
	config
	mutation *CouponMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CouponCreate) SetCreatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableCreatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CouponCreate) SetUpdatedAt(t time.Time) *CouponCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUpdatedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCreator sets the "creator" field.
func (cc *CouponCreate) SetCreator(m *model.Modifier) *CouponCreate {
	cc.mutation.SetCreator(m)
	return cc
}

// SetLastModifier sets the "last_modifier" field.
func (cc *CouponCreate) SetLastModifier(m *model.Modifier) *CouponCreate {
	cc.mutation.SetLastModifier(m)
	return cc
}

// SetRemark sets the "remark" field.
func (cc *CouponCreate) SetRemark(s string) *CouponCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *CouponCreate) SetNillableRemark(s *string) *CouponCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetRiderID sets the "rider_id" field.
func (cc *CouponCreate) SetRiderID(u uint64) *CouponCreate {
	cc.mutation.SetRiderID(u)
	return cc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableRiderID(u *uint64) *CouponCreate {
	if u != nil {
		cc.SetRiderID(*u)
	}
	return cc
}

// SetAssemblyID sets the "assembly_id" field.
func (cc *CouponCreate) SetAssemblyID(u uint64) *CouponCreate {
	cc.mutation.SetAssemblyID(u)
	return cc
}

// SetPlanID sets the "plan_id" field.
func (cc *CouponCreate) SetPlanID(u uint64) *CouponCreate {
	cc.mutation.SetPlanID(u)
	return cc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillablePlanID(u *uint64) *CouponCreate {
	if u != nil {
		cc.SetPlanID(*u)
	}
	return cc
}

// SetTemplateID sets the "template_id" field.
func (cc *CouponCreate) SetTemplateID(u uint64) *CouponCreate {
	cc.mutation.SetTemplateID(u)
	return cc
}

// SetOrderID sets the "order_id" field.
func (cc *CouponCreate) SetOrderID(u uint64) *CouponCreate {
	cc.mutation.SetOrderID(u)
	return cc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (cc *CouponCreate) SetNillableOrderID(u *uint64) *CouponCreate {
	if u != nil {
		cc.SetOrderID(*u)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CouponCreate) SetName(s string) *CouponCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetRule sets the "rule" field.
func (cc *CouponCreate) SetRule(u uint8) *CouponCreate {
	cc.mutation.SetRule(u)
	return cc
}

// SetMultiple sets the "multiple" field.
func (cc *CouponCreate) SetMultiple(b bool) *CouponCreate {
	cc.mutation.SetMultiple(b)
	return cc
}

// SetNillableMultiple sets the "multiple" field if the given value is not nil.
func (cc *CouponCreate) SetNillableMultiple(b *bool) *CouponCreate {
	if b != nil {
		cc.SetMultiple(*b)
	}
	return cc
}

// SetAmount sets the "amount" field.
func (cc *CouponCreate) SetAmount(f float64) *CouponCreate {
	cc.mutation.SetAmount(f)
	return cc
}

// SetCode sets the "code" field.
func (cc *CouponCreate) SetCode(s string) *CouponCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetExpiresAt sets the "expires_at" field.
func (cc *CouponCreate) SetExpiresAt(t time.Time) *CouponCreate {
	cc.mutation.SetExpiresAt(t)
	return cc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableExpiresAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetExpiresAt(*t)
	}
	return cc
}

// SetUsedAt sets the "used_at" field.
func (cc *CouponCreate) SetUsedAt(t time.Time) *CouponCreate {
	cc.mutation.SetUsedAt(t)
	return cc
}

// SetNillableUsedAt sets the "used_at" field if the given value is not nil.
func (cc *CouponCreate) SetNillableUsedAt(t *time.Time) *CouponCreate {
	if t != nil {
		cc.SetUsedAt(*t)
	}
	return cc
}

// SetDuration sets the "duration" field.
func (cc *CouponCreate) SetDuration(md *model.CouponDuration) *CouponCreate {
	cc.mutation.SetDuration(md)
	return cc
}

// SetPlans sets the "plans" field.
func (cc *CouponCreate) SetPlans(m []model.Plan) *CouponCreate {
	cc.mutation.SetPlans(m)
	return cc
}

// SetCities sets the "cities" field.
func (cc *CouponCreate) SetCities(m []model.City) *CouponCreate {
	cc.mutation.SetCities(m)
	return cc
}

// SetRider sets the "rider" edge to the Rider entity.
func (cc *CouponCreate) SetRider(r *Rider) *CouponCreate {
	return cc.SetRiderID(r.ID)
}

// SetAssembly sets the "assembly" edge to the CouponAssembly entity.
func (cc *CouponCreate) SetAssembly(c *CouponAssembly) *CouponCreate {
	return cc.SetAssemblyID(c.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cc *CouponCreate) SetPlan(p *Plan) *CouponCreate {
	return cc.SetPlanID(p.ID)
}

// SetTemplate sets the "template" edge to the CouponTemplate entity.
func (cc *CouponCreate) SetTemplate(c *CouponTemplate) *CouponCreate {
	return cc.SetTemplateID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cc *CouponCreate) SetOrder(o *Order) *CouponCreate {
	return cc.SetOrderID(o.ID)
}

// Mutation returns the CouponMutation object of the builder.
func (cc *CouponCreate) Mutation() *CouponMutation {
	return cc.mutation
}

// Save creates the Coupon in the database.
func (cc *CouponCreate) Save(ctx context.Context) (*Coupon, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Coupon, CouponMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CouponCreate) SaveX(ctx context.Context) *Coupon {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CouponCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CouponCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CouponCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if coupon.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if coupon.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized coupon.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := coupon.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Multiple(); !ok {
		v := coupon.DefaultMultiple
		cc.mutation.SetMultiple(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CouponCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Coupon.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Coupon.updated_at"`)}
	}
	if _, ok := cc.mutation.AssemblyID(); !ok {
		return &ValidationError{Name: "assembly_id", err: errors.New(`ent: missing required field "Coupon.assembly_id"`)}
	}
	if _, ok := cc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template_id", err: errors.New(`ent: missing required field "Coupon.template_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Coupon.name"`)}
	}
	if _, ok := cc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New(`ent: missing required field "Coupon.rule"`)}
	}
	if _, ok := cc.mutation.Multiple(); !ok {
		return &ValidationError{Name: "multiple", err: errors.New(`ent: missing required field "Coupon.multiple"`)}
	}
	if _, ok := cc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Coupon.amount"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Coupon.code"`)}
	}
	if _, ok := cc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Coupon.duration"`)}
	}
	if _, ok := cc.mutation.AssemblyID(); !ok {
		return &ValidationError{Name: "assembly", err: errors.New(`ent: missing required edge "Coupon.assembly"`)}
	}
	if _, ok := cc.mutation.TemplateID(); !ok {
		return &ValidationError{Name: "template", err: errors.New(`ent: missing required edge "Coupon.template"`)}
	}
	return nil
}

func (cc *CouponCreate) sqlSave(ctx context.Context) (*Coupon, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CouponCreate) createSpec() (*Coupon, *sqlgraph.CreateSpec) {
	var (
		_node = &Coupon{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: coupon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: coupon.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(coupon.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(coupon.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Creator(); ok {
		_spec.SetField(coupon.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := cc.mutation.LastModifier(); ok {
		_spec.SetField(coupon.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.SetField(coupon.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(coupon.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Rule(); ok {
		_spec.SetField(coupon.FieldRule, field.TypeUint8, value)
		_node.Rule = value
	}
	if value, ok := cc.mutation.Multiple(); ok {
		_spec.SetField(coupon.FieldMultiple, field.TypeBool, value)
		_node.Multiple = value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.SetField(coupon.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(coupon.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.ExpiresAt(); ok {
		_spec.SetField(coupon.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := cc.mutation.UsedAt(); ok {
		_spec.SetField(coupon.FieldUsedAt, field.TypeTime, value)
		_node.UsedAt = &value
	}
	if value, ok := cc.mutation.Duration(); ok {
		_spec.SetField(coupon.FieldDuration, field.TypeJSON, value)
		_node.Duration = value
	}
	if value, ok := cc.mutation.Plans(); ok {
		_spec.SetField(coupon.FieldPlans, field.TypeJSON, value)
		_node.Plans = value
	}
	if value, ok := cc.mutation.Cities(); ok {
		_spec.SetField(coupon.FieldCities, field.TypeJSON, value)
		_node.Cities = value
	}
	if nodes := cc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.RiderTable,
			Columns: []string{coupon.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AssemblyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.AssemblyTable,
			Columns: []string{coupon.AssemblyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: couponassembly.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AssemblyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   coupon.PlanTable,
			Columns: []string{coupon.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.TemplateTable,
			Columns: []string{coupon.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: coupontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TemplateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   coupon.OrderTable,
			Columns: []string{coupon.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CouponCreate) OnConflict(opts ...sql.ConflictOption) *CouponUpsertOne {
	cc.conflict = opts
	return &CouponUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CouponCreate) OnConflictColumns(columns ...string) *CouponUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertOne{
		create: cc,
	}
}

type (
	// CouponUpsertOne is the builder for "upsert"-ing
	//  one Coupon node.
	CouponUpsertOne struct {
		create *CouponCreate
	}

	// CouponUpsert is the "OnConflict" setter.
	CouponUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsert) SetUpdatedAt(v time.Time) *CouponUpsert {
	u.Set(coupon.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUpdatedAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldUpdatedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponUpsert) SetLastModifier(v *model.Modifier) *CouponUpsert {
	u.Set(coupon.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponUpsert) UpdateLastModifier() *CouponUpsert {
	u.SetExcluded(coupon.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponUpsert) ClearLastModifier() *CouponUpsert {
	u.SetNull(coupon.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CouponUpsert) SetRemark(v string) *CouponUpsert {
	u.Set(coupon.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponUpsert) UpdateRemark() *CouponUpsert {
	u.SetExcluded(coupon.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponUpsert) ClearRemark() *CouponUpsert {
	u.SetNull(coupon.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *CouponUpsert) SetRiderID(v uint64) *CouponUpsert {
	u.Set(coupon.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateRiderID() *CouponUpsert {
	u.SetExcluded(coupon.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CouponUpsert) ClearRiderID() *CouponUpsert {
	u.SetNull(coupon.FieldRiderID)
	return u
}

// SetAssemblyID sets the "assembly_id" field.
func (u *CouponUpsert) SetAssemblyID(v uint64) *CouponUpsert {
	u.Set(coupon.FieldAssemblyID, v)
	return u
}

// UpdateAssemblyID sets the "assembly_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateAssemblyID() *CouponUpsert {
	u.SetExcluded(coupon.FieldAssemblyID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *CouponUpsert) SetPlanID(v uint64) *CouponUpsert {
	u.Set(coupon.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdatePlanID() *CouponUpsert {
	u.SetExcluded(coupon.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CouponUpsert) ClearPlanID() *CouponUpsert {
	u.SetNull(coupon.FieldPlanID)
	return u
}

// SetTemplateID sets the "template_id" field.
func (u *CouponUpsert) SetTemplateID(v uint64) *CouponUpsert {
	u.Set(coupon.FieldTemplateID, v)
	return u
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateTemplateID() *CouponUpsert {
	u.SetExcluded(coupon.FieldTemplateID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *CouponUpsert) SetOrderID(v uint64) *CouponUpsert {
	u.Set(coupon.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CouponUpsert) UpdateOrderID() *CouponUpsert {
	u.SetExcluded(coupon.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CouponUpsert) ClearOrderID() *CouponUpsert {
	u.SetNull(coupon.FieldOrderID)
	return u
}

// SetRule sets the "rule" field.
func (u *CouponUpsert) SetRule(v uint8) *CouponUpsert {
	u.Set(coupon.FieldRule, v)
	return u
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *CouponUpsert) UpdateRule() *CouponUpsert {
	u.SetExcluded(coupon.FieldRule)
	return u
}

// AddRule adds v to the "rule" field.
func (u *CouponUpsert) AddRule(v uint8) *CouponUpsert {
	u.Add(coupon.FieldRule, v)
	return u
}

// SetMultiple sets the "multiple" field.
func (u *CouponUpsert) SetMultiple(v bool) *CouponUpsert {
	u.Set(coupon.FieldMultiple, v)
	return u
}

// UpdateMultiple sets the "multiple" field to the value that was provided on create.
func (u *CouponUpsert) UpdateMultiple() *CouponUpsert {
	u.SetExcluded(coupon.FieldMultiple)
	return u
}

// SetAmount sets the "amount" field.
func (u *CouponUpsert) SetAmount(v float64) *CouponUpsert {
	u.Set(coupon.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponUpsert) UpdateAmount() *CouponUpsert {
	u.SetExcluded(coupon.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *CouponUpsert) AddAmount(v float64) *CouponUpsert {
	u.Add(coupon.FieldAmount, v)
	return u
}

// SetCode sets the "code" field.
func (u *CouponUpsert) SetCode(v string) *CouponUpsert {
	u.Set(coupon.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCode() *CouponUpsert {
	u.SetExcluded(coupon.FieldCode)
	return u
}

// SetExpiresAt sets the "expires_at" field.
func (u *CouponUpsert) SetExpiresAt(v time.Time) *CouponUpsert {
	u.Set(coupon.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateExpiresAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldExpiresAt)
	return u
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *CouponUpsert) ClearExpiresAt() *CouponUpsert {
	u.SetNull(coupon.FieldExpiresAt)
	return u
}

// SetUsedAt sets the "used_at" field.
func (u *CouponUpsert) SetUsedAt(v time.Time) *CouponUpsert {
	u.Set(coupon.FieldUsedAt, v)
	return u
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponUpsert) UpdateUsedAt() *CouponUpsert {
	u.SetExcluded(coupon.FieldUsedAt)
	return u
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponUpsert) ClearUsedAt() *CouponUpsert {
	u.SetNull(coupon.FieldUsedAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *CouponUpsert) SetDuration(v *model.CouponDuration) *CouponUpsert {
	u.Set(coupon.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *CouponUpsert) UpdateDuration() *CouponUpsert {
	u.SetExcluded(coupon.FieldDuration)
	return u
}

// SetPlans sets the "plans" field.
func (u *CouponUpsert) SetPlans(v []model.Plan) *CouponUpsert {
	u.Set(coupon.FieldPlans, v)
	return u
}

// UpdatePlans sets the "plans" field to the value that was provided on create.
func (u *CouponUpsert) UpdatePlans() *CouponUpsert {
	u.SetExcluded(coupon.FieldPlans)
	return u
}

// ClearPlans clears the value of the "plans" field.
func (u *CouponUpsert) ClearPlans() *CouponUpsert {
	u.SetNull(coupon.FieldPlans)
	return u
}

// SetCities sets the "cities" field.
func (u *CouponUpsert) SetCities(v []model.City) *CouponUpsert {
	u.Set(coupon.FieldCities, v)
	return u
}

// UpdateCities sets the "cities" field to the value that was provided on create.
func (u *CouponUpsert) UpdateCities() *CouponUpsert {
	u.SetExcluded(coupon.FieldCities)
	return u
}

// ClearCities clears the value of the "cities" field.
func (u *CouponUpsert) ClearCities() *CouponUpsert {
	u.SetNull(coupon.FieldCities)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponUpsertOne) UpdateNewValues() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(coupon.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(coupon.FieldCreator)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(coupon.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CouponUpsertOne) Ignore() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertOne) DoNothing() *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreate.OnConflict
// documentation for more info.
func (u *CouponUpsertOne) Update(set func(*CouponUpsert)) *CouponUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertOne) SetUpdatedAt(v time.Time) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUpdatedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponUpsertOne) SetLastModifier(v *model.Modifier) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateLastModifier() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponUpsertOne) ClearLastModifier() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponUpsertOne) SetRemark(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateRemark() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponUpsertOne) ClearRemark() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CouponUpsertOne) SetRiderID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateRiderID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CouponUpsertOne) ClearRiderID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRiderID()
	})
}

// SetAssemblyID sets the "assembly_id" field.
func (u *CouponUpsertOne) SetAssemblyID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetAssemblyID(v)
	})
}

// UpdateAssemblyID sets the "assembly_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateAssemblyID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAssemblyID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *CouponUpsertOne) SetPlanID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdatePlanID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CouponUpsertOne) ClearPlanID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearPlanID()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *CouponUpsertOne) SetTemplateID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateTemplateID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateTemplateID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CouponUpsertOne) SetOrderID(v uint64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateOrderID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CouponUpsertOne) ClearOrderID() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearOrderID()
	})
}

// SetRule sets the "rule" field.
func (u *CouponUpsertOne) SetRule(v uint8) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetRule(v)
	})
}

// AddRule adds v to the "rule" field.
func (u *CouponUpsertOne) AddRule(v uint8) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddRule(v)
	})
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateRule() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRule()
	})
}

// SetMultiple sets the "multiple" field.
func (u *CouponUpsertOne) SetMultiple(v bool) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetMultiple(v)
	})
}

// UpdateMultiple sets the "multiple" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateMultiple() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateMultiple()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponUpsertOne) SetAmount(v float64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CouponUpsertOne) AddAmount(v float64) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateAmount() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAmount()
	})
}

// SetCode sets the "code" field.
func (u *CouponUpsertOne) SetCode(v string) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCode() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCode()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *CouponUpsertOne) SetExpiresAt(v time.Time) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateExpiresAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *CouponUpsertOne) ClearExpiresAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearExpiresAt()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CouponUpsertOne) SetUsedAt(v time.Time) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateUsedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponUpsertOne) ClearUsedAt() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearUsedAt()
	})
}

// SetDuration sets the "duration" field.
func (u *CouponUpsertOne) SetDuration(v *model.CouponDuration) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateDuration() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDuration()
	})
}

// SetPlans sets the "plans" field.
func (u *CouponUpsertOne) SetPlans(v []model.Plan) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetPlans(v)
	})
}

// UpdatePlans sets the "plans" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdatePlans() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdatePlans()
	})
}

// ClearPlans clears the value of the "plans" field.
func (u *CouponUpsertOne) ClearPlans() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearPlans()
	})
}

// SetCities sets the "cities" field.
func (u *CouponUpsertOne) SetCities(v []model.City) *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.SetCities(v)
	})
}

// UpdateCities sets the "cities" field to the value that was provided on create.
func (u *CouponUpsertOne) UpdateCities() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCities()
	})
}

// ClearCities clears the value of the "cities" field.
func (u *CouponUpsertOne) ClearCities() *CouponUpsertOne {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCities()
	})
}

// Exec executes the query.
func (u *CouponUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CouponUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CouponUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CouponCreateBulk is the builder for creating many Coupon entities in bulk.
type CouponCreateBulk struct {
	config
	builders []*CouponCreate
	conflict []sql.ConflictOption
}

// Save creates the Coupon entities in the database.
func (ccb *CouponCreateBulk) Save(ctx context.Context) ([]*Coupon, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coupon, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CouponMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CouponCreateBulk) SaveX(ctx context.Context) []*Coupon {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CouponCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CouponCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Coupon.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CouponUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CouponCreateBulk) OnConflict(opts ...sql.ConflictOption) *CouponUpsertBulk {
	ccb.conflict = opts
	return &CouponUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CouponCreateBulk) OnConflictColumns(columns ...string) *CouponUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CouponUpsertBulk{
		create: ccb,
	}
}

// CouponUpsertBulk is the builder for "upsert"-ing
// a bulk of Coupon nodes.
type CouponUpsertBulk struct {
	create *CouponCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CouponUpsertBulk) UpdateNewValues() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(coupon.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(coupon.FieldCreator)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(coupon.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Coupon.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CouponUpsertBulk) Ignore() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CouponUpsertBulk) DoNothing() *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CouponCreateBulk.OnConflict
// documentation for more info.
func (u *CouponUpsertBulk) Update(set func(*CouponUpsert)) *CouponUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CouponUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CouponUpsertBulk) SetUpdatedAt(v time.Time) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUpdatedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CouponUpsertBulk) SetLastModifier(v *model.Modifier) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateLastModifier() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CouponUpsertBulk) ClearLastModifier() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CouponUpsertBulk) SetRemark(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateRemark() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CouponUpsertBulk) ClearRemark() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CouponUpsertBulk) SetRiderID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateRiderID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CouponUpsertBulk) ClearRiderID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearRiderID()
	})
}

// SetAssemblyID sets the "assembly_id" field.
func (u *CouponUpsertBulk) SetAssemblyID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetAssemblyID(v)
	})
}

// UpdateAssemblyID sets the "assembly_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateAssemblyID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAssemblyID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *CouponUpsertBulk) SetPlanID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdatePlanID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CouponUpsertBulk) ClearPlanID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearPlanID()
	})
}

// SetTemplateID sets the "template_id" field.
func (u *CouponUpsertBulk) SetTemplateID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetTemplateID(v)
	})
}

// UpdateTemplateID sets the "template_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateTemplateID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateTemplateID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CouponUpsertBulk) SetOrderID(v uint64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateOrderID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *CouponUpsertBulk) ClearOrderID() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearOrderID()
	})
}

// SetRule sets the "rule" field.
func (u *CouponUpsertBulk) SetRule(v uint8) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetRule(v)
	})
}

// AddRule adds v to the "rule" field.
func (u *CouponUpsertBulk) AddRule(v uint8) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddRule(v)
	})
}

// UpdateRule sets the "rule" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateRule() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateRule()
	})
}

// SetMultiple sets the "multiple" field.
func (u *CouponUpsertBulk) SetMultiple(v bool) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetMultiple(v)
	})
}

// UpdateMultiple sets the "multiple" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateMultiple() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateMultiple()
	})
}

// SetAmount sets the "amount" field.
func (u *CouponUpsertBulk) SetAmount(v float64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *CouponUpsertBulk) AddAmount(v float64) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateAmount() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateAmount()
	})
}

// SetCode sets the "code" field.
func (u *CouponUpsertBulk) SetCode(v string) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCode() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCode()
	})
}

// SetExpiresAt sets the "expires_at" field.
func (u *CouponUpsertBulk) SetExpiresAt(v time.Time) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expires_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateExpiresAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateExpiresAt()
	})
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (u *CouponUpsertBulk) ClearExpiresAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearExpiresAt()
	})
}

// SetUsedAt sets the "used_at" field.
func (u *CouponUpsertBulk) SetUsedAt(v time.Time) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetUsedAt(v)
	})
}

// UpdateUsedAt sets the "used_at" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateUsedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateUsedAt()
	})
}

// ClearUsedAt clears the value of the "used_at" field.
func (u *CouponUpsertBulk) ClearUsedAt() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearUsedAt()
	})
}

// SetDuration sets the "duration" field.
func (u *CouponUpsertBulk) SetDuration(v *model.CouponDuration) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateDuration() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateDuration()
	})
}

// SetPlans sets the "plans" field.
func (u *CouponUpsertBulk) SetPlans(v []model.Plan) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetPlans(v)
	})
}

// UpdatePlans sets the "plans" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdatePlans() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdatePlans()
	})
}

// ClearPlans clears the value of the "plans" field.
func (u *CouponUpsertBulk) ClearPlans() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearPlans()
	})
}

// SetCities sets the "cities" field.
func (u *CouponUpsertBulk) SetCities(v []model.City) *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.SetCities(v)
	})
}

// UpdateCities sets the "cities" field to the value that was provided on create.
func (u *CouponUpsertBulk) UpdateCities() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.UpdateCities()
	})
}

// ClearCities clears the value of the "cities" field.
func (u *CouponUpsertBulk) ClearCities() *CouponUpsertBulk {
	return u.Update(func(s *CouponUpsert) {
		s.ClearCities()
	})
}

// Exec executes the query.
func (u *CouponUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CouponCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CouponCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CouponUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
