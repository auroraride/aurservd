// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BranchContractQuery is the builder for querying BranchContract entities.
type BranchContractQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.BranchContract
	// eager-loading edges.
	withBranch *BranchQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BranchContractQuery builder.
func (bcq *BranchContractQuery) Where(ps ...predicate.BranchContract) *BranchContractQuery {
	bcq.predicates = append(bcq.predicates, ps...)
	return bcq
}

// Limit adds a limit step to the query.
func (bcq *BranchContractQuery) Limit(limit int) *BranchContractQuery {
	bcq.limit = &limit
	return bcq
}

// Offset adds an offset step to the query.
func (bcq *BranchContractQuery) Offset(offset int) *BranchContractQuery {
	bcq.offset = &offset
	return bcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bcq *BranchContractQuery) Unique(unique bool) *BranchContractQuery {
	bcq.unique = &unique
	return bcq
}

// Order adds an order step to the query.
func (bcq *BranchContractQuery) Order(o ...OrderFunc) *BranchContractQuery {
	bcq.order = append(bcq.order, o...)
	return bcq
}

// QueryBranch chains the current query on the "branch" edge.
func (bcq *BranchContractQuery) QueryBranch() *BranchQuery {
	query := &BranchQuery{config: bcq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branchcontract.Table, branchcontract.FieldID, selector),
			sqlgraph.To(branch.Table, branch.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, branchcontract.BranchTable, branchcontract.BranchColumn),
		)
		fromU = sqlgraph.SetNeighbors(bcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BranchContract entity from the query.
// Returns a *NotFoundError when no BranchContract was found.
func (bcq *BranchContractQuery) First(ctx context.Context) (*BranchContract, error) {
	nodes, err := bcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{branchcontract.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bcq *BranchContractQuery) FirstX(ctx context.Context) *BranchContract {
	node, err := bcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BranchContract ID from the query.
// Returns a *NotFoundError when no BranchContract ID was found.
func (bcq *BranchContractQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{branchcontract.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bcq *BranchContractQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := bcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BranchContract entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BranchContract entity is found.
// Returns a *NotFoundError when no BranchContract entities are found.
func (bcq *BranchContractQuery) Only(ctx context.Context) (*BranchContract, error) {
	nodes, err := bcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{branchcontract.Label}
	default:
		return nil, &NotSingularError{branchcontract.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bcq *BranchContractQuery) OnlyX(ctx context.Context) *BranchContract {
	node, err := bcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BranchContract ID in the query.
// Returns a *NotSingularError when more than one BranchContract ID is found.
// Returns a *NotFoundError when no entities are found.
func (bcq *BranchContractQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{branchcontract.Label}
	default:
		err = &NotSingularError{branchcontract.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bcq *BranchContractQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := bcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BranchContracts.
func (bcq *BranchContractQuery) All(ctx context.Context) ([]*BranchContract, error) {
	if err := bcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bcq *BranchContractQuery) AllX(ctx context.Context) []*BranchContract {
	nodes, err := bcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BranchContract IDs.
func (bcq *BranchContractQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := bcq.Select(branchcontract.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bcq *BranchContractQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := bcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bcq *BranchContractQuery) Count(ctx context.Context) (int, error) {
	if err := bcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bcq *BranchContractQuery) CountX(ctx context.Context) int {
	count, err := bcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bcq *BranchContractQuery) Exist(ctx context.Context) (bool, error) {
	if err := bcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bcq *BranchContractQuery) ExistX(ctx context.Context) bool {
	exist, err := bcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BranchContractQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bcq *BranchContractQuery) Clone() *BranchContractQuery {
	if bcq == nil {
		return nil
	}
	return &BranchContractQuery{
		config:     bcq.config,
		limit:      bcq.limit,
		offset:     bcq.offset,
		order:      append([]OrderFunc{}, bcq.order...),
		predicates: append([]predicate.BranchContract{}, bcq.predicates...),
		withBranch: bcq.withBranch.Clone(),
		// clone intermediate query.
		sql:    bcq.sql.Clone(),
		path:   bcq.path,
		unique: bcq.unique,
	}
}

// WithBranch tells the query-builder to eager-load the nodes that are connected to
// the "branch" edge. The optional arguments are used to configure the query builder of the edge.
func (bcq *BranchContractQuery) WithBranch(opts ...func(*BranchQuery)) *BranchContractQuery {
	query := &BranchQuery{config: bcq.config}
	for _, opt := range opts {
		opt(query)
	}
	bcq.withBranch = query
	return bcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BranchContract.Query().
//		GroupBy(branchcontract.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (bcq *BranchContractQuery) GroupBy(field string, fields ...string) *BranchContractGroupBy {
	grbuild := &BranchContractGroupBy{config: bcq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bcq.sqlQuery(ctx), nil
	}
	grbuild.label = branchcontract.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.BranchContract.Query().
//		Select(branchcontract.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (bcq *BranchContractQuery) Select(fields ...string) *BranchContractSelect {
	bcq.fields = append(bcq.fields, fields...)
	selbuild := &BranchContractSelect{BranchContractQuery: bcq}
	selbuild.label = branchcontract.Label
	selbuild.flds, selbuild.scan = &bcq.fields, selbuild.Scan
	return selbuild
}

func (bcq *BranchContractQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bcq.fields {
		if !branchcontract.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bcq.path != nil {
		prev, err := bcq.path(ctx)
		if err != nil {
			return err
		}
		bcq.sql = prev
	}
	return nil
}

func (bcq *BranchContractQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BranchContract, error) {
	var (
		nodes       = []*BranchContract{}
		_spec       = bcq.querySpec()
		loadedTypes = [1]bool{
			bcq.withBranch != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*BranchContract).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &BranchContract{config: bcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bcq.modifiers) > 0 {
		_spec.Modifiers = bcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := bcq.withBranch; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*BranchContract)
		for i := range nodes {
			fk := nodes[i].BranchID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(branch.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "branch_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Branch = n
			}
		}
	}

	return nodes, nil
}

func (bcq *BranchContractQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bcq.querySpec()
	if len(bcq.modifiers) > 0 {
		_spec.Modifiers = bcq.modifiers
	}
	_spec.Node.Columns = bcq.fields
	if len(bcq.fields) > 0 {
		_spec.Unique = bcq.unique != nil && *bcq.unique
	}
	return sqlgraph.CountNodes(ctx, bcq.driver, _spec)
}

func (bcq *BranchContractQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := bcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (bcq *BranchContractQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   branchcontract.Table,
			Columns: branchcontract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branchcontract.FieldID,
			},
		},
		From:   bcq.sql,
		Unique: true,
	}
	if unique := bcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branchcontract.FieldID)
		for i := range fields {
			if fields[i] != branchcontract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bcq *BranchContractQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bcq.driver.Dialect())
	t1 := builder.Table(branchcontract.Table)
	columns := bcq.fields
	if len(columns) == 0 {
		columns = branchcontract.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bcq.sql != nil {
		selector = bcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bcq.unique != nil && *bcq.unique {
		selector.Distinct()
	}
	for _, m := range bcq.modifiers {
		m(selector)
	}
	for _, p := range bcq.predicates {
		p(selector)
	}
	for _, p := range bcq.order {
		p(selector)
	}
	if offset := bcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bcq *BranchContractQuery) Modify(modifiers ...func(s *sql.Selector)) *BranchContractSelect {
	bcq.modifiers = append(bcq.modifiers, modifiers...)
	return bcq.Select()
}

// BranchContractGroupBy is the group-by builder for BranchContract entities.
type BranchContractGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bcgb *BranchContractGroupBy) Aggregate(fns ...AggregateFunc) *BranchContractGroupBy {
	bcgb.fns = append(bcgb.fns, fns...)
	return bcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bcgb *BranchContractGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := bcgb.path(ctx)
	if err != nil {
		return err
	}
	bcgb.sql = query
	return bcgb.sqlScan(ctx, v)
}

func (bcgb *BranchContractGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range bcgb.fields {
		if !branchcontract.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bcgb *BranchContractGroupBy) sqlQuery() *sql.Selector {
	selector := bcgb.sql.Select()
	aggregation := make([]string, 0, len(bcgb.fns))
	for _, fn := range bcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bcgb.fields)+len(bcgb.fns))
		for _, f := range bcgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bcgb.fields...)...)
}

// BranchContractSelect is the builder for selecting fields of BranchContract entities.
type BranchContractSelect struct {
	*BranchContractQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bcs *BranchContractSelect) Scan(ctx context.Context, v interface{}) error {
	if err := bcs.prepareQuery(ctx); err != nil {
		return err
	}
	bcs.sql = bcs.BranchContractQuery.sqlQuery(ctx)
	return bcs.sqlScan(ctx, v)
}

func (bcs *BranchContractSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := bcs.sql.Query()
	if err := bcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bcs *BranchContractSelect) Modify(modifiers ...func(s *sql.Selector)) *BranchContractSelect {
	bcs.modifiers = append(bcs.modifiers, modifiers...)
	return bcs
}
