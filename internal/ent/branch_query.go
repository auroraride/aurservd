// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// BranchQuery is the builder for querying Branch entities.
type BranchQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	predicates    []predicate.Branch
	withCity      *CityQuery
	withContracts *BranchContractQuery
	withCabinets  *CabinetQuery
	withFaults    *CabinetFaultQuery
	withStores    *StoreQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BranchQuery builder.
func (bq *BranchQuery) Where(ps ...predicate.Branch) *BranchQuery {
	bq.predicates = append(bq.predicates, ps...)
	return bq
}

// Limit adds a limit step to the query.
func (bq *BranchQuery) Limit(limit int) *BranchQuery {
	bq.limit = &limit
	return bq
}

// Offset adds an offset step to the query.
func (bq *BranchQuery) Offset(offset int) *BranchQuery {
	bq.offset = &offset
	return bq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bq *BranchQuery) Unique(unique bool) *BranchQuery {
	bq.unique = &unique
	return bq
}

// Order adds an order step to the query.
func (bq *BranchQuery) Order(o ...OrderFunc) *BranchQuery {
	bq.order = append(bq.order, o...)
	return bq
}

// QueryCity chains the current query on the "city" edge.
func (bq *BranchQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, branch.CityTable, branch.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContracts chains the current query on the "contracts" edge.
func (bq *BranchQuery) QueryContracts() *BranchContractQuery {
	query := &BranchContractQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, selector),
			sqlgraph.To(branchcontract.Table, branchcontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.ContractsTable, branch.ContractsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinets chains the current query on the "cabinets" edge.
func (bq *BranchQuery) QueryCabinets() *CabinetQuery {
	query := &CabinetQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.CabinetsTable, branch.CabinetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFaults chains the current query on the "faults" edge.
func (bq *BranchQuery) QueryFaults() *CabinetFaultQuery {
	query := &CabinetFaultQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, selector),
			sqlgraph.To(cabinetfault.Table, cabinetfault.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.FaultsTable, branch.FaultsColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStores chains the current query on the "stores" edge.
func (bq *BranchQuery) QueryStores() *StoreQuery {
	query := &StoreQuery{config: bq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := bq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(branch.Table, branch.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, branch.StoresTable, branch.StoresColumn),
		)
		fromU = sqlgraph.SetNeighbors(bq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Branch entity from the query.
// Returns a *NotFoundError when no Branch was found.
func (bq *BranchQuery) First(ctx context.Context) (*Branch, error) {
	nodes, err := bq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{branch.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bq *BranchQuery) FirstX(ctx context.Context) *Branch {
	node, err := bq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Branch ID from the query.
// Returns a *NotFoundError when no Branch ID was found.
func (bq *BranchQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{branch.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bq *BranchQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := bq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Branch entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Branch entity is found.
// Returns a *NotFoundError when no Branch entities are found.
func (bq *BranchQuery) Only(ctx context.Context) (*Branch, error) {
	nodes, err := bq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{branch.Label}
	default:
		return nil, &NotSingularError{branch.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bq *BranchQuery) OnlyX(ctx context.Context) *Branch {
	node, err := bq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Branch ID in the query.
// Returns a *NotSingularError when more than one Branch ID is found.
// Returns a *NotFoundError when no entities are found.
func (bq *BranchQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = bq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{branch.Label}
	default:
		err = &NotSingularError{branch.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bq *BranchQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := bq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Branches.
func (bq *BranchQuery) All(ctx context.Context) ([]*Branch, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return bq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (bq *BranchQuery) AllX(ctx context.Context) []*Branch {
	nodes, err := bq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Branch IDs.
func (bq *BranchQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := bq.Select(branch.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bq *BranchQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := bq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bq *BranchQuery) Count(ctx context.Context) (int, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return bq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (bq *BranchQuery) CountX(ctx context.Context) int {
	count, err := bq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bq *BranchQuery) Exist(ctx context.Context) (bool, error) {
	if err := bq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return bq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (bq *BranchQuery) ExistX(ctx context.Context) bool {
	exist, err := bq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BranchQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bq *BranchQuery) Clone() *BranchQuery {
	if bq == nil {
		return nil
	}
	return &BranchQuery{
		config:        bq.config,
		limit:         bq.limit,
		offset:        bq.offset,
		order:         append([]OrderFunc{}, bq.order...),
		predicates:    append([]predicate.Branch{}, bq.predicates...),
		withCity:      bq.withCity.Clone(),
		withContracts: bq.withContracts.Clone(),
		withCabinets:  bq.withCabinets.Clone(),
		withFaults:    bq.withFaults.Clone(),
		withStores:    bq.withStores.Clone(),
		// clone intermediate query.
		sql:    bq.sql.Clone(),
		path:   bq.path,
		unique: bq.unique,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BranchQuery) WithCity(opts ...func(*CityQuery)) *BranchQuery {
	query := &CityQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withCity = query
	return bq
}

// WithContracts tells the query-builder to eager-load the nodes that are connected to
// the "contracts" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BranchQuery) WithContracts(opts ...func(*BranchContractQuery)) *BranchQuery {
	query := &BranchContractQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withContracts = query
	return bq
}

// WithCabinets tells the query-builder to eager-load the nodes that are connected to
// the "cabinets" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BranchQuery) WithCabinets(opts ...func(*CabinetQuery)) *BranchQuery {
	query := &CabinetQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withCabinets = query
	return bq
}

// WithFaults tells the query-builder to eager-load the nodes that are connected to
// the "faults" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BranchQuery) WithFaults(opts ...func(*CabinetFaultQuery)) *BranchQuery {
	query := &CabinetFaultQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withFaults = query
	return bq
}

// WithStores tells the query-builder to eager-load the nodes that are connected to
// the "stores" edge. The optional arguments are used to configure the query builder of the edge.
func (bq *BranchQuery) WithStores(opts ...func(*StoreQuery)) *BranchQuery {
	query := &StoreQuery{config: bq.config}
	for _, opt := range opts {
		opt(query)
	}
	bq.withStores = query
	return bq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Branch.Query().
//		GroupBy(branch.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bq *BranchQuery) GroupBy(field string, fields ...string) *BranchGroupBy {
	grbuild := &BranchGroupBy{config: bq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := bq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return bq.sqlQuery(ctx), nil
	}
	grbuild.label = branch.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Branch.Query().
//		Select(branch.FieldCreatedAt).
//		Scan(ctx, &v)
func (bq *BranchQuery) Select(fields ...string) *BranchSelect {
	bq.fields = append(bq.fields, fields...)
	selbuild := &BranchSelect{BranchQuery: bq}
	selbuild.label = branch.Label
	selbuild.flds, selbuild.scan = &bq.fields, selbuild.Scan
	return selbuild
}

func (bq *BranchQuery) prepareQuery(ctx context.Context) error {
	for _, f := range bq.fields {
		if !branch.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bq.path != nil {
		prev, err := bq.path(ctx)
		if err != nil {
			return err
		}
		bq.sql = prev
	}
	return nil
}

func (bq *BranchQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Branch, error) {
	var (
		nodes       = []*Branch{}
		_spec       = bq.querySpec()
		loadedTypes = [5]bool{
			bq.withCity != nil,
			bq.withContracts != nil,
			bq.withCabinets != nil,
			bq.withFaults != nil,
			bq.withStores != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Branch).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Branch{config: bq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := bq.withCity; query != nil {
		if err := bq.loadCity(ctx, query, nodes, nil,
			func(n *Branch, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := bq.withContracts; query != nil {
		if err := bq.loadContracts(ctx, query, nodes,
			func(n *Branch) { n.Edges.Contracts = []*BranchContract{} },
			func(n *Branch, e *BranchContract) { n.Edges.Contracts = append(n.Edges.Contracts, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withCabinets; query != nil {
		if err := bq.loadCabinets(ctx, query, nodes,
			func(n *Branch) { n.Edges.Cabinets = []*Cabinet{} },
			func(n *Branch, e *Cabinet) { n.Edges.Cabinets = append(n.Edges.Cabinets, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withFaults; query != nil {
		if err := bq.loadFaults(ctx, query, nodes,
			func(n *Branch) { n.Edges.Faults = []*CabinetFault{} },
			func(n *Branch, e *CabinetFault) { n.Edges.Faults = append(n.Edges.Faults, e) }); err != nil {
			return nil, err
		}
	}
	if query := bq.withStores; query != nil {
		if err := bq.loadStores(ctx, query, nodes,
			func(n *Branch) { n.Edges.Stores = []*Store{} },
			func(n *Branch, e *Store) { n.Edges.Stores = append(n.Edges.Stores, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (bq *BranchQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Branch, init func(*Branch), assign func(*Branch, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Branch)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (bq *BranchQuery) loadContracts(ctx context.Context, query *BranchContractQuery, nodes []*Branch, init func(*Branch), assign func(*Branch, *BranchContract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Branch)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.BranchContract(func(s *sql.Selector) {
		s.Where(sql.InValues(branch.ContractsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BranchID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "branch_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BranchQuery) loadCabinets(ctx context.Context, query *CabinetQuery, nodes []*Branch, init func(*Branch), assign func(*Branch, *Cabinet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Branch)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.InValues(branch.CabinetsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BranchID
		if fk == nil {
			return fmt.Errorf(`foreign-key "branch_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "branch_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BranchQuery) loadFaults(ctx context.Context, query *CabinetFaultQuery, nodes []*Branch, init func(*Branch), assign func(*Branch, *CabinetFault)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Branch)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.CabinetFault(func(s *sql.Selector) {
		s.Where(sql.InValues(branch.FaultsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BranchID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "branch_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (bq *BranchQuery) loadStores(ctx context.Context, query *StoreQuery, nodes []*Branch, init func(*Branch), assign func(*Branch, *Store)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Branch)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Store(func(s *sql.Selector) {
		s.Where(sql.InValues(branch.StoresColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BranchID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "branch_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (bq *BranchQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bq.querySpec()
	if len(bq.modifiers) > 0 {
		_spec.Modifiers = bq.modifiers
	}
	_spec.Node.Columns = bq.fields
	if len(bq.fields) > 0 {
		_spec.Unique = bq.unique != nil && *bq.unique
	}
	return sqlgraph.CountNodes(ctx, bq.driver, _spec)
}

func (bq *BranchQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := bq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (bq *BranchQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   branch.Table,
			Columns: branch.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: branch.FieldID,
			},
		},
		From:   bq.sql,
		Unique: true,
	}
	if unique := bq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := bq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, branch.FieldID)
		for i := range fields {
			if fields[i] != branch.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bq *BranchQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bq.driver.Dialect())
	t1 := builder.Table(branch.Table)
	columns := bq.fields
	if len(columns) == 0 {
		columns = branch.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bq.sql != nil {
		selector = bq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bq.unique != nil && *bq.unique {
		selector.Distinct()
	}
	for _, m := range bq.modifiers {
		m(selector)
	}
	for _, p := range bq.predicates {
		p(selector)
	}
	for _, p := range bq.order {
		p(selector)
	}
	if offset := bq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bq *BranchQuery) Modify(modifiers ...func(s *sql.Selector)) *BranchSelect {
	bq.modifiers = append(bq.modifiers, modifiers...)
	return bq.Select()
}

// BranchGroupBy is the group-by builder for Branch entities.
type BranchGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bgb *BranchGroupBy) Aggregate(fns ...AggregateFunc) *BranchGroupBy {
	bgb.fns = append(bgb.fns, fns...)
	return bgb
}

// Scan applies the group-by query and scans the result into the given value.
func (bgb *BranchGroupBy) Scan(ctx context.Context, v any) error {
	query, err := bgb.path(ctx)
	if err != nil {
		return err
	}
	bgb.sql = query
	return bgb.sqlScan(ctx, v)
}

func (bgb *BranchGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range bgb.fields {
		if !branch.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := bgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (bgb *BranchGroupBy) sqlQuery() *sql.Selector {
	selector := bgb.sql.Select()
	aggregation := make([]string, 0, len(bgb.fns))
	for _, fn := range bgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(bgb.fields)+len(bgb.fns))
		for _, f := range bgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(bgb.fields...)...)
}

// BranchSelect is the builder for selecting fields of Branch entities.
type BranchSelect struct {
	*BranchQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (bs *BranchSelect) Scan(ctx context.Context, v any) error {
	if err := bs.prepareQuery(ctx); err != nil {
		return err
	}
	bs.sql = bs.BranchQuery.sqlQuery(ctx)
	return bs.sqlScan(ctx, v)
}

func (bs *BranchSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := bs.sql.Query()
	if err := bs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (bs *BranchSelect) Modify(modifiers ...func(s *sql.Selector)) *BranchSelect {
	bs.modifiers = append(bs.modifiers, modifiers...)
	return bs
}
