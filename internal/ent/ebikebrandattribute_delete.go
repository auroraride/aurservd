// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EbikeBrandAttributeDelete is the builder for deleting a EbikeBrandAttribute entity.
type EbikeBrandAttributeDelete struct {
	config
	hooks    []Hook
	mutation *EbikeBrandAttributeMutation
}

// Where appends a list predicates to the EbikeBrandAttributeDelete builder.
func (ebad *EbikeBrandAttributeDelete) Where(ps ...predicate.EbikeBrandAttribute) *EbikeBrandAttributeDelete {
	ebad.mutation.Where(ps...)
	return ebad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ebad *EbikeBrandAttributeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ebad.sqlExec, ebad.mutation, ebad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ebad *EbikeBrandAttributeDelete) ExecX(ctx context.Context) int {
	n, err := ebad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ebad *EbikeBrandAttributeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ebikebrandattribute.Table, sqlgraph.NewFieldSpec(ebikebrandattribute.FieldID, field.TypeUint64))
	if ps := ebad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ebad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ebad.mutation.done = true
	return affected, err
}

// EbikeBrandAttributeDeleteOne is the builder for deleting a single EbikeBrandAttribute entity.
type EbikeBrandAttributeDeleteOne struct {
	ebad *EbikeBrandAttributeDelete
}

// Where appends a list predicates to the EbikeBrandAttributeDelete builder.
func (ebado *EbikeBrandAttributeDeleteOne) Where(ps ...predicate.EbikeBrandAttribute) *EbikeBrandAttributeDeleteOne {
	ebado.ebad.mutation.Where(ps...)
	return ebado
}

// Exec executes the deletion query.
func (ebado *EbikeBrandAttributeDeleteOne) Exec(ctx context.Context) error {
	n, err := ebado.ebad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ebikebrandattribute.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ebado *EbikeBrandAttributeDeleteOne) ExecX(ctx context.Context) {
	if err := ebado.Exec(ctx); err != nil {
		panic(err)
	}
}
