// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/order"
)

// Commission is the model entity for the Commission schema.
type Commission struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// OrderID holds the value of the "order_id" field.
	// 订单ID
	OrderID uint64 `json:"order_id,omitempty"`
	// Amount holds the value of the "amount" field.
	// 提成金额
	Amount float64 `json:"amount,omitempty"`
	// Status holds the value of the "status" field.
	// 提成状态 0未发放 1已发放
	Status uint8 `json:"status,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	// 员工ID
	EmployeeID uint64 `json:"employee_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommissionQuery when eager-loading is set.
	Edges CommissionEdges `json:"edges"`
}

// CommissionEdges holds the relations/edges for other nodes in the graph.
type CommissionEdges struct {
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommissionEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[0] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commission.FieldCreator, commission.FieldLastModifier:
			values[i] = new([]byte)
		case commission.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case commission.FieldID, commission.FieldOrderID, commission.FieldStatus, commission.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case commission.FieldRemark:
			values[i] = new(sql.NullString)
		case commission.FieldCreatedAt, commission.FieldUpdatedAt, commission.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commission fields.
func (c *Commission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case commission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case commission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case commission.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case commission.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case commission.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case commission.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case commission.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				c.OrderID = uint64(value.Int64)
			}
		case commission.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				c.Amount = value.Float64
			}
		case commission.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case commission.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				c.EmployeeID = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryOrder queries the "order" edge of the Commission entity.
func (c *Commission) QueryOrder() *OrderQuery {
	return (&CommissionClient{config: c.config}).QueryOrder(c)
}

// Update returns a builder for updating this Commission.
// Note that you need to call Commission.Unwrap() before calling this method if this Commission
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commission) Update() *CommissionUpdateOne {
	return (&CommissionClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commission) Unwrap() *Commission {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commission is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commission) String() string {
	var builder strings.Builder
	builder.WriteString("Commission(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", c.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", c.OrderID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", c.Amount))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", employee_id=")
	builder.WriteString(fmt.Sprintf("%v", c.EmployeeID))
	builder.WriteByte(')')
	return builder.String()
}

// Commissions is a parsable slice of Commission.
type Commissions []*Commission

func (c Commissions) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
