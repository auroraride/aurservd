// Code generated by ent, DO NOT EDIT.

package promotioncommissionplan

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotioncommissionplan type in the database.
	Label = "promotion_commission_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldCommissionID holds the string denoting the commission_id field in the database.
	FieldCommissionID = "commission_id"
	// FieldPlanID holds the string denoting the plan_id field in the database.
	FieldPlanID = "plan_id"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgePromotionCommission holds the string denoting the promotion_commission edge name in mutations.
	EdgePromotionCommission = "promotion_commission"
	// EdgePlan holds the string denoting the plan edge name in mutations.
	EdgePlan = "plan"
	// Table holds the table name of the promotioncommissionplan in the database.
	Table = "promotion_commission_plan"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_commission_plan"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// PromotionCommissionTable is the table that holds the promotion_commission relation/edge.
	PromotionCommissionTable = "promotion_commission_plan"
	// PromotionCommissionInverseTable is the table name for the PromotionCommission entity.
	// It exists in this package in order to avoid circular dependency with the "promotioncommission" package.
	PromotionCommissionInverseTable = "promotion_commission"
	// PromotionCommissionColumn is the table column denoting the promotion_commission relation/edge.
	PromotionCommissionColumn = "commission_id"
	// PlanTable is the table that holds the plan relation/edge.
	PlanTable = "promotion_commission_plan"
	// PlanInverseTable is the table name for the Plan entity.
	// It exists in this package in order to avoid circular dependency with the "plan" package.
	PlanInverseTable = "plan"
	// PlanColumn is the table column denoting the plan relation/edge.
	PlanColumn = "plan_id"
)

// Columns holds all SQL columns for promotioncommissionplan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldMemberID,
	FieldCommissionID,
	FieldPlanID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the PromotionCommissionPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByCommissionID orders the results by the commission_id field.
func ByCommissionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommissionID, opts...).ToFunc()
}

// ByPlanID orders the results by the plan_id field.
func ByPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlanID, opts...).ToFunc()
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByPromotionCommissionField orders the results by promotion_commission field.
func ByPromotionCommissionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPromotionCommissionStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlanField orders the results by plan field.
func ByPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlanStep(), sql.OrderByField(field, opts...))
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
	)
}
func newPromotionCommissionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PromotionCommissionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PromotionCommissionTable, PromotionCommissionColumn),
	)
}
func newPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlanTable, PlanColumn),
	)
}
