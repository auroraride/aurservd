// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/subscribereminder"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// SubscribeReminderMutation represents an operation that mutates the SubscribeReminder nodes in the graph.
type SubscribeReminderMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	_type            *subscribereminder.Type
	phone            *string
	name             *string
	success          *bool
	days             *int
	adddays          *int
	plan_name        *string
	date             *string
	fee              *float64
	addfee           *float64
	fee_formula      *string
	clearedFields    map[string]struct{}
	subscribe        *uint64
	clearedsubscribe bool
	plan             *uint64
	clearedplan      bool
	done             bool
	oldValue         func(context.Context) (*SubscribeReminder, error)
	predicates       []predicate.SubscribeReminder
}

var _ ent.Mutation = (*SubscribeReminderMutation)(nil)

// subscribereminderOption allows management of the mutation configuration using functional options.
type subscribereminderOption func(*SubscribeReminderMutation)

// newSubscribeReminderMutation creates new mutation for the SubscribeReminder entity.
func newSubscribeReminderMutation(c config, op Op, opts ...subscribereminderOption) *SubscribeReminderMutation {
	m := &SubscribeReminderMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscribeReminder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscribeReminderID sets the ID field of the mutation.
func withSubscribeReminderID(id uint64) subscribereminderOption {
	return func(m *SubscribeReminderMutation) {
		var (
			err   error
			once  sync.Once
			value *SubscribeReminder
		)
		m.oldValue = func(ctx context.Context) (*SubscribeReminder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubscribeReminder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscribeReminder sets the old SubscribeReminder of the mutation.
func withSubscribeReminder(node *SubscribeReminder) subscribereminderOption {
	return func(m *SubscribeReminderMutation) {
		m.oldValue = func(context.Context) (*SubscribeReminder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscribeReminderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscribeReminderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscribeReminderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscribeReminderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubscribeReminder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SubscribeReminderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubscribeReminderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubscribeReminderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubscribeReminderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubscribeReminderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubscribeReminderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *SubscribeReminderMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *SubscribeReminderMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *SubscribeReminderMutation) ResetSubscribeID() {
	m.subscribe = nil
}

// SetPlanID sets the "plan_id" field.
func (m *SubscribeReminderMutation) SetPlanID(u uint64) {
	m.plan = &u
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *SubscribeReminderMutation) PlanID() (r uint64, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldPlanID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *SubscribeReminderMutation) ResetPlanID() {
	m.plan = nil
}

// SetType sets the "type" field.
func (m *SubscribeReminderMutation) SetType(s subscribereminder.Type) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *SubscribeReminderMutation) GetType() (r subscribereminder.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldType(ctx context.Context) (v subscribereminder.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *SubscribeReminderMutation) ResetType() {
	m._type = nil
}

// SetPhone sets the "phone" field.
func (m *SubscribeReminderMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *SubscribeReminderMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *SubscribeReminderMutation) ResetPhone() {
	m.phone = nil
}

// SetName sets the "name" field.
func (m *SubscribeReminderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SubscribeReminderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SubscribeReminderMutation) ResetName() {
	m.name = nil
}

// SetSuccess sets the "success" field.
func (m *SubscribeReminderMutation) SetSuccess(b bool) {
	m.success = &b
}

// Success returns the value of the "success" field in the mutation.
func (m *SubscribeReminderMutation) Success() (r bool, exists bool) {
	v := m.success
	if v == nil {
		return
	}
	return *v, true
}

// OldSuccess returns the old "success" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldSuccess(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuccess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuccess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuccess: %w", err)
	}
	return oldValue.Success, nil
}

// ResetSuccess resets all changes to the "success" field.
func (m *SubscribeReminderMutation) ResetSuccess() {
	m.success = nil
}

// SetDays sets the "days" field.
func (m *SubscribeReminderMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *SubscribeReminderMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *SubscribeReminderMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *SubscribeReminderMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ResetDays resets all changes to the "days" field.
func (m *SubscribeReminderMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
}

// SetPlanName sets the "plan_name" field.
func (m *SubscribeReminderMutation) SetPlanName(s string) {
	m.plan_name = &s
}

// PlanName returns the value of the "plan_name" field in the mutation.
func (m *SubscribeReminderMutation) PlanName() (r string, exists bool) {
	v := m.plan_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanName returns the old "plan_name" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldPlanName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanName: %w", err)
	}
	return oldValue.PlanName, nil
}

// ResetPlanName resets all changes to the "plan_name" field.
func (m *SubscribeReminderMutation) ResetPlanName() {
	m.plan_name = nil
}

// SetDate sets the "date" field.
func (m *SubscribeReminderMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *SubscribeReminderMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *SubscribeReminderMutation) ResetDate() {
	m.date = nil
}

// SetFee sets the "fee" field.
func (m *SubscribeReminderMutation) SetFee(f float64) {
	m.fee = &f
	m.addfee = nil
}

// Fee returns the value of the "fee" field in the mutation.
func (m *SubscribeReminderMutation) Fee() (r float64, exists bool) {
	v := m.fee
	if v == nil {
		return
	}
	return *v, true
}

// OldFee returns the old "fee" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldFee(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFee: %w", err)
	}
	return oldValue.Fee, nil
}

// AddFee adds f to the "fee" field.
func (m *SubscribeReminderMutation) AddFee(f float64) {
	if m.addfee != nil {
		*m.addfee += f
	} else {
		m.addfee = &f
	}
}

// AddedFee returns the value that was added to the "fee" field in this mutation.
func (m *SubscribeReminderMutation) AddedFee() (r float64, exists bool) {
	v := m.addfee
	if v == nil {
		return
	}
	return *v, true
}

// ResetFee resets all changes to the "fee" field.
func (m *SubscribeReminderMutation) ResetFee() {
	m.fee = nil
	m.addfee = nil
}

// SetFeeFormula sets the "fee_formula" field.
func (m *SubscribeReminderMutation) SetFeeFormula(s string) {
	m.fee_formula = &s
}

// FeeFormula returns the value of the "fee_formula" field in the mutation.
func (m *SubscribeReminderMutation) FeeFormula() (r string, exists bool) {
	v := m.fee_formula
	if v == nil {
		return
	}
	return *v, true
}

// OldFeeFormula returns the old "fee_formula" field's value of the SubscribeReminder entity.
// If the SubscribeReminder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscribeReminderMutation) OldFeeFormula(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFeeFormula is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFeeFormula requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFeeFormula: %w", err)
	}
	return oldValue.FeeFormula, nil
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (m *SubscribeReminderMutation) ClearFeeFormula() {
	m.fee_formula = nil
	m.clearedFields[subscribereminder.FieldFeeFormula] = struct{}{}
}

// FeeFormulaCleared returns if the "fee_formula" field was cleared in this mutation.
func (m *SubscribeReminderMutation) FeeFormulaCleared() bool {
	_, ok := m.clearedFields[subscribereminder.FieldFeeFormula]
	return ok
}

// ResetFeeFormula resets all changes to the "fee_formula" field.
func (m *SubscribeReminderMutation) ResetFeeFormula() {
	m.fee_formula = nil
	delete(m.clearedFields, subscribereminder.FieldFeeFormula)
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *SubscribeReminderMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *SubscribeReminderMutation) SubscribeCleared() bool {
	return m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *SubscribeReminderMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *SubscribeReminderMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *SubscribeReminderMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *SubscribeReminderMutation) PlanCleared() bool {
	return m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *SubscribeReminderMutation) PlanIDs() (ids []uint64) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *SubscribeReminderMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// Where appends a list predicates to the SubscribeReminderMutation builder.
func (m *SubscribeReminderMutation) Where(ps ...predicate.SubscribeReminder) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SubscribeReminderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SubscribeReminder).
func (m *SubscribeReminderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscribeReminderMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, subscribereminder.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, subscribereminder.FieldUpdatedAt)
	}
	if m.subscribe != nil {
		fields = append(fields, subscribereminder.FieldSubscribeID)
	}
	if m.plan != nil {
		fields = append(fields, subscribereminder.FieldPlanID)
	}
	if m._type != nil {
		fields = append(fields, subscribereminder.FieldType)
	}
	if m.phone != nil {
		fields = append(fields, subscribereminder.FieldPhone)
	}
	if m.name != nil {
		fields = append(fields, subscribereminder.FieldName)
	}
	if m.success != nil {
		fields = append(fields, subscribereminder.FieldSuccess)
	}
	if m.days != nil {
		fields = append(fields, subscribereminder.FieldDays)
	}
	if m.plan_name != nil {
		fields = append(fields, subscribereminder.FieldPlanName)
	}
	if m.date != nil {
		fields = append(fields, subscribereminder.FieldDate)
	}
	if m.fee != nil {
		fields = append(fields, subscribereminder.FieldFee)
	}
	if m.fee_formula != nil {
		fields = append(fields, subscribereminder.FieldFeeFormula)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscribeReminderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscribereminder.FieldCreatedAt:
		return m.CreatedAt()
	case subscribereminder.FieldUpdatedAt:
		return m.UpdatedAt()
	case subscribereminder.FieldSubscribeID:
		return m.SubscribeID()
	case subscribereminder.FieldPlanID:
		return m.PlanID()
	case subscribereminder.FieldType:
		return m.GetType()
	case subscribereminder.FieldPhone:
		return m.Phone()
	case subscribereminder.FieldName:
		return m.Name()
	case subscribereminder.FieldSuccess:
		return m.Success()
	case subscribereminder.FieldDays:
		return m.Days()
	case subscribereminder.FieldPlanName:
		return m.PlanName()
	case subscribereminder.FieldDate:
		return m.Date()
	case subscribereminder.FieldFee:
		return m.Fee()
	case subscribereminder.FieldFeeFormula:
		return m.FeeFormula()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscribeReminderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscribereminder.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case subscribereminder.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case subscribereminder.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case subscribereminder.FieldPlanID:
		return m.OldPlanID(ctx)
	case subscribereminder.FieldType:
		return m.OldType(ctx)
	case subscribereminder.FieldPhone:
		return m.OldPhone(ctx)
	case subscribereminder.FieldName:
		return m.OldName(ctx)
	case subscribereminder.FieldSuccess:
		return m.OldSuccess(ctx)
	case subscribereminder.FieldDays:
		return m.OldDays(ctx)
	case subscribereminder.FieldPlanName:
		return m.OldPlanName(ctx)
	case subscribereminder.FieldDate:
		return m.OldDate(ctx)
	case subscribereminder.FieldFee:
		return m.OldFee(ctx)
	case subscribereminder.FieldFeeFormula:
		return m.OldFeeFormula(ctx)
	}
	return nil, fmt.Errorf("unknown SubscribeReminder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeReminderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscribereminder.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case subscribereminder.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case subscribereminder.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case subscribereminder.FieldPlanID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case subscribereminder.FieldType:
		v, ok := value.(subscribereminder.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case subscribereminder.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case subscribereminder.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case subscribereminder.FieldSuccess:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuccess(v)
		return nil
	case subscribereminder.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	case subscribereminder.FieldPlanName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanName(v)
		return nil
	case subscribereminder.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case subscribereminder.FieldFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFee(v)
		return nil
	case subscribereminder.FieldFeeFormula:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFeeFormula(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscribeReminderMutation) AddedFields() []string {
	var fields []string
	if m.adddays != nil {
		fields = append(fields, subscribereminder.FieldDays)
	}
	if m.addfee != nil {
		fields = append(fields, subscribereminder.FieldFee)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscribeReminderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case subscribereminder.FieldDays:
		return m.AddedDays()
	case subscribereminder.FieldFee:
		return m.AddedFee()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscribeReminderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case subscribereminder.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	case subscribereminder.FieldFee:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFee(v)
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscribeReminderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(subscribereminder.FieldFeeFormula) {
		fields = append(fields, subscribereminder.FieldFeeFormula)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscribeReminderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscribeReminderMutation) ClearField(name string) error {
	switch name {
	case subscribereminder.FieldFeeFormula:
		m.ClearFeeFormula()
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscribeReminderMutation) ResetField(name string) error {
	switch name {
	case subscribereminder.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case subscribereminder.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case subscribereminder.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case subscribereminder.FieldPlanID:
		m.ResetPlanID()
		return nil
	case subscribereminder.FieldType:
		m.ResetType()
		return nil
	case subscribereminder.FieldPhone:
		m.ResetPhone()
		return nil
	case subscribereminder.FieldName:
		m.ResetName()
		return nil
	case subscribereminder.FieldSuccess:
		m.ResetSuccess()
		return nil
	case subscribereminder.FieldDays:
		m.ResetDays()
		return nil
	case subscribereminder.FieldPlanName:
		m.ResetPlanName()
		return nil
	case subscribereminder.FieldDate:
		m.ResetDate()
		return nil
	case subscribereminder.FieldFee:
		m.ResetFee()
		return nil
	case subscribereminder.FieldFeeFormula:
		m.ResetFeeFormula()
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscribeReminderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.subscribe != nil {
		edges = append(edges, subscribereminder.EdgeSubscribe)
	}
	if m.plan != nil {
		edges = append(edges, subscribereminder.EdgePlan)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscribeReminderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscribereminder.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case subscribereminder.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscribeReminderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscribeReminderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscribeReminderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubscribe {
		edges = append(edges, subscribereminder.EdgeSubscribe)
	}
	if m.clearedplan {
		edges = append(edges, subscribereminder.EdgePlan)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscribeReminderMutation) EdgeCleared(name string) bool {
	switch name {
	case subscribereminder.EdgeSubscribe:
		return m.clearedsubscribe
	case subscribereminder.EdgePlan:
		return m.clearedplan
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscribeReminderMutation) ClearEdge(name string) error {
	switch name {
	case subscribereminder.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case subscribereminder.EdgePlan:
		m.ClearPlan()
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscribeReminderMutation) ResetEdge(name string) error {
	switch name {
	case subscribereminder.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case subscribereminder.EdgePlan:
		m.ResetPlan()
		return nil
	}
	return fmt.Errorf("unknown SubscribeReminder edge %s", name)
}

