// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribeCreate is the builder for creating a Subscribe entity.
type SubscribeCreate struct {
	config
	mutation *SubscribeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscribeCreate) SetCreatedAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableCreatedAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscribeCreate) SetUpdatedAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableUpdatedAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubscribeCreate) SetDeletedAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableDeletedAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetCreator sets the "creator" field.
func (sc *SubscribeCreate) SetCreator(m *model.Modifier) *SubscribeCreate {
	sc.mutation.SetCreator(m)
	return sc
}

// SetLastModifier sets the "last_modifier" field.
func (sc *SubscribeCreate) SetLastModifier(m *model.Modifier) *SubscribeCreate {
	sc.mutation.SetLastModifier(m)
	return sc
}

// SetRemark sets the "remark" field.
func (sc *SubscribeCreate) SetRemark(s string) *SubscribeCreate {
	sc.mutation.SetRemark(s)
	return sc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableRemark(s *string) *SubscribeCreate {
	if s != nil {
		sc.SetRemark(*s)
	}
	return sc
}

// SetPlanID sets the "plan_id" field.
func (sc *SubscribeCreate) SetPlanID(u uint64) *SubscribeCreate {
	sc.mutation.SetPlanID(u)
	return sc
}

// SetEmployeeID sets the "employee_id" field.
func (sc *SubscribeCreate) SetEmployeeID(u uint64) *SubscribeCreate {
	sc.mutation.SetEmployeeID(u)
	return sc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableEmployeeID(u *uint64) *SubscribeCreate {
	if u != nil {
		sc.SetEmployeeID(*u)
	}
	return sc
}

// SetCityID sets the "city_id" field.
func (sc *SubscribeCreate) SetCityID(u uint64) *SubscribeCreate {
	sc.mutation.SetCityID(u)
	return sc
}

// SetRiderID sets the "rider_id" field.
func (sc *SubscribeCreate) SetRiderID(u uint64) *SubscribeCreate {
	sc.mutation.SetRiderID(u)
	return sc
}

// SetInitialOrderID sets the "initial_order_id" field.
func (sc *SubscribeCreate) SetInitialOrderID(u uint64) *SubscribeCreate {
	sc.mutation.SetInitialOrderID(u)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubscribeCreate) SetStatus(u uint8) *SubscribeCreate {
	sc.mutation.SetStatus(u)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableStatus(u *uint8) *SubscribeCreate {
	if u != nil {
		sc.SetStatus(*u)
	}
	return sc
}

// SetType sets the "type" field.
func (sc *SubscribeCreate) SetType(u uint) *SubscribeCreate {
	sc.mutation.SetType(u)
	return sc
}

// SetVoltage sets the "voltage" field.
func (sc *SubscribeCreate) SetVoltage(f float64) *SubscribeCreate {
	sc.mutation.SetVoltage(f)
	return sc
}

// SetInitialDays sets the "initial_days" field.
func (sc *SubscribeCreate) SetInitialDays(i int) *SubscribeCreate {
	sc.mutation.SetInitialDays(i)
	return sc
}

// SetNillableInitialDays sets the "initial_days" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableInitialDays(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetInitialDays(*i)
	}
	return sc
}

// SetAlterDays sets the "alter_days" field.
func (sc *SubscribeCreate) SetAlterDays(i int) *SubscribeCreate {
	sc.mutation.SetAlterDays(i)
	return sc
}

// SetNillableAlterDays sets the "alter_days" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableAlterDays(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetAlterDays(*i)
	}
	return sc
}

// SetPauseDays sets the "pause_days" field.
func (sc *SubscribeCreate) SetPauseDays(i int) *SubscribeCreate {
	sc.mutation.SetPauseDays(i)
	return sc
}

// SetNillablePauseDays sets the "pause_days" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillablePauseDays(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetPauseDays(*i)
	}
	return sc
}

// SetRenewalDays sets the "renewal_days" field.
func (sc *SubscribeCreate) SetRenewalDays(i int) *SubscribeCreate {
	sc.mutation.SetRenewalDays(i)
	return sc
}

// SetNillableRenewalDays sets the "renewal_days" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableRenewalDays(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetRenewalDays(*i)
	}
	return sc
}

// SetOverdueDays sets the "overdue_days" field.
func (sc *SubscribeCreate) SetOverdueDays(i int) *SubscribeCreate {
	sc.mutation.SetOverdueDays(i)
	return sc
}

// SetNillableOverdueDays sets the "overdue_days" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableOverdueDays(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetOverdueDays(*i)
	}
	return sc
}

// SetRemaining sets the "remaining" field.
func (sc *SubscribeCreate) SetRemaining(i int) *SubscribeCreate {
	sc.mutation.SetRemaining(i)
	return sc
}

// SetNillableRemaining sets the "remaining" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableRemaining(i *int) *SubscribeCreate {
	if i != nil {
		sc.SetRemaining(*i)
	}
	return sc
}

// SetPausedAt sets the "paused_at" field.
func (sc *SubscribeCreate) SetPausedAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetPausedAt(t)
	return sc
}

// SetNillablePausedAt sets the "paused_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillablePausedAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetPausedAt(*t)
	}
	return sc
}

// SetStartAt sets the "start_at" field.
func (sc *SubscribeCreate) SetStartAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetStartAt(t)
	return sc
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableStartAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetStartAt(*t)
	}
	return sc
}

// SetEndAt sets the "end_at" field.
func (sc *SubscribeCreate) SetEndAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetEndAt(t)
	return sc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableEndAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetEndAt(*t)
	}
	return sc
}

// SetRefundAt sets the "refund_at" field.
func (sc *SubscribeCreate) SetRefundAt(t time.Time) *SubscribeCreate {
	sc.mutation.SetRefundAt(t)
	return sc
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (sc *SubscribeCreate) SetNillableRefundAt(t *time.Time) *SubscribeCreate {
	if t != nil {
		sc.SetRefundAt(*t)
	}
	return sc
}

// SetPlan sets the "plan" edge to the Plan entity.
func (sc *SubscribeCreate) SetPlan(p *Plan) *SubscribeCreate {
	return sc.SetPlanID(p.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (sc *SubscribeCreate) SetEmployee(e *Employee) *SubscribeCreate {
	return sc.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (sc *SubscribeCreate) SetCity(c *City) *SubscribeCreate {
	return sc.SetCityID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (sc *SubscribeCreate) SetRider(r *Rider) *SubscribeCreate {
	return sc.SetRiderID(r.ID)
}

// AddPauseIDs adds the "pauses" edge to the SubscribePause entity by IDs.
func (sc *SubscribeCreate) AddPauseIDs(ids ...uint64) *SubscribeCreate {
	sc.mutation.AddPauseIDs(ids...)
	return sc
}

// AddPauses adds the "pauses" edges to the SubscribePause entity.
func (sc *SubscribeCreate) AddPauses(s ...*SubscribePause) *SubscribeCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddPauseIDs(ids...)
}

// AddAlterIDs adds the "alters" edge to the SubscribeAlter entity by IDs.
func (sc *SubscribeCreate) AddAlterIDs(ids ...uint64) *SubscribeCreate {
	sc.mutation.AddAlterIDs(ids...)
	return sc
}

// AddAlters adds the "alters" edges to the SubscribeAlter entity.
func (sc *SubscribeCreate) AddAlters(s ...*SubscribeAlter) *SubscribeCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddAlterIDs(ids...)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (sc *SubscribeCreate) AddOrderIDs(ids ...uint64) *SubscribeCreate {
	sc.mutation.AddOrderIDs(ids...)
	return sc
}

// AddOrders adds the "orders" edges to the Order entity.
func (sc *SubscribeCreate) AddOrders(o ...*Order) *SubscribeCreate {
	ids := make([]uint64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return sc.AddOrderIDs(ids...)
}

// SetInitialOrder sets the "initial_order" edge to the Order entity.
func (sc *SubscribeCreate) SetInitialOrder(o *Order) *SubscribeCreate {
	return sc.SetInitialOrderID(o.ID)
}

// Mutation returns the SubscribeMutation object of the builder.
func (sc *SubscribeCreate) Mutation() *SubscribeMutation {
	return sc.mutation
}

// Save creates the Subscribe in the database.
func (sc *SubscribeCreate) Save(ctx context.Context) (*Subscribe, error) {
	var (
		err  error
		node *Subscribe
	)
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Subscribe)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscribeCreate) SaveX(ctx context.Context) *Subscribe {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscribeCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscribeCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscribeCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if subscribe.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if subscribe.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribe.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribe.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := subscribe.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.InitialDays(); !ok {
		v := subscribe.DefaultInitialDays
		sc.mutation.SetInitialDays(v)
	}
	if _, ok := sc.mutation.AlterDays(); !ok {
		v := subscribe.DefaultAlterDays
		sc.mutation.SetAlterDays(v)
	}
	if _, ok := sc.mutation.PauseDays(); !ok {
		v := subscribe.DefaultPauseDays
		sc.mutation.SetPauseDays(v)
	}
	if _, ok := sc.mutation.RenewalDays(); !ok {
		v := subscribe.DefaultRenewalDays
		sc.mutation.SetRenewalDays(v)
	}
	if _, ok := sc.mutation.OverdueDays(); !ok {
		v := subscribe.DefaultOverdueDays
		sc.mutation.SetOverdueDays(v)
	}
	if _, ok := sc.mutation.Remaining(); !ok {
		v := subscribe.DefaultRemaining
		sc.mutation.SetRemaining(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscribeCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Subscribe.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Subscribe.updated_at"`)}
	}
	if _, ok := sc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`ent: missing required field "Subscribe.plan_id"`)}
	}
	if _, ok := sc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city_id", err: errors.New(`ent: missing required field "Subscribe.city_id"`)}
	}
	if _, ok := sc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "Subscribe.rider_id"`)}
	}
	if _, ok := sc.mutation.InitialOrderID(); !ok {
		return &ValidationError{Name: "initial_order_id", err: errors.New(`ent: missing required field "Subscribe.initial_order_id"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Subscribe.status"`)}
	}
	if _, ok := sc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Subscribe.type"`)}
	}
	if _, ok := sc.mutation.Voltage(); !ok {
		return &ValidationError{Name: "voltage", err: errors.New(`ent: missing required field "Subscribe.voltage"`)}
	}
	if _, ok := sc.mutation.InitialDays(); !ok {
		return &ValidationError{Name: "initial_days", err: errors.New(`ent: missing required field "Subscribe.initial_days"`)}
	}
	if _, ok := sc.mutation.AlterDays(); !ok {
		return &ValidationError{Name: "alter_days", err: errors.New(`ent: missing required field "Subscribe.alter_days"`)}
	}
	if _, ok := sc.mutation.PauseDays(); !ok {
		return &ValidationError{Name: "pause_days", err: errors.New(`ent: missing required field "Subscribe.pause_days"`)}
	}
	if _, ok := sc.mutation.RenewalDays(); !ok {
		return &ValidationError{Name: "renewal_days", err: errors.New(`ent: missing required field "Subscribe.renewal_days"`)}
	}
	if _, ok := sc.mutation.OverdueDays(); !ok {
		return &ValidationError{Name: "overdue_days", err: errors.New(`ent: missing required field "Subscribe.overdue_days"`)}
	}
	if _, ok := sc.mutation.Remaining(); !ok {
		return &ValidationError{Name: "remaining", err: errors.New(`ent: missing required field "Subscribe.remaining"`)}
	}
	if _, ok := sc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required edge "Subscribe.plan"`)}
	}
	if _, ok := sc.mutation.CityID(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required edge "Subscribe.city"`)}
	}
	if _, ok := sc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "Subscribe.rider"`)}
	}
	if _, ok := sc.mutation.InitialOrderID(); !ok {
		return &ValidationError{Name: "initial_order", err: errors.New(`ent: missing required edge "Subscribe.initial_order"`)}
	}
	return nil
}

func (sc *SubscribeCreate) sqlSave(ctx context.Context) (*Subscribe, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (sc *SubscribeCreate) createSpec() (*Subscribe, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscribe{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscribe.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribe.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribe.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := sc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribe.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: subscribe.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: subscribe.FieldType,
		})
		_node.Type = value
	}
	if value, ok := sc.mutation.Voltage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: subscribe.FieldVoltage,
		})
		_node.Voltage = value
	}
	if value, ok := sc.mutation.InitialDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldInitialDays,
		})
		_node.InitialDays = value
	}
	if value, ok := sc.mutation.AlterDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldAlterDays,
		})
		_node.AlterDays = value
	}
	if value, ok := sc.mutation.PauseDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldPauseDays,
		})
		_node.PauseDays = value
	}
	if value, ok := sc.mutation.RenewalDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldRenewalDays,
		})
		_node.RenewalDays = value
	}
	if value, ok := sc.mutation.OverdueDays(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldOverdueDays,
		})
		_node.OverdueDays = value
	}
	if value, ok := sc.mutation.Remaining(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribe.FieldRemaining,
		})
		_node.Remaining = value
	}
	if value, ok := sc.mutation.PausedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldPausedAt,
		})
		_node.PausedAt = &value
	}
	if value, ok := sc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldStartAt,
		})
		_node.StartAt = &value
	}
	if value, ok := sc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldEndAt,
		})
		_node.EndAt = &value
	}
	if value, ok := sc.mutation.RefundAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribe.FieldRefundAt,
		})
		_node.RefundAt = &value
	}
	if nodes := sc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.PlanTable,
			Columns: []string{subscribe.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.EmployeeTable,
			Columns: []string{subscribe.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.CityTable,
			Columns: []string{subscribe.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribe.RiderTable,
			Columns: []string{subscribe.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PausesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.PausesTable,
			Columns: []string{subscribe.PausesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribepause.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AltersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.AltersTable,
			Columns: []string{subscribe.AltersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribealter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribe.OrdersTable,
			Columns: []string{subscribe.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.InitialOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribe.InitialOrderTable,
			Columns: []string{subscribe.InitialOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InitialOrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscribe.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (sc *SubscribeCreate) OnConflict(opts ...sql.ConflictOption) *SubscribeUpsertOne {
	sc.conflict = opts
	return &SubscribeUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscribe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (sc *SubscribeCreate) OnConflictColumns(columns ...string) *SubscribeUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubscribeUpsertOne{
		create: sc,
	}
}

type (
	// SubscribeUpsertOne is the builder for "upsert"-ing
	//  one Subscribe node.
	SubscribeUpsertOne struct {
		create *SubscribeCreate
	}

	// SubscribeUpsert is the "OnConflict" setter.
	SubscribeUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeUpsert) SetCreatedAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateCreatedAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeUpsert) SetUpdatedAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateUpdatedAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeUpsert) SetDeletedAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateDeletedAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeUpsert) ClearDeletedAt() *SubscribeUpsert {
	u.SetNull(subscribe.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *SubscribeUpsert) SetCreator(v *model.Modifier) *SubscribeUpsert {
	u.Set(subscribe.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateCreator() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeUpsert) ClearCreator() *SubscribeUpsert {
	u.SetNull(subscribe.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeUpsert) SetLastModifier(v *model.Modifier) *SubscribeUpsert {
	u.Set(subscribe.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateLastModifier() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeUpsert) ClearLastModifier() *SubscribeUpsert {
	u.SetNull(subscribe.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *SubscribeUpsert) SetRemark(v string) *SubscribeUpsert {
	u.Set(subscribe.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateRemark() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeUpsert) ClearRemark() *SubscribeUpsert {
	u.SetNull(subscribe.FieldRemark)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeUpsert) SetPlanID(v uint64) *SubscribeUpsert {
	u.Set(subscribe.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdatePlanID() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldPlanID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribeUpsert) SetEmployeeID(v uint64) *SubscribeUpsert {
	u.Set(subscribe.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateEmployeeID() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribeUpsert) ClearEmployeeID() *SubscribeUpsert {
	u.SetNull(subscribe.FieldEmployeeID)
	return u
}

// SetCityID sets the "city_id" field.
func (u *SubscribeUpsert) SetCityID(v uint64) *SubscribeUpsert {
	u.Set(subscribe.FieldCityID, v)
	return u
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateCityID() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldCityID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeUpsert) SetRiderID(v uint64) *SubscribeUpsert {
	u.Set(subscribe.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateRiderID() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldRiderID)
	return u
}

// SetInitialOrderID sets the "initial_order_id" field.
func (u *SubscribeUpsert) SetInitialOrderID(v uint64) *SubscribeUpsert {
	u.Set(subscribe.FieldInitialOrderID, v)
	return u
}

// UpdateInitialOrderID sets the "initial_order_id" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateInitialOrderID() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldInitialOrderID)
	return u
}

// SetStatus sets the "status" field.
func (u *SubscribeUpsert) SetStatus(v uint8) *SubscribeUpsert {
	u.Set(subscribe.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateStatus() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *SubscribeUpsert) AddStatus(v uint8) *SubscribeUpsert {
	u.Add(subscribe.FieldStatus, v)
	return u
}

// SetType sets the "type" field.
func (u *SubscribeUpsert) SetType(v uint) *SubscribeUpsert {
	u.Set(subscribe.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateType() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *SubscribeUpsert) AddType(v uint) *SubscribeUpsert {
	u.Add(subscribe.FieldType, v)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *SubscribeUpsert) SetVoltage(v float64) *SubscribeUpsert {
	u.Set(subscribe.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateVoltage() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *SubscribeUpsert) AddVoltage(v float64) *SubscribeUpsert {
	u.Add(subscribe.FieldVoltage, v)
	return u
}

// SetInitialDays sets the "initial_days" field.
func (u *SubscribeUpsert) SetInitialDays(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldInitialDays, v)
	return u
}

// UpdateInitialDays sets the "initial_days" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateInitialDays() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldInitialDays)
	return u
}

// AddInitialDays adds v to the "initial_days" field.
func (u *SubscribeUpsert) AddInitialDays(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldInitialDays, v)
	return u
}

// SetAlterDays sets the "alter_days" field.
func (u *SubscribeUpsert) SetAlterDays(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldAlterDays, v)
	return u
}

// UpdateAlterDays sets the "alter_days" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateAlterDays() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldAlterDays)
	return u
}

// AddAlterDays adds v to the "alter_days" field.
func (u *SubscribeUpsert) AddAlterDays(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldAlterDays, v)
	return u
}

// SetPauseDays sets the "pause_days" field.
func (u *SubscribeUpsert) SetPauseDays(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldPauseDays, v)
	return u
}

// UpdatePauseDays sets the "pause_days" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdatePauseDays() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldPauseDays)
	return u
}

// AddPauseDays adds v to the "pause_days" field.
func (u *SubscribeUpsert) AddPauseDays(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldPauseDays, v)
	return u
}

// SetRenewalDays sets the "renewal_days" field.
func (u *SubscribeUpsert) SetRenewalDays(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldRenewalDays, v)
	return u
}

// UpdateRenewalDays sets the "renewal_days" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateRenewalDays() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldRenewalDays)
	return u
}

// AddRenewalDays adds v to the "renewal_days" field.
func (u *SubscribeUpsert) AddRenewalDays(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldRenewalDays, v)
	return u
}

// SetOverdueDays sets the "overdue_days" field.
func (u *SubscribeUpsert) SetOverdueDays(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldOverdueDays, v)
	return u
}

// UpdateOverdueDays sets the "overdue_days" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateOverdueDays() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldOverdueDays)
	return u
}

// AddOverdueDays adds v to the "overdue_days" field.
func (u *SubscribeUpsert) AddOverdueDays(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldOverdueDays, v)
	return u
}

// SetRemaining sets the "remaining" field.
func (u *SubscribeUpsert) SetRemaining(v int) *SubscribeUpsert {
	u.Set(subscribe.FieldRemaining, v)
	return u
}

// UpdateRemaining sets the "remaining" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateRemaining() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldRemaining)
	return u
}

// AddRemaining adds v to the "remaining" field.
func (u *SubscribeUpsert) AddRemaining(v int) *SubscribeUpsert {
	u.Add(subscribe.FieldRemaining, v)
	return u
}

// SetPausedAt sets the "paused_at" field.
func (u *SubscribeUpsert) SetPausedAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldPausedAt, v)
	return u
}

// UpdatePausedAt sets the "paused_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdatePausedAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldPausedAt)
	return u
}

// ClearPausedAt clears the value of the "paused_at" field.
func (u *SubscribeUpsert) ClearPausedAt() *SubscribeUpsert {
	u.SetNull(subscribe.FieldPausedAt)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeUpsert) SetStartAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateStartAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "start_at" field.
func (u *SubscribeUpsert) ClearStartAt() *SubscribeUpsert {
	u.SetNull(subscribe.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeUpsert) SetEndAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateEndAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeUpsert) ClearEndAt() *SubscribeUpsert {
	u.SetNull(subscribe.FieldEndAt)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *SubscribeUpsert) SetRefundAt(v time.Time) *SubscribeUpsert {
	u.Set(subscribe.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *SubscribeUpsert) UpdateRefundAt() *SubscribeUpsert {
	u.SetExcluded(subscribe.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *SubscribeUpsert) ClearRefundAt() *SubscribeUpsert {
	u.SetNull(subscribe.FieldRefundAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Subscribe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SubscribeUpsertOne) UpdateNewValues() *SubscribeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscribe.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(subscribe.FieldCreator)
		}
		if _, exists := u.create.mutation.GetType(); exists {
			s.SetIgnore(subscribe.FieldType)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Subscribe.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SubscribeUpsertOne) Ignore() *SubscribeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeUpsertOne) DoNothing() *SubscribeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeCreate.OnConflict
// documentation for more info.
func (u *SubscribeUpsertOne) Update(set func(*SubscribeUpsert)) *SubscribeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeUpsertOne) SetCreatedAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateCreatedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeUpsertOne) SetUpdatedAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateUpdatedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeUpsertOne) SetDeletedAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateDeletedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeUpsertOne) ClearDeletedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribeUpsertOne) SetCreator(v *model.Modifier) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateCreator() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeUpsertOne) ClearCreator() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeUpsertOne) SetLastModifier(v *model.Modifier) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateLastModifier() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeUpsertOne) ClearLastModifier() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeUpsertOne) SetRemark(v string) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateRemark() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeUpsertOne) ClearRemark() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearRemark()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeUpsertOne) SetPlanID(v uint64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdatePlanID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePlanID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribeUpsertOne) SetEmployeeID(v uint64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateEmployeeID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribeUpsertOne) ClearEmployeeID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearEmployeeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *SubscribeUpsertOne) SetCityID(v uint64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateCityID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeUpsertOne) SetRiderID(v uint64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateRiderID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRiderID()
	})
}

// SetInitialOrderID sets the "initial_order_id" field.
func (u *SubscribeUpsertOne) SetInitialOrderID(v uint64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetInitialOrderID(v)
	})
}

// UpdateInitialOrderID sets the "initial_order_id" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateInitialOrderID() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateInitialOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *SubscribeUpsertOne) SetStatus(v uint8) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SubscribeUpsertOne) AddStatus(v uint8) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateStatus() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *SubscribeUpsertOne) SetType(v uint) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *SubscribeUpsertOne) AddType(v uint) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateType() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateType()
	})
}

// SetVoltage sets the "voltage" field.
func (u *SubscribeUpsertOne) SetVoltage(v float64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *SubscribeUpsertOne) AddVoltage(v float64) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateVoltage() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateVoltage()
	})
}

// SetInitialDays sets the "initial_days" field.
func (u *SubscribeUpsertOne) SetInitialDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetInitialDays(v)
	})
}

// AddInitialDays adds v to the "initial_days" field.
func (u *SubscribeUpsertOne) AddInitialDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddInitialDays(v)
	})
}

// UpdateInitialDays sets the "initial_days" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateInitialDays() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateInitialDays()
	})
}

// SetAlterDays sets the "alter_days" field.
func (u *SubscribeUpsertOne) SetAlterDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetAlterDays(v)
	})
}

// AddAlterDays adds v to the "alter_days" field.
func (u *SubscribeUpsertOne) AddAlterDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddAlterDays(v)
	})
}

// UpdateAlterDays sets the "alter_days" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateAlterDays() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateAlterDays()
	})
}

// SetPauseDays sets the "pause_days" field.
func (u *SubscribeUpsertOne) SetPauseDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPauseDays(v)
	})
}

// AddPauseDays adds v to the "pause_days" field.
func (u *SubscribeUpsertOne) AddPauseDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddPauseDays(v)
	})
}

// UpdatePauseDays sets the "pause_days" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdatePauseDays() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePauseDays()
	})
}

// SetRenewalDays sets the "renewal_days" field.
func (u *SubscribeUpsertOne) SetRenewalDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRenewalDays(v)
	})
}

// AddRenewalDays adds v to the "renewal_days" field.
func (u *SubscribeUpsertOne) AddRenewalDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddRenewalDays(v)
	})
}

// UpdateRenewalDays sets the "renewal_days" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateRenewalDays() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRenewalDays()
	})
}

// SetOverdueDays sets the "overdue_days" field.
func (u *SubscribeUpsertOne) SetOverdueDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetOverdueDays(v)
	})
}

// AddOverdueDays adds v to the "overdue_days" field.
func (u *SubscribeUpsertOne) AddOverdueDays(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddOverdueDays(v)
	})
}

// UpdateOverdueDays sets the "overdue_days" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateOverdueDays() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateOverdueDays()
	})
}

// SetRemaining sets the "remaining" field.
func (u *SubscribeUpsertOne) SetRemaining(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRemaining(v)
	})
}

// AddRemaining adds v to the "remaining" field.
func (u *SubscribeUpsertOne) AddRemaining(v int) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddRemaining(v)
	})
}

// UpdateRemaining sets the "remaining" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateRemaining() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRemaining()
	})
}

// SetPausedAt sets the "paused_at" field.
func (u *SubscribeUpsertOne) SetPausedAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPausedAt(v)
	})
}

// UpdatePausedAt sets the "paused_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdatePausedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePausedAt()
	})
}

// ClearPausedAt clears the value of the "paused_at" field.
func (u *SubscribeUpsertOne) ClearPausedAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearPausedAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeUpsertOne) SetStartAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateStartAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *SubscribeUpsertOne) ClearStartAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeUpsertOne) SetEndAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateEndAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeUpsertOne) ClearEndAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearEndAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *SubscribeUpsertOne) SetRefundAt(v time.Time) *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *SubscribeUpsertOne) UpdateRefundAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *SubscribeUpsertOne) ClearRefundAt() *SubscribeUpsertOne {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *SubscribeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscribeUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscribeUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscribeCreateBulk is the builder for creating many Subscribe entities in bulk.
type SubscribeCreateBulk struct {
	config
	builders []*SubscribeCreate
	conflict []sql.ConflictOption
}

// Save creates the Subscribe entities in the database.
func (scb *SubscribeCreateBulk) Save(ctx context.Context) ([]*Subscribe, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscribe, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscribeCreateBulk) SaveX(ctx context.Context) []*Subscribe {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscribeCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscribeCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscribe.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (scb *SubscribeCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscribeUpsertBulk {
	scb.conflict = opts
	return &SubscribeUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscribe.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (scb *SubscribeCreateBulk) OnConflictColumns(columns ...string) *SubscribeUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubscribeUpsertBulk{
		create: scb,
	}
}

// SubscribeUpsertBulk is the builder for "upsert"-ing
// a bulk of Subscribe nodes.
type SubscribeUpsertBulk struct {
	create *SubscribeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subscribe.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SubscribeUpsertBulk) UpdateNewValues() *SubscribeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscribe.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(subscribe.FieldCreator)
			}
			if _, exists := b.mutation.GetType(); exists {
				s.SetIgnore(subscribe.FieldType)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscribe.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SubscribeUpsertBulk) Ignore() *SubscribeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeUpsertBulk) DoNothing() *SubscribeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeCreateBulk.OnConflict
// documentation for more info.
func (u *SubscribeUpsertBulk) Update(set func(*SubscribeUpsert)) *SubscribeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribeUpsertBulk) SetCreatedAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateCreatedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeUpsertBulk) SetUpdatedAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateUpdatedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribeUpsertBulk) SetDeletedAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateDeletedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribeUpsertBulk) ClearDeletedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribeUpsertBulk) SetCreator(v *model.Modifier) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateCreator() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribeUpsertBulk) ClearCreator() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribeUpsertBulk) SetLastModifier(v *model.Modifier) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateLastModifier() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribeUpsertBulk) ClearLastModifier() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribeUpsertBulk) SetRemark(v string) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateRemark() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribeUpsertBulk) ClearRemark() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearRemark()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeUpsertBulk) SetPlanID(v uint64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdatePlanID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePlanID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribeUpsertBulk) SetEmployeeID(v uint64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateEmployeeID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribeUpsertBulk) ClearEmployeeID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearEmployeeID()
	})
}

// SetCityID sets the "city_id" field.
func (u *SubscribeUpsertBulk) SetCityID(v uint64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetCityID(v)
	})
}

// UpdateCityID sets the "city_id" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateCityID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateCityID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeUpsertBulk) SetRiderID(v uint64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateRiderID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRiderID()
	})
}

// SetInitialOrderID sets the "initial_order_id" field.
func (u *SubscribeUpsertBulk) SetInitialOrderID(v uint64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetInitialOrderID(v)
	})
}

// UpdateInitialOrderID sets the "initial_order_id" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateInitialOrderID() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateInitialOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *SubscribeUpsertBulk) SetStatus(v uint8) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *SubscribeUpsertBulk) AddStatus(v uint8) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateStatus() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateStatus()
	})
}

// SetType sets the "type" field.
func (u *SubscribeUpsertBulk) SetType(v uint) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *SubscribeUpsertBulk) AddType(v uint) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateType() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateType()
	})
}

// SetVoltage sets the "voltage" field.
func (u *SubscribeUpsertBulk) SetVoltage(v float64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *SubscribeUpsertBulk) AddVoltage(v float64) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateVoltage() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateVoltage()
	})
}

// SetInitialDays sets the "initial_days" field.
func (u *SubscribeUpsertBulk) SetInitialDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetInitialDays(v)
	})
}

// AddInitialDays adds v to the "initial_days" field.
func (u *SubscribeUpsertBulk) AddInitialDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddInitialDays(v)
	})
}

// UpdateInitialDays sets the "initial_days" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateInitialDays() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateInitialDays()
	})
}

// SetAlterDays sets the "alter_days" field.
func (u *SubscribeUpsertBulk) SetAlterDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetAlterDays(v)
	})
}

// AddAlterDays adds v to the "alter_days" field.
func (u *SubscribeUpsertBulk) AddAlterDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddAlterDays(v)
	})
}

// UpdateAlterDays sets the "alter_days" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateAlterDays() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateAlterDays()
	})
}

// SetPauseDays sets the "pause_days" field.
func (u *SubscribeUpsertBulk) SetPauseDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPauseDays(v)
	})
}

// AddPauseDays adds v to the "pause_days" field.
func (u *SubscribeUpsertBulk) AddPauseDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddPauseDays(v)
	})
}

// UpdatePauseDays sets the "pause_days" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdatePauseDays() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePauseDays()
	})
}

// SetRenewalDays sets the "renewal_days" field.
func (u *SubscribeUpsertBulk) SetRenewalDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRenewalDays(v)
	})
}

// AddRenewalDays adds v to the "renewal_days" field.
func (u *SubscribeUpsertBulk) AddRenewalDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddRenewalDays(v)
	})
}

// UpdateRenewalDays sets the "renewal_days" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateRenewalDays() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRenewalDays()
	})
}

// SetOverdueDays sets the "overdue_days" field.
func (u *SubscribeUpsertBulk) SetOverdueDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetOverdueDays(v)
	})
}

// AddOverdueDays adds v to the "overdue_days" field.
func (u *SubscribeUpsertBulk) AddOverdueDays(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddOverdueDays(v)
	})
}

// UpdateOverdueDays sets the "overdue_days" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateOverdueDays() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateOverdueDays()
	})
}

// SetRemaining sets the "remaining" field.
func (u *SubscribeUpsertBulk) SetRemaining(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRemaining(v)
	})
}

// AddRemaining adds v to the "remaining" field.
func (u *SubscribeUpsertBulk) AddRemaining(v int) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.AddRemaining(v)
	})
}

// UpdateRemaining sets the "remaining" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateRemaining() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRemaining()
	})
}

// SetPausedAt sets the "paused_at" field.
func (u *SubscribeUpsertBulk) SetPausedAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetPausedAt(v)
	})
}

// UpdatePausedAt sets the "paused_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdatePausedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdatePausedAt()
	})
}

// ClearPausedAt clears the value of the "paused_at" field.
func (u *SubscribeUpsertBulk) ClearPausedAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearPausedAt()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribeUpsertBulk) SetStartAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateStartAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "start_at" field.
func (u *SubscribeUpsertBulk) ClearStartAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribeUpsertBulk) SetEndAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateEndAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribeUpsertBulk) ClearEndAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearEndAt()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *SubscribeUpsertBulk) SetRefundAt(v time.Time) *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *SubscribeUpsertBulk) UpdateRefundAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *SubscribeUpsertBulk) ClearRefundAt() *SubscribeUpsertBulk {
	return u.Update(func(s *SubscribeUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *SubscribeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscribeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
