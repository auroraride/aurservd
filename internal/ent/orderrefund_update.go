// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// OrderRefundUpdate is the builder for updating OrderRefund entities.
type OrderRefundUpdate struct {
	config
	hooks    []Hook
	mutation *OrderRefundMutation
}

// Where appends a list predicates to the OrderRefundUpdate builder.
func (oru *OrderRefundUpdate) Where(ps ...predicate.OrderRefund) *OrderRefundUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetUpdatedAt sets the "updated_at" field.
func (oru *OrderRefundUpdate) SetUpdatedAt(t time.Time) *OrderRefundUpdate {
	oru.mutation.SetUpdatedAt(t)
	return oru
}

// SetDeletedAt sets the "deleted_at" field.
func (oru *OrderRefundUpdate) SetDeletedAt(t time.Time) *OrderRefundUpdate {
	oru.mutation.SetDeletedAt(t)
	return oru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableDeletedAt(t *time.Time) *OrderRefundUpdate {
	if t != nil {
		oru.SetDeletedAt(*t)
	}
	return oru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oru *OrderRefundUpdate) ClearDeletedAt() *OrderRefundUpdate {
	oru.mutation.ClearDeletedAt()
	return oru
}

// SetLastModifier sets the "last_modifier" field.
func (oru *OrderRefundUpdate) SetLastModifier(m *model.Modifier) *OrderRefundUpdate {
	oru.mutation.SetLastModifier(m)
	return oru
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (oru *OrderRefundUpdate) ClearLastModifier() *OrderRefundUpdate {
	oru.mutation.ClearLastModifier()
	return oru
}

// SetRemark sets the "remark" field.
func (oru *OrderRefundUpdate) SetRemark(s string) *OrderRefundUpdate {
	oru.mutation.SetRemark(s)
	return oru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableRemark(s *string) *OrderRefundUpdate {
	if s != nil {
		oru.SetRemark(*s)
	}
	return oru
}

// ClearRemark clears the value of the "remark" field.
func (oru *OrderRefundUpdate) ClearRemark() *OrderRefundUpdate {
	oru.mutation.ClearRemark()
	return oru
}

// SetOrderID sets the "order_id" field.
func (oru *OrderRefundUpdate) SetOrderID(u uint64) *OrderRefundUpdate {
	oru.mutation.SetOrderID(u)
	return oru
}

// SetStatus sets the "status" field.
func (oru *OrderRefundUpdate) SetStatus(u uint8) *OrderRefundUpdate {
	oru.mutation.ResetStatus()
	oru.mutation.SetStatus(u)
	return oru
}

// AddStatus adds u to the "status" field.
func (oru *OrderRefundUpdate) AddStatus(u int8) *OrderRefundUpdate {
	oru.mutation.AddStatus(u)
	return oru
}

// SetAmount sets the "amount" field.
func (oru *OrderRefundUpdate) SetAmount(f float64) *OrderRefundUpdate {
	oru.mutation.ResetAmount()
	oru.mutation.SetAmount(f)
	return oru
}

// AddAmount adds f to the "amount" field.
func (oru *OrderRefundUpdate) AddAmount(f float64) *OrderRefundUpdate {
	oru.mutation.AddAmount(f)
	return oru
}

// SetOutRefundNo sets the "out_refund_no" field.
func (oru *OrderRefundUpdate) SetOutRefundNo(s string) *OrderRefundUpdate {
	oru.mutation.SetOutRefundNo(s)
	return oru
}

// SetReason sets the "reason" field.
func (oru *OrderRefundUpdate) SetReason(s string) *OrderRefundUpdate {
	oru.mutation.SetReason(s)
	return oru
}

// SetRefundAt sets the "refund_at" field.
func (oru *OrderRefundUpdate) SetRefundAt(t time.Time) *OrderRefundUpdate {
	oru.mutation.SetRefundAt(t)
	return oru
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (oru *OrderRefundUpdate) SetNillableRefundAt(t *time.Time) *OrderRefundUpdate {
	if t != nil {
		oru.SetRefundAt(*t)
	}
	return oru
}

// ClearRefundAt clears the value of the "refund_at" field.
func (oru *OrderRefundUpdate) ClearRefundAt() *OrderRefundUpdate {
	oru.mutation.ClearRefundAt()
	return oru
}

// SetOrder sets the "order" edge to the Order entity.
func (oru *OrderRefundUpdate) SetOrder(o *Order) *OrderRefundUpdate {
	return oru.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (oru *OrderRefundUpdate) Mutation() *OrderRefundMutation {
	return oru.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oru *OrderRefundUpdate) ClearOrder() *OrderRefundUpdate {
	oru.mutation.ClearOrder()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OrderRefundUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := oru.defaults(); err != nil {
		return 0, err
	}
	if len(oru.hooks) == 0 {
		if err = oru.check(); err != nil {
			return 0, err
		}
		affected, err = oru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderRefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oru.check(); err != nil {
				return 0, err
			}
			oru.mutation = mutation
			affected, err = oru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(oru.hooks) - 1; i >= 0; i-- {
			if oru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OrderRefundUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OrderRefundUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OrderRefundUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oru *OrderRefundUpdate) defaults() error {
	if _, ok := oru.mutation.UpdatedAt(); !ok {
		if orderrefund.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderrefund.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderrefund.UpdateDefaultUpdatedAt()
		oru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oru *OrderRefundUpdate) check() error {
	if _, ok := oru.mutation.OrderID(); oru.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderRefund.order"`)
	}
	return nil
}

func (oru *OrderRefundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderrefund.Table,
			Columns: orderrefund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		},
	}
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldUpdatedAt,
		})
	}
	if value, ok := oru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldDeletedAt,
		})
	}
	if oru.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderrefund.FieldDeletedAt,
		})
	}
	if oru.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderrefund.FieldCreator,
		})
	}
	if value, ok := oru.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderrefund.FieldLastModifier,
		})
	}
	if oru.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderrefund.FieldLastModifier,
		})
	}
	if value, ok := oru.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldRemark,
		})
	}
	if oru.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderrefund.FieldRemark,
		})
	}
	if value, ok := oru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: orderrefund.FieldStatus,
		})
	}
	if value, ok := oru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: orderrefund.FieldStatus,
		})
	}
	if value, ok := oru.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderrefund.FieldAmount,
		})
	}
	if value, ok := oru.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderrefund.FieldAmount,
		})
	}
	if value, ok := oru.mutation.OutRefundNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldOutRefundNo,
		})
	}
	if value, ok := oru.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldReason,
		})
	}
	if value, ok := oru.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldRefundAt,
		})
	}
	if oru.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderrefund.FieldRefundAt,
		})
	}
	if oru.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderRefundUpdateOne is the builder for updating a single OrderRefund entity.
type OrderRefundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderRefundMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (oruo *OrderRefundUpdateOne) SetUpdatedAt(t time.Time) *OrderRefundUpdateOne {
	oruo.mutation.SetUpdatedAt(t)
	return oruo
}

// SetDeletedAt sets the "deleted_at" field.
func (oruo *OrderRefundUpdateOne) SetDeletedAt(t time.Time) *OrderRefundUpdateOne {
	oruo.mutation.SetDeletedAt(t)
	return oruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderRefundUpdateOne {
	if t != nil {
		oruo.SetDeletedAt(*t)
	}
	return oruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oruo *OrderRefundUpdateOne) ClearDeletedAt() *OrderRefundUpdateOne {
	oruo.mutation.ClearDeletedAt()
	return oruo
}

// SetLastModifier sets the "last_modifier" field.
func (oruo *OrderRefundUpdateOne) SetLastModifier(m *model.Modifier) *OrderRefundUpdateOne {
	oruo.mutation.SetLastModifier(m)
	return oruo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (oruo *OrderRefundUpdateOne) ClearLastModifier() *OrderRefundUpdateOne {
	oruo.mutation.ClearLastModifier()
	return oruo
}

// SetRemark sets the "remark" field.
func (oruo *OrderRefundUpdateOne) SetRemark(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetRemark(s)
	return oruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableRemark(s *string) *OrderRefundUpdateOne {
	if s != nil {
		oruo.SetRemark(*s)
	}
	return oruo
}

// ClearRemark clears the value of the "remark" field.
func (oruo *OrderRefundUpdateOne) ClearRemark() *OrderRefundUpdateOne {
	oruo.mutation.ClearRemark()
	return oruo
}

// SetOrderID sets the "order_id" field.
func (oruo *OrderRefundUpdateOne) SetOrderID(u uint64) *OrderRefundUpdateOne {
	oruo.mutation.SetOrderID(u)
	return oruo
}

// SetStatus sets the "status" field.
func (oruo *OrderRefundUpdateOne) SetStatus(u uint8) *OrderRefundUpdateOne {
	oruo.mutation.ResetStatus()
	oruo.mutation.SetStatus(u)
	return oruo
}

// AddStatus adds u to the "status" field.
func (oruo *OrderRefundUpdateOne) AddStatus(u int8) *OrderRefundUpdateOne {
	oruo.mutation.AddStatus(u)
	return oruo
}

// SetAmount sets the "amount" field.
func (oruo *OrderRefundUpdateOne) SetAmount(f float64) *OrderRefundUpdateOne {
	oruo.mutation.ResetAmount()
	oruo.mutation.SetAmount(f)
	return oruo
}

// AddAmount adds f to the "amount" field.
func (oruo *OrderRefundUpdateOne) AddAmount(f float64) *OrderRefundUpdateOne {
	oruo.mutation.AddAmount(f)
	return oruo
}

// SetOutRefundNo sets the "out_refund_no" field.
func (oruo *OrderRefundUpdateOne) SetOutRefundNo(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetOutRefundNo(s)
	return oruo
}

// SetReason sets the "reason" field.
func (oruo *OrderRefundUpdateOne) SetReason(s string) *OrderRefundUpdateOne {
	oruo.mutation.SetReason(s)
	return oruo
}

// SetRefundAt sets the "refund_at" field.
func (oruo *OrderRefundUpdateOne) SetRefundAt(t time.Time) *OrderRefundUpdateOne {
	oruo.mutation.SetRefundAt(t)
	return oruo
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (oruo *OrderRefundUpdateOne) SetNillableRefundAt(t *time.Time) *OrderRefundUpdateOne {
	if t != nil {
		oruo.SetRefundAt(*t)
	}
	return oruo
}

// ClearRefundAt clears the value of the "refund_at" field.
func (oruo *OrderRefundUpdateOne) ClearRefundAt() *OrderRefundUpdateOne {
	oruo.mutation.ClearRefundAt()
	return oruo
}

// SetOrder sets the "order" edge to the Order entity.
func (oruo *OrderRefundUpdateOne) SetOrder(o *Order) *OrderRefundUpdateOne {
	return oruo.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (oruo *OrderRefundUpdateOne) Mutation() *OrderRefundMutation {
	return oruo.mutation
}

// ClearOrder clears the "order" edge to the Order entity.
func (oruo *OrderRefundUpdateOne) ClearOrder() *OrderRefundUpdateOne {
	oruo.mutation.ClearOrder()
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OrderRefundUpdateOne) Select(field string, fields ...string) *OrderRefundUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OrderRefund entity.
func (oruo *OrderRefundUpdateOne) Save(ctx context.Context) (*OrderRefund, error) {
	var (
		err  error
		node *OrderRefund
	)
	if err := oruo.defaults(); err != nil {
		return nil, err
	}
	if len(oruo.hooks) == 0 {
		if err = oruo.check(); err != nil {
			return nil, err
		}
		node, err = oruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderRefundMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oruo.check(); err != nil {
				return nil, err
			}
			oruo.mutation = mutation
			node, err = oruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oruo.hooks) - 1; i >= 0; i-- {
			if oruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderRefund)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderRefundMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OrderRefundUpdateOne) SaveX(ctx context.Context) *OrderRefund {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OrderRefundUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OrderRefundUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oruo *OrderRefundUpdateOne) defaults() error {
	if _, ok := oruo.mutation.UpdatedAt(); !ok {
		if orderrefund.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderrefund.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderrefund.UpdateDefaultUpdatedAt()
		oruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OrderRefundUpdateOne) check() error {
	if _, ok := oruo.mutation.OrderID(); oruo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderRefund.order"`)
	}
	return nil
}

func (oruo *OrderRefundUpdateOne) sqlSave(ctx context.Context) (_node *OrderRefund, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderrefund.Table,
			Columns: orderrefund.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		},
	}
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderRefund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderrefund.FieldID)
		for _, f := range fields {
			if !orderrefund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderrefund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldUpdatedAt,
		})
	}
	if value, ok := oruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldDeletedAt,
		})
	}
	if oruo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderrefund.FieldDeletedAt,
		})
	}
	if oruo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderrefund.FieldCreator,
		})
	}
	if value, ok := oruo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderrefund.FieldLastModifier,
		})
	}
	if oruo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderrefund.FieldLastModifier,
		})
	}
	if value, ok := oruo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldRemark,
		})
	}
	if oruo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderrefund.FieldRemark,
		})
	}
	if value, ok := oruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: orderrefund.FieldStatus,
		})
	}
	if value, ok := oruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: orderrefund.FieldStatus,
		})
	}
	if value, ok := oruo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderrefund.FieldAmount,
		})
	}
	if value, ok := oruo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: orderrefund.FieldAmount,
		})
	}
	if value, ok := oruo.mutation.OutRefundNo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldOutRefundNo,
		})
	}
	if value, ok := oruo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderrefund.FieldReason,
		})
	}
	if value, ok := oruo.mutation.RefundAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderrefund.FieldRefundAt,
		})
	}
	if oruo.mutation.RefundAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderrefund.FieldRefundAt,
		})
	}
	if oruo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderRefund{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderrefund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
