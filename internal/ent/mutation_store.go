// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/store"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// StoreMutation represents an operation that mutates the Store nodes in the graph.
type StoreMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	creator            **model.Modifier
	last_modifier      **model.Modifier
	remark             *string
	sn                 *string
	name               *string
	status             *uint8
	addstatus          *int8
	lng                *float64
	addlng             *float64
	lat                *float64
	addlat             *float64
	address            *string
	clearedFields      map[string]struct{}
	city               *uint64
	clearedcity        bool
	branch             *uint64
	clearedbranch      bool
	employee           *uint64
	clearedemployee    bool
	stocks             map[uint64]struct{}
	removedstocks      map[uint64]struct{}
	clearedstocks      bool
	attendances        map[uint64]struct{}
	removedattendances map[uint64]struct{}
	clearedattendances bool
	exceptions         map[uint64]struct{}
	removedexceptions  map[uint64]struct{}
	clearedexceptions  bool
	done               bool
	oldValue           func(context.Context) (*Store, error)
	predicates         []predicate.Store
}

var _ ent.Mutation = (*StoreMutation)(nil)

// storeOption allows management of the mutation configuration using functional options.
type storeOption func(*StoreMutation)

// newStoreMutation creates new mutation for the Store entity.
func newStoreMutation(c config, op Op, opts ...storeOption) *StoreMutation {
	m := &StoreMutation{
		config:        c,
		op:            op,
		typ:           TypeStore,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStoreID sets the ID field of the mutation.
func withStoreID(id uint64) storeOption {
	return func(m *StoreMutation) {
		var (
			err   error
			once  sync.Once
			value *Store
		)
		m.oldValue = func(ctx context.Context) (*Store, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Store.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStore sets the old Store of the mutation.
func withStore(node *Store) storeOption {
	return func(m *StoreMutation) {
		m.oldValue = func(context.Context) (*Store, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StoreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StoreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StoreMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StoreMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Store.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *StoreMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *StoreMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *StoreMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *StoreMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *StoreMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *StoreMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *StoreMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *StoreMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *StoreMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[store.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *StoreMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[store.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *StoreMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, store.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *StoreMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *StoreMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *StoreMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[store.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *StoreMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[store.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *StoreMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, store.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *StoreMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *StoreMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *StoreMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[store.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *StoreMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[store.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *StoreMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, store.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *StoreMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *StoreMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *StoreMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[store.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *StoreMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[store.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *StoreMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, store.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *StoreMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *StoreMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *StoreMutation) ResetCityID() {
	m.city = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *StoreMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *StoreMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *StoreMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[store.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *StoreMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[store.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *StoreMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, store.FieldEmployeeID)
}

// SetBranchID sets the "branch_id" field.
func (m *StoreMutation) SetBranchID(u uint64) {
	m.branch = &u
}

// BranchID returns the value of the "branch_id" field in the mutation.
func (m *StoreMutation) BranchID() (r uint64, exists bool) {
	v := m.branch
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchID returns the old "branch_id" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldBranchID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchID: %w", err)
	}
	return oldValue.BranchID, nil
}

// ResetBranchID resets all changes to the "branch_id" field.
func (m *StoreMutation) ResetBranchID() {
	m.branch = nil
}

// SetSn sets the "sn" field.
func (m *StoreMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *StoreMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *StoreMutation) ResetSn() {
	m.sn = nil
}

// SetName sets the "name" field.
func (m *StoreMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StoreMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StoreMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *StoreMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *StoreMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *StoreMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *StoreMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *StoreMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetLng sets the "lng" field.
func (m *StoreMutation) SetLng(f float64) {
	m.lng = &f
	m.addlng = nil
}

// Lng returns the value of the "lng" field in the mutation.
func (m *StoreMutation) Lng() (r float64, exists bool) {
	v := m.lng
	if v == nil {
		return
	}
	return *v, true
}

// OldLng returns the old "lng" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldLng(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLng is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLng requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLng: %w", err)
	}
	return oldValue.Lng, nil
}

// AddLng adds f to the "lng" field.
func (m *StoreMutation) AddLng(f float64) {
	if m.addlng != nil {
		*m.addlng += f
	} else {
		m.addlng = &f
	}
}

// AddedLng returns the value that was added to the "lng" field in this mutation.
func (m *StoreMutation) AddedLng() (r float64, exists bool) {
	v := m.addlng
	if v == nil {
		return
	}
	return *v, true
}

// ClearLng clears the value of the "lng" field.
func (m *StoreMutation) ClearLng() {
	m.lng = nil
	m.addlng = nil
	m.clearedFields[store.FieldLng] = struct{}{}
}

// LngCleared returns if the "lng" field was cleared in this mutation.
func (m *StoreMutation) LngCleared() bool {
	_, ok := m.clearedFields[store.FieldLng]
	return ok
}

// ResetLng resets all changes to the "lng" field.
func (m *StoreMutation) ResetLng() {
	m.lng = nil
	m.addlng = nil
	delete(m.clearedFields, store.FieldLng)
}

// SetLat sets the "lat" field.
func (m *StoreMutation) SetLat(f float64) {
	m.lat = &f
	m.addlat = nil
}

// Lat returns the value of the "lat" field in the mutation.
func (m *StoreMutation) Lat() (r float64, exists bool) {
	v := m.lat
	if v == nil {
		return
	}
	return *v, true
}

// OldLat returns the old "lat" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldLat(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLat: %w", err)
	}
	return oldValue.Lat, nil
}

// AddLat adds f to the "lat" field.
func (m *StoreMutation) AddLat(f float64) {
	if m.addlat != nil {
		*m.addlat += f
	} else {
		m.addlat = &f
	}
}

// AddedLat returns the value that was added to the "lat" field in this mutation.
func (m *StoreMutation) AddedLat() (r float64, exists bool) {
	v := m.addlat
	if v == nil {
		return
	}
	return *v, true
}

// ClearLat clears the value of the "lat" field.
func (m *StoreMutation) ClearLat() {
	m.lat = nil
	m.addlat = nil
	m.clearedFields[store.FieldLat] = struct{}{}
}

// LatCleared returns if the "lat" field was cleared in this mutation.
func (m *StoreMutation) LatCleared() bool {
	_, ok := m.clearedFields[store.FieldLat]
	return ok
}

// ResetLat resets all changes to the "lat" field.
func (m *StoreMutation) ResetLat() {
	m.lat = nil
	m.addlat = nil
	delete(m.clearedFields, store.FieldLat)
}

// SetAddress sets the "address" field.
func (m *StoreMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *StoreMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Store entity.
// If the Store object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StoreMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *StoreMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[store.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *StoreMutation) AddressCleared() bool {
	_, ok := m.clearedFields[store.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *StoreMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, store.FieldAddress)
}

// ClearCity clears the "city" edge to the City entity.
func (m *StoreMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *StoreMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *StoreMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *StoreMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (m *StoreMutation) ClearBranch() {
	m.clearedbranch = true
}

// BranchCleared reports if the "branch" edge to the Branch entity was cleared.
func (m *StoreMutation) BranchCleared() bool {
	return m.clearedbranch
}

// BranchIDs returns the "branch" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BranchID instead. It exists only for internal usage by the builders.
func (m *StoreMutation) BranchIDs() (ids []uint64) {
	if id := m.branch; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBranch resets all changes to the "branch" edge.
func (m *StoreMutation) ResetBranch() {
	m.branch = nil
	m.clearedbranch = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *StoreMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *StoreMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *StoreMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *StoreMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// AddStockIDs adds the "stocks" edge to the Stock entity by ids.
func (m *StoreMutation) AddStockIDs(ids ...uint64) {
	if m.stocks == nil {
		m.stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.stocks[ids[i]] = struct{}{}
	}
}

// ClearStocks clears the "stocks" edge to the Stock entity.
func (m *StoreMutation) ClearStocks() {
	m.clearedstocks = true
}

// StocksCleared reports if the "stocks" edge to the Stock entity was cleared.
func (m *StoreMutation) StocksCleared() bool {
	return m.clearedstocks
}

// RemoveStockIDs removes the "stocks" edge to the Stock entity by IDs.
func (m *StoreMutation) RemoveStockIDs(ids ...uint64) {
	if m.removedstocks == nil {
		m.removedstocks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.stocks, ids[i])
		m.removedstocks[ids[i]] = struct{}{}
	}
}

// RemovedStocks returns the removed IDs of the "stocks" edge to the Stock entity.
func (m *StoreMutation) RemovedStocksIDs() (ids []uint64) {
	for id := range m.removedstocks {
		ids = append(ids, id)
	}
	return
}

// StocksIDs returns the "stocks" edge IDs in the mutation.
func (m *StoreMutation) StocksIDs() (ids []uint64) {
	for id := range m.stocks {
		ids = append(ids, id)
	}
	return
}

// ResetStocks resets all changes to the "stocks" edge.
func (m *StoreMutation) ResetStocks() {
	m.stocks = nil
	m.clearedstocks = false
	m.removedstocks = nil
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by ids.
func (m *StoreMutation) AddAttendanceIDs(ids ...uint64) {
	if m.attendances == nil {
		m.attendances = make(map[uint64]struct{})
	}
	for i := range ids {
		m.attendances[ids[i]] = struct{}{}
	}
}

// ClearAttendances clears the "attendances" edge to the Attendance entity.
func (m *StoreMutation) ClearAttendances() {
	m.clearedattendances = true
}

// AttendancesCleared reports if the "attendances" edge to the Attendance entity was cleared.
func (m *StoreMutation) AttendancesCleared() bool {
	return m.clearedattendances
}

// RemoveAttendanceIDs removes the "attendances" edge to the Attendance entity by IDs.
func (m *StoreMutation) RemoveAttendanceIDs(ids ...uint64) {
	if m.removedattendances == nil {
		m.removedattendances = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.attendances, ids[i])
		m.removedattendances[ids[i]] = struct{}{}
	}
}

// RemovedAttendances returns the removed IDs of the "attendances" edge to the Attendance entity.
func (m *StoreMutation) RemovedAttendancesIDs() (ids []uint64) {
	for id := range m.removedattendances {
		ids = append(ids, id)
	}
	return
}

// AttendancesIDs returns the "attendances" edge IDs in the mutation.
func (m *StoreMutation) AttendancesIDs() (ids []uint64) {
	for id := range m.attendances {
		ids = append(ids, id)
	}
	return
}

// ResetAttendances resets all changes to the "attendances" edge.
func (m *StoreMutation) ResetAttendances() {
	m.attendances = nil
	m.clearedattendances = false
	m.removedattendances = nil
}

// AddExceptionIDs adds the "exceptions" edge to the Exception entity by ids.
func (m *StoreMutation) AddExceptionIDs(ids ...uint64) {
	if m.exceptions == nil {
		m.exceptions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.exceptions[ids[i]] = struct{}{}
	}
}

// ClearExceptions clears the "exceptions" edge to the Exception entity.
func (m *StoreMutation) ClearExceptions() {
	m.clearedexceptions = true
}

// ExceptionsCleared reports if the "exceptions" edge to the Exception entity was cleared.
func (m *StoreMutation) ExceptionsCleared() bool {
	return m.clearedexceptions
}

// RemoveExceptionIDs removes the "exceptions" edge to the Exception entity by IDs.
func (m *StoreMutation) RemoveExceptionIDs(ids ...uint64) {
	if m.removedexceptions == nil {
		m.removedexceptions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.exceptions, ids[i])
		m.removedexceptions[ids[i]] = struct{}{}
	}
}

// RemovedExceptions returns the removed IDs of the "exceptions" edge to the Exception entity.
func (m *StoreMutation) RemovedExceptionsIDs() (ids []uint64) {
	for id := range m.removedexceptions {
		ids = append(ids, id)
	}
	return
}

// ExceptionsIDs returns the "exceptions" edge IDs in the mutation.
func (m *StoreMutation) ExceptionsIDs() (ids []uint64) {
	for id := range m.exceptions {
		ids = append(ids, id)
	}
	return
}

// ResetExceptions resets all changes to the "exceptions" edge.
func (m *StoreMutation) ResetExceptions() {
	m.exceptions = nil
	m.clearedexceptions = false
	m.removedexceptions = nil
}

// Where appends a list predicates to the StoreMutation builder.
func (m *StoreMutation) Where(ps ...predicate.Store) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StoreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Store).
func (m *StoreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StoreMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, store.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, store.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, store.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, store.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, store.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, store.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, store.FieldCityID)
	}
	if m.employee != nil {
		fields = append(fields, store.FieldEmployeeID)
	}
	if m.branch != nil {
		fields = append(fields, store.FieldBranchID)
	}
	if m.sn != nil {
		fields = append(fields, store.FieldSn)
	}
	if m.name != nil {
		fields = append(fields, store.FieldName)
	}
	if m.status != nil {
		fields = append(fields, store.FieldStatus)
	}
	if m.lng != nil {
		fields = append(fields, store.FieldLng)
	}
	if m.lat != nil {
		fields = append(fields, store.FieldLat)
	}
	if m.address != nil {
		fields = append(fields, store.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StoreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case store.FieldCreatedAt:
		return m.CreatedAt()
	case store.FieldUpdatedAt:
		return m.UpdatedAt()
	case store.FieldDeletedAt:
		return m.DeletedAt()
	case store.FieldCreator:
		return m.Creator()
	case store.FieldLastModifier:
		return m.LastModifier()
	case store.FieldRemark:
		return m.Remark()
	case store.FieldCityID:
		return m.CityID()
	case store.FieldEmployeeID:
		return m.EmployeeID()
	case store.FieldBranchID:
		return m.BranchID()
	case store.FieldSn:
		return m.Sn()
	case store.FieldName:
		return m.Name()
	case store.FieldStatus:
		return m.Status()
	case store.FieldLng:
		return m.Lng()
	case store.FieldLat:
		return m.Lat()
	case store.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StoreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case store.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case store.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case store.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case store.FieldCreator:
		return m.OldCreator(ctx)
	case store.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case store.FieldRemark:
		return m.OldRemark(ctx)
	case store.FieldCityID:
		return m.OldCityID(ctx)
	case store.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case store.FieldBranchID:
		return m.OldBranchID(ctx)
	case store.FieldSn:
		return m.OldSn(ctx)
	case store.FieldName:
		return m.OldName(ctx)
	case store.FieldStatus:
		return m.OldStatus(ctx)
	case store.FieldLng:
		return m.OldLng(ctx)
	case store.FieldLat:
		return m.OldLat(ctx)
	case store.FieldAddress:
		return m.OldAddress(ctx)
	}
	return nil, fmt.Errorf("unknown Store field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case store.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case store.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case store.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case store.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case store.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case store.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case store.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case store.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case store.FieldBranchID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchID(v)
		return nil
	case store.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case store.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case store.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case store.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLng(v)
		return nil
	case store.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLat(v)
		return nil
	case store.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StoreMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, store.FieldStatus)
	}
	if m.addlng != nil {
		fields = append(fields, store.FieldLng)
	}
	if m.addlat != nil {
		fields = append(fields, store.FieldLat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StoreMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case store.FieldStatus:
		return m.AddedStatus()
	case store.FieldLng:
		return m.AddedLng()
	case store.FieldLat:
		return m.AddedLat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StoreMutation) AddField(name string, value ent.Value) error {
	switch name {
	case store.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case store.FieldLng:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLng(v)
		return nil
	case store.FieldLat:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLat(v)
		return nil
	}
	return fmt.Errorf("unknown Store numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StoreMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(store.FieldDeletedAt) {
		fields = append(fields, store.FieldDeletedAt)
	}
	if m.FieldCleared(store.FieldCreator) {
		fields = append(fields, store.FieldCreator)
	}
	if m.FieldCleared(store.FieldLastModifier) {
		fields = append(fields, store.FieldLastModifier)
	}
	if m.FieldCleared(store.FieldRemark) {
		fields = append(fields, store.FieldRemark)
	}
	if m.FieldCleared(store.FieldEmployeeID) {
		fields = append(fields, store.FieldEmployeeID)
	}
	if m.FieldCleared(store.FieldLng) {
		fields = append(fields, store.FieldLng)
	}
	if m.FieldCleared(store.FieldLat) {
		fields = append(fields, store.FieldLat)
	}
	if m.FieldCleared(store.FieldAddress) {
		fields = append(fields, store.FieldAddress)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StoreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StoreMutation) ClearField(name string) error {
	switch name {
	case store.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case store.FieldCreator:
		m.ClearCreator()
		return nil
	case store.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case store.FieldRemark:
		m.ClearRemark()
		return nil
	case store.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case store.FieldLng:
		m.ClearLng()
		return nil
	case store.FieldLat:
		m.ClearLat()
		return nil
	case store.FieldAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown Store nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StoreMutation) ResetField(name string) error {
	switch name {
	case store.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case store.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case store.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case store.FieldCreator:
		m.ResetCreator()
		return nil
	case store.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case store.FieldRemark:
		m.ResetRemark()
		return nil
	case store.FieldCityID:
		m.ResetCityID()
		return nil
	case store.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case store.FieldBranchID:
		m.ResetBranchID()
		return nil
	case store.FieldSn:
		m.ResetSn()
		return nil
	case store.FieldName:
		m.ResetName()
		return nil
	case store.FieldStatus:
		m.ResetStatus()
		return nil
	case store.FieldLng:
		m.ResetLng()
		return nil
	case store.FieldLat:
		m.ResetLat()
		return nil
	case store.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Store field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StoreMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.city != nil {
		edges = append(edges, store.EdgeCity)
	}
	if m.branch != nil {
		edges = append(edges, store.EdgeBranch)
	}
	if m.employee != nil {
		edges = append(edges, store.EdgeEmployee)
	}
	if m.stocks != nil {
		edges = append(edges, store.EdgeStocks)
	}
	if m.attendances != nil {
		edges = append(edges, store.EdgeAttendances)
	}
	if m.exceptions != nil {
		edges = append(edges, store.EdgeExceptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StoreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case store.EdgeBranch:
		if id := m.branch; id != nil {
			return []ent.Value{*id}
		}
	case store.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case store.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.stocks))
		for id := range m.stocks {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeAttendances:
		ids := make([]ent.Value, 0, len(m.attendances))
		for id := range m.attendances {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeExceptions:
		ids := make([]ent.Value, 0, len(m.exceptions))
		for id := range m.exceptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StoreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedstocks != nil {
		edges = append(edges, store.EdgeStocks)
	}
	if m.removedattendances != nil {
		edges = append(edges, store.EdgeAttendances)
	}
	if m.removedexceptions != nil {
		edges = append(edges, store.EdgeExceptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StoreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case store.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.removedstocks))
		for id := range m.removedstocks {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeAttendances:
		ids := make([]ent.Value, 0, len(m.removedattendances))
		for id := range m.removedattendances {
			ids = append(ids, id)
		}
		return ids
	case store.EdgeExceptions:
		ids := make([]ent.Value, 0, len(m.removedexceptions))
		for id := range m.removedexceptions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StoreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedcity {
		edges = append(edges, store.EdgeCity)
	}
	if m.clearedbranch {
		edges = append(edges, store.EdgeBranch)
	}
	if m.clearedemployee {
		edges = append(edges, store.EdgeEmployee)
	}
	if m.clearedstocks {
		edges = append(edges, store.EdgeStocks)
	}
	if m.clearedattendances {
		edges = append(edges, store.EdgeAttendances)
	}
	if m.clearedexceptions {
		edges = append(edges, store.EdgeExceptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StoreMutation) EdgeCleared(name string) bool {
	switch name {
	case store.EdgeCity:
		return m.clearedcity
	case store.EdgeBranch:
		return m.clearedbranch
	case store.EdgeEmployee:
		return m.clearedemployee
	case store.EdgeStocks:
		return m.clearedstocks
	case store.EdgeAttendances:
		return m.clearedattendances
	case store.EdgeExceptions:
		return m.clearedexceptions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StoreMutation) ClearEdge(name string) error {
	switch name {
	case store.EdgeCity:
		m.ClearCity()
		return nil
	case store.EdgeBranch:
		m.ClearBranch()
		return nil
	case store.EdgeEmployee:
		m.ClearEmployee()
		return nil
	}
	return fmt.Errorf("unknown Store unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StoreMutation) ResetEdge(name string) error {
	switch name {
	case store.EdgeCity:
		m.ResetCity()
		return nil
	case store.EdgeBranch:
		m.ResetBranch()
		return nil
	case store.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case store.EdgeStocks:
		m.ResetStocks()
		return nil
	case store.EdgeAttendances:
		m.ResetAttendances()
		return nil
	case store.EdgeExceptions:
		m.ResetExceptions()
		return nil
	}
	return fmt.Errorf("unknown Store edge %s", name)
}

