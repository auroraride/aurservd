// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/enterprise"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EnterpriseMutation represents an operation that mutates the Enterprise nodes in the graph.
type EnterpriseMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uint64
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	creator             **model.Modifier
	last_modifier       **model.Modifier
	remark              *string
	name                *string
	company_name        *string
	status              *uint8
	addstatus           *int8
	contact_name        *string
	contact_phone       *string
	idcard_number       *string
	address             *string
	payment             *uint8
	addpayment          *int8
	deposit             *float64
	adddeposit          *float64
	balance             *float64
	addbalance          *float64
	prepayment_total    *float64
	addprepayment_total *float64
	suspensed_at        *time.Time
	clearedFields       map[string]struct{}
	city                *uint64
	clearedcity         bool
	riders              map[uint64]struct{}
	removedriders       map[uint64]struct{}
	clearedriders       bool
	contracts           map[uint64]struct{}
	removedcontracts    map[uint64]struct{}
	clearedcontracts    bool
	prices              map[uint64]struct{}
	removedprices       map[uint64]struct{}
	clearedprices       bool
	subscribes          map[uint64]struct{}
	removedsubscribes   map[uint64]struct{}
	clearedsubscribes   bool
	statements          map[uint64]struct{}
	removedstatements   map[uint64]struct{}
	clearedstatements   bool
	stations            map[uint64]struct{}
	removedstations     map[uint64]struct{}
	clearedstations     bool
	bills               map[uint64]struct{}
	removedbills        map[uint64]struct{}
	clearedbills        bool
	done                bool
	oldValue            func(context.Context) (*Enterprise, error)
	predicates          []predicate.Enterprise
}

var _ ent.Mutation = (*EnterpriseMutation)(nil)

// enterpriseOption allows management of the mutation configuration using functional options.
type enterpriseOption func(*EnterpriseMutation)

// newEnterpriseMutation creates new mutation for the Enterprise entity.
func newEnterpriseMutation(c config, op Op, opts ...enterpriseOption) *EnterpriseMutation {
	m := &EnterpriseMutation{
		config:        c,
		op:            op,
		typ:           TypeEnterprise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnterpriseID sets the ID field of the mutation.
func withEnterpriseID(id uint64) enterpriseOption {
	return func(m *EnterpriseMutation) {
		var (
			err   error
			once  sync.Once
			value *Enterprise
		)
		m.oldValue = func(ctx context.Context) (*Enterprise, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Enterprise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnterprise sets the old Enterprise of the mutation.
func withEnterprise(node *Enterprise) enterpriseOption {
	return func(m *EnterpriseMutation) {
		m.oldValue = func(context.Context) (*Enterprise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnterpriseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnterpriseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnterpriseMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnterpriseMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Enterprise.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EnterpriseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EnterpriseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EnterpriseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EnterpriseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EnterpriseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EnterpriseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EnterpriseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EnterpriseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EnterpriseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[enterprise.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EnterpriseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EnterpriseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, enterprise.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *EnterpriseMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EnterpriseMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *EnterpriseMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[enterprise.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *EnterpriseMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *EnterpriseMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, enterprise.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *EnterpriseMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *EnterpriseMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *EnterpriseMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[enterprise.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *EnterpriseMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *EnterpriseMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, enterprise.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *EnterpriseMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *EnterpriseMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *EnterpriseMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[enterprise.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *EnterpriseMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *EnterpriseMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, enterprise.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *EnterpriseMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *EnterpriseMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *EnterpriseMutation) ResetCityID() {
	m.city = nil
}

// SetName sets the "name" field.
func (m *EnterpriseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EnterpriseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EnterpriseMutation) ResetName() {
	m.name = nil
}

// SetCompanyName sets the "company_name" field.
func (m *EnterpriseMutation) SetCompanyName(s string) {
	m.company_name = &s
}

// CompanyName returns the value of the "company_name" field in the mutation.
func (m *EnterpriseMutation) CompanyName() (r string, exists bool) {
	v := m.company_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCompanyName returns the old "company_name" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldCompanyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCompanyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCompanyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCompanyName: %w", err)
	}
	return oldValue.CompanyName, nil
}

// ClearCompanyName clears the value of the "company_name" field.
func (m *EnterpriseMutation) ClearCompanyName() {
	m.company_name = nil
	m.clearedFields[enterprise.FieldCompanyName] = struct{}{}
}

// CompanyNameCleared returns if the "company_name" field was cleared in this mutation.
func (m *EnterpriseMutation) CompanyNameCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldCompanyName]
	return ok
}

// ResetCompanyName resets all changes to the "company_name" field.
func (m *EnterpriseMutation) ResetCompanyName() {
	m.company_name = nil
	delete(m.clearedFields, enterprise.FieldCompanyName)
}

// SetStatus sets the "status" field.
func (m *EnterpriseMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *EnterpriseMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *EnterpriseMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *EnterpriseMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *EnterpriseMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetContactName sets the "contact_name" field.
func (m *EnterpriseMutation) SetContactName(s string) {
	m.contact_name = &s
}

// ContactName returns the value of the "contact_name" field in the mutation.
func (m *EnterpriseMutation) ContactName() (r string, exists bool) {
	v := m.contact_name
	if v == nil {
		return
	}
	return *v, true
}

// OldContactName returns the old "contact_name" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldContactName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactName: %w", err)
	}
	return oldValue.ContactName, nil
}

// ResetContactName resets all changes to the "contact_name" field.
func (m *EnterpriseMutation) ResetContactName() {
	m.contact_name = nil
}

// SetContactPhone sets the "contact_phone" field.
func (m *EnterpriseMutation) SetContactPhone(s string) {
	m.contact_phone = &s
}

// ContactPhone returns the value of the "contact_phone" field in the mutation.
func (m *EnterpriseMutation) ContactPhone() (r string, exists bool) {
	v := m.contact_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPhone returns the old "contact_phone" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldContactPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPhone: %w", err)
	}
	return oldValue.ContactPhone, nil
}

// ResetContactPhone resets all changes to the "contact_phone" field.
func (m *EnterpriseMutation) ResetContactPhone() {
	m.contact_phone = nil
}

// SetIdcardNumber sets the "idcard_number" field.
func (m *EnterpriseMutation) SetIdcardNumber(s string) {
	m.idcard_number = &s
}

// IdcardNumber returns the value of the "idcard_number" field in the mutation.
func (m *EnterpriseMutation) IdcardNumber() (r string, exists bool) {
	v := m.idcard_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIdcardNumber returns the old "idcard_number" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldIdcardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdcardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdcardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdcardNumber: %w", err)
	}
	return oldValue.IdcardNumber, nil
}

// ResetIdcardNumber resets all changes to the "idcard_number" field.
func (m *EnterpriseMutation) ResetIdcardNumber() {
	m.idcard_number = nil
}

// SetAddress sets the "address" field.
func (m *EnterpriseMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *EnterpriseMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *EnterpriseMutation) ResetAddress() {
	m.address = nil
}

// SetPayment sets the "payment" field.
func (m *EnterpriseMutation) SetPayment(u uint8) {
	m.payment = &u
	m.addpayment = nil
}

// Payment returns the value of the "payment" field in the mutation.
func (m *EnterpriseMutation) Payment() (r uint8, exists bool) {
	v := m.payment
	if v == nil {
		return
	}
	return *v, true
}

// OldPayment returns the old "payment" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldPayment(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayment: %w", err)
	}
	return oldValue.Payment, nil
}

// AddPayment adds u to the "payment" field.
func (m *EnterpriseMutation) AddPayment(u int8) {
	if m.addpayment != nil {
		*m.addpayment += u
	} else {
		m.addpayment = &u
	}
}

// AddedPayment returns the value that was added to the "payment" field in this mutation.
func (m *EnterpriseMutation) AddedPayment() (r int8, exists bool) {
	v := m.addpayment
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayment resets all changes to the "payment" field.
func (m *EnterpriseMutation) ResetPayment() {
	m.payment = nil
	m.addpayment = nil
}

// SetDeposit sets the "deposit" field.
func (m *EnterpriseMutation) SetDeposit(f float64) {
	m.deposit = &f
	m.adddeposit = nil
}

// Deposit returns the value of the "deposit" field in the mutation.
func (m *EnterpriseMutation) Deposit() (r float64, exists bool) {
	v := m.deposit
	if v == nil {
		return
	}
	return *v, true
}

// OldDeposit returns the old "deposit" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldDeposit(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeposit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeposit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeposit: %w", err)
	}
	return oldValue.Deposit, nil
}

// AddDeposit adds f to the "deposit" field.
func (m *EnterpriseMutation) AddDeposit(f float64) {
	if m.adddeposit != nil {
		*m.adddeposit += f
	} else {
		m.adddeposit = &f
	}
}

// AddedDeposit returns the value that was added to the "deposit" field in this mutation.
func (m *EnterpriseMutation) AddedDeposit() (r float64, exists bool) {
	v := m.adddeposit
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeposit resets all changes to the "deposit" field.
func (m *EnterpriseMutation) ResetDeposit() {
	m.deposit = nil
	m.adddeposit = nil
}

// SetBalance sets the "balance" field.
func (m *EnterpriseMutation) SetBalance(f float64) {
	m.balance = &f
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *EnterpriseMutation) Balance() (r float64, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds f to the "balance" field.
func (m *EnterpriseMutation) AddBalance(f float64) {
	if m.addbalance != nil {
		*m.addbalance += f
	} else {
		m.addbalance = &f
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *EnterpriseMutation) AddedBalance() (r float64, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *EnterpriseMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetPrepaymentTotal sets the "prepayment_total" field.
func (m *EnterpriseMutation) SetPrepaymentTotal(f float64) {
	m.prepayment_total = &f
	m.addprepayment_total = nil
}

// PrepaymentTotal returns the value of the "prepayment_total" field in the mutation.
func (m *EnterpriseMutation) PrepaymentTotal() (r float64, exists bool) {
	v := m.prepayment_total
	if v == nil {
		return
	}
	return *v, true
}

// OldPrepaymentTotal returns the old "prepayment_total" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldPrepaymentTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrepaymentTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrepaymentTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrepaymentTotal: %w", err)
	}
	return oldValue.PrepaymentTotal, nil
}

// AddPrepaymentTotal adds f to the "prepayment_total" field.
func (m *EnterpriseMutation) AddPrepaymentTotal(f float64) {
	if m.addprepayment_total != nil {
		*m.addprepayment_total += f
	} else {
		m.addprepayment_total = &f
	}
}

// AddedPrepaymentTotal returns the value that was added to the "prepayment_total" field in this mutation.
func (m *EnterpriseMutation) AddedPrepaymentTotal() (r float64, exists bool) {
	v := m.addprepayment_total
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrepaymentTotal resets all changes to the "prepayment_total" field.
func (m *EnterpriseMutation) ResetPrepaymentTotal() {
	m.prepayment_total = nil
	m.addprepayment_total = nil
}

// SetSuspensedAt sets the "suspensed_at" field.
func (m *EnterpriseMutation) SetSuspensedAt(t time.Time) {
	m.suspensed_at = &t
}

// SuspensedAt returns the value of the "suspensed_at" field in the mutation.
func (m *EnterpriseMutation) SuspensedAt() (r time.Time, exists bool) {
	v := m.suspensed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspensedAt returns the old "suspensed_at" field's value of the Enterprise entity.
// If the Enterprise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseMutation) OldSuspensedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspensedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspensedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspensedAt: %w", err)
	}
	return oldValue.SuspensedAt, nil
}

// ClearSuspensedAt clears the value of the "suspensed_at" field.
func (m *EnterpriseMutation) ClearSuspensedAt() {
	m.suspensed_at = nil
	m.clearedFields[enterprise.FieldSuspensedAt] = struct{}{}
}

// SuspensedAtCleared returns if the "suspensed_at" field was cleared in this mutation.
func (m *EnterpriseMutation) SuspensedAtCleared() bool {
	_, ok := m.clearedFields[enterprise.FieldSuspensedAt]
	return ok
}

// ResetSuspensedAt resets all changes to the "suspensed_at" field.
func (m *EnterpriseMutation) ResetSuspensedAt() {
	m.suspensed_at = nil
	delete(m.clearedFields, enterprise.FieldSuspensedAt)
}

// ClearCity clears the "city" edge to the City entity.
func (m *EnterpriseMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *EnterpriseMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *EnterpriseMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *EnterpriseMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// AddRiderIDs adds the "riders" edge to the Rider entity by ids.
func (m *EnterpriseMutation) AddRiderIDs(ids ...uint64) {
	if m.riders == nil {
		m.riders = make(map[uint64]struct{})
	}
	for i := range ids {
		m.riders[ids[i]] = struct{}{}
	}
}

// ClearRiders clears the "riders" edge to the Rider entity.
func (m *EnterpriseMutation) ClearRiders() {
	m.clearedriders = true
}

// RidersCleared reports if the "riders" edge to the Rider entity was cleared.
func (m *EnterpriseMutation) RidersCleared() bool {
	return m.clearedriders
}

// RemoveRiderIDs removes the "riders" edge to the Rider entity by IDs.
func (m *EnterpriseMutation) RemoveRiderIDs(ids ...uint64) {
	if m.removedriders == nil {
		m.removedriders = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.riders, ids[i])
		m.removedriders[ids[i]] = struct{}{}
	}
}

// RemovedRiders returns the removed IDs of the "riders" edge to the Rider entity.
func (m *EnterpriseMutation) RemovedRidersIDs() (ids []uint64) {
	for id := range m.removedriders {
		ids = append(ids, id)
	}
	return
}

// RidersIDs returns the "riders" edge IDs in the mutation.
func (m *EnterpriseMutation) RidersIDs() (ids []uint64) {
	for id := range m.riders {
		ids = append(ids, id)
	}
	return
}

// ResetRiders resets all changes to the "riders" edge.
func (m *EnterpriseMutation) ResetRiders() {
	m.riders = nil
	m.clearedriders = false
	m.removedriders = nil
}

// AddContractIDs adds the "contracts" edge to the EnterpriseContract entity by ids.
func (m *EnterpriseMutation) AddContractIDs(ids ...uint64) {
	if m.contracts == nil {
		m.contracts = make(map[uint64]struct{})
	}
	for i := range ids {
		m.contracts[ids[i]] = struct{}{}
	}
}

// ClearContracts clears the "contracts" edge to the EnterpriseContract entity.
func (m *EnterpriseMutation) ClearContracts() {
	m.clearedcontracts = true
}

// ContractsCleared reports if the "contracts" edge to the EnterpriseContract entity was cleared.
func (m *EnterpriseMutation) ContractsCleared() bool {
	return m.clearedcontracts
}

// RemoveContractIDs removes the "contracts" edge to the EnterpriseContract entity by IDs.
func (m *EnterpriseMutation) RemoveContractIDs(ids ...uint64) {
	if m.removedcontracts == nil {
		m.removedcontracts = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.contracts, ids[i])
		m.removedcontracts[ids[i]] = struct{}{}
	}
}

// RemovedContracts returns the removed IDs of the "contracts" edge to the EnterpriseContract entity.
func (m *EnterpriseMutation) RemovedContractsIDs() (ids []uint64) {
	for id := range m.removedcontracts {
		ids = append(ids, id)
	}
	return
}

// ContractsIDs returns the "contracts" edge IDs in the mutation.
func (m *EnterpriseMutation) ContractsIDs() (ids []uint64) {
	for id := range m.contracts {
		ids = append(ids, id)
	}
	return
}

// ResetContracts resets all changes to the "contracts" edge.
func (m *EnterpriseMutation) ResetContracts() {
	m.contracts = nil
	m.clearedcontracts = false
	m.removedcontracts = nil
}

// AddPriceIDs adds the "prices" edge to the EnterprisePrice entity by ids.
func (m *EnterpriseMutation) AddPriceIDs(ids ...uint64) {
	if m.prices == nil {
		m.prices = make(map[uint64]struct{})
	}
	for i := range ids {
		m.prices[ids[i]] = struct{}{}
	}
}

// ClearPrices clears the "prices" edge to the EnterprisePrice entity.
func (m *EnterpriseMutation) ClearPrices() {
	m.clearedprices = true
}

// PricesCleared reports if the "prices" edge to the EnterprisePrice entity was cleared.
func (m *EnterpriseMutation) PricesCleared() bool {
	return m.clearedprices
}

// RemovePriceIDs removes the "prices" edge to the EnterprisePrice entity by IDs.
func (m *EnterpriseMutation) RemovePriceIDs(ids ...uint64) {
	if m.removedprices == nil {
		m.removedprices = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.prices, ids[i])
		m.removedprices[ids[i]] = struct{}{}
	}
}

// RemovedPrices returns the removed IDs of the "prices" edge to the EnterprisePrice entity.
func (m *EnterpriseMutation) RemovedPricesIDs() (ids []uint64) {
	for id := range m.removedprices {
		ids = append(ids, id)
	}
	return
}

// PricesIDs returns the "prices" edge IDs in the mutation.
func (m *EnterpriseMutation) PricesIDs() (ids []uint64) {
	for id := range m.prices {
		ids = append(ids, id)
	}
	return
}

// ResetPrices resets all changes to the "prices" edge.
func (m *EnterpriseMutation) ResetPrices() {
	m.prices = nil
	m.clearedprices = false
	m.removedprices = nil
}

// AddSubscribeIDs adds the "subscribes" edge to the Subscribe entity by ids.
func (m *EnterpriseMutation) AddSubscribeIDs(ids ...uint64) {
	if m.subscribes == nil {
		m.subscribes = make(map[uint64]struct{})
	}
	for i := range ids {
		m.subscribes[ids[i]] = struct{}{}
	}
}

// ClearSubscribes clears the "subscribes" edge to the Subscribe entity.
func (m *EnterpriseMutation) ClearSubscribes() {
	m.clearedsubscribes = true
}

// SubscribesCleared reports if the "subscribes" edge to the Subscribe entity was cleared.
func (m *EnterpriseMutation) SubscribesCleared() bool {
	return m.clearedsubscribes
}

// RemoveSubscribeIDs removes the "subscribes" edge to the Subscribe entity by IDs.
func (m *EnterpriseMutation) RemoveSubscribeIDs(ids ...uint64) {
	if m.removedsubscribes == nil {
		m.removedsubscribes = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.subscribes, ids[i])
		m.removedsubscribes[ids[i]] = struct{}{}
	}
}

// RemovedSubscribes returns the removed IDs of the "subscribes" edge to the Subscribe entity.
func (m *EnterpriseMutation) RemovedSubscribesIDs() (ids []uint64) {
	for id := range m.removedsubscribes {
		ids = append(ids, id)
	}
	return
}

// SubscribesIDs returns the "subscribes" edge IDs in the mutation.
func (m *EnterpriseMutation) SubscribesIDs() (ids []uint64) {
	for id := range m.subscribes {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribes resets all changes to the "subscribes" edge.
func (m *EnterpriseMutation) ResetSubscribes() {
	m.subscribes = nil
	m.clearedsubscribes = false
	m.removedsubscribes = nil
}

// AddStatementIDs adds the "statements" edge to the EnterpriseStatement entity by ids.
func (m *EnterpriseMutation) AddStatementIDs(ids ...uint64) {
	if m.statements == nil {
		m.statements = make(map[uint64]struct{})
	}
	for i := range ids {
		m.statements[ids[i]] = struct{}{}
	}
}

// ClearStatements clears the "statements" edge to the EnterpriseStatement entity.
func (m *EnterpriseMutation) ClearStatements() {
	m.clearedstatements = true
}

// StatementsCleared reports if the "statements" edge to the EnterpriseStatement entity was cleared.
func (m *EnterpriseMutation) StatementsCleared() bool {
	return m.clearedstatements
}

// RemoveStatementIDs removes the "statements" edge to the EnterpriseStatement entity by IDs.
func (m *EnterpriseMutation) RemoveStatementIDs(ids ...uint64) {
	if m.removedstatements == nil {
		m.removedstatements = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.statements, ids[i])
		m.removedstatements[ids[i]] = struct{}{}
	}
}

// RemovedStatements returns the removed IDs of the "statements" edge to the EnterpriseStatement entity.
func (m *EnterpriseMutation) RemovedStatementsIDs() (ids []uint64) {
	for id := range m.removedstatements {
		ids = append(ids, id)
	}
	return
}

// StatementsIDs returns the "statements" edge IDs in the mutation.
func (m *EnterpriseMutation) StatementsIDs() (ids []uint64) {
	for id := range m.statements {
		ids = append(ids, id)
	}
	return
}

// ResetStatements resets all changes to the "statements" edge.
func (m *EnterpriseMutation) ResetStatements() {
	m.statements = nil
	m.clearedstatements = false
	m.removedstatements = nil
}

// AddStationIDs adds the "stations" edge to the EnterpriseStation entity by ids.
func (m *EnterpriseMutation) AddStationIDs(ids ...uint64) {
	if m.stations == nil {
		m.stations = make(map[uint64]struct{})
	}
	for i := range ids {
		m.stations[ids[i]] = struct{}{}
	}
}

// ClearStations clears the "stations" edge to the EnterpriseStation entity.
func (m *EnterpriseMutation) ClearStations() {
	m.clearedstations = true
}

// StationsCleared reports if the "stations" edge to the EnterpriseStation entity was cleared.
func (m *EnterpriseMutation) StationsCleared() bool {
	return m.clearedstations
}

// RemoveStationIDs removes the "stations" edge to the EnterpriseStation entity by IDs.
func (m *EnterpriseMutation) RemoveStationIDs(ids ...uint64) {
	if m.removedstations == nil {
		m.removedstations = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.stations, ids[i])
		m.removedstations[ids[i]] = struct{}{}
	}
}

// RemovedStations returns the removed IDs of the "stations" edge to the EnterpriseStation entity.
func (m *EnterpriseMutation) RemovedStationsIDs() (ids []uint64) {
	for id := range m.removedstations {
		ids = append(ids, id)
	}
	return
}

// StationsIDs returns the "stations" edge IDs in the mutation.
func (m *EnterpriseMutation) StationsIDs() (ids []uint64) {
	for id := range m.stations {
		ids = append(ids, id)
	}
	return
}

// ResetStations resets all changes to the "stations" edge.
func (m *EnterpriseMutation) ResetStations() {
	m.stations = nil
	m.clearedstations = false
	m.removedstations = nil
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by ids.
func (m *EnterpriseMutation) AddBillIDs(ids ...uint64) {
	if m.bills == nil {
		m.bills = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bills[ids[i]] = struct{}{}
	}
}

// ClearBills clears the "bills" edge to the EnterpriseBill entity.
func (m *EnterpriseMutation) ClearBills() {
	m.clearedbills = true
}

// BillsCleared reports if the "bills" edge to the EnterpriseBill entity was cleared.
func (m *EnterpriseMutation) BillsCleared() bool {
	return m.clearedbills
}

// RemoveBillIDs removes the "bills" edge to the EnterpriseBill entity by IDs.
func (m *EnterpriseMutation) RemoveBillIDs(ids ...uint64) {
	if m.removedbills == nil {
		m.removedbills = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.bills, ids[i])
		m.removedbills[ids[i]] = struct{}{}
	}
}

// RemovedBills returns the removed IDs of the "bills" edge to the EnterpriseBill entity.
func (m *EnterpriseMutation) RemovedBillsIDs() (ids []uint64) {
	for id := range m.removedbills {
		ids = append(ids, id)
	}
	return
}

// BillsIDs returns the "bills" edge IDs in the mutation.
func (m *EnterpriseMutation) BillsIDs() (ids []uint64) {
	for id := range m.bills {
		ids = append(ids, id)
	}
	return
}

// ResetBills resets all changes to the "bills" edge.
func (m *EnterpriseMutation) ResetBills() {
	m.bills = nil
	m.clearedbills = false
	m.removedbills = nil
}

// Where appends a list predicates to the EnterpriseMutation builder.
func (m *EnterpriseMutation) Where(ps ...predicate.Enterprise) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EnterpriseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Enterprise).
func (m *EnterpriseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnterpriseMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.created_at != nil {
		fields = append(fields, enterprise.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, enterprise.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, enterprise.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, enterprise.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, enterprise.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, enterprise.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, enterprise.FieldCityID)
	}
	if m.name != nil {
		fields = append(fields, enterprise.FieldName)
	}
	if m.company_name != nil {
		fields = append(fields, enterprise.FieldCompanyName)
	}
	if m.status != nil {
		fields = append(fields, enterprise.FieldStatus)
	}
	if m.contact_name != nil {
		fields = append(fields, enterprise.FieldContactName)
	}
	if m.contact_phone != nil {
		fields = append(fields, enterprise.FieldContactPhone)
	}
	if m.idcard_number != nil {
		fields = append(fields, enterprise.FieldIdcardNumber)
	}
	if m.address != nil {
		fields = append(fields, enterprise.FieldAddress)
	}
	if m.payment != nil {
		fields = append(fields, enterprise.FieldPayment)
	}
	if m.deposit != nil {
		fields = append(fields, enterprise.FieldDeposit)
	}
	if m.balance != nil {
		fields = append(fields, enterprise.FieldBalance)
	}
	if m.prepayment_total != nil {
		fields = append(fields, enterprise.FieldPrepaymentTotal)
	}
	if m.suspensed_at != nil {
		fields = append(fields, enterprise.FieldSuspensedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnterpriseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enterprise.FieldCreatedAt:
		return m.CreatedAt()
	case enterprise.FieldUpdatedAt:
		return m.UpdatedAt()
	case enterprise.FieldDeletedAt:
		return m.DeletedAt()
	case enterprise.FieldCreator:
		return m.Creator()
	case enterprise.FieldLastModifier:
		return m.LastModifier()
	case enterprise.FieldRemark:
		return m.Remark()
	case enterprise.FieldCityID:
		return m.CityID()
	case enterprise.FieldName:
		return m.Name()
	case enterprise.FieldCompanyName:
		return m.CompanyName()
	case enterprise.FieldStatus:
		return m.Status()
	case enterprise.FieldContactName:
		return m.ContactName()
	case enterprise.FieldContactPhone:
		return m.ContactPhone()
	case enterprise.FieldIdcardNumber:
		return m.IdcardNumber()
	case enterprise.FieldAddress:
		return m.Address()
	case enterprise.FieldPayment:
		return m.Payment()
	case enterprise.FieldDeposit:
		return m.Deposit()
	case enterprise.FieldBalance:
		return m.Balance()
	case enterprise.FieldPrepaymentTotal:
		return m.PrepaymentTotal()
	case enterprise.FieldSuspensedAt:
		return m.SuspensedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnterpriseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enterprise.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case enterprise.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case enterprise.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case enterprise.FieldCreator:
		return m.OldCreator(ctx)
	case enterprise.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case enterprise.FieldRemark:
		return m.OldRemark(ctx)
	case enterprise.FieldCityID:
		return m.OldCityID(ctx)
	case enterprise.FieldName:
		return m.OldName(ctx)
	case enterprise.FieldCompanyName:
		return m.OldCompanyName(ctx)
	case enterprise.FieldStatus:
		return m.OldStatus(ctx)
	case enterprise.FieldContactName:
		return m.OldContactName(ctx)
	case enterprise.FieldContactPhone:
		return m.OldContactPhone(ctx)
	case enterprise.FieldIdcardNumber:
		return m.OldIdcardNumber(ctx)
	case enterprise.FieldAddress:
		return m.OldAddress(ctx)
	case enterprise.FieldPayment:
		return m.OldPayment(ctx)
	case enterprise.FieldDeposit:
		return m.OldDeposit(ctx)
	case enterprise.FieldBalance:
		return m.OldBalance(ctx)
	case enterprise.FieldPrepaymentTotal:
		return m.OldPrepaymentTotal(ctx)
	case enterprise.FieldSuspensedAt:
		return m.OldSuspensedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Enterprise field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enterprise.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case enterprise.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case enterprise.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case enterprise.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case enterprise.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case enterprise.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case enterprise.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case enterprise.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case enterprise.FieldCompanyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCompanyName(v)
		return nil
	case enterprise.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case enterprise.FieldContactName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactName(v)
		return nil
	case enterprise.FieldContactPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPhone(v)
		return nil
	case enterprise.FieldIdcardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdcardNumber(v)
		return nil
	case enterprise.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case enterprise.FieldPayment:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayment(v)
		return nil
	case enterprise.FieldDeposit:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeposit(v)
		return nil
	case enterprise.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case enterprise.FieldPrepaymentTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrepaymentTotal(v)
		return nil
	case enterprise.FieldSuspensedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspensedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Enterprise field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnterpriseMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, enterprise.FieldStatus)
	}
	if m.addpayment != nil {
		fields = append(fields, enterprise.FieldPayment)
	}
	if m.adddeposit != nil {
		fields = append(fields, enterprise.FieldDeposit)
	}
	if m.addbalance != nil {
		fields = append(fields, enterprise.FieldBalance)
	}
	if m.addprepayment_total != nil {
		fields = append(fields, enterprise.FieldPrepaymentTotal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnterpriseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enterprise.FieldStatus:
		return m.AddedStatus()
	case enterprise.FieldPayment:
		return m.AddedPayment()
	case enterprise.FieldDeposit:
		return m.AddedDeposit()
	case enterprise.FieldBalance:
		return m.AddedBalance()
	case enterprise.FieldPrepaymentTotal:
		return m.AddedPrepaymentTotal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enterprise.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case enterprise.FieldPayment:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayment(v)
		return nil
	case enterprise.FieldDeposit:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeposit(v)
		return nil
	case enterprise.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	case enterprise.FieldPrepaymentTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrepaymentTotal(v)
		return nil
	}
	return fmt.Errorf("unknown Enterprise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnterpriseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enterprise.FieldDeletedAt) {
		fields = append(fields, enterprise.FieldDeletedAt)
	}
	if m.FieldCleared(enterprise.FieldCreator) {
		fields = append(fields, enterprise.FieldCreator)
	}
	if m.FieldCleared(enterprise.FieldLastModifier) {
		fields = append(fields, enterprise.FieldLastModifier)
	}
	if m.FieldCleared(enterprise.FieldRemark) {
		fields = append(fields, enterprise.FieldRemark)
	}
	if m.FieldCleared(enterprise.FieldCompanyName) {
		fields = append(fields, enterprise.FieldCompanyName)
	}
	if m.FieldCleared(enterprise.FieldSuspensedAt) {
		fields = append(fields, enterprise.FieldSuspensedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnterpriseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnterpriseMutation) ClearField(name string) error {
	switch name {
	case enterprise.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case enterprise.FieldCreator:
		m.ClearCreator()
		return nil
	case enterprise.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case enterprise.FieldRemark:
		m.ClearRemark()
		return nil
	case enterprise.FieldCompanyName:
		m.ClearCompanyName()
		return nil
	case enterprise.FieldSuspensedAt:
		m.ClearSuspensedAt()
		return nil
	}
	return fmt.Errorf("unknown Enterprise nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnterpriseMutation) ResetField(name string) error {
	switch name {
	case enterprise.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case enterprise.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case enterprise.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case enterprise.FieldCreator:
		m.ResetCreator()
		return nil
	case enterprise.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case enterprise.FieldRemark:
		m.ResetRemark()
		return nil
	case enterprise.FieldCityID:
		m.ResetCityID()
		return nil
	case enterprise.FieldName:
		m.ResetName()
		return nil
	case enterprise.FieldCompanyName:
		m.ResetCompanyName()
		return nil
	case enterprise.FieldStatus:
		m.ResetStatus()
		return nil
	case enterprise.FieldContactName:
		m.ResetContactName()
		return nil
	case enterprise.FieldContactPhone:
		m.ResetContactPhone()
		return nil
	case enterprise.FieldIdcardNumber:
		m.ResetIdcardNumber()
		return nil
	case enterprise.FieldAddress:
		m.ResetAddress()
		return nil
	case enterprise.FieldPayment:
		m.ResetPayment()
		return nil
	case enterprise.FieldDeposit:
		m.ResetDeposit()
		return nil
	case enterprise.FieldBalance:
		m.ResetBalance()
		return nil
	case enterprise.FieldPrepaymentTotal:
		m.ResetPrepaymentTotal()
		return nil
	case enterprise.FieldSuspensedAt:
		m.ResetSuspensedAt()
		return nil
	}
	return fmt.Errorf("unknown Enterprise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnterpriseMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.city != nil {
		edges = append(edges, enterprise.EdgeCity)
	}
	if m.riders != nil {
		edges = append(edges, enterprise.EdgeRiders)
	}
	if m.contracts != nil {
		edges = append(edges, enterprise.EdgeContracts)
	}
	if m.prices != nil {
		edges = append(edges, enterprise.EdgePrices)
	}
	if m.subscribes != nil {
		edges = append(edges, enterprise.EdgeSubscribes)
	}
	if m.statements != nil {
		edges = append(edges, enterprise.EdgeStatements)
	}
	if m.stations != nil {
		edges = append(edges, enterprise.EdgeStations)
	}
	if m.bills != nil {
		edges = append(edges, enterprise.EdgeBills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnterpriseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enterprise.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case enterprise.EdgeRiders:
		ids := make([]ent.Value, 0, len(m.riders))
		for id := range m.riders {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.contracts))
		for id := range m.contracts {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgePrices:
		ids := make([]ent.Value, 0, len(m.prices))
		for id := range m.prices {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeSubscribes:
		ids := make([]ent.Value, 0, len(m.subscribes))
		for id := range m.subscribes {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeStatements:
		ids := make([]ent.Value, 0, len(m.statements))
		for id := range m.statements {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeStations:
		ids := make([]ent.Value, 0, len(m.stations))
		for id := range m.stations {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeBills:
		ids := make([]ent.Value, 0, len(m.bills))
		for id := range m.bills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnterpriseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedriders != nil {
		edges = append(edges, enterprise.EdgeRiders)
	}
	if m.removedcontracts != nil {
		edges = append(edges, enterprise.EdgeContracts)
	}
	if m.removedprices != nil {
		edges = append(edges, enterprise.EdgePrices)
	}
	if m.removedsubscribes != nil {
		edges = append(edges, enterprise.EdgeSubscribes)
	}
	if m.removedstatements != nil {
		edges = append(edges, enterprise.EdgeStatements)
	}
	if m.removedstations != nil {
		edges = append(edges, enterprise.EdgeStations)
	}
	if m.removedbills != nil {
		edges = append(edges, enterprise.EdgeBills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnterpriseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case enterprise.EdgeRiders:
		ids := make([]ent.Value, 0, len(m.removedriders))
		for id := range m.removedriders {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeContracts:
		ids := make([]ent.Value, 0, len(m.removedcontracts))
		for id := range m.removedcontracts {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgePrices:
		ids := make([]ent.Value, 0, len(m.removedprices))
		for id := range m.removedprices {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeSubscribes:
		ids := make([]ent.Value, 0, len(m.removedsubscribes))
		for id := range m.removedsubscribes {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeStatements:
		ids := make([]ent.Value, 0, len(m.removedstatements))
		for id := range m.removedstatements {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeStations:
		ids := make([]ent.Value, 0, len(m.removedstations))
		for id := range m.removedstations {
			ids = append(ids, id)
		}
		return ids
	case enterprise.EdgeBills:
		ids := make([]ent.Value, 0, len(m.removedbills))
		for id := range m.removedbills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnterpriseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedcity {
		edges = append(edges, enterprise.EdgeCity)
	}
	if m.clearedriders {
		edges = append(edges, enterprise.EdgeRiders)
	}
	if m.clearedcontracts {
		edges = append(edges, enterprise.EdgeContracts)
	}
	if m.clearedprices {
		edges = append(edges, enterprise.EdgePrices)
	}
	if m.clearedsubscribes {
		edges = append(edges, enterprise.EdgeSubscribes)
	}
	if m.clearedstatements {
		edges = append(edges, enterprise.EdgeStatements)
	}
	if m.clearedstations {
		edges = append(edges, enterprise.EdgeStations)
	}
	if m.clearedbills {
		edges = append(edges, enterprise.EdgeBills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnterpriseMutation) EdgeCleared(name string) bool {
	switch name {
	case enterprise.EdgeCity:
		return m.clearedcity
	case enterprise.EdgeRiders:
		return m.clearedriders
	case enterprise.EdgeContracts:
		return m.clearedcontracts
	case enterprise.EdgePrices:
		return m.clearedprices
	case enterprise.EdgeSubscribes:
		return m.clearedsubscribes
	case enterprise.EdgeStatements:
		return m.clearedstatements
	case enterprise.EdgeStations:
		return m.clearedstations
	case enterprise.EdgeBills:
		return m.clearedbills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnterpriseMutation) ClearEdge(name string) error {
	switch name {
	case enterprise.EdgeCity:
		m.ClearCity()
		return nil
	}
	return fmt.Errorf("unknown Enterprise unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnterpriseMutation) ResetEdge(name string) error {
	switch name {
	case enterprise.EdgeCity:
		m.ResetCity()
		return nil
	case enterprise.EdgeRiders:
		m.ResetRiders()
		return nil
	case enterprise.EdgeContracts:
		m.ResetContracts()
		return nil
	case enterprise.EdgePrices:
		m.ResetPrices()
		return nil
	case enterprise.EdgeSubscribes:
		m.ResetSubscribes()
		return nil
	case enterprise.EdgeStatements:
		m.ResetStatements()
		return nil
	case enterprise.EdgeStations:
		m.ResetStations()
		return nil
	case enterprise.EdgeBills:
		m.ResetBills()
		return nil
	}
	return fmt.Errorf("unknown Enterprise edge %s", name)
}

