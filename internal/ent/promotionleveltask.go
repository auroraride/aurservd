// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionleveltask"
)

// PromotionLevelTask is the model entity for the PromotionLevelTask schema.
type PromotionLevelTask struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 任务名称
	Name string `json:"name,omitempty"`
	// 任务描述
	Description string `json:"description,omitempty"`
	// 完成条件 1: 签约 2:续费
	Type uint8 `json:"type,omitempty"`
	// 任务成长值
	GrowthValue uint64 `json:"growth_value,omitempty"`
	// 任务key
	Key          string `json:"key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionLevelTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionleveltask.FieldCreator, promotionleveltask.FieldLastModifier:
			values[i] = new([]byte)
		case promotionleveltask.FieldID, promotionleveltask.FieldType, promotionleveltask.FieldGrowthValue:
			values[i] = new(sql.NullInt64)
		case promotionleveltask.FieldRemark, promotionleveltask.FieldName, promotionleveltask.FieldDescription, promotionleveltask.FieldKey:
			values[i] = new(sql.NullString)
		case promotionleveltask.FieldCreatedAt, promotionleveltask.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionLevelTask fields.
func (plt *PromotionLevelTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionleveltask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			plt.ID = uint64(value.Int64)
		case promotionleveltask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				plt.CreatedAt = value.Time
			}
		case promotionleveltask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				plt.UpdatedAt = value.Time
			}
		case promotionleveltask.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &plt.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionleveltask.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &plt.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionleveltask.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				plt.Remark = value.String
			}
		case promotionleveltask.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				plt.Name = value.String
			}
		case promotionleveltask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				plt.Description = value.String
			}
		case promotionleveltask.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				plt.Type = uint8(value.Int64)
			}
		case promotionleveltask.FieldGrowthValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field growth_value", values[i])
			} else if value.Valid {
				plt.GrowthValue = uint64(value.Int64)
			}
		case promotionleveltask.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				plt.Key = value.String
			}
		default:
			plt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionLevelTask.
// This includes values selected through modifiers, order, etc.
func (plt *PromotionLevelTask) Value(name string) (ent.Value, error) {
	return plt.selectValues.Get(name)
}

// Update returns a builder for updating this PromotionLevelTask.
// Note that you need to call PromotionLevelTask.Unwrap() before calling this method if this PromotionLevelTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (plt *PromotionLevelTask) Update() *PromotionLevelTaskUpdateOne {
	return NewPromotionLevelTaskClient(plt.config).UpdateOne(plt)
}

// Unwrap unwraps the PromotionLevelTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (plt *PromotionLevelTask) Unwrap() *PromotionLevelTask {
	_tx, ok := plt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionLevelTask is not a transactional entity")
	}
	plt.config.driver = _tx.drv
	return plt
}

// String implements the fmt.Stringer.
func (plt *PromotionLevelTask) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionLevelTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", plt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(plt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(plt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", plt.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", plt.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(plt.Remark)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(plt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(plt.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", plt.Type))
	builder.WriteString(", ")
	builder.WriteString("growth_value=")
	builder.WriteString(fmt.Sprintf("%v", plt.GrowthValue))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(plt.Key)
	builder.WriteByte(')')
	return builder.String()
}

// PromotionLevelTasks is a parsable slice of PromotionLevelTask.
type PromotionLevelTasks []*PromotionLevelTask
