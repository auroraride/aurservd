// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
)

// EnterpriseBatterySwap is the model entity for the EnterpriseBatterySwap schema.
type EnterpriseBatterySwap struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ExchangeID holds the value of the "exchange_id" field.
	ExchangeID uint64 `json:"exchange_id,omitempty"`
	// 电柜ID
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// 放入的电池ID
	PutinBatteryID uint64 `json:"putin_battery_id,omitempty"`
	// 放入的电池编码
	PutinBatterySn string `json:"putin_battery_sn,omitempty"`
	// 放入归属团签ID, 空值是平台骑手放入
	PutinEnterpriseID *uint64 `json:"putin_enterprise_id,omitempty"`
	// 放入归属站点ID, 空值是平台骑手放入
	PutinStationID *uint64 `json:"putin_station_id,omitempty"`
	// 取出的电池ID
	PutoutBatteryID uint64 `json:"putout_battery_id,omitempty"`
	// 取出的电池编码
	PutoutBatterySn string `json:"putout_battery_sn,omitempty"`
	// 取出归属团签ID, 空值是从平台电柜取出
	PutoutEnterpriseID *uint64 `json:"putout_enterprise_id,omitempty"`
	// 取出归属站点ID, 空值是从平台电柜取出
	PutoutStationID *uint64 `json:"putout_station_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseBatterySwapQuery when eager-loading is set.
	Edges        EnterpriseBatterySwapEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnterpriseBatterySwapEdges holds the relations/edges for other nodes in the graph.
type EnterpriseBatterySwapEdges struct {
	// Exchange holds the value of the exchange edge.
	Exchange *Exchange `json:"exchange,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// PutinBattery holds the value of the putin_battery edge.
	PutinBattery *Battery `json:"putin_battery,omitempty"`
	// PutinEnterprise holds the value of the putin_enterprise edge.
	PutinEnterprise *Enterprise `json:"putin_enterprise,omitempty"`
	// PutinStation holds the value of the putin_station edge.
	PutinStation *EnterpriseStation `json:"putin_station,omitempty"`
	// PutoutBattery holds the value of the putout_battery edge.
	PutoutBattery *Battery `json:"putout_battery,omitempty"`
	// PutoutEnterprise holds the value of the putout_enterprise edge.
	PutoutEnterprise *Enterprise `json:"putout_enterprise,omitempty"`
	// PutoutStation holds the value of the putout_station edge.
	PutoutStation *EnterpriseStation `json:"putout_station,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// ExchangeOrErr returns the Exchange value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) ExchangeOrErr() (*Exchange, error) {
	if e.loadedTypes[0] {
		if e.Exchange == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exchange.Label}
		}
		return e.Exchange, nil
	}
	return nil, &NotLoadedError{edge: "exchange"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[1] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// PutinBatteryOrErr returns the PutinBattery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutinBatteryOrErr() (*Battery, error) {
	if e.loadedTypes[2] {
		if e.PutinBattery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: battery.Label}
		}
		return e.PutinBattery, nil
	}
	return nil, &NotLoadedError{edge: "putin_battery"}
}

// PutinEnterpriseOrErr returns the PutinEnterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutinEnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[3] {
		if e.PutinEnterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.PutinEnterprise, nil
	}
	return nil, &NotLoadedError{edge: "putin_enterprise"}
}

// PutinStationOrErr returns the PutinStation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutinStationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[4] {
		if e.PutinStation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.PutinStation, nil
	}
	return nil, &NotLoadedError{edge: "putin_station"}
}

// PutoutBatteryOrErr returns the PutoutBattery value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutoutBatteryOrErr() (*Battery, error) {
	if e.loadedTypes[5] {
		if e.PutoutBattery == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: battery.Label}
		}
		return e.PutoutBattery, nil
	}
	return nil, &NotLoadedError{edge: "putout_battery"}
}

// PutoutEnterpriseOrErr returns the PutoutEnterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutoutEnterpriseOrErr() (*Enterprise, error) {
	if e.loadedTypes[6] {
		if e.PutoutEnterprise == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprise.Label}
		}
		return e.PutoutEnterprise, nil
	}
	return nil, &NotLoadedError{edge: "putout_enterprise"}
}

// PutoutStationOrErr returns the PutoutStation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseBatterySwapEdges) PutoutStationOrErr() (*EnterpriseStation, error) {
	if e.loadedTypes[7] {
		if e.PutoutStation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enterprisestation.Label}
		}
		return e.PutoutStation, nil
	}
	return nil, &NotLoadedError{edge: "putout_station"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterpriseBatterySwap) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprisebatteryswap.FieldID, enterprisebatteryswap.FieldExchangeID, enterprisebatteryswap.FieldCabinetID, enterprisebatteryswap.FieldPutinBatteryID, enterprisebatteryswap.FieldPutinEnterpriseID, enterprisebatteryswap.FieldPutinStationID, enterprisebatteryswap.FieldPutoutBatteryID, enterprisebatteryswap.FieldPutoutEnterpriseID, enterprisebatteryswap.FieldPutoutStationID:
			values[i] = new(sql.NullInt64)
		case enterprisebatteryswap.FieldPutinBatterySn, enterprisebatteryswap.FieldPutoutBatterySn:
			values[i] = new(sql.NullString)
		case enterprisebatteryswap.FieldCreatedAt, enterprisebatteryswap.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterpriseBatterySwap fields.
func (ebs *EnterpriseBatterySwap) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprisebatteryswap.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ebs.ID = uint64(value.Int64)
		case enterprisebatteryswap.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ebs.CreatedAt = value.Time
			}
		case enterprisebatteryswap.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ebs.UpdatedAt = value.Time
			}
		case enterprisebatteryswap.FieldExchangeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exchange_id", values[i])
			} else if value.Valid {
				ebs.ExchangeID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				ebs.CabinetID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutinBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putin_battery_id", values[i])
			} else if value.Valid {
				ebs.PutinBatteryID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutinBatterySn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field putin_battery_sn", values[i])
			} else if value.Valid {
				ebs.PutinBatterySn = value.String
			}
		case enterprisebatteryswap.FieldPutinEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putin_enterprise_id", values[i])
			} else if value.Valid {
				ebs.PutinEnterpriseID = new(uint64)
				*ebs.PutinEnterpriseID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutinStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putin_station_id", values[i])
			} else if value.Valid {
				ebs.PutinStationID = new(uint64)
				*ebs.PutinStationID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutoutBatteryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putout_battery_id", values[i])
			} else if value.Valid {
				ebs.PutoutBatteryID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutoutBatterySn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field putout_battery_sn", values[i])
			} else if value.Valid {
				ebs.PutoutBatterySn = value.String
			}
		case enterprisebatteryswap.FieldPutoutEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putout_enterprise_id", values[i])
			} else if value.Valid {
				ebs.PutoutEnterpriseID = new(uint64)
				*ebs.PutoutEnterpriseID = uint64(value.Int64)
			}
		case enterprisebatteryswap.FieldPutoutStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field putout_station_id", values[i])
			} else if value.Valid {
				ebs.PutoutStationID = new(uint64)
				*ebs.PutoutStationID = uint64(value.Int64)
			}
		default:
			ebs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnterpriseBatterySwap.
// This includes values selected through modifiers, order, etc.
func (ebs *EnterpriseBatterySwap) Value(name string) (ent.Value, error) {
	return ebs.selectValues.Get(name)
}

// QueryExchange queries the "exchange" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryExchange() *ExchangeQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryExchange(ebs)
}

// QueryCabinet queries the "cabinet" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryCabinet() *CabinetQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryCabinet(ebs)
}

// QueryPutinBattery queries the "putin_battery" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutinBattery() *BatteryQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutinBattery(ebs)
}

// QueryPutinEnterprise queries the "putin_enterprise" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutinEnterprise() *EnterpriseQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutinEnterprise(ebs)
}

// QueryPutinStation queries the "putin_station" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutinStation() *EnterpriseStationQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutinStation(ebs)
}

// QueryPutoutBattery queries the "putout_battery" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutoutBattery() *BatteryQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutoutBattery(ebs)
}

// QueryPutoutEnterprise queries the "putout_enterprise" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutoutEnterprise() *EnterpriseQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutoutEnterprise(ebs)
}

// QueryPutoutStation queries the "putout_station" edge of the EnterpriseBatterySwap entity.
func (ebs *EnterpriseBatterySwap) QueryPutoutStation() *EnterpriseStationQuery {
	return NewEnterpriseBatterySwapClient(ebs.config).QueryPutoutStation(ebs)
}

// Update returns a builder for updating this EnterpriseBatterySwap.
// Note that you need to call EnterpriseBatterySwap.Unwrap() before calling this method if this EnterpriseBatterySwap
// was returned from a transaction, and the transaction was committed or rolled back.
func (ebs *EnterpriseBatterySwap) Update() *EnterpriseBatterySwapUpdateOne {
	return NewEnterpriseBatterySwapClient(ebs.config).UpdateOne(ebs)
}

// Unwrap unwraps the EnterpriseBatterySwap entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ebs *EnterpriseBatterySwap) Unwrap() *EnterpriseBatterySwap {
	_tx, ok := ebs.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterpriseBatterySwap is not a transactional entity")
	}
	ebs.config.driver = _tx.drv
	return ebs
}

// String implements the fmt.Stringer.
func (ebs *EnterpriseBatterySwap) String() string {
	var builder strings.Builder
	builder.WriteString("EnterpriseBatterySwap(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ebs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ebs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ebs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("exchange_id=")
	builder.WriteString(fmt.Sprintf("%v", ebs.ExchangeID))
	builder.WriteString(", ")
	builder.WriteString("cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", ebs.CabinetID))
	builder.WriteString(", ")
	builder.WriteString("putin_battery_id=")
	builder.WriteString(fmt.Sprintf("%v", ebs.PutinBatteryID))
	builder.WriteString(", ")
	builder.WriteString("putin_battery_sn=")
	builder.WriteString(ebs.PutinBatterySn)
	builder.WriteString(", ")
	if v := ebs.PutinEnterpriseID; v != nil {
		builder.WriteString("putin_enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ebs.PutinStationID; v != nil {
		builder.WriteString("putin_station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("putout_battery_id=")
	builder.WriteString(fmt.Sprintf("%v", ebs.PutoutBatteryID))
	builder.WriteString(", ")
	builder.WriteString("putout_battery_sn=")
	builder.WriteString(ebs.PutoutBatterySn)
	builder.WriteString(", ")
	if v := ebs.PutoutEnterpriseID; v != nil {
		builder.WriteString("putout_enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ebs.PutoutStationID; v != nil {
		builder.WriteString("putout_station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EnterpriseBatterySwaps is a parsable slice of EnterpriseBatterySwap.
type EnterpriseBatterySwaps []*EnterpriseBatterySwap
