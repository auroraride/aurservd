// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EbikeBrandAttributeUpdate is the builder for updating EbikeBrandAttribute entities.
type EbikeBrandAttributeUpdate struct {
	config
	hooks     []Hook
	mutation  *EbikeBrandAttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EbikeBrandAttributeUpdate builder.
func (ebau *EbikeBrandAttributeUpdate) Where(ps ...predicate.EbikeBrandAttribute) *EbikeBrandAttributeUpdate {
	ebau.mutation.Where(ps...)
	return ebau
}

// SetUpdatedAt sets the "updated_at" field.
func (ebau *EbikeBrandAttributeUpdate) SetUpdatedAt(t time.Time) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetUpdatedAt(t)
	return ebau
}

// SetDeletedAt sets the "deleted_at" field.
func (ebau *EbikeBrandAttributeUpdate) SetDeletedAt(t time.Time) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetDeletedAt(t)
	return ebau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebau *EbikeBrandAttributeUpdate) SetNillableDeletedAt(t *time.Time) *EbikeBrandAttributeUpdate {
	if t != nil {
		ebau.SetDeletedAt(*t)
	}
	return ebau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ebau *EbikeBrandAttributeUpdate) ClearDeletedAt() *EbikeBrandAttributeUpdate {
	ebau.mutation.ClearDeletedAt()
	return ebau
}

// SetLastModifier sets the "last_modifier" field.
func (ebau *EbikeBrandAttributeUpdate) SetLastModifier(m *model.Modifier) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetLastModifier(m)
	return ebau
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ebau *EbikeBrandAttributeUpdate) ClearLastModifier() *EbikeBrandAttributeUpdate {
	ebau.mutation.ClearLastModifier()
	return ebau
}

// SetRemark sets the "remark" field.
func (ebau *EbikeBrandAttributeUpdate) SetRemark(s string) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetRemark(s)
	return ebau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebau *EbikeBrandAttributeUpdate) SetNillableRemark(s *string) *EbikeBrandAttributeUpdate {
	if s != nil {
		ebau.SetRemark(*s)
	}
	return ebau
}

// ClearRemark clears the value of the "remark" field.
func (ebau *EbikeBrandAttributeUpdate) ClearRemark() *EbikeBrandAttributeUpdate {
	ebau.mutation.ClearRemark()
	return ebau
}

// SetName sets the "name" field.
func (ebau *EbikeBrandAttributeUpdate) SetName(s string) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetName(s)
	return ebau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ebau *EbikeBrandAttributeUpdate) SetNillableName(s *string) *EbikeBrandAttributeUpdate {
	if s != nil {
		ebau.SetName(*s)
	}
	return ebau
}

// SetValue sets the "value" field.
func (ebau *EbikeBrandAttributeUpdate) SetValue(s string) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetValue(s)
	return ebau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ebau *EbikeBrandAttributeUpdate) SetNillableValue(s *string) *EbikeBrandAttributeUpdate {
	if s != nil {
		ebau.SetValue(*s)
	}
	return ebau
}

// SetBrandID sets the "brand_id" field.
func (ebau *EbikeBrandAttributeUpdate) SetBrandID(u uint64) *EbikeBrandAttributeUpdate {
	ebau.mutation.SetBrandID(u)
	return ebau
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (ebau *EbikeBrandAttributeUpdate) SetNillableBrandID(u *uint64) *EbikeBrandAttributeUpdate {
	if u != nil {
		ebau.SetBrandID(*u)
	}
	return ebau
}

// ClearBrandID clears the value of the "brand_id" field.
func (ebau *EbikeBrandAttributeUpdate) ClearBrandID() *EbikeBrandAttributeUpdate {
	ebau.mutation.ClearBrandID()
	return ebau
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ebau *EbikeBrandAttributeUpdate) SetBrand(e *EbikeBrand) *EbikeBrandAttributeUpdate {
	return ebau.SetBrandID(e.ID)
}

// Mutation returns the EbikeBrandAttributeMutation object of the builder.
func (ebau *EbikeBrandAttributeUpdate) Mutation() *EbikeBrandAttributeMutation {
	return ebau.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (ebau *EbikeBrandAttributeUpdate) ClearBrand() *EbikeBrandAttributeUpdate {
	ebau.mutation.ClearBrand()
	return ebau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ebau *EbikeBrandAttributeUpdate) Save(ctx context.Context) (int, error) {
	if err := ebau.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ebau.sqlSave, ebau.mutation, ebau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebau *EbikeBrandAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := ebau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ebau *EbikeBrandAttributeUpdate) Exec(ctx context.Context) error {
	_, err := ebau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebau *EbikeBrandAttributeUpdate) ExecX(ctx context.Context) {
	if err := ebau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebau *EbikeBrandAttributeUpdate) defaults() error {
	if _, ok := ebau.mutation.UpdatedAt(); !ok {
		if ebikebrandattribute.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrandattribute.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrandattribute.UpdateDefaultUpdatedAt()
		ebau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebau *EbikeBrandAttributeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeBrandAttributeUpdate {
	ebau.modifiers = append(ebau.modifiers, modifiers...)
	return ebau
}

func (ebau *EbikeBrandAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ebikebrandattribute.Table, ebikebrandattribute.Columns, sqlgraph.NewFieldSpec(ebikebrandattribute.FieldID, field.TypeUint64))
	if ps := ebau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebau.mutation.UpdatedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebau.mutation.DeletedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldDeletedAt, field.TypeTime, value)
	}
	if ebau.mutation.DeletedAtCleared() {
		_spec.ClearField(ebikebrandattribute.FieldDeletedAt, field.TypeTime)
	}
	if ebau.mutation.CreatorCleared() {
		_spec.ClearField(ebikebrandattribute.FieldCreator, field.TypeJSON)
	}
	if value, ok := ebau.mutation.LastModifier(); ok {
		_spec.SetField(ebikebrandattribute.FieldLastModifier, field.TypeJSON, value)
	}
	if ebau.mutation.LastModifierCleared() {
		_spec.ClearField(ebikebrandattribute.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ebau.mutation.Remark(); ok {
		_spec.SetField(ebikebrandattribute.FieldRemark, field.TypeString, value)
	}
	if ebau.mutation.RemarkCleared() {
		_spec.ClearField(ebikebrandattribute.FieldRemark, field.TypeString)
	}
	if value, ok := ebau.mutation.Name(); ok {
		_spec.SetField(ebikebrandattribute.FieldName, field.TypeString, value)
	}
	if value, ok := ebau.mutation.Value(); ok {
		_spec.SetField(ebikebrandattribute.FieldValue, field.TypeString, value)
	}
	if ebau.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ebikebrandattribute.BrandTable,
			Columns: []string{ebikebrandattribute.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebau.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ebikebrandattribute.BrandTable,
			Columns: []string{ebikebrandattribute.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ebau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebikebrandattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ebau.mutation.done = true
	return n, nil
}

// EbikeBrandAttributeUpdateOne is the builder for updating a single EbikeBrandAttribute entity.
type EbikeBrandAttributeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EbikeBrandAttributeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetUpdatedAt(t time.Time) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetUpdatedAt(t)
	return ebauo
}

// SetDeletedAt sets the "deleted_at" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetDeletedAt(t time.Time) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetDeletedAt(t)
	return ebauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebauo *EbikeBrandAttributeUpdateOne) SetNillableDeletedAt(t *time.Time) *EbikeBrandAttributeUpdateOne {
	if t != nil {
		ebauo.SetDeletedAt(*t)
	}
	return ebauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ebauo *EbikeBrandAttributeUpdateOne) ClearDeletedAt() *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.ClearDeletedAt()
	return ebauo
}

// SetLastModifier sets the "last_modifier" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetLastModifier(m *model.Modifier) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetLastModifier(m)
	return ebauo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ebauo *EbikeBrandAttributeUpdateOne) ClearLastModifier() *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.ClearLastModifier()
	return ebauo
}

// SetRemark sets the "remark" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetRemark(s string) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetRemark(s)
	return ebauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebauo *EbikeBrandAttributeUpdateOne) SetNillableRemark(s *string) *EbikeBrandAttributeUpdateOne {
	if s != nil {
		ebauo.SetRemark(*s)
	}
	return ebauo
}

// ClearRemark clears the value of the "remark" field.
func (ebauo *EbikeBrandAttributeUpdateOne) ClearRemark() *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.ClearRemark()
	return ebauo
}

// SetName sets the "name" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetName(s string) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetName(s)
	return ebauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ebauo *EbikeBrandAttributeUpdateOne) SetNillableName(s *string) *EbikeBrandAttributeUpdateOne {
	if s != nil {
		ebauo.SetName(*s)
	}
	return ebauo
}

// SetValue sets the "value" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetValue(s string) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetValue(s)
	return ebauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ebauo *EbikeBrandAttributeUpdateOne) SetNillableValue(s *string) *EbikeBrandAttributeUpdateOne {
	if s != nil {
		ebauo.SetValue(*s)
	}
	return ebauo
}

// SetBrandID sets the "brand_id" field.
func (ebauo *EbikeBrandAttributeUpdateOne) SetBrandID(u uint64) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.SetBrandID(u)
	return ebauo
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (ebauo *EbikeBrandAttributeUpdateOne) SetNillableBrandID(u *uint64) *EbikeBrandAttributeUpdateOne {
	if u != nil {
		ebauo.SetBrandID(*u)
	}
	return ebauo
}

// ClearBrandID clears the value of the "brand_id" field.
func (ebauo *EbikeBrandAttributeUpdateOne) ClearBrandID() *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.ClearBrandID()
	return ebauo
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (ebauo *EbikeBrandAttributeUpdateOne) SetBrand(e *EbikeBrand) *EbikeBrandAttributeUpdateOne {
	return ebauo.SetBrandID(e.ID)
}

// Mutation returns the EbikeBrandAttributeMutation object of the builder.
func (ebauo *EbikeBrandAttributeUpdateOne) Mutation() *EbikeBrandAttributeMutation {
	return ebauo.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (ebauo *EbikeBrandAttributeUpdateOne) ClearBrand() *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.ClearBrand()
	return ebauo
}

// Where appends a list predicates to the EbikeBrandAttributeUpdate builder.
func (ebauo *EbikeBrandAttributeUpdateOne) Where(ps ...predicate.EbikeBrandAttribute) *EbikeBrandAttributeUpdateOne {
	ebauo.mutation.Where(ps...)
	return ebauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ebauo *EbikeBrandAttributeUpdateOne) Select(field string, fields ...string) *EbikeBrandAttributeUpdateOne {
	ebauo.fields = append([]string{field}, fields...)
	return ebauo
}

// Save executes the query and returns the updated EbikeBrandAttribute entity.
func (ebauo *EbikeBrandAttributeUpdateOne) Save(ctx context.Context) (*EbikeBrandAttribute, error) {
	if err := ebauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ebauo.sqlSave, ebauo.mutation, ebauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ebauo *EbikeBrandAttributeUpdateOne) SaveX(ctx context.Context) *EbikeBrandAttribute {
	node, err := ebauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ebauo *EbikeBrandAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := ebauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebauo *EbikeBrandAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := ebauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebauo *EbikeBrandAttributeUpdateOne) defaults() error {
	if _, ok := ebauo.mutation.UpdatedAt(); !ok {
		if ebikebrandattribute.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrandattribute.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrandattribute.UpdateDefaultUpdatedAt()
		ebauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ebauo *EbikeBrandAttributeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeBrandAttributeUpdateOne {
	ebauo.modifiers = append(ebauo.modifiers, modifiers...)
	return ebauo
}

func (ebauo *EbikeBrandAttributeUpdateOne) sqlSave(ctx context.Context) (_node *EbikeBrandAttribute, err error) {
	_spec := sqlgraph.NewUpdateSpec(ebikebrandattribute.Table, ebikebrandattribute.Columns, sqlgraph.NewFieldSpec(ebikebrandattribute.FieldID, field.TypeUint64))
	id, ok := ebauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EbikeBrandAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ebauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebikebrandattribute.FieldID)
		for _, f := range fields {
			if !ebikebrandattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ebikebrandattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ebauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ebauo.mutation.UpdatedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ebauo.mutation.DeletedAt(); ok {
		_spec.SetField(ebikebrandattribute.FieldDeletedAt, field.TypeTime, value)
	}
	if ebauo.mutation.DeletedAtCleared() {
		_spec.ClearField(ebikebrandattribute.FieldDeletedAt, field.TypeTime)
	}
	if ebauo.mutation.CreatorCleared() {
		_spec.ClearField(ebikebrandattribute.FieldCreator, field.TypeJSON)
	}
	if value, ok := ebauo.mutation.LastModifier(); ok {
		_spec.SetField(ebikebrandattribute.FieldLastModifier, field.TypeJSON, value)
	}
	if ebauo.mutation.LastModifierCleared() {
		_spec.ClearField(ebikebrandattribute.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ebauo.mutation.Remark(); ok {
		_spec.SetField(ebikebrandattribute.FieldRemark, field.TypeString, value)
	}
	if ebauo.mutation.RemarkCleared() {
		_spec.ClearField(ebikebrandattribute.FieldRemark, field.TypeString)
	}
	if value, ok := ebauo.mutation.Name(); ok {
		_spec.SetField(ebikebrandattribute.FieldName, field.TypeString, value)
	}
	if value, ok := ebauo.mutation.Value(); ok {
		_spec.SetField(ebikebrandattribute.FieldValue, field.TypeString, value)
	}
	if ebauo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ebikebrandattribute.BrandTable,
			Columns: []string{ebikebrandattribute.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ebauo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ebikebrandattribute.BrandTable,
			Columns: []string{ebikebrandattribute.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ebikebrand.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ebauo.modifiers...)
	_node = &EbikeBrandAttribute{config: ebauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ebauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebikebrandattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ebauo.mutation.done = true
	return _node, nil
}
