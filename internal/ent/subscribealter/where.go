// Code generated by ent, DO NOT EDIT.

package subscribealter

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldUpdatedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldRemark, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldRiderID, v))
}

// ManagerID applies equality check predicate on the "manager_id" field. It's identical to ManagerIDEQ.
func ManagerID(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldManagerID, v))
}

// EnterpriseID applies equality check predicate on the "enterprise_id" field. It's identical to EnterpriseIDEQ.
func EnterpriseID(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldEnterpriseID, v))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldAgentID, v))
}

// SubscribeID applies equality check predicate on the "subscribe_id" field. It's identical to SubscribeIDEQ.
func SubscribeID(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldSubscribeID, v))
}

// Days applies equality check predicate on the "days" field. It's identical to DaysEQ.
func Days(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldDays, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldStatus, v))
}

// ReviewTime applies equality check predicate on the "review_time" field. It's identical to ReviewTimeEQ.
func ReviewTime(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldReviewTime, v))
}

// SubscribeEndAt applies equality check predicate on the "subscribe_end_at" field. It's identical to SubscribeEndAtEQ.
func SubscribeEndAt(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldSubscribeEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldContainsFold(FieldRemark, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldRiderID, vs...))
}

// ManagerIDEQ applies the EQ predicate on the "manager_id" field.
func ManagerIDEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldManagerID, v))
}

// ManagerIDNEQ applies the NEQ predicate on the "manager_id" field.
func ManagerIDNEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldManagerID, v))
}

// ManagerIDIn applies the In predicate on the "manager_id" field.
func ManagerIDIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldManagerID, vs...))
}

// ManagerIDNotIn applies the NotIn predicate on the "manager_id" field.
func ManagerIDNotIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldManagerID, vs...))
}

// ManagerIDIsNil applies the IsNil predicate on the "manager_id" field.
func ManagerIDIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldManagerID))
}

// ManagerIDNotNil applies the NotNil predicate on the "manager_id" field.
func ManagerIDNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldManagerID))
}

// EnterpriseIDEQ applies the EQ predicate on the "enterprise_id" field.
func EnterpriseIDEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldEnterpriseID, v))
}

// EnterpriseIDNEQ applies the NEQ predicate on the "enterprise_id" field.
func EnterpriseIDNEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldEnterpriseID, v))
}

// EnterpriseIDIn applies the In predicate on the "enterprise_id" field.
func EnterpriseIDIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDNotIn applies the NotIn predicate on the "enterprise_id" field.
func EnterpriseIDNotIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldEnterpriseID, vs...))
}

// EnterpriseIDIsNil applies the IsNil predicate on the "enterprise_id" field.
func EnterpriseIDIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldEnterpriseID))
}

// EnterpriseIDNotNil applies the NotNil predicate on the "enterprise_id" field.
func EnterpriseIDNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldEnterpriseID))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDIsNil applies the IsNil predicate on the "agent_id" field.
func AgentIDIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldAgentID))
}

// AgentIDNotNil applies the NotNil predicate on the "agent_id" field.
func AgentIDNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldAgentID))
}

// SubscribeIDEQ applies the EQ predicate on the "subscribe_id" field.
func SubscribeIDEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldSubscribeID, v))
}

// SubscribeIDNEQ applies the NEQ predicate on the "subscribe_id" field.
func SubscribeIDNEQ(v uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldSubscribeID, v))
}

// SubscribeIDIn applies the In predicate on the "subscribe_id" field.
func SubscribeIDIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldSubscribeID, vs...))
}

// SubscribeIDNotIn applies the NotIn predicate on the "subscribe_id" field.
func SubscribeIDNotIn(vs ...uint64) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldSubscribeID, vs...))
}

// DaysEQ applies the EQ predicate on the "days" field.
func DaysEQ(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldDays, v))
}

// DaysNEQ applies the NEQ predicate on the "days" field.
func DaysNEQ(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldDays, v))
}

// DaysIn applies the In predicate on the "days" field.
func DaysIn(vs ...int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldDays, vs...))
}

// DaysNotIn applies the NotIn predicate on the "days" field.
func DaysNotIn(vs ...int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldDays, vs...))
}

// DaysGT applies the GT predicate on the "days" field.
func DaysGT(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldDays, v))
}

// DaysGTE applies the GTE predicate on the "days" field.
func DaysGTE(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldDays, v))
}

// DaysLT applies the LT predicate on the "days" field.
func DaysLT(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldDays, v))
}

// DaysLTE applies the LTE predicate on the "days" field.
func DaysLTE(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldDays, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldStatus, v))
}

// ReviewTimeEQ applies the EQ predicate on the "review_time" field.
func ReviewTimeEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldReviewTime, v))
}

// ReviewTimeNEQ applies the NEQ predicate on the "review_time" field.
func ReviewTimeNEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldReviewTime, v))
}

// ReviewTimeIn applies the In predicate on the "review_time" field.
func ReviewTimeIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldReviewTime, vs...))
}

// ReviewTimeNotIn applies the NotIn predicate on the "review_time" field.
func ReviewTimeNotIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldReviewTime, vs...))
}

// ReviewTimeGT applies the GT predicate on the "review_time" field.
func ReviewTimeGT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldReviewTime, v))
}

// ReviewTimeGTE applies the GTE predicate on the "review_time" field.
func ReviewTimeGTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldReviewTime, v))
}

// ReviewTimeLT applies the LT predicate on the "review_time" field.
func ReviewTimeLT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldReviewTime, v))
}

// ReviewTimeLTE applies the LTE predicate on the "review_time" field.
func ReviewTimeLTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldReviewTime, v))
}

// ReviewTimeIsNil applies the IsNil predicate on the "review_time" field.
func ReviewTimeIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldReviewTime))
}

// ReviewTimeNotNil applies the NotNil predicate on the "review_time" field.
func ReviewTimeNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldReviewTime))
}

// SubscribeEndAtEQ applies the EQ predicate on the "subscribe_end_at" field.
func SubscribeEndAtEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldEQ(FieldSubscribeEndAt, v))
}

// SubscribeEndAtNEQ applies the NEQ predicate on the "subscribe_end_at" field.
func SubscribeEndAtNEQ(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNEQ(FieldSubscribeEndAt, v))
}

// SubscribeEndAtIn applies the In predicate on the "subscribe_end_at" field.
func SubscribeEndAtIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIn(FieldSubscribeEndAt, vs...))
}

// SubscribeEndAtNotIn applies the NotIn predicate on the "subscribe_end_at" field.
func SubscribeEndAtNotIn(vs ...time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotIn(FieldSubscribeEndAt, vs...))
}

// SubscribeEndAtGT applies the GT predicate on the "subscribe_end_at" field.
func SubscribeEndAtGT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGT(FieldSubscribeEndAt, v))
}

// SubscribeEndAtGTE applies the GTE predicate on the "subscribe_end_at" field.
func SubscribeEndAtGTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldGTE(FieldSubscribeEndAt, v))
}

// SubscribeEndAtLT applies the LT predicate on the "subscribe_end_at" field.
func SubscribeEndAtLT(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLT(FieldSubscribeEndAt, v))
}

// SubscribeEndAtLTE applies the LTE predicate on the "subscribe_end_at" field.
func SubscribeEndAtLTE(v time.Time) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldLTE(FieldSubscribeEndAt, v))
}

// SubscribeEndAtIsNil applies the IsNil predicate on the "subscribe_end_at" field.
func SubscribeEndAtIsNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldIsNull(FieldSubscribeEndAt))
}

// SubscribeEndAtNotNil applies the NotNil predicate on the "subscribe_end_at" field.
func SubscribeEndAtNotNil() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.FieldNotNull(FieldSubscribeEndAt))
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := newRiderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasManager applies the HasEdge predicate on the "manager" edge.
func HasManager() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ManagerTable, ManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasManagerWith applies the HasEdge predicate on the "manager" edge with a given conditions (other predicates).
func HasManagerWith(preds ...predicate.Manager) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := newManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEnterprise applies the HasEdge predicate on the "enterprise" edge.
func HasEnterprise() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EnterpriseTable, EnterpriseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnterpriseWith applies the HasEdge predicate on the "enterprise" edge with a given conditions (other predicates).
func HasEnterpriseWith(preds ...predicate.Enterprise) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := newEnterpriseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agent) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribe applies the HasEdge predicate on the "subscribe" edge.
func HasSubscribe() predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribeWith applies the HasEdge predicate on the "subscribe" edge with a given conditions (other predicates).
func HasSubscribeWith(preds ...predicate.Subscribe) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(func(s *sql.Selector) {
		step := newSubscribeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubscribeAlter) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubscribeAlter) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubscribeAlter) predicate.SubscribeAlter {
	return predicate.SubscribeAlter(sql.NotPredicates(p))
}
