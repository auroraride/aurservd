// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
)

// Enterprise is the model entity for the Enterprise schema.
type Enterprise struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// CityID holds the value of the "city_id" field.
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// Name holds the value of the "name" field.
	// 企业名称
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	// 合作状态 0未合作 1合作中 2暂停合作
	Status uint8 `json:"status,omitempty"`
	// ContactName holds the value of the "contact_name" field.
	// 联系人姓名
	ContactName string `json:"contact_name,omitempty"`
	// ContactPhone holds the value of the "contact_phone" field.
	// 联系人电话
	ContactPhone string `json:"contact_phone,omitempty"`
	// IdcardNumber holds the value of the "idcard_number" field.
	// 身份证号码
	IdcardNumber string `json:"idcard_number,omitempty"`
	// Address holds the value of the "address" field.
	// 地址
	Address string `json:"address,omitempty"`
	// Payment holds the value of the "payment" field.
	// 付费方式 1预付费 2后付费
	Payment uint8 `json:"payment,omitempty"`
	// Deposit holds the value of the "deposit" field.
	// 押金
	Deposit float64 `json:"deposit,omitempty"`
	// Balance holds the value of the "balance" field.
	// 账户余额
	Balance float64 `json:"balance,omitempty"`
	// SuspensedAt holds the value of the "suspensed_at" field.
	// 暂停合作时间
	SuspensedAt *time.Time `json:"suspensed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseQuery when eager-loading is set.
	Edges EnterpriseEdges `json:"edges"`
}

// EnterpriseEdges holds the relations/edges for other nodes in the graph.
type EnterpriseEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Riders holds the value of the riders edge.
	Riders []*Rider `json:"riders,omitempty"`
	// Contracts holds the value of the contracts edge.
	Contracts []*EnterpriseContract `json:"contracts,omitempty"`
	// Prices holds the value of the prices edge.
	Prices []*EnterprisePrice `json:"prices,omitempty"`
	// Subscribes holds the value of the subscribes edge.
	Subscribes []*Subscribe `json:"subscribes,omitempty"`
	// Statements holds the value of the statements edge.
	Statements []*EnterpriseStatement `json:"statements,omitempty"`
	// Stations holds the value of the stations edge.
	Stations []*EnterpriseStation `json:"stations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterpriseEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// RidersOrErr returns the Riders value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) RidersOrErr() ([]*Rider, error) {
	if e.loadedTypes[1] {
		return e.Riders, nil
	}
	return nil, &NotLoadedError{edge: "riders"}
}

// ContractsOrErr returns the Contracts value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) ContractsOrErr() ([]*EnterpriseContract, error) {
	if e.loadedTypes[2] {
		return e.Contracts, nil
	}
	return nil, &NotLoadedError{edge: "contracts"}
}

// PricesOrErr returns the Prices value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) PricesOrErr() ([]*EnterprisePrice, error) {
	if e.loadedTypes[3] {
		return e.Prices, nil
	}
	return nil, &NotLoadedError{edge: "prices"}
}

// SubscribesOrErr returns the Subscribes value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) SubscribesOrErr() ([]*Subscribe, error) {
	if e.loadedTypes[4] {
		return e.Subscribes, nil
	}
	return nil, &NotLoadedError{edge: "subscribes"}
}

// StatementsOrErr returns the Statements value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) StatementsOrErr() ([]*EnterpriseStatement, error) {
	if e.loadedTypes[5] {
		return e.Statements, nil
	}
	return nil, &NotLoadedError{edge: "statements"}
}

// StationsOrErr returns the Stations value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) StationsOrErr() ([]*EnterpriseStation, error) {
	if e.loadedTypes[6] {
		return e.Stations, nil
	}
	return nil, &NotLoadedError{edge: "stations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enterprise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprise.FieldCreator, enterprise.FieldLastModifier:
			values[i] = new([]byte)
		case enterprise.FieldDeposit, enterprise.FieldBalance:
			values[i] = new(sql.NullFloat64)
		case enterprise.FieldID, enterprise.FieldCityID, enterprise.FieldStatus, enterprise.FieldPayment:
			values[i] = new(sql.NullInt64)
		case enterprise.FieldRemark, enterprise.FieldName, enterprise.FieldContactName, enterprise.FieldContactPhone, enterprise.FieldIdcardNumber, enterprise.FieldAddress:
			values[i] = new(sql.NullString)
		case enterprise.FieldCreatedAt, enterprise.FieldUpdatedAt, enterprise.FieldDeletedAt, enterprise.FieldSuspensedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Enterprise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enterprise fields.
func (e *Enterprise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case enterprise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case enterprise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case enterprise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case enterprise.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprise.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprise.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case enterprise.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				e.CityID = uint64(value.Int64)
			}
		case enterprise.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case enterprise.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = uint8(value.Int64)
			}
		case enterprise.FieldContactName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_name", values[i])
			} else if value.Valid {
				e.ContactName = value.String
			}
		case enterprise.FieldContactPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_phone", values[i])
			} else if value.Valid {
				e.ContactPhone = value.String
			}
		case enterprise.FieldIdcardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idcard_number", values[i])
			} else if value.Valid {
				e.IdcardNumber = value.String
			}
		case enterprise.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case enterprise.FieldPayment:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment", values[i])
			} else if value.Valid {
				e.Payment = uint8(value.Int64)
			}
		case enterprise.FieldDeposit:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field deposit", values[i])
			} else if value.Valid {
				e.Deposit = value.Float64
			}
		case enterprise.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				e.Balance = value.Float64
			}
		case enterprise.FieldSuspensedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field suspensed_at", values[i])
			} else if value.Valid {
				e.SuspensedAt = new(time.Time)
				*e.SuspensedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Enterprise entity.
func (e *Enterprise) QueryCity() *CityQuery {
	return (&EnterpriseClient{config: e.config}).QueryCity(e)
}

// QueryRiders queries the "riders" edge of the Enterprise entity.
func (e *Enterprise) QueryRiders() *RiderQuery {
	return (&EnterpriseClient{config: e.config}).QueryRiders(e)
}

// QueryContracts queries the "contracts" edge of the Enterprise entity.
func (e *Enterprise) QueryContracts() *EnterpriseContractQuery {
	return (&EnterpriseClient{config: e.config}).QueryContracts(e)
}

// QueryPrices queries the "prices" edge of the Enterprise entity.
func (e *Enterprise) QueryPrices() *EnterprisePriceQuery {
	return (&EnterpriseClient{config: e.config}).QueryPrices(e)
}

// QuerySubscribes queries the "subscribes" edge of the Enterprise entity.
func (e *Enterprise) QuerySubscribes() *SubscribeQuery {
	return (&EnterpriseClient{config: e.config}).QuerySubscribes(e)
}

// QueryStatements queries the "statements" edge of the Enterprise entity.
func (e *Enterprise) QueryStatements() *EnterpriseStatementQuery {
	return (&EnterpriseClient{config: e.config}).QueryStatements(e)
}

// QueryStations queries the "stations" edge of the Enterprise entity.
func (e *Enterprise) QueryStations() *EnterpriseStationQuery {
	return (&EnterpriseClient{config: e.config}).QueryStations(e)
}

// Update returns a builder for updating this Enterprise.
// Note that you need to call Enterprise.Unwrap() before calling this method if this Enterprise
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enterprise) Update() *EnterpriseUpdateOne {
	return (&EnterpriseClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Enterprise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enterprise) Unwrap() *Enterprise {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enterprise is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enterprise) String() string {
	var builder strings.Builder
	builder.WriteString("Enterprise(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	if v := e.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CityID))
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", e.Status))
	builder.WriteString(", contact_name=")
	builder.WriteString(e.ContactName)
	builder.WriteString(", contact_phone=")
	builder.WriteString(e.ContactPhone)
	builder.WriteString(", idcard_number=")
	builder.WriteString(e.IdcardNumber)
	builder.WriteString(", address=")
	builder.WriteString(e.Address)
	builder.WriteString(", payment=")
	builder.WriteString(fmt.Sprintf("%v", e.Payment))
	builder.WriteString(", deposit=")
	builder.WriteString(fmt.Sprintf("%v", e.Deposit))
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", e.Balance))
	if v := e.SuspensedAt; v != nil {
		builder.WriteString(", suspensed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Enterprises is a parsable slice of Enterprise.
type Enterprises []*Enterprise

func (e Enterprises) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
