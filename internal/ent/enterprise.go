// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
)

// Enterprise is the model entity for the Enterprise schema.
type Enterprise struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// Name holds the value of the "name" field.
	// 企业名称
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterpriseQuery when eager-loading is set.
	Edges EnterpriseEdges `json:"edges"`
}

// EnterpriseEdges holds the relations/edges for other nodes in the graph.
type EnterpriseEdges struct {
	// Riders holds the value of the riders edge.
	Riders []*Rider `json:"riders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RidersOrErr returns the Riders value or an error if the edge
// was not loaded in eager-loading.
func (e EnterpriseEdges) RidersOrErr() ([]*Rider, error) {
	if e.loadedTypes[0] {
		return e.Riders, nil
	}
	return nil, &NotLoadedError{edge: "riders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enterprise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterprise.FieldCreator, enterprise.FieldLastModifier:
			values[i] = new([]byte)
		case enterprise.FieldID:
			values[i] = new(sql.NullInt64)
		case enterprise.FieldRemark, enterprise.FieldName:
			values[i] = new(sql.NullString)
		case enterprise.FieldCreatedAt, enterprise.FieldUpdatedAt, enterprise.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Enterprise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enterprise fields.
func (e *Enterprise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterprise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case enterprise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case enterprise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case enterprise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				e.DeletedAt = new(time.Time)
				*e.DeletedAt = value.Time
			}
		case enterprise.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterprise.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterprise.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				e.Remark = value.String
			}
		case enterprise.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		}
	}
	return nil
}

// QueryRiders queries the "riders" edge of the Enterprise entity.
func (e *Enterprise) QueryRiders() *RiderQuery {
	return (&EnterpriseClient{config: e.config}).QueryRiders(e)
}

// Update returns a builder for updating this Enterprise.
// Note that you need to call Enterprise.Unwrap() before calling this method if this Enterprise
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enterprise) Update() *EnterpriseUpdateOne {
	return (&EnterpriseClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Enterprise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enterprise) Unwrap() *Enterprise {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enterprise is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enterprise) String() string {
	var builder strings.Builder
	builder.WriteString("Enterprise(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	if v := e.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", e.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", e.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(e.Remark)
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Enterprises is a parsable slice of Enterprise.
type Enterprises []*Enterprise

func (e Enterprises) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
