// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
)

// PromotionLevelQuery is the builder for querying PromotionLevel entities.
type PromotionLevelQuery struct {
	config
	ctx        *QueryContext
	order      []promotionlevel.OrderOption
	inters     []Interceptor
	predicates []predicate.PromotionLevel
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionLevelQuery builder.
func (plq *PromotionLevelQuery) Where(ps ...predicate.PromotionLevel) *PromotionLevelQuery {
	plq.predicates = append(plq.predicates, ps...)
	return plq
}

// Limit the number of records to be returned by this query.
func (plq *PromotionLevelQuery) Limit(limit int) *PromotionLevelQuery {
	plq.ctx.Limit = &limit
	return plq
}

// Offset to start from.
func (plq *PromotionLevelQuery) Offset(offset int) *PromotionLevelQuery {
	plq.ctx.Offset = &offset
	return plq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (plq *PromotionLevelQuery) Unique(unique bool) *PromotionLevelQuery {
	plq.ctx.Unique = &unique
	return plq
}

// Order specifies how the records should be ordered.
func (plq *PromotionLevelQuery) Order(o ...promotionlevel.OrderOption) *PromotionLevelQuery {
	plq.order = append(plq.order, o...)
	return plq
}

// First returns the first PromotionLevel entity from the query.
// Returns a *NotFoundError when no PromotionLevel was found.
func (plq *PromotionLevelQuery) First(ctx context.Context) (*PromotionLevel, error) {
	nodes, err := plq.Limit(1).All(setContextOp(ctx, plq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionlevel.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (plq *PromotionLevelQuery) FirstX(ctx context.Context) *PromotionLevel {
	node, err := plq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionLevel ID from the query.
// Returns a *NotFoundError when no PromotionLevel ID was found.
func (plq *PromotionLevelQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = plq.Limit(1).IDs(setContextOp(ctx, plq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionlevel.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (plq *PromotionLevelQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := plq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionLevel entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionLevel entity is found.
// Returns a *NotFoundError when no PromotionLevel entities are found.
func (plq *PromotionLevelQuery) Only(ctx context.Context) (*PromotionLevel, error) {
	nodes, err := plq.Limit(2).All(setContextOp(ctx, plq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionlevel.Label}
	default:
		return nil, &NotSingularError{promotionlevel.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (plq *PromotionLevelQuery) OnlyX(ctx context.Context) *PromotionLevel {
	node, err := plq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionLevel ID in the query.
// Returns a *NotSingularError when more than one PromotionLevel ID is found.
// Returns a *NotFoundError when no entities are found.
func (plq *PromotionLevelQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = plq.Limit(2).IDs(setContextOp(ctx, plq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionlevel.Label}
	default:
		err = &NotSingularError{promotionlevel.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (plq *PromotionLevelQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := plq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionLevels.
func (plq *PromotionLevelQuery) All(ctx context.Context) ([]*PromotionLevel, error) {
	ctx = setContextOp(ctx, plq.ctx, "All")
	if err := plq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionLevel, *PromotionLevelQuery]()
	return withInterceptors[[]*PromotionLevel](ctx, plq, qr, plq.inters)
}

// AllX is like All, but panics if an error occurs.
func (plq *PromotionLevelQuery) AllX(ctx context.Context) []*PromotionLevel {
	nodes, err := plq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionLevel IDs.
func (plq *PromotionLevelQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if plq.ctx.Unique == nil && plq.path != nil {
		plq.Unique(true)
	}
	ctx = setContextOp(ctx, plq.ctx, "IDs")
	if err = plq.Select(promotionlevel.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (plq *PromotionLevelQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := plq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (plq *PromotionLevelQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, plq.ctx, "Count")
	if err := plq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, plq, querierCount[*PromotionLevelQuery](), plq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (plq *PromotionLevelQuery) CountX(ctx context.Context) int {
	count, err := plq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (plq *PromotionLevelQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, plq.ctx, "Exist")
	switch _, err := plq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (plq *PromotionLevelQuery) ExistX(ctx context.Context) bool {
	exist, err := plq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionLevelQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (plq *PromotionLevelQuery) Clone() *PromotionLevelQuery {
	if plq == nil {
		return nil
	}
	return &PromotionLevelQuery{
		config:     plq.config,
		ctx:        plq.ctx.Clone(),
		order:      append([]promotionlevel.OrderOption{}, plq.order...),
		inters:     append([]Interceptor{}, plq.inters...),
		predicates: append([]predicate.PromotionLevel{}, plq.predicates...),
		// clone intermediate query.
		sql:  plq.sql.Clone(),
		path: plq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionLevel.Query().
//		GroupBy(promotionlevel.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (plq *PromotionLevelQuery) GroupBy(field string, fields ...string) *PromotionLevelGroupBy {
	plq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionLevelGroupBy{build: plq}
	grbuild.flds = &plq.ctx.Fields
	grbuild.label = promotionlevel.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionLevel.Query().
//		Select(promotionlevel.FieldCreatedAt).
//		Scan(ctx, &v)
func (plq *PromotionLevelQuery) Select(fields ...string) *PromotionLevelSelect {
	plq.ctx.Fields = append(plq.ctx.Fields, fields...)
	sbuild := &PromotionLevelSelect{PromotionLevelQuery: plq}
	sbuild.label = promotionlevel.Label
	sbuild.flds, sbuild.scan = &plq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionLevelSelect configured with the given aggregations.
func (plq *PromotionLevelQuery) Aggregate(fns ...AggregateFunc) *PromotionLevelSelect {
	return plq.Select().Aggregate(fns...)
}

func (plq *PromotionLevelQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range plq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, plq); err != nil {
				return err
			}
		}
	}
	for _, f := range plq.ctx.Fields {
		if !promotionlevel.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if plq.path != nil {
		prev, err := plq.path(ctx)
		if err != nil {
			return err
		}
		plq.sql = prev
	}
	return nil
}

func (plq *PromotionLevelQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionLevel, error) {
	var (
		nodes = []*PromotionLevel{}
		_spec = plq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionLevel).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionLevel{config: plq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(plq.modifiers) > 0 {
		_spec.Modifiers = plq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, plq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (plq *PromotionLevelQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := plq.querySpec()
	if len(plq.modifiers) > 0 {
		_spec.Modifiers = plq.modifiers
	}
	_spec.Node.Columns = plq.ctx.Fields
	if len(plq.ctx.Fields) > 0 {
		_spec.Unique = plq.ctx.Unique != nil && *plq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, plq.driver, _spec)
}

func (plq *PromotionLevelQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionlevel.Table, promotionlevel.Columns, sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64))
	_spec.From = plq.sql
	if unique := plq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if plq.path != nil {
		_spec.Unique = true
	}
	if fields := plq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionlevel.FieldID)
		for i := range fields {
			if fields[i] != promotionlevel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := plq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := plq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := plq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := plq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (plq *PromotionLevelQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(plq.driver.Dialect())
	t1 := builder.Table(promotionlevel.Table)
	columns := plq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionlevel.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if plq.sql != nil {
		selector = plq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if plq.ctx.Unique != nil && *plq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range plq.modifiers {
		m(selector)
	}
	for _, p := range plq.predicates {
		p(selector)
	}
	for _, p := range plq.order {
		p(selector)
	}
	if offset := plq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := plq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (plq *PromotionLevelQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionLevelSelect {
	plq.modifiers = append(plq.modifiers, modifiers...)
	return plq.Select()
}

type PromotionLevelQueryWith string

var ()

func (plq *PromotionLevelQuery) With(withEdges ...PromotionLevelQueryWith) *PromotionLevelQuery {
	for _, v := range withEdges {
		switch v {
		}
	}
	return plq
}

// PromotionLevelGroupBy is the group-by builder for PromotionLevel entities.
type PromotionLevelGroupBy struct {
	selector
	build *PromotionLevelQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (plgb *PromotionLevelGroupBy) Aggregate(fns ...AggregateFunc) *PromotionLevelGroupBy {
	plgb.fns = append(plgb.fns, fns...)
	return plgb
}

// Scan applies the selector query and scans the result into the given value.
func (plgb *PromotionLevelGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, plgb.build.ctx, "GroupBy")
	if err := plgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionLevelQuery, *PromotionLevelGroupBy](ctx, plgb.build, plgb, plgb.build.inters, v)
}

func (plgb *PromotionLevelGroupBy) sqlScan(ctx context.Context, root *PromotionLevelQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(plgb.fns))
	for _, fn := range plgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*plgb.flds)+len(plgb.fns))
		for _, f := range *plgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*plgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := plgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionLevelSelect is the builder for selecting fields of PromotionLevel entities.
type PromotionLevelSelect struct {
	*PromotionLevelQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pls *PromotionLevelSelect) Aggregate(fns ...AggregateFunc) *PromotionLevelSelect {
	pls.fns = append(pls.fns, fns...)
	return pls
}

// Scan applies the selector query and scans the result into the given value.
func (pls *PromotionLevelSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pls.ctx, "Select")
	if err := pls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionLevelQuery, *PromotionLevelSelect](ctx, pls.PromotionLevelQuery, pls, pls.inters, v)
}

func (pls *PromotionLevelSelect) sqlScan(ctx context.Context, root *PromotionLevelQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pls.fns))
	for _, fn := range pls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pls *PromotionLevelSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionLevelSelect {
	pls.modifiers = append(pls.modifiers, modifiers...)
	return pls
}
