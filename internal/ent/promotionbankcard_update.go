// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionwithdrawal"
)

// PromotionBankCardUpdate is the builder for updating PromotionBankCard entities.
type PromotionBankCardUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionBankCardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionBankCardUpdate builder.
func (pbcu *PromotionBankCardUpdate) Where(ps ...predicate.PromotionBankCard) *PromotionBankCardUpdate {
	pbcu.mutation.Where(ps...)
	return pbcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pbcu *PromotionBankCardUpdate) SetUpdatedAt(t time.Time) *PromotionBankCardUpdate {
	pbcu.mutation.SetUpdatedAt(t)
	return pbcu
}

// SetDeletedAt sets the "deleted_at" field.
func (pbcu *PromotionBankCardUpdate) SetDeletedAt(t time.Time) *PromotionBankCardUpdate {
	pbcu.mutation.SetDeletedAt(t)
	return pbcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableDeletedAt(t *time.Time) *PromotionBankCardUpdate {
	if t != nil {
		pbcu.SetDeletedAt(*t)
	}
	return pbcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pbcu *PromotionBankCardUpdate) ClearDeletedAt() *PromotionBankCardUpdate {
	pbcu.mutation.ClearDeletedAt()
	return pbcu
}

// SetLastModifier sets the "last_modifier" field.
func (pbcu *PromotionBankCardUpdate) SetLastModifier(m *model.Modifier) *PromotionBankCardUpdate {
	pbcu.mutation.SetLastModifier(m)
	return pbcu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pbcu *PromotionBankCardUpdate) ClearLastModifier() *PromotionBankCardUpdate {
	pbcu.mutation.ClearLastModifier()
	return pbcu
}

// SetRemark sets the "remark" field.
func (pbcu *PromotionBankCardUpdate) SetRemark(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetRemark(s)
	return pbcu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableRemark(s *string) *PromotionBankCardUpdate {
	if s != nil {
		pbcu.SetRemark(*s)
	}
	return pbcu
}

// ClearRemark clears the value of the "remark" field.
func (pbcu *PromotionBankCardUpdate) ClearRemark() *PromotionBankCardUpdate {
	pbcu.mutation.ClearRemark()
	return pbcu
}

// SetMemberID sets the "member_id" field.
func (pbcu *PromotionBankCardUpdate) SetMemberID(u uint64) *PromotionBankCardUpdate {
	pbcu.mutation.SetMemberID(u)
	return pbcu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableMemberID(u *uint64) *PromotionBankCardUpdate {
	if u != nil {
		pbcu.SetMemberID(*u)
	}
	return pbcu
}

// ClearMemberID clears the value of the "member_id" field.
func (pbcu *PromotionBankCardUpdate) ClearMemberID() *PromotionBankCardUpdate {
	pbcu.mutation.ClearMemberID()
	return pbcu
}

// SetCardNo sets the "card_no" field.
func (pbcu *PromotionBankCardUpdate) SetCardNo(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetCardNo(s)
	return pbcu
}

// SetBank sets the "bank" field.
func (pbcu *PromotionBankCardUpdate) SetBank(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetBank(s)
	return pbcu
}

// SetNillableBank sets the "bank" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableBank(s *string) *PromotionBankCardUpdate {
	if s != nil {
		pbcu.SetBank(*s)
	}
	return pbcu
}

// ClearBank clears the value of the "bank" field.
func (pbcu *PromotionBankCardUpdate) ClearBank() *PromotionBankCardUpdate {
	pbcu.mutation.ClearBank()
	return pbcu
}

// SetIsDefault sets the "is_default" field.
func (pbcu *PromotionBankCardUpdate) SetIsDefault(b bool) *PromotionBankCardUpdate {
	pbcu.mutation.SetIsDefault(b)
	return pbcu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableIsDefault(b *bool) *PromotionBankCardUpdate {
	if b != nil {
		pbcu.SetIsDefault(*b)
	}
	return pbcu
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (pbcu *PromotionBankCardUpdate) SetBankLogoURL(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetBankLogoURL(s)
	return pbcu
}

// SetNillableBankLogoURL sets the "bank_logo_url" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableBankLogoURL(s *string) *PromotionBankCardUpdate {
	if s != nil {
		pbcu.SetBankLogoURL(*s)
	}
	return pbcu
}

// ClearBankLogoURL clears the value of the "bank_logo_url" field.
func (pbcu *PromotionBankCardUpdate) ClearBankLogoURL() *PromotionBankCardUpdate {
	pbcu.mutation.ClearBankLogoURL()
	return pbcu
}

// SetProvince sets the "province" field.
func (pbcu *PromotionBankCardUpdate) SetProvince(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetProvince(s)
	return pbcu
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableProvince(s *string) *PromotionBankCardUpdate {
	if s != nil {
		pbcu.SetProvince(*s)
	}
	return pbcu
}

// ClearProvince clears the value of the "province" field.
func (pbcu *PromotionBankCardUpdate) ClearProvince() *PromotionBankCardUpdate {
	pbcu.mutation.ClearProvince()
	return pbcu
}

// SetCity sets the "city" field.
func (pbcu *PromotionBankCardUpdate) SetCity(s string) *PromotionBankCardUpdate {
	pbcu.mutation.SetCity(s)
	return pbcu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (pbcu *PromotionBankCardUpdate) SetNillableCity(s *string) *PromotionBankCardUpdate {
	if s != nil {
		pbcu.SetCity(*s)
	}
	return pbcu
}

// ClearCity clears the value of the "city" field.
func (pbcu *PromotionBankCardUpdate) ClearCity() *PromotionBankCardUpdate {
	pbcu.mutation.ClearCity()
	return pbcu
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pbcu *PromotionBankCardUpdate) SetMember(p *PromotionMember) *PromotionBankCardUpdate {
	return pbcu.SetMemberID(p.ID)
}

// AddWithdrawalIDs adds the "withdrawals" edge to the PromotionWithdrawal entity by IDs.
func (pbcu *PromotionBankCardUpdate) AddWithdrawalIDs(ids ...uint64) *PromotionBankCardUpdate {
	pbcu.mutation.AddWithdrawalIDs(ids...)
	return pbcu
}

// AddWithdrawals adds the "withdrawals" edges to the PromotionWithdrawal entity.
func (pbcu *PromotionBankCardUpdate) AddWithdrawals(p ...*PromotionWithdrawal) *PromotionBankCardUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcu.AddWithdrawalIDs(ids...)
}

// Mutation returns the PromotionBankCardMutation object of the builder.
func (pbcu *PromotionBankCardUpdate) Mutation() *PromotionBankCardMutation {
	return pbcu.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pbcu *PromotionBankCardUpdate) ClearMember() *PromotionBankCardUpdate {
	pbcu.mutation.ClearMember()
	return pbcu
}

// ClearWithdrawals clears all "withdrawals" edges to the PromotionWithdrawal entity.
func (pbcu *PromotionBankCardUpdate) ClearWithdrawals() *PromotionBankCardUpdate {
	pbcu.mutation.ClearWithdrawals()
	return pbcu
}

// RemoveWithdrawalIDs removes the "withdrawals" edge to PromotionWithdrawal entities by IDs.
func (pbcu *PromotionBankCardUpdate) RemoveWithdrawalIDs(ids ...uint64) *PromotionBankCardUpdate {
	pbcu.mutation.RemoveWithdrawalIDs(ids...)
	return pbcu
}

// RemoveWithdrawals removes "withdrawals" edges to PromotionWithdrawal entities.
func (pbcu *PromotionBankCardUpdate) RemoveWithdrawals(p ...*PromotionWithdrawal) *PromotionBankCardUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcu.RemoveWithdrawalIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pbcu *PromotionBankCardUpdate) Save(ctx context.Context) (int, error) {
	if err := pbcu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pbcu.sqlSave, pbcu.mutation, pbcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbcu *PromotionBankCardUpdate) SaveX(ctx context.Context) int {
	affected, err := pbcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pbcu *PromotionBankCardUpdate) Exec(ctx context.Context) error {
	_, err := pbcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcu *PromotionBankCardUpdate) ExecX(ctx context.Context) {
	if err := pbcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbcu *PromotionBankCardUpdate) defaults() error {
	if _, ok := pbcu.mutation.UpdatedAt(); !ok {
		if promotionbankcard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionbankcard.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionbankcard.UpdateDefaultUpdatedAt()
		pbcu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pbcu *PromotionBankCardUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionBankCardUpdate {
	pbcu.modifiers = append(pbcu.modifiers, modifiers...)
	return pbcu
}

func (pbcu *PromotionBankCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionbankcard.Table, promotionbankcard.Columns, sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64))
	if ps := pbcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbcu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionbankcard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pbcu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionbankcard.FieldDeletedAt, field.TypeTime, value)
	}
	if pbcu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionbankcard.FieldDeletedAt, field.TypeTime)
	}
	if pbcu.mutation.CreatorCleared() {
		_spec.ClearField(promotionbankcard.FieldCreator, field.TypeJSON)
	}
	if value, ok := pbcu.mutation.LastModifier(); ok {
		_spec.SetField(promotionbankcard.FieldLastModifier, field.TypeJSON, value)
	}
	if pbcu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionbankcard.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pbcu.mutation.Remark(); ok {
		_spec.SetField(promotionbankcard.FieldRemark, field.TypeString, value)
	}
	if pbcu.mutation.RemarkCleared() {
		_spec.ClearField(promotionbankcard.FieldRemark, field.TypeString)
	}
	if value, ok := pbcu.mutation.CardNo(); ok {
		_spec.SetField(promotionbankcard.FieldCardNo, field.TypeString, value)
	}
	if value, ok := pbcu.mutation.Bank(); ok {
		_spec.SetField(promotionbankcard.FieldBank, field.TypeString, value)
	}
	if pbcu.mutation.BankCleared() {
		_spec.ClearField(promotionbankcard.FieldBank, field.TypeString)
	}
	if value, ok := pbcu.mutation.IsDefault(); ok {
		_spec.SetField(promotionbankcard.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := pbcu.mutation.BankLogoURL(); ok {
		_spec.SetField(promotionbankcard.FieldBankLogoURL, field.TypeString, value)
	}
	if pbcu.mutation.BankLogoURLCleared() {
		_spec.ClearField(promotionbankcard.FieldBankLogoURL, field.TypeString)
	}
	if value, ok := pbcu.mutation.Province(); ok {
		_spec.SetField(promotionbankcard.FieldProvince, field.TypeString, value)
	}
	if pbcu.mutation.ProvinceCleared() {
		_spec.ClearField(promotionbankcard.FieldProvince, field.TypeString)
	}
	if value, ok := pbcu.mutation.City(); ok {
		_spec.SetField(promotionbankcard.FieldCity, field.TypeString, value)
	}
	if pbcu.mutation.CityCleared() {
		_spec.ClearField(promotionbankcard.FieldCity, field.TypeString)
	}
	if pbcu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbcu.mutation.WithdrawalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.RemovedWithdrawalsIDs(); len(nodes) > 0 && !pbcu.mutation.WithdrawalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcu.mutation.WithdrawalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pbcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pbcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionbankcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pbcu.mutation.done = true
	return n, nil
}

// PromotionBankCardUpdateOne is the builder for updating a single PromotionBankCard entity.
type PromotionBankCardUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionBankCardMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pbcuo *PromotionBankCardUpdateOne) SetUpdatedAt(t time.Time) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetUpdatedAt(t)
	return pbcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pbcuo *PromotionBankCardUpdateOne) SetDeletedAt(t time.Time) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetDeletedAt(t)
	return pbcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionBankCardUpdateOne {
	if t != nil {
		pbcuo.SetDeletedAt(*t)
	}
	return pbcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearDeletedAt() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearDeletedAt()
	return pbcuo
}

// SetLastModifier sets the "last_modifier" field.
func (pbcuo *PromotionBankCardUpdateOne) SetLastModifier(m *model.Modifier) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetLastModifier(m)
	return pbcuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearLastModifier() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearLastModifier()
	return pbcuo
}

// SetRemark sets the "remark" field.
func (pbcuo *PromotionBankCardUpdateOne) SetRemark(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetRemark(s)
	return pbcuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableRemark(s *string) *PromotionBankCardUpdateOne {
	if s != nil {
		pbcuo.SetRemark(*s)
	}
	return pbcuo
}

// ClearRemark clears the value of the "remark" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearRemark() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearRemark()
	return pbcuo
}

// SetMemberID sets the "member_id" field.
func (pbcuo *PromotionBankCardUpdateOne) SetMemberID(u uint64) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetMemberID(u)
	return pbcuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableMemberID(u *uint64) *PromotionBankCardUpdateOne {
	if u != nil {
		pbcuo.SetMemberID(*u)
	}
	return pbcuo
}

// ClearMemberID clears the value of the "member_id" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearMemberID() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearMemberID()
	return pbcuo
}

// SetCardNo sets the "card_no" field.
func (pbcuo *PromotionBankCardUpdateOne) SetCardNo(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetCardNo(s)
	return pbcuo
}

// SetBank sets the "bank" field.
func (pbcuo *PromotionBankCardUpdateOne) SetBank(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetBank(s)
	return pbcuo
}

// SetNillableBank sets the "bank" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableBank(s *string) *PromotionBankCardUpdateOne {
	if s != nil {
		pbcuo.SetBank(*s)
	}
	return pbcuo
}

// ClearBank clears the value of the "bank" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearBank() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearBank()
	return pbcuo
}

// SetIsDefault sets the "is_default" field.
func (pbcuo *PromotionBankCardUpdateOne) SetIsDefault(b bool) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetIsDefault(b)
	return pbcuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableIsDefault(b *bool) *PromotionBankCardUpdateOne {
	if b != nil {
		pbcuo.SetIsDefault(*b)
	}
	return pbcuo
}

// SetBankLogoURL sets the "bank_logo_url" field.
func (pbcuo *PromotionBankCardUpdateOne) SetBankLogoURL(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetBankLogoURL(s)
	return pbcuo
}

// SetNillableBankLogoURL sets the "bank_logo_url" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableBankLogoURL(s *string) *PromotionBankCardUpdateOne {
	if s != nil {
		pbcuo.SetBankLogoURL(*s)
	}
	return pbcuo
}

// ClearBankLogoURL clears the value of the "bank_logo_url" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearBankLogoURL() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearBankLogoURL()
	return pbcuo
}

// SetProvince sets the "province" field.
func (pbcuo *PromotionBankCardUpdateOne) SetProvince(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetProvince(s)
	return pbcuo
}

// SetNillableProvince sets the "province" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableProvince(s *string) *PromotionBankCardUpdateOne {
	if s != nil {
		pbcuo.SetProvince(*s)
	}
	return pbcuo
}

// ClearProvince clears the value of the "province" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearProvince() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearProvince()
	return pbcuo
}

// SetCity sets the "city" field.
func (pbcuo *PromotionBankCardUpdateOne) SetCity(s string) *PromotionBankCardUpdateOne {
	pbcuo.mutation.SetCity(s)
	return pbcuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (pbcuo *PromotionBankCardUpdateOne) SetNillableCity(s *string) *PromotionBankCardUpdateOne {
	if s != nil {
		pbcuo.SetCity(*s)
	}
	return pbcuo
}

// ClearCity clears the value of the "city" field.
func (pbcuo *PromotionBankCardUpdateOne) ClearCity() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearCity()
	return pbcuo
}

// SetMember sets the "member" edge to the PromotionMember entity.
func (pbcuo *PromotionBankCardUpdateOne) SetMember(p *PromotionMember) *PromotionBankCardUpdateOne {
	return pbcuo.SetMemberID(p.ID)
}

// AddWithdrawalIDs adds the "withdrawals" edge to the PromotionWithdrawal entity by IDs.
func (pbcuo *PromotionBankCardUpdateOne) AddWithdrawalIDs(ids ...uint64) *PromotionBankCardUpdateOne {
	pbcuo.mutation.AddWithdrawalIDs(ids...)
	return pbcuo
}

// AddWithdrawals adds the "withdrawals" edges to the PromotionWithdrawal entity.
func (pbcuo *PromotionBankCardUpdateOne) AddWithdrawals(p ...*PromotionWithdrawal) *PromotionBankCardUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcuo.AddWithdrawalIDs(ids...)
}

// Mutation returns the PromotionBankCardMutation object of the builder.
func (pbcuo *PromotionBankCardUpdateOne) Mutation() *PromotionBankCardMutation {
	return pbcuo.mutation
}

// ClearMember clears the "member" edge to the PromotionMember entity.
func (pbcuo *PromotionBankCardUpdateOne) ClearMember() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearMember()
	return pbcuo
}

// ClearWithdrawals clears all "withdrawals" edges to the PromotionWithdrawal entity.
func (pbcuo *PromotionBankCardUpdateOne) ClearWithdrawals() *PromotionBankCardUpdateOne {
	pbcuo.mutation.ClearWithdrawals()
	return pbcuo
}

// RemoveWithdrawalIDs removes the "withdrawals" edge to PromotionWithdrawal entities by IDs.
func (pbcuo *PromotionBankCardUpdateOne) RemoveWithdrawalIDs(ids ...uint64) *PromotionBankCardUpdateOne {
	pbcuo.mutation.RemoveWithdrawalIDs(ids...)
	return pbcuo
}

// RemoveWithdrawals removes "withdrawals" edges to PromotionWithdrawal entities.
func (pbcuo *PromotionBankCardUpdateOne) RemoveWithdrawals(p ...*PromotionWithdrawal) *PromotionBankCardUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pbcuo.RemoveWithdrawalIDs(ids...)
}

// Where appends a list predicates to the PromotionBankCardUpdate builder.
func (pbcuo *PromotionBankCardUpdateOne) Where(ps ...predicate.PromotionBankCard) *PromotionBankCardUpdateOne {
	pbcuo.mutation.Where(ps...)
	return pbcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pbcuo *PromotionBankCardUpdateOne) Select(field string, fields ...string) *PromotionBankCardUpdateOne {
	pbcuo.fields = append([]string{field}, fields...)
	return pbcuo
}

// Save executes the query and returns the updated PromotionBankCard entity.
func (pbcuo *PromotionBankCardUpdateOne) Save(ctx context.Context) (*PromotionBankCard, error) {
	if err := pbcuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pbcuo.sqlSave, pbcuo.mutation, pbcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pbcuo *PromotionBankCardUpdateOne) SaveX(ctx context.Context) *PromotionBankCard {
	node, err := pbcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pbcuo *PromotionBankCardUpdateOne) Exec(ctx context.Context) error {
	_, err := pbcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pbcuo *PromotionBankCardUpdateOne) ExecX(ctx context.Context) {
	if err := pbcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pbcuo *PromotionBankCardUpdateOne) defaults() error {
	if _, ok := pbcuo.mutation.UpdatedAt(); !ok {
		if promotionbankcard.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionbankcard.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionbankcard.UpdateDefaultUpdatedAt()
		pbcuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pbcuo *PromotionBankCardUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionBankCardUpdateOne {
	pbcuo.modifiers = append(pbcuo.modifiers, modifiers...)
	return pbcuo
}

func (pbcuo *PromotionBankCardUpdateOne) sqlSave(ctx context.Context) (_node *PromotionBankCard, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionbankcard.Table, promotionbankcard.Columns, sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64))
	id, ok := pbcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionBankCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pbcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionbankcard.FieldID)
		for _, f := range fields {
			if !promotionbankcard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionbankcard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pbcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pbcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionbankcard.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pbcuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionbankcard.FieldDeletedAt, field.TypeTime, value)
	}
	if pbcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionbankcard.FieldDeletedAt, field.TypeTime)
	}
	if pbcuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionbankcard.FieldCreator, field.TypeJSON)
	}
	if value, ok := pbcuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionbankcard.FieldLastModifier, field.TypeJSON, value)
	}
	if pbcuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionbankcard.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pbcuo.mutation.Remark(); ok {
		_spec.SetField(promotionbankcard.FieldRemark, field.TypeString, value)
	}
	if pbcuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionbankcard.FieldRemark, field.TypeString)
	}
	if value, ok := pbcuo.mutation.CardNo(); ok {
		_spec.SetField(promotionbankcard.FieldCardNo, field.TypeString, value)
	}
	if value, ok := pbcuo.mutation.Bank(); ok {
		_spec.SetField(promotionbankcard.FieldBank, field.TypeString, value)
	}
	if pbcuo.mutation.BankCleared() {
		_spec.ClearField(promotionbankcard.FieldBank, field.TypeString)
	}
	if value, ok := pbcuo.mutation.IsDefault(); ok {
		_spec.SetField(promotionbankcard.FieldIsDefault, field.TypeBool, value)
	}
	if value, ok := pbcuo.mutation.BankLogoURL(); ok {
		_spec.SetField(promotionbankcard.FieldBankLogoURL, field.TypeString, value)
	}
	if pbcuo.mutation.BankLogoURLCleared() {
		_spec.ClearField(promotionbankcard.FieldBankLogoURL, field.TypeString)
	}
	if value, ok := pbcuo.mutation.Province(); ok {
		_spec.SetField(promotionbankcard.FieldProvince, field.TypeString, value)
	}
	if pbcuo.mutation.ProvinceCleared() {
		_spec.ClearField(promotionbankcard.FieldProvince, field.TypeString)
	}
	if value, ok := pbcuo.mutation.City(); ok {
		_spec.SetField(promotionbankcard.FieldCity, field.TypeString, value)
	}
	if pbcuo.mutation.CityCleared() {
		_spec.ClearField(promotionbankcard.FieldCity, field.TypeString)
	}
	if pbcuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionbankcard.MemberTable,
			Columns: []string{promotionbankcard.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pbcuo.mutation.WithdrawalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.RemovedWithdrawalsIDs(); len(nodes) > 0 && !pbcuo.mutation.WithdrawalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pbcuo.mutation.WithdrawalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionbankcard.WithdrawalsTable,
			Columns: []string{promotionbankcard.WithdrawalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionwithdrawal.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pbcuo.modifiers...)
	_node = &PromotionBankCard{config: pbcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pbcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionbankcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pbcuo.mutation.done = true
	return _node, nil
}
