// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
)

// EnterprisePrice is the model entity for the EnterprisePrice schema.
type EnterprisePrice struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *uint64 `json:"brand_id,omitempty"`
	// AgreementID holds the value of the "agreement_id" field.
	AgreementID *uint64 `json:"agreement_id,omitempty"`
	// EnterpriseID holds the value of the "enterprise_id" field.
	EnterpriseID uint64 `json:"enterprise_id,omitempty"`
	// 单价 元/天
	Price float64 `json:"price,omitempty"`
	// 可用电池型号
	Model string `json:"model,omitempty"`
	// 是否智能电池
	Intelligent bool `json:"intelligent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnterprisePriceQuery when eager-loading is set.
	Edges        EnterprisePriceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnterprisePriceEdges holds the relations/edges for other nodes in the graph.
type EnterprisePriceEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// Agreement holds the value of the agreement edge.
	Agreement *Agreement `json:"agreement,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePriceEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePriceEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: ebikebrand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// AgreementOrErr returns the Agreement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePriceEdges) AgreementOrErr() (*Agreement, error) {
	if e.Agreement != nil {
		return e.Agreement, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: agreement.Label}
	}
	return nil, &NotLoadedError{edge: "agreement"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnterprisePriceEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.Enterprise != nil {
		return e.Enterprise, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: enterprise.Label}
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnterprisePrice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enterpriseprice.FieldCreator, enterpriseprice.FieldLastModifier:
			values[i] = new([]byte)
		case enterpriseprice.FieldIntelligent:
			values[i] = new(sql.NullBool)
		case enterpriseprice.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case enterpriseprice.FieldID, enterpriseprice.FieldCityID, enterpriseprice.FieldBrandID, enterpriseprice.FieldAgreementID, enterpriseprice.FieldEnterpriseID:
			values[i] = new(sql.NullInt64)
		case enterpriseprice.FieldRemark, enterpriseprice.FieldModel:
			values[i] = new(sql.NullString)
		case enterpriseprice.FieldCreatedAt, enterpriseprice.FieldUpdatedAt, enterpriseprice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnterprisePrice fields.
func (ep *EnterprisePrice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enterpriseprice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ep.ID = uint64(value.Int64)
		case enterpriseprice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ep.CreatedAt = value.Time
			}
		case enterpriseprice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ep.UpdatedAt = value.Time
			}
		case enterpriseprice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ep.DeletedAt = new(time.Time)
				*ep.DeletedAt = value.Time
			}
		case enterpriseprice.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case enterpriseprice.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ep.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case enterpriseprice.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ep.Remark = value.String
			}
		case enterpriseprice.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				ep.CityID = uint64(value.Int64)
			}
		case enterpriseprice.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				ep.BrandID = new(uint64)
				*ep.BrandID = uint64(value.Int64)
			}
		case enterpriseprice.FieldAgreementID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agreement_id", values[i])
			} else if value.Valid {
				ep.AgreementID = new(uint64)
				*ep.AgreementID = uint64(value.Int64)
			}
		case enterpriseprice.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				ep.EnterpriseID = uint64(value.Int64)
			}
		case enterpriseprice.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ep.Price = value.Float64
			}
		case enterpriseprice.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				ep.Model = value.String
			}
		case enterpriseprice.FieldIntelligent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field intelligent", values[i])
			} else if value.Valid {
				ep.Intelligent = value.Bool
			}
		default:
			ep.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnterprisePrice.
// This includes values selected through modifiers, order, etc.
func (ep *EnterprisePrice) Value(name string) (ent.Value, error) {
	return ep.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the EnterprisePrice entity.
func (ep *EnterprisePrice) QueryCity() *CityQuery {
	return NewEnterprisePriceClient(ep.config).QueryCity(ep)
}

// QueryBrand queries the "brand" edge of the EnterprisePrice entity.
func (ep *EnterprisePrice) QueryBrand() *EbikeBrandQuery {
	return NewEnterprisePriceClient(ep.config).QueryBrand(ep)
}

// QueryAgreement queries the "agreement" edge of the EnterprisePrice entity.
func (ep *EnterprisePrice) QueryAgreement() *AgreementQuery {
	return NewEnterprisePriceClient(ep.config).QueryAgreement(ep)
}

// QueryEnterprise queries the "enterprise" edge of the EnterprisePrice entity.
func (ep *EnterprisePrice) QueryEnterprise() *EnterpriseQuery {
	return NewEnterprisePriceClient(ep.config).QueryEnterprise(ep)
}

// Update returns a builder for updating this EnterprisePrice.
// Note that you need to call EnterprisePrice.Unwrap() before calling this method if this EnterprisePrice
// was returned from a transaction, and the transaction was committed or rolled back.
func (ep *EnterprisePrice) Update() *EnterprisePriceUpdateOne {
	return NewEnterprisePriceClient(ep.config).UpdateOne(ep)
}

// Unwrap unwraps the EnterprisePrice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ep *EnterprisePrice) Unwrap() *EnterprisePrice {
	_tx, ok := ep.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnterprisePrice is not a transactional entity")
	}
	ep.config.driver = _tx.drv
	return ep
}

// String implements the fmt.Stringer.
func (ep *EnterprisePrice) String() string {
	var builder strings.Builder
	builder.WriteString("EnterprisePrice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ep.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ep.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ep.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ep.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", ep.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", ep.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ep.Remark)
	builder.WriteString(", ")
	builder.WriteString("city_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.CityID))
	builder.WriteString(", ")
	if v := ep.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ep.AgreementID; v != nil {
		builder.WriteString("agreement_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("enterprise_id=")
	builder.WriteString(fmt.Sprintf("%v", ep.EnterpriseID))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ep.Price))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(ep.Model)
	builder.WriteString(", ")
	builder.WriteString("intelligent=")
	builder.WriteString(fmt.Sprintf("%v", ep.Intelligent))
	builder.WriteByte(')')
	return builder.String()
}

// EnterprisePrices is a parsable slice of EnterprisePrice.
type EnterprisePrices []*EnterprisePrice
