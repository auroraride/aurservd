// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/ebike"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EbikeMutation represents an operation that mutates the Ebike nodes in the graph.
type EbikeMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	creator       **model.Modifier
	last_modifier **model.Modifier
	remark        *string
	status        *model.EbikeStatus
	enable        *bool
	sn            *string
	plate         *string
	machine       *string
	sim           *string
	color         *string
	ex_factory    *string
	clearedFields map[string]struct{}
	brand         *uint64
	clearedbrand  bool
	rider         *uint64
	clearedrider  bool
	store         *uint64
	clearedstore  bool
	done          bool
	oldValue      func(context.Context) (*Ebike, error)
	predicates    []predicate.Ebike
}

var _ ent.Mutation = (*EbikeMutation)(nil)

// ebikeOption allows management of the mutation configuration using functional options.
type ebikeOption func(*EbikeMutation)

// newEbikeMutation creates new mutation for the Ebike entity.
func newEbikeMutation(c config, op Op, opts ...ebikeOption) *EbikeMutation {
	m := &EbikeMutation{
		config:        c,
		op:            op,
		typ:           TypeEbike,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEbikeID sets the ID field of the mutation.
func withEbikeID(id uint64) ebikeOption {
	return func(m *EbikeMutation) {
		var (
			err   error
			once  sync.Once
			value *Ebike
		)
		m.oldValue = func(ctx context.Context) (*Ebike, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ebike.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEbike sets the old Ebike of the mutation.
func withEbike(node *Ebike) ebikeOption {
	return func(m *EbikeMutation) {
		m.oldValue = func(context.Context) (*Ebike, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EbikeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EbikeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EbikeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EbikeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ebike.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EbikeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EbikeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EbikeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EbikeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EbikeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EbikeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreator sets the "creator" field.
func (m *EbikeMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EbikeMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *EbikeMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[ebike.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *EbikeMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[ebike.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *EbikeMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, ebike.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *EbikeMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *EbikeMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *EbikeMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[ebike.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *EbikeMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[ebike.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *EbikeMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, ebike.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *EbikeMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *EbikeMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *EbikeMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[ebike.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *EbikeMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[ebike.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *EbikeMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, ebike.FieldRemark)
}

// SetBrandID sets the "brand_id" field.
func (m *EbikeMutation) SetBrandID(u uint64) {
	m.brand = &u
}

// BrandID returns the value of the "brand_id" field in the mutation.
func (m *EbikeMutation) BrandID() (r uint64, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandID returns the old "brand_id" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldBrandID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandID: %w", err)
	}
	return oldValue.BrandID, nil
}

// ResetBrandID resets all changes to the "brand_id" field.
func (m *EbikeMutation) ResetBrandID() {
	m.brand = nil
}

// SetRiderID sets the "rider_id" field.
func (m *EbikeMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *EbikeMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldRiderID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ClearRiderID clears the value of the "rider_id" field.
func (m *EbikeMutation) ClearRiderID() {
	m.rider = nil
	m.clearedFields[ebike.FieldRiderID] = struct{}{}
}

// RiderIDCleared returns if the "rider_id" field was cleared in this mutation.
func (m *EbikeMutation) RiderIDCleared() bool {
	_, ok := m.clearedFields[ebike.FieldRiderID]
	return ok
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *EbikeMutation) ResetRiderID() {
	m.rider = nil
	delete(m.clearedFields, ebike.FieldRiderID)
}

// SetStoreID sets the "store_id" field.
func (m *EbikeMutation) SetStoreID(u uint64) {
	m.store = &u
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *EbikeMutation) StoreID() (r uint64, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldStoreID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// ClearStoreID clears the value of the "store_id" field.
func (m *EbikeMutation) ClearStoreID() {
	m.store = nil
	m.clearedFields[ebike.FieldStoreID] = struct{}{}
}

// StoreIDCleared returns if the "store_id" field was cleared in this mutation.
func (m *EbikeMutation) StoreIDCleared() bool {
	_, ok := m.clearedFields[ebike.FieldStoreID]
	return ok
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *EbikeMutation) ResetStoreID() {
	m.store = nil
	delete(m.clearedFields, ebike.FieldStoreID)
}

// SetStatus sets the "status" field.
func (m *EbikeMutation) SetStatus(ms model.EbikeStatus) {
	m.status = &ms
}

// Status returns the value of the "status" field in the mutation.
func (m *EbikeMutation) Status() (r model.EbikeStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldStatus(ctx context.Context) (v model.EbikeStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *EbikeMutation) ResetStatus() {
	m.status = nil
}

// SetEnable sets the "enable" field.
func (m *EbikeMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *EbikeMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ResetEnable resets all changes to the "enable" field.
func (m *EbikeMutation) ResetEnable() {
	m.enable = nil
}

// SetSn sets the "sn" field.
func (m *EbikeMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *EbikeMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *EbikeMutation) ResetSn() {
	m.sn = nil
}

// SetPlate sets the "plate" field.
func (m *EbikeMutation) SetPlate(s string) {
	m.plate = &s
}

// Plate returns the value of the "plate" field in the mutation.
func (m *EbikeMutation) Plate() (r string, exists bool) {
	v := m.plate
	if v == nil {
		return
	}
	return *v, true
}

// OldPlate returns the old "plate" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldPlate(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlate: %w", err)
	}
	return oldValue.Plate, nil
}

// ClearPlate clears the value of the "plate" field.
func (m *EbikeMutation) ClearPlate() {
	m.plate = nil
	m.clearedFields[ebike.FieldPlate] = struct{}{}
}

// PlateCleared returns if the "plate" field was cleared in this mutation.
func (m *EbikeMutation) PlateCleared() bool {
	_, ok := m.clearedFields[ebike.FieldPlate]
	return ok
}

// ResetPlate resets all changes to the "plate" field.
func (m *EbikeMutation) ResetPlate() {
	m.plate = nil
	delete(m.clearedFields, ebike.FieldPlate)
}

// SetMachine sets the "machine" field.
func (m *EbikeMutation) SetMachine(s string) {
	m.machine = &s
}

// Machine returns the value of the "machine" field in the mutation.
func (m *EbikeMutation) Machine() (r string, exists bool) {
	v := m.machine
	if v == nil {
		return
	}
	return *v, true
}

// OldMachine returns the old "machine" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldMachine(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMachine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMachine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMachine: %w", err)
	}
	return oldValue.Machine, nil
}

// ClearMachine clears the value of the "machine" field.
func (m *EbikeMutation) ClearMachine() {
	m.machine = nil
	m.clearedFields[ebike.FieldMachine] = struct{}{}
}

// MachineCleared returns if the "machine" field was cleared in this mutation.
func (m *EbikeMutation) MachineCleared() bool {
	_, ok := m.clearedFields[ebike.FieldMachine]
	return ok
}

// ResetMachine resets all changes to the "machine" field.
func (m *EbikeMutation) ResetMachine() {
	m.machine = nil
	delete(m.clearedFields, ebike.FieldMachine)
}

// SetSim sets the "sim" field.
func (m *EbikeMutation) SetSim(s string) {
	m.sim = &s
}

// Sim returns the value of the "sim" field in the mutation.
func (m *EbikeMutation) Sim() (r string, exists bool) {
	v := m.sim
	if v == nil {
		return
	}
	return *v, true
}

// OldSim returns the old "sim" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldSim(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSim is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSim requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSim: %w", err)
	}
	return oldValue.Sim, nil
}

// ClearSim clears the value of the "sim" field.
func (m *EbikeMutation) ClearSim() {
	m.sim = nil
	m.clearedFields[ebike.FieldSim] = struct{}{}
}

// SimCleared returns if the "sim" field was cleared in this mutation.
func (m *EbikeMutation) SimCleared() bool {
	_, ok := m.clearedFields[ebike.FieldSim]
	return ok
}

// ResetSim resets all changes to the "sim" field.
func (m *EbikeMutation) ResetSim() {
	m.sim = nil
	delete(m.clearedFields, ebike.FieldSim)
}

// SetColor sets the "color" field.
func (m *EbikeMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *EbikeMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *EbikeMutation) ResetColor() {
	m.color = nil
}

// SetExFactory sets the "ex_factory" field.
func (m *EbikeMutation) SetExFactory(s string) {
	m.ex_factory = &s
}

// ExFactory returns the value of the "ex_factory" field in the mutation.
func (m *EbikeMutation) ExFactory() (r string, exists bool) {
	v := m.ex_factory
	if v == nil {
		return
	}
	return *v, true
}

// OldExFactory returns the old "ex_factory" field's value of the Ebike entity.
// If the Ebike object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EbikeMutation) OldExFactory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExFactory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExFactory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExFactory: %w", err)
	}
	return oldValue.ExFactory, nil
}

// ResetExFactory resets all changes to the "ex_factory" field.
func (m *EbikeMutation) ResetExFactory() {
	m.ex_factory = nil
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (m *EbikeMutation) ClearBrand() {
	m.clearedbrand = true
}

// BrandCleared reports if the "brand" edge to the EbikeBrand entity was cleared.
func (m *EbikeMutation) BrandCleared() bool {
	return m.clearedbrand
}

// BrandIDs returns the "brand" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BrandID instead. It exists only for internal usage by the builders.
func (m *EbikeMutation) BrandIDs() (ids []uint64) {
	if id := m.brand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBrand resets all changes to the "brand" edge.
func (m *EbikeMutation) ResetBrand() {
	m.brand = nil
	m.clearedbrand = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *EbikeMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *EbikeMutation) RiderCleared() bool {
	return m.RiderIDCleared() || m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *EbikeMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *EbikeMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearStore clears the "store" edge to the Store entity.
func (m *EbikeMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *EbikeMutation) StoreCleared() bool {
	return m.StoreIDCleared() || m.clearedstore
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *EbikeMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *EbikeMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// Where appends a list predicates to the EbikeMutation builder.
func (m *EbikeMutation) Where(ps ...predicate.Ebike) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EbikeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ebike).
func (m *EbikeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EbikeMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, ebike.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ebike.FieldUpdatedAt)
	}
	if m.creator != nil {
		fields = append(fields, ebike.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, ebike.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, ebike.FieldRemark)
	}
	if m.brand != nil {
		fields = append(fields, ebike.FieldBrandID)
	}
	if m.rider != nil {
		fields = append(fields, ebike.FieldRiderID)
	}
	if m.store != nil {
		fields = append(fields, ebike.FieldStoreID)
	}
	if m.status != nil {
		fields = append(fields, ebike.FieldStatus)
	}
	if m.enable != nil {
		fields = append(fields, ebike.FieldEnable)
	}
	if m.sn != nil {
		fields = append(fields, ebike.FieldSn)
	}
	if m.plate != nil {
		fields = append(fields, ebike.FieldPlate)
	}
	if m.machine != nil {
		fields = append(fields, ebike.FieldMachine)
	}
	if m.sim != nil {
		fields = append(fields, ebike.FieldSim)
	}
	if m.color != nil {
		fields = append(fields, ebike.FieldColor)
	}
	if m.ex_factory != nil {
		fields = append(fields, ebike.FieldExFactory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EbikeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ebike.FieldCreatedAt:
		return m.CreatedAt()
	case ebike.FieldUpdatedAt:
		return m.UpdatedAt()
	case ebike.FieldCreator:
		return m.Creator()
	case ebike.FieldLastModifier:
		return m.LastModifier()
	case ebike.FieldRemark:
		return m.Remark()
	case ebike.FieldBrandID:
		return m.BrandID()
	case ebike.FieldRiderID:
		return m.RiderID()
	case ebike.FieldStoreID:
		return m.StoreID()
	case ebike.FieldStatus:
		return m.Status()
	case ebike.FieldEnable:
		return m.Enable()
	case ebike.FieldSn:
		return m.Sn()
	case ebike.FieldPlate:
		return m.Plate()
	case ebike.FieldMachine:
		return m.Machine()
	case ebike.FieldSim:
		return m.Sim()
	case ebike.FieldColor:
		return m.Color()
	case ebike.FieldExFactory:
		return m.ExFactory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EbikeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ebike.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ebike.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ebike.FieldCreator:
		return m.OldCreator(ctx)
	case ebike.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case ebike.FieldRemark:
		return m.OldRemark(ctx)
	case ebike.FieldBrandID:
		return m.OldBrandID(ctx)
	case ebike.FieldRiderID:
		return m.OldRiderID(ctx)
	case ebike.FieldStoreID:
		return m.OldStoreID(ctx)
	case ebike.FieldStatus:
		return m.OldStatus(ctx)
	case ebike.FieldEnable:
		return m.OldEnable(ctx)
	case ebike.FieldSn:
		return m.OldSn(ctx)
	case ebike.FieldPlate:
		return m.OldPlate(ctx)
	case ebike.FieldMachine:
		return m.OldMachine(ctx)
	case ebike.FieldSim:
		return m.OldSim(ctx)
	case ebike.FieldColor:
		return m.OldColor(ctx)
	case ebike.FieldExFactory:
		return m.OldExFactory(ctx)
	}
	return nil, fmt.Errorf("unknown Ebike field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EbikeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ebike.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ebike.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ebike.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case ebike.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case ebike.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case ebike.FieldBrandID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandID(v)
		return nil
	case ebike.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case ebike.FieldStoreID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case ebike.FieldStatus:
		v, ok := value.(model.EbikeStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ebike.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	case ebike.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case ebike.FieldPlate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlate(v)
		return nil
	case ebike.FieldMachine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMachine(v)
		return nil
	case ebike.FieldSim:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSim(v)
		return nil
	case ebike.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case ebike.FieldExFactory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExFactory(v)
		return nil
	}
	return fmt.Errorf("unknown Ebike field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EbikeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EbikeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EbikeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ebike numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EbikeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ebike.FieldCreator) {
		fields = append(fields, ebike.FieldCreator)
	}
	if m.FieldCleared(ebike.FieldLastModifier) {
		fields = append(fields, ebike.FieldLastModifier)
	}
	if m.FieldCleared(ebike.FieldRemark) {
		fields = append(fields, ebike.FieldRemark)
	}
	if m.FieldCleared(ebike.FieldRiderID) {
		fields = append(fields, ebike.FieldRiderID)
	}
	if m.FieldCleared(ebike.FieldStoreID) {
		fields = append(fields, ebike.FieldStoreID)
	}
	if m.FieldCleared(ebike.FieldPlate) {
		fields = append(fields, ebike.FieldPlate)
	}
	if m.FieldCleared(ebike.FieldMachine) {
		fields = append(fields, ebike.FieldMachine)
	}
	if m.FieldCleared(ebike.FieldSim) {
		fields = append(fields, ebike.FieldSim)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EbikeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EbikeMutation) ClearField(name string) error {
	switch name {
	case ebike.FieldCreator:
		m.ClearCreator()
		return nil
	case ebike.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case ebike.FieldRemark:
		m.ClearRemark()
		return nil
	case ebike.FieldRiderID:
		m.ClearRiderID()
		return nil
	case ebike.FieldStoreID:
		m.ClearStoreID()
		return nil
	case ebike.FieldPlate:
		m.ClearPlate()
		return nil
	case ebike.FieldMachine:
		m.ClearMachine()
		return nil
	case ebike.FieldSim:
		m.ClearSim()
		return nil
	}
	return fmt.Errorf("unknown Ebike nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EbikeMutation) ResetField(name string) error {
	switch name {
	case ebike.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ebike.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ebike.FieldCreator:
		m.ResetCreator()
		return nil
	case ebike.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case ebike.FieldRemark:
		m.ResetRemark()
		return nil
	case ebike.FieldBrandID:
		m.ResetBrandID()
		return nil
	case ebike.FieldRiderID:
		m.ResetRiderID()
		return nil
	case ebike.FieldStoreID:
		m.ResetStoreID()
		return nil
	case ebike.FieldStatus:
		m.ResetStatus()
		return nil
	case ebike.FieldEnable:
		m.ResetEnable()
		return nil
	case ebike.FieldSn:
		m.ResetSn()
		return nil
	case ebike.FieldPlate:
		m.ResetPlate()
		return nil
	case ebike.FieldMachine:
		m.ResetMachine()
		return nil
	case ebike.FieldSim:
		m.ResetSim()
		return nil
	case ebike.FieldColor:
		m.ResetColor()
		return nil
	case ebike.FieldExFactory:
		m.ResetExFactory()
		return nil
	}
	return fmt.Errorf("unknown Ebike field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EbikeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.brand != nil {
		edges = append(edges, ebike.EdgeBrand)
	}
	if m.rider != nil {
		edges = append(edges, ebike.EdgeRider)
	}
	if m.store != nil {
		edges = append(edges, ebike.EdgeStore)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EbikeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ebike.EdgeBrand:
		if id := m.brand; id != nil {
			return []ent.Value{*id}
		}
	case ebike.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case ebike.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EbikeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EbikeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EbikeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbrand {
		edges = append(edges, ebike.EdgeBrand)
	}
	if m.clearedrider {
		edges = append(edges, ebike.EdgeRider)
	}
	if m.clearedstore {
		edges = append(edges, ebike.EdgeStore)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EbikeMutation) EdgeCleared(name string) bool {
	switch name {
	case ebike.EdgeBrand:
		return m.clearedbrand
	case ebike.EdgeRider:
		return m.clearedrider
	case ebike.EdgeStore:
		return m.clearedstore
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EbikeMutation) ClearEdge(name string) error {
	switch name {
	case ebike.EdgeBrand:
		m.ClearBrand()
		return nil
	case ebike.EdgeRider:
		m.ClearRider()
		return nil
	case ebike.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Ebike unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EbikeMutation) ResetEdge(name string) error {
	switch name {
	case ebike.EdgeBrand:
		m.ResetBrand()
		return nil
	case ebike.EdgeRider:
		m.ResetRider()
		return nil
	case ebike.EdgeStore:
		m.ResetStore()
		return nil
	}
	return fmt.Errorf("unknown Ebike edge %s", name)
}

