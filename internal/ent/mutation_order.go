// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/order"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	creator           **model.Modifier
	last_modifier     **model.Modifier
	remark            *string
	status            *uint8
	addstatus         *int8
	payway            *uint8
	addpayway         *int8
	_type             *uint
	add_type          *int
	out_trade_no      *string
	trade_no          *string
	amount            *float64
	addamount         *float64
	total             *float64
	addtotal          *float64
	refund_at         *time.Time
	initial_days      *int
	addinitial_days   *int
	past_days         *int
	addpast_days      *int
	points            *int64
	addpoints         *int64
	point_ratio       *float64
	addpoint_ratio    *float64
	coupon_amount     *float64
	addcoupon_amount  *float64
	discount_newly    *float64
	adddiscount_newly *float64
	clearedFields     map[string]struct{}
	plan              *uint64
	clearedplan       bool
	city              *uint64
	clearedcity       bool
	brand             *uint64
	clearedbrand      bool
	ebike             *uint64
	clearedebike      bool
	rider             *uint64
	clearedrider      bool
	subscribe         *uint64
	clearedsubscribe  bool
	commission        *uint64
	clearedcommission bool
	parent            *uint64
	clearedparent     bool
	children          map[uint64]struct{}
	removedchildren   map[uint64]struct{}
	clearedchildren   bool
	refund            *uint64
	clearedrefund     bool
	assistance        *uint64
	clearedassistance bool
	coupons           map[uint64]struct{}
	removedcoupons    map[uint64]struct{}
	clearedcoupons    bool
	done              bool
	oldValue          func(context.Context) (*Order, error)
	predicates        []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id uint64) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrderMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrderMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrderMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[order.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrderMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[order.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, order.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *OrderMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *OrderMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *OrderMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[order.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *OrderMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[order.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *OrderMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, order.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *OrderMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *OrderMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *OrderMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[order.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *OrderMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[order.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *OrderMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, order.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *OrderMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *OrderMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *OrderMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[order.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *OrderMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[order.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *OrderMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, order.FieldRemark)
}

// SetPlanID sets the "plan_id" field.
func (m *OrderMutation) SetPlanID(u uint64) {
	m.plan = &u
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *OrderMutation) PlanID() (r uint64, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPlanID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *OrderMutation) ClearPlanID() {
	m.plan = nil
	m.clearedFields[order.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *OrderMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[order.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *OrderMutation) ResetPlanID() {
	m.plan = nil
	delete(m.clearedFields, order.FieldPlanID)
}

// SetCityID sets the "city_id" field.
func (m *OrderMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *OrderMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCityID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ClearCityID clears the value of the "city_id" field.
func (m *OrderMutation) ClearCityID() {
	m.city = nil
	m.clearedFields[order.FieldCityID] = struct{}{}
}

// CityIDCleared returns if the "city_id" field was cleared in this mutation.
func (m *OrderMutation) CityIDCleared() bool {
	_, ok := m.clearedFields[order.FieldCityID]
	return ok
}

// ResetCityID resets all changes to the "city_id" field.
func (m *OrderMutation) ResetCityID() {
	m.city = nil
	delete(m.clearedFields, order.FieldCityID)
}

// SetBrandID sets the "brand_id" field.
func (m *OrderMutation) SetBrandID(u uint64) {
	m.brand = &u
}

// BrandID returns the value of the "brand_id" field in the mutation.
func (m *OrderMutation) BrandID() (r uint64, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrandID returns the old "brand_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldBrandID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrandID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrandID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrandID: %w", err)
	}
	return oldValue.BrandID, nil
}

// ClearBrandID clears the value of the "brand_id" field.
func (m *OrderMutation) ClearBrandID() {
	m.brand = nil
	m.clearedFields[order.FieldBrandID] = struct{}{}
}

// BrandIDCleared returns if the "brand_id" field was cleared in this mutation.
func (m *OrderMutation) BrandIDCleared() bool {
	_, ok := m.clearedFields[order.FieldBrandID]
	return ok
}

// ResetBrandID resets all changes to the "brand_id" field.
func (m *OrderMutation) ResetBrandID() {
	m.brand = nil
	delete(m.clearedFields, order.FieldBrandID)
}

// SetEbikeID sets the "ebike_id" field.
func (m *OrderMutation) SetEbikeID(u uint64) {
	m.ebike = &u
}

// EbikeID returns the value of the "ebike_id" field in the mutation.
func (m *OrderMutation) EbikeID() (r uint64, exists bool) {
	v := m.ebike
	if v == nil {
		return
	}
	return *v, true
}

// OldEbikeID returns the old "ebike_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldEbikeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEbikeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEbikeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEbikeID: %w", err)
	}
	return oldValue.EbikeID, nil
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (m *OrderMutation) ClearEbikeID() {
	m.ebike = nil
	m.clearedFields[order.FieldEbikeID] = struct{}{}
}

// EbikeIDCleared returns if the "ebike_id" field was cleared in this mutation.
func (m *OrderMutation) EbikeIDCleared() bool {
	_, ok := m.clearedFields[order.FieldEbikeID]
	return ok
}

// ResetEbikeID resets all changes to the "ebike_id" field.
func (m *OrderMutation) ResetEbikeID() {
	m.ebike = nil
	delete(m.clearedFields, order.FieldEbikeID)
}

// SetRiderID sets the "rider_id" field.
func (m *OrderMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *OrderMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *OrderMutation) ResetRiderID() {
	m.rider = nil
}

// SetParentID sets the "parent_id" field.
func (m *OrderMutation) SetParentID(u uint64) {
	m.parent = &u
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrderMutation) ParentID() (r uint64, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldParentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrderMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[order.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrderMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[order.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrderMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, order.FieldParentID)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *OrderMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *OrderMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldSubscribeID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (m *OrderMutation) ClearSubscribeID() {
	m.subscribe = nil
	m.clearedFields[order.FieldSubscribeID] = struct{}{}
}

// SubscribeIDCleared returns if the "subscribe_id" field was cleared in this mutation.
func (m *OrderMutation) SubscribeIDCleared() bool {
	_, ok := m.clearedFields[order.FieldSubscribeID]
	return ok
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *OrderMutation) ResetSubscribeID() {
	m.subscribe = nil
	delete(m.clearedFields, order.FieldSubscribeID)
}

// SetStatus sets the "status" field.
func (m *OrderMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *OrderMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *OrderMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *OrderMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *OrderMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetPayway sets the "payway" field.
func (m *OrderMutation) SetPayway(u uint8) {
	m.payway = &u
	m.addpayway = nil
}

// Payway returns the value of the "payway" field in the mutation.
func (m *OrderMutation) Payway() (r uint8, exists bool) {
	v := m.payway
	if v == nil {
		return
	}
	return *v, true
}

// OldPayway returns the old "payway" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPayway(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayway is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayway requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayway: %w", err)
	}
	return oldValue.Payway, nil
}

// AddPayway adds u to the "payway" field.
func (m *OrderMutation) AddPayway(u int8) {
	if m.addpayway != nil {
		*m.addpayway += u
	} else {
		m.addpayway = &u
	}
}

// AddedPayway returns the value that was added to the "payway" field in this mutation.
func (m *OrderMutation) AddedPayway() (r int8, exists bool) {
	v := m.addpayway
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayway resets all changes to the "payway" field.
func (m *OrderMutation) ResetPayway() {
	m.payway = nil
	m.addpayway = nil
}

// SetType sets the "type" field.
func (m *OrderMutation) SetType(u uint) {
	m._type = &u
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *OrderMutation) GetType() (r uint, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldType(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds u to the "type" field.
func (m *OrderMutation) AddType(u int) {
	if m.add_type != nil {
		*m.add_type += u
	} else {
		m.add_type = &u
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *OrderMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *OrderMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetOutTradeNo sets the "out_trade_no" field.
func (m *OrderMutation) SetOutTradeNo(s string) {
	m.out_trade_no = &s
}

// OutTradeNo returns the value of the "out_trade_no" field in the mutation.
func (m *OrderMutation) OutTradeNo() (r string, exists bool) {
	v := m.out_trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOutTradeNo returns the old "out_trade_no" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOutTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutTradeNo: %w", err)
	}
	return oldValue.OutTradeNo, nil
}

// ResetOutTradeNo resets all changes to the "out_trade_no" field.
func (m *OrderMutation) ResetOutTradeNo() {
	m.out_trade_no = nil
}

// SetTradeNo sets the "trade_no" field.
func (m *OrderMutation) SetTradeNo(s string) {
	m.trade_no = &s
}

// TradeNo returns the value of the "trade_no" field in the mutation.
func (m *OrderMutation) TradeNo() (r string, exists bool) {
	v := m.trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeNo returns the old "trade_no" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeNo: %w", err)
	}
	return oldValue.TradeNo, nil
}

// ResetTradeNo resets all changes to the "trade_no" field.
func (m *OrderMutation) ResetTradeNo() {
	m.trade_no = nil
}

// SetAmount sets the "amount" field.
func (m *OrderMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *OrderMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *OrderMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *OrderMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *OrderMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetTotal sets the "total" field.
func (m *OrderMutation) SetTotal(f float64) {
	m.total = &f
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *OrderMutation) Total() (r float64, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTotal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds f to the "total" field.
func (m *OrderMutation) AddTotal(f float64) {
	if m.addtotal != nil {
		*m.addtotal += f
	} else {
		m.addtotal = &f
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *OrderMutation) AddedTotal() (r float64, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotal resets all changes to the "total" field.
func (m *OrderMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
}

// SetRefundAt sets the "refund_at" field.
func (m *OrderMutation) SetRefundAt(t time.Time) {
	m.refund_at = &t
}

// RefundAt returns the value of the "refund_at" field in the mutation.
func (m *OrderMutation) RefundAt() (r time.Time, exists bool) {
	v := m.refund_at
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundAt returns the old "refund_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldRefundAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundAt: %w", err)
	}
	return oldValue.RefundAt, nil
}

// ClearRefundAt clears the value of the "refund_at" field.
func (m *OrderMutation) ClearRefundAt() {
	m.refund_at = nil
	m.clearedFields[order.FieldRefundAt] = struct{}{}
}

// RefundAtCleared returns if the "refund_at" field was cleared in this mutation.
func (m *OrderMutation) RefundAtCleared() bool {
	_, ok := m.clearedFields[order.FieldRefundAt]
	return ok
}

// ResetRefundAt resets all changes to the "refund_at" field.
func (m *OrderMutation) ResetRefundAt() {
	m.refund_at = nil
	delete(m.clearedFields, order.FieldRefundAt)
}

// SetInitialDays sets the "initial_days" field.
func (m *OrderMutation) SetInitialDays(i int) {
	m.initial_days = &i
	m.addinitial_days = nil
}

// InitialDays returns the value of the "initial_days" field in the mutation.
func (m *OrderMutation) InitialDays() (r int, exists bool) {
	v := m.initial_days
	if v == nil {
		return
	}
	return *v, true
}

// OldInitialDays returns the old "initial_days" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldInitialDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInitialDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInitialDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInitialDays: %w", err)
	}
	return oldValue.InitialDays, nil
}

// AddInitialDays adds i to the "initial_days" field.
func (m *OrderMutation) AddInitialDays(i int) {
	if m.addinitial_days != nil {
		*m.addinitial_days += i
	} else {
		m.addinitial_days = &i
	}
}

// AddedInitialDays returns the value that was added to the "initial_days" field in this mutation.
func (m *OrderMutation) AddedInitialDays() (r int, exists bool) {
	v := m.addinitial_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearInitialDays clears the value of the "initial_days" field.
func (m *OrderMutation) ClearInitialDays() {
	m.initial_days = nil
	m.addinitial_days = nil
	m.clearedFields[order.FieldInitialDays] = struct{}{}
}

// InitialDaysCleared returns if the "initial_days" field was cleared in this mutation.
func (m *OrderMutation) InitialDaysCleared() bool {
	_, ok := m.clearedFields[order.FieldInitialDays]
	return ok
}

// ResetInitialDays resets all changes to the "initial_days" field.
func (m *OrderMutation) ResetInitialDays() {
	m.initial_days = nil
	m.addinitial_days = nil
	delete(m.clearedFields, order.FieldInitialDays)
}

// SetPastDays sets the "past_days" field.
func (m *OrderMutation) SetPastDays(i int) {
	m.past_days = &i
	m.addpast_days = nil
}

// PastDays returns the value of the "past_days" field in the mutation.
func (m *OrderMutation) PastDays() (r int, exists bool) {
	v := m.past_days
	if v == nil {
		return
	}
	return *v, true
}

// OldPastDays returns the old "past_days" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPastDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPastDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPastDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPastDays: %w", err)
	}
	return oldValue.PastDays, nil
}

// AddPastDays adds i to the "past_days" field.
func (m *OrderMutation) AddPastDays(i int) {
	if m.addpast_days != nil {
		*m.addpast_days += i
	} else {
		m.addpast_days = &i
	}
}

// AddedPastDays returns the value that was added to the "past_days" field in this mutation.
func (m *OrderMutation) AddedPastDays() (r int, exists bool) {
	v := m.addpast_days
	if v == nil {
		return
	}
	return *v, true
}

// ClearPastDays clears the value of the "past_days" field.
func (m *OrderMutation) ClearPastDays() {
	m.past_days = nil
	m.addpast_days = nil
	m.clearedFields[order.FieldPastDays] = struct{}{}
}

// PastDaysCleared returns if the "past_days" field was cleared in this mutation.
func (m *OrderMutation) PastDaysCleared() bool {
	_, ok := m.clearedFields[order.FieldPastDays]
	return ok
}

// ResetPastDays resets all changes to the "past_days" field.
func (m *OrderMutation) ResetPastDays() {
	m.past_days = nil
	m.addpast_days = nil
	delete(m.clearedFields, order.FieldPastDays)
}

// SetPoints sets the "points" field.
func (m *OrderMutation) SetPoints(i int64) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *OrderMutation) Points() (r int64, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPoints(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *OrderMutation) AddPoints(i int64) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *OrderMutation) AddedPoints() (r int64, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *OrderMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// SetPointRatio sets the "point_ratio" field.
func (m *OrderMutation) SetPointRatio(f float64) {
	m.point_ratio = &f
	m.addpoint_ratio = nil
}

// PointRatio returns the value of the "point_ratio" field in the mutation.
func (m *OrderMutation) PointRatio() (r float64, exists bool) {
	v := m.point_ratio
	if v == nil {
		return
	}
	return *v, true
}

// OldPointRatio returns the old "point_ratio" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPointRatio(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointRatio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointRatio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointRatio: %w", err)
	}
	return oldValue.PointRatio, nil
}

// AddPointRatio adds f to the "point_ratio" field.
func (m *OrderMutation) AddPointRatio(f float64) {
	if m.addpoint_ratio != nil {
		*m.addpoint_ratio += f
	} else {
		m.addpoint_ratio = &f
	}
}

// AddedPointRatio returns the value that was added to the "point_ratio" field in this mutation.
func (m *OrderMutation) AddedPointRatio() (r float64, exists bool) {
	v := m.addpoint_ratio
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointRatio resets all changes to the "point_ratio" field.
func (m *OrderMutation) ResetPointRatio() {
	m.point_ratio = nil
	m.addpoint_ratio = nil
}

// SetCouponAmount sets the "coupon_amount" field.
func (m *OrderMutation) SetCouponAmount(f float64) {
	m.coupon_amount = &f
	m.addcoupon_amount = nil
}

// CouponAmount returns the value of the "coupon_amount" field in the mutation.
func (m *OrderMutation) CouponAmount() (r float64, exists bool) {
	v := m.coupon_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldCouponAmount returns the old "coupon_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldCouponAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCouponAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCouponAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCouponAmount: %w", err)
	}
	return oldValue.CouponAmount, nil
}

// AddCouponAmount adds f to the "coupon_amount" field.
func (m *OrderMutation) AddCouponAmount(f float64) {
	if m.addcoupon_amount != nil {
		*m.addcoupon_amount += f
	} else {
		m.addcoupon_amount = &f
	}
}

// AddedCouponAmount returns the value that was added to the "coupon_amount" field in this mutation.
func (m *OrderMutation) AddedCouponAmount() (r float64, exists bool) {
	v := m.addcoupon_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetCouponAmount resets all changes to the "coupon_amount" field.
func (m *OrderMutation) ResetCouponAmount() {
	m.coupon_amount = nil
	m.addcoupon_amount = nil
}

// SetDiscountNewly sets the "discount_newly" field.
func (m *OrderMutation) SetDiscountNewly(f float64) {
	m.discount_newly = &f
	m.adddiscount_newly = nil
}

// DiscountNewly returns the value of the "discount_newly" field in the mutation.
func (m *OrderMutation) DiscountNewly() (r float64, exists bool) {
	v := m.discount_newly
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscountNewly returns the old "discount_newly" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDiscountNewly(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscountNewly is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscountNewly requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscountNewly: %w", err)
	}
	return oldValue.DiscountNewly, nil
}

// AddDiscountNewly adds f to the "discount_newly" field.
func (m *OrderMutation) AddDiscountNewly(f float64) {
	if m.adddiscount_newly != nil {
		*m.adddiscount_newly += f
	} else {
		m.adddiscount_newly = &f
	}
}

// AddedDiscountNewly returns the value that was added to the "discount_newly" field in this mutation.
func (m *OrderMutation) AddedDiscountNewly() (r float64, exists bool) {
	v := m.adddiscount_newly
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscountNewly resets all changes to the "discount_newly" field.
func (m *OrderMutation) ResetDiscountNewly() {
	m.discount_newly = nil
	m.adddiscount_newly = nil
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *OrderMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *OrderMutation) PlanCleared() bool {
	return m.PlanIDCleared() || m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) PlanIDs() (ids []uint64) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *OrderMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// ClearCity clears the "city" edge to the City entity.
func (m *OrderMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *OrderMutation) CityCleared() bool {
	return m.CityIDCleared() || m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *OrderMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (m *OrderMutation) ClearBrand() {
	m.clearedbrand = true
}

// BrandCleared reports if the "brand" edge to the EbikeBrand entity was cleared.
func (m *OrderMutation) BrandCleared() bool {
	return m.BrandIDCleared() || m.clearedbrand
}

// BrandIDs returns the "brand" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BrandID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) BrandIDs() (ids []uint64) {
	if id := m.brand; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBrand resets all changes to the "brand" edge.
func (m *OrderMutation) ResetBrand() {
	m.brand = nil
	m.clearedbrand = false
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (m *OrderMutation) ClearEbike() {
	m.clearedebike = true
}

// EbikeCleared reports if the "ebike" edge to the Ebike entity was cleared.
func (m *OrderMutation) EbikeCleared() bool {
	return m.EbikeIDCleared() || m.clearedebike
}

// EbikeIDs returns the "ebike" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EbikeID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) EbikeIDs() (ids []uint64) {
	if id := m.ebike; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEbike resets all changes to the "ebike" edge.
func (m *OrderMutation) ResetEbike() {
	m.ebike = nil
	m.clearedebike = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *OrderMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *OrderMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *OrderMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *OrderMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *OrderMutation) SubscribeCleared() bool {
	return m.SubscribeIDCleared() || m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *OrderMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// SetCommissionID sets the "commission" edge to the Commission entity by id.
func (m *OrderMutation) SetCommissionID(id uint64) {
	m.commission = &id
}

// ClearCommission clears the "commission" edge to the Commission entity.
func (m *OrderMutation) ClearCommission() {
	m.clearedcommission = true
}

// CommissionCleared reports if the "commission" edge to the Commission entity was cleared.
func (m *OrderMutation) CommissionCleared() bool {
	return m.clearedcommission
}

// CommissionID returns the "commission" edge ID in the mutation.
func (m *OrderMutation) CommissionID() (id uint64, exists bool) {
	if m.commission != nil {
		return *m.commission, true
	}
	return
}

// CommissionIDs returns the "commission" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CommissionID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) CommissionIDs() (ids []uint64) {
	if id := m.commission; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCommission resets all changes to the "commission" edge.
func (m *OrderMutation) ResetCommission() {
	m.commission = nil
	m.clearedcommission = false
}

// ClearParent clears the "parent" edge to the Order entity.
func (m *OrderMutation) ClearParent() {
	m.clearedparent = true
}

// ParentCleared reports if the "parent" edge to the Order entity was cleared.
func (m *OrderMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) ParentIDs() (ids []uint64) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrderMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Order entity by ids.
func (m *OrderMutation) AddChildIDs(ids ...uint64) {
	if m.children == nil {
		m.children = make(map[uint64]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Order entity.
func (m *OrderMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Order entity was cleared.
func (m *OrderMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Order entity by IDs.
func (m *OrderMutation) RemoveChildIDs(ids ...uint64) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Order entity.
func (m *OrderMutation) RemovedChildrenIDs() (ids []uint64) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrderMutation) ChildrenIDs() (ids []uint64) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrderMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// SetRefundID sets the "refund" edge to the OrderRefund entity by id.
func (m *OrderMutation) SetRefundID(id uint64) {
	m.refund = &id
}

// ClearRefund clears the "refund" edge to the OrderRefund entity.
func (m *OrderMutation) ClearRefund() {
	m.clearedrefund = true
}

// RefundCleared reports if the "refund" edge to the OrderRefund entity was cleared.
func (m *OrderMutation) RefundCleared() bool {
	return m.clearedrefund
}

// RefundID returns the "refund" edge ID in the mutation.
func (m *OrderMutation) RefundID() (id uint64, exists bool) {
	if m.refund != nil {
		return *m.refund, true
	}
	return
}

// RefundIDs returns the "refund" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RefundID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) RefundIDs() (ids []uint64) {
	if id := m.refund; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRefund resets all changes to the "refund" edge.
func (m *OrderMutation) ResetRefund() {
	m.refund = nil
	m.clearedrefund = false
}

// SetAssistanceID sets the "assistance" edge to the Assistance entity by id.
func (m *OrderMutation) SetAssistanceID(id uint64) {
	m.assistance = &id
}

// ClearAssistance clears the "assistance" edge to the Assistance entity.
func (m *OrderMutation) ClearAssistance() {
	m.clearedassistance = true
}

// AssistanceCleared reports if the "assistance" edge to the Assistance entity was cleared.
func (m *OrderMutation) AssistanceCleared() bool {
	return m.clearedassistance
}

// AssistanceID returns the "assistance" edge ID in the mutation.
func (m *OrderMutation) AssistanceID() (id uint64, exists bool) {
	if m.assistance != nil {
		return *m.assistance, true
	}
	return
}

// AssistanceIDs returns the "assistance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssistanceID instead. It exists only for internal usage by the builders.
func (m *OrderMutation) AssistanceIDs() (ids []uint64) {
	if id := m.assistance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssistance resets all changes to the "assistance" edge.
func (m *OrderMutation) ResetAssistance() {
	m.assistance = nil
	m.clearedassistance = false
}

// AddCouponIDs adds the "coupons" edge to the Coupon entity by ids.
func (m *OrderMutation) AddCouponIDs(ids ...uint64) {
	if m.coupons == nil {
		m.coupons = make(map[uint64]struct{})
	}
	for i := range ids {
		m.coupons[ids[i]] = struct{}{}
	}
}

// ClearCoupons clears the "coupons" edge to the Coupon entity.
func (m *OrderMutation) ClearCoupons() {
	m.clearedcoupons = true
}

// CouponsCleared reports if the "coupons" edge to the Coupon entity was cleared.
func (m *OrderMutation) CouponsCleared() bool {
	return m.clearedcoupons
}

// RemoveCouponIDs removes the "coupons" edge to the Coupon entity by IDs.
func (m *OrderMutation) RemoveCouponIDs(ids ...uint64) {
	if m.removedcoupons == nil {
		m.removedcoupons = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.coupons, ids[i])
		m.removedcoupons[ids[i]] = struct{}{}
	}
}

// RemovedCoupons returns the removed IDs of the "coupons" edge to the Coupon entity.
func (m *OrderMutation) RemovedCouponsIDs() (ids []uint64) {
	for id := range m.removedcoupons {
		ids = append(ids, id)
	}
	return
}

// CouponsIDs returns the "coupons" edge IDs in the mutation.
func (m *OrderMutation) CouponsIDs() (ids []uint64) {
	for id := range m.coupons {
		ids = append(ids, id)
	}
	return
}

// ResetCoupons resets all changes to the "coupons" edge.
func (m *OrderMutation) ResetCoupons() {
	m.coupons = nil
	m.clearedcoupons = false
	m.removedcoupons = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 27)
	if m.created_at != nil {
		fields = append(fields, order.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, order.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, order.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, order.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, order.FieldRemark)
	}
	if m.plan != nil {
		fields = append(fields, order.FieldPlanID)
	}
	if m.city != nil {
		fields = append(fields, order.FieldCityID)
	}
	if m.brand != nil {
		fields = append(fields, order.FieldBrandID)
	}
	if m.ebike != nil {
		fields = append(fields, order.FieldEbikeID)
	}
	if m.rider != nil {
		fields = append(fields, order.FieldRiderID)
	}
	if m.parent != nil {
		fields = append(fields, order.FieldParentID)
	}
	if m.subscribe != nil {
		fields = append(fields, order.FieldSubscribeID)
	}
	if m.status != nil {
		fields = append(fields, order.FieldStatus)
	}
	if m.payway != nil {
		fields = append(fields, order.FieldPayway)
	}
	if m._type != nil {
		fields = append(fields, order.FieldType)
	}
	if m.out_trade_no != nil {
		fields = append(fields, order.FieldOutTradeNo)
	}
	if m.trade_no != nil {
		fields = append(fields, order.FieldTradeNo)
	}
	if m.amount != nil {
		fields = append(fields, order.FieldAmount)
	}
	if m.total != nil {
		fields = append(fields, order.FieldTotal)
	}
	if m.refund_at != nil {
		fields = append(fields, order.FieldRefundAt)
	}
	if m.initial_days != nil {
		fields = append(fields, order.FieldInitialDays)
	}
	if m.past_days != nil {
		fields = append(fields, order.FieldPastDays)
	}
	if m.points != nil {
		fields = append(fields, order.FieldPoints)
	}
	if m.point_ratio != nil {
		fields = append(fields, order.FieldPointRatio)
	}
	if m.coupon_amount != nil {
		fields = append(fields, order.FieldCouponAmount)
	}
	if m.discount_newly != nil {
		fields = append(fields, order.FieldDiscountNewly)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldCreatedAt:
		return m.CreatedAt()
	case order.FieldUpdatedAt:
		return m.UpdatedAt()
	case order.FieldDeletedAt:
		return m.DeletedAt()
	case order.FieldCreator:
		return m.Creator()
	case order.FieldLastModifier:
		return m.LastModifier()
	case order.FieldRemark:
		return m.Remark()
	case order.FieldPlanID:
		return m.PlanID()
	case order.FieldCityID:
		return m.CityID()
	case order.FieldBrandID:
		return m.BrandID()
	case order.FieldEbikeID:
		return m.EbikeID()
	case order.FieldRiderID:
		return m.RiderID()
	case order.FieldParentID:
		return m.ParentID()
	case order.FieldSubscribeID:
		return m.SubscribeID()
	case order.FieldStatus:
		return m.Status()
	case order.FieldPayway:
		return m.Payway()
	case order.FieldType:
		return m.GetType()
	case order.FieldOutTradeNo:
		return m.OutTradeNo()
	case order.FieldTradeNo:
		return m.TradeNo()
	case order.FieldAmount:
		return m.Amount()
	case order.FieldTotal:
		return m.Total()
	case order.FieldRefundAt:
		return m.RefundAt()
	case order.FieldInitialDays:
		return m.InitialDays()
	case order.FieldPastDays:
		return m.PastDays()
	case order.FieldPoints:
		return m.Points()
	case order.FieldPointRatio:
		return m.PointRatio()
	case order.FieldCouponAmount:
		return m.CouponAmount()
	case order.FieldDiscountNewly:
		return m.DiscountNewly()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case order.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case order.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case order.FieldCreator:
		return m.OldCreator(ctx)
	case order.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case order.FieldRemark:
		return m.OldRemark(ctx)
	case order.FieldPlanID:
		return m.OldPlanID(ctx)
	case order.FieldCityID:
		return m.OldCityID(ctx)
	case order.FieldBrandID:
		return m.OldBrandID(ctx)
	case order.FieldEbikeID:
		return m.OldEbikeID(ctx)
	case order.FieldRiderID:
		return m.OldRiderID(ctx)
	case order.FieldParentID:
		return m.OldParentID(ctx)
	case order.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case order.FieldStatus:
		return m.OldStatus(ctx)
	case order.FieldPayway:
		return m.OldPayway(ctx)
	case order.FieldType:
		return m.OldType(ctx)
	case order.FieldOutTradeNo:
		return m.OldOutTradeNo(ctx)
	case order.FieldTradeNo:
		return m.OldTradeNo(ctx)
	case order.FieldAmount:
		return m.OldAmount(ctx)
	case order.FieldTotal:
		return m.OldTotal(ctx)
	case order.FieldRefundAt:
		return m.OldRefundAt(ctx)
	case order.FieldInitialDays:
		return m.OldInitialDays(ctx)
	case order.FieldPastDays:
		return m.OldPastDays(ctx)
	case order.FieldPoints:
		return m.OldPoints(ctx)
	case order.FieldPointRatio:
		return m.OldPointRatio(ctx)
	case order.FieldCouponAmount:
		return m.OldCouponAmount(ctx)
	case order.FieldDiscountNewly:
		return m.OldDiscountNewly(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case order.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case order.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case order.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case order.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case order.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case order.FieldPlanID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case order.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case order.FieldBrandID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrandID(v)
		return nil
	case order.FieldEbikeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEbikeID(v)
		return nil
	case order.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case order.FieldParentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case order.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case order.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case order.FieldPayway:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayway(v)
		return nil
	case order.FieldType:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case order.FieldOutTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutTradeNo(v)
		return nil
	case order.FieldTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeNo(v)
		return nil
	case order.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case order.FieldTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case order.FieldRefundAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundAt(v)
		return nil
	case order.FieldInitialDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInitialDays(v)
		return nil
	case order.FieldPastDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPastDays(v)
		return nil
	case order.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case order.FieldPointRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointRatio(v)
		return nil
	case order.FieldCouponAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCouponAmount(v)
		return nil
	case order.FieldDiscountNewly:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscountNewly(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, order.FieldStatus)
	}
	if m.addpayway != nil {
		fields = append(fields, order.FieldPayway)
	}
	if m.add_type != nil {
		fields = append(fields, order.FieldType)
	}
	if m.addamount != nil {
		fields = append(fields, order.FieldAmount)
	}
	if m.addtotal != nil {
		fields = append(fields, order.FieldTotal)
	}
	if m.addinitial_days != nil {
		fields = append(fields, order.FieldInitialDays)
	}
	if m.addpast_days != nil {
		fields = append(fields, order.FieldPastDays)
	}
	if m.addpoints != nil {
		fields = append(fields, order.FieldPoints)
	}
	if m.addpoint_ratio != nil {
		fields = append(fields, order.FieldPointRatio)
	}
	if m.addcoupon_amount != nil {
		fields = append(fields, order.FieldCouponAmount)
	}
	if m.adddiscount_newly != nil {
		fields = append(fields, order.FieldDiscountNewly)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldStatus:
		return m.AddedStatus()
	case order.FieldPayway:
		return m.AddedPayway()
	case order.FieldType:
		return m.AddedType()
	case order.FieldAmount:
		return m.AddedAmount()
	case order.FieldTotal:
		return m.AddedTotal()
	case order.FieldInitialDays:
		return m.AddedInitialDays()
	case order.FieldPastDays:
		return m.AddedPastDays()
	case order.FieldPoints:
		return m.AddedPoints()
	case order.FieldPointRatio:
		return m.AddedPointRatio()
	case order.FieldCouponAmount:
		return m.AddedCouponAmount()
	case order.FieldDiscountNewly:
		return m.AddedDiscountNewly()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case order.FieldPayway:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayway(v)
		return nil
	case order.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case order.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case order.FieldTotal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	case order.FieldInitialDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInitialDays(v)
		return nil
	case order.FieldPastDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPastDays(v)
		return nil
	case order.FieldPoints:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case order.FieldPointRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointRatio(v)
		return nil
	case order.FieldCouponAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCouponAmount(v)
		return nil
	case order.FieldDiscountNewly:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscountNewly(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldDeletedAt) {
		fields = append(fields, order.FieldDeletedAt)
	}
	if m.FieldCleared(order.FieldCreator) {
		fields = append(fields, order.FieldCreator)
	}
	if m.FieldCleared(order.FieldLastModifier) {
		fields = append(fields, order.FieldLastModifier)
	}
	if m.FieldCleared(order.FieldRemark) {
		fields = append(fields, order.FieldRemark)
	}
	if m.FieldCleared(order.FieldPlanID) {
		fields = append(fields, order.FieldPlanID)
	}
	if m.FieldCleared(order.FieldCityID) {
		fields = append(fields, order.FieldCityID)
	}
	if m.FieldCleared(order.FieldBrandID) {
		fields = append(fields, order.FieldBrandID)
	}
	if m.FieldCleared(order.FieldEbikeID) {
		fields = append(fields, order.FieldEbikeID)
	}
	if m.FieldCleared(order.FieldParentID) {
		fields = append(fields, order.FieldParentID)
	}
	if m.FieldCleared(order.FieldSubscribeID) {
		fields = append(fields, order.FieldSubscribeID)
	}
	if m.FieldCleared(order.FieldRefundAt) {
		fields = append(fields, order.FieldRefundAt)
	}
	if m.FieldCleared(order.FieldInitialDays) {
		fields = append(fields, order.FieldInitialDays)
	}
	if m.FieldCleared(order.FieldPastDays) {
		fields = append(fields, order.FieldPastDays)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case order.FieldCreator:
		m.ClearCreator()
		return nil
	case order.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case order.FieldRemark:
		m.ClearRemark()
		return nil
	case order.FieldPlanID:
		m.ClearPlanID()
		return nil
	case order.FieldCityID:
		m.ClearCityID()
		return nil
	case order.FieldBrandID:
		m.ClearBrandID()
		return nil
	case order.FieldEbikeID:
		m.ClearEbikeID()
		return nil
	case order.FieldParentID:
		m.ClearParentID()
		return nil
	case order.FieldSubscribeID:
		m.ClearSubscribeID()
		return nil
	case order.FieldRefundAt:
		m.ClearRefundAt()
		return nil
	case order.FieldInitialDays:
		m.ClearInitialDays()
		return nil
	case order.FieldPastDays:
		m.ClearPastDays()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case order.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case order.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case order.FieldCreator:
		m.ResetCreator()
		return nil
	case order.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case order.FieldRemark:
		m.ResetRemark()
		return nil
	case order.FieldPlanID:
		m.ResetPlanID()
		return nil
	case order.FieldCityID:
		m.ResetCityID()
		return nil
	case order.FieldBrandID:
		m.ResetBrandID()
		return nil
	case order.FieldEbikeID:
		m.ResetEbikeID()
		return nil
	case order.FieldRiderID:
		m.ResetRiderID()
		return nil
	case order.FieldParentID:
		m.ResetParentID()
		return nil
	case order.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case order.FieldStatus:
		m.ResetStatus()
		return nil
	case order.FieldPayway:
		m.ResetPayway()
		return nil
	case order.FieldType:
		m.ResetType()
		return nil
	case order.FieldOutTradeNo:
		m.ResetOutTradeNo()
		return nil
	case order.FieldTradeNo:
		m.ResetTradeNo()
		return nil
	case order.FieldAmount:
		m.ResetAmount()
		return nil
	case order.FieldTotal:
		m.ResetTotal()
		return nil
	case order.FieldRefundAt:
		m.ResetRefundAt()
		return nil
	case order.FieldInitialDays:
		m.ResetInitialDays()
		return nil
	case order.FieldPastDays:
		m.ResetPastDays()
		return nil
	case order.FieldPoints:
		m.ResetPoints()
		return nil
	case order.FieldPointRatio:
		m.ResetPointRatio()
		return nil
	case order.FieldCouponAmount:
		m.ResetCouponAmount()
		return nil
	case order.FieldDiscountNewly:
		m.ResetDiscountNewly()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 12)
	if m.plan != nil {
		edges = append(edges, order.EdgePlan)
	}
	if m.city != nil {
		edges = append(edges, order.EdgeCity)
	}
	if m.brand != nil {
		edges = append(edges, order.EdgeBrand)
	}
	if m.ebike != nil {
		edges = append(edges, order.EdgeEbike)
	}
	if m.rider != nil {
		edges = append(edges, order.EdgeRider)
	}
	if m.subscribe != nil {
		edges = append(edges, order.EdgeSubscribe)
	}
	if m.commission != nil {
		edges = append(edges, order.EdgeCommission)
	}
	if m.parent != nil {
		edges = append(edges, order.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, order.EdgeChildren)
	}
	if m.refund != nil {
		edges = append(edges, order.EdgeRefund)
	}
	if m.assistance != nil {
		edges = append(edges, order.EdgeAssistance)
	}
	if m.coupons != nil {
		edges = append(edges, order.EdgeCoupons)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeBrand:
		if id := m.brand; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeEbike:
		if id := m.ebike; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeCommission:
		if id := m.commission; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeRefund:
		if id := m.refund; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeAssistance:
		if id := m.assistance; id != nil {
			return []ent.Value{*id}
		}
	case order.EdgeCoupons:
		ids := make([]ent.Value, 0, len(m.coupons))
		for id := range m.coupons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 12)
	if m.removedchildren != nil {
		edges = append(edges, order.EdgeChildren)
	}
	if m.removedcoupons != nil {
		edges = append(edges, order.EdgeCoupons)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeCoupons:
		ids := make([]ent.Value, 0, len(m.removedcoupons))
		for id := range m.removedcoupons {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 12)
	if m.clearedplan {
		edges = append(edges, order.EdgePlan)
	}
	if m.clearedcity {
		edges = append(edges, order.EdgeCity)
	}
	if m.clearedbrand {
		edges = append(edges, order.EdgeBrand)
	}
	if m.clearedebike {
		edges = append(edges, order.EdgeEbike)
	}
	if m.clearedrider {
		edges = append(edges, order.EdgeRider)
	}
	if m.clearedsubscribe {
		edges = append(edges, order.EdgeSubscribe)
	}
	if m.clearedcommission {
		edges = append(edges, order.EdgeCommission)
	}
	if m.clearedparent {
		edges = append(edges, order.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, order.EdgeChildren)
	}
	if m.clearedrefund {
		edges = append(edges, order.EdgeRefund)
	}
	if m.clearedassistance {
		edges = append(edges, order.EdgeAssistance)
	}
	if m.clearedcoupons {
		edges = append(edges, order.EdgeCoupons)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgePlan:
		return m.clearedplan
	case order.EdgeCity:
		return m.clearedcity
	case order.EdgeBrand:
		return m.clearedbrand
	case order.EdgeEbike:
		return m.clearedebike
	case order.EdgeRider:
		return m.clearedrider
	case order.EdgeSubscribe:
		return m.clearedsubscribe
	case order.EdgeCommission:
		return m.clearedcommission
	case order.EdgeParent:
		return m.clearedparent
	case order.EdgeChildren:
		return m.clearedchildren
	case order.EdgeRefund:
		return m.clearedrefund
	case order.EdgeAssistance:
		return m.clearedassistance
	case order.EdgeCoupons:
		return m.clearedcoupons
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	case order.EdgePlan:
		m.ClearPlan()
		return nil
	case order.EdgeCity:
		m.ClearCity()
		return nil
	case order.EdgeBrand:
		m.ClearBrand()
		return nil
	case order.EdgeEbike:
		m.ClearEbike()
		return nil
	case order.EdgeRider:
		m.ClearRider()
		return nil
	case order.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case order.EdgeCommission:
		m.ClearCommission()
		return nil
	case order.EdgeParent:
		m.ClearParent()
		return nil
	case order.EdgeRefund:
		m.ClearRefund()
		return nil
	case order.EdgeAssistance:
		m.ClearAssistance()
		return nil
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgePlan:
		m.ResetPlan()
		return nil
	case order.EdgeCity:
		m.ResetCity()
		return nil
	case order.EdgeBrand:
		m.ResetBrand()
		return nil
	case order.EdgeEbike:
		m.ResetEbike()
		return nil
	case order.EdgeRider:
		m.ResetRider()
		return nil
	case order.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case order.EdgeCommission:
		m.ResetCommission()
		return nil
	case order.EdgeParent:
		m.ResetParent()
		return nil
	case order.EdgeChildren:
		m.ResetChildren()
		return nil
	case order.EdgeRefund:
		m.ResetRefund()
		return nil
	case order.EdgeAssistance:
		m.ResetAssistance()
		return nil
	case order.EdgeCoupons:
		m.ResetCoupons()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

