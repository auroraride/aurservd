// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
)

// Cabinet is the model entity for the Cabinet schema.
type Cabinet struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// BranchID holds the value of the "branch_id" field.
	// 网点
	BranchID uint64 `json:"branch_id,omitempty"`
	// Sn holds the value of the "sn" field.
	// 编号
	Sn string `json:"sn,omitempty"`
	// Brand holds the value of the "brand" field.
	// 品牌
	Brand string `json:"brand,omitempty"`
	// Serial holds the value of the "serial" field.
	// 原始编号
	Serial string `json:"serial,omitempty"`
	// Name holds the value of the "name" field.
	// 名称
	Name string `json:"name,omitempty"`
	// Doors holds the value of the "doors" field.
	// 柜门数量
	Doors uint `json:"doors,omitempty"`
	// Status holds the value of the "status" field.
	// 投放状态
	Status uint `json:"status,omitempty"`
	// Models holds the value of the "models" field.
	// 电池型号
	Models []model.BatteryModel `json:"models,omitempty"`
	// Health holds the value of the "health" field.
	// 健康状态 0未知 1正常 2离线 3故障
	Health uint `json:"health,omitempty"`
	// Bin holds the value of the "bin" field.
	// 仓位信息
	Bin []model.CabinetBin `json:"bin,omitempty"`
	// BatteryNum holds the value of the "battery_num" field.
	// 电池总数
	BatteryNum uint `json:"battery_num,omitempty"`
	// BatteryFullNum holds the value of the "battery_full_num" field.
	// 满电电池数
	BatteryFullNum uint `json:"battery_full_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CabinetQuery when eager-loading is set.
	Edges CabinetEdges `json:"edges"`
}

// CabinetEdges holds the relations/edges for other nodes in the graph.
type CabinetEdges struct {
	// Branch holds the value of the branch edge.
	Branch *Branch `json:"branch,omitempty"`
	// Bms holds the value of the bms edge.
	Bms []*BatteryModel `json:"bms,omitempty"`
	// Faults holds the value of the faults edge.
	Faults []*CabinetFault `json:"faults,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BranchOrErr returns the Branch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetEdges) BranchOrErr() (*Branch, error) {
	if e.loadedTypes[0] {
		if e.Branch == nil {
			// The edge branch was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: branch.Label}
		}
		return e.Branch, nil
	}
	return nil, &NotLoadedError{edge: "branch"}
}

// BmsOrErr returns the Bms value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) BmsOrErr() ([]*BatteryModel, error) {
	if e.loadedTypes[1] {
		return e.Bms, nil
	}
	return nil, &NotLoadedError{edge: "bms"}
}

// FaultsOrErr returns the Faults value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) FaultsOrErr() ([]*CabinetFault, error) {
	if e.loadedTypes[2] {
		return e.Faults, nil
	}
	return nil, &NotLoadedError{edge: "faults"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cabinet) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cabinet.FieldCreator, cabinet.FieldLastModifier, cabinet.FieldModels, cabinet.FieldBin:
			values[i] = new([]byte)
		case cabinet.FieldID, cabinet.FieldBranchID, cabinet.FieldDoors, cabinet.FieldStatus, cabinet.FieldHealth, cabinet.FieldBatteryNum, cabinet.FieldBatteryFullNum:
			values[i] = new(sql.NullInt64)
		case cabinet.FieldRemark, cabinet.FieldSn, cabinet.FieldBrand, cabinet.FieldSerial, cabinet.FieldName:
			values[i] = new(sql.NullString)
		case cabinet.FieldCreatedAt, cabinet.FieldUpdatedAt, cabinet.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cabinet", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cabinet fields.
func (c *Cabinet) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cabinet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case cabinet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cabinet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cabinet.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case cabinet.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case cabinet.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case cabinet.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case cabinet.FieldBranchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field branch_id", values[i])
			} else if value.Valid {
				c.BranchID = uint64(value.Int64)
			}
		case cabinet.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				c.Sn = value.String
			}
		case cabinet.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				c.Brand = value.String
			}
		case cabinet.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				c.Serial = value.String
			}
		case cabinet.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cabinet.FieldDoors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field doors", values[i])
			} else if value.Valid {
				c.Doors = uint(value.Int64)
			}
		case cabinet.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint(value.Int64)
			}
		case cabinet.FieldModels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field models", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Models); err != nil {
					return fmt.Errorf("unmarshal field models: %w", err)
				}
			}
		case cabinet.FieldHealth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				c.Health = uint(value.Int64)
			}
		case cabinet.FieldBin:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bin", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Bin); err != nil {
					return fmt.Errorf("unmarshal field bin: %w", err)
				}
			}
		case cabinet.FieldBatteryNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_num", values[i])
			} else if value.Valid {
				c.BatteryNum = uint(value.Int64)
			}
		case cabinet.FieldBatteryFullNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_full_num", values[i])
			} else if value.Valid {
				c.BatteryFullNum = uint(value.Int64)
			}
		}
	}
	return nil
}

// QueryBranch queries the "branch" edge of the Cabinet entity.
func (c *Cabinet) QueryBranch() *BranchQuery {
	return (&CabinetClient{config: c.config}).QueryBranch(c)
}

// QueryBms queries the "bms" edge of the Cabinet entity.
func (c *Cabinet) QueryBms() *BatteryModelQuery {
	return (&CabinetClient{config: c.config}).QueryBms(c)
}

// QueryFaults queries the "faults" edge of the Cabinet entity.
func (c *Cabinet) QueryFaults() *CabinetFaultQuery {
	return (&CabinetClient{config: c.config}).QueryFaults(c)
}

// Update returns a builder for updating this Cabinet.
// Note that you need to call Cabinet.Unwrap() before calling this method if this Cabinet
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cabinet) Update() *CabinetUpdateOne {
	return (&CabinetClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cabinet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cabinet) Unwrap() *Cabinet {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cabinet is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cabinet) String() string {
	var builder strings.Builder
	builder.WriteString("Cabinet(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", c.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", branch_id=")
	builder.WriteString(fmt.Sprintf("%v", c.BranchID))
	builder.WriteString(", sn=")
	builder.WriteString(c.Sn)
	builder.WriteString(", brand=")
	builder.WriteString(c.Brand)
	builder.WriteString(", serial=")
	builder.WriteString(c.Serial)
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", doors=")
	builder.WriteString(fmt.Sprintf("%v", c.Doors))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", models=")
	builder.WriteString(fmt.Sprintf("%v", c.Models))
	builder.WriteString(", health=")
	builder.WriteString(fmt.Sprintf("%v", c.Health))
	builder.WriteString(", bin=")
	builder.WriteString(fmt.Sprintf("%v", c.Bin))
	builder.WriteString(", battery_num=")
	builder.WriteString(fmt.Sprintf("%v", c.BatteryNum))
	builder.WriteString(", battery_full_num=")
	builder.WriteString(fmt.Sprintf("%v", c.BatteryFullNum))
	builder.WriteByte(')')
	return builder.String()
}

// Cabinets is a parsable slice of Cabinet.
type Cabinets []*Cabinet

func (c Cabinets) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
