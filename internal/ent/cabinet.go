// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
)

// Cabinet is the model entity for the Cabinet schema.
type Cabinet struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 网点
	BranchID *uint64 `json:"branch_id,omitempty"`
	// 团签ID
	EnterpriseID *uint64 `json:"enterprise_id,omitempty"`
	// 站点ID
	StationID *uint64 `json:"station_id,omitempty"`
	// 编号
	Sn string `json:"sn,omitempty"`
	// 品牌
	Brand adapter.CabinetBrand `json:"brand,omitempty"`
	// 原始编号
	Serial string `json:"serial,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 柜门数量
	Doors int `json:"doors,omitempty"`
	// 投放状态
	Status uint8 `json:"status,omitempty"`
	// 经度
	Lng float64 `json:"lng,omitempty"`
	// 纬度
	Lat float64 `json:"lat,omitempty"`
	// 坐标
	Geom *model.Geometry `json:"geom,omitempty"`
	// 详细地址
	Address string `json:"address,omitempty"`
	// SIM卡号
	SimSn string `json:"sim_sn,omitempty"`
	// SIM卡到期日期
	SimDate time.Time `json:"sim_date,omitempty"`
	// 电池是否已调拨
	Transferred bool `json:"transferred,omitempty"`
	// 是否智能柜
	Intelligent bool `json:"intelligent,omitempty"`
	// 健康状态 0:离线 1:正常 2:故障
	Health uint8 `json:"health,omitempty"`
	// 仓位信息
	Bin model.CabinetBins `json:"bin,omitempty"`
	// 电池总数
	BatteryNum int `json:"battery_num,omitempty"`
	// 满电总数
	BatteryFullNum int `json:"battery_full_num,omitempty"`
	// 充电总数
	BatteryChargingNum int `json:"battery_charging_num,omitempty"`
	// 空仓数量
	EmptyBinNum int `json:"empty_bin_num,omitempty"`
	// 锁仓数量
	LockedBinNum int `json:"locked_bin_num,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CabinetQuery when eager-loading is set.
	Edges        CabinetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CabinetEdges holds the relations/edges for other nodes in the graph.
type CabinetEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Branch holds the value of the branch edge.
	Branch *Branch `json:"branch,omitempty"`
	// Models holds the value of the models edge.
	Models []*BatteryModel `json:"models,omitempty"`
	// Faults holds the value of the faults edge.
	Faults []*CabinetFault `json:"faults,omitempty"`
	// Exchanges holds the value of the exchanges edge.
	Exchanges []*Exchange `json:"exchanges,omitempty"`
	// Stocks holds the value of the stocks edge.
	Stocks []*Stock `json:"stocks,omitempty"`
	// Batteries holds the value of the batteries edge.
	Batteries []*Battery `json:"batteries,omitempty"`
	// BatteryFlows holds the value of the battery_flows edge.
	BatteryFlows []*BatteryFlow `json:"battery_flows,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Enterprise holds the value of the enterprise edge.
	Enterprise *Enterprise `json:"enterprise,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [10]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// BranchOrErr returns the Branch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetEdges) BranchOrErr() (*Branch, error) {
	if e.Branch != nil {
		return e.Branch, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: branch.Label}
	}
	return nil, &NotLoadedError{edge: "branch"}
}

// ModelsOrErr returns the Models value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) ModelsOrErr() ([]*BatteryModel, error) {
	if e.loadedTypes[2] {
		return e.Models, nil
	}
	return nil, &NotLoadedError{edge: "models"}
}

// FaultsOrErr returns the Faults value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) FaultsOrErr() ([]*CabinetFault, error) {
	if e.loadedTypes[3] {
		return e.Faults, nil
	}
	return nil, &NotLoadedError{edge: "faults"}
}

// ExchangesOrErr returns the Exchanges value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) ExchangesOrErr() ([]*Exchange, error) {
	if e.loadedTypes[4] {
		return e.Exchanges, nil
	}
	return nil, &NotLoadedError{edge: "exchanges"}
}

// StocksOrErr returns the Stocks value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) StocksOrErr() ([]*Stock, error) {
	if e.loadedTypes[5] {
		return e.Stocks, nil
	}
	return nil, &NotLoadedError{edge: "stocks"}
}

// BatteriesOrErr returns the Batteries value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) BatteriesOrErr() ([]*Battery, error) {
	if e.loadedTypes[6] {
		return e.Batteries, nil
	}
	return nil, &NotLoadedError{edge: "batteries"}
}

// BatteryFlowsOrErr returns the BatteryFlows value or an error if the edge
// was not loaded in eager-loading.
func (e CabinetEdges) BatteryFlowsOrErr() ([]*BatteryFlow, error) {
	if e.loadedTypes[7] {
		return e.BatteryFlows, nil
	}
	return nil, &NotLoadedError{edge: "battery_flows"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.Station != nil {
		return e.Station, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: enterprisestation.Label}
	}
	return nil, &NotLoadedError{edge: "station"}
}

// EnterpriseOrErr returns the Enterprise value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetEdges) EnterpriseOrErr() (*Enterprise, error) {
	if e.Enterprise != nil {
		return e.Enterprise, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: enterprise.Label}
	}
	return nil, &NotLoadedError{edge: "enterprise"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cabinet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cabinet.FieldCreator, cabinet.FieldLastModifier, cabinet.FieldBin:
			values[i] = new([]byte)
		case cabinet.FieldBrand:
			values[i] = new(adapter.CabinetBrand)
		case cabinet.FieldGeom:
			values[i] = new(model.Geometry)
		case cabinet.FieldTransferred, cabinet.FieldIntelligent:
			values[i] = new(sql.NullBool)
		case cabinet.FieldLng, cabinet.FieldLat:
			values[i] = new(sql.NullFloat64)
		case cabinet.FieldID, cabinet.FieldCityID, cabinet.FieldBranchID, cabinet.FieldEnterpriseID, cabinet.FieldStationID, cabinet.FieldDoors, cabinet.FieldStatus, cabinet.FieldHealth, cabinet.FieldBatteryNum, cabinet.FieldBatteryFullNum, cabinet.FieldBatteryChargingNum, cabinet.FieldEmptyBinNum, cabinet.FieldLockedBinNum:
			values[i] = new(sql.NullInt64)
		case cabinet.FieldRemark, cabinet.FieldSn, cabinet.FieldSerial, cabinet.FieldName, cabinet.FieldAddress, cabinet.FieldSimSn:
			values[i] = new(sql.NullString)
		case cabinet.FieldCreatedAt, cabinet.FieldUpdatedAt, cabinet.FieldDeletedAt, cabinet.FieldSimDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cabinet fields.
func (c *Cabinet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cabinet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = uint64(value.Int64)
		case cabinet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cabinet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cabinet.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case cabinet.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case cabinet.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case cabinet.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				c.Remark = value.String
			}
		case cabinet.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				c.CityID = new(uint64)
				*c.CityID = uint64(value.Int64)
			}
		case cabinet.FieldBranchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field branch_id", values[i])
			} else if value.Valid {
				c.BranchID = new(uint64)
				*c.BranchID = uint64(value.Int64)
			}
		case cabinet.FieldEnterpriseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field enterprise_id", values[i])
			} else if value.Valid {
				c.EnterpriseID = new(uint64)
				*c.EnterpriseID = uint64(value.Int64)
			}
		case cabinet.FieldStationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field station_id", values[i])
			} else if value.Valid {
				c.StationID = new(uint64)
				*c.StationID = uint64(value.Int64)
			}
		case cabinet.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				c.Sn = value.String
			}
		case cabinet.FieldBrand:
			if value, ok := values[i].(*adapter.CabinetBrand); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value != nil {
				c.Brand = *value
			}
		case cabinet.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				c.Serial = value.String
			}
		case cabinet.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cabinet.FieldDoors:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field doors", values[i])
			} else if value.Valid {
				c.Doors = int(value.Int64)
			}
		case cabinet.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = uint8(value.Int64)
			}
		case cabinet.FieldLng:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lng", values[i])
			} else if value.Valid {
				c.Lng = value.Float64
			}
		case cabinet.FieldLat:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field lat", values[i])
			} else if value.Valid {
				c.Lat = value.Float64
			}
		case cabinet.FieldGeom:
			if value, ok := values[i].(*model.Geometry); !ok {
				return fmt.Errorf("unexpected type %T for field geom", values[i])
			} else if value != nil {
				c.Geom = value
			}
		case cabinet.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				c.Address = value.String
			}
		case cabinet.FieldSimSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sim_sn", values[i])
			} else if value.Valid {
				c.SimSn = value.String
			}
		case cabinet.FieldSimDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sim_date", values[i])
			} else if value.Valid {
				c.SimDate = value.Time
			}
		case cabinet.FieldTransferred:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field transferred", values[i])
			} else if value.Valid {
				c.Transferred = value.Bool
			}
		case cabinet.FieldIntelligent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field intelligent", values[i])
			} else if value.Valid {
				c.Intelligent = value.Bool
			}
		case cabinet.FieldHealth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				c.Health = uint8(value.Int64)
			}
		case cabinet.FieldBin:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bin", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Bin); err != nil {
					return fmt.Errorf("unmarshal field bin: %w", err)
				}
			}
		case cabinet.FieldBatteryNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_num", values[i])
			} else if value.Valid {
				c.BatteryNum = int(value.Int64)
			}
		case cabinet.FieldBatteryFullNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_full_num", values[i])
			} else if value.Valid {
				c.BatteryFullNum = int(value.Int64)
			}
		case cabinet.FieldBatteryChargingNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field battery_charging_num", values[i])
			} else if value.Valid {
				c.BatteryChargingNum = int(value.Int64)
			}
		case cabinet.FieldEmptyBinNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field empty_bin_num", values[i])
			} else if value.Valid {
				c.EmptyBinNum = int(value.Int64)
			}
		case cabinet.FieldLockedBinNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locked_bin_num", values[i])
			} else if value.Valid {
				c.LockedBinNum = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cabinet.
// This includes values selected through modifiers, order, etc.
func (c *Cabinet) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCity queries the "city" edge of the Cabinet entity.
func (c *Cabinet) QueryCity() *CityQuery {
	return NewCabinetClient(c.config).QueryCity(c)
}

// QueryBranch queries the "branch" edge of the Cabinet entity.
func (c *Cabinet) QueryBranch() *BranchQuery {
	return NewCabinetClient(c.config).QueryBranch(c)
}

// QueryModels queries the "models" edge of the Cabinet entity.
func (c *Cabinet) QueryModels() *BatteryModelQuery {
	return NewCabinetClient(c.config).QueryModels(c)
}

// QueryFaults queries the "faults" edge of the Cabinet entity.
func (c *Cabinet) QueryFaults() *CabinetFaultQuery {
	return NewCabinetClient(c.config).QueryFaults(c)
}

// QueryExchanges queries the "exchanges" edge of the Cabinet entity.
func (c *Cabinet) QueryExchanges() *ExchangeQuery {
	return NewCabinetClient(c.config).QueryExchanges(c)
}

// QueryStocks queries the "stocks" edge of the Cabinet entity.
func (c *Cabinet) QueryStocks() *StockQuery {
	return NewCabinetClient(c.config).QueryStocks(c)
}

// QueryBatteries queries the "batteries" edge of the Cabinet entity.
func (c *Cabinet) QueryBatteries() *BatteryQuery {
	return NewCabinetClient(c.config).QueryBatteries(c)
}

// QueryBatteryFlows queries the "battery_flows" edge of the Cabinet entity.
func (c *Cabinet) QueryBatteryFlows() *BatteryFlowQuery {
	return NewCabinetClient(c.config).QueryBatteryFlows(c)
}

// QueryStation queries the "station" edge of the Cabinet entity.
func (c *Cabinet) QueryStation() *EnterpriseStationQuery {
	return NewCabinetClient(c.config).QueryStation(c)
}

// QueryEnterprise queries the "enterprise" edge of the Cabinet entity.
func (c *Cabinet) QueryEnterprise() *EnterpriseQuery {
	return NewCabinetClient(c.config).QueryEnterprise(c)
}

// Update returns a builder for updating this Cabinet.
// Note that you need to call Cabinet.Unwrap() before calling this method if this Cabinet
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cabinet) Update() *CabinetUpdateOne {
	return NewCabinetClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cabinet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cabinet) Unwrap() *Cabinet {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cabinet is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cabinet) String() string {
	var builder strings.Builder
	builder.WriteString("Cabinet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := c.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", c.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", c.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(c.Remark)
	builder.WriteString(", ")
	if v := c.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.BranchID; v != nil {
		builder.WriteString("branch_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.EnterpriseID; v != nil {
		builder.WriteString("enterprise_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.StationID; v != nil {
		builder.WriteString("station_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(c.Sn)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(fmt.Sprintf("%v", c.Brand))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(c.Serial)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("doors=")
	builder.WriteString(fmt.Sprintf("%v", c.Doors))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("lng=")
	builder.WriteString(fmt.Sprintf("%v", c.Lng))
	builder.WriteString(", ")
	builder.WriteString("lat=")
	builder.WriteString(fmt.Sprintf("%v", c.Lat))
	builder.WriteString(", ")
	builder.WriteString("geom=")
	builder.WriteString(fmt.Sprintf("%v", c.Geom))
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(c.Address)
	builder.WriteString(", ")
	builder.WriteString("sim_sn=")
	builder.WriteString(c.SimSn)
	builder.WriteString(", ")
	builder.WriteString("sim_date=")
	builder.WriteString(c.SimDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("transferred=")
	builder.WriteString(fmt.Sprintf("%v", c.Transferred))
	builder.WriteString(", ")
	builder.WriteString("intelligent=")
	builder.WriteString(fmt.Sprintf("%v", c.Intelligent))
	builder.WriteString(", ")
	builder.WriteString("health=")
	builder.WriteString(fmt.Sprintf("%v", c.Health))
	builder.WriteString(", ")
	builder.WriteString("bin=")
	builder.WriteString(fmt.Sprintf("%v", c.Bin))
	builder.WriteString(", ")
	builder.WriteString("battery_num=")
	builder.WriteString(fmt.Sprintf("%v", c.BatteryNum))
	builder.WriteString(", ")
	builder.WriteString("battery_full_num=")
	builder.WriteString(fmt.Sprintf("%v", c.BatteryFullNum))
	builder.WriteString(", ")
	builder.WriteString("battery_charging_num=")
	builder.WriteString(fmt.Sprintf("%v", c.BatteryChargingNum))
	builder.WriteString(", ")
	builder.WriteString("empty_bin_num=")
	builder.WriteString(fmt.Sprintf("%v", c.EmptyBinNum))
	builder.WriteString(", ")
	builder.WriteString("locked_bin_num=")
	builder.WriteString(fmt.Sprintf("%v", c.LockedBinNum))
	builder.WriteByte(')')
	return builder.String()
}

// Cabinets is a parsable slice of Cabinet.
type Cabinets []*Cabinet
