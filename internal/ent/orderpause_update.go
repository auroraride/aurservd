// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderpause"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderPauseUpdate is the builder for updating OrderPause entities.
type OrderPauseUpdate struct {
	config
	hooks    []Hook
	mutation *OrderPauseMutation
}

// Where appends a list predicates to the OrderPauseUpdate builder.
func (opu *OrderPauseUpdate) Where(ps ...predicate.OrderPause) *OrderPauseUpdate {
	opu.mutation.Where(ps...)
	return opu
}

// SetUpdatedAt sets the "updated_at" field.
func (opu *OrderPauseUpdate) SetUpdatedAt(t time.Time) *OrderPauseUpdate {
	opu.mutation.SetUpdatedAt(t)
	return opu
}

// SetDeletedAt sets the "deleted_at" field.
func (opu *OrderPauseUpdate) SetDeletedAt(t time.Time) *OrderPauseUpdate {
	opu.mutation.SetDeletedAt(t)
	return opu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opu *OrderPauseUpdate) SetNillableDeletedAt(t *time.Time) *OrderPauseUpdate {
	if t != nil {
		opu.SetDeletedAt(*t)
	}
	return opu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opu *OrderPauseUpdate) ClearDeletedAt() *OrderPauseUpdate {
	opu.mutation.ClearDeletedAt()
	return opu
}

// SetLastModifier sets the "last_modifier" field.
func (opu *OrderPauseUpdate) SetLastModifier(m *model.Modifier) *OrderPauseUpdate {
	opu.mutation.SetLastModifier(m)
	return opu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (opu *OrderPauseUpdate) ClearLastModifier() *OrderPauseUpdate {
	opu.mutation.ClearLastModifier()
	return opu
}

// SetRemark sets the "remark" field.
func (opu *OrderPauseUpdate) SetRemark(s string) *OrderPauseUpdate {
	opu.mutation.SetRemark(s)
	return opu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (opu *OrderPauseUpdate) SetNillableRemark(s *string) *OrderPauseUpdate {
	if s != nil {
		opu.SetRemark(*s)
	}
	return opu
}

// ClearRemark clears the value of the "remark" field.
func (opu *OrderPauseUpdate) ClearRemark() *OrderPauseUpdate {
	opu.mutation.ClearRemark()
	return opu
}

// SetRiderID sets the "rider_id" field.
func (opu *OrderPauseUpdate) SetRiderID(u uint64) *OrderPauseUpdate {
	opu.mutation.SetRiderID(u)
	return opu
}

// SetOrderID sets the "order_id" field.
func (opu *OrderPauseUpdate) SetOrderID(u uint64) *OrderPauseUpdate {
	opu.mutation.SetOrderID(u)
	return opu
}

// SetStartAt sets the "start_at" field.
func (opu *OrderPauseUpdate) SetStartAt(t time.Time) *OrderPauseUpdate {
	opu.mutation.SetStartAt(t)
	return opu
}

// SetEndAt sets the "end_at" field.
func (opu *OrderPauseUpdate) SetEndAt(t time.Time) *OrderPauseUpdate {
	opu.mutation.SetEndAt(t)
	return opu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (opu *OrderPauseUpdate) SetNillableEndAt(t *time.Time) *OrderPauseUpdate {
	if t != nil {
		opu.SetEndAt(*t)
	}
	return opu
}

// ClearEndAt clears the value of the "end_at" field.
func (opu *OrderPauseUpdate) ClearEndAt() *OrderPauseUpdate {
	opu.mutation.ClearEndAt()
	return opu
}

// SetDays sets the "days" field.
func (opu *OrderPauseUpdate) SetDays(i int) *OrderPauseUpdate {
	opu.mutation.ResetDays()
	opu.mutation.SetDays(i)
	return opu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (opu *OrderPauseUpdate) SetNillableDays(i *int) *OrderPauseUpdate {
	if i != nil {
		opu.SetDays(*i)
	}
	return opu
}

// AddDays adds i to the "days" field.
func (opu *OrderPauseUpdate) AddDays(i int) *OrderPauseUpdate {
	opu.mutation.AddDays(i)
	return opu
}

// ClearDays clears the value of the "days" field.
func (opu *OrderPauseUpdate) ClearDays() *OrderPauseUpdate {
	opu.mutation.ClearDays()
	return opu
}

// SetRider sets the "rider" edge to the Rider entity.
func (opu *OrderPauseUpdate) SetRider(r *Rider) *OrderPauseUpdate {
	return opu.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (opu *OrderPauseUpdate) SetOrder(o *Order) *OrderPauseUpdate {
	return opu.SetOrderID(o.ID)
}

// Mutation returns the OrderPauseMutation object of the builder.
func (opu *OrderPauseUpdate) Mutation() *OrderPauseMutation {
	return opu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (opu *OrderPauseUpdate) ClearRider() *OrderPauseUpdate {
	opu.mutation.ClearRider()
	return opu
}

// ClearOrder clears the "order" edge to the Order entity.
func (opu *OrderPauseUpdate) ClearOrder() *OrderPauseUpdate {
	opu.mutation.ClearOrder()
	return opu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (opu *OrderPauseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := opu.defaults(); err != nil {
		return 0, err
	}
	if len(opu.hooks) == 0 {
		if err = opu.check(); err != nil {
			return 0, err
		}
		affected, err = opu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opu.check(); err != nil {
				return 0, err
			}
			opu.mutation = mutation
			affected, err = opu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(opu.hooks) - 1; i >= 0; i-- {
			if opu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, opu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (opu *OrderPauseUpdate) SaveX(ctx context.Context) int {
	affected, err := opu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (opu *OrderPauseUpdate) Exec(ctx context.Context) error {
	_, err := opu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opu *OrderPauseUpdate) ExecX(ctx context.Context) {
	if err := opu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opu *OrderPauseUpdate) defaults() error {
	if _, ok := opu.mutation.UpdatedAt(); !ok {
		if orderpause.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpause.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpause.UpdateDefaultUpdatedAt()
		opu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opu *OrderPauseUpdate) check() error {
	if _, ok := opu.mutation.RiderID(); opu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderPause.rider"`)
	}
	if _, ok := opu.mutation.OrderID(); opu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderPause.order"`)
	}
	return nil
}

func (opu *OrderPauseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpause.Table,
			Columns: orderpause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderpause.FieldID,
			},
		},
	}
	if ps := opu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldUpdatedAt,
		})
	}
	if value, ok := opu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldDeletedAt,
		})
	}
	if opu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpause.FieldDeletedAt,
		})
	}
	if opu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderpause.FieldCreator,
		})
	}
	if value, ok := opu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderpause.FieldLastModifier,
		})
	}
	if opu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderpause.FieldLastModifier,
		})
	}
	if value, ok := opu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpause.FieldRemark,
		})
	}
	if opu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpause.FieldRemark,
		})
	}
	if value, ok := opu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldStartAt,
		})
	}
	if value, ok := opu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldEndAt,
		})
	}
	if opu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpause.FieldEndAt,
		})
	}
	if value, ok := opu.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpause.FieldDays,
		})
	}
	if value, ok := opu.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpause.FieldDays,
		})
	}
	if opu.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpause.FieldDays,
		})
	}
	if opu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.RiderTable,
			Columns: []string{orderpause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.RiderTable,
			Columns: []string{orderpause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.OrderTable,
			Columns: []string{orderpause.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.OrderTable,
			Columns: []string{orderpause.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, opu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// OrderPauseUpdateOne is the builder for updating a single OrderPause entity.
type OrderPauseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderPauseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (opuo *OrderPauseUpdateOne) SetUpdatedAt(t time.Time) *OrderPauseUpdateOne {
	opuo.mutation.SetUpdatedAt(t)
	return opuo
}

// SetDeletedAt sets the "deleted_at" field.
func (opuo *OrderPauseUpdateOne) SetDeletedAt(t time.Time) *OrderPauseUpdateOne {
	opuo.mutation.SetDeletedAt(t)
	return opuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (opuo *OrderPauseUpdateOne) SetNillableDeletedAt(t *time.Time) *OrderPauseUpdateOne {
	if t != nil {
		opuo.SetDeletedAt(*t)
	}
	return opuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (opuo *OrderPauseUpdateOne) ClearDeletedAt() *OrderPauseUpdateOne {
	opuo.mutation.ClearDeletedAt()
	return opuo
}

// SetLastModifier sets the "last_modifier" field.
func (opuo *OrderPauseUpdateOne) SetLastModifier(m *model.Modifier) *OrderPauseUpdateOne {
	opuo.mutation.SetLastModifier(m)
	return opuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (opuo *OrderPauseUpdateOne) ClearLastModifier() *OrderPauseUpdateOne {
	opuo.mutation.ClearLastModifier()
	return opuo
}

// SetRemark sets the "remark" field.
func (opuo *OrderPauseUpdateOne) SetRemark(s string) *OrderPauseUpdateOne {
	opuo.mutation.SetRemark(s)
	return opuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (opuo *OrderPauseUpdateOne) SetNillableRemark(s *string) *OrderPauseUpdateOne {
	if s != nil {
		opuo.SetRemark(*s)
	}
	return opuo
}

// ClearRemark clears the value of the "remark" field.
func (opuo *OrderPauseUpdateOne) ClearRemark() *OrderPauseUpdateOne {
	opuo.mutation.ClearRemark()
	return opuo
}

// SetRiderID sets the "rider_id" field.
func (opuo *OrderPauseUpdateOne) SetRiderID(u uint64) *OrderPauseUpdateOne {
	opuo.mutation.SetRiderID(u)
	return opuo
}

// SetOrderID sets the "order_id" field.
func (opuo *OrderPauseUpdateOne) SetOrderID(u uint64) *OrderPauseUpdateOne {
	opuo.mutation.SetOrderID(u)
	return opuo
}

// SetStartAt sets the "start_at" field.
func (opuo *OrderPauseUpdateOne) SetStartAt(t time.Time) *OrderPauseUpdateOne {
	opuo.mutation.SetStartAt(t)
	return opuo
}

// SetEndAt sets the "end_at" field.
func (opuo *OrderPauseUpdateOne) SetEndAt(t time.Time) *OrderPauseUpdateOne {
	opuo.mutation.SetEndAt(t)
	return opuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (opuo *OrderPauseUpdateOne) SetNillableEndAt(t *time.Time) *OrderPauseUpdateOne {
	if t != nil {
		opuo.SetEndAt(*t)
	}
	return opuo
}

// ClearEndAt clears the value of the "end_at" field.
func (opuo *OrderPauseUpdateOne) ClearEndAt() *OrderPauseUpdateOne {
	opuo.mutation.ClearEndAt()
	return opuo
}

// SetDays sets the "days" field.
func (opuo *OrderPauseUpdateOne) SetDays(i int) *OrderPauseUpdateOne {
	opuo.mutation.ResetDays()
	opuo.mutation.SetDays(i)
	return opuo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (opuo *OrderPauseUpdateOne) SetNillableDays(i *int) *OrderPauseUpdateOne {
	if i != nil {
		opuo.SetDays(*i)
	}
	return opuo
}

// AddDays adds i to the "days" field.
func (opuo *OrderPauseUpdateOne) AddDays(i int) *OrderPauseUpdateOne {
	opuo.mutation.AddDays(i)
	return opuo
}

// ClearDays clears the value of the "days" field.
func (opuo *OrderPauseUpdateOne) ClearDays() *OrderPauseUpdateOne {
	opuo.mutation.ClearDays()
	return opuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (opuo *OrderPauseUpdateOne) SetRider(r *Rider) *OrderPauseUpdateOne {
	return opuo.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (opuo *OrderPauseUpdateOne) SetOrder(o *Order) *OrderPauseUpdateOne {
	return opuo.SetOrderID(o.ID)
}

// Mutation returns the OrderPauseMutation object of the builder.
func (opuo *OrderPauseUpdateOne) Mutation() *OrderPauseMutation {
	return opuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (opuo *OrderPauseUpdateOne) ClearRider() *OrderPauseUpdateOne {
	opuo.mutation.ClearRider()
	return opuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (opuo *OrderPauseUpdateOne) ClearOrder() *OrderPauseUpdateOne {
	opuo.mutation.ClearOrder()
	return opuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (opuo *OrderPauseUpdateOne) Select(field string, fields ...string) *OrderPauseUpdateOne {
	opuo.fields = append([]string{field}, fields...)
	return opuo
}

// Save executes the query and returns the updated OrderPause entity.
func (opuo *OrderPauseUpdateOne) Save(ctx context.Context) (*OrderPause, error) {
	var (
		err  error
		node *OrderPause
	)
	if err := opuo.defaults(); err != nil {
		return nil, err
	}
	if len(opuo.hooks) == 0 {
		if err = opuo.check(); err != nil {
			return nil, err
		}
		node, err = opuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderPauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = opuo.check(); err != nil {
				return nil, err
			}
			opuo.mutation = mutation
			node, err = opuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(opuo.hooks) - 1; i >= 0; i-- {
			if opuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = opuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, opuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderPause)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderPauseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (opuo *OrderPauseUpdateOne) SaveX(ctx context.Context) *OrderPause {
	node, err := opuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (opuo *OrderPauseUpdateOne) Exec(ctx context.Context) error {
	_, err := opuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (opuo *OrderPauseUpdateOne) ExecX(ctx context.Context) {
	if err := opuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (opuo *OrderPauseUpdateOne) defaults() error {
	if _, ok := opuo.mutation.UpdatedAt(); !ok {
		if orderpause.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderpause.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderpause.UpdateDefaultUpdatedAt()
		opuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (opuo *OrderPauseUpdateOne) check() error {
	if _, ok := opuo.mutation.RiderID(); opuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderPause.rider"`)
	}
	if _, ok := opuo.mutation.OrderID(); opuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrderPause.order"`)
	}
	return nil
}

func (opuo *OrderPauseUpdateOne) sqlSave(ctx context.Context) (_node *OrderPause, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpause.Table,
			Columns: orderpause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderpause.FieldID,
			},
		},
	}
	id, ok := opuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderPause.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := opuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpause.FieldID)
		for _, f := range fields {
			if !orderpause.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderpause.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := opuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := opuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldUpdatedAt,
		})
	}
	if value, ok := opuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldDeletedAt,
		})
	}
	if opuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpause.FieldDeletedAt,
		})
	}
	if opuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderpause.FieldCreator,
		})
	}
	if value, ok := opuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderpause.FieldLastModifier,
		})
	}
	if opuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: orderpause.FieldLastModifier,
		})
	}
	if value, ok := opuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderpause.FieldRemark,
		})
	}
	if opuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: orderpause.FieldRemark,
		})
	}
	if value, ok := opuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldStartAt,
		})
	}
	if value, ok := opuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderpause.FieldEndAt,
		})
	}
	if opuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: orderpause.FieldEndAt,
		})
	}
	if value, ok := opuo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpause.FieldDays,
		})
	}
	if value, ok := opuo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderpause.FieldDays,
		})
	}
	if opuo.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: orderpause.FieldDays,
		})
	}
	if opuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.RiderTable,
			Columns: []string{orderpause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.RiderTable,
			Columns: []string{orderpause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if opuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.OrderTable,
			Columns: []string{orderpause.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := opuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderpause.OrderTable,
			Columns: []string{orderpause.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrderPause{config: opuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, opuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderpause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
