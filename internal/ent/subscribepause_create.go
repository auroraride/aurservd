// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribePauseCreate is the builder for creating a SubscribePause entity.
type SubscribePauseCreate struct {
	config
	mutation *SubscribePauseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (spc *SubscribePauseCreate) SetCreatedAt(t time.Time) *SubscribePauseCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableCreatedAt(t *time.Time) *SubscribePauseCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SubscribePauseCreate) SetUpdatedAt(t time.Time) *SubscribePauseCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableUpdatedAt(t *time.Time) *SubscribePauseCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *SubscribePauseCreate) SetDeletedAt(t time.Time) *SubscribePauseCreate {
	spc.mutation.SetDeletedAt(t)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableDeletedAt(t *time.Time) *SubscribePauseCreate {
	if t != nil {
		spc.SetDeletedAt(*t)
	}
	return spc
}

// SetCreator sets the "creator" field.
func (spc *SubscribePauseCreate) SetCreator(m *model.Modifier) *SubscribePauseCreate {
	spc.mutation.SetCreator(m)
	return spc
}

// SetLastModifier sets the "last_modifier" field.
func (spc *SubscribePauseCreate) SetLastModifier(m *model.Modifier) *SubscribePauseCreate {
	spc.mutation.SetLastModifier(m)
	return spc
}

// SetRemark sets the "remark" field.
func (spc *SubscribePauseCreate) SetRemark(s string) *SubscribePauseCreate {
	spc.mutation.SetRemark(s)
	return spc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableRemark(s *string) *SubscribePauseCreate {
	if s != nil {
		spc.SetRemark(*s)
	}
	return spc
}

// SetRiderID sets the "rider_id" field.
func (spc *SubscribePauseCreate) SetRiderID(u uint64) *SubscribePauseCreate {
	spc.mutation.SetRiderID(u)
	return spc
}

// SetEmployeeID sets the "employee_id" field.
func (spc *SubscribePauseCreate) SetEmployeeID(u uint64) *SubscribePauseCreate {
	spc.mutation.SetEmployeeID(u)
	return spc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableEmployeeID(u *uint64) *SubscribePauseCreate {
	if u != nil {
		spc.SetEmployeeID(*u)
	}
	return spc
}

// SetSubscribeID sets the "subscribe_id" field.
func (spc *SubscribePauseCreate) SetSubscribeID(u uint64) *SubscribePauseCreate {
	spc.mutation.SetSubscribeID(u)
	return spc
}

// SetStartAt sets the "start_at" field.
func (spc *SubscribePauseCreate) SetStartAt(t time.Time) *SubscribePauseCreate {
	spc.mutation.SetStartAt(t)
	return spc
}

// SetEndAt sets the "end_at" field.
func (spc *SubscribePauseCreate) SetEndAt(t time.Time) *SubscribePauseCreate {
	spc.mutation.SetEndAt(t)
	return spc
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableEndAt(t *time.Time) *SubscribePauseCreate {
	if t != nil {
		spc.SetEndAt(*t)
	}
	return spc
}

// SetDays sets the "days" field.
func (spc *SubscribePauseCreate) SetDays(i int) *SubscribePauseCreate {
	spc.mutation.SetDays(i)
	return spc
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableDays(i *int) *SubscribePauseCreate {
	if i != nil {
		spc.SetDays(*i)
	}
	return spc
}

// SetContinueEmployeeID sets the "continue_employee_id" field.
func (spc *SubscribePauseCreate) SetContinueEmployeeID(u uint64) *SubscribePauseCreate {
	spc.mutation.SetContinueEmployeeID(u)
	return spc
}

// SetNillableContinueEmployeeID sets the "continue_employee_id" field if the given value is not nil.
func (spc *SubscribePauseCreate) SetNillableContinueEmployeeID(u *uint64) *SubscribePauseCreate {
	if u != nil {
		spc.SetContinueEmployeeID(*u)
	}
	return spc
}

// SetRider sets the "rider" edge to the Rider entity.
func (spc *SubscribePauseCreate) SetRider(r *Rider) *SubscribePauseCreate {
	return spc.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (spc *SubscribePauseCreate) SetEmployee(e *Employee) *SubscribePauseCreate {
	return spc.SetEmployeeID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (spc *SubscribePauseCreate) SetSubscribe(s *Subscribe) *SubscribePauseCreate {
	return spc.SetSubscribeID(s.ID)
}

// SetContinueEmployee sets the "continue_employee" edge to the Employee entity.
func (spc *SubscribePauseCreate) SetContinueEmployee(e *Employee) *SubscribePauseCreate {
	return spc.SetContinueEmployeeID(e.ID)
}

// Mutation returns the SubscribePauseMutation object of the builder.
func (spc *SubscribePauseCreate) Mutation() *SubscribePauseMutation {
	return spc.mutation
}

// Save creates the SubscribePause in the database.
func (spc *SubscribePauseCreate) Save(ctx context.Context) (*SubscribePause, error) {
	var (
		err  error
		node *SubscribePause
	)
	if err := spc.defaults(); err != nil {
		return nil, err
	}
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribePauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscribePause)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribePauseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SubscribePauseCreate) SaveX(ctx context.Context) *SubscribePause {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SubscribePauseCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SubscribePauseCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SubscribePauseCreate) defaults() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		if subscribepause.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribepause.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := subscribepause.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		if subscribepause.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribepause.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribepause.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spc *SubscribePauseCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscribePause.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscribePause.updated_at"`)}
	}
	if _, ok := spc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "SubscribePause.rider_id"`)}
	}
	if _, ok := spc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "SubscribePause.subscribe_id"`)}
	}
	if _, ok := spc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "SubscribePause.start_at"`)}
	}
	if _, ok := spc.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "SubscribePause.rider"`)}
	}
	if _, ok := spc.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "SubscribePause.subscribe"`)}
	}
	return nil
}

func (spc *SubscribePauseCreate) sqlSave(ctx context.Context) (*SubscribePause, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (spc *SubscribePauseCreate) createSpec() (*SubscribePause, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscribePause{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subscribepause.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		}
	)
	_spec.OnConflict = spc.conflict
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := spc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := spc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := spc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribepause.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := spc.mutation.StartAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldStartAt,
		})
		_node.StartAt = value
	}
	if value, ok := spc.mutation.EndAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldEndAt,
		})
		_node.EndAt = value
	}
	if value, ok := spc.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldDays,
		})
		_node.Days = value
	}
	if nodes := spc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ContinueEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.ContinueEmployeeTable,
			Columns: []string{subscribepause.ContinueEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContinueEmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribePause.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribePauseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (spc *SubscribePauseCreate) OnConflict(opts ...sql.ConflictOption) *SubscribePauseUpsertOne {
	spc.conflict = opts
	return &SubscribePauseUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribePause.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (spc *SubscribePauseCreate) OnConflictColumns(columns ...string) *SubscribePauseUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SubscribePauseUpsertOne{
		create: spc,
	}
}

type (
	// SubscribePauseUpsertOne is the builder for "upsert"-ing
	//  one SubscribePause node.
	SubscribePauseUpsertOne struct {
		create *SubscribePauseCreate
	}

	// SubscribePauseUpsert is the "OnConflict" setter.
	SubscribePauseUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *SubscribePauseUpsert) SetCreatedAt(v time.Time) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateCreatedAt() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribePauseUpsert) SetUpdatedAt(v time.Time) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateUpdatedAt() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribePauseUpsert) SetDeletedAt(v time.Time) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateDeletedAt() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribePauseUpsert) ClearDeletedAt() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *SubscribePauseUpsert) SetCreator(v *model.Modifier) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateCreator() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribePauseUpsert) ClearCreator() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribePauseUpsert) SetLastModifier(v *model.Modifier) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateLastModifier() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribePauseUpsert) ClearLastModifier() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *SubscribePauseUpsert) SetRemark(v string) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateRemark() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribePauseUpsert) ClearRemark() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribePauseUpsert) SetRiderID(v uint64) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateRiderID() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldRiderID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribePauseUpsert) SetEmployeeID(v uint64) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateEmployeeID() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribePauseUpsert) ClearEmployeeID() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldEmployeeID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribePauseUpsert) SetSubscribeID(v uint64) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateSubscribeID() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldSubscribeID)
	return u
}

// SetStartAt sets the "start_at" field.
func (u *SubscribePauseUpsert) SetStartAt(v time.Time) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateStartAt() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldStartAt)
	return u
}

// SetEndAt sets the "end_at" field.
func (u *SubscribePauseUpsert) SetEndAt(v time.Time) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldEndAt, v)
	return u
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateEndAt() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldEndAt)
	return u
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribePauseUpsert) ClearEndAt() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldEndAt)
	return u
}

// SetDays sets the "days" field.
func (u *SubscribePauseUpsert) SetDays(v int) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateDays() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *SubscribePauseUpsert) AddDays(v int) *SubscribePauseUpsert {
	u.Add(subscribepause.FieldDays, v)
	return u
}

// ClearDays clears the value of the "days" field.
func (u *SubscribePauseUpsert) ClearDays() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldDays)
	return u
}

// SetContinueEmployeeID sets the "continue_employee_id" field.
func (u *SubscribePauseUpsert) SetContinueEmployeeID(v uint64) *SubscribePauseUpsert {
	u.Set(subscribepause.FieldContinueEmployeeID, v)
	return u
}

// UpdateContinueEmployeeID sets the "continue_employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsert) UpdateContinueEmployeeID() *SubscribePauseUpsert {
	u.SetExcluded(subscribepause.FieldContinueEmployeeID)
	return u
}

// ClearContinueEmployeeID clears the value of the "continue_employee_id" field.
func (u *SubscribePauseUpsert) ClearContinueEmployeeID() *SubscribePauseUpsert {
	u.SetNull(subscribepause.FieldContinueEmployeeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SubscribePause.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SubscribePauseUpsertOne) UpdateNewValues() *SubscribePauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscribepause.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(subscribepause.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.SubscribePause.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *SubscribePauseUpsertOne) Ignore() *SubscribePauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribePauseUpsertOne) DoNothing() *SubscribePauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribePauseCreate.OnConflict
// documentation for more info.
func (u *SubscribePauseUpsertOne) Update(set func(*SubscribePauseUpsert)) *SubscribePauseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribePauseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribePauseUpsertOne) SetCreatedAt(v time.Time) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateCreatedAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribePauseUpsertOne) SetUpdatedAt(v time.Time) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateUpdatedAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribePauseUpsertOne) SetDeletedAt(v time.Time) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateDeletedAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribePauseUpsertOne) ClearDeletedAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribePauseUpsertOne) SetCreator(v *model.Modifier) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateCreator() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribePauseUpsertOne) ClearCreator() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribePauseUpsertOne) SetLastModifier(v *model.Modifier) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateLastModifier() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribePauseUpsertOne) ClearLastModifier() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribePauseUpsertOne) SetRemark(v string) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateRemark() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribePauseUpsertOne) ClearRemark() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribePauseUpsertOne) SetRiderID(v uint64) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateRiderID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateRiderID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribePauseUpsertOne) SetEmployeeID(v uint64) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateEmployeeID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribePauseUpsertOne) ClearEmployeeID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearEmployeeID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribePauseUpsertOne) SetSubscribeID(v uint64) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateSubscribeID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribePauseUpsertOne) SetStartAt(v time.Time) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateStartAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribePauseUpsertOne) SetEndAt(v time.Time) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateEndAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribePauseUpsertOne) ClearEndAt() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearEndAt()
	})
}

// SetDays sets the "days" field.
func (u *SubscribePauseUpsertOne) SetDays(v int) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribePauseUpsertOne) AddDays(v int) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateDays() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateDays()
	})
}

// ClearDays clears the value of the "days" field.
func (u *SubscribePauseUpsertOne) ClearDays() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearDays()
	})
}

// SetContinueEmployeeID sets the "continue_employee_id" field.
func (u *SubscribePauseUpsertOne) SetContinueEmployeeID(v uint64) *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetContinueEmployeeID(v)
	})
}

// UpdateContinueEmployeeID sets the "continue_employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertOne) UpdateContinueEmployeeID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateContinueEmployeeID()
	})
}

// ClearContinueEmployeeID clears the value of the "continue_employee_id" field.
func (u *SubscribePauseUpsertOne) ClearContinueEmployeeID() *SubscribePauseUpsertOne {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearContinueEmployeeID()
	})
}

// Exec executes the query.
func (u *SubscribePauseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribePauseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribePauseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscribePauseUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscribePauseUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscribePauseCreateBulk is the builder for creating many SubscribePause entities in bulk.
type SubscribePauseCreateBulk struct {
	config
	builders []*SubscribePauseCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscribePause entities in the database.
func (spcb *SubscribePauseCreateBulk) Save(ctx context.Context) ([]*SubscribePause, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SubscribePause, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribePauseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SubscribePauseCreateBulk) SaveX(ctx context.Context) []*SubscribePause {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SubscribePauseCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SubscribePauseCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribePause.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribePauseUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (spcb *SubscribePauseCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscribePauseUpsertBulk {
	spcb.conflict = opts
	return &SubscribePauseUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribePause.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (spcb *SubscribePauseCreateBulk) OnConflictColumns(columns ...string) *SubscribePauseUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SubscribePauseUpsertBulk{
		create: spcb,
	}
}

// SubscribePauseUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscribePause nodes.
type SubscribePauseUpsertBulk struct {
	create *SubscribePauseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscribePause.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *SubscribePauseUpsertBulk) UpdateNewValues() *SubscribePauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscribepause.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(subscribepause.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribePause.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *SubscribePauseUpsertBulk) Ignore() *SubscribePauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribePauseUpsertBulk) DoNothing() *SubscribePauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribePauseCreateBulk.OnConflict
// documentation for more info.
func (u *SubscribePauseUpsertBulk) Update(set func(*SubscribePauseUpsert)) *SubscribePauseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribePauseUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *SubscribePauseUpsertBulk) SetCreatedAt(v time.Time) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateCreatedAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribePauseUpsertBulk) SetUpdatedAt(v time.Time) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateUpdatedAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *SubscribePauseUpsertBulk) SetDeletedAt(v time.Time) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateDeletedAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *SubscribePauseUpsertBulk) ClearDeletedAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *SubscribePauseUpsertBulk) SetCreator(v *model.Modifier) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateCreator() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *SubscribePauseUpsertBulk) ClearCreator() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *SubscribePauseUpsertBulk) SetLastModifier(v *model.Modifier) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateLastModifier() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *SubscribePauseUpsertBulk) ClearLastModifier() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *SubscribePauseUpsertBulk) SetRemark(v string) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateRemark() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *SubscribePauseUpsertBulk) ClearRemark() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribePauseUpsertBulk) SetRiderID(v uint64) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateRiderID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateRiderID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *SubscribePauseUpsertBulk) SetEmployeeID(v uint64) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateEmployeeID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *SubscribePauseUpsertBulk) ClearEmployeeID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearEmployeeID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribePauseUpsertBulk) SetSubscribeID(v uint64) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateSubscribeID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetStartAt sets the "start_at" field.
func (u *SubscribePauseUpsertBulk) SetStartAt(v time.Time) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "start_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateStartAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateStartAt()
	})
}

// SetEndAt sets the "end_at" field.
func (u *SubscribePauseUpsertBulk) SetEndAt(v time.Time) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetEndAt(v)
	})
}

// UpdateEndAt sets the "end_at" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateEndAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateEndAt()
	})
}

// ClearEndAt clears the value of the "end_at" field.
func (u *SubscribePauseUpsertBulk) ClearEndAt() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearEndAt()
	})
}

// SetDays sets the "days" field.
func (u *SubscribePauseUpsertBulk) SetDays(v int) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribePauseUpsertBulk) AddDays(v int) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateDays() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateDays()
	})
}

// ClearDays clears the value of the "days" field.
func (u *SubscribePauseUpsertBulk) ClearDays() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearDays()
	})
}

// SetContinueEmployeeID sets the "continue_employee_id" field.
func (u *SubscribePauseUpsertBulk) SetContinueEmployeeID(v uint64) *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.SetContinueEmployeeID(v)
	})
}

// UpdateContinueEmployeeID sets the "continue_employee_id" field to the value that was provided on create.
func (u *SubscribePauseUpsertBulk) UpdateContinueEmployeeID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.UpdateContinueEmployeeID()
	})
}

// ClearContinueEmployeeID clears the value of the "continue_employee_id" field.
func (u *SubscribePauseUpsertBulk) ClearContinueEmployeeID() *SubscribePauseUpsertBulk {
	return u.Update(func(s *SubscribePauseUpsert) {
		s.ClearContinueEmployeeID()
	})
}

// Exec executes the query.
func (u *SubscribePauseUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscribePauseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribePauseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribePauseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
