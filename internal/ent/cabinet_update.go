// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// CabinetUpdate is the builder for updating Cabinet entities.
type CabinetUpdate struct {
	config
	hooks     []Hook
	mutation  *CabinetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CabinetUpdate builder.
func (cu *CabinetUpdate) Where(ps ...predicate.Cabinet) *CabinetUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CabinetUpdate) SetUpdatedAt(t time.Time) *CabinetUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CabinetUpdate) SetDeletedAt(t time.Time) *CabinetUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableDeletedAt(t *time.Time) *CabinetUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CabinetUpdate) ClearDeletedAt() *CabinetUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetLastModifier sets the "last_modifier" field.
func (cu *CabinetUpdate) SetLastModifier(m *model.Modifier) *CabinetUpdate {
	cu.mutation.SetLastModifier(m)
	return cu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cu *CabinetUpdate) ClearLastModifier() *CabinetUpdate {
	cu.mutation.ClearLastModifier()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *CabinetUpdate) SetRemark(s string) *CabinetUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableRemark(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *CabinetUpdate) ClearRemark() *CabinetUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetCityID sets the "city_id" field.
func (cu *CabinetUpdate) SetCityID(u uint64) *CabinetUpdate {
	cu.mutation.SetCityID(u)
	return cu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableCityID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetCityID(*u)
	}
	return cu
}

// ClearCityID clears the value of the "city_id" field.
func (cu *CabinetUpdate) ClearCityID() *CabinetUpdate {
	cu.mutation.ClearCityID()
	return cu
}

// SetStoreID sets the "store_id" field.
func (cu *CabinetUpdate) SetStoreID(u uint64) *CabinetUpdate {
	cu.mutation.SetStoreID(u)
	return cu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableStoreID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetStoreID(*u)
	}
	return cu
}

// ClearStoreID clears the value of the "store_id" field.
func (cu *CabinetUpdate) ClearStoreID() *CabinetUpdate {
	cu.mutation.ClearStoreID()
	return cu
}

// SetMaintainerID sets the "maintainer_id" field.
func (cu *CabinetUpdate) SetMaintainerID(u uint64) *CabinetUpdate {
	cu.mutation.SetMaintainerID(u)
	return cu
}

// SetNillableMaintainerID sets the "maintainer_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableMaintainerID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetMaintainerID(*u)
	}
	return cu
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (cu *CabinetUpdate) ClearMaintainerID() *CabinetUpdate {
	cu.mutation.ClearMaintainerID()
	return cu
}

// SetBranchID sets the "branch_id" field.
func (cu *CabinetUpdate) SetBranchID(u uint64) *CabinetUpdate {
	cu.mutation.SetBranchID(u)
	return cu
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableBranchID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetBranchID(*u)
	}
	return cu
}

// ClearBranchID clears the value of the "branch_id" field.
func (cu *CabinetUpdate) ClearBranchID() *CabinetUpdate {
	cu.mutation.ClearBranchID()
	return cu
}

// SetEnterpriseID sets the "enterprise_id" field.
func (cu *CabinetUpdate) SetEnterpriseID(u uint64) *CabinetUpdate {
	cu.mutation.SetEnterpriseID(u)
	return cu
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableEnterpriseID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetEnterpriseID(*u)
	}
	return cu
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (cu *CabinetUpdate) ClearEnterpriseID() *CabinetUpdate {
	cu.mutation.ClearEnterpriseID()
	return cu
}

// SetStationID sets the "station_id" field.
func (cu *CabinetUpdate) SetStationID(u uint64) *CabinetUpdate {
	cu.mutation.SetStationID(u)
	return cu
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableStationID(u *uint64) *CabinetUpdate {
	if u != nil {
		cu.SetStationID(*u)
	}
	return cu
}

// ClearStationID clears the value of the "station_id" field.
func (cu *CabinetUpdate) ClearStationID() *CabinetUpdate {
	cu.mutation.ClearStationID()
	return cu
}

// SetSn sets the "sn" field.
func (cu *CabinetUpdate) SetSn(s string) *CabinetUpdate {
	cu.mutation.SetSn(s)
	return cu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableSn(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetSn(*s)
	}
	return cu
}

// SetBrand sets the "brand" field.
func (cu *CabinetUpdate) SetBrand(ab adapter.CabinetBrand) *CabinetUpdate {
	cu.mutation.SetBrand(ab)
	return cu
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableBrand(ab *adapter.CabinetBrand) *CabinetUpdate {
	if ab != nil {
		cu.SetBrand(*ab)
	}
	return cu
}

// SetSerial sets the "serial" field.
func (cu *CabinetUpdate) SetSerial(s string) *CabinetUpdate {
	cu.mutation.SetSerial(s)
	return cu
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableSerial(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetSerial(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *CabinetUpdate) SetName(s string) *CabinetUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableName(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetDoors sets the "doors" field.
func (cu *CabinetUpdate) SetDoors(i int) *CabinetUpdate {
	cu.mutation.ResetDoors()
	cu.mutation.SetDoors(i)
	return cu
}

// SetNillableDoors sets the "doors" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableDoors(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetDoors(*i)
	}
	return cu
}

// AddDoors adds i to the "doors" field.
func (cu *CabinetUpdate) AddDoors(i int) *CabinetUpdate {
	cu.mutation.AddDoors(i)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CabinetUpdate) SetStatus(u uint8) *CabinetUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableStatus(u *uint8) *CabinetUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *CabinetUpdate) AddStatus(u int8) *CabinetUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// SetLng sets the "lng" field.
func (cu *CabinetUpdate) SetLng(f float64) *CabinetUpdate {
	cu.mutation.ResetLng()
	cu.mutation.SetLng(f)
	return cu
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableLng(f *float64) *CabinetUpdate {
	if f != nil {
		cu.SetLng(*f)
	}
	return cu
}

// AddLng adds f to the "lng" field.
func (cu *CabinetUpdate) AddLng(f float64) *CabinetUpdate {
	cu.mutation.AddLng(f)
	return cu
}

// ClearLng clears the value of the "lng" field.
func (cu *CabinetUpdate) ClearLng() *CabinetUpdate {
	cu.mutation.ClearLng()
	return cu
}

// SetLat sets the "lat" field.
func (cu *CabinetUpdate) SetLat(f float64) *CabinetUpdate {
	cu.mutation.ResetLat()
	cu.mutation.SetLat(f)
	return cu
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableLat(f *float64) *CabinetUpdate {
	if f != nil {
		cu.SetLat(*f)
	}
	return cu
}

// AddLat adds f to the "lat" field.
func (cu *CabinetUpdate) AddLat(f float64) *CabinetUpdate {
	cu.mutation.AddLat(f)
	return cu
}

// ClearLat clears the value of the "lat" field.
func (cu *CabinetUpdate) ClearLat() *CabinetUpdate {
	cu.mutation.ClearLat()
	return cu
}

// SetGeom sets the "geom" field.
func (cu *CabinetUpdate) SetGeom(m *model.Geometry) *CabinetUpdate {
	cu.mutation.SetGeom(m)
	return cu
}

// ClearGeom clears the value of the "geom" field.
func (cu *CabinetUpdate) ClearGeom() *CabinetUpdate {
	cu.mutation.ClearGeom()
	return cu
}

// SetAddress sets the "address" field.
func (cu *CabinetUpdate) SetAddress(s string) *CabinetUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableAddress(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *CabinetUpdate) ClearAddress() *CabinetUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetSimSn sets the "sim_sn" field.
func (cu *CabinetUpdate) SetSimSn(s string) *CabinetUpdate {
	cu.mutation.SetSimSn(s)
	return cu
}

// SetNillableSimSn sets the "sim_sn" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableSimSn(s *string) *CabinetUpdate {
	if s != nil {
		cu.SetSimSn(*s)
	}
	return cu
}

// ClearSimSn clears the value of the "sim_sn" field.
func (cu *CabinetUpdate) ClearSimSn() *CabinetUpdate {
	cu.mutation.ClearSimSn()
	return cu
}

// SetSimDate sets the "sim_date" field.
func (cu *CabinetUpdate) SetSimDate(t time.Time) *CabinetUpdate {
	cu.mutation.SetSimDate(t)
	return cu
}

// SetNillableSimDate sets the "sim_date" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableSimDate(t *time.Time) *CabinetUpdate {
	if t != nil {
		cu.SetSimDate(*t)
	}
	return cu
}

// ClearSimDate clears the value of the "sim_date" field.
func (cu *CabinetUpdate) ClearSimDate() *CabinetUpdate {
	cu.mutation.ClearSimDate()
	return cu
}

// SetTransferred sets the "transferred" field.
func (cu *CabinetUpdate) SetTransferred(b bool) *CabinetUpdate {
	cu.mutation.SetTransferred(b)
	return cu
}

// SetNillableTransferred sets the "transferred" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableTransferred(b *bool) *CabinetUpdate {
	if b != nil {
		cu.SetTransferred(*b)
	}
	return cu
}

// SetIntelligent sets the "intelligent" field.
func (cu *CabinetUpdate) SetIntelligent(b bool) *CabinetUpdate {
	cu.mutation.SetIntelligent(b)
	return cu
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableIntelligent(b *bool) *CabinetUpdate {
	if b != nil {
		cu.SetIntelligent(*b)
	}
	return cu
}

// SetHealth sets the "health" field.
func (cu *CabinetUpdate) SetHealth(u uint8) *CabinetUpdate {
	cu.mutation.ResetHealth()
	cu.mutation.SetHealth(u)
	return cu
}

// SetNillableHealth sets the "health" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableHealth(u *uint8) *CabinetUpdate {
	if u != nil {
		cu.SetHealth(*u)
	}
	return cu
}

// AddHealth adds u to the "health" field.
func (cu *CabinetUpdate) AddHealth(u int8) *CabinetUpdate {
	cu.mutation.AddHealth(u)
	return cu
}

// SetBin sets the "bin" field.
func (cu *CabinetUpdate) SetBin(mb model.CabinetBins) *CabinetUpdate {
	cu.mutation.SetBin(mb)
	return cu
}

// AppendBin appends mb to the "bin" field.
func (cu *CabinetUpdate) AppendBin(mb model.CabinetBins) *CabinetUpdate {
	cu.mutation.AppendBin(mb)
	return cu
}

// ClearBin clears the value of the "bin" field.
func (cu *CabinetUpdate) ClearBin() *CabinetUpdate {
	cu.mutation.ClearBin()
	return cu
}

// SetBatteryNum sets the "battery_num" field.
func (cu *CabinetUpdate) SetBatteryNum(i int) *CabinetUpdate {
	cu.mutation.ResetBatteryNum()
	cu.mutation.SetBatteryNum(i)
	return cu
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableBatteryNum(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetBatteryNum(*i)
	}
	return cu
}

// AddBatteryNum adds i to the "battery_num" field.
func (cu *CabinetUpdate) AddBatteryNum(i int) *CabinetUpdate {
	cu.mutation.AddBatteryNum(i)
	return cu
}

// SetBatteryFullNum sets the "battery_full_num" field.
func (cu *CabinetUpdate) SetBatteryFullNum(i int) *CabinetUpdate {
	cu.mutation.ResetBatteryFullNum()
	cu.mutation.SetBatteryFullNum(i)
	return cu
}

// SetNillableBatteryFullNum sets the "battery_full_num" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableBatteryFullNum(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetBatteryFullNum(*i)
	}
	return cu
}

// AddBatteryFullNum adds i to the "battery_full_num" field.
func (cu *CabinetUpdate) AddBatteryFullNum(i int) *CabinetUpdate {
	cu.mutation.AddBatteryFullNum(i)
	return cu
}

// SetBatteryChargingNum sets the "battery_charging_num" field.
func (cu *CabinetUpdate) SetBatteryChargingNum(i int) *CabinetUpdate {
	cu.mutation.ResetBatteryChargingNum()
	cu.mutation.SetBatteryChargingNum(i)
	return cu
}

// SetNillableBatteryChargingNum sets the "battery_charging_num" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableBatteryChargingNum(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetBatteryChargingNum(*i)
	}
	return cu
}

// AddBatteryChargingNum adds i to the "battery_charging_num" field.
func (cu *CabinetUpdate) AddBatteryChargingNum(i int) *CabinetUpdate {
	cu.mutation.AddBatteryChargingNum(i)
	return cu
}

// SetEmptyBinNum sets the "empty_bin_num" field.
func (cu *CabinetUpdate) SetEmptyBinNum(i int) *CabinetUpdate {
	cu.mutation.ResetEmptyBinNum()
	cu.mutation.SetEmptyBinNum(i)
	return cu
}

// SetNillableEmptyBinNum sets the "empty_bin_num" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableEmptyBinNum(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetEmptyBinNum(*i)
	}
	return cu
}

// AddEmptyBinNum adds i to the "empty_bin_num" field.
func (cu *CabinetUpdate) AddEmptyBinNum(i int) *CabinetUpdate {
	cu.mutation.AddEmptyBinNum(i)
	return cu
}

// SetLockedBinNum sets the "locked_bin_num" field.
func (cu *CabinetUpdate) SetLockedBinNum(i int) *CabinetUpdate {
	cu.mutation.ResetLockedBinNum()
	cu.mutation.SetLockedBinNum(i)
	return cu
}

// SetNillableLockedBinNum sets the "locked_bin_num" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableLockedBinNum(i *int) *CabinetUpdate {
	if i != nil {
		cu.SetLockedBinNum(*i)
	}
	return cu
}

// AddLockedBinNum adds i to the "locked_bin_num" field.
func (cu *CabinetUpdate) AddLockedBinNum(i int) *CabinetUpdate {
	cu.mutation.AddLockedBinNum(i)
	return cu
}

// SetMaintenanceAt sets the "maintenance_at" field.
func (cu *CabinetUpdate) SetMaintenanceAt(t time.Time) *CabinetUpdate {
	cu.mutation.SetMaintenanceAt(t)
	return cu
}

// SetNillableMaintenanceAt sets the "maintenance_at" field if the given value is not nil.
func (cu *CabinetUpdate) SetNillableMaintenanceAt(t *time.Time) *CabinetUpdate {
	if t != nil {
		cu.SetMaintenanceAt(*t)
	}
	return cu
}

// ClearMaintenanceAt clears the value of the "maintenance_at" field.
func (cu *CabinetUpdate) ClearMaintenanceAt() *CabinetUpdate {
	cu.mutation.ClearMaintenanceAt()
	return cu
}

// SetCity sets the "city" edge to the City entity.
func (cu *CabinetUpdate) SetCity(c *City) *CabinetUpdate {
	return cu.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (cu *CabinetUpdate) SetStore(s *Store) *CabinetUpdate {
	return cu.SetStoreID(s.ID)
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (cu *CabinetUpdate) SetMaintainer(m *Maintainer) *CabinetUpdate {
	return cu.SetMaintainerID(m.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cu *CabinetUpdate) SetBranch(b *Branch) *CabinetUpdate {
	return cu.SetBranchID(b.ID)
}

// AddModelIDs adds the "models" edge to the BatteryModel entity by IDs.
func (cu *CabinetUpdate) AddModelIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddModelIDs(ids...)
	return cu
}

// AddModels adds the "models" edges to the BatteryModel entity.
func (cu *CabinetUpdate) AddModels(b ...*BatteryModel) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddModelIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (cu *CabinetUpdate) AddFaultIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddFaultIDs(ids...)
	return cu
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (cu *CabinetUpdate) AddFaults(c ...*CabinetFault) *CabinetUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddFaultIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (cu *CabinetUpdate) AddExchangeIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddExchangeIDs(ids...)
	return cu
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (cu *CabinetUpdate) AddExchanges(e ...*Exchange) *CabinetUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExchangeIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (cu *CabinetUpdate) AddStockIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddStockIDs(ids...)
	return cu
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (cu *CabinetUpdate) AddStocks(s ...*Stock) *CabinetUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddStockIDs(ids...)
}

// AddBatteryIDs adds the "batteries" edge to the Battery entity by IDs.
func (cu *CabinetUpdate) AddBatteryIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddBatteryIDs(ids...)
	return cu
}

// AddBatteries adds the "batteries" edges to the Battery entity.
func (cu *CabinetUpdate) AddBatteries(b ...*Battery) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBatteryIDs(ids...)
}

// AddBatteryFlowIDs adds the "battery_flows" edge to the BatteryFlow entity by IDs.
func (cu *CabinetUpdate) AddBatteryFlowIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.AddBatteryFlowIDs(ids...)
	return cu
}

// AddBatteryFlows adds the "battery_flows" edges to the BatteryFlow entity.
func (cu *CabinetUpdate) AddBatteryFlows(b ...*BatteryFlow) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBatteryFlowIDs(ids...)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (cu *CabinetUpdate) SetStation(e *EnterpriseStation) *CabinetUpdate {
	return cu.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (cu *CabinetUpdate) SetEnterprise(e *Enterprise) *CabinetUpdate {
	return cu.SetEnterpriseID(e.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cu *CabinetUpdate) Mutation() *CabinetMutation {
	return cu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cu *CabinetUpdate) ClearCity() *CabinetUpdate {
	cu.mutation.ClearCity()
	return cu
}

// ClearStore clears the "store" edge to the Store entity.
func (cu *CabinetUpdate) ClearStore() *CabinetUpdate {
	cu.mutation.ClearStore()
	return cu
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (cu *CabinetUpdate) ClearMaintainer() *CabinetUpdate {
	cu.mutation.ClearMaintainer()
	return cu
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (cu *CabinetUpdate) ClearBranch() *CabinetUpdate {
	cu.mutation.ClearBranch()
	return cu
}

// ClearModels clears all "models" edges to the BatteryModel entity.
func (cu *CabinetUpdate) ClearModels() *CabinetUpdate {
	cu.mutation.ClearModels()
	return cu
}

// RemoveModelIDs removes the "models" edge to BatteryModel entities by IDs.
func (cu *CabinetUpdate) RemoveModelIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveModelIDs(ids...)
	return cu
}

// RemoveModels removes "models" edges to BatteryModel entities.
func (cu *CabinetUpdate) RemoveModels(b ...*BatteryModel) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveModelIDs(ids...)
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (cu *CabinetUpdate) ClearFaults() *CabinetUpdate {
	cu.mutation.ClearFaults()
	return cu
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (cu *CabinetUpdate) RemoveFaultIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveFaultIDs(ids...)
	return cu
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (cu *CabinetUpdate) RemoveFaults(c ...*CabinetFault) *CabinetUpdate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveFaultIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (cu *CabinetUpdate) ClearExchanges() *CabinetUpdate {
	cu.mutation.ClearExchanges()
	return cu
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (cu *CabinetUpdate) RemoveExchangeIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveExchangeIDs(ids...)
	return cu
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (cu *CabinetUpdate) RemoveExchanges(e ...*Exchange) *CabinetUpdate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExchangeIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (cu *CabinetUpdate) ClearStocks() *CabinetUpdate {
	cu.mutation.ClearStocks()
	return cu
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (cu *CabinetUpdate) RemoveStockIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveStockIDs(ids...)
	return cu
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (cu *CabinetUpdate) RemoveStocks(s ...*Stock) *CabinetUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveStockIDs(ids...)
}

// ClearBatteries clears all "batteries" edges to the Battery entity.
func (cu *CabinetUpdate) ClearBatteries() *CabinetUpdate {
	cu.mutation.ClearBatteries()
	return cu
}

// RemoveBatteryIDs removes the "batteries" edge to Battery entities by IDs.
func (cu *CabinetUpdate) RemoveBatteryIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveBatteryIDs(ids...)
	return cu
}

// RemoveBatteries removes "batteries" edges to Battery entities.
func (cu *CabinetUpdate) RemoveBatteries(b ...*Battery) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBatteryIDs(ids...)
}

// ClearBatteryFlows clears all "battery_flows" edges to the BatteryFlow entity.
func (cu *CabinetUpdate) ClearBatteryFlows() *CabinetUpdate {
	cu.mutation.ClearBatteryFlows()
	return cu
}

// RemoveBatteryFlowIDs removes the "battery_flows" edge to BatteryFlow entities by IDs.
func (cu *CabinetUpdate) RemoveBatteryFlowIDs(ids ...uint64) *CabinetUpdate {
	cu.mutation.RemoveBatteryFlowIDs(ids...)
	return cu
}

// RemoveBatteryFlows removes "battery_flows" edges to BatteryFlow entities.
func (cu *CabinetUpdate) RemoveBatteryFlows(b ...*BatteryFlow) *CabinetUpdate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBatteryFlowIDs(ids...)
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (cu *CabinetUpdate) ClearStation() *CabinetUpdate {
	cu.mutation.ClearStation()
	return cu
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (cu *CabinetUpdate) ClearEnterprise() *CabinetUpdate {
	cu.mutation.ClearEnterprise()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CabinetUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CabinetUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CabinetUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CabinetUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CabinetUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if cabinet.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinet.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinet.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CabinetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CabinetUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CabinetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cabinet.Table, cabinet.Columns, sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(cabinet.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(cabinet.FieldDeletedAt, field.TypeTime)
	}
	if cu.mutation.CreatorCleared() {
		_spec.ClearField(cabinet.FieldCreator, field.TypeJSON)
	}
	if value, ok := cu.mutation.LastModifier(); ok {
		_spec.SetField(cabinet.FieldLastModifier, field.TypeJSON, value)
	}
	if cu.mutation.LastModifierCleared() {
		_spec.ClearField(cabinet.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.SetField(cabinet.FieldRemark, field.TypeString, value)
	}
	if cu.mutation.RemarkCleared() {
		_spec.ClearField(cabinet.FieldRemark, field.TypeString)
	}
	if value, ok := cu.mutation.Sn(); ok {
		_spec.SetField(cabinet.FieldSn, field.TypeString, value)
	}
	if value, ok := cu.mutation.Brand(); ok {
		_spec.SetField(cabinet.FieldBrand, field.TypeOther, value)
	}
	if value, ok := cu.mutation.Serial(); ok {
		_spec.SetField(cabinet.FieldSerial, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cabinet.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Doors(); ok {
		_spec.SetField(cabinet.FieldDoors, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDoors(); ok {
		_spec.AddField(cabinet.FieldDoors, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(cabinet.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(cabinet.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.Lng(); ok {
		_spec.SetField(cabinet.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLng(); ok {
		_spec.AddField(cabinet.FieldLng, field.TypeFloat64, value)
	}
	if cu.mutation.LngCleared() {
		_spec.ClearField(cabinet.FieldLng, field.TypeFloat64)
	}
	if value, ok := cu.mutation.Lat(); ok {
		_spec.SetField(cabinet.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedLat(); ok {
		_spec.AddField(cabinet.FieldLat, field.TypeFloat64, value)
	}
	if cu.mutation.LatCleared() {
		_spec.ClearField(cabinet.FieldLat, field.TypeFloat64)
	}
	if value, ok := cu.mutation.Geom(); ok {
		_spec.SetField(cabinet.FieldGeom, field.TypeOther, value)
	}
	if cu.mutation.GeomCleared() {
		_spec.ClearField(cabinet.FieldGeom, field.TypeOther)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(cabinet.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(cabinet.FieldAddress, field.TypeString)
	}
	if value, ok := cu.mutation.SimSn(); ok {
		_spec.SetField(cabinet.FieldSimSn, field.TypeString, value)
	}
	if cu.mutation.SimSnCleared() {
		_spec.ClearField(cabinet.FieldSimSn, field.TypeString)
	}
	if value, ok := cu.mutation.SimDate(); ok {
		_spec.SetField(cabinet.FieldSimDate, field.TypeTime, value)
	}
	if cu.mutation.SimDateCleared() {
		_spec.ClearField(cabinet.FieldSimDate, field.TypeTime)
	}
	if value, ok := cu.mutation.Transferred(); ok {
		_spec.SetField(cabinet.FieldTransferred, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Intelligent(); ok {
		_spec.SetField(cabinet.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Health(); ok {
		_spec.SetField(cabinet.FieldHealth, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedHealth(); ok {
		_spec.AddField(cabinet.FieldHealth, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.Bin(); ok {
		_spec.SetField(cabinet.FieldBin, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedBin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cabinet.FieldBin, value)
		})
	}
	if cu.mutation.BinCleared() {
		_spec.ClearField(cabinet.FieldBin, field.TypeJSON)
	}
	if value, ok := cu.mutation.BatteryNum(); ok {
		_spec.SetField(cabinet.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedBatteryNum(); ok {
		_spec.AddField(cabinet.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.BatteryFullNum(); ok {
		_spec.SetField(cabinet.FieldBatteryFullNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedBatteryFullNum(); ok {
		_spec.AddField(cabinet.FieldBatteryFullNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.BatteryChargingNum(); ok {
		_spec.SetField(cabinet.FieldBatteryChargingNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedBatteryChargingNum(); ok {
		_spec.AddField(cabinet.FieldBatteryChargingNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.EmptyBinNum(); ok {
		_spec.SetField(cabinet.FieldEmptyBinNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedEmptyBinNum(); ok {
		_spec.AddField(cabinet.FieldEmptyBinNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.LockedBinNum(); ok {
		_spec.SetField(cabinet.FieldLockedBinNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedLockedBinNum(); ok {
		_spec.AddField(cabinet.FieldLockedBinNum, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MaintenanceAt(); ok {
		_spec.SetField(cabinet.FieldMaintenanceAt, field.TypeTime, value)
	}
	if cu.mutation.MaintenanceAtCleared() {
		_spec.ClearField(cabinet.FieldMaintenanceAt, field.TypeTime)
	}
	if cu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.StoreTable,
			Columns: []string{cabinet.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.StoreTable,
			Columns: []string{cabinet.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.MaintainerTable,
			Columns: []string{cabinet.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.MaintainerTable,
			Columns: []string{cabinet.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedModelsIDs(); len(nodes) > 0 && !cu.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !cu.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !cu.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedStocksIDs(); len(nodes) > 0 && !cu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BatteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBatteriesIDs(); len(nodes) > 0 && !cu.mutation.BatteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BatteriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BatteryFlowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBatteryFlowsIDs(); len(nodes) > 0 && !cu.mutation.BatteryFlowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BatteryFlowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.StationTable,
			Columns: []string{cabinet.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.StationTable,
			Columns: []string{cabinet.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.EnterpriseTable,
			Columns: []string{cabinet.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.EnterpriseTable,
			Columns: []string{cabinet.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CabinetUpdateOne is the builder for updating a single Cabinet entity.
type CabinetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CabinetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CabinetUpdateOne) SetUpdatedAt(t time.Time) *CabinetUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CabinetUpdateOne) SetDeletedAt(t time.Time) *CabinetUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableDeletedAt(t *time.Time) *CabinetUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CabinetUpdateOne) ClearDeletedAt() *CabinetUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetLastModifier sets the "last_modifier" field.
func (cuo *CabinetUpdateOne) SetLastModifier(m *model.Modifier) *CabinetUpdateOne {
	cuo.mutation.SetLastModifier(m)
	return cuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cuo *CabinetUpdateOne) ClearLastModifier() *CabinetUpdateOne {
	cuo.mutation.ClearLastModifier()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *CabinetUpdateOne) SetRemark(s string) *CabinetUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableRemark(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *CabinetUpdateOne) ClearRemark() *CabinetUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetCityID sets the "city_id" field.
func (cuo *CabinetUpdateOne) SetCityID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetCityID(u)
	return cuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableCityID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetCityID(*u)
	}
	return cuo
}

// ClearCityID clears the value of the "city_id" field.
func (cuo *CabinetUpdateOne) ClearCityID() *CabinetUpdateOne {
	cuo.mutation.ClearCityID()
	return cuo
}

// SetStoreID sets the "store_id" field.
func (cuo *CabinetUpdateOne) SetStoreID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetStoreID(u)
	return cuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableStoreID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetStoreID(*u)
	}
	return cuo
}

// ClearStoreID clears the value of the "store_id" field.
func (cuo *CabinetUpdateOne) ClearStoreID() *CabinetUpdateOne {
	cuo.mutation.ClearStoreID()
	return cuo
}

// SetMaintainerID sets the "maintainer_id" field.
func (cuo *CabinetUpdateOne) SetMaintainerID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetMaintainerID(u)
	return cuo
}

// SetNillableMaintainerID sets the "maintainer_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableMaintainerID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetMaintainerID(*u)
	}
	return cuo
}

// ClearMaintainerID clears the value of the "maintainer_id" field.
func (cuo *CabinetUpdateOne) ClearMaintainerID() *CabinetUpdateOne {
	cuo.mutation.ClearMaintainerID()
	return cuo
}

// SetBranchID sets the "branch_id" field.
func (cuo *CabinetUpdateOne) SetBranchID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetBranchID(u)
	return cuo
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableBranchID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetBranchID(*u)
	}
	return cuo
}

// ClearBranchID clears the value of the "branch_id" field.
func (cuo *CabinetUpdateOne) ClearBranchID() *CabinetUpdateOne {
	cuo.mutation.ClearBranchID()
	return cuo
}

// SetEnterpriseID sets the "enterprise_id" field.
func (cuo *CabinetUpdateOne) SetEnterpriseID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetEnterpriseID(u)
	return cuo
}

// SetNillableEnterpriseID sets the "enterprise_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableEnterpriseID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetEnterpriseID(*u)
	}
	return cuo
}

// ClearEnterpriseID clears the value of the "enterprise_id" field.
func (cuo *CabinetUpdateOne) ClearEnterpriseID() *CabinetUpdateOne {
	cuo.mutation.ClearEnterpriseID()
	return cuo
}

// SetStationID sets the "station_id" field.
func (cuo *CabinetUpdateOne) SetStationID(u uint64) *CabinetUpdateOne {
	cuo.mutation.SetStationID(u)
	return cuo
}

// SetNillableStationID sets the "station_id" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableStationID(u *uint64) *CabinetUpdateOne {
	if u != nil {
		cuo.SetStationID(*u)
	}
	return cuo
}

// ClearStationID clears the value of the "station_id" field.
func (cuo *CabinetUpdateOne) ClearStationID() *CabinetUpdateOne {
	cuo.mutation.ClearStationID()
	return cuo
}

// SetSn sets the "sn" field.
func (cuo *CabinetUpdateOne) SetSn(s string) *CabinetUpdateOne {
	cuo.mutation.SetSn(s)
	return cuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableSn(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetSn(*s)
	}
	return cuo
}

// SetBrand sets the "brand" field.
func (cuo *CabinetUpdateOne) SetBrand(ab adapter.CabinetBrand) *CabinetUpdateOne {
	cuo.mutation.SetBrand(ab)
	return cuo
}

// SetNillableBrand sets the "brand" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableBrand(ab *adapter.CabinetBrand) *CabinetUpdateOne {
	if ab != nil {
		cuo.SetBrand(*ab)
	}
	return cuo
}

// SetSerial sets the "serial" field.
func (cuo *CabinetUpdateOne) SetSerial(s string) *CabinetUpdateOne {
	cuo.mutation.SetSerial(s)
	return cuo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableSerial(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetSerial(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *CabinetUpdateOne) SetName(s string) *CabinetUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableName(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetDoors sets the "doors" field.
func (cuo *CabinetUpdateOne) SetDoors(i int) *CabinetUpdateOne {
	cuo.mutation.ResetDoors()
	cuo.mutation.SetDoors(i)
	return cuo
}

// SetNillableDoors sets the "doors" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableDoors(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetDoors(*i)
	}
	return cuo
}

// AddDoors adds i to the "doors" field.
func (cuo *CabinetUpdateOne) AddDoors(i int) *CabinetUpdateOne {
	cuo.mutation.AddDoors(i)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CabinetUpdateOne) SetStatus(u uint8) *CabinetUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableStatus(u *uint8) *CabinetUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *CabinetUpdateOne) AddStatus(u int8) *CabinetUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// SetLng sets the "lng" field.
func (cuo *CabinetUpdateOne) SetLng(f float64) *CabinetUpdateOne {
	cuo.mutation.ResetLng()
	cuo.mutation.SetLng(f)
	return cuo
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableLng(f *float64) *CabinetUpdateOne {
	if f != nil {
		cuo.SetLng(*f)
	}
	return cuo
}

// AddLng adds f to the "lng" field.
func (cuo *CabinetUpdateOne) AddLng(f float64) *CabinetUpdateOne {
	cuo.mutation.AddLng(f)
	return cuo
}

// ClearLng clears the value of the "lng" field.
func (cuo *CabinetUpdateOne) ClearLng() *CabinetUpdateOne {
	cuo.mutation.ClearLng()
	return cuo
}

// SetLat sets the "lat" field.
func (cuo *CabinetUpdateOne) SetLat(f float64) *CabinetUpdateOne {
	cuo.mutation.ResetLat()
	cuo.mutation.SetLat(f)
	return cuo
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableLat(f *float64) *CabinetUpdateOne {
	if f != nil {
		cuo.SetLat(*f)
	}
	return cuo
}

// AddLat adds f to the "lat" field.
func (cuo *CabinetUpdateOne) AddLat(f float64) *CabinetUpdateOne {
	cuo.mutation.AddLat(f)
	return cuo
}

// ClearLat clears the value of the "lat" field.
func (cuo *CabinetUpdateOne) ClearLat() *CabinetUpdateOne {
	cuo.mutation.ClearLat()
	return cuo
}

// SetGeom sets the "geom" field.
func (cuo *CabinetUpdateOne) SetGeom(m *model.Geometry) *CabinetUpdateOne {
	cuo.mutation.SetGeom(m)
	return cuo
}

// ClearGeom clears the value of the "geom" field.
func (cuo *CabinetUpdateOne) ClearGeom() *CabinetUpdateOne {
	cuo.mutation.ClearGeom()
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CabinetUpdateOne) SetAddress(s string) *CabinetUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableAddress(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *CabinetUpdateOne) ClearAddress() *CabinetUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetSimSn sets the "sim_sn" field.
func (cuo *CabinetUpdateOne) SetSimSn(s string) *CabinetUpdateOne {
	cuo.mutation.SetSimSn(s)
	return cuo
}

// SetNillableSimSn sets the "sim_sn" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableSimSn(s *string) *CabinetUpdateOne {
	if s != nil {
		cuo.SetSimSn(*s)
	}
	return cuo
}

// ClearSimSn clears the value of the "sim_sn" field.
func (cuo *CabinetUpdateOne) ClearSimSn() *CabinetUpdateOne {
	cuo.mutation.ClearSimSn()
	return cuo
}

// SetSimDate sets the "sim_date" field.
func (cuo *CabinetUpdateOne) SetSimDate(t time.Time) *CabinetUpdateOne {
	cuo.mutation.SetSimDate(t)
	return cuo
}

// SetNillableSimDate sets the "sim_date" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableSimDate(t *time.Time) *CabinetUpdateOne {
	if t != nil {
		cuo.SetSimDate(*t)
	}
	return cuo
}

// ClearSimDate clears the value of the "sim_date" field.
func (cuo *CabinetUpdateOne) ClearSimDate() *CabinetUpdateOne {
	cuo.mutation.ClearSimDate()
	return cuo
}

// SetTransferred sets the "transferred" field.
func (cuo *CabinetUpdateOne) SetTransferred(b bool) *CabinetUpdateOne {
	cuo.mutation.SetTransferred(b)
	return cuo
}

// SetNillableTransferred sets the "transferred" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableTransferred(b *bool) *CabinetUpdateOne {
	if b != nil {
		cuo.SetTransferred(*b)
	}
	return cuo
}

// SetIntelligent sets the "intelligent" field.
func (cuo *CabinetUpdateOne) SetIntelligent(b bool) *CabinetUpdateOne {
	cuo.mutation.SetIntelligent(b)
	return cuo
}

// SetNillableIntelligent sets the "intelligent" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableIntelligent(b *bool) *CabinetUpdateOne {
	if b != nil {
		cuo.SetIntelligent(*b)
	}
	return cuo
}

// SetHealth sets the "health" field.
func (cuo *CabinetUpdateOne) SetHealth(u uint8) *CabinetUpdateOne {
	cuo.mutation.ResetHealth()
	cuo.mutation.SetHealth(u)
	return cuo
}

// SetNillableHealth sets the "health" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableHealth(u *uint8) *CabinetUpdateOne {
	if u != nil {
		cuo.SetHealth(*u)
	}
	return cuo
}

// AddHealth adds u to the "health" field.
func (cuo *CabinetUpdateOne) AddHealth(u int8) *CabinetUpdateOne {
	cuo.mutation.AddHealth(u)
	return cuo
}

// SetBin sets the "bin" field.
func (cuo *CabinetUpdateOne) SetBin(mb model.CabinetBins) *CabinetUpdateOne {
	cuo.mutation.SetBin(mb)
	return cuo
}

// AppendBin appends mb to the "bin" field.
func (cuo *CabinetUpdateOne) AppendBin(mb model.CabinetBins) *CabinetUpdateOne {
	cuo.mutation.AppendBin(mb)
	return cuo
}

// ClearBin clears the value of the "bin" field.
func (cuo *CabinetUpdateOne) ClearBin() *CabinetUpdateOne {
	cuo.mutation.ClearBin()
	return cuo
}

// SetBatteryNum sets the "battery_num" field.
func (cuo *CabinetUpdateOne) SetBatteryNum(i int) *CabinetUpdateOne {
	cuo.mutation.ResetBatteryNum()
	cuo.mutation.SetBatteryNum(i)
	return cuo
}

// SetNillableBatteryNum sets the "battery_num" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableBatteryNum(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetBatteryNum(*i)
	}
	return cuo
}

// AddBatteryNum adds i to the "battery_num" field.
func (cuo *CabinetUpdateOne) AddBatteryNum(i int) *CabinetUpdateOne {
	cuo.mutation.AddBatteryNum(i)
	return cuo
}

// SetBatteryFullNum sets the "battery_full_num" field.
func (cuo *CabinetUpdateOne) SetBatteryFullNum(i int) *CabinetUpdateOne {
	cuo.mutation.ResetBatteryFullNum()
	cuo.mutation.SetBatteryFullNum(i)
	return cuo
}

// SetNillableBatteryFullNum sets the "battery_full_num" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableBatteryFullNum(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetBatteryFullNum(*i)
	}
	return cuo
}

// AddBatteryFullNum adds i to the "battery_full_num" field.
func (cuo *CabinetUpdateOne) AddBatteryFullNum(i int) *CabinetUpdateOne {
	cuo.mutation.AddBatteryFullNum(i)
	return cuo
}

// SetBatteryChargingNum sets the "battery_charging_num" field.
func (cuo *CabinetUpdateOne) SetBatteryChargingNum(i int) *CabinetUpdateOne {
	cuo.mutation.ResetBatteryChargingNum()
	cuo.mutation.SetBatteryChargingNum(i)
	return cuo
}

// SetNillableBatteryChargingNum sets the "battery_charging_num" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableBatteryChargingNum(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetBatteryChargingNum(*i)
	}
	return cuo
}

// AddBatteryChargingNum adds i to the "battery_charging_num" field.
func (cuo *CabinetUpdateOne) AddBatteryChargingNum(i int) *CabinetUpdateOne {
	cuo.mutation.AddBatteryChargingNum(i)
	return cuo
}

// SetEmptyBinNum sets the "empty_bin_num" field.
func (cuo *CabinetUpdateOne) SetEmptyBinNum(i int) *CabinetUpdateOne {
	cuo.mutation.ResetEmptyBinNum()
	cuo.mutation.SetEmptyBinNum(i)
	return cuo
}

// SetNillableEmptyBinNum sets the "empty_bin_num" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableEmptyBinNum(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetEmptyBinNum(*i)
	}
	return cuo
}

// AddEmptyBinNum adds i to the "empty_bin_num" field.
func (cuo *CabinetUpdateOne) AddEmptyBinNum(i int) *CabinetUpdateOne {
	cuo.mutation.AddEmptyBinNum(i)
	return cuo
}

// SetLockedBinNum sets the "locked_bin_num" field.
func (cuo *CabinetUpdateOne) SetLockedBinNum(i int) *CabinetUpdateOne {
	cuo.mutation.ResetLockedBinNum()
	cuo.mutation.SetLockedBinNum(i)
	return cuo
}

// SetNillableLockedBinNum sets the "locked_bin_num" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableLockedBinNum(i *int) *CabinetUpdateOne {
	if i != nil {
		cuo.SetLockedBinNum(*i)
	}
	return cuo
}

// AddLockedBinNum adds i to the "locked_bin_num" field.
func (cuo *CabinetUpdateOne) AddLockedBinNum(i int) *CabinetUpdateOne {
	cuo.mutation.AddLockedBinNum(i)
	return cuo
}

// SetMaintenanceAt sets the "maintenance_at" field.
func (cuo *CabinetUpdateOne) SetMaintenanceAt(t time.Time) *CabinetUpdateOne {
	cuo.mutation.SetMaintenanceAt(t)
	return cuo
}

// SetNillableMaintenanceAt sets the "maintenance_at" field if the given value is not nil.
func (cuo *CabinetUpdateOne) SetNillableMaintenanceAt(t *time.Time) *CabinetUpdateOne {
	if t != nil {
		cuo.SetMaintenanceAt(*t)
	}
	return cuo
}

// ClearMaintenanceAt clears the value of the "maintenance_at" field.
func (cuo *CabinetUpdateOne) ClearMaintenanceAt() *CabinetUpdateOne {
	cuo.mutation.ClearMaintenanceAt()
	return cuo
}

// SetCity sets the "city" edge to the City entity.
func (cuo *CabinetUpdateOne) SetCity(c *City) *CabinetUpdateOne {
	return cuo.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (cuo *CabinetUpdateOne) SetStore(s *Store) *CabinetUpdateOne {
	return cuo.SetStoreID(s.ID)
}

// SetMaintainer sets the "maintainer" edge to the Maintainer entity.
func (cuo *CabinetUpdateOne) SetMaintainer(m *Maintainer) *CabinetUpdateOne {
	return cuo.SetMaintainerID(m.ID)
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cuo *CabinetUpdateOne) SetBranch(b *Branch) *CabinetUpdateOne {
	return cuo.SetBranchID(b.ID)
}

// AddModelIDs adds the "models" edge to the BatteryModel entity by IDs.
func (cuo *CabinetUpdateOne) AddModelIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddModelIDs(ids...)
	return cuo
}

// AddModels adds the "models" edges to the BatteryModel entity.
func (cuo *CabinetUpdateOne) AddModels(b ...*BatteryModel) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddModelIDs(ids...)
}

// AddFaultIDs adds the "faults" edge to the CabinetFault entity by IDs.
func (cuo *CabinetUpdateOne) AddFaultIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddFaultIDs(ids...)
	return cuo
}

// AddFaults adds the "faults" edges to the CabinetFault entity.
func (cuo *CabinetUpdateOne) AddFaults(c ...*CabinetFault) *CabinetUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddFaultIDs(ids...)
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by IDs.
func (cuo *CabinetUpdateOne) AddExchangeIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddExchangeIDs(ids...)
	return cuo
}

// AddExchanges adds the "exchanges" edges to the Exchange entity.
func (cuo *CabinetUpdateOne) AddExchanges(e ...*Exchange) *CabinetUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExchangeIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (cuo *CabinetUpdateOne) AddStockIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddStockIDs(ids...)
	return cuo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (cuo *CabinetUpdateOne) AddStocks(s ...*Stock) *CabinetUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddStockIDs(ids...)
}

// AddBatteryIDs adds the "batteries" edge to the Battery entity by IDs.
func (cuo *CabinetUpdateOne) AddBatteryIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddBatteryIDs(ids...)
	return cuo
}

// AddBatteries adds the "batteries" edges to the Battery entity.
func (cuo *CabinetUpdateOne) AddBatteries(b ...*Battery) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBatteryIDs(ids...)
}

// AddBatteryFlowIDs adds the "battery_flows" edge to the BatteryFlow entity by IDs.
func (cuo *CabinetUpdateOne) AddBatteryFlowIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.AddBatteryFlowIDs(ids...)
	return cuo
}

// AddBatteryFlows adds the "battery_flows" edges to the BatteryFlow entity.
func (cuo *CabinetUpdateOne) AddBatteryFlows(b ...*BatteryFlow) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBatteryFlowIDs(ids...)
}

// SetStation sets the "station" edge to the EnterpriseStation entity.
func (cuo *CabinetUpdateOne) SetStation(e *EnterpriseStation) *CabinetUpdateOne {
	return cuo.SetStationID(e.ID)
}

// SetEnterprise sets the "enterprise" edge to the Enterprise entity.
func (cuo *CabinetUpdateOne) SetEnterprise(e *Enterprise) *CabinetUpdateOne {
	return cuo.SetEnterpriseID(e.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cuo *CabinetUpdateOne) Mutation() *CabinetMutation {
	return cuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (cuo *CabinetUpdateOne) ClearCity() *CabinetUpdateOne {
	cuo.mutation.ClearCity()
	return cuo
}

// ClearStore clears the "store" edge to the Store entity.
func (cuo *CabinetUpdateOne) ClearStore() *CabinetUpdateOne {
	cuo.mutation.ClearStore()
	return cuo
}

// ClearMaintainer clears the "maintainer" edge to the Maintainer entity.
func (cuo *CabinetUpdateOne) ClearMaintainer() *CabinetUpdateOne {
	cuo.mutation.ClearMaintainer()
	return cuo
}

// ClearBranch clears the "branch" edge to the Branch entity.
func (cuo *CabinetUpdateOne) ClearBranch() *CabinetUpdateOne {
	cuo.mutation.ClearBranch()
	return cuo
}

// ClearModels clears all "models" edges to the BatteryModel entity.
func (cuo *CabinetUpdateOne) ClearModels() *CabinetUpdateOne {
	cuo.mutation.ClearModels()
	return cuo
}

// RemoveModelIDs removes the "models" edge to BatteryModel entities by IDs.
func (cuo *CabinetUpdateOne) RemoveModelIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveModelIDs(ids...)
	return cuo
}

// RemoveModels removes "models" edges to BatteryModel entities.
func (cuo *CabinetUpdateOne) RemoveModels(b ...*BatteryModel) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveModelIDs(ids...)
}

// ClearFaults clears all "faults" edges to the CabinetFault entity.
func (cuo *CabinetUpdateOne) ClearFaults() *CabinetUpdateOne {
	cuo.mutation.ClearFaults()
	return cuo
}

// RemoveFaultIDs removes the "faults" edge to CabinetFault entities by IDs.
func (cuo *CabinetUpdateOne) RemoveFaultIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveFaultIDs(ids...)
	return cuo
}

// RemoveFaults removes "faults" edges to CabinetFault entities.
func (cuo *CabinetUpdateOne) RemoveFaults(c ...*CabinetFault) *CabinetUpdateOne {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveFaultIDs(ids...)
}

// ClearExchanges clears all "exchanges" edges to the Exchange entity.
func (cuo *CabinetUpdateOne) ClearExchanges() *CabinetUpdateOne {
	cuo.mutation.ClearExchanges()
	return cuo
}

// RemoveExchangeIDs removes the "exchanges" edge to Exchange entities by IDs.
func (cuo *CabinetUpdateOne) RemoveExchangeIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveExchangeIDs(ids...)
	return cuo
}

// RemoveExchanges removes "exchanges" edges to Exchange entities.
func (cuo *CabinetUpdateOne) RemoveExchanges(e ...*Exchange) *CabinetUpdateOne {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExchangeIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (cuo *CabinetUpdateOne) ClearStocks() *CabinetUpdateOne {
	cuo.mutation.ClearStocks()
	return cuo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (cuo *CabinetUpdateOne) RemoveStockIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveStockIDs(ids...)
	return cuo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (cuo *CabinetUpdateOne) RemoveStocks(s ...*Stock) *CabinetUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveStockIDs(ids...)
}

// ClearBatteries clears all "batteries" edges to the Battery entity.
func (cuo *CabinetUpdateOne) ClearBatteries() *CabinetUpdateOne {
	cuo.mutation.ClearBatteries()
	return cuo
}

// RemoveBatteryIDs removes the "batteries" edge to Battery entities by IDs.
func (cuo *CabinetUpdateOne) RemoveBatteryIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveBatteryIDs(ids...)
	return cuo
}

// RemoveBatteries removes "batteries" edges to Battery entities.
func (cuo *CabinetUpdateOne) RemoveBatteries(b ...*Battery) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBatteryIDs(ids...)
}

// ClearBatteryFlows clears all "battery_flows" edges to the BatteryFlow entity.
func (cuo *CabinetUpdateOne) ClearBatteryFlows() *CabinetUpdateOne {
	cuo.mutation.ClearBatteryFlows()
	return cuo
}

// RemoveBatteryFlowIDs removes the "battery_flows" edge to BatteryFlow entities by IDs.
func (cuo *CabinetUpdateOne) RemoveBatteryFlowIDs(ids ...uint64) *CabinetUpdateOne {
	cuo.mutation.RemoveBatteryFlowIDs(ids...)
	return cuo
}

// RemoveBatteryFlows removes "battery_flows" edges to BatteryFlow entities.
func (cuo *CabinetUpdateOne) RemoveBatteryFlows(b ...*BatteryFlow) *CabinetUpdateOne {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBatteryFlowIDs(ids...)
}

// ClearStation clears the "station" edge to the EnterpriseStation entity.
func (cuo *CabinetUpdateOne) ClearStation() *CabinetUpdateOne {
	cuo.mutation.ClearStation()
	return cuo
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (cuo *CabinetUpdateOne) ClearEnterprise() *CabinetUpdateOne {
	cuo.mutation.ClearEnterprise()
	return cuo
}

// Where appends a list predicates to the CabinetUpdate builder.
func (cuo *CabinetUpdateOne) Where(ps ...predicate.Cabinet) *CabinetUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CabinetUpdateOne) Select(field string, fields ...string) *CabinetUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cabinet entity.
func (cuo *CabinetUpdateOne) Save(ctx context.Context) (*Cabinet, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CabinetUpdateOne) SaveX(ctx context.Context) *Cabinet {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CabinetUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CabinetUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CabinetUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if cabinet.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized cabinet.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := cabinet.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CabinetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CabinetUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CabinetUpdateOne) sqlSave(ctx context.Context) (_node *Cabinet, err error) {
	_spec := sqlgraph.NewUpdateSpec(cabinet.Table, cabinet.Columns, sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cabinet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cabinet.FieldID)
		for _, f := range fields {
			if !cabinet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cabinet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(cabinet.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(cabinet.FieldDeletedAt, field.TypeTime)
	}
	if cuo.mutation.CreatorCleared() {
		_spec.ClearField(cabinet.FieldCreator, field.TypeJSON)
	}
	if value, ok := cuo.mutation.LastModifier(); ok {
		_spec.SetField(cabinet.FieldLastModifier, field.TypeJSON, value)
	}
	if cuo.mutation.LastModifierCleared() {
		_spec.ClearField(cabinet.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.SetField(cabinet.FieldRemark, field.TypeString, value)
	}
	if cuo.mutation.RemarkCleared() {
		_spec.ClearField(cabinet.FieldRemark, field.TypeString)
	}
	if value, ok := cuo.mutation.Sn(); ok {
		_spec.SetField(cabinet.FieldSn, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Brand(); ok {
		_spec.SetField(cabinet.FieldBrand, field.TypeOther, value)
	}
	if value, ok := cuo.mutation.Serial(); ok {
		_spec.SetField(cabinet.FieldSerial, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cabinet.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Doors(); ok {
		_spec.SetField(cabinet.FieldDoors, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDoors(); ok {
		_spec.AddField(cabinet.FieldDoors, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(cabinet.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(cabinet.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.Lng(); ok {
		_spec.SetField(cabinet.FieldLng, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLng(); ok {
		_spec.AddField(cabinet.FieldLng, field.TypeFloat64, value)
	}
	if cuo.mutation.LngCleared() {
		_spec.ClearField(cabinet.FieldLng, field.TypeFloat64)
	}
	if value, ok := cuo.mutation.Lat(); ok {
		_spec.SetField(cabinet.FieldLat, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedLat(); ok {
		_spec.AddField(cabinet.FieldLat, field.TypeFloat64, value)
	}
	if cuo.mutation.LatCleared() {
		_spec.ClearField(cabinet.FieldLat, field.TypeFloat64)
	}
	if value, ok := cuo.mutation.Geom(); ok {
		_spec.SetField(cabinet.FieldGeom, field.TypeOther, value)
	}
	if cuo.mutation.GeomCleared() {
		_spec.ClearField(cabinet.FieldGeom, field.TypeOther)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(cabinet.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(cabinet.FieldAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.SimSn(); ok {
		_spec.SetField(cabinet.FieldSimSn, field.TypeString, value)
	}
	if cuo.mutation.SimSnCleared() {
		_spec.ClearField(cabinet.FieldSimSn, field.TypeString)
	}
	if value, ok := cuo.mutation.SimDate(); ok {
		_spec.SetField(cabinet.FieldSimDate, field.TypeTime, value)
	}
	if cuo.mutation.SimDateCleared() {
		_spec.ClearField(cabinet.FieldSimDate, field.TypeTime)
	}
	if value, ok := cuo.mutation.Transferred(); ok {
		_spec.SetField(cabinet.FieldTransferred, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Intelligent(); ok {
		_spec.SetField(cabinet.FieldIntelligent, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Health(); ok {
		_spec.SetField(cabinet.FieldHealth, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedHealth(); ok {
		_spec.AddField(cabinet.FieldHealth, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.Bin(); ok {
		_spec.SetField(cabinet.FieldBin, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedBin(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cabinet.FieldBin, value)
		})
	}
	if cuo.mutation.BinCleared() {
		_spec.ClearField(cabinet.FieldBin, field.TypeJSON)
	}
	if value, ok := cuo.mutation.BatteryNum(); ok {
		_spec.SetField(cabinet.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedBatteryNum(); ok {
		_spec.AddField(cabinet.FieldBatteryNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.BatteryFullNum(); ok {
		_spec.SetField(cabinet.FieldBatteryFullNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedBatteryFullNum(); ok {
		_spec.AddField(cabinet.FieldBatteryFullNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.BatteryChargingNum(); ok {
		_spec.SetField(cabinet.FieldBatteryChargingNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedBatteryChargingNum(); ok {
		_spec.AddField(cabinet.FieldBatteryChargingNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.EmptyBinNum(); ok {
		_spec.SetField(cabinet.FieldEmptyBinNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedEmptyBinNum(); ok {
		_spec.AddField(cabinet.FieldEmptyBinNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.LockedBinNum(); ok {
		_spec.SetField(cabinet.FieldLockedBinNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedLockedBinNum(); ok {
		_spec.AddField(cabinet.FieldLockedBinNum, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MaintenanceAt(); ok {
		_spec.SetField(cabinet.FieldMaintenanceAt, field.TypeTime, value)
	}
	if cuo.mutation.MaintenanceAtCleared() {
		_spec.ClearField(cabinet.FieldMaintenanceAt, field.TypeTime)
	}
	if cuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.CityTable,
			Columns: []string{cabinet.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.StoreTable,
			Columns: []string{cabinet.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.StoreTable,
			Columns: []string{cabinet.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.MaintainerTable,
			Columns: []string{cabinet.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cabinet.MaintainerTable,
			Columns: []string{cabinet.MaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BranchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedModelsIDs(); len(nodes) > 0 && !cuo.mutation.ModelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ModelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cabinet.ModelsTable,
			Columns: cabinet.ModelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterymodel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFaultsIDs(); len(nodes) > 0 && !cuo.mutation.FaultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FaultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.FaultsTable,
			Columns: []string{cabinet.FaultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinetfault.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExchangesIDs(); len(nodes) > 0 && !cuo.mutation.ExchangesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExchangesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.ExchangesTable,
			Columns: []string{cabinet.ExchangesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exchange.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !cuo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.StocksTable,
			Columns: []string{cabinet.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stock.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BatteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBatteriesIDs(); len(nodes) > 0 && !cuo.mutation.BatteriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BatteriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteriesTable,
			Columns: []string{cabinet.BatteriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(battery.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BatteryFlowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBatteryFlowsIDs(); len(nodes) > 0 && !cuo.mutation.BatteryFlowsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BatteryFlowsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BatteryFlowsTable,
			Columns: []string{cabinet.BatteryFlowsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.StationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.StationTable,
			Columns: []string{cabinet.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.StationTable,
			Columns: []string{cabinet.StationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EnterpriseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.EnterpriseTable,
			Columns: []string{cabinet.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EnterpriseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.EnterpriseTable,
			Columns: []string{cabinet.EnterpriseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Cabinet{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cabinet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
