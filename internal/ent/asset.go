// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/material"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// Asset is the model entity for the Asset schema.
type Asset struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// BrandID holds the value of the "brand_id" field.
	BrandID *uint64 `json:"brand_id,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID *uint64 `json:"model_id,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 物资ID
	MaterialID *uint64 `json:"material_id,omitempty"`
	// 资产类型 1:电车 2:智能电池 3:非智能电池 4:电柜配件 5:电车配件 6:其它
	Type uint8 `json:"type,omitempty"`
	// 资产名称
	Name string `json:"name,omitempty"`
	// 资产编号
	Sn string `json:"sn,omitempty"`
	// 资产状态 0:待入库 1:库存中 2:配送中 3:使用中 4:故障 5:报废
	Status uint8 `json:"status,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 资产位置类型 1:仓库 2:门店 3:站点 4:运维 5:电柜 6:骑手
	LocationsType uint8 `json:"locations_type,omitempty"`
	// 资产位置ID
	LocationsID uint64 `json:"locations_id,omitempty"`
	// 以租代购骑手ID，生成后禁止修改
	RtoRiderID *uint64 `json:"rto_rider_id,omitempty"`
	// 盘点时间
	InventoryAt time.Time `json:"inventory_at,omitempty"`
	// 品牌名称
	BrandName string `json:"brand_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetQuery when eager-loading is set.
	Edges        AssetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetEdges holds the relations/edges for other nodes in the graph.
type AssetEdges struct {
	// Brand holds the value of the brand edge.
	Brand *EbikeBrand `json:"brand,omitempty"`
	// Model holds the value of the model edge.
	Model *BatteryModel `json:"model,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Material holds the value of the material edge.
	Material *Material `json:"material,omitempty"`
	// Values holds the value of the values edge.
	Values []*AssetAttributeValues `json:"values,omitempty"`
	// Warehouse holds the value of the warehouse edge.
	Warehouse *Warehouse `json:"warehouse,omitempty"`
	// Store holds the value of the store edge.
	Store *Store `json:"store,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Station holds the value of the station edge.
	Station *EnterpriseStation `json:"station,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Operator holds the value of the operator edge.
	Operator *Maintainer `json:"operator,omitempty"`
	// ScrapDetails holds the value of the scrap_details edge.
	ScrapDetails []*AssetScrapDetails `json:"scrap_details,omitempty"`
	// TransferDetails holds the value of the transfer_details edge.
	TransferDetails []*AssetTransferDetails `json:"transfer_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) BrandOrErr() (*EbikeBrand, error) {
	if e.Brand != nil {
		return e.Brand, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ebikebrand.Label}
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) ModelOrErr() (*BatteryModel, error) {
	if e.Model != nil {
		return e.Model, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: batterymodel.Label}
	}
	return nil, &NotLoadedError{edge: "model"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) CityOrErr() (*City, error) {
	if e.City != nil {
		return e.City, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: city.Label}
	}
	return nil, &NotLoadedError{edge: "city"}
}

// MaterialOrErr returns the Material value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) MaterialOrErr() (*Material, error) {
	if e.Material != nil {
		return e.Material, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: material.Label}
	}
	return nil, &NotLoadedError{edge: "material"}
}

// ValuesOrErr returns the Values value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ValuesOrErr() ([]*AssetAttributeValues, error) {
	if e.loadedTypes[4] {
		return e.Values, nil
	}
	return nil, &NotLoadedError{edge: "values"}
}

// WarehouseOrErr returns the Warehouse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) WarehouseOrErr() (*Warehouse, error) {
	if e.Warehouse != nil {
		return e.Warehouse, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: warehouse.Label}
	}
	return nil, &NotLoadedError{edge: "warehouse"}
}

// StoreOrErr returns the Store value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) StoreOrErr() (*Store, error) {
	if e.Store != nil {
		return e.Store, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: store.Label}
	}
	return nil, &NotLoadedError{edge: "store"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) CabinetOrErr() (*Cabinet, error) {
	if e.Cabinet != nil {
		return e.Cabinet, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: cabinet.Label}
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// StationOrErr returns the Station value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) StationOrErr() (*EnterpriseStation, error) {
	if e.Station != nil {
		return e.Station, nil
	} else if e.loadedTypes[8] {
		return nil, &NotFoundError{label: enterprisestation.Label}
	}
	return nil, &NotLoadedError{edge: "station"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) RiderOrErr() (*Rider, error) {
	if e.Rider != nil {
		return e.Rider, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: rider.Label}
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// OperatorOrErr returns the Operator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetEdges) OperatorOrErr() (*Maintainer, error) {
	if e.Operator != nil {
		return e.Operator, nil
	} else if e.loadedTypes[10] {
		return nil, &NotFoundError{label: maintainer.Label}
	}
	return nil, &NotLoadedError{edge: "operator"}
}

// ScrapDetailsOrErr returns the ScrapDetails value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) ScrapDetailsOrErr() ([]*AssetScrapDetails, error) {
	if e.loadedTypes[11] {
		return e.ScrapDetails, nil
	}
	return nil, &NotLoadedError{edge: "scrap_details"}
}

// TransferDetailsOrErr returns the TransferDetails value or an error if the edge
// was not loaded in eager-loading.
func (e AssetEdges) TransferDetailsOrErr() ([]*AssetTransferDetails, error) {
	if e.loadedTypes[12] {
		return e.TransferDetails, nil
	}
	return nil, &NotLoadedError{edge: "transfer_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Asset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case asset.FieldCreator, asset.FieldLastModifier:
			values[i] = new([]byte)
		case asset.FieldEnable:
			values[i] = new(sql.NullBool)
		case asset.FieldID, asset.FieldBrandID, asset.FieldModelID, asset.FieldCityID, asset.FieldMaterialID, asset.FieldType, asset.FieldStatus, asset.FieldLocationsType, asset.FieldLocationsID, asset.FieldRtoRiderID:
			values[i] = new(sql.NullInt64)
		case asset.FieldRemark, asset.FieldName, asset.FieldSn, asset.FieldBrandName:
			values[i] = new(sql.NullString)
		case asset.FieldCreatedAt, asset.FieldUpdatedAt, asset.FieldDeletedAt, asset.FieldInventoryAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Asset fields.
func (a *Asset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case asset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = uint64(value.Int64)
		case asset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case asset.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case asset.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = new(time.Time)
				*a.DeletedAt = value.Time
			}
		case asset.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case asset.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case asset.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				a.Remark = value.String
			}
		case asset.FieldBrandID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field brand_id", values[i])
			} else if value.Valid {
				a.BrandID = new(uint64)
				*a.BrandID = uint64(value.Int64)
			}
		case asset.FieldModelID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value.Valid {
				a.ModelID = new(uint64)
				*a.ModelID = uint64(value.Int64)
			}
		case asset.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				a.CityID = new(uint64)
				*a.CityID = uint64(value.Int64)
			}
		case asset.FieldMaterialID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field material_id", values[i])
			} else if value.Valid {
				a.MaterialID = new(uint64)
				*a.MaterialID = uint64(value.Int64)
			}
		case asset.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				a.Type = uint8(value.Int64)
			}
		case asset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case asset.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				a.Sn = value.String
			}
		case asset.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = uint8(value.Int64)
			}
		case asset.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				a.Enable = value.Bool
			}
		case asset.FieldLocationsType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locations_type", values[i])
			} else if value.Valid {
				a.LocationsType = uint8(value.Int64)
			}
		case asset.FieldLocationsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locations_id", values[i])
			} else if value.Valid {
				a.LocationsID = uint64(value.Int64)
			}
		case asset.FieldRtoRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rto_rider_id", values[i])
			} else if value.Valid {
				a.RtoRiderID = new(uint64)
				*a.RtoRiderID = uint64(value.Int64)
			}
		case asset.FieldInventoryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field inventory_at", values[i])
			} else if value.Valid {
				a.InventoryAt = value.Time
			}
		case asset.FieldBrandName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand_name", values[i])
			} else if value.Valid {
				a.BrandName = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Asset.
// This includes values selected through modifiers, order, etc.
func (a *Asset) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryBrand queries the "brand" edge of the Asset entity.
func (a *Asset) QueryBrand() *EbikeBrandQuery {
	return NewAssetClient(a.config).QueryBrand(a)
}

// QueryModel queries the "model" edge of the Asset entity.
func (a *Asset) QueryModel() *BatteryModelQuery {
	return NewAssetClient(a.config).QueryModel(a)
}

// QueryCity queries the "city" edge of the Asset entity.
func (a *Asset) QueryCity() *CityQuery {
	return NewAssetClient(a.config).QueryCity(a)
}

// QueryMaterial queries the "material" edge of the Asset entity.
func (a *Asset) QueryMaterial() *MaterialQuery {
	return NewAssetClient(a.config).QueryMaterial(a)
}

// QueryValues queries the "values" edge of the Asset entity.
func (a *Asset) QueryValues() *AssetAttributeValuesQuery {
	return NewAssetClient(a.config).QueryValues(a)
}

// QueryWarehouse queries the "warehouse" edge of the Asset entity.
func (a *Asset) QueryWarehouse() *WarehouseQuery {
	return NewAssetClient(a.config).QueryWarehouse(a)
}

// QueryStore queries the "store" edge of the Asset entity.
func (a *Asset) QueryStore() *StoreQuery {
	return NewAssetClient(a.config).QueryStore(a)
}

// QueryCabinet queries the "cabinet" edge of the Asset entity.
func (a *Asset) QueryCabinet() *CabinetQuery {
	return NewAssetClient(a.config).QueryCabinet(a)
}

// QueryStation queries the "station" edge of the Asset entity.
func (a *Asset) QueryStation() *EnterpriseStationQuery {
	return NewAssetClient(a.config).QueryStation(a)
}

// QueryRider queries the "rider" edge of the Asset entity.
func (a *Asset) QueryRider() *RiderQuery {
	return NewAssetClient(a.config).QueryRider(a)
}

// QueryOperator queries the "operator" edge of the Asset entity.
func (a *Asset) QueryOperator() *MaintainerQuery {
	return NewAssetClient(a.config).QueryOperator(a)
}

// QueryScrapDetails queries the "scrap_details" edge of the Asset entity.
func (a *Asset) QueryScrapDetails() *AssetScrapDetailsQuery {
	return NewAssetClient(a.config).QueryScrapDetails(a)
}

// QueryTransferDetails queries the "transfer_details" edge of the Asset entity.
func (a *Asset) QueryTransferDetails() *AssetTransferDetailsQuery {
	return NewAssetClient(a.config).QueryTransferDetails(a)
}

// Update returns a builder for updating this Asset.
// Note that you need to call Asset.Unwrap() before calling this method if this Asset
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Asset) Update() *AssetUpdateOne {
	return NewAssetClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Asset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Asset) Unwrap() *Asset {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Asset is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Asset) String() string {
	var builder strings.Builder
	builder.WriteString("Asset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := a.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", a.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", a.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(a.Remark)
	builder.WriteString(", ")
	if v := a.BrandID; v != nil {
		builder.WriteString("brand_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.ModelID; v != nil {
		builder.WriteString("model_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := a.MaterialID; v != nil {
		builder.WriteString("material_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", a.Type))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(a.Sn)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", a.Enable))
	builder.WriteString(", ")
	builder.WriteString("locations_type=")
	builder.WriteString(fmt.Sprintf("%v", a.LocationsType))
	builder.WriteString(", ")
	builder.WriteString("locations_id=")
	builder.WriteString(fmt.Sprintf("%v", a.LocationsID))
	builder.WriteString(", ")
	if v := a.RtoRiderID; v != nil {
		builder.WriteString("rto_rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("inventory_at=")
	builder.WriteString(a.InventoryAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("brand_name=")
	builder.WriteString(a.BrandName)
	builder.WriteByte(')')
	return builder.String()
}

// Assets is a parsable slice of Asset.
type Assets []*Asset
