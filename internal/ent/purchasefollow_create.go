// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/purchasefollow"
	"github.com/auroraride/aurservd/internal/ent/purchaseorder"
)

// PurchaseFollowCreate is the builder for creating a PurchaseFollow entity.
type PurchaseFollowCreate struct {
	config
	mutation *PurchaseFollowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pfc *PurchaseFollowCreate) SetCreatedAt(t time.Time) *PurchaseFollowCreate {
	pfc.mutation.SetCreatedAt(t)
	return pfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pfc *PurchaseFollowCreate) SetNillableCreatedAt(t *time.Time) *PurchaseFollowCreate {
	if t != nil {
		pfc.SetCreatedAt(*t)
	}
	return pfc
}

// SetUpdatedAt sets the "updated_at" field.
func (pfc *PurchaseFollowCreate) SetUpdatedAt(t time.Time) *PurchaseFollowCreate {
	pfc.mutation.SetUpdatedAt(t)
	return pfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pfc *PurchaseFollowCreate) SetNillableUpdatedAt(t *time.Time) *PurchaseFollowCreate {
	if t != nil {
		pfc.SetUpdatedAt(*t)
	}
	return pfc
}

// SetDeletedAt sets the "deleted_at" field.
func (pfc *PurchaseFollowCreate) SetDeletedAt(t time.Time) *PurchaseFollowCreate {
	pfc.mutation.SetDeletedAt(t)
	return pfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pfc *PurchaseFollowCreate) SetNillableDeletedAt(t *time.Time) *PurchaseFollowCreate {
	if t != nil {
		pfc.SetDeletedAt(*t)
	}
	return pfc
}

// SetCreator sets the "creator" field.
func (pfc *PurchaseFollowCreate) SetCreator(m *model.Modifier) *PurchaseFollowCreate {
	pfc.mutation.SetCreator(m)
	return pfc
}

// SetLastModifier sets the "last_modifier" field.
func (pfc *PurchaseFollowCreate) SetLastModifier(m *model.Modifier) *PurchaseFollowCreate {
	pfc.mutation.SetLastModifier(m)
	return pfc
}

// SetRemark sets the "remark" field.
func (pfc *PurchaseFollowCreate) SetRemark(s string) *PurchaseFollowCreate {
	pfc.mutation.SetRemark(s)
	return pfc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pfc *PurchaseFollowCreate) SetNillableRemark(s *string) *PurchaseFollowCreate {
	if s != nil {
		pfc.SetRemark(*s)
	}
	return pfc
}

// SetContent sets the "content" field.
func (pfc *PurchaseFollowCreate) SetContent(s string) *PurchaseFollowCreate {
	pfc.mutation.SetContent(s)
	return pfc
}

// SetPics sets the "pics" field.
func (pfc *PurchaseFollowCreate) SetPics(s []string) *PurchaseFollowCreate {
	pfc.mutation.SetPics(s)
	return pfc
}

// SetOrderID sets the "order_id" field.
func (pfc *PurchaseFollowCreate) SetOrderID(u uint64) *PurchaseFollowCreate {
	pfc.mutation.SetOrderID(u)
	return pfc
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (pfc *PurchaseFollowCreate) SetNillableOrderID(u *uint64) *PurchaseFollowCreate {
	if u != nil {
		pfc.SetOrderID(*u)
	}
	return pfc
}

// SetOrder sets the "order" edge to the PurchaseOrder entity.
func (pfc *PurchaseFollowCreate) SetOrder(p *PurchaseOrder) *PurchaseFollowCreate {
	return pfc.SetOrderID(p.ID)
}

// Mutation returns the PurchaseFollowMutation object of the builder.
func (pfc *PurchaseFollowCreate) Mutation() *PurchaseFollowMutation {
	return pfc.mutation
}

// Save creates the PurchaseFollow in the database.
func (pfc *PurchaseFollowCreate) Save(ctx context.Context) (*PurchaseFollow, error) {
	if err := pfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pfc.sqlSave, pfc.mutation, pfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pfc *PurchaseFollowCreate) SaveX(ctx context.Context) *PurchaseFollow {
	v, err := pfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfc *PurchaseFollowCreate) Exec(ctx context.Context) error {
	_, err := pfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfc *PurchaseFollowCreate) ExecX(ctx context.Context) {
	if err := pfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pfc *PurchaseFollowCreate) defaults() error {
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		if purchasefollow.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasefollow.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := purchasefollow.DefaultCreatedAt()
		pfc.mutation.SetCreatedAt(v)
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		if purchasefollow.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized purchasefollow.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := purchasefollow.DefaultUpdatedAt()
		pfc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pfc *PurchaseFollowCreate) check() error {
	if _, ok := pfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PurchaseFollow.created_at"`)}
	}
	if _, ok := pfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PurchaseFollow.updated_at"`)}
	}
	if _, ok := pfc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PurchaseFollow.content"`)}
	}
	if _, ok := pfc.mutation.Pics(); !ok {
		return &ValidationError{Name: "pics", err: errors.New(`ent: missing required field "PurchaseFollow.pics"`)}
	}
	return nil
}

func (pfc *PurchaseFollowCreate) sqlSave(ctx context.Context) (*PurchaseFollow, error) {
	if err := pfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pfc.mutation.id = &_node.ID
	pfc.mutation.done = true
	return _node, nil
}

func (pfc *PurchaseFollowCreate) createSpec() (*PurchaseFollow, *sqlgraph.CreateSpec) {
	var (
		_node = &PurchaseFollow{config: pfc.config}
		_spec = sqlgraph.NewCreateSpec(purchasefollow.Table, sqlgraph.NewFieldSpec(purchasefollow.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pfc.conflict
	if value, ok := pfc.mutation.CreatedAt(); ok {
		_spec.SetField(purchasefollow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pfc.mutation.UpdatedAt(); ok {
		_spec.SetField(purchasefollow.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pfc.mutation.DeletedAt(); ok {
		_spec.SetField(purchasefollow.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pfc.mutation.Creator(); ok {
		_spec.SetField(purchasefollow.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pfc.mutation.LastModifier(); ok {
		_spec.SetField(purchasefollow.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pfc.mutation.Remark(); ok {
		_spec.SetField(purchasefollow.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pfc.mutation.Content(); ok {
		_spec.SetField(purchasefollow.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pfc.mutation.Pics(); ok {
		_spec.SetField(purchasefollow.FieldPics, field.TypeJSON, value)
		_node.Pics = value
	}
	if nodes := pfc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   purchasefollow.OrderTable,
			Columns: []string{purchasefollow.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purchaseorder.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseFollow.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseFollowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pfc *PurchaseFollowCreate) OnConflict(opts ...sql.ConflictOption) *PurchaseFollowUpsertOne {
	pfc.conflict = opts
	return &PurchaseFollowUpsertOne{
		create: pfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfc *PurchaseFollowCreate) OnConflictColumns(columns ...string) *PurchaseFollowUpsertOne {
	pfc.conflict = append(pfc.conflict, sql.ConflictColumns(columns...))
	return &PurchaseFollowUpsertOne{
		create: pfc,
	}
}

type (
	// PurchaseFollowUpsertOne is the builder for "upsert"-ing
	//  one PurchaseFollow node.
	PurchaseFollowUpsertOne struct {
		create *PurchaseFollowCreate
	}

	// PurchaseFollowUpsert is the "OnConflict" setter.
	PurchaseFollowUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseFollowUpsert) SetUpdatedAt(v time.Time) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateUpdatedAt() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseFollowUpsert) SetDeletedAt(v time.Time) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateDeletedAt() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseFollowUpsert) ClearDeletedAt() *PurchaseFollowUpsert {
	u.SetNull(purchasefollow.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseFollowUpsert) SetLastModifier(v *model.Modifier) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateLastModifier() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseFollowUpsert) ClearLastModifier() *PurchaseFollowUpsert {
	u.SetNull(purchasefollow.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PurchaseFollowUpsert) SetRemark(v string) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateRemark() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseFollowUpsert) ClearRemark() *PurchaseFollowUpsert {
	u.SetNull(purchasefollow.FieldRemark)
	return u
}

// SetContent sets the "content" field.
func (u *PurchaseFollowUpsert) SetContent(v string) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateContent() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldContent)
	return u
}

// SetPics sets the "pics" field.
func (u *PurchaseFollowUpsert) SetPics(v []string) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldPics, v)
	return u
}

// UpdatePics sets the "pics" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdatePics() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldPics)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *PurchaseFollowUpsert) SetOrderID(v uint64) *PurchaseFollowUpsert {
	u.Set(purchasefollow.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchaseFollowUpsert) UpdateOrderID() *PurchaseFollowUpsert {
	u.SetExcluded(purchasefollow.FieldOrderID)
	return u
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PurchaseFollowUpsert) ClearOrderID() *PurchaseFollowUpsert {
	u.SetNull(purchasefollow.FieldOrderID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseFollowUpsertOne) UpdateNewValues() *PurchaseFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(purchasefollow.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(purchasefollow.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PurchaseFollowUpsertOne) Ignore() *PurchaseFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseFollowUpsertOne) DoNothing() *PurchaseFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseFollowCreate.OnConflict
// documentation for more info.
func (u *PurchaseFollowUpsertOne) Update(set func(*PurchaseFollowUpsert)) *PurchaseFollowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseFollowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseFollowUpsertOne) SetUpdatedAt(v time.Time) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateUpdatedAt() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseFollowUpsertOne) SetDeletedAt(v time.Time) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateDeletedAt() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseFollowUpsertOne) ClearDeletedAt() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseFollowUpsertOne) SetLastModifier(v *model.Modifier) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateLastModifier() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseFollowUpsertOne) ClearLastModifier() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseFollowUpsertOne) SetRemark(v string) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateRemark() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseFollowUpsertOne) ClearRemark() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearRemark()
	})
}

// SetContent sets the "content" field.
func (u *PurchaseFollowUpsertOne) SetContent(v string) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateContent() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateContent()
	})
}

// SetPics sets the "pics" field.
func (u *PurchaseFollowUpsertOne) SetPics(v []string) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetPics(v)
	})
}

// UpdatePics sets the "pics" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdatePics() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdatePics()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PurchaseFollowUpsertOne) SetOrderID(v uint64) *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchaseFollowUpsertOne) UpdateOrderID() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PurchaseFollowUpsertOne) ClearOrderID() *PurchaseFollowUpsertOne {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *PurchaseFollowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseFollowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseFollowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PurchaseFollowUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PurchaseFollowUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PurchaseFollowCreateBulk is the builder for creating many PurchaseFollow entities in bulk.
type PurchaseFollowCreateBulk struct {
	config
	err      error
	builders []*PurchaseFollowCreate
	conflict []sql.ConflictOption
}

// Save creates the PurchaseFollow entities in the database.
func (pfcb *PurchaseFollowCreateBulk) Save(ctx context.Context) ([]*PurchaseFollow, error) {
	if pfcb.err != nil {
		return nil, pfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pfcb.builders))
	nodes := make([]*PurchaseFollow, len(pfcb.builders))
	mutators := make([]Mutator, len(pfcb.builders))
	for i := range pfcb.builders {
		func(i int, root context.Context) {
			builder := pfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PurchaseFollowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pfcb *PurchaseFollowCreateBulk) SaveX(ctx context.Context) []*PurchaseFollow {
	v, err := pfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pfcb *PurchaseFollowCreateBulk) Exec(ctx context.Context) error {
	_, err := pfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pfcb *PurchaseFollowCreateBulk) ExecX(ctx context.Context) {
	if err := pfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PurchaseFollow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PurchaseFollowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pfcb *PurchaseFollowCreateBulk) OnConflict(opts ...sql.ConflictOption) *PurchaseFollowUpsertBulk {
	pfcb.conflict = opts
	return &PurchaseFollowUpsertBulk{
		create: pfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pfcb *PurchaseFollowCreateBulk) OnConflictColumns(columns ...string) *PurchaseFollowUpsertBulk {
	pfcb.conflict = append(pfcb.conflict, sql.ConflictColumns(columns...))
	return &PurchaseFollowUpsertBulk{
		create: pfcb,
	}
}

// PurchaseFollowUpsertBulk is the builder for "upsert"-ing
// a bulk of PurchaseFollow nodes.
type PurchaseFollowUpsertBulk struct {
	create *PurchaseFollowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PurchaseFollowUpsertBulk) UpdateNewValues() *PurchaseFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(purchasefollow.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(purchasefollow.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PurchaseFollow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PurchaseFollowUpsertBulk) Ignore() *PurchaseFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PurchaseFollowUpsertBulk) DoNothing() *PurchaseFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PurchaseFollowCreateBulk.OnConflict
// documentation for more info.
func (u *PurchaseFollowUpsertBulk) Update(set func(*PurchaseFollowUpsert)) *PurchaseFollowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PurchaseFollowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PurchaseFollowUpsertBulk) SetUpdatedAt(v time.Time) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateUpdatedAt() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PurchaseFollowUpsertBulk) SetDeletedAt(v time.Time) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateDeletedAt() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PurchaseFollowUpsertBulk) ClearDeletedAt() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PurchaseFollowUpsertBulk) SetLastModifier(v *model.Modifier) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateLastModifier() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PurchaseFollowUpsertBulk) ClearLastModifier() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PurchaseFollowUpsertBulk) SetRemark(v string) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateRemark() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PurchaseFollowUpsertBulk) ClearRemark() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearRemark()
	})
}

// SetContent sets the "content" field.
func (u *PurchaseFollowUpsertBulk) SetContent(v string) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateContent() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateContent()
	})
}

// SetPics sets the "pics" field.
func (u *PurchaseFollowUpsertBulk) SetPics(v []string) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetPics(v)
	})
}

// UpdatePics sets the "pics" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdatePics() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdatePics()
	})
}

// SetOrderID sets the "order_id" field.
func (u *PurchaseFollowUpsertBulk) SetOrderID(v uint64) *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *PurchaseFollowUpsertBulk) UpdateOrderID() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.UpdateOrderID()
	})
}

// ClearOrderID clears the value of the "order_id" field.
func (u *PurchaseFollowUpsertBulk) ClearOrderID() *PurchaseFollowUpsertBulk {
	return u.Update(func(s *PurchaseFollowUpsert) {
		s.ClearOrderID()
	})
}

// Exec executes the query.
func (u *PurchaseFollowUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PurchaseFollowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PurchaseFollowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PurchaseFollowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
