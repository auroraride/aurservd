// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks    []Hook
	mutation *ContractMutation
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContractUpdate) SetUpdatedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContractUpdate) SetDeletedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDeletedAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ContractUpdate) ClearDeletedAt() *ContractUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetLastModify sets the "last_modify" field.
func (cu *ContractUpdate) SetLastModify(t time.Time) *ContractUpdate {
	cu.mutation.SetLastModify(t)
	return cu
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableLastModify(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetLastModify(*t)
	}
	return cu
}

// ClearLastModify clears the value of the "last_modify" field.
func (cu *ContractUpdate) ClearLastModify() *ContractUpdate {
	cu.mutation.ClearLastModify()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *ContractUpdate) SetRemark(s string) *ContractUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableRemark(s *string) *ContractUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *ContractUpdate) ClearRemark() *ContractUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContractUpdate) SetStatus(u uint8) *ContractUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableStatus(u *uint8) *ContractUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *ContractUpdate) AddStatus(u int8) *ContractUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// SetRiderID sets the "rider_id" field.
func (cu *ContractUpdate) SetRiderID(u uint64) *ContractUpdate {
	cu.mutation.SetRiderID(u)
	return cu
}

// SetFlowID sets the "flow_id" field.
func (cu *ContractUpdate) SetFlowID(s string) *ContractUpdate {
	cu.mutation.SetFlowID(s)
	return cu
}

// SetSn sets the "sn" field.
func (cu *ContractUpdate) SetSn(s string) *ContractUpdate {
	cu.mutation.SetSn(s)
	return cu
}

// SetFiles sets the "files" field.
func (cu *ContractUpdate) SetFiles(s []string) *ContractUpdate {
	cu.mutation.SetFiles(s)
	return cu
}

// ClearFiles clears the value of the "files" field.
func (cu *ContractUpdate) ClearFiles() *ContractUpdate {
	cu.mutation.ClearFiles()
	return cu
}

// SetRider sets the "rider" edge to the Rider entity.
func (cu *ContractUpdate) SetRider(r *Rider) *ContractUpdate {
	return cu.SetRiderID(r.ID)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cu *ContractUpdate) ClearRider() *ContractUpdate {
	cu.mutation.ClearRider()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := contract.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContractUpdate) check() error {
	if v, ok := cu.mutation.FlowID(); ok {
		if err := contract.FlowIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_id", err: fmt.Errorf(`ent: validator failed for field "Contract.flow_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sn(); ok {
		if err := contract.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Contract.sn": %w`, err)}
		}
	}
	if _, ok := cu.mutation.RiderID(); cu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Contract.rider"`)
	}
	return nil
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: contract.FieldDeletedAt,
		})
	}
	if value, ok := cu.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldLastModify,
		})
	}
	if cu.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: contract.FieldLastModify,
		})
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldRemark,
		})
	}
	if cu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contract.FieldRemark,
		})
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if value, ok := cu.mutation.FlowID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldFlowID,
		})
	}
	if value, ok := cu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldSn,
		})
	}
	if value, ok := cu.mutation.Files(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: contract.FieldFiles,
		})
	}
	if cu.mutation.FilesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: contract.FieldFiles,
		})
	}
	if cu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContractMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContractUpdateOne) SetUpdatedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContractUpdateOne) SetDeletedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDeletedAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ContractUpdateOne) ClearDeletedAt() *ContractUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetLastModify sets the "last_modify" field.
func (cuo *ContractUpdateOne) SetLastModify(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetLastModify(t)
	return cuo
}

// SetNillableLastModify sets the "last_modify" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableLastModify(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetLastModify(*t)
	}
	return cuo
}

// ClearLastModify clears the value of the "last_modify" field.
func (cuo *ContractUpdateOne) ClearLastModify() *ContractUpdateOne {
	cuo.mutation.ClearLastModify()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *ContractUpdateOne) SetRemark(s string) *ContractUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableRemark(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *ContractUpdateOne) ClearRemark() *ContractUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContractUpdateOne) SetStatus(u uint8) *ContractUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableStatus(u *uint8) *ContractUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *ContractUpdateOne) AddStatus(u int8) *ContractUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// SetRiderID sets the "rider_id" field.
func (cuo *ContractUpdateOne) SetRiderID(u uint64) *ContractUpdateOne {
	cuo.mutation.SetRiderID(u)
	return cuo
}

// SetFlowID sets the "flow_id" field.
func (cuo *ContractUpdateOne) SetFlowID(s string) *ContractUpdateOne {
	cuo.mutation.SetFlowID(s)
	return cuo
}

// SetSn sets the "sn" field.
func (cuo *ContractUpdateOne) SetSn(s string) *ContractUpdateOne {
	cuo.mutation.SetSn(s)
	return cuo
}

// SetFiles sets the "files" field.
func (cuo *ContractUpdateOne) SetFiles(s []string) *ContractUpdateOne {
	cuo.mutation.SetFiles(s)
	return cuo
}

// ClearFiles clears the value of the "files" field.
func (cuo *ContractUpdateOne) ClearFiles() *ContractUpdateOne {
	cuo.mutation.ClearFiles()
	return cuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (cuo *ContractUpdateOne) SetRider(r *Rider) *ContractUpdateOne {
	return cuo.SetRiderID(r.ID)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cuo *ContractUpdateOne) ClearRider() *ContractUpdateOne {
	cuo.mutation.ClearRider()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	var (
		err  error
		node *Contract
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContractMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := contract.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContractUpdateOne) check() error {
	if v, ok := cuo.mutation.FlowID(); ok {
		if err := contract.FlowIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_id", err: fmt.Errorf(`ent: validator failed for field "Contract.flow_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sn(); ok {
		if err := contract.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Contract.sn": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.RiderID(); cuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Contract.rider"`)
	}
	return nil
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: contract.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: contract.FieldDeletedAt,
		})
	}
	if value, ok := cuo.mutation.LastModify(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: contract.FieldLastModify,
		})
	}
	if cuo.mutation.LastModifyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: contract.FieldLastModify,
		})
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldRemark,
		})
	}
	if cuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: contract.FieldRemark,
		})
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: contract.FieldStatus,
		})
	}
	if value, ok := cuo.mutation.FlowID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldFlowID,
		})
	}
	if value, ok := cuo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contract.FieldSn,
		})
	}
	if value, ok := cuo.mutation.Files(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: contract.FieldFiles,
		})
	}
	if cuo.mutation.FilesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: contract.FieldFiles,
		})
	}
	if cuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
