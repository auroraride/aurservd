// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/allocate"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// ContractUpdate is the builder for updating Contract entities.
type ContractUpdate struct {
	config
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContractUpdate builder.
func (cu *ContractUpdate) Where(ps ...predicate.Contract) *ContractUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContractUpdate) SetUpdatedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *ContractUpdate) SetDeletedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableDeletedAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *ContractUpdate) ClearDeletedAt() *ContractUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetLastModifier sets the "last_modifier" field.
func (cu *ContractUpdate) SetLastModifier(m *model.Modifier) *ContractUpdate {
	cu.mutation.SetLastModifier(m)
	return cu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cu *ContractUpdate) ClearLastModifier() *ContractUpdate {
	cu.mutation.ClearLastModifier()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *ContractUpdate) SetRemark(s string) *ContractUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableRemark(s *string) *ContractUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *ContractUpdate) ClearRemark() *ContractUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetSubscribeID sets the "subscribe_id" field.
func (cu *ContractUpdate) SetSubscribeID(u uint64) *ContractUpdate {
	cu.mutation.SetSubscribeID(u)
	return cu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableSubscribeID(u *uint64) *ContractUpdate {
	if u != nil {
		cu.SetSubscribeID(*u)
	}
	return cu
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (cu *ContractUpdate) ClearSubscribeID() *ContractUpdate {
	cu.mutation.ClearSubscribeID()
	return cu
}

// SetEmployeeID sets the "employee_id" field.
func (cu *ContractUpdate) SetEmployeeID(u uint64) *ContractUpdate {
	cu.mutation.SetEmployeeID(u)
	return cu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableEmployeeID(u *uint64) *ContractUpdate {
	if u != nil {
		cu.SetEmployeeID(*u)
	}
	return cu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (cu *ContractUpdate) ClearEmployeeID() *ContractUpdate {
	cu.mutation.ClearEmployeeID()
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContractUpdate) SetStatus(u uint8) *ContractUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableStatus(u *uint8) *ContractUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *ContractUpdate) AddStatus(u int8) *ContractUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// SetRiderID sets the "rider_id" field.
func (cu *ContractUpdate) SetRiderID(u uint64) *ContractUpdate {
	cu.mutation.SetRiderID(u)
	return cu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableRiderID(u *uint64) *ContractUpdate {
	if u != nil {
		cu.SetRiderID(*u)
	}
	return cu
}

// SetFlowID sets the "flow_id" field.
func (cu *ContractUpdate) SetFlowID(s string) *ContractUpdate {
	cu.mutation.SetFlowID(s)
	return cu
}

// SetNillableFlowID sets the "flow_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableFlowID(s *string) *ContractUpdate {
	if s != nil {
		cu.SetFlowID(*s)
	}
	return cu
}

// SetSn sets the "sn" field.
func (cu *ContractUpdate) SetSn(s string) *ContractUpdate {
	cu.mutation.SetSn(s)
	return cu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableSn(s *string) *ContractUpdate {
	if s != nil {
		cu.SetSn(*s)
	}
	return cu
}

// SetFiles sets the "files" field.
func (cu *ContractUpdate) SetFiles(s []string) *ContractUpdate {
	cu.mutation.SetFiles(s)
	return cu
}

// AppendFiles appends s to the "files" field.
func (cu *ContractUpdate) AppendFiles(s []string) *ContractUpdate {
	cu.mutation.AppendFiles(s)
	return cu
}

// ClearFiles clears the value of the "files" field.
func (cu *ContractUpdate) ClearFiles() *ContractUpdate {
	cu.mutation.ClearFiles()
	return cu
}

// SetEffective sets the "effective" field.
func (cu *ContractUpdate) SetEffective(b bool) *ContractUpdate {
	cu.mutation.SetEffective(b)
	return cu
}

// SetNillableEffective sets the "effective" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableEffective(b *bool) *ContractUpdate {
	if b != nil {
		cu.SetEffective(*b)
	}
	return cu
}

// SetRiderInfo sets the "rider_info" field.
func (cu *ContractUpdate) SetRiderInfo(mr *model.ContractRider) *ContractUpdate {
	cu.mutation.SetRiderInfo(mr)
	return cu
}

// ClearRiderInfo clears the value of the "rider_info" field.
func (cu *ContractUpdate) ClearRiderInfo() *ContractUpdate {
	cu.mutation.ClearRiderInfo()
	return cu
}

// SetAllocateID sets the "allocate_id" field.
func (cu *ContractUpdate) SetAllocateID(u uint64) *ContractUpdate {
	cu.mutation.SetAllocateID(u)
	return cu
}

// SetNillableAllocateID sets the "allocate_id" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableAllocateID(u *uint64) *ContractUpdate {
	if u != nil {
		cu.SetAllocateID(*u)
	}
	return cu
}

// ClearAllocateID clears the value of the "allocate_id" field.
func (cu *ContractUpdate) ClearAllocateID() *ContractUpdate {
	cu.mutation.ClearAllocateID()
	return cu
}

// SetLink sets the "link" field.
func (cu *ContractUpdate) SetLink(s string) *ContractUpdate {
	cu.mutation.SetLink(s)
	return cu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableLink(s *string) *ContractUpdate {
	if s != nil {
		cu.SetLink(*s)
	}
	return cu
}

// ClearLink clears the value of the "link" field.
func (cu *ContractUpdate) ClearLink() *ContractUpdate {
	cu.mutation.ClearLink()
	return cu
}

// SetExpiresAt sets the "expires_at" field.
func (cu *ContractUpdate) SetExpiresAt(t time.Time) *ContractUpdate {
	cu.mutation.SetExpiresAt(t)
	return cu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableExpiresAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetExpiresAt(*t)
	}
	return cu
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cu *ContractUpdate) ClearExpiresAt() *ContractUpdate {
	cu.mutation.ClearExpiresAt()
	return cu
}

// SetSignedAt sets the "signed_at" field.
func (cu *ContractUpdate) SetSignedAt(t time.Time) *ContractUpdate {
	cu.mutation.SetSignedAt(t)
	return cu
}

// SetNillableSignedAt sets the "signed_at" field if the given value is not nil.
func (cu *ContractUpdate) SetNillableSignedAt(t *time.Time) *ContractUpdate {
	if t != nil {
		cu.SetSignedAt(*t)
	}
	return cu
}

// ClearSignedAt clears the value of the "signed_at" field.
func (cu *ContractUpdate) ClearSignedAt() *ContractUpdate {
	cu.mutation.ClearSignedAt()
	return cu
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (cu *ContractUpdate) SetSubscribe(s *Subscribe) *ContractUpdate {
	return cu.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (cu *ContractUpdate) SetEmployee(e *Employee) *ContractUpdate {
	return cu.SetEmployeeID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cu *ContractUpdate) SetRider(r *Rider) *ContractUpdate {
	return cu.SetRiderID(r.ID)
}

// SetAllocate sets the "allocate" edge to the Allocate entity.
func (cu *ContractUpdate) SetAllocate(a *Allocate) *ContractUpdate {
	return cu.SetAllocateID(a.ID)
}

// Mutation returns the ContractMutation object of the builder.
func (cu *ContractUpdate) Mutation() *ContractMutation {
	return cu.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (cu *ContractUpdate) ClearSubscribe() *ContractUpdate {
	cu.mutation.ClearSubscribe()
	return cu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (cu *ContractUpdate) ClearEmployee() *ContractUpdate {
	cu.mutation.ClearEmployee()
	return cu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cu *ContractUpdate) ClearRider() *ContractUpdate {
	cu.mutation.ClearRider()
	return cu
}

// ClearAllocate clears the "allocate" edge to the Allocate entity.
func (cu *ContractUpdate) ClearAllocate() *ContractUpdate {
	cu.mutation.ClearAllocate()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContractUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContractUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContractUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContractUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContractUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if contract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contract.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContractUpdate) check() error {
	if v, ok := cu.mutation.FlowID(); ok {
		if err := contract.FlowIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_id", err: fmt.Errorf(`ent: validator failed for field "Contract.flow_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sn(); ok {
		if err := contract.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Contract.sn": %w`, err)}
		}
	}
	if _, ok := cu.mutation.RiderID(); cu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Contract.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ContractUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ContractUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(contract.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(contract.FieldDeletedAt, field.TypeTime)
	}
	if cu.mutation.CreatorCleared() {
		_spec.ClearField(contract.FieldCreator, field.TypeJSON)
	}
	if value, ok := cu.mutation.LastModifier(); ok {
		_spec.SetField(contract.FieldLastModifier, field.TypeJSON, value)
	}
	if cu.mutation.LastModifierCleared() {
		_spec.ClearField(contract.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.SetField(contract.FieldRemark, field.TypeString, value)
	}
	if cu.mutation.RemarkCleared() {
		_spec.ClearField(contract.FieldRemark, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(contract.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(contract.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.FlowID(); ok {
		_spec.SetField(contract.FieldFlowID, field.TypeString, value)
	}
	if value, ok := cu.mutation.Sn(); ok {
		_spec.SetField(contract.FieldSn, field.TypeString, value)
	}
	if value, ok := cu.mutation.Files(); ok {
		_spec.SetField(contract.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contract.FieldFiles, value)
		})
	}
	if cu.mutation.FilesCleared() {
		_spec.ClearField(contract.FieldFiles, field.TypeJSON)
	}
	if value, ok := cu.mutation.Effective(); ok {
		_spec.SetField(contract.FieldEffective, field.TypeBool, value)
	}
	if value, ok := cu.mutation.RiderInfo(); ok {
		_spec.SetField(contract.FieldRiderInfo, field.TypeJSON, value)
	}
	if cu.mutation.RiderInfoCleared() {
		_spec.ClearField(contract.FieldRiderInfo, field.TypeJSON)
	}
	if value, ok := cu.mutation.Link(); ok {
		_spec.SetField(contract.FieldLink, field.TypeString, value)
	}
	if cu.mutation.LinkCleared() {
		_spec.ClearField(contract.FieldLink, field.TypeString)
	}
	if value, ok := cu.mutation.ExpiresAt(); ok {
		_spec.SetField(contract.FieldExpiresAt, field.TypeTime, value)
	}
	if cu.mutation.ExpiresAtCleared() {
		_spec.ClearField(contract.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cu.mutation.SignedAt(); ok {
		_spec.SetField(contract.FieldSignedAt, field.TypeTime, value)
	}
	if cu.mutation.SignedAtCleared() {
		_spec.ClearField(contract.FieldSignedAt, field.TypeTime)
	}
	if cu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.SubscribeTable,
			Columns: []string{contract.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.SubscribeTable,
			Columns: []string{contract.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.EmployeeTable,
			Columns: []string{contract.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.EmployeeTable,
			Columns: []string{contract.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AllocateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contract.AllocateTable,
			Columns: []string{contract.AllocateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AllocateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contract.AllocateTable,
			Columns: []string{contract.AllocateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContractUpdateOne is the builder for updating a single Contract entity.
type ContractUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContractMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContractUpdateOne) SetUpdatedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *ContractUpdateOne) SetDeletedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableDeletedAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *ContractUpdateOne) ClearDeletedAt() *ContractUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetLastModifier sets the "last_modifier" field.
func (cuo *ContractUpdateOne) SetLastModifier(m *model.Modifier) *ContractUpdateOne {
	cuo.mutation.SetLastModifier(m)
	return cuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cuo *ContractUpdateOne) ClearLastModifier() *ContractUpdateOne {
	cuo.mutation.ClearLastModifier()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *ContractUpdateOne) SetRemark(s string) *ContractUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableRemark(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *ContractUpdateOne) ClearRemark() *ContractUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (cuo *ContractUpdateOne) SetSubscribeID(u uint64) *ContractUpdateOne {
	cuo.mutation.SetSubscribeID(u)
	return cuo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableSubscribeID(u *uint64) *ContractUpdateOne {
	if u != nil {
		cuo.SetSubscribeID(*u)
	}
	return cuo
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (cuo *ContractUpdateOne) ClearSubscribeID() *ContractUpdateOne {
	cuo.mutation.ClearSubscribeID()
	return cuo
}

// SetEmployeeID sets the "employee_id" field.
func (cuo *ContractUpdateOne) SetEmployeeID(u uint64) *ContractUpdateOne {
	cuo.mutation.SetEmployeeID(u)
	return cuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableEmployeeID(u *uint64) *ContractUpdateOne {
	if u != nil {
		cuo.SetEmployeeID(*u)
	}
	return cuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (cuo *ContractUpdateOne) ClearEmployeeID() *ContractUpdateOne {
	cuo.mutation.ClearEmployeeID()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContractUpdateOne) SetStatus(u uint8) *ContractUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableStatus(u *uint8) *ContractUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *ContractUpdateOne) AddStatus(u int8) *ContractUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// SetRiderID sets the "rider_id" field.
func (cuo *ContractUpdateOne) SetRiderID(u uint64) *ContractUpdateOne {
	cuo.mutation.SetRiderID(u)
	return cuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableRiderID(u *uint64) *ContractUpdateOne {
	if u != nil {
		cuo.SetRiderID(*u)
	}
	return cuo
}

// SetFlowID sets the "flow_id" field.
func (cuo *ContractUpdateOne) SetFlowID(s string) *ContractUpdateOne {
	cuo.mutation.SetFlowID(s)
	return cuo
}

// SetNillableFlowID sets the "flow_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableFlowID(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetFlowID(*s)
	}
	return cuo
}

// SetSn sets the "sn" field.
func (cuo *ContractUpdateOne) SetSn(s string) *ContractUpdateOne {
	cuo.mutation.SetSn(s)
	return cuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableSn(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetSn(*s)
	}
	return cuo
}

// SetFiles sets the "files" field.
func (cuo *ContractUpdateOne) SetFiles(s []string) *ContractUpdateOne {
	cuo.mutation.SetFiles(s)
	return cuo
}

// AppendFiles appends s to the "files" field.
func (cuo *ContractUpdateOne) AppendFiles(s []string) *ContractUpdateOne {
	cuo.mutation.AppendFiles(s)
	return cuo
}

// ClearFiles clears the value of the "files" field.
func (cuo *ContractUpdateOne) ClearFiles() *ContractUpdateOne {
	cuo.mutation.ClearFiles()
	return cuo
}

// SetEffective sets the "effective" field.
func (cuo *ContractUpdateOne) SetEffective(b bool) *ContractUpdateOne {
	cuo.mutation.SetEffective(b)
	return cuo
}

// SetNillableEffective sets the "effective" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableEffective(b *bool) *ContractUpdateOne {
	if b != nil {
		cuo.SetEffective(*b)
	}
	return cuo
}

// SetRiderInfo sets the "rider_info" field.
func (cuo *ContractUpdateOne) SetRiderInfo(mr *model.ContractRider) *ContractUpdateOne {
	cuo.mutation.SetRiderInfo(mr)
	return cuo
}

// ClearRiderInfo clears the value of the "rider_info" field.
func (cuo *ContractUpdateOne) ClearRiderInfo() *ContractUpdateOne {
	cuo.mutation.ClearRiderInfo()
	return cuo
}

// SetAllocateID sets the "allocate_id" field.
func (cuo *ContractUpdateOne) SetAllocateID(u uint64) *ContractUpdateOne {
	cuo.mutation.SetAllocateID(u)
	return cuo
}

// SetNillableAllocateID sets the "allocate_id" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableAllocateID(u *uint64) *ContractUpdateOne {
	if u != nil {
		cuo.SetAllocateID(*u)
	}
	return cuo
}

// ClearAllocateID clears the value of the "allocate_id" field.
func (cuo *ContractUpdateOne) ClearAllocateID() *ContractUpdateOne {
	cuo.mutation.ClearAllocateID()
	return cuo
}

// SetLink sets the "link" field.
func (cuo *ContractUpdateOne) SetLink(s string) *ContractUpdateOne {
	cuo.mutation.SetLink(s)
	return cuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableLink(s *string) *ContractUpdateOne {
	if s != nil {
		cuo.SetLink(*s)
	}
	return cuo
}

// ClearLink clears the value of the "link" field.
func (cuo *ContractUpdateOne) ClearLink() *ContractUpdateOne {
	cuo.mutation.ClearLink()
	return cuo
}

// SetExpiresAt sets the "expires_at" field.
func (cuo *ContractUpdateOne) SetExpiresAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetExpiresAt(t)
	return cuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableExpiresAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetExpiresAt(*t)
	}
	return cuo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (cuo *ContractUpdateOne) ClearExpiresAt() *ContractUpdateOne {
	cuo.mutation.ClearExpiresAt()
	return cuo
}

// SetSignedAt sets the "signed_at" field.
func (cuo *ContractUpdateOne) SetSignedAt(t time.Time) *ContractUpdateOne {
	cuo.mutation.SetSignedAt(t)
	return cuo
}

// SetNillableSignedAt sets the "signed_at" field if the given value is not nil.
func (cuo *ContractUpdateOne) SetNillableSignedAt(t *time.Time) *ContractUpdateOne {
	if t != nil {
		cuo.SetSignedAt(*t)
	}
	return cuo
}

// ClearSignedAt clears the value of the "signed_at" field.
func (cuo *ContractUpdateOne) ClearSignedAt() *ContractUpdateOne {
	cuo.mutation.ClearSignedAt()
	return cuo
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (cuo *ContractUpdateOne) SetSubscribe(s *Subscribe) *ContractUpdateOne {
	return cuo.SetSubscribeID(s.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (cuo *ContractUpdateOne) SetEmployee(e *Employee) *ContractUpdateOne {
	return cuo.SetEmployeeID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cuo *ContractUpdateOne) SetRider(r *Rider) *ContractUpdateOne {
	return cuo.SetRiderID(r.ID)
}

// SetAllocate sets the "allocate" edge to the Allocate entity.
func (cuo *ContractUpdateOne) SetAllocate(a *Allocate) *ContractUpdateOne {
	return cuo.SetAllocateID(a.ID)
}

// Mutation returns the ContractMutation object of the builder.
func (cuo *ContractUpdateOne) Mutation() *ContractMutation {
	return cuo.mutation
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (cuo *ContractUpdateOne) ClearSubscribe() *ContractUpdateOne {
	cuo.mutation.ClearSubscribe()
	return cuo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (cuo *ContractUpdateOne) ClearEmployee() *ContractUpdateOne {
	cuo.mutation.ClearEmployee()
	return cuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cuo *ContractUpdateOne) ClearRider() *ContractUpdateOne {
	cuo.mutation.ClearRider()
	return cuo
}

// ClearAllocate clears the "allocate" edge to the Allocate entity.
func (cuo *ContractUpdateOne) ClearAllocate() *ContractUpdateOne {
	cuo.mutation.ClearAllocate()
	return cuo
}

// Where appends a list predicates to the ContractUpdate builder.
func (cuo *ContractUpdateOne) Where(ps ...predicate.Contract) *ContractUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContractUpdateOne) Select(field string, fields ...string) *ContractUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Contract entity.
func (cuo *ContractUpdateOne) Save(ctx context.Context) (*Contract, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContractUpdateOne) SaveX(ctx context.Context) *Contract {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContractUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContractUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContractUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if contract.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contract.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contract.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContractUpdateOne) check() error {
	if v, ok := cuo.mutation.FlowID(); ok {
		if err := contract.FlowIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_id", err: fmt.Errorf(`ent: validator failed for field "Contract.flow_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sn(); ok {
		if err := contract.SnValidator(v); err != nil {
			return &ValidationError{Name: "sn", err: fmt.Errorf(`ent: validator failed for field "Contract.sn": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.RiderID(); cuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Contract.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ContractUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ContractUpdateOne) sqlSave(ctx context.Context) (_node *Contract, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contract.Table, contract.Columns, sqlgraph.NewFieldSpec(contract.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Contract.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contract.FieldID)
		for _, f := range fields {
			if !contract.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contract.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contract.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(contract.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contract.FieldDeletedAt, field.TypeTime)
	}
	if cuo.mutation.CreatorCleared() {
		_spec.ClearField(contract.FieldCreator, field.TypeJSON)
	}
	if value, ok := cuo.mutation.LastModifier(); ok {
		_spec.SetField(contract.FieldLastModifier, field.TypeJSON, value)
	}
	if cuo.mutation.LastModifierCleared() {
		_spec.ClearField(contract.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.SetField(contract.FieldRemark, field.TypeString, value)
	}
	if cuo.mutation.RemarkCleared() {
		_spec.ClearField(contract.FieldRemark, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(contract.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(contract.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.FlowID(); ok {
		_spec.SetField(contract.FieldFlowID, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Sn(); ok {
		_spec.SetField(contract.FieldSn, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Files(); ok {
		_spec.SetField(contract.FieldFiles, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedFiles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contract.FieldFiles, value)
		})
	}
	if cuo.mutation.FilesCleared() {
		_spec.ClearField(contract.FieldFiles, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Effective(); ok {
		_spec.SetField(contract.FieldEffective, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.RiderInfo(); ok {
		_spec.SetField(contract.FieldRiderInfo, field.TypeJSON, value)
	}
	if cuo.mutation.RiderInfoCleared() {
		_spec.ClearField(contract.FieldRiderInfo, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Link(); ok {
		_spec.SetField(contract.FieldLink, field.TypeString, value)
	}
	if cuo.mutation.LinkCleared() {
		_spec.ClearField(contract.FieldLink, field.TypeString)
	}
	if value, ok := cuo.mutation.ExpiresAt(); ok {
		_spec.SetField(contract.FieldExpiresAt, field.TypeTime, value)
	}
	if cuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(contract.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.SignedAt(); ok {
		_spec.SetField(contract.FieldSignedAt, field.TypeTime, value)
	}
	if cuo.mutation.SignedAtCleared() {
		_spec.ClearField(contract.FieldSignedAt, field.TypeTime)
	}
	if cuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.SubscribeTable,
			Columns: []string{contract.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.SubscribeTable,
			Columns: []string{contract.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.EmployeeTable,
			Columns: []string{contract.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   contract.EmployeeTable,
			Columns: []string{contract.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contract.RiderTable,
			Columns: []string{contract.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AllocateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contract.AllocateTable,
			Columns: []string{contract.AllocateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AllocateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   contract.AllocateTable,
			Columns: []string{contract.AllocateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(allocate.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Contract{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contract.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
