// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// PromotionMemberQuery is the builder for querying PromotionMember entities.
type PromotionMemberQuery struct {
	config
	ctx             *QueryContext
	order           []promotionmember.OrderOption
	inters          []Interceptor
	predicates      []predicate.PromotionMember
	withRider       *RiderQuery
	withSubscribe   *SubscribeQuery
	withLevel       *PromotionLevelQuery
	withReferrals   *PromotionReferralsQuery
	withReferred    *PromotionReferralsQuery
	withPerson      *PromotionPersonQuery
	withCards       *PromotionBankCardQuery
	withCommissions *PromotionMemberCommissionQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PromotionMemberQuery builder.
func (pmq *PromotionMemberQuery) Where(ps ...predicate.PromotionMember) *PromotionMemberQuery {
	pmq.predicates = append(pmq.predicates, ps...)
	return pmq
}

// Limit the number of records to be returned by this query.
func (pmq *PromotionMemberQuery) Limit(limit int) *PromotionMemberQuery {
	pmq.ctx.Limit = &limit
	return pmq
}

// Offset to start from.
func (pmq *PromotionMemberQuery) Offset(offset int) *PromotionMemberQuery {
	pmq.ctx.Offset = &offset
	return pmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pmq *PromotionMemberQuery) Unique(unique bool) *PromotionMemberQuery {
	pmq.ctx.Unique = &unique
	return pmq
}

// Order specifies how the records should be ordered.
func (pmq *PromotionMemberQuery) Order(o ...promotionmember.OrderOption) *PromotionMemberQuery {
	pmq.order = append(pmq.order, o...)
	return pmq
}

// QueryRider chains the current query on the "rider" edge.
func (pmq *PromotionMemberQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.RiderTable, promotionmember.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (pmq *PromotionMemberQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.SubscribeTable, promotionmember.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLevel chains the current query on the "level" edge.
func (pmq *PromotionMemberQuery) QueryLevel() *PromotionLevelQuery {
	query := (&PromotionLevelClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionlevel.Table, promotionlevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, promotionmember.LevelTable, promotionmember.LevelColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReferrals chains the current query on the "referrals" edge.
func (pmq *PromotionMemberQuery) QueryReferrals() *PromotionReferralsQuery {
	query := (&PromotionReferralsClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionreferrals.Table, promotionreferrals.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.ReferralsTable, promotionmember.ReferralsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReferred chains the current query on the "referred" edge.
func (pmq *PromotionMemberQuery) QueryReferred() *PromotionReferralsQuery {
	query := (&PromotionReferralsClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionreferrals.Table, promotionreferrals.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, promotionmember.ReferredTable, promotionmember.ReferredColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPerson chains the current query on the "person" edge.
func (pmq *PromotionMemberQuery) QueryPerson() *PromotionPersonQuery {
	query := (&PromotionPersonClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionperson.Table, promotionperson.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, promotionmember.PersonTable, promotionmember.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCards chains the current query on the "cards" edge.
func (pmq *PromotionMemberQuery) QueryCards() *PromotionBankCardQuery {
	query := (&PromotionBankCardClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionbankcard.Table, promotionbankcard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.CardsTable, promotionmember.CardsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommissions chains the current query on the "commissions" edge.
func (pmq *PromotionMemberQuery) QueryCommissions() *PromotionMemberCommissionQuery {
	query := (&PromotionMemberCommissionClient{config: pmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(promotionmember.Table, promotionmember.FieldID, selector),
			sqlgraph.To(promotionmembercommission.Table, promotionmembercommission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, promotionmember.CommissionsTable, promotionmember.CommissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PromotionMember entity from the query.
// Returns a *NotFoundError when no PromotionMember was found.
func (pmq *PromotionMemberQuery) First(ctx context.Context) (*PromotionMember, error) {
	nodes, err := pmq.Limit(1).All(setContextOp(ctx, pmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{promotionmember.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pmq *PromotionMemberQuery) FirstX(ctx context.Context) *PromotionMember {
	node, err := pmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PromotionMember ID from the query.
// Returns a *NotFoundError when no PromotionMember ID was found.
func (pmq *PromotionMemberQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pmq.Limit(1).IDs(setContextOp(ctx, pmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{promotionmember.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pmq *PromotionMemberQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := pmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PromotionMember entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PromotionMember entity is found.
// Returns a *NotFoundError when no PromotionMember entities are found.
func (pmq *PromotionMemberQuery) Only(ctx context.Context) (*PromotionMember, error) {
	nodes, err := pmq.Limit(2).All(setContextOp(ctx, pmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{promotionmember.Label}
	default:
		return nil, &NotSingularError{promotionmember.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pmq *PromotionMemberQuery) OnlyX(ctx context.Context) *PromotionMember {
	node, err := pmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PromotionMember ID in the query.
// Returns a *NotSingularError when more than one PromotionMember ID is found.
// Returns a *NotFoundError when no entities are found.
func (pmq *PromotionMemberQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = pmq.Limit(2).IDs(setContextOp(ctx, pmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{promotionmember.Label}
	default:
		err = &NotSingularError{promotionmember.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pmq *PromotionMemberQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := pmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PromotionMembers.
func (pmq *PromotionMemberQuery) All(ctx context.Context) ([]*PromotionMember, error) {
	ctx = setContextOp(ctx, pmq.ctx, ent.OpQueryAll)
	if err := pmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PromotionMember, *PromotionMemberQuery]()
	return withInterceptors[[]*PromotionMember](ctx, pmq, qr, pmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pmq *PromotionMemberQuery) AllX(ctx context.Context) []*PromotionMember {
	nodes, err := pmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PromotionMember IDs.
func (pmq *PromotionMemberQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if pmq.ctx.Unique == nil && pmq.path != nil {
		pmq.Unique(true)
	}
	ctx = setContextOp(ctx, pmq.ctx, ent.OpQueryIDs)
	if err = pmq.Select(promotionmember.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pmq *PromotionMemberQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := pmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pmq *PromotionMemberQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pmq.ctx, ent.OpQueryCount)
	if err := pmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pmq, querierCount[*PromotionMemberQuery](), pmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pmq *PromotionMemberQuery) CountX(ctx context.Context) int {
	count, err := pmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pmq *PromotionMemberQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pmq.ctx, ent.OpQueryExist)
	switch _, err := pmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pmq *PromotionMemberQuery) ExistX(ctx context.Context) bool {
	exist, err := pmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PromotionMemberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pmq *PromotionMemberQuery) Clone() *PromotionMemberQuery {
	if pmq == nil {
		return nil
	}
	return &PromotionMemberQuery{
		config:          pmq.config,
		ctx:             pmq.ctx.Clone(),
		order:           append([]promotionmember.OrderOption{}, pmq.order...),
		inters:          append([]Interceptor{}, pmq.inters...),
		predicates:      append([]predicate.PromotionMember{}, pmq.predicates...),
		withRider:       pmq.withRider.Clone(),
		withSubscribe:   pmq.withSubscribe.Clone(),
		withLevel:       pmq.withLevel.Clone(),
		withReferrals:   pmq.withReferrals.Clone(),
		withReferred:    pmq.withReferred.Clone(),
		withPerson:      pmq.withPerson.Clone(),
		withCards:       pmq.withCards.Clone(),
		withCommissions: pmq.withCommissions.Clone(),
		// clone intermediate query.
		sql:       pmq.sql.Clone(),
		path:      pmq.path,
		modifiers: append([]func(*sql.Selector){}, pmq.modifiers...),
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithRider(opts ...func(*RiderQuery)) *PromotionMemberQuery {
	query := (&RiderClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withRider = query
	return pmq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *PromotionMemberQuery {
	query := (&SubscribeClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withSubscribe = query
	return pmq
}

// WithLevel tells the query-builder to eager-load the nodes that are connected to
// the "level" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithLevel(opts ...func(*PromotionLevelQuery)) *PromotionMemberQuery {
	query := (&PromotionLevelClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withLevel = query
	return pmq
}

// WithReferrals tells the query-builder to eager-load the nodes that are connected to
// the "referrals" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithReferrals(opts ...func(*PromotionReferralsQuery)) *PromotionMemberQuery {
	query := (&PromotionReferralsClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withReferrals = query
	return pmq
}

// WithReferred tells the query-builder to eager-load the nodes that are connected to
// the "referred" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithReferred(opts ...func(*PromotionReferralsQuery)) *PromotionMemberQuery {
	query := (&PromotionReferralsClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withReferred = query
	return pmq
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithPerson(opts ...func(*PromotionPersonQuery)) *PromotionMemberQuery {
	query := (&PromotionPersonClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withPerson = query
	return pmq
}

// WithCards tells the query-builder to eager-load the nodes that are connected to
// the "cards" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithCards(opts ...func(*PromotionBankCardQuery)) *PromotionMemberQuery {
	query := (&PromotionBankCardClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withCards = query
	return pmq
}

// WithCommissions tells the query-builder to eager-load the nodes that are connected to
// the "commissions" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PromotionMemberQuery) WithCommissions(opts ...func(*PromotionMemberCommissionQuery)) *PromotionMemberQuery {
	query := (&PromotionMemberCommissionClient{config: pmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pmq.withCommissions = query
	return pmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PromotionMember.Query().
//		GroupBy(promotionmember.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pmq *PromotionMemberQuery) GroupBy(field string, fields ...string) *PromotionMemberGroupBy {
	pmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PromotionMemberGroupBy{build: pmq}
	grbuild.flds = &pmq.ctx.Fields
	grbuild.label = promotionmember.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PromotionMember.Query().
//		Select(promotionmember.FieldCreatedAt).
//		Scan(ctx, &v)
func (pmq *PromotionMemberQuery) Select(fields ...string) *PromotionMemberSelect {
	pmq.ctx.Fields = append(pmq.ctx.Fields, fields...)
	sbuild := &PromotionMemberSelect{PromotionMemberQuery: pmq}
	sbuild.label = promotionmember.Label
	sbuild.flds, sbuild.scan = &pmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PromotionMemberSelect configured with the given aggregations.
func (pmq *PromotionMemberQuery) Aggregate(fns ...AggregateFunc) *PromotionMemberSelect {
	return pmq.Select().Aggregate(fns...)
}

func (pmq *PromotionMemberQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pmq); err != nil {
				return err
			}
		}
	}
	for _, f := range pmq.ctx.Fields {
		if !promotionmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pmq.path != nil {
		prev, err := pmq.path(ctx)
		if err != nil {
			return err
		}
		pmq.sql = prev
	}
	return nil
}

func (pmq *PromotionMemberQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PromotionMember, error) {
	var (
		nodes       = []*PromotionMember{}
		_spec       = pmq.querySpec()
		loadedTypes = [8]bool{
			pmq.withRider != nil,
			pmq.withSubscribe != nil,
			pmq.withLevel != nil,
			pmq.withReferrals != nil,
			pmq.withReferred != nil,
			pmq.withPerson != nil,
			pmq.withCards != nil,
			pmq.withCommissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PromotionMember).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PromotionMember{config: pmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(pmq.modifiers) > 0 {
		_spec.Modifiers = pmq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pmq.withRider; query != nil {
		if err := pmq.loadRider(ctx, query, nodes, nil,
			func(n *PromotionMember, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withSubscribe; query != nil {
		if err := pmq.loadSubscribe(ctx, query, nodes, nil,
			func(n *PromotionMember, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withLevel; query != nil {
		if err := pmq.loadLevel(ctx, query, nodes, nil,
			func(n *PromotionMember, e *PromotionLevel) { n.Edges.Level = e }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withReferrals; query != nil {
		if err := pmq.loadReferrals(ctx, query, nodes,
			func(n *PromotionMember) { n.Edges.Referrals = []*PromotionReferrals{} },
			func(n *PromotionMember, e *PromotionReferrals) { n.Edges.Referrals = append(n.Edges.Referrals, e) }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withReferred; query != nil {
		if err := pmq.loadReferred(ctx, query, nodes, nil,
			func(n *PromotionMember, e *PromotionReferrals) { n.Edges.Referred = e }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withPerson; query != nil {
		if err := pmq.loadPerson(ctx, query, nodes, nil,
			func(n *PromotionMember, e *PromotionPerson) { n.Edges.Person = e }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withCards; query != nil {
		if err := pmq.loadCards(ctx, query, nodes,
			func(n *PromotionMember) { n.Edges.Cards = []*PromotionBankCard{} },
			func(n *PromotionMember, e *PromotionBankCard) { n.Edges.Cards = append(n.Edges.Cards, e) }); err != nil {
			return nil, err
		}
	}
	if query := pmq.withCommissions; query != nil {
		if err := pmq.loadCommissions(ctx, query, nodes,
			func(n *PromotionMember) { n.Edges.Commissions = []*PromotionMemberCommission{} },
			func(n *PromotionMember, e *PromotionMemberCommission) {
				n.Edges.Commissions = append(n.Edges.Commissions, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pmq *PromotionMemberQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionMember)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionMember)
	for i := range nodes {
		if nodes[i].SubscribeID == nil {
			continue
		}
		fk := *nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadLevel(ctx context.Context, query *PromotionLevelQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionLevel)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionMember)
	for i := range nodes {
		if nodes[i].LevelID == nil {
			continue
		}
		fk := *nodes[i].LevelID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotionlevel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "level_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadReferrals(ctx context.Context, query *PromotionReferralsQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionReferrals)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*PromotionMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(promotionreferrals.FieldReferringMemberID)
	}
	query.Where(predicate.PromotionReferrals(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(promotionmember.ReferralsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReferringMemberID
		if fk == nil {
			return fmt.Errorf(`foreign-key "referring_member_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "referring_member_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadReferred(ctx context.Context, query *PromotionReferralsQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionReferrals)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*PromotionMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(promotionreferrals.FieldReferredMemberID)
	}
	query.Where(predicate.PromotionReferrals(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(promotionmember.ReferredColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReferredMemberID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "referred_member_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadPerson(ctx context.Context, query *PromotionPersonQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionPerson)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PromotionMember)
	for i := range nodes {
		if nodes[i].PersonID == nil {
			continue
		}
		fk := *nodes[i].PersonID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(promotionperson.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "person_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadCards(ctx context.Context, query *PromotionBankCardQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionBankCard)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*PromotionMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(promotionbankcard.FieldMemberID)
	}
	query.Where(predicate.PromotionBankCard(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(promotionmember.CardsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MemberID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "member_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pmq *PromotionMemberQuery) loadCommissions(ctx context.Context, query *PromotionMemberCommissionQuery, nodes []*PromotionMember, init func(*PromotionMember), assign func(*PromotionMember, *PromotionMemberCommission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*PromotionMember)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(promotionmembercommission.FieldMemberID)
	}
	query.Where(predicate.PromotionMemberCommission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(promotionmember.CommissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.MemberID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "member_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (pmq *PromotionMemberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pmq.querySpec()
	if len(pmq.modifiers) > 0 {
		_spec.Modifiers = pmq.modifiers
	}
	_spec.Node.Columns = pmq.ctx.Fields
	if len(pmq.ctx.Fields) > 0 {
		_spec.Unique = pmq.ctx.Unique != nil && *pmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pmq.driver, _spec)
}

func (pmq *PromotionMemberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(promotionmember.Table, promotionmember.Columns, sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64))
	_spec.From = pmq.sql
	if unique := pmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pmq.path != nil {
		_spec.Unique = true
	}
	if fields := pmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionmember.FieldID)
		for i := range fields {
			if fields[i] != promotionmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pmq.withRider != nil {
			_spec.Node.AddColumnOnce(promotionmember.FieldRiderID)
		}
		if pmq.withSubscribe != nil {
			_spec.Node.AddColumnOnce(promotionmember.FieldSubscribeID)
		}
		if pmq.withLevel != nil {
			_spec.Node.AddColumnOnce(promotionmember.FieldLevelID)
		}
		if pmq.withPerson != nil {
			_spec.Node.AddColumnOnce(promotionmember.FieldPersonID)
		}
	}
	if ps := pmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pmq *PromotionMemberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pmq.driver.Dialect())
	t1 := builder.Table(promotionmember.Table)
	columns := pmq.ctx.Fields
	if len(columns) == 0 {
		columns = promotionmember.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pmq.sql != nil {
		selector = pmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pmq.ctx.Unique != nil && *pmq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range pmq.modifiers {
		m(selector)
	}
	for _, p := range pmq.predicates {
		p(selector)
	}
	for _, p := range pmq.order {
		p(selector)
	}
	if offset := pmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pmq *PromotionMemberQuery) Modify(modifiers ...func(s *sql.Selector)) *PromotionMemberSelect {
	pmq.modifiers = append(pmq.modifiers, modifiers...)
	return pmq.Select()
}

type PromotionMemberQueryWith string

var (
	PromotionMemberQueryWithRider       PromotionMemberQueryWith = "Rider"
	PromotionMemberQueryWithSubscribe   PromotionMemberQueryWith = "Subscribe"
	PromotionMemberQueryWithLevel       PromotionMemberQueryWith = "Level"
	PromotionMemberQueryWithReferrals   PromotionMemberQueryWith = "Referrals"
	PromotionMemberQueryWithReferred    PromotionMemberQueryWith = "Referred"
	PromotionMemberQueryWithPerson      PromotionMemberQueryWith = "Person"
	PromotionMemberQueryWithCards       PromotionMemberQueryWith = "Cards"
	PromotionMemberQueryWithCommissions PromotionMemberQueryWith = "Commissions"
)

func (pmq *PromotionMemberQuery) With(withEdges ...PromotionMemberQueryWith) *PromotionMemberQuery {
	for _, v := range withEdges {
		switch v {
		case PromotionMemberQueryWithRider:
			pmq.WithRider()
		case PromotionMemberQueryWithSubscribe:
			pmq.WithSubscribe()
		case PromotionMemberQueryWithLevel:
			pmq.WithLevel()
		case PromotionMemberQueryWithReferrals:
			pmq.WithReferrals()
		case PromotionMemberQueryWithReferred:
			pmq.WithReferred()
		case PromotionMemberQueryWithPerson:
			pmq.WithPerson()
		case PromotionMemberQueryWithCards:
			pmq.WithCards()
		case PromotionMemberQueryWithCommissions:
			pmq.WithCommissions()
		}
	}
	return pmq
}

// PromotionMemberGroupBy is the group-by builder for PromotionMember entities.
type PromotionMemberGroupBy struct {
	selector
	build *PromotionMemberQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pmgb *PromotionMemberGroupBy) Aggregate(fns ...AggregateFunc) *PromotionMemberGroupBy {
	pmgb.fns = append(pmgb.fns, fns...)
	return pmgb
}

// Scan applies the selector query and scans the result into the given value.
func (pmgb *PromotionMemberGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pmgb.build.ctx, ent.OpQueryGroupBy)
	if err := pmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionMemberQuery, *PromotionMemberGroupBy](ctx, pmgb.build, pmgb, pmgb.build.inters, v)
}

func (pmgb *PromotionMemberGroupBy) sqlScan(ctx context.Context, root *PromotionMemberQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pmgb.fns))
	for _, fn := range pmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pmgb.flds)+len(pmgb.fns))
		for _, f := range *pmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PromotionMemberSelect is the builder for selecting fields of PromotionMember entities.
type PromotionMemberSelect struct {
	*PromotionMemberQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pms *PromotionMemberSelect) Aggregate(fns ...AggregateFunc) *PromotionMemberSelect {
	pms.fns = append(pms.fns, fns...)
	return pms
}

// Scan applies the selector query and scans the result into the given value.
func (pms *PromotionMemberSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pms.ctx, ent.OpQuerySelect)
	if err := pms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PromotionMemberQuery, *PromotionMemberSelect](ctx, pms.PromotionMemberQuery, pms, pms.inters, v)
}

func (pms *PromotionMemberSelect) sqlScan(ctx context.Context, root *PromotionMemberQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pms.fns))
	for _, fn := range pms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pms *PromotionMemberSelect) Modify(modifiers ...func(s *sql.Selector)) *PromotionMemberSelect {
	pms.modifiers = append(pms.modifiers, modifiers...)
	return pms
}
