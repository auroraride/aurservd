// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribePauseUpdate is the builder for updating SubscribePause entities.
type SubscribePauseUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscribePauseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscribePauseUpdate builder.
func (spu *SubscribePauseUpdate) Where(ps ...predicate.SubscribePause) *SubscribePauseUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SubscribePauseUpdate) SetUpdatedAt(t time.Time) *SubscribePauseUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SubscribePauseUpdate) SetDeletedAt(t time.Time) *SubscribePauseUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableDeletedAt(t *time.Time) *SubscribePauseUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SubscribePauseUpdate) ClearDeletedAt() *SubscribePauseUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetLastModifier sets the "last_modifier" field.
func (spu *SubscribePauseUpdate) SetLastModifier(m *model.Modifier) *SubscribePauseUpdate {
	spu.mutation.SetLastModifier(m)
	return spu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (spu *SubscribePauseUpdate) ClearLastModifier() *SubscribePauseUpdate {
	spu.mutation.ClearLastModifier()
	return spu
}

// SetRemark sets the "remark" field.
func (spu *SubscribePauseUpdate) SetRemark(s string) *SubscribePauseUpdate {
	spu.mutation.SetRemark(s)
	return spu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableRemark(s *string) *SubscribePauseUpdate {
	if s != nil {
		spu.SetRemark(*s)
	}
	return spu
}

// ClearRemark clears the value of the "remark" field.
func (spu *SubscribePauseUpdate) ClearRemark() *SubscribePauseUpdate {
	spu.mutation.ClearRemark()
	return spu
}

// SetRiderID sets the "rider_id" field.
func (spu *SubscribePauseUpdate) SetRiderID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetRiderID(u)
	return spu
}

// SetEmployeeID sets the "employee_id" field.
func (spu *SubscribePauseUpdate) SetEmployeeID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetEmployeeID(u)
	return spu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableEmployeeID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetEmployeeID(*u)
	}
	return spu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (spu *SubscribePauseUpdate) ClearEmployeeID() *SubscribePauseUpdate {
	spu.mutation.ClearEmployeeID()
	return spu
}

// SetCityID sets the "city_id" field.
func (spu *SubscribePauseUpdate) SetCityID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetCityID(u)
	return spu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableCityID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetCityID(*u)
	}
	return spu
}

// ClearCityID clears the value of the "city_id" field.
func (spu *SubscribePauseUpdate) ClearCityID() *SubscribePauseUpdate {
	spu.mutation.ClearCityID()
	return spu
}

// SetStoreID sets the "store_id" field.
func (spu *SubscribePauseUpdate) SetStoreID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetStoreID(u)
	return spu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableStoreID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetStoreID(*u)
	}
	return spu
}

// ClearStoreID clears the value of the "store_id" field.
func (spu *SubscribePauseUpdate) ClearStoreID() *SubscribePauseUpdate {
	spu.mutation.ClearStoreID()
	return spu
}

// SetEndStoreID sets the "end_store_id" field.
func (spu *SubscribePauseUpdate) SetEndStoreID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetEndStoreID(u)
	return spu
}

// SetNillableEndStoreID sets the "end_store_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableEndStoreID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetEndStoreID(*u)
	}
	return spu
}

// ClearEndStoreID clears the value of the "end_store_id" field.
func (spu *SubscribePauseUpdate) ClearEndStoreID() *SubscribePauseUpdate {
	spu.mutation.ClearEndStoreID()
	return spu
}

// SetCabinetID sets the "cabinet_id" field.
func (spu *SubscribePauseUpdate) SetCabinetID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetCabinetID(u)
	return spu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableCabinetID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetCabinetID(*u)
	}
	return spu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (spu *SubscribePauseUpdate) ClearCabinetID() *SubscribePauseUpdate {
	spu.mutation.ClearCabinetID()
	return spu
}

// SetEndCabinetID sets the "end_cabinet_id" field.
func (spu *SubscribePauseUpdate) SetEndCabinetID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetEndCabinetID(u)
	return spu
}

// SetNillableEndCabinetID sets the "end_cabinet_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableEndCabinetID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetEndCabinetID(*u)
	}
	return spu
}

// ClearEndCabinetID clears the value of the "end_cabinet_id" field.
func (spu *SubscribePauseUpdate) ClearEndCabinetID() *SubscribePauseUpdate {
	spu.mutation.ClearEndCabinetID()
	return spu
}

// SetSubscribeID sets the "subscribe_id" field.
func (spu *SubscribePauseUpdate) SetSubscribeID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetSubscribeID(u)
	return spu
}

// SetStartAt sets the "start_at" field.
func (spu *SubscribePauseUpdate) SetStartAt(t time.Time) *SubscribePauseUpdate {
	spu.mutation.SetStartAt(t)
	return spu
}

// SetEndAt sets the "end_at" field.
func (spu *SubscribePauseUpdate) SetEndAt(t time.Time) *SubscribePauseUpdate {
	spu.mutation.SetEndAt(t)
	return spu
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableEndAt(t *time.Time) *SubscribePauseUpdate {
	if t != nil {
		spu.SetEndAt(*t)
	}
	return spu
}

// ClearEndAt clears the value of the "end_at" field.
func (spu *SubscribePauseUpdate) ClearEndAt() *SubscribePauseUpdate {
	spu.mutation.ClearEndAt()
	return spu
}

// SetDays sets the "days" field.
func (spu *SubscribePauseUpdate) SetDays(i int) *SubscribePauseUpdate {
	spu.mutation.ResetDays()
	spu.mutation.SetDays(i)
	return spu
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableDays(i *int) *SubscribePauseUpdate {
	if i != nil {
		spu.SetDays(*i)
	}
	return spu
}

// AddDays adds i to the "days" field.
func (spu *SubscribePauseUpdate) AddDays(i int) *SubscribePauseUpdate {
	spu.mutation.AddDays(i)
	return spu
}

// ClearDays clears the value of the "days" field.
func (spu *SubscribePauseUpdate) ClearDays() *SubscribePauseUpdate {
	spu.mutation.ClearDays()
	return spu
}

// SetEndEmployeeID sets the "end_employee_id" field.
func (spu *SubscribePauseUpdate) SetEndEmployeeID(u uint64) *SubscribePauseUpdate {
	spu.mutation.SetEndEmployeeID(u)
	return spu
}

// SetNillableEndEmployeeID sets the "end_employee_id" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableEndEmployeeID(u *uint64) *SubscribePauseUpdate {
	if u != nil {
		spu.SetEndEmployeeID(*u)
	}
	return spu
}

// ClearEndEmployeeID clears the value of the "end_employee_id" field.
func (spu *SubscribePauseUpdate) ClearEndEmployeeID() *SubscribePauseUpdate {
	spu.mutation.ClearEndEmployeeID()
	return spu
}

// SetOverdueDays sets the "overdue_days" field.
func (spu *SubscribePauseUpdate) SetOverdueDays(i int) *SubscribePauseUpdate {
	spu.mutation.ResetOverdueDays()
	spu.mutation.SetOverdueDays(i)
	return spu
}

// SetNillableOverdueDays sets the "overdue_days" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableOverdueDays(i *int) *SubscribePauseUpdate {
	if i != nil {
		spu.SetOverdueDays(*i)
	}
	return spu
}

// AddOverdueDays adds i to the "overdue_days" field.
func (spu *SubscribePauseUpdate) AddOverdueDays(i int) *SubscribePauseUpdate {
	spu.mutation.AddOverdueDays(i)
	return spu
}

// SetEndModifier sets the "end_modifier" field.
func (spu *SubscribePauseUpdate) SetEndModifier(m *model.Modifier) *SubscribePauseUpdate {
	spu.mutation.SetEndModifier(m)
	return spu
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (spu *SubscribePauseUpdate) ClearEndModifier() *SubscribePauseUpdate {
	spu.mutation.ClearEndModifier()
	return spu
}

// SetPauseOverdue sets the "pause_overdue" field.
func (spu *SubscribePauseUpdate) SetPauseOverdue(b bool) *SubscribePauseUpdate {
	spu.mutation.SetPauseOverdue(b)
	return spu
}

// SetNillablePauseOverdue sets the "pause_overdue" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillablePauseOverdue(b *bool) *SubscribePauseUpdate {
	if b != nil {
		spu.SetPauseOverdue(*b)
	}
	return spu
}

// SetSuspendDays sets the "suspend_days" field.
func (spu *SubscribePauseUpdate) SetSuspendDays(i int) *SubscribePauseUpdate {
	spu.mutation.ResetSuspendDays()
	spu.mutation.SetSuspendDays(i)
	return spu
}

// SetNillableSuspendDays sets the "suspend_days" field if the given value is not nil.
func (spu *SubscribePauseUpdate) SetNillableSuspendDays(i *int) *SubscribePauseUpdate {
	if i != nil {
		spu.SetSuspendDays(*i)
	}
	return spu
}

// AddSuspendDays adds i to the "suspend_days" field.
func (spu *SubscribePauseUpdate) AddSuspendDays(i int) *SubscribePauseUpdate {
	spu.mutation.AddSuspendDays(i)
	return spu
}

// SetRider sets the "rider" edge to the Rider entity.
func (spu *SubscribePauseUpdate) SetRider(r *Rider) *SubscribePauseUpdate {
	return spu.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (spu *SubscribePauseUpdate) SetEmployee(e *Employee) *SubscribePauseUpdate {
	return spu.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (spu *SubscribePauseUpdate) SetCity(c *City) *SubscribePauseUpdate {
	return spu.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (spu *SubscribePauseUpdate) SetStore(s *Store) *SubscribePauseUpdate {
	return spu.SetStoreID(s.ID)
}

// SetEndStore sets the "endStore" edge to the Store entity.
func (spu *SubscribePauseUpdate) SetEndStore(s *Store) *SubscribePauseUpdate {
	return spu.SetEndStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (spu *SubscribePauseUpdate) SetCabinet(c *Cabinet) *SubscribePauseUpdate {
	return spu.SetCabinetID(c.ID)
}

// SetEndCabinet sets the "endCabinet" edge to the Cabinet entity.
func (spu *SubscribePauseUpdate) SetEndCabinet(c *Cabinet) *SubscribePauseUpdate {
	return spu.SetEndCabinetID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (spu *SubscribePauseUpdate) SetSubscribe(s *Subscribe) *SubscribePauseUpdate {
	return spu.SetSubscribeID(s.ID)
}

// SetEndEmployee sets the "end_employee" edge to the Employee entity.
func (spu *SubscribePauseUpdate) SetEndEmployee(e *Employee) *SubscribePauseUpdate {
	return spu.SetEndEmployeeID(e.ID)
}

// AddSuspendIDs adds the "suspends" edge to the SubscribeSuspend entity by IDs.
func (spu *SubscribePauseUpdate) AddSuspendIDs(ids ...uint64) *SubscribePauseUpdate {
	spu.mutation.AddSuspendIDs(ids...)
	return spu
}

// AddSuspends adds the "suspends" edges to the SubscribeSuspend entity.
func (spu *SubscribePauseUpdate) AddSuspends(s ...*SubscribeSuspend) *SubscribePauseUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSuspendIDs(ids...)
}

// Mutation returns the SubscribePauseMutation object of the builder.
func (spu *SubscribePauseUpdate) Mutation() *SubscribePauseMutation {
	return spu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (spu *SubscribePauseUpdate) ClearRider() *SubscribePauseUpdate {
	spu.mutation.ClearRider()
	return spu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (spu *SubscribePauseUpdate) ClearEmployee() *SubscribePauseUpdate {
	spu.mutation.ClearEmployee()
	return spu
}

// ClearCity clears the "city" edge to the City entity.
func (spu *SubscribePauseUpdate) ClearCity() *SubscribePauseUpdate {
	spu.mutation.ClearCity()
	return spu
}

// ClearStore clears the "store" edge to the Store entity.
func (spu *SubscribePauseUpdate) ClearStore() *SubscribePauseUpdate {
	spu.mutation.ClearStore()
	return spu
}

// ClearEndStore clears the "endStore" edge to the Store entity.
func (spu *SubscribePauseUpdate) ClearEndStore() *SubscribePauseUpdate {
	spu.mutation.ClearEndStore()
	return spu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (spu *SubscribePauseUpdate) ClearCabinet() *SubscribePauseUpdate {
	spu.mutation.ClearCabinet()
	return spu
}

// ClearEndCabinet clears the "endCabinet" edge to the Cabinet entity.
func (spu *SubscribePauseUpdate) ClearEndCabinet() *SubscribePauseUpdate {
	spu.mutation.ClearEndCabinet()
	return spu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (spu *SubscribePauseUpdate) ClearSubscribe() *SubscribePauseUpdate {
	spu.mutation.ClearSubscribe()
	return spu
}

// ClearEndEmployee clears the "end_employee" edge to the Employee entity.
func (spu *SubscribePauseUpdate) ClearEndEmployee() *SubscribePauseUpdate {
	spu.mutation.ClearEndEmployee()
	return spu
}

// ClearSuspends clears all "suspends" edges to the SubscribeSuspend entity.
func (spu *SubscribePauseUpdate) ClearSuspends() *SubscribePauseUpdate {
	spu.mutation.ClearSuspends()
	return spu
}

// RemoveSuspendIDs removes the "suspends" edge to SubscribeSuspend entities by IDs.
func (spu *SubscribePauseUpdate) RemoveSuspendIDs(ids ...uint64) *SubscribePauseUpdate {
	spu.mutation.RemoveSuspendIDs(ids...)
	return spu
}

// RemoveSuspends removes "suspends" edges to SubscribeSuspend entities.
func (spu *SubscribePauseUpdate) RemoveSuspends(s ...*SubscribeSuspend) *SubscribePauseUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSuspendIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SubscribePauseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := spu.defaults(); err != nil {
		return 0, err
	}
	if len(spu.hooks) == 0 {
		if err = spu.check(); err != nil {
			return 0, err
		}
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribePauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spu.check(); err != nil {
				return 0, err
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SubscribePauseUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SubscribePauseUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SubscribePauseUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SubscribePauseUpdate) defaults() error {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		if subscribepause.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribepause.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribepause.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spu *SubscribePauseUpdate) check() error {
	if _, ok := spu.mutation.RiderID(); spu.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribePause.rider"`)
	}
	if _, ok := spu.mutation.SubscribeID(); spu.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribePause.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *SubscribePauseUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribePauseUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *SubscribePauseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldUpdatedAt,
		})
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldDeletedAt,
		})
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribepause.FieldDeletedAt,
		})
	}
	if spu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldCreator,
		})
	}
	if value, ok := spu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldLastModifier,
		})
	}
	if spu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldLastModifier,
		})
	}
	if value, ok := spu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribepause.FieldRemark,
		})
	}
	if spu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribepause.FieldRemark,
		})
	}
	if value, ok := spu.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldStartAt,
		})
	}
	if value, ok := spu.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldEndAt,
		})
	}
	if spu.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribepause.FieldEndAt,
		})
	}
	if value, ok := spu.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldDays,
		})
	}
	if value, ok := spu.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldDays,
		})
	}
	if spu.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: subscribepause.FieldDays,
		})
	}
	if value, ok := spu.mutation.OverdueDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldOverdueDays,
		})
	}
	if value, ok := spu.mutation.AddedOverdueDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldOverdueDays,
		})
	}
	if value, ok := spu.mutation.EndModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldEndModifier,
		})
	}
	if spu.mutation.EndModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldEndModifier,
		})
	}
	if value, ok := spu.mutation.PauseOverdue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subscribepause.FieldPauseOverdue,
		})
	}
	if value, ok := spu.mutation.SuspendDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldSuspendDays,
		})
	}
	if value, ok := spu.mutation.AddedSuspendDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldSuspendDays,
		})
	}
	if spu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CityTable,
			Columns: []string{subscribepause.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CityTable,
			Columns: []string{subscribepause.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.StoreTable,
			Columns: []string{subscribepause.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.StoreTable,
			Columns: []string{subscribepause.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.EndStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndStoreTable,
			Columns: []string{subscribepause.EndStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.EndStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndStoreTable,
			Columns: []string{subscribepause.EndStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CabinetTable,
			Columns: []string{subscribepause.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CabinetTable,
			Columns: []string{subscribepause.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.EndCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndCabinetTable,
			Columns: []string{subscribepause.EndCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.EndCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndCabinetTable,
			Columns: []string{subscribepause.EndCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.EndEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndEmployeeTable,
			Columns: []string{subscribepause.EndEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.EndEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndEmployeeTable,
			Columns: []string{subscribepause.EndEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSuspendsIDs(); len(nodes) > 0 && !spu.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SuspendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = spu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribepause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SubscribePauseUpdateOne is the builder for updating a single SubscribePause entity.
type SubscribePauseUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscribePauseMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SubscribePauseUpdateOne) SetUpdatedAt(t time.Time) *SubscribePauseUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SubscribePauseUpdateOne) SetDeletedAt(t time.Time) *SubscribePauseUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscribePauseUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SubscribePauseUpdateOne) ClearDeletedAt() *SubscribePauseUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetLastModifier sets the "last_modifier" field.
func (spuo *SubscribePauseUpdateOne) SetLastModifier(m *model.Modifier) *SubscribePauseUpdateOne {
	spuo.mutation.SetLastModifier(m)
	return spuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (spuo *SubscribePauseUpdateOne) ClearLastModifier() *SubscribePauseUpdateOne {
	spuo.mutation.ClearLastModifier()
	return spuo
}

// SetRemark sets the "remark" field.
func (spuo *SubscribePauseUpdateOne) SetRemark(s string) *SubscribePauseUpdateOne {
	spuo.mutation.SetRemark(s)
	return spuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableRemark(s *string) *SubscribePauseUpdateOne {
	if s != nil {
		spuo.SetRemark(*s)
	}
	return spuo
}

// ClearRemark clears the value of the "remark" field.
func (spuo *SubscribePauseUpdateOne) ClearRemark() *SubscribePauseUpdateOne {
	spuo.mutation.ClearRemark()
	return spuo
}

// SetRiderID sets the "rider_id" field.
func (spuo *SubscribePauseUpdateOne) SetRiderID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetRiderID(u)
	return spuo
}

// SetEmployeeID sets the "employee_id" field.
func (spuo *SubscribePauseUpdateOne) SetEmployeeID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetEmployeeID(u)
	return spuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableEmployeeID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetEmployeeID(*u)
	}
	return spuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (spuo *SubscribePauseUpdateOne) ClearEmployeeID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEmployeeID()
	return spuo
}

// SetCityID sets the "city_id" field.
func (spuo *SubscribePauseUpdateOne) SetCityID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetCityID(u)
	return spuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableCityID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetCityID(*u)
	}
	return spuo
}

// ClearCityID clears the value of the "city_id" field.
func (spuo *SubscribePauseUpdateOne) ClearCityID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearCityID()
	return spuo
}

// SetStoreID sets the "store_id" field.
func (spuo *SubscribePauseUpdateOne) SetStoreID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetStoreID(u)
	return spuo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableStoreID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetStoreID(*u)
	}
	return spuo
}

// ClearStoreID clears the value of the "store_id" field.
func (spuo *SubscribePauseUpdateOne) ClearStoreID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearStoreID()
	return spuo
}

// SetEndStoreID sets the "end_store_id" field.
func (spuo *SubscribePauseUpdateOne) SetEndStoreID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetEndStoreID(u)
	return spuo
}

// SetNillableEndStoreID sets the "end_store_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableEndStoreID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetEndStoreID(*u)
	}
	return spuo
}

// ClearEndStoreID clears the value of the "end_store_id" field.
func (spuo *SubscribePauseUpdateOne) ClearEndStoreID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndStoreID()
	return spuo
}

// SetCabinetID sets the "cabinet_id" field.
func (spuo *SubscribePauseUpdateOne) SetCabinetID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetCabinetID(u)
	return spuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableCabinetID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetCabinetID(*u)
	}
	return spuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (spuo *SubscribePauseUpdateOne) ClearCabinetID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearCabinetID()
	return spuo
}

// SetEndCabinetID sets the "end_cabinet_id" field.
func (spuo *SubscribePauseUpdateOne) SetEndCabinetID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetEndCabinetID(u)
	return spuo
}

// SetNillableEndCabinetID sets the "end_cabinet_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableEndCabinetID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetEndCabinetID(*u)
	}
	return spuo
}

// ClearEndCabinetID clears the value of the "end_cabinet_id" field.
func (spuo *SubscribePauseUpdateOne) ClearEndCabinetID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndCabinetID()
	return spuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (spuo *SubscribePauseUpdateOne) SetSubscribeID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetSubscribeID(u)
	return spuo
}

// SetStartAt sets the "start_at" field.
func (spuo *SubscribePauseUpdateOne) SetStartAt(t time.Time) *SubscribePauseUpdateOne {
	spuo.mutation.SetStartAt(t)
	return spuo
}

// SetEndAt sets the "end_at" field.
func (spuo *SubscribePauseUpdateOne) SetEndAt(t time.Time) *SubscribePauseUpdateOne {
	spuo.mutation.SetEndAt(t)
	return spuo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableEndAt(t *time.Time) *SubscribePauseUpdateOne {
	if t != nil {
		spuo.SetEndAt(*t)
	}
	return spuo
}

// ClearEndAt clears the value of the "end_at" field.
func (spuo *SubscribePauseUpdateOne) ClearEndAt() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndAt()
	return spuo
}

// SetDays sets the "days" field.
func (spuo *SubscribePauseUpdateOne) SetDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.ResetDays()
	spuo.mutation.SetDays(i)
	return spuo
}

// SetNillableDays sets the "days" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableDays(i *int) *SubscribePauseUpdateOne {
	if i != nil {
		spuo.SetDays(*i)
	}
	return spuo
}

// AddDays adds i to the "days" field.
func (spuo *SubscribePauseUpdateOne) AddDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.AddDays(i)
	return spuo
}

// ClearDays clears the value of the "days" field.
func (spuo *SubscribePauseUpdateOne) ClearDays() *SubscribePauseUpdateOne {
	spuo.mutation.ClearDays()
	return spuo
}

// SetEndEmployeeID sets the "end_employee_id" field.
func (spuo *SubscribePauseUpdateOne) SetEndEmployeeID(u uint64) *SubscribePauseUpdateOne {
	spuo.mutation.SetEndEmployeeID(u)
	return spuo
}

// SetNillableEndEmployeeID sets the "end_employee_id" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableEndEmployeeID(u *uint64) *SubscribePauseUpdateOne {
	if u != nil {
		spuo.SetEndEmployeeID(*u)
	}
	return spuo
}

// ClearEndEmployeeID clears the value of the "end_employee_id" field.
func (spuo *SubscribePauseUpdateOne) ClearEndEmployeeID() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndEmployeeID()
	return spuo
}

// SetOverdueDays sets the "overdue_days" field.
func (spuo *SubscribePauseUpdateOne) SetOverdueDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.ResetOverdueDays()
	spuo.mutation.SetOverdueDays(i)
	return spuo
}

// SetNillableOverdueDays sets the "overdue_days" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableOverdueDays(i *int) *SubscribePauseUpdateOne {
	if i != nil {
		spuo.SetOverdueDays(*i)
	}
	return spuo
}

// AddOverdueDays adds i to the "overdue_days" field.
func (spuo *SubscribePauseUpdateOne) AddOverdueDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.AddOverdueDays(i)
	return spuo
}

// SetEndModifier sets the "end_modifier" field.
func (spuo *SubscribePauseUpdateOne) SetEndModifier(m *model.Modifier) *SubscribePauseUpdateOne {
	spuo.mutation.SetEndModifier(m)
	return spuo
}

// ClearEndModifier clears the value of the "end_modifier" field.
func (spuo *SubscribePauseUpdateOne) ClearEndModifier() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndModifier()
	return spuo
}

// SetPauseOverdue sets the "pause_overdue" field.
func (spuo *SubscribePauseUpdateOne) SetPauseOverdue(b bool) *SubscribePauseUpdateOne {
	spuo.mutation.SetPauseOverdue(b)
	return spuo
}

// SetNillablePauseOverdue sets the "pause_overdue" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillablePauseOverdue(b *bool) *SubscribePauseUpdateOne {
	if b != nil {
		spuo.SetPauseOverdue(*b)
	}
	return spuo
}

// SetSuspendDays sets the "suspend_days" field.
func (spuo *SubscribePauseUpdateOne) SetSuspendDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.ResetSuspendDays()
	spuo.mutation.SetSuspendDays(i)
	return spuo
}

// SetNillableSuspendDays sets the "suspend_days" field if the given value is not nil.
func (spuo *SubscribePauseUpdateOne) SetNillableSuspendDays(i *int) *SubscribePauseUpdateOne {
	if i != nil {
		spuo.SetSuspendDays(*i)
	}
	return spuo
}

// AddSuspendDays adds i to the "suspend_days" field.
func (spuo *SubscribePauseUpdateOne) AddSuspendDays(i int) *SubscribePauseUpdateOne {
	spuo.mutation.AddSuspendDays(i)
	return spuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (spuo *SubscribePauseUpdateOne) SetRider(r *Rider) *SubscribePauseUpdateOne {
	return spuo.SetRiderID(r.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (spuo *SubscribePauseUpdateOne) SetEmployee(e *Employee) *SubscribePauseUpdateOne {
	return spuo.SetEmployeeID(e.ID)
}

// SetCity sets the "city" edge to the City entity.
func (spuo *SubscribePauseUpdateOne) SetCity(c *City) *SubscribePauseUpdateOne {
	return spuo.SetCityID(c.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (spuo *SubscribePauseUpdateOne) SetStore(s *Store) *SubscribePauseUpdateOne {
	return spuo.SetStoreID(s.ID)
}

// SetEndStore sets the "endStore" edge to the Store entity.
func (spuo *SubscribePauseUpdateOne) SetEndStore(s *Store) *SubscribePauseUpdateOne {
	return spuo.SetEndStoreID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (spuo *SubscribePauseUpdateOne) SetCabinet(c *Cabinet) *SubscribePauseUpdateOne {
	return spuo.SetCabinetID(c.ID)
}

// SetEndCabinet sets the "endCabinet" edge to the Cabinet entity.
func (spuo *SubscribePauseUpdateOne) SetEndCabinet(c *Cabinet) *SubscribePauseUpdateOne {
	return spuo.SetEndCabinetID(c.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (spuo *SubscribePauseUpdateOne) SetSubscribe(s *Subscribe) *SubscribePauseUpdateOne {
	return spuo.SetSubscribeID(s.ID)
}

// SetEndEmployee sets the "end_employee" edge to the Employee entity.
func (spuo *SubscribePauseUpdateOne) SetEndEmployee(e *Employee) *SubscribePauseUpdateOne {
	return spuo.SetEndEmployeeID(e.ID)
}

// AddSuspendIDs adds the "suspends" edge to the SubscribeSuspend entity by IDs.
func (spuo *SubscribePauseUpdateOne) AddSuspendIDs(ids ...uint64) *SubscribePauseUpdateOne {
	spuo.mutation.AddSuspendIDs(ids...)
	return spuo
}

// AddSuspends adds the "suspends" edges to the SubscribeSuspend entity.
func (spuo *SubscribePauseUpdateOne) AddSuspends(s ...*SubscribeSuspend) *SubscribePauseUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSuspendIDs(ids...)
}

// Mutation returns the SubscribePauseMutation object of the builder.
func (spuo *SubscribePauseUpdateOne) Mutation() *SubscribePauseMutation {
	return spuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (spuo *SubscribePauseUpdateOne) ClearRider() *SubscribePauseUpdateOne {
	spuo.mutation.ClearRider()
	return spuo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (spuo *SubscribePauseUpdateOne) ClearEmployee() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEmployee()
	return spuo
}

// ClearCity clears the "city" edge to the City entity.
func (spuo *SubscribePauseUpdateOne) ClearCity() *SubscribePauseUpdateOne {
	spuo.mutation.ClearCity()
	return spuo
}

// ClearStore clears the "store" edge to the Store entity.
func (spuo *SubscribePauseUpdateOne) ClearStore() *SubscribePauseUpdateOne {
	spuo.mutation.ClearStore()
	return spuo
}

// ClearEndStore clears the "endStore" edge to the Store entity.
func (spuo *SubscribePauseUpdateOne) ClearEndStore() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndStore()
	return spuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (spuo *SubscribePauseUpdateOne) ClearCabinet() *SubscribePauseUpdateOne {
	spuo.mutation.ClearCabinet()
	return spuo
}

// ClearEndCabinet clears the "endCabinet" edge to the Cabinet entity.
func (spuo *SubscribePauseUpdateOne) ClearEndCabinet() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndCabinet()
	return spuo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (spuo *SubscribePauseUpdateOne) ClearSubscribe() *SubscribePauseUpdateOne {
	spuo.mutation.ClearSubscribe()
	return spuo
}

// ClearEndEmployee clears the "end_employee" edge to the Employee entity.
func (spuo *SubscribePauseUpdateOne) ClearEndEmployee() *SubscribePauseUpdateOne {
	spuo.mutation.ClearEndEmployee()
	return spuo
}

// ClearSuspends clears all "suspends" edges to the SubscribeSuspend entity.
func (spuo *SubscribePauseUpdateOne) ClearSuspends() *SubscribePauseUpdateOne {
	spuo.mutation.ClearSuspends()
	return spuo
}

// RemoveSuspendIDs removes the "suspends" edge to SubscribeSuspend entities by IDs.
func (spuo *SubscribePauseUpdateOne) RemoveSuspendIDs(ids ...uint64) *SubscribePauseUpdateOne {
	spuo.mutation.RemoveSuspendIDs(ids...)
	return spuo
}

// RemoveSuspends removes "suspends" edges to SubscribeSuspend entities.
func (spuo *SubscribePauseUpdateOne) RemoveSuspends(s ...*SubscribeSuspend) *SubscribePauseUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSuspendIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SubscribePauseUpdateOne) Select(field string, fields ...string) *SubscribePauseUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SubscribePause entity.
func (spuo *SubscribePauseUpdateOne) Save(ctx context.Context) (*SubscribePause, error) {
	var (
		err  error
		node *SubscribePause
	)
	if err := spuo.defaults(); err != nil {
		return nil, err
	}
	if len(spuo.hooks) == 0 {
		if err = spuo.check(); err != nil {
			return nil, err
		}
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubscribePauseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spuo.check(); err != nil {
				return nil, err
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, spuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SubscribePause)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubscribePauseMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SubscribePauseUpdateOne) SaveX(ctx context.Context) *SubscribePause {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SubscribePauseUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SubscribePauseUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SubscribePauseUpdateOne) defaults() error {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		if subscribepause.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscribepause.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := subscribepause.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SubscribePauseUpdateOne) check() error {
	if _, ok := spuo.mutation.RiderID(); spuo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribePause.rider"`)
	}
	if _, ok := spuo.mutation.SubscribeID(); spuo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "SubscribePause.subscribe"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *SubscribePauseUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscribePauseUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *SubscribePauseUpdateOne) sqlSave(ctx context.Context) (_node *SubscribePause, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribepause.Table,
			Columns: subscribepause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribepause.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscribePause.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribepause.FieldID)
		for _, f := range fields {
			if !subscribepause.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscribepause.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldUpdatedAt,
		})
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldDeletedAt,
		})
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribepause.FieldDeletedAt,
		})
	}
	if spuo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldCreator,
		})
	}
	if value, ok := spuo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldLastModifier,
		})
	}
	if spuo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldLastModifier,
		})
	}
	if value, ok := spuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subscribepause.FieldRemark,
		})
	}
	if spuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: subscribepause.FieldRemark,
		})
	}
	if value, ok := spuo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldStartAt,
		})
	}
	if value, ok := spuo.mutation.EndAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: subscribepause.FieldEndAt,
		})
	}
	if spuo.mutation.EndAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: subscribepause.FieldEndAt,
		})
	}
	if value, ok := spuo.mutation.Days(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldDays,
		})
	}
	if value, ok := spuo.mutation.AddedDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldDays,
		})
	}
	if spuo.mutation.DaysCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: subscribepause.FieldDays,
		})
	}
	if value, ok := spuo.mutation.OverdueDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldOverdueDays,
		})
	}
	if value, ok := spuo.mutation.AddedOverdueDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldOverdueDays,
		})
	}
	if value, ok := spuo.mutation.EndModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: subscribepause.FieldEndModifier,
		})
	}
	if spuo.mutation.EndModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: subscribepause.FieldEndModifier,
		})
	}
	if value, ok := spuo.mutation.PauseOverdue(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subscribepause.FieldPauseOverdue,
		})
	}
	if value, ok := spuo.mutation.SuspendDays(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldSuspendDays,
		})
	}
	if value, ok := spuo.mutation.AddedSuspendDays(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subscribepause.FieldSuspendDays,
		})
	}
	if spuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.RiderTable,
			Columns: []string{subscribepause.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EmployeeTable,
			Columns: []string{subscribepause.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CityTable,
			Columns: []string{subscribepause.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CityTable,
			Columns: []string{subscribepause.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.StoreTable,
			Columns: []string{subscribepause.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.StoreTable,
			Columns: []string{subscribepause.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.EndStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndStoreTable,
			Columns: []string{subscribepause.EndStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.EndStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndStoreTable,
			Columns: []string{subscribepause.EndStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CabinetTable,
			Columns: []string{subscribepause.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.CabinetTable,
			Columns: []string{subscribepause.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.EndCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndCabinetTable,
			Columns: []string{subscribepause.EndCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.EndCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndCabinetTable,
			Columns: []string{subscribepause.EndCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribepause.SubscribeTable,
			Columns: []string{subscribepause.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.EndEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndEmployeeTable,
			Columns: []string{subscribepause.EndEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.EndEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribepause.EndEmployeeTable,
			Columns: []string{subscribepause.EndEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSuspendsIDs(); len(nodes) > 0 && !spuo.mutation.SuspendsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SuspendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subscribepause.SuspendsTable,
			Columns: []string{subscribepause.SuspendsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribesuspend.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = spuo.modifiers
	_node = &SubscribePause{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribepause.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
