// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/attendance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/storegroup"
)

// EmployeeQuery is the builder for querying Employee entities.
type EmployeeQuery struct {
	config
	ctx             *QueryContext
	order           []employee.OrderOption
	inters          []Interceptor
	predicates      []predicate.Employee
	withCity        *CityQuery
	withGroup       *StoreGroupQuery
	withStore       *StoreQuery
	withAttendances *AttendanceQuery
	withStocks      *StockQuery
	withExchanges   *ExchangeQuery
	withCommissions *CommissionQuery
	withAssistances *AssistanceQuery
	withStores      *StoreQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmployeeQuery builder.
func (eq *EmployeeQuery) Where(ps ...predicate.Employee) *EmployeeQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EmployeeQuery) Limit(limit int) *EmployeeQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EmployeeQuery) Offset(offset int) *EmployeeQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EmployeeQuery) Unique(unique bool) *EmployeeQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EmployeeQuery) Order(o ...employee.OrderOption) *EmployeeQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryCity chains the current query on the "city" edge.
func (eq *EmployeeQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, employee.CityTable, employee.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (eq *EmployeeQuery) QueryGroup() *StoreGroupQuery {
	query := (&StoreGroupClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(storegroup.Table, storegroup.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, employee.GroupTable, employee.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (eq *EmployeeQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, employee.StoreTable, employee.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttendances chains the current query on the "attendances" edge.
func (eq *EmployeeQuery) QueryAttendances() *AttendanceQuery {
	query := (&AttendanceClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(attendance.Table, attendance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AttendancesTable, employee.AttendancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (eq *EmployeeQuery) QueryStocks() *StockQuery {
	query := (&StockClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.StocksTable, employee.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExchanges chains the current query on the "exchanges" edge.
func (eq *EmployeeQuery) QueryExchanges() *ExchangeQuery {
	query := (&ExchangeClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.ExchangesTable, employee.ExchangesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCommissions chains the current query on the "commissions" edge.
func (eq *EmployeeQuery) QueryCommissions() *CommissionQuery {
	query := (&CommissionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(commission.Table, commission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.CommissionsTable, employee.CommissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssistances chains the current query on the "assistances" edge.
func (eq *EmployeeQuery) QueryAssistances() *AssistanceQuery {
	query := (&AssistanceClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(assistance.Table, assistance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AssistancesTable, employee.AssistancesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStores chains the current query on the "stores" edge.
func (eq *EmployeeQuery) QueryStores() *StoreQuery {
	query := (&StoreClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, employee.StoresTable, employee.StoresPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Employee entity from the query.
// Returns a *NotFoundError when no Employee was found.
func (eq *EmployeeQuery) First(ctx context.Context) (*Employee, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{employee.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EmployeeQuery) FirstX(ctx context.Context) *Employee {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Employee ID from the query.
// Returns a *NotFoundError when no Employee ID was found.
func (eq *EmployeeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{employee.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EmployeeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Employee entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Employee entity is found.
// Returns a *NotFoundError when no Employee entities are found.
func (eq *EmployeeQuery) Only(ctx context.Context) (*Employee, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{employee.Label}
	default:
		return nil, &NotSingularError{employee.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EmployeeQuery) OnlyX(ctx context.Context) *Employee {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Employee ID in the query.
// Returns a *NotSingularError when more than one Employee ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EmployeeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{employee.Label}
	default:
		err = &NotSingularError{employee.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EmployeeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Employees.
func (eq *EmployeeQuery) All(ctx context.Context) ([]*Employee, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Employee, *EmployeeQuery]()
	return withInterceptors[[]*Employee](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EmployeeQuery) AllX(ctx context.Context) []*Employee {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Employee IDs.
func (eq *EmployeeQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(employee.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EmployeeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EmployeeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EmployeeQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EmployeeQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EmployeeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EmployeeQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmployeeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EmployeeQuery) Clone() *EmployeeQuery {
	if eq == nil {
		return nil
	}
	return &EmployeeQuery{
		config:          eq.config,
		ctx:             eq.ctx.Clone(),
		order:           append([]employee.OrderOption{}, eq.order...),
		inters:          append([]Interceptor{}, eq.inters...),
		predicates:      append([]predicate.Employee{}, eq.predicates...),
		withCity:        eq.withCity.Clone(),
		withGroup:       eq.withGroup.Clone(),
		withStore:       eq.withStore.Clone(),
		withAttendances: eq.withAttendances.Clone(),
		withStocks:      eq.withStocks.Clone(),
		withExchanges:   eq.withExchanges.Clone(),
		withCommissions: eq.withCommissions.Clone(),
		withAssistances: eq.withAssistances.Clone(),
		withStores:      eq.withStores.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithCity(opts ...func(*CityQuery)) *EmployeeQuery {
	query := (&CityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCity = query
	return eq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithGroup(opts ...func(*StoreGroupQuery)) *EmployeeQuery {
	query := (&StoreGroupClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withGroup = query
	return eq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithStore(opts ...func(*StoreQuery)) *EmployeeQuery {
	query := (&StoreClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStore = query
	return eq
}

// WithAttendances tells the query-builder to eager-load the nodes that are connected to
// the "attendances" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithAttendances(opts ...func(*AttendanceQuery)) *EmployeeQuery {
	query := (&AttendanceClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAttendances = query
	return eq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithStocks(opts ...func(*StockQuery)) *EmployeeQuery {
	query := (&StockClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStocks = query
	return eq
}

// WithExchanges tells the query-builder to eager-load the nodes that are connected to
// the "exchanges" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithExchanges(opts ...func(*ExchangeQuery)) *EmployeeQuery {
	query := (&ExchangeClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withExchanges = query
	return eq
}

// WithCommissions tells the query-builder to eager-load the nodes that are connected to
// the "commissions" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithCommissions(opts ...func(*CommissionQuery)) *EmployeeQuery {
	query := (&CommissionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCommissions = query
	return eq
}

// WithAssistances tells the query-builder to eager-load the nodes that are connected to
// the "assistances" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithAssistances(opts ...func(*AssistanceQuery)) *EmployeeQuery {
	query := (&AssistanceClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAssistances = query
	return eq
}

// WithStores tells the query-builder to eager-load the nodes that are connected to
// the "stores" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithStores(opts ...func(*StoreQuery)) *EmployeeQuery {
	query := (&StoreClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStores = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Employee.Query().
//		GroupBy(employee.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EmployeeQuery) GroupBy(field string, fields ...string) *EmployeeGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmployeeGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = employee.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Employee.Query().
//		Select(employee.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EmployeeQuery) Select(fields ...string) *EmployeeSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EmployeeSelect{EmployeeQuery: eq}
	sbuild.label = employee.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmployeeSelect configured with the given aggregations.
func (eq *EmployeeQuery) Aggregate(fns ...AggregateFunc) *EmployeeSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EmployeeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !employee.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EmployeeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Employee, error) {
	var (
		nodes       = []*Employee{}
		_spec       = eq.querySpec()
		loadedTypes = [9]bool{
			eq.withCity != nil,
			eq.withGroup != nil,
			eq.withStore != nil,
			eq.withAttendances != nil,
			eq.withStocks != nil,
			eq.withExchanges != nil,
			eq.withCommissions != nil,
			eq.withAssistances != nil,
			eq.withStores != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Employee).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Employee{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withCity; query != nil {
		if err := eq.loadCity(ctx, query, nodes, nil,
			func(n *Employee, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withGroup; query != nil {
		if err := eq.loadGroup(ctx, query, nodes, nil,
			func(n *Employee, e *StoreGroup) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStore; query != nil {
		if err := eq.loadStore(ctx, query, nodes, nil,
			func(n *Employee, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAttendances; query != nil {
		if err := eq.loadAttendances(ctx, query, nodes,
			func(n *Employee) { n.Edges.Attendances = []*Attendance{} },
			func(n *Employee, e *Attendance) { n.Edges.Attendances = append(n.Edges.Attendances, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStocks; query != nil {
		if err := eq.loadStocks(ctx, query, nodes,
			func(n *Employee) { n.Edges.Stocks = []*Stock{} },
			func(n *Employee, e *Stock) { n.Edges.Stocks = append(n.Edges.Stocks, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withExchanges; query != nil {
		if err := eq.loadExchanges(ctx, query, nodes,
			func(n *Employee) { n.Edges.Exchanges = []*Exchange{} },
			func(n *Employee, e *Exchange) { n.Edges.Exchanges = append(n.Edges.Exchanges, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCommissions; query != nil {
		if err := eq.loadCommissions(ctx, query, nodes,
			func(n *Employee) { n.Edges.Commissions = []*Commission{} },
			func(n *Employee, e *Commission) { n.Edges.Commissions = append(n.Edges.Commissions, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAssistances; query != nil {
		if err := eq.loadAssistances(ctx, query, nodes,
			func(n *Employee) { n.Edges.Assistances = []*Assistance{} },
			func(n *Employee, e *Assistance) { n.Edges.Assistances = append(n.Edges.Assistances, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStores; query != nil {
		if err := eq.loadStores(ctx, query, nodes,
			func(n *Employee) { n.Edges.Stores = []*Store{} },
			func(n *Employee, e *Store) { n.Edges.Stores = append(n.Edges.Stores, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EmployeeQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Employee)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EmployeeQuery) loadGroup(ctx context.Context, query *StoreGroupQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *StoreGroup)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Employee)
	for i := range nodes {
		if nodes[i].GroupID == nil {
			continue
		}
		fk := *nodes[i].GroupID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(storegroup.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EmployeeQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Store)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(store.FieldEmployeeID)
	}
	query.Where(predicate.Store(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.StoreColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "employee_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadAttendances(ctx context.Context, query *AttendanceQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Attendance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(attendance.FieldEmployeeID)
	}
	query.Where(predicate.Attendance(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.AttendancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadStocks(ctx context.Context, query *StockQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Stock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(stock.FieldEmployeeID)
	}
	query.Where(predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.StocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "employee_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadExchanges(ctx context.Context, query *ExchangeQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Exchange)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(exchange.FieldEmployeeID)
	}
	query.Where(predicate.Exchange(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.ExchangesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "employee_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadCommissions(ctx context.Context, query *CommissionQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Commission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(commission.FieldEmployeeID)
	}
	query.Where(predicate.Commission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.CommissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "employee_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadAssistances(ctx context.Context, query *AssistanceQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Assistance)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(assistance.FieldEmployeeID)
	}
	query.Where(predicate.Assistance(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.AssistancesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		if fk == nil {
			return fmt.Errorf(`foreign-key "employee_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadStores(ctx context.Context, query *StoreQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Store)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Employee)
	nids := make(map[uint64]map[*Employee]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(employee.StoresTable)
		s.Join(joinT).On(s.C(store.FieldID), joinT.C(employee.StoresPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(employee.StoresPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(employee.StoresPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := uint64(values[0].(*sql.NullInt64).Int64)
				inValue := uint64(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Employee]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Store](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "stores" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (eq *EmployeeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EmployeeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for i := range fields {
			if fields[i] != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withCity != nil {
			_spec.Node.AddColumnOnce(employee.FieldCityID)
		}
		if eq.withGroup != nil {
			_spec.Node.AddColumnOnce(employee.FieldGroupID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EmployeeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(employee.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = employee.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EmployeeQuery) Modify(modifiers ...func(s *sql.Selector)) *EmployeeSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

type EmployeeQueryWith string

var (
	EmployeeQueryWithCity        EmployeeQueryWith = "City"
	EmployeeQueryWithGroup       EmployeeQueryWith = "Group"
	EmployeeQueryWithStore       EmployeeQueryWith = "Store"
	EmployeeQueryWithAttendances EmployeeQueryWith = "Attendances"
	EmployeeQueryWithStocks      EmployeeQueryWith = "Stocks"
	EmployeeQueryWithExchanges   EmployeeQueryWith = "Exchanges"
	EmployeeQueryWithCommissions EmployeeQueryWith = "Commissions"
	EmployeeQueryWithAssistances EmployeeQueryWith = "Assistances"
	EmployeeQueryWithStores      EmployeeQueryWith = "Stores"
)

func (eq *EmployeeQuery) With(withEdges ...EmployeeQueryWith) *EmployeeQuery {
	for _, v := range withEdges {
		switch v {
		case EmployeeQueryWithCity:
			eq.WithCity()
		case EmployeeQueryWithGroup:
			eq.WithGroup()
		case EmployeeQueryWithStore:
			eq.WithStore()
		case EmployeeQueryWithAttendances:
			eq.WithAttendances()
		case EmployeeQueryWithStocks:
			eq.WithStocks()
		case EmployeeQueryWithExchanges:
			eq.WithExchanges()
		case EmployeeQueryWithCommissions:
			eq.WithCommissions()
		case EmployeeQueryWithAssistances:
			eq.WithAssistances()
		case EmployeeQueryWithStores:
			eq.WithStores()
		}
	}
	return eq
}

// EmployeeGroupBy is the group-by builder for Employee entities.
type EmployeeGroupBy struct {
	selector
	build *EmployeeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EmployeeGroupBy) Aggregate(fns ...AggregateFunc) *EmployeeGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EmployeeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmployeeQuery, *EmployeeGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EmployeeGroupBy) sqlScan(ctx context.Context, root *EmployeeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmployeeSelect is the builder for selecting fields of Employee entities.
type EmployeeSelect struct {
	*EmployeeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EmployeeSelect) Aggregate(fns ...AggregateFunc) *EmployeeSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EmployeeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmployeeQuery, *EmployeeSelect](ctx, es.EmployeeQuery, es, es.inters, v)
}

func (es *EmployeeSelect) sqlScan(ctx context.Context, root *EmployeeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EmployeeSelect) Modify(modifiers ...func(s *sql.Selector)) *EmployeeSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
