// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodel"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
)

// CabinetCreate is the builder for creating a Cabinet entity.
type CabinetCreate struct {
	config
	mutation *CabinetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CabinetCreate) SetCreatedAt(t time.Time) *CabinetCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableCreatedAt(t *time.Time) *CabinetCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CabinetCreate) SetUpdatedAt(t time.Time) *CabinetCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableUpdatedAt(t *time.Time) *CabinetCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CabinetCreate) SetDeletedAt(t time.Time) *CabinetCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableDeletedAt(t *time.Time) *CabinetCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreator sets the "creator" field.
func (cc *CabinetCreate) SetCreator(m *model.Modifier) *CabinetCreate {
	cc.mutation.SetCreator(m)
	return cc
}

// SetLastModifier sets the "last_modifier" field.
func (cc *CabinetCreate) SetLastModifier(m *model.Modifier) *CabinetCreate {
	cc.mutation.SetLastModifier(m)
	return cc
}

// SetRemark sets the "remark" field.
func (cc *CabinetCreate) SetRemark(s string) *CabinetCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableRemark(s *string) *CabinetCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetBranchID sets the "branch_id" field.
func (cc *CabinetCreate) SetBranchID(u uint64) *CabinetCreate {
	cc.mutation.SetBranchID(u)
	return cc
}

// SetNillableBranchID sets the "branch_id" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableBranchID(u *uint64) *CabinetCreate {
	if u != nil {
		cc.SetBranchID(*u)
	}
	return cc
}

// SetModelID sets the "model_id" field.
func (cc *CabinetCreate) SetModelID(u uint64) *CabinetCreate {
	cc.mutation.SetModelID(u)
	return cc
}

// SetSerial sets the "serial" field.
func (cc *CabinetCreate) SetSerial(s string) *CabinetCreate {
	cc.mutation.SetSerial(s)
	return cc
}

// SetName sets the "name" field.
func (cc *CabinetCreate) SetName(s string) *CabinetCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetDoors sets the "doors" field.
func (cc *CabinetCreate) SetDoors(u uint) *CabinetCreate {
	cc.mutation.SetDoors(u)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CabinetCreate) SetStatus(u uint) *CabinetCreate {
	cc.mutation.SetStatus(u)
	return cc
}

// SetBranch sets the "branch" edge to the Branch entity.
func (cc *CabinetCreate) SetBranch(b *Branch) *CabinetCreate {
	return cc.SetBranchID(b.ID)
}

// SetModel sets the "model" edge to the BatteryModel entity.
func (cc *CabinetCreate) SetModel(b *BatteryModel) *CabinetCreate {
	return cc.SetModelID(b.ID)
}

// Mutation returns the CabinetMutation object of the builder.
func (cc *CabinetCreate) Mutation() *CabinetMutation {
	return cc.mutation
}

// Save creates the Cabinet in the database.
func (cc *CabinetCreate) Save(ctx context.Context) (*Cabinet, error) {
	var (
		err  error
		node *Cabinet
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CabinetCreate) SaveX(ctx context.Context) *Cabinet {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CabinetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CabinetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CabinetCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cabinet.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := cabinet.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CabinetCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Cabinet.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Cabinet.updated_at"`)}
	}
	if _, ok := cc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model_id", err: errors.New(`ent: missing required field "Cabinet.model_id"`)}
	}
	if _, ok := cc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Cabinet.serial"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Cabinet.name"`)}
	}
	if _, ok := cc.mutation.Doors(); !ok {
		return &ValidationError{Name: "doors", err: errors.New(`ent: missing required field "Cabinet.doors"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Cabinet.status"`)}
	}
	if _, ok := cc.mutation.ModelID(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required edge "Cabinet.model"`)}
	}
	return nil
}

func (cc *CabinetCreate) sqlSave(ctx context.Context) (*Cabinet, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (cc *CabinetCreate) createSpec() (*Cabinet, *sqlgraph.CreateSpec) {
	var (
		_node = &Cabinet{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cabinet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinet.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinet.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cabinet.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinet.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := cc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: cabinet.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinet.FieldRemark,
		})
		_node.Remark = &value
	}
	if value, ok := cc.mutation.Serial(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinet.FieldSerial,
		})
		_node.Serial = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: cabinet.FieldName,
		})
		_node.Name = value
	}
	if value, ok := cc.mutation.Doors(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinet.FieldDoors,
		})
		_node.Doors = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: cabinet.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := cc.mutation.BranchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.BranchTable,
			Columns: []string{cabinet.BranchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: branch.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BranchID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ModelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cabinet.ModelTable,
			Columns: []string{cabinet.ModelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: batterymodel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModelID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cabinet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (cc *CabinetCreate) OnConflict(opts ...sql.ConflictOption) *CabinetUpsertOne {
	cc.conflict = opts
	return &CabinetUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cc *CabinetCreate) OnConflictColumns(columns ...string) *CabinetUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CabinetUpsertOne{
		create: cc,
	}
}

type (
	// CabinetUpsertOne is the builder for "upsert"-ing
	//  one Cabinet node.
	CabinetUpsertOne struct {
		create *CabinetCreate
	}

	// CabinetUpsert is the "OnConflict" setter.
	CabinetUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *CabinetUpsert) SetCreatedAt(v time.Time) *CabinetUpsert {
	u.Set(cabinet.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateCreatedAt() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsert) SetUpdatedAt(v time.Time) *CabinetUpsert {
	u.Set(cabinet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateUpdatedAt() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetUpsert) SetDeletedAt(v time.Time) *CabinetUpsert {
	u.Set(cabinet.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateDeletedAt() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetUpsert) ClearDeletedAt() *CabinetUpsert {
	u.SetNull(cabinet.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *CabinetUpsert) SetCreator(v *model.Modifier) *CabinetUpsert {
	u.Set(cabinet.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateCreator() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetUpsert) ClearCreator() *CabinetUpsert {
	u.SetNull(cabinet.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetUpsert) SetLastModifier(v *model.Modifier) *CabinetUpsert {
	u.Set(cabinet.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateLastModifier() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetUpsert) ClearLastModifier() *CabinetUpsert {
	u.SetNull(cabinet.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CabinetUpsert) SetRemark(v string) *CabinetUpsert {
	u.Set(cabinet.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateRemark() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetUpsert) ClearRemark() *CabinetUpsert {
	u.SetNull(cabinet.FieldRemark)
	return u
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetUpsert) SetBranchID(v uint64) *CabinetUpsert {
	u.Set(cabinet.FieldBranchID, v)
	return u
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateBranchID() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldBranchID)
	return u
}

// ClearBranchID clears the value of the "branch_id" field.
func (u *CabinetUpsert) ClearBranchID() *CabinetUpsert {
	u.SetNull(cabinet.FieldBranchID)
	return u
}

// SetModelID sets the "model_id" field.
func (u *CabinetUpsert) SetModelID(v uint64) *CabinetUpsert {
	u.Set(cabinet.FieldModelID, v)
	return u
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateModelID() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldModelID)
	return u
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsert) SetSerial(v string) *CabinetUpsert {
	u.Set(cabinet.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateSerial() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldSerial)
	return u
}

// SetName sets the "name" field.
func (u *CabinetUpsert) SetName(v string) *CabinetUpsert {
	u.Set(cabinet.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateName() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldName)
	return u
}

// SetDoors sets the "doors" field.
func (u *CabinetUpsert) SetDoors(v uint) *CabinetUpsert {
	u.Set(cabinet.FieldDoors, v)
	return u
}

// UpdateDoors sets the "doors" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateDoors() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldDoors)
	return u
}

// AddDoors adds v to the "doors" field.
func (u *CabinetUpsert) AddDoors(v uint) *CabinetUpsert {
	u.Add(cabinet.FieldDoors, v)
	return u
}

// SetStatus sets the "status" field.
func (u *CabinetUpsert) SetStatus(v uint) *CabinetUpsert {
	u.Set(cabinet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateStatus() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CabinetUpsert) AddStatus(v uint) *CabinetUpsert {
	u.Add(cabinet.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CabinetUpsertOne) UpdateNewValues() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinet.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Cabinet.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CabinetUpsertOne) Ignore() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetUpsertOne) DoNothing() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetCreate.OnConflict
// documentation for more info.
func (u *CabinetUpsertOne) Update(set func(*CabinetUpsert)) *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetUpsertOne) SetCreatedAt(v time.Time) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateCreatedAt() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsertOne) SetUpdatedAt(v time.Time) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateUpdatedAt() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetUpsertOne) SetDeletedAt(v time.Time) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateDeletedAt() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetUpsertOne) ClearDeletedAt() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetUpsertOne) SetCreator(v *model.Modifier) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateCreator() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetUpsertOne) ClearCreator() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetUpsertOne) SetLastModifier(v *model.Modifier) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateLastModifier() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetUpsertOne) ClearLastModifier() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetUpsertOne) SetRemark(v string) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateRemark() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetUpsertOne) ClearRemark() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearRemark()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetUpsertOne) SetBranchID(v uint64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateBranchID() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateBranchID()
	})
}

// ClearBranchID clears the value of the "branch_id" field.
func (u *CabinetUpsertOne) ClearBranchID() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearBranchID()
	})
}

// SetModelID sets the "model_id" field.
func (u *CabinetUpsertOne) SetModelID(v uint64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateModelID() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateModelID()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsertOne) SetSerial(v string) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateSerial() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateSerial()
	})
}

// SetName sets the "name" field.
func (u *CabinetUpsertOne) SetName(v string) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateName() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateName()
	})
}

// SetDoors sets the "doors" field.
func (u *CabinetUpsertOne) SetDoors(v uint) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetDoors(v)
	})
}

// AddDoors adds v to the "doors" field.
func (u *CabinetUpsertOne) AddDoors(v uint) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddDoors(v)
	})
}

// UpdateDoors sets the "doors" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateDoors() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateDoors()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetUpsertOne) SetStatus(v uint) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetUpsertOne) AddStatus(v uint) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateStatus() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CabinetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CabinetCreateBulk is the builder for creating many Cabinet entities in bulk.
type CabinetCreateBulk struct {
	config
	builders []*CabinetCreate
	conflict []sql.ConflictOption
}

// Save creates the Cabinet entities in the database.
func (ccb *CabinetCreateBulk) Save(ctx context.Context) ([]*Cabinet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cabinet, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CabinetCreateBulk) SaveX(ctx context.Context) []*Cabinet {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CabinetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CabinetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cabinet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ccb *CabinetCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetUpsertBulk {
	ccb.conflict = opts
	return &CabinetUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ccb *CabinetCreateBulk) OnConflictColumns(columns ...string) *CabinetUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CabinetUpsertBulk{
		create: ccb,
	}
}

// CabinetUpsertBulk is the builder for "upsert"-ing
// a bulk of Cabinet nodes.
type CabinetUpsertBulk struct {
	create *CabinetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *CabinetUpsertBulk) UpdateNewValues() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinet.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CabinetUpsertBulk) Ignore() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetUpsertBulk) DoNothing() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetUpsertBulk) Update(set func(*CabinetUpsert)) *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CabinetUpsertBulk) SetCreatedAt(v time.Time) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateCreatedAt() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsertBulk) SetUpdatedAt(v time.Time) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateUpdatedAt() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CabinetUpsertBulk) SetDeletedAt(v time.Time) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateDeletedAt() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CabinetUpsertBulk) ClearDeletedAt() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *CabinetUpsertBulk) SetCreator(v *model.Modifier) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateCreator() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *CabinetUpsertBulk) ClearCreator() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CabinetUpsertBulk) SetLastModifier(v *model.Modifier) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateLastModifier() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CabinetUpsertBulk) ClearLastModifier() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CabinetUpsertBulk) SetRemark(v string) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateRemark() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CabinetUpsertBulk) ClearRemark() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearRemark()
	})
}

// SetBranchID sets the "branch_id" field.
func (u *CabinetUpsertBulk) SetBranchID(v uint64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetBranchID(v)
	})
}

// UpdateBranchID sets the "branch_id" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateBranchID() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateBranchID()
	})
}

// ClearBranchID clears the value of the "branch_id" field.
func (u *CabinetUpsertBulk) ClearBranchID() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearBranchID()
	})
}

// SetModelID sets the "model_id" field.
func (u *CabinetUpsertBulk) SetModelID(v uint64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetModelID(v)
	})
}

// UpdateModelID sets the "model_id" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateModelID() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateModelID()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsertBulk) SetSerial(v string) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateSerial() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateSerial()
	})
}

// SetName sets the "name" field.
func (u *CabinetUpsertBulk) SetName(v string) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateName() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateName()
	})
}

// SetDoors sets the "doors" field.
func (u *CabinetUpsertBulk) SetDoors(v uint) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetDoors(v)
	})
}

// AddDoors adds v to the "doors" field.
func (u *CabinetUpsertBulk) AddDoors(v uint) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddDoors(v)
	})
}

// UpdateDoors sets the "doors" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateDoors() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateDoors()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetUpsertBulk) SetStatus(v uint) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CabinetUpsertBulk) AddStatus(v uint) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateStatus() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CabinetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
