// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// CommissionCreate is the builder for creating a Commission entity.
type CommissionCreate struct {
	config
	mutation *CommissionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommissionCreate) SetCreatedAt(t time.Time) *CommissionCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableCreatedAt(t *time.Time) *CommissionCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommissionCreate) SetUpdatedAt(t time.Time) *CommissionCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableUpdatedAt(t *time.Time) *CommissionCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CommissionCreate) SetDeletedAt(t time.Time) *CommissionCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableDeletedAt(t *time.Time) *CommissionCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreator sets the "creator" field.
func (cc *CommissionCreate) SetCreator(m *model.Modifier) *CommissionCreate {
	cc.mutation.SetCreator(m)
	return cc
}

// SetLastModifier sets the "last_modifier" field.
func (cc *CommissionCreate) SetLastModifier(m *model.Modifier) *CommissionCreate {
	cc.mutation.SetLastModifier(m)
	return cc
}

// SetRemark sets the "remark" field.
func (cc *CommissionCreate) SetRemark(s string) *CommissionCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableRemark(s *string) *CommissionCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetBusinessID sets the "business_id" field.
func (cc *CommissionCreate) SetBusinessID(u uint64) *CommissionCreate {
	cc.mutation.SetBusinessID(u)
	return cc
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableBusinessID(u *uint64) *CommissionCreate {
	if u != nil {
		cc.SetBusinessID(*u)
	}
	return cc
}

// SetSubscribeID sets the "subscribe_id" field.
func (cc *CommissionCreate) SetSubscribeID(u uint64) *CommissionCreate {
	cc.mutation.SetSubscribeID(u)
	return cc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableSubscribeID(u *uint64) *CommissionCreate {
	if u != nil {
		cc.SetSubscribeID(*u)
	}
	return cc
}

// SetPlanID sets the "plan_id" field.
func (cc *CommissionCreate) SetPlanID(u uint64) *CommissionCreate {
	cc.mutation.SetPlanID(u)
	return cc
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillablePlanID(u *uint64) *CommissionCreate {
	if u != nil {
		cc.SetPlanID(*u)
	}
	return cc
}

// SetRiderID sets the "rider_id" field.
func (cc *CommissionCreate) SetRiderID(u uint64) *CommissionCreate {
	cc.mutation.SetRiderID(u)
	return cc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableRiderID(u *uint64) *CommissionCreate {
	if u != nil {
		cc.SetRiderID(*u)
	}
	return cc
}

// SetOrderID sets the "order_id" field.
func (cc *CommissionCreate) SetOrderID(u uint64) *CommissionCreate {
	cc.mutation.SetOrderID(u)
	return cc
}

// SetAmount sets the "amount" field.
func (cc *CommissionCreate) SetAmount(f float64) *CommissionCreate {
	cc.mutation.SetAmount(f)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CommissionCreate) SetStatus(u uint8) *CommissionCreate {
	cc.mutation.SetStatus(u)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableStatus(u *uint8) *CommissionCreate {
	if u != nil {
		cc.SetStatus(*u)
	}
	return cc
}

// SetEmployeeID sets the "employee_id" field.
func (cc *CommissionCreate) SetEmployeeID(u uint64) *CommissionCreate {
	cc.mutation.SetEmployeeID(u)
	return cc
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (cc *CommissionCreate) SetNillableEmployeeID(u *uint64) *CommissionCreate {
	if u != nil {
		cc.SetEmployeeID(*u)
	}
	return cc
}

// SetBusiness sets the "business" edge to the Business entity.
func (cc *CommissionCreate) SetBusiness(b *Business) *CommissionCreate {
	return cc.SetBusinessID(b.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (cc *CommissionCreate) SetSubscribe(s *Subscribe) *CommissionCreate {
	return cc.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cc *CommissionCreate) SetPlan(p *Plan) *CommissionCreate {
	return cc.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cc *CommissionCreate) SetRider(r *Rider) *CommissionCreate {
	return cc.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cc *CommissionCreate) SetOrder(o *Order) *CommissionCreate {
	return cc.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (cc *CommissionCreate) SetEmployee(e *Employee) *CommissionCreate {
	return cc.SetEmployeeID(e.ID)
}

// Mutation returns the CommissionMutation object of the builder.
func (cc *CommissionCreate) Mutation() *CommissionMutation {
	return cc.mutation
}

// Save creates the Commission in the database.
func (cc *CommissionCreate) Save(ctx context.Context) (*Commission, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Commission, CommissionMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommissionCreate) SaveX(ctx context.Context) *Commission {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommissionCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommissionCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommissionCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if commission.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := commission.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if commission.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := commission.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := commission.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommissionCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Commission.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Commission.updated_at"`)}
	}
	if _, ok := cc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "Commission.order_id"`)}
	}
	if _, ok := cc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Commission.amount"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Commission.status"`)}
	}
	if _, ok := cc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "Commission.order"`)}
	}
	return nil
}

func (cc *CommissionCreate) sqlSave(ctx context.Context) (*Commission, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CommissionCreate) createSpec() (*Commission, *sqlgraph.CreateSpec) {
	var (
		_node = &Commission{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(commission.Table, sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(commission.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(commission.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(commission.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Creator(); ok {
		_spec.SetField(commission.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := cc.mutation.LastModifier(); ok {
		_spec.SetField(commission.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.SetField(commission.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cc.mutation.Amount(); ok {
		_spec.SetField(commission.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(commission.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if nodes := cc.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Commission.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CommissionCreate) OnConflict(opts ...sql.ConflictOption) *CommissionUpsertOne {
	cc.conflict = opts
	return &CommissionUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommissionCreate) OnConflictColumns(columns ...string) *CommissionUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommissionUpsertOne{
		create: cc,
	}
}

type (
	// CommissionUpsertOne is the builder for "upsert"-ing
	//  one Commission node.
	CommissionUpsertOne struct {
		create *CommissionCreate
	}

	// CommissionUpsert is the "OnConflict" setter.
	CommissionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsert) SetUpdatedAt(v time.Time) *CommissionUpsert {
	u.Set(commission.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateUpdatedAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsert) SetDeletedAt(v time.Time) *CommissionUpsert {
	u.Set(commission.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateDeletedAt() *CommissionUpsert {
	u.SetExcluded(commission.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommissionUpsert) ClearDeletedAt() *CommissionUpsert {
	u.SetNull(commission.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CommissionUpsert) SetLastModifier(v *model.Modifier) *CommissionUpsert {
	u.Set(commission.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateLastModifier() *CommissionUpsert {
	u.SetExcluded(commission.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CommissionUpsert) ClearLastModifier() *CommissionUpsert {
	u.SetNull(commission.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CommissionUpsert) SetRemark(v string) *CommissionUpsert {
	u.Set(commission.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateRemark() *CommissionUpsert {
	u.SetExcluded(commission.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CommissionUpsert) ClearRemark() *CommissionUpsert {
	u.SetNull(commission.FieldRemark)
	return u
}

// SetBusinessID sets the "business_id" field.
func (u *CommissionUpsert) SetBusinessID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldBusinessID, v)
	return u
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateBusinessID() *CommissionUpsert {
	u.SetExcluded(commission.FieldBusinessID)
	return u
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *CommissionUpsert) ClearBusinessID() *CommissionUpsert {
	u.SetNull(commission.FieldBusinessID)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *CommissionUpsert) SetSubscribeID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateSubscribeID() *CommissionUpsert {
	u.SetExcluded(commission.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *CommissionUpsert) ClearSubscribeID() *CommissionUpsert {
	u.SetNull(commission.FieldSubscribeID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *CommissionUpsert) SetPlanID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdatePlanID() *CommissionUpsert {
	u.SetExcluded(commission.FieldPlanID)
	return u
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CommissionUpsert) ClearPlanID() *CommissionUpsert {
	u.SetNull(commission.FieldPlanID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *CommissionUpsert) SetRiderID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateRiderID() *CommissionUpsert {
	u.SetExcluded(commission.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CommissionUpsert) ClearRiderID() *CommissionUpsert {
	u.SetNull(commission.FieldRiderID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *CommissionUpsert) SetOrderID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateOrderID() *CommissionUpsert {
	u.SetExcluded(commission.FieldOrderID)
	return u
}

// SetStatus sets the "status" field.
func (u *CommissionUpsert) SetStatus(v uint8) *CommissionUpsert {
	u.Set(commission.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateStatus() *CommissionUpsert {
	u.SetExcluded(commission.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *CommissionUpsert) AddStatus(v uint8) *CommissionUpsert {
	u.Add(commission.FieldStatus, v)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *CommissionUpsert) SetEmployeeID(v uint64) *CommissionUpsert {
	u.Set(commission.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *CommissionUpsert) UpdateEmployeeID() *CommissionUpsert {
	u.SetExcluded(commission.FieldEmployeeID)
	return u
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *CommissionUpsert) ClearEmployeeID() *CommissionUpsert {
	u.SetNull(commission.FieldEmployeeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CommissionUpsertOne) UpdateNewValues() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(commission.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(commission.FieldCreator)
		}
		if _, exists := u.create.mutation.Amount(); exists {
			s.SetIgnore(commission.FieldAmount)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Commission.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommissionUpsertOne) Ignore() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommissionUpsertOne) DoNothing() *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommissionCreate.OnConflict
// documentation for more info.
func (u *CommissionUpsertOne) Update(set func(*CommissionUpsert)) *CommissionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsertOne) SetUpdatedAt(v time.Time) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateUpdatedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsertOne) SetDeletedAt(v time.Time) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateDeletedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommissionUpsertOne) ClearDeletedAt() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CommissionUpsertOne) SetLastModifier(v *model.Modifier) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateLastModifier() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CommissionUpsertOne) ClearLastModifier() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CommissionUpsertOne) SetRemark(v string) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateRemark() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CommissionUpsertOne) ClearRemark() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearRemark()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *CommissionUpsertOne) SetBusinessID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateBusinessID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateBusinessID()
	})
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *CommissionUpsertOne) ClearBusinessID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearBusinessID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *CommissionUpsertOne) SetSubscribeID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateSubscribeID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *CommissionUpsertOne) ClearSubscribeID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSubscribeID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *CommissionUpsertOne) SetPlanID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdatePlanID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CommissionUpsertOne) ClearPlanID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearPlanID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CommissionUpsertOne) SetRiderID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateRiderID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CommissionUpsertOne) ClearRiderID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CommissionUpsertOne) SetOrderID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateOrderID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *CommissionUpsertOne) SetStatus(v uint8) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommissionUpsertOne) AddStatus(v uint8) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateStatus() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateStatus()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *CommissionUpsertOne) SetEmployeeID(v uint64) *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *CommissionUpsertOne) UpdateEmployeeID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *CommissionUpsertOne) ClearEmployeeID() *CommissionUpsertOne {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearEmployeeID()
	})
}

// Exec executes the query.
func (u *CommissionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommissionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommissionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommissionUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommissionUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommissionCreateBulk is the builder for creating many Commission entities in bulk.
type CommissionCreateBulk struct {
	config
	builders []*CommissionCreate
	conflict []sql.ConflictOption
}

// Save creates the Commission entities in the database.
func (ccb *CommissionCreateBulk) Save(ctx context.Context) ([]*Commission, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Commission, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommissionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommissionCreateBulk) SaveX(ctx context.Context) []*Commission {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommissionCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommissionCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Commission.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommissionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommissionCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommissionUpsertBulk {
	ccb.conflict = opts
	return &CommissionUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommissionCreateBulk) OnConflictColumns(columns ...string) *CommissionUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommissionUpsertBulk{
		create: ccb,
	}
}

// CommissionUpsertBulk is the builder for "upsert"-ing
// a bulk of Commission nodes.
type CommissionUpsertBulk struct {
	create *CommissionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CommissionUpsertBulk) UpdateNewValues() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(commission.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(commission.FieldCreator)
			}
			if _, exists := b.mutation.Amount(); exists {
				s.SetIgnore(commission.FieldAmount)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Commission.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommissionUpsertBulk) Ignore() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommissionUpsertBulk) DoNothing() *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommissionCreateBulk.OnConflict
// documentation for more info.
func (u *CommissionUpsertBulk) Update(set func(*CommissionUpsert)) *CommissionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommissionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommissionUpsertBulk) SetUpdatedAt(v time.Time) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateUpdatedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CommissionUpsertBulk) SetDeletedAt(v time.Time) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateDeletedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CommissionUpsertBulk) ClearDeletedAt() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CommissionUpsertBulk) SetLastModifier(v *model.Modifier) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateLastModifier() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CommissionUpsertBulk) ClearLastModifier() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CommissionUpsertBulk) SetRemark(v string) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateRemark() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CommissionUpsertBulk) ClearRemark() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearRemark()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *CommissionUpsertBulk) SetBusinessID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateBusinessID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateBusinessID()
	})
}

// ClearBusinessID clears the value of the "business_id" field.
func (u *CommissionUpsertBulk) ClearBusinessID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearBusinessID()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *CommissionUpsertBulk) SetSubscribeID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateSubscribeID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *CommissionUpsertBulk) ClearSubscribeID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearSubscribeID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *CommissionUpsertBulk) SetPlanID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdatePlanID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdatePlanID()
	})
}

// ClearPlanID clears the value of the "plan_id" field.
func (u *CommissionUpsertBulk) ClearPlanID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearPlanID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *CommissionUpsertBulk) SetRiderID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateRiderID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *CommissionUpsertBulk) ClearRiderID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *CommissionUpsertBulk) SetOrderID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateOrderID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *CommissionUpsertBulk) SetStatus(v uint8) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *CommissionUpsertBulk) AddStatus(v uint8) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateStatus() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateStatus()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *CommissionUpsertBulk) SetEmployeeID(v uint64) *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *CommissionUpsertBulk) UpdateEmployeeID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.UpdateEmployeeID()
	})
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (u *CommissionUpsertBulk) ClearEmployeeID() *CommissionUpsertBulk {
	return u.Update(func(s *CommissionUpsert) {
		s.ClearEmployeeID()
	})
}

// Exec executes the query.
func (u *CommissionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommissionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommissionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommissionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
