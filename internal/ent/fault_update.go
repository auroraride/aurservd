// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/fault"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// FaultUpdate is the builder for updating Fault entities.
type FaultUpdate struct {
	config
	hooks     []Hook
	mutation  *FaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FaultUpdate builder.
func (fu *FaultUpdate) Where(ps ...predicate.Fault) *FaultUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FaultUpdate) SetUpdatedAt(t time.Time) *FaultUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FaultUpdate) SetDeletedAt(t time.Time) *FaultUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableDeletedAt(t *time.Time) *FaultUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FaultUpdate) ClearDeletedAt() *FaultUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetLastModifier sets the "last_modifier" field.
func (fu *FaultUpdate) SetLastModifier(m *model.Modifier) *FaultUpdate {
	fu.mutation.SetLastModifier(m)
	return fu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (fu *FaultUpdate) ClearLastModifier() *FaultUpdate {
	fu.mutation.ClearLastModifier()
	return fu
}

// SetRemark sets the "remark" field.
func (fu *FaultUpdate) SetRemark(s string) *FaultUpdate {
	fu.mutation.SetRemark(s)
	return fu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableRemark(s *string) *FaultUpdate {
	if s != nil {
		fu.SetRemark(*s)
	}
	return fu
}

// ClearRemark clears the value of the "remark" field.
func (fu *FaultUpdate) ClearRemark() *FaultUpdate {
	fu.mutation.ClearRemark()
	return fu
}

// SetCityID sets the "city_id" field.
func (fu *FaultUpdate) SetCityID(u uint64) *FaultUpdate {
	fu.mutation.SetCityID(u)
	return fu
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableCityID(u *uint64) *FaultUpdate {
	if u != nil {
		fu.SetCityID(*u)
	}
	return fu
}

// SetCabinetID sets the "cabinet_id" field.
func (fu *FaultUpdate) SetCabinetID(u uint64) *FaultUpdate {
	fu.mutation.SetCabinetID(u)
	return fu
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableCabinetID(u *uint64) *FaultUpdate {
	if u != nil {
		fu.SetCabinetID(*u)
	}
	return fu
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (fu *FaultUpdate) ClearCabinetID() *FaultUpdate {
	fu.mutation.ClearCabinetID()
	return fu
}

// SetRiderID sets the "rider_id" field.
func (fu *FaultUpdate) SetRiderID(u uint64) *FaultUpdate {
	fu.mutation.SetRiderID(u)
	return fu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableRiderID(u *uint64) *FaultUpdate {
	if u != nil {
		fu.SetRiderID(*u)
	}
	return fu
}

// ClearRiderID clears the value of the "rider_id" field.
func (fu *FaultUpdate) ClearRiderID() *FaultUpdate {
	fu.mutation.ClearRiderID()
	return fu
}

// SetStatus sets the "status" field.
func (fu *FaultUpdate) SetStatus(u uint8) *FaultUpdate {
	fu.mutation.ResetStatus()
	fu.mutation.SetStatus(u)
	return fu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableStatus(u *uint8) *FaultUpdate {
	if u != nil {
		fu.SetStatus(*u)
	}
	return fu
}

// AddStatus adds u to the "status" field.
func (fu *FaultUpdate) AddStatus(u int8) *FaultUpdate {
	fu.mutation.AddStatus(u)
	return fu
}

// SetDescription sets the "description" field.
func (fu *FaultUpdate) SetDescription(s string) *FaultUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableDescription(s *string) *FaultUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// ClearDescription clears the value of the "description" field.
func (fu *FaultUpdate) ClearDescription() *FaultUpdate {
	fu.mutation.ClearDescription()
	return fu
}

// SetAttachments sets the "attachments" field.
func (fu *FaultUpdate) SetAttachments(s []string) *FaultUpdate {
	fu.mutation.SetAttachments(s)
	return fu
}

// AppendAttachments appends s to the "attachments" field.
func (fu *FaultUpdate) AppendAttachments(s []string) *FaultUpdate {
	fu.mutation.AppendAttachments(s)
	return fu
}

// ClearAttachments clears the value of the "attachments" field.
func (fu *FaultUpdate) ClearAttachments() *FaultUpdate {
	fu.mutation.ClearAttachments()
	return fu
}

// SetType sets the "type" field.
func (fu *FaultUpdate) SetType(u uint8) *FaultUpdate {
	fu.mutation.ResetType()
	fu.mutation.SetType(u)
	return fu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableType(u *uint8) *FaultUpdate {
	if u != nil {
		fu.SetType(*u)
	}
	return fu
}

// AddType adds u to the "type" field.
func (fu *FaultUpdate) AddType(u int8) *FaultUpdate {
	fu.mutation.AddType(u)
	return fu
}

// SetFault sets the "fault" field.
func (fu *FaultUpdate) SetFault(s []string) *FaultUpdate {
	fu.mutation.SetFault(s)
	return fu
}

// AppendFault appends s to the "fault" field.
func (fu *FaultUpdate) AppendFault(s []string) *FaultUpdate {
	fu.mutation.AppendFault(s)
	return fu
}

// ClearFault clears the value of the "fault" field.
func (fu *FaultUpdate) ClearFault() *FaultUpdate {
	fu.mutation.ClearFault()
	return fu
}

// SetEbikeID sets the "ebike_id" field.
func (fu *FaultUpdate) SetEbikeID(u uint64) *FaultUpdate {
	fu.mutation.SetEbikeID(u)
	return fu
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableEbikeID(u *uint64) *FaultUpdate {
	if u != nil {
		fu.SetEbikeID(*u)
	}
	return fu
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (fu *FaultUpdate) ClearEbikeID() *FaultUpdate {
	fu.mutation.ClearEbikeID()
	return fu
}

// SetBatteryID sets the "battery_id" field.
func (fu *FaultUpdate) SetBatteryID(u uint64) *FaultUpdate {
	fu.mutation.SetBatteryID(u)
	return fu
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (fu *FaultUpdate) SetNillableBatteryID(u *uint64) *FaultUpdate {
	if u != nil {
		fu.SetBatteryID(*u)
	}
	return fu
}

// ClearBatteryID clears the value of the "battery_id" field.
func (fu *FaultUpdate) ClearBatteryID() *FaultUpdate {
	fu.mutation.ClearBatteryID()
	return fu
}

// SetCity sets the "city" edge to the City entity.
func (fu *FaultUpdate) SetCity(c *City) *FaultUpdate {
	return fu.SetCityID(c.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (fu *FaultUpdate) SetCabinet(c *Cabinet) *FaultUpdate {
	return fu.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (fu *FaultUpdate) SetRider(r *Rider) *FaultUpdate {
	return fu.SetRiderID(r.ID)
}

// SetEbike sets the "ebike" edge to the Asset entity.
func (fu *FaultUpdate) SetEbike(a *Asset) *FaultUpdate {
	return fu.SetEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (fu *FaultUpdate) SetBattery(a *Asset) *FaultUpdate {
	return fu.SetBatteryID(a.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fu *FaultUpdate) Mutation() *FaultMutation {
	return fu.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (fu *FaultUpdate) ClearCity() *FaultUpdate {
	fu.mutation.ClearCity()
	return fu
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (fu *FaultUpdate) ClearCabinet() *FaultUpdate {
	fu.mutation.ClearCabinet()
	return fu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (fu *FaultUpdate) ClearRider() *FaultUpdate {
	fu.mutation.ClearRider()
	return fu
}

// ClearEbike clears the "ebike" edge to the Asset entity.
func (fu *FaultUpdate) ClearEbike() *FaultUpdate {
	fu.mutation.ClearEbike()
	return fu
}

// ClearBattery clears the "battery" edge to the Asset entity.
func (fu *FaultUpdate) ClearBattery() *FaultUpdate {
	fu.mutation.ClearBattery()
	return fu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FaultUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FaultUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FaultUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FaultUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FaultUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok {
		if fault.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fault.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fault.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fu *FaultUpdate) check() error {
	if _, ok := fu.mutation.CityID(); fu.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fault.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FaultUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FaultUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FaultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fault.Table, fault.Columns, sqlgraph.NewFieldSpec(fault.FieldID, field.TypeUint64))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(fault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(fault.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(fault.FieldDeletedAt, field.TypeTime)
	}
	if fu.mutation.CreatorCleared() {
		_spec.ClearField(fault.FieldCreator, field.TypeJSON)
	}
	if value, ok := fu.mutation.LastModifier(); ok {
		_spec.SetField(fault.FieldLastModifier, field.TypeJSON, value)
	}
	if fu.mutation.LastModifierCleared() {
		_spec.ClearField(fault.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := fu.mutation.Remark(); ok {
		_spec.SetField(fault.FieldRemark, field.TypeString, value)
	}
	if fu.mutation.RemarkCleared() {
		_spec.ClearField(fault.FieldRemark, field.TypeString)
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.SetField(fault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.AddedStatus(); ok {
		_spec.AddField(fault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(fault.FieldDescription, field.TypeString, value)
	}
	if fu.mutation.DescriptionCleared() {
		_spec.ClearField(fault.FieldDescription, field.TypeString)
	}
	if value, ok := fu.mutation.Attachments(); ok {
		_spec.SetField(fault.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fault.FieldAttachments, value)
		})
	}
	if fu.mutation.AttachmentsCleared() {
		_spec.ClearField(fault.FieldAttachments, field.TypeJSON)
	}
	if value, ok := fu.mutation.GetType(); ok {
		_spec.SetField(fault.FieldType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.AddedType(); ok {
		_spec.AddField(fault.FieldType, field.TypeUint8, value)
	}
	if value, ok := fu.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedFault(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fault.FieldFault, value)
		})
	}
	if fu.mutation.FaultCleared() {
		_spec.ClearField(fault.FieldFault, field.TypeJSON)
	}
	if fu.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CityTable,
			Columns: []string{fault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CityTable,
			Columns: []string{fault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CabinetTable,
			Columns: []string{fault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CabinetTable,
			Columns: []string{fault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.RiderTable,
			Columns: []string{fault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.RiderTable,
			Columns: []string{fault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.EbikeTable,
			Columns: []string{fault.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.EbikeTable,
			Columns: []string{fault.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FaultUpdateOne is the builder for updating a single Fault entity.
type FaultUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FaultMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FaultUpdateOne) SetUpdatedAt(t time.Time) *FaultUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FaultUpdateOne) SetDeletedAt(t time.Time) *FaultUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableDeletedAt(t *time.Time) *FaultUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FaultUpdateOne) ClearDeletedAt() *FaultUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetLastModifier sets the "last_modifier" field.
func (fuo *FaultUpdateOne) SetLastModifier(m *model.Modifier) *FaultUpdateOne {
	fuo.mutation.SetLastModifier(m)
	return fuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (fuo *FaultUpdateOne) ClearLastModifier() *FaultUpdateOne {
	fuo.mutation.ClearLastModifier()
	return fuo
}

// SetRemark sets the "remark" field.
func (fuo *FaultUpdateOne) SetRemark(s string) *FaultUpdateOne {
	fuo.mutation.SetRemark(s)
	return fuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableRemark(s *string) *FaultUpdateOne {
	if s != nil {
		fuo.SetRemark(*s)
	}
	return fuo
}

// ClearRemark clears the value of the "remark" field.
func (fuo *FaultUpdateOne) ClearRemark() *FaultUpdateOne {
	fuo.mutation.ClearRemark()
	return fuo
}

// SetCityID sets the "city_id" field.
func (fuo *FaultUpdateOne) SetCityID(u uint64) *FaultUpdateOne {
	fuo.mutation.SetCityID(u)
	return fuo
}

// SetNillableCityID sets the "city_id" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableCityID(u *uint64) *FaultUpdateOne {
	if u != nil {
		fuo.SetCityID(*u)
	}
	return fuo
}

// SetCabinetID sets the "cabinet_id" field.
func (fuo *FaultUpdateOne) SetCabinetID(u uint64) *FaultUpdateOne {
	fuo.mutation.SetCabinetID(u)
	return fuo
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableCabinetID(u *uint64) *FaultUpdateOne {
	if u != nil {
		fuo.SetCabinetID(*u)
	}
	return fuo
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (fuo *FaultUpdateOne) ClearCabinetID() *FaultUpdateOne {
	fuo.mutation.ClearCabinetID()
	return fuo
}

// SetRiderID sets the "rider_id" field.
func (fuo *FaultUpdateOne) SetRiderID(u uint64) *FaultUpdateOne {
	fuo.mutation.SetRiderID(u)
	return fuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableRiderID(u *uint64) *FaultUpdateOne {
	if u != nil {
		fuo.SetRiderID(*u)
	}
	return fuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (fuo *FaultUpdateOne) ClearRiderID() *FaultUpdateOne {
	fuo.mutation.ClearRiderID()
	return fuo
}

// SetStatus sets the "status" field.
func (fuo *FaultUpdateOne) SetStatus(u uint8) *FaultUpdateOne {
	fuo.mutation.ResetStatus()
	fuo.mutation.SetStatus(u)
	return fuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableStatus(u *uint8) *FaultUpdateOne {
	if u != nil {
		fuo.SetStatus(*u)
	}
	return fuo
}

// AddStatus adds u to the "status" field.
func (fuo *FaultUpdateOne) AddStatus(u int8) *FaultUpdateOne {
	fuo.mutation.AddStatus(u)
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FaultUpdateOne) SetDescription(s string) *FaultUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableDescription(s *string) *FaultUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// ClearDescription clears the value of the "description" field.
func (fuo *FaultUpdateOne) ClearDescription() *FaultUpdateOne {
	fuo.mutation.ClearDescription()
	return fuo
}

// SetAttachments sets the "attachments" field.
func (fuo *FaultUpdateOne) SetAttachments(s []string) *FaultUpdateOne {
	fuo.mutation.SetAttachments(s)
	return fuo
}

// AppendAttachments appends s to the "attachments" field.
func (fuo *FaultUpdateOne) AppendAttachments(s []string) *FaultUpdateOne {
	fuo.mutation.AppendAttachments(s)
	return fuo
}

// ClearAttachments clears the value of the "attachments" field.
func (fuo *FaultUpdateOne) ClearAttachments() *FaultUpdateOne {
	fuo.mutation.ClearAttachments()
	return fuo
}

// SetType sets the "type" field.
func (fuo *FaultUpdateOne) SetType(u uint8) *FaultUpdateOne {
	fuo.mutation.ResetType()
	fuo.mutation.SetType(u)
	return fuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableType(u *uint8) *FaultUpdateOne {
	if u != nil {
		fuo.SetType(*u)
	}
	return fuo
}

// AddType adds u to the "type" field.
func (fuo *FaultUpdateOne) AddType(u int8) *FaultUpdateOne {
	fuo.mutation.AddType(u)
	return fuo
}

// SetFault sets the "fault" field.
func (fuo *FaultUpdateOne) SetFault(s []string) *FaultUpdateOne {
	fuo.mutation.SetFault(s)
	return fuo
}

// AppendFault appends s to the "fault" field.
func (fuo *FaultUpdateOne) AppendFault(s []string) *FaultUpdateOne {
	fuo.mutation.AppendFault(s)
	return fuo
}

// ClearFault clears the value of the "fault" field.
func (fuo *FaultUpdateOne) ClearFault() *FaultUpdateOne {
	fuo.mutation.ClearFault()
	return fuo
}

// SetEbikeID sets the "ebike_id" field.
func (fuo *FaultUpdateOne) SetEbikeID(u uint64) *FaultUpdateOne {
	fuo.mutation.SetEbikeID(u)
	return fuo
}

// SetNillableEbikeID sets the "ebike_id" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableEbikeID(u *uint64) *FaultUpdateOne {
	if u != nil {
		fuo.SetEbikeID(*u)
	}
	return fuo
}

// ClearEbikeID clears the value of the "ebike_id" field.
func (fuo *FaultUpdateOne) ClearEbikeID() *FaultUpdateOne {
	fuo.mutation.ClearEbikeID()
	return fuo
}

// SetBatteryID sets the "battery_id" field.
func (fuo *FaultUpdateOne) SetBatteryID(u uint64) *FaultUpdateOne {
	fuo.mutation.SetBatteryID(u)
	return fuo
}

// SetNillableBatteryID sets the "battery_id" field if the given value is not nil.
func (fuo *FaultUpdateOne) SetNillableBatteryID(u *uint64) *FaultUpdateOne {
	if u != nil {
		fuo.SetBatteryID(*u)
	}
	return fuo
}

// ClearBatteryID clears the value of the "battery_id" field.
func (fuo *FaultUpdateOne) ClearBatteryID() *FaultUpdateOne {
	fuo.mutation.ClearBatteryID()
	return fuo
}

// SetCity sets the "city" edge to the City entity.
func (fuo *FaultUpdateOne) SetCity(c *City) *FaultUpdateOne {
	return fuo.SetCityID(c.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (fuo *FaultUpdateOne) SetCabinet(c *Cabinet) *FaultUpdateOne {
	return fuo.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (fuo *FaultUpdateOne) SetRider(r *Rider) *FaultUpdateOne {
	return fuo.SetRiderID(r.ID)
}

// SetEbike sets the "ebike" edge to the Asset entity.
func (fuo *FaultUpdateOne) SetEbike(a *Asset) *FaultUpdateOne {
	return fuo.SetEbikeID(a.ID)
}

// SetBattery sets the "battery" edge to the Asset entity.
func (fuo *FaultUpdateOne) SetBattery(a *Asset) *FaultUpdateOne {
	return fuo.SetBatteryID(a.ID)
}

// Mutation returns the FaultMutation object of the builder.
func (fuo *FaultUpdateOne) Mutation() *FaultMutation {
	return fuo.mutation
}

// ClearCity clears the "city" edge to the City entity.
func (fuo *FaultUpdateOne) ClearCity() *FaultUpdateOne {
	fuo.mutation.ClearCity()
	return fuo
}

// ClearCabinet clears the "cabinet" edge to the Cabinet entity.
func (fuo *FaultUpdateOne) ClearCabinet() *FaultUpdateOne {
	fuo.mutation.ClearCabinet()
	return fuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (fuo *FaultUpdateOne) ClearRider() *FaultUpdateOne {
	fuo.mutation.ClearRider()
	return fuo
}

// ClearEbike clears the "ebike" edge to the Asset entity.
func (fuo *FaultUpdateOne) ClearEbike() *FaultUpdateOne {
	fuo.mutation.ClearEbike()
	return fuo
}

// ClearBattery clears the "battery" edge to the Asset entity.
func (fuo *FaultUpdateOne) ClearBattery() *FaultUpdateOne {
	fuo.mutation.ClearBattery()
	return fuo
}

// Where appends a list predicates to the FaultUpdate builder.
func (fuo *FaultUpdateOne) Where(ps ...predicate.Fault) *FaultUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FaultUpdateOne) Select(field string, fields ...string) *FaultUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fault entity.
func (fuo *FaultUpdateOne) Save(ctx context.Context) (*Fault, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FaultUpdateOne) SaveX(ctx context.Context) *Fault {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FaultUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FaultUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FaultUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok {
		if fault.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fault.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fault.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FaultUpdateOne) check() error {
	if _, ok := fuo.mutation.CityID(); fuo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Fault.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FaultUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FaultUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FaultUpdateOne) sqlSave(ctx context.Context) (_node *Fault, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fault.Table, fault.Columns, sqlgraph.NewFieldSpec(fault.FieldID, field.TypeUint64))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fault.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fault.FieldID)
		for _, f := range fields {
			if !fault.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fault.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(fault.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(fault.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(fault.FieldDeletedAt, field.TypeTime)
	}
	if fuo.mutation.CreatorCleared() {
		_spec.ClearField(fault.FieldCreator, field.TypeJSON)
	}
	if value, ok := fuo.mutation.LastModifier(); ok {
		_spec.SetField(fault.FieldLastModifier, field.TypeJSON, value)
	}
	if fuo.mutation.LastModifierCleared() {
		_spec.ClearField(fault.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := fuo.mutation.Remark(); ok {
		_spec.SetField(fault.FieldRemark, field.TypeString, value)
	}
	if fuo.mutation.RemarkCleared() {
		_spec.ClearField(fault.FieldRemark, field.TypeString)
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.SetField(fault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.AddedStatus(); ok {
		_spec.AddField(fault.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(fault.FieldDescription, field.TypeString, value)
	}
	if fuo.mutation.DescriptionCleared() {
		_spec.ClearField(fault.FieldDescription, field.TypeString)
	}
	if value, ok := fuo.mutation.Attachments(); ok {
		_spec.SetField(fault.FieldAttachments, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedAttachments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fault.FieldAttachments, value)
		})
	}
	if fuo.mutation.AttachmentsCleared() {
		_spec.ClearField(fault.FieldAttachments, field.TypeJSON)
	}
	if value, ok := fuo.mutation.GetType(); ok {
		_spec.SetField(fault.FieldType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.AddedType(); ok {
		_spec.AddField(fault.FieldType, field.TypeUint8, value)
	}
	if value, ok := fuo.mutation.Fault(); ok {
		_spec.SetField(fault.FieldFault, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedFault(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, fault.FieldFault, value)
		})
	}
	if fuo.mutation.FaultCleared() {
		_spec.ClearField(fault.FieldFault, field.TypeJSON)
	}
	if fuo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CityTable,
			Columns: []string{fault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CityTable,
			Columns: []string{fault.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.CabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CabinetTable,
			Columns: []string{fault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.CabinetTable,
			Columns: []string{fault.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.RiderTable,
			Columns: []string{fault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.RiderTable,
			Columns: []string{fault.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.EbikeTable,
			Columns: []string{fault.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.EbikeTable,
			Columns: []string{fault.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.BatteryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.BatteryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   fault.BatteryTable,
			Columns: []string{fault.BatteryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(fuo.modifiers...)
	_node = &Fault{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fault.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
