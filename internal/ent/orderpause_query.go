// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderpause"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderPauseQuery is the builder for querying OrderPause entities.
type OrderPauseQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.OrderPause
	// eager-loading edges.
	withRider *RiderQuery
	withOrder *OrderQuery
	modifiers []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrderPauseQuery builder.
func (opq *OrderPauseQuery) Where(ps ...predicate.OrderPause) *OrderPauseQuery {
	opq.predicates = append(opq.predicates, ps...)
	return opq
}

// Limit adds a limit step to the query.
func (opq *OrderPauseQuery) Limit(limit int) *OrderPauseQuery {
	opq.limit = &limit
	return opq
}

// Offset adds an offset step to the query.
func (opq *OrderPauseQuery) Offset(offset int) *OrderPauseQuery {
	opq.offset = &offset
	return opq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (opq *OrderPauseQuery) Unique(unique bool) *OrderPauseQuery {
	opq.unique = &unique
	return opq
}

// Order adds an order step to the query.
func (opq *OrderPauseQuery) Order(o ...OrderFunc) *OrderPauseQuery {
	opq.order = append(opq.order, o...)
	return opq
}

// QueryRider chains the current query on the "rider" edge.
func (opq *OrderPauseQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: opq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := opq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpause.Table, orderpause.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpause.RiderTable, orderpause.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(opq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (opq *OrderPauseQuery) QueryOrder() *OrderQuery {
	query := &OrderQuery{config: opq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := opq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orderpause.Table, orderpause.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orderpause.OrderTable, orderpause.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(opq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrderPause entity from the query.
// Returns a *NotFoundError when no OrderPause was found.
func (opq *OrderPauseQuery) First(ctx context.Context) (*OrderPause, error) {
	nodes, err := opq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orderpause.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (opq *OrderPauseQuery) FirstX(ctx context.Context) *OrderPause {
	node, err := opq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrderPause ID from the query.
// Returns a *NotFoundError when no OrderPause ID was found.
func (opq *OrderPauseQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = opq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orderpause.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (opq *OrderPauseQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := opq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrderPause entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrderPause entity is found.
// Returns a *NotFoundError when no OrderPause entities are found.
func (opq *OrderPauseQuery) Only(ctx context.Context) (*OrderPause, error) {
	nodes, err := opq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orderpause.Label}
	default:
		return nil, &NotSingularError{orderpause.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (opq *OrderPauseQuery) OnlyX(ctx context.Context) *OrderPause {
	node, err := opq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrderPause ID in the query.
// Returns a *NotSingularError when more than one OrderPause ID is found.
// Returns a *NotFoundError when no entities are found.
func (opq *OrderPauseQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = opq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orderpause.Label}
	default:
		err = &NotSingularError{orderpause.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (opq *OrderPauseQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := opq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrderPauses.
func (opq *OrderPauseQuery) All(ctx context.Context) ([]*OrderPause, error) {
	if err := opq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return opq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (opq *OrderPauseQuery) AllX(ctx context.Context) []*OrderPause {
	nodes, err := opq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrderPause IDs.
func (opq *OrderPauseQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := opq.Select(orderpause.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (opq *OrderPauseQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := opq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (opq *OrderPauseQuery) Count(ctx context.Context) (int, error) {
	if err := opq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return opq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (opq *OrderPauseQuery) CountX(ctx context.Context) int {
	count, err := opq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (opq *OrderPauseQuery) Exist(ctx context.Context) (bool, error) {
	if err := opq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return opq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (opq *OrderPauseQuery) ExistX(ctx context.Context) bool {
	exist, err := opq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrderPauseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (opq *OrderPauseQuery) Clone() *OrderPauseQuery {
	if opq == nil {
		return nil
	}
	return &OrderPauseQuery{
		config:     opq.config,
		limit:      opq.limit,
		offset:     opq.offset,
		order:      append([]OrderFunc{}, opq.order...),
		predicates: append([]predicate.OrderPause{}, opq.predicates...),
		withRider:  opq.withRider.Clone(),
		withOrder:  opq.withOrder.Clone(),
		// clone intermediate query.
		sql:    opq.sql.Clone(),
		path:   opq.path,
		unique: opq.unique,
	}
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (opq *OrderPauseQuery) WithRider(opts ...func(*RiderQuery)) *OrderPauseQuery {
	query := &RiderQuery{config: opq.config}
	for _, opt := range opts {
		opt(query)
	}
	opq.withRider = query
	return opq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (opq *OrderPauseQuery) WithOrder(opts ...func(*OrderQuery)) *OrderPauseQuery {
	query := &OrderQuery{config: opq.config}
	for _, opt := range opts {
		opt(query)
	}
	opq.withOrder = query
	return opq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrderPause.Query().
//		GroupBy(orderpause.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (opq *OrderPauseQuery) GroupBy(field string, fields ...string) *OrderPauseGroupBy {
	grbuild := &OrderPauseGroupBy{config: opq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return opq.sqlQuery(ctx), nil
	}
	grbuild.label = orderpause.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OrderPause.Query().
//		Select(orderpause.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (opq *OrderPauseQuery) Select(fields ...string) *OrderPauseSelect {
	opq.fields = append(opq.fields, fields...)
	selbuild := &OrderPauseSelect{OrderPauseQuery: opq}
	selbuild.label = orderpause.Label
	selbuild.flds, selbuild.scan = &opq.fields, selbuild.Scan
	return selbuild
}

func (opq *OrderPauseQuery) prepareQuery(ctx context.Context) error {
	for _, f := range opq.fields {
		if !orderpause.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if opq.path != nil {
		prev, err := opq.path(ctx)
		if err != nil {
			return err
		}
		opq.sql = prev
	}
	return nil
}

func (opq *OrderPauseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrderPause, error) {
	var (
		nodes       = []*OrderPause{}
		_spec       = opq.querySpec()
		loadedTypes = [2]bool{
			opq.withRider != nil,
			opq.withOrder != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*OrderPause).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &OrderPause{config: opq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(opq.modifiers) > 0 {
		_spec.Modifiers = opq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, opq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := opq.withRider; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*OrderPause)
		for i := range nodes {
			fk := nodes[i].RiderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(rider.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rider = n
			}
		}
	}

	if query := opq.withOrder; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*OrderPause)
		for i := range nodes {
			fk := nodes[i].OrderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(order.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Order = n
			}
		}
	}

	return nodes, nil
}

func (opq *OrderPauseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := opq.querySpec()
	if len(opq.modifiers) > 0 {
		_spec.Modifiers = opq.modifiers
	}
	_spec.Node.Columns = opq.fields
	if len(opq.fields) > 0 {
		_spec.Unique = opq.unique != nil && *opq.unique
	}
	return sqlgraph.CountNodes(ctx, opq.driver, _spec)
}

func (opq *OrderPauseQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := opq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (opq *OrderPauseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderpause.Table,
			Columns: orderpause.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderpause.FieldID,
			},
		},
		From:   opq.sql,
		Unique: true,
	}
	if unique := opq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := opq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderpause.FieldID)
		for i := range fields {
			if fields[i] != orderpause.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := opq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := opq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := opq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := opq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (opq *OrderPauseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(opq.driver.Dialect())
	t1 := builder.Table(orderpause.Table)
	columns := opq.fields
	if len(columns) == 0 {
		columns = orderpause.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if opq.sql != nil {
		selector = opq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if opq.unique != nil && *opq.unique {
		selector.Distinct()
	}
	for _, m := range opq.modifiers {
		m(selector)
	}
	for _, p := range opq.predicates {
		p(selector)
	}
	for _, p := range opq.order {
		p(selector)
	}
	if offset := opq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := opq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (opq *OrderPauseQuery) Modify(modifiers ...func(s *sql.Selector)) *OrderPauseSelect {
	opq.modifiers = append(opq.modifiers, modifiers...)
	return opq.Select()
}

// OrderPauseGroupBy is the group-by builder for OrderPause entities.
type OrderPauseGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (opgb *OrderPauseGroupBy) Aggregate(fns ...AggregateFunc) *OrderPauseGroupBy {
	opgb.fns = append(opgb.fns, fns...)
	return opgb
}

// Scan applies the group-by query and scans the result into the given value.
func (opgb *OrderPauseGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := opgb.path(ctx)
	if err != nil {
		return err
	}
	opgb.sql = query
	return opgb.sqlScan(ctx, v)
}

func (opgb *OrderPauseGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range opgb.fields {
		if !orderpause.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := opgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := opgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (opgb *OrderPauseGroupBy) sqlQuery() *sql.Selector {
	selector := opgb.sql.Select()
	aggregation := make([]string, 0, len(opgb.fns))
	for _, fn := range opgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(opgb.fields)+len(opgb.fns))
		for _, f := range opgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(opgb.fields...)...)
}

// OrderPauseSelect is the builder for selecting fields of OrderPause entities.
type OrderPauseSelect struct {
	*OrderPauseQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ops *OrderPauseSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ops.prepareQuery(ctx); err != nil {
		return err
	}
	ops.sql = ops.OrderPauseQuery.sqlQuery(ctx)
	return ops.sqlScan(ctx, v)
}

func (ops *OrderPauseSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ops.sql.Query()
	if err := ops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ops *OrderPauseSelect) Modify(modifiers ...func(s *sql.Selector)) *OrderPauseSelect {
	ops.modifiers = append(ops.modifiers, modifiers...)
	return ops
}
