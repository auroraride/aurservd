// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 骑士卡ID
	PlanID *uint64 `json:"plan_id,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// 父订单ID
	ParentID uint64 `json:"parent_id,omitempty"`
	// 所属订阅ID
	SubscribeID uint64 `json:"subscribe_id,omitempty"`
	// 订单状态 0未支付 1已支付 2申请退款 3已退款
	Status uint8 `json:"status,omitempty"`
	// 支付方式 0手动 1支付宝 2微信
	Payway uint8 `json:"payway,omitempty"`
	// 订单类型 1新签 2续签 3重签 4更改电池 5救援 6滞纳金 7押金
	Type uint `json:"type,omitempty"`
	// 交易订单号
	OutTradeNo string `json:"out_trade_no,omitempty"`
	// 平台订单号
	TradeNo string `json:"trade_no,omitempty"`
	// 子订单金额(拆分项此条订单)
	Amount float64 `json:"amount,omitempty"`
	// 此次支付总金额(包含所有子订单的总支付)
	Total float64 `json:"total,omitempty"`
	// 退款时间
	RefundAt *time.Time `json:"refund_at,omitempty"`
	// 所购骑士卡天数(也可能为补缴欠费天数)
	InitialDays int `json:"initial_days,omitempty"`
	// 距上次退订天数
	PastDays int `json:"past_days,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderQuery when eager-loading is set.
	Edges OrderEdges `json:"edges"`
}

// OrderEdges holds the relations/edges for other nodes in the graph.
type OrderEdges struct {
	// Plan holds the value of the plan edge.
	Plan *Plan `json:"plan,omitempty"`
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// 骑手
	Rider *Rider `json:"rider,omitempty"`
	// 所属订阅
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// Commission holds the value of the commission edge.
	Commission *Commission `json:"commission,omitempty"`
	// 子订单
	Parent *Order `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Order `json:"children,omitempty"`
	// 退款
	Refund *OrderRefund `json:"refund,omitempty"`
	// Assistance holds the value of the assistance edge.
	Assistance *Assistance `json:"assistance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) PlanOrErr() (*Plan, error) {
	if e.loadedTypes[0] {
		if e.Plan == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: plan.Label}
		}
		return e.Plan, nil
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[1] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[2] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[3] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// CommissionOrErr returns the Commission value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) CommissionOrErr() (*Commission, error) {
	if e.loadedTypes[4] {
		if e.Commission == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: commission.Label}
		}
		return e.Commission, nil
	}
	return nil, &NotLoadedError{edge: "commission"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) ParentOrErr() (*Order, error) {
	if e.loadedTypes[5] {
		if e.Parent == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OrderEdges) ChildrenOrErr() ([]*Order, error) {
	if e.loadedTypes[6] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// RefundOrErr returns the Refund value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) RefundOrErr() (*OrderRefund, error) {
	if e.loadedTypes[7] {
		if e.Refund == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: orderrefund.Label}
		}
		return e.Refund, nil
	}
	return nil, &NotLoadedError{edge: "refund"}
}

// AssistanceOrErr returns the Assistance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderEdges) AssistanceOrErr() (*Assistance, error) {
	if e.loadedTypes[8] {
		if e.Assistance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: assistance.Label}
		}
		return e.Assistance, nil
	}
	return nil, &NotLoadedError{edge: "assistance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldCreator, order.FieldLastModifier:
			values[i] = new([]byte)
		case order.FieldAmount, order.FieldTotal:
			values[i] = new(sql.NullFloat64)
		case order.FieldID, order.FieldPlanID, order.FieldCityID, order.FieldRiderID, order.FieldParentID, order.FieldSubscribeID, order.FieldStatus, order.FieldPayway, order.FieldType, order.FieldInitialDays, order.FieldPastDays:
			values[i] = new(sql.NullInt64)
		case order.FieldRemark, order.FieldOutTradeNo, order.FieldTradeNo:
			values[i] = new(sql.NullString)
		case order.FieldCreatedAt, order.FieldUpdatedAt, order.FieldDeletedAt, order.FieldRefundAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = uint64(value.Int64)
		case order.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case order.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case order.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = new(time.Time)
				*o.DeletedAt = value.Time
			}
		case order.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case order.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case order.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				o.Remark = value.String
			}
		case order.FieldPlanID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				o.PlanID = new(uint64)
				*o.PlanID = uint64(value.Int64)
			}
		case order.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				o.CityID = new(uint64)
				*o.CityID = uint64(value.Int64)
			}
		case order.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				o.RiderID = uint64(value.Int64)
			}
		case order.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				o.ParentID = uint64(value.Int64)
			}
		case order.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				o.SubscribeID = uint64(value.Int64)
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = uint8(value.Int64)
			}
		case order.FieldPayway:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payway", values[i])
			} else if value.Valid {
				o.Payway = uint8(value.Int64)
			}
		case order.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = uint(value.Int64)
			}
		case order.FieldOutTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field out_trade_no", values[i])
			} else if value.Valid {
				o.OutTradeNo = value.String
			}
		case order.FieldTradeNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trade_no", values[i])
			} else if value.Valid {
				o.TradeNo = value.String
			}
		case order.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				o.Amount = value.Float64
			}
		case order.FieldTotal:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				o.Total = value.Float64
			}
		case order.FieldRefundAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field refund_at", values[i])
			} else if value.Valid {
				o.RefundAt = new(time.Time)
				*o.RefundAt = value.Time
			}
		case order.FieldInitialDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field initial_days", values[i])
			} else if value.Valid {
				o.InitialDays = int(value.Int64)
			}
		case order.FieldPastDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field past_days", values[i])
			} else if value.Valid {
				o.PastDays = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPlan queries the "plan" edge of the Order entity.
func (o *Order) QueryPlan() *PlanQuery {
	return (&OrderClient{config: o.config}).QueryPlan(o)
}

// QueryCity queries the "city" edge of the Order entity.
func (o *Order) QueryCity() *CityQuery {
	return (&OrderClient{config: o.config}).QueryCity(o)
}

// QueryRider queries the "rider" edge of the Order entity.
func (o *Order) QueryRider() *RiderQuery {
	return (&OrderClient{config: o.config}).QueryRider(o)
}

// QuerySubscribe queries the "subscribe" edge of the Order entity.
func (o *Order) QuerySubscribe() *SubscribeQuery {
	return (&OrderClient{config: o.config}).QuerySubscribe(o)
}

// QueryCommission queries the "commission" edge of the Order entity.
func (o *Order) QueryCommission() *CommissionQuery {
	return (&OrderClient{config: o.config}).QueryCommission(o)
}

// QueryParent queries the "parent" edge of the Order entity.
func (o *Order) QueryParent() *OrderQuery {
	return (&OrderClient{config: o.config}).QueryParent(o)
}

// QueryChildren queries the "children" edge of the Order entity.
func (o *Order) QueryChildren() *OrderQuery {
	return (&OrderClient{config: o.config}).QueryChildren(o)
}

// QueryRefund queries the "refund" edge of the Order entity.
func (o *Order) QueryRefund() *OrderRefundQuery {
	return (&OrderClient{config: o.config}).QueryRefund(o)
}

// QueryAssistance queries the "assistance" edge of the Order entity.
func (o *Order) QueryAssistance() *AssistanceQuery {
	return (&OrderClient{config: o.config}).QueryAssistance(o)
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return (&OrderClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := o.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", o.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", o.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(o.Remark)
	builder.WriteString(", ")
	if v := o.PlanID; v != nil {
		builder.WriteString("plan_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := o.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", o.RiderID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ParentID))
	builder.WriteString(", ")
	builder.WriteString("subscribe_id=")
	builder.WriteString(fmt.Sprintf("%v", o.SubscribeID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("payway=")
	builder.WriteString(fmt.Sprintf("%v", o.Payway))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ")
	builder.WriteString("out_trade_no=")
	builder.WriteString(o.OutTradeNo)
	builder.WriteString(", ")
	builder.WriteString("trade_no=")
	builder.WriteString(o.TradeNo)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", o.Amount))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", o.Total))
	builder.WriteString(", ")
	if v := o.RefundAt; v != nil {
		builder.WriteString("refund_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("initial_days=")
	builder.WriteString(fmt.Sprintf("%v", o.InitialDays))
	builder.WriteString(", ")
	builder.WriteString("past_days=")
	builder.WriteString(fmt.Sprintf("%v", o.PastDays))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
