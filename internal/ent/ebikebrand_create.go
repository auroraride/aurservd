// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
)

// EbikeBrandCreate is the builder for creating a EbikeBrand entity.
type EbikeBrandCreate struct {
	config
	mutation *EbikeBrandMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ebc *EbikeBrandCreate) SetCreatedAt(t time.Time) *EbikeBrandCreate {
	ebc.mutation.SetCreatedAt(t)
	return ebc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ebc *EbikeBrandCreate) SetNillableCreatedAt(t *time.Time) *EbikeBrandCreate {
	if t != nil {
		ebc.SetCreatedAt(*t)
	}
	return ebc
}

// SetUpdatedAt sets the "updated_at" field.
func (ebc *EbikeBrandCreate) SetUpdatedAt(t time.Time) *EbikeBrandCreate {
	ebc.mutation.SetUpdatedAt(t)
	return ebc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ebc *EbikeBrandCreate) SetNillableUpdatedAt(t *time.Time) *EbikeBrandCreate {
	if t != nil {
		ebc.SetUpdatedAt(*t)
	}
	return ebc
}

// SetDeletedAt sets the "deleted_at" field.
func (ebc *EbikeBrandCreate) SetDeletedAt(t time.Time) *EbikeBrandCreate {
	ebc.mutation.SetDeletedAt(t)
	return ebc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ebc *EbikeBrandCreate) SetNillableDeletedAt(t *time.Time) *EbikeBrandCreate {
	if t != nil {
		ebc.SetDeletedAt(*t)
	}
	return ebc
}

// SetCreator sets the "creator" field.
func (ebc *EbikeBrandCreate) SetCreator(m *model.Modifier) *EbikeBrandCreate {
	ebc.mutation.SetCreator(m)
	return ebc
}

// SetLastModifier sets the "last_modifier" field.
func (ebc *EbikeBrandCreate) SetLastModifier(m *model.Modifier) *EbikeBrandCreate {
	ebc.mutation.SetLastModifier(m)
	return ebc
}

// SetRemark sets the "remark" field.
func (ebc *EbikeBrandCreate) SetRemark(s string) *EbikeBrandCreate {
	ebc.mutation.SetRemark(s)
	return ebc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ebc *EbikeBrandCreate) SetNillableRemark(s *string) *EbikeBrandCreate {
	if s != nil {
		ebc.SetRemark(*s)
	}
	return ebc
}

// SetName sets the "name" field.
func (ebc *EbikeBrandCreate) SetName(s string) *EbikeBrandCreate {
	ebc.mutation.SetName(s)
	return ebc
}

// Mutation returns the EbikeBrandMutation object of the builder.
func (ebc *EbikeBrandCreate) Mutation() *EbikeBrandMutation {
	return ebc.mutation
}

// Save creates the EbikeBrand in the database.
func (ebc *EbikeBrandCreate) Save(ctx context.Context) (*EbikeBrand, error) {
	var (
		err  error
		node *EbikeBrand
	)
	if err := ebc.defaults(); err != nil {
		return nil, err
	}
	if len(ebc.hooks) == 0 {
		if err = ebc.check(); err != nil {
			return nil, err
		}
		node, err = ebc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeBrandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ebc.check(); err != nil {
				return nil, err
			}
			ebc.mutation = mutation
			if node, err = ebc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ebc.hooks) - 1; i >= 0; i-- {
			if ebc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ebc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ebc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EbikeBrand)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EbikeBrandMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ebc *EbikeBrandCreate) SaveX(ctx context.Context) *EbikeBrand {
	v, err := ebc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebc *EbikeBrandCreate) Exec(ctx context.Context) error {
	_, err := ebc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebc *EbikeBrandCreate) ExecX(ctx context.Context) {
	if err := ebc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ebc *EbikeBrandCreate) defaults() error {
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		if ebikebrand.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrand.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrand.DefaultCreatedAt()
		ebc.mutation.SetCreatedAt(v)
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		if ebikebrand.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebikebrand.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebikebrand.DefaultUpdatedAt()
		ebc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ebc *EbikeBrandCreate) check() error {
	if _, ok := ebc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EbikeBrand.created_at"`)}
	}
	if _, ok := ebc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EbikeBrand.updated_at"`)}
	}
	if _, ok := ebc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EbikeBrand.name"`)}
	}
	return nil
}

func (ebc *EbikeBrandCreate) sqlSave(ctx context.Context) (*EbikeBrand, error) {
	_node, _spec := ebc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ebc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (ebc *EbikeBrandCreate) createSpec() (*EbikeBrand, *sqlgraph.CreateSpec) {
	var (
		_node = &EbikeBrand{config: ebc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ebikebrand.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikebrand.FieldID,
			},
		}
	)
	_spec.OnConflict = ebc.conflict
	if value, ok := ebc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikebrand.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ebc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikebrand.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ebc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikebrand.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := ebc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebikebrand.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := ebc.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebikebrand.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := ebc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebikebrand.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := ebc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebikebrand.FieldName,
		})
		_node.Name = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeBrand.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeBrandUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebc *EbikeBrandCreate) OnConflict(opts ...sql.ConflictOption) *EbikeBrandUpsertOne {
	ebc.conflict = opts
	return &EbikeBrandUpsertOne{
		create: ebc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebc *EbikeBrandCreate) OnConflictColumns(columns ...string) *EbikeBrandUpsertOne {
	ebc.conflict = append(ebc.conflict, sql.ConflictColumns(columns...))
	return &EbikeBrandUpsertOne{
		create: ebc,
	}
}

type (
	// EbikeBrandUpsertOne is the builder for "upsert"-ing
	//  one EbikeBrand node.
	EbikeBrandUpsertOne struct {
		create *EbikeBrandCreate
	}

	// EbikeBrandUpsert is the "OnConflict" setter.
	EbikeBrandUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandUpsert) SetUpdatedAt(v time.Time) *EbikeBrandUpsert {
	u.Set(ebikebrand.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandUpsert) UpdateUpdatedAt() *EbikeBrandUpsert {
	u.SetExcluded(ebikebrand.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandUpsert) SetDeletedAt(v time.Time) *EbikeBrandUpsert {
	u.Set(ebikebrand.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandUpsert) UpdateDeletedAt() *EbikeBrandUpsert {
	u.SetExcluded(ebikebrand.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandUpsert) ClearDeletedAt() *EbikeBrandUpsert {
	u.SetNull(ebikebrand.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandUpsert) SetLastModifier(v *model.Modifier) *EbikeBrandUpsert {
	u.Set(ebikebrand.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandUpsert) UpdateLastModifier() *EbikeBrandUpsert {
	u.SetExcluded(ebikebrand.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandUpsert) ClearLastModifier() *EbikeBrandUpsert {
	u.SetNull(ebikebrand.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandUpsert) SetRemark(v string) *EbikeBrandUpsert {
	u.Set(ebikebrand.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandUpsert) UpdateRemark() *EbikeBrandUpsert {
	u.SetExcluded(ebikebrand.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandUpsert) ClearRemark() *EbikeBrandUpsert {
	u.SetNull(ebikebrand.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *EbikeBrandUpsert) SetName(v string) *EbikeBrandUpsert {
	u.Set(ebikebrand.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandUpsert) UpdateName() *EbikeBrandUpsert {
	u.SetExcluded(ebikebrand.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeBrandUpsertOne) UpdateNewValues() *EbikeBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(ebikebrand.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(ebikebrand.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EbikeBrandUpsertOne) Ignore() *EbikeBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeBrandUpsertOne) DoNothing() *EbikeBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeBrandCreate.OnConflict
// documentation for more info.
func (u *EbikeBrandUpsertOne) Update(set func(*EbikeBrandUpsert)) *EbikeBrandUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandUpsertOne) SetUpdatedAt(v time.Time) *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandUpsertOne) UpdateUpdatedAt() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandUpsertOne) SetDeletedAt(v time.Time) *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandUpsertOne) UpdateDeletedAt() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandUpsertOne) ClearDeletedAt() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandUpsertOne) SetLastModifier(v *model.Modifier) *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandUpsertOne) UpdateLastModifier() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandUpsertOne) ClearLastModifier() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandUpsertOne) SetRemark(v string) *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandUpsertOne) UpdateRemark() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandUpsertOne) ClearRemark() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *EbikeBrandUpsertOne) SetName(v string) *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandUpsertOne) UpdateName() *EbikeBrandUpsertOne {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *EbikeBrandUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeBrandCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeBrandUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EbikeBrandUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EbikeBrandUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EbikeBrandCreateBulk is the builder for creating many EbikeBrand entities in bulk.
type EbikeBrandCreateBulk struct {
	config
	builders []*EbikeBrandCreate
	conflict []sql.ConflictOption
}

// Save creates the EbikeBrand entities in the database.
func (ebcb *EbikeBrandCreateBulk) Save(ctx context.Context) ([]*EbikeBrand, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ebcb.builders))
	nodes := make([]*EbikeBrand, len(ebcb.builders))
	mutators := make([]Mutator, len(ebcb.builders))
	for i := range ebcb.builders {
		func(i int, root context.Context) {
			builder := ebcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EbikeBrandMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ebcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ebcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ebcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ebcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ebcb *EbikeBrandCreateBulk) SaveX(ctx context.Context) []*EbikeBrand {
	v, err := ebcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ebcb *EbikeBrandCreateBulk) Exec(ctx context.Context) error {
	_, err := ebcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ebcb *EbikeBrandCreateBulk) ExecX(ctx context.Context) {
	if err := ebcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EbikeBrand.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EbikeBrandUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ebcb *EbikeBrandCreateBulk) OnConflict(opts ...sql.ConflictOption) *EbikeBrandUpsertBulk {
	ebcb.conflict = opts
	return &EbikeBrandUpsertBulk{
		create: ebcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ebcb *EbikeBrandCreateBulk) OnConflictColumns(columns ...string) *EbikeBrandUpsertBulk {
	ebcb.conflict = append(ebcb.conflict, sql.ConflictColumns(columns...))
	return &EbikeBrandUpsertBulk{
		create: ebcb,
	}
}

// EbikeBrandUpsertBulk is the builder for "upsert"-ing
// a bulk of EbikeBrand nodes.
type EbikeBrandUpsertBulk struct {
	create *EbikeBrandCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EbikeBrandUpsertBulk) UpdateNewValues() *EbikeBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(ebikebrand.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(ebikebrand.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EbikeBrand.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EbikeBrandUpsertBulk) Ignore() *EbikeBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EbikeBrandUpsertBulk) DoNothing() *EbikeBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EbikeBrandCreateBulk.OnConflict
// documentation for more info.
func (u *EbikeBrandUpsertBulk) Update(set func(*EbikeBrandUpsert)) *EbikeBrandUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EbikeBrandUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EbikeBrandUpsertBulk) SetUpdatedAt(v time.Time) *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EbikeBrandUpsertBulk) UpdateUpdatedAt() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *EbikeBrandUpsertBulk) SetDeletedAt(v time.Time) *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *EbikeBrandUpsertBulk) UpdateDeletedAt() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *EbikeBrandUpsertBulk) ClearDeletedAt() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *EbikeBrandUpsertBulk) SetLastModifier(v *model.Modifier) *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *EbikeBrandUpsertBulk) UpdateLastModifier() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *EbikeBrandUpsertBulk) ClearLastModifier() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *EbikeBrandUpsertBulk) SetRemark(v string) *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *EbikeBrandUpsertBulk) UpdateRemark() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *EbikeBrandUpsertBulk) ClearRemark() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *EbikeBrandUpsertBulk) SetName(v string) *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EbikeBrandUpsertBulk) UpdateName() *EbikeBrandUpsertBulk {
	return u.Update(func(s *EbikeBrandUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *EbikeBrandUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EbikeBrandCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EbikeBrandCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EbikeBrandUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
