// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/plan"
)

// CityCreate is the builder for creating a City entity.
type CityCreate struct {
	config
	mutation *CityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CityCreate) SetCreatedAt(t time.Time) *CityCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableCreatedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CityCreate) SetUpdatedAt(t time.Time) *CityCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableUpdatedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CityCreate) SetDeletedAt(t time.Time) *CityCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CityCreate) SetNillableDeletedAt(t *time.Time) *CityCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetCreator sets the "creator" field.
func (cc *CityCreate) SetCreator(m *model.Modifier) *CityCreate {
	cc.mutation.SetCreator(m)
	return cc
}

// SetLastModifier sets the "last_modifier" field.
func (cc *CityCreate) SetLastModifier(m *model.Modifier) *CityCreate {
	cc.mutation.SetLastModifier(m)
	return cc
}

// SetRemark sets the "remark" field.
func (cc *CityCreate) SetRemark(s string) *CityCreate {
	cc.mutation.SetRemark(s)
	return cc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cc *CityCreate) SetNillableRemark(s *string) *CityCreate {
	if s != nil {
		cc.SetRemark(*s)
	}
	return cc
}

// SetOpen sets the "open" field.
func (cc *CityCreate) SetOpen(b bool) *CityCreate {
	cc.mutation.SetOpen(b)
	return cc
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (cc *CityCreate) SetNillableOpen(b *bool) *CityCreate {
	if b != nil {
		cc.SetOpen(*b)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CityCreate) SetName(s string) *CityCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *CityCreate) SetCode(s string) *CityCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetParentID sets the "parent_id" field.
func (cc *CityCreate) SetParentID(u uint64) *CityCreate {
	cc.mutation.SetParentID(u)
	return cc
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cc *CityCreate) SetNillableParentID(u *uint64) *CityCreate {
	if u != nil {
		cc.SetParentID(*u)
	}
	return cc
}

// SetLng sets the "lng" field.
func (cc *CityCreate) SetLng(f float64) *CityCreate {
	cc.mutation.SetLng(f)
	return cc
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cc *CityCreate) SetNillableLng(f *float64) *CityCreate {
	if f != nil {
		cc.SetLng(*f)
	}
	return cc
}

// SetLat sets the "lat" field.
func (cc *CityCreate) SetLat(f float64) *CityCreate {
	cc.mutation.SetLat(f)
	return cc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cc *CityCreate) SetNillableLat(f *float64) *CityCreate {
	if f != nil {
		cc.SetLat(*f)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CityCreate) SetID(u uint64) *CityCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetParent sets the "parent" edge to the City entity.
func (cc *CityCreate) SetParent(c *City) *CityCreate {
	return cc.SetParentID(c.ID)
}

// AddChildIDs adds the "children" edge to the City entity by IDs.
func (cc *CityCreate) AddChildIDs(ids ...uint64) *CityCreate {
	cc.mutation.AddChildIDs(ids...)
	return cc
}

// AddChildren adds the "children" edges to the City entity.
func (cc *CityCreate) AddChildren(c ...*City) *CityCreate {
	ids := make([]uint64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddChildIDs(ids...)
}

// AddPlanIDs adds the "plans" edge to the Plan entity by IDs.
func (cc *CityCreate) AddPlanIDs(ids ...uint64) *CityCreate {
	cc.mutation.AddPlanIDs(ids...)
	return cc
}

// AddPlans adds the "plans" edges to the Plan entity.
func (cc *CityCreate) AddPlans(p ...*Plan) *CityCreate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPlanIDs(ids...)
}

// AddMaintainerIDs adds the "maintainers" edge to the Maintainer entity by IDs.
func (cc *CityCreate) AddMaintainerIDs(ids ...uint64) *CityCreate {
	cc.mutation.AddMaintainerIDs(ids...)
	return cc
}

// AddMaintainers adds the "maintainers" edges to the Maintainer entity.
func (cc *CityCreate) AddMaintainers(m ...*Maintainer) *CityCreate {
	ids := make([]uint64, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMaintainerIDs(ids...)
}

// Mutation returns the CityMutation object of the builder.
func (cc *CityCreate) Mutation() *CityMutation {
	return cc.mutation
}

// Save creates the City in the database.
func (cc *CityCreate) Save(ctx context.Context) (*City, error) {
	if err := cc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CityCreate) SaveX(ctx context.Context) *City {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CityCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CityCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CityCreate) defaults() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		if city.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized city.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := city.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		if city.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized city.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := city.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cc *CityCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "City.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "City.updated_at"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "City.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := city.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "City.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "City.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := city.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "City.code": %w`, err)}
		}
	}
	return nil
}

func (cc *CityCreate) sqlSave(ctx context.Context) (*City, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CityCreate) createSpec() (*City, *sqlgraph.CreateSpec) {
	var (
		_node = &City{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(city.Table, sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(city.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(city.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.SetField(city.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := cc.mutation.Creator(); ok {
		_spec.SetField(city.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := cc.mutation.LastModifier(); ok {
		_spec.SetField(city.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := cc.mutation.Remark(); ok {
		_spec.SetField(city.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := cc.mutation.Open(); ok {
		_spec.SetField(city.FieldOpen, field.TypeBool, value)
		_node.Open = &value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(city.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(city.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.Lng(); ok {
		_spec.SetField(city.FieldLng, field.TypeFloat64, value)
		_node.Lng = value
	}
	if value, ok := cc.mutation.Lat(); ok {
		_spec.SetField(city.FieldLat, field.TypeFloat64, value)
		_node.Lat = value
	}
	if nodes := cc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   city.ParentTable,
			Columns: []string{city.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   city.ChildrenTable,
			Columns: []string{city.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(city.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   city.PlansTable,
			Columns: city.PlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MaintainersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   city.MaintainersTable,
			Columns: city.MaintainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.City.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CityCreate) OnConflict(opts ...sql.ConflictOption) *CityUpsertOne {
	cc.conflict = opts
	return &CityUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CityCreate) OnConflictColumns(columns ...string) *CityUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CityUpsertOne{
		create: cc,
	}
}

type (
	// CityUpsertOne is the builder for "upsert"-ing
	//  one City node.
	CityUpsertOne struct {
		create *CityCreate
	}

	// CityUpsert is the "OnConflict" setter.
	CityUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CityUpsert) SetUpdatedAt(v time.Time) *CityUpsert {
	u.Set(city.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityUpsert) UpdateUpdatedAt() *CityUpsert {
	u.SetExcluded(city.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityUpsert) SetDeletedAt(v time.Time) *CityUpsert {
	u.Set(city.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityUpsert) UpdateDeletedAt() *CityUpsert {
	u.SetExcluded(city.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityUpsert) ClearDeletedAt() *CityUpsert {
	u.SetNull(city.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityUpsert) SetLastModifier(v *model.Modifier) *CityUpsert {
	u.Set(city.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityUpsert) UpdateLastModifier() *CityUpsert {
	u.SetExcluded(city.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityUpsert) ClearLastModifier() *CityUpsert {
	u.SetNull(city.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *CityUpsert) SetRemark(v string) *CityUpsert {
	u.Set(city.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityUpsert) UpdateRemark() *CityUpsert {
	u.SetExcluded(city.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *CityUpsert) ClearRemark() *CityUpsert {
	u.SetNull(city.FieldRemark)
	return u
}

// SetOpen sets the "open" field.
func (u *CityUpsert) SetOpen(v bool) *CityUpsert {
	u.Set(city.FieldOpen, v)
	return u
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityUpsert) UpdateOpen() *CityUpsert {
	u.SetExcluded(city.FieldOpen)
	return u
}

// ClearOpen clears the value of the "open" field.
func (u *CityUpsert) ClearOpen() *CityUpsert {
	u.SetNull(city.FieldOpen)
	return u
}

// SetName sets the "name" field.
func (u *CityUpsert) SetName(v string) *CityUpsert {
	u.Set(city.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsert) UpdateName() *CityUpsert {
	u.SetExcluded(city.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *CityUpsert) SetCode(v string) *CityUpsert {
	u.Set(city.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityUpsert) UpdateCode() *CityUpsert {
	u.SetExcluded(city.FieldCode)
	return u
}

// SetParentID sets the "parent_id" field.
func (u *CityUpsert) SetParentID(v uint64) *CityUpsert {
	u.Set(city.FieldParentID, v)
	return u
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityUpsert) UpdateParentID() *CityUpsert {
	u.SetExcluded(city.FieldParentID)
	return u
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityUpsert) ClearParentID() *CityUpsert {
	u.SetNull(city.FieldParentID)
	return u
}

// SetLng sets the "lng" field.
func (u *CityUpsert) SetLng(v float64) *CityUpsert {
	u.Set(city.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityUpsert) UpdateLng() *CityUpsert {
	u.SetExcluded(city.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *CityUpsert) AddLng(v float64) *CityUpsert {
	u.Add(city.FieldLng, v)
	return u
}

// ClearLng clears the value of the "lng" field.
func (u *CityUpsert) ClearLng() *CityUpsert {
	u.SetNull(city.FieldLng)
	return u
}

// SetLat sets the "lat" field.
func (u *CityUpsert) SetLat(v float64) *CityUpsert {
	u.Set(city.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityUpsert) UpdateLat() *CityUpsert {
	u.SetExcluded(city.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *CityUpsert) AddLat(v float64) *CityUpsert {
	u.Add(city.FieldLat, v)
	return u
}

// ClearLat clears the value of the "lat" field.
func (u *CityUpsert) ClearLat() *CityUpsert {
	u.SetNull(city.FieldLat)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(city.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityUpsertOne) UpdateNewValues() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(city.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(city.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(city.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.City.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CityUpsertOne) Ignore() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityUpsertOne) DoNothing() *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityCreate.OnConflict
// documentation for more info.
func (u *CityUpsertOne) Update(set func(*CityUpsert)) *CityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CityUpsertOne) SetUpdatedAt(v time.Time) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateUpdatedAt() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityUpsertOne) SetDeletedAt(v time.Time) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateDeletedAt() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityUpsertOne) ClearDeletedAt() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityUpsertOne) SetLastModifier(v *model.Modifier) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateLastModifier() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityUpsertOne) ClearLastModifier() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CityUpsertOne) SetRemark(v string) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateRemark() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CityUpsertOne) ClearRemark() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearRemark()
	})
}

// SetOpen sets the "open" field.
func (u *CityUpsertOne) SetOpen(v bool) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateOpen() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateOpen()
	})
}

// ClearOpen clears the value of the "open" field.
func (u *CityUpsertOne) ClearOpen() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearOpen()
	})
}

// SetName sets the "name" field.
func (u *CityUpsertOne) SetName(v string) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateName() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CityUpsertOne) SetCode(v string) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateCode() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CityUpsertOne) SetParentID(v uint64) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateParentID() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityUpsertOne) ClearParentID() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearParentID()
	})
}

// SetLng sets the "lng" field.
func (u *CityUpsertOne) SetLng(v float64) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CityUpsertOne) AddLng(v float64) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateLng() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CityUpsertOne) ClearLng() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CityUpsertOne) SetLat(v float64) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CityUpsertOne) AddLat(v float64) *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityUpsertOne) UpdateLat() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CityUpsertOne) ClearLat() *CityUpsertOne {
	return u.Update(func(s *CityUpsert) {
		s.ClearLat()
	})
}

// Exec executes the query.
func (u *CityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CityUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CityUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CityCreateBulk is the builder for creating many City entities in bulk.
type CityCreateBulk struct {
	config
	err      error
	builders []*CityCreate
	conflict []sql.ConflictOption
}

// Save creates the City entities in the database.
func (ccb *CityCreateBulk) Save(ctx context.Context) ([]*City, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*City, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CityCreateBulk) SaveX(ctx context.Context) []*City {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CityCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CityCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.City.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CityUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CityCreateBulk) OnConflict(opts ...sql.ConflictOption) *CityUpsertBulk {
	ccb.conflict = opts
	return &CityUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CityCreateBulk) OnConflictColumns(columns ...string) *CityUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CityUpsertBulk{
		create: ccb,
	}
}

// CityUpsertBulk is the builder for "upsert"-ing
// a bulk of City nodes.
type CityUpsertBulk struct {
	create *CityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(city.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CityUpsertBulk) UpdateNewValues() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(city.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(city.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(city.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.City.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CityUpsertBulk) Ignore() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CityUpsertBulk) DoNothing() *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CityCreateBulk.OnConflict
// documentation for more info.
func (u *CityUpsertBulk) Update(set func(*CityUpsert)) *CityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CityUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CityUpsertBulk) SetUpdatedAt(v time.Time) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateUpdatedAt() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *CityUpsertBulk) SetDeletedAt(v time.Time) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateDeletedAt() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *CityUpsertBulk) ClearDeletedAt() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *CityUpsertBulk) SetLastModifier(v *model.Modifier) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateLastModifier() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *CityUpsertBulk) ClearLastModifier() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *CityUpsertBulk) SetRemark(v string) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateRemark() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *CityUpsertBulk) ClearRemark() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearRemark()
	})
}

// SetOpen sets the "open" field.
func (u *CityUpsertBulk) SetOpen(v bool) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateOpen() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateOpen()
	})
}

// ClearOpen clears the value of the "open" field.
func (u *CityUpsertBulk) ClearOpen() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearOpen()
	})
}

// SetName sets the "name" field.
func (u *CityUpsertBulk) SetName(v string) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateName() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *CityUpsertBulk) SetCode(v string) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateCode() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateCode()
	})
}

// SetParentID sets the "parent_id" field.
func (u *CityUpsertBulk) SetParentID(v uint64) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetParentID(v)
	})
}

// UpdateParentID sets the "parent_id" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateParentID() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateParentID()
	})
}

// ClearParentID clears the value of the "parent_id" field.
func (u *CityUpsertBulk) ClearParentID() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearParentID()
	})
}

// SetLng sets the "lng" field.
func (u *CityUpsertBulk) SetLng(v float64) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CityUpsertBulk) AddLng(v float64) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateLng() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CityUpsertBulk) ClearLng() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CityUpsertBulk) SetLat(v float64) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CityUpsertBulk) AddLat(v float64) *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CityUpsertBulk) UpdateLat() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CityUpsertBulk) ClearLat() *CityUpsertBulk {
	return u.Update(func(s *CityUpsert) {
		s.ClearLat()
	})
}

// Exec executes the query.
func (u *CityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
