// Code generated by ent, DO NOT EDIT.

package allocate

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the allocate type in the database.
	Label = "allocate"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldSubscribeID holds the string denoting the subscribe_id field in the database.
	FieldSubscribeID = "subscribe_id"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldBrandID holds the string denoting the brand_id field in the database.
	FieldBrandID = "brand_id"
	// FieldBatteryID holds the string denoting the battery_id field in the database.
	FieldBatteryID = "battery_id"
	// FieldStationID holds the string denoting the station_id field in the database.
	FieldStationID = "station_id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldEbikeID holds the string denoting the ebike_id field in the database.
	FieldEbikeID = "ebike_id"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// EdgeSubscribe holds the string denoting the subscribe edge name in mutations.
	EdgeSubscribe = "subscribe"
	// EdgeEmployee holds the string denoting the employee edge name in mutations.
	EdgeEmployee = "employee"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeContract holds the string denoting the contract edge name in mutations.
	EdgeContract = "contract"
	// EdgeEbike holds the string denoting the ebike edge name in mutations.
	EdgeEbike = "ebike"
	// Table holds the table name of the allocate in the database.
	Table = "allocate"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "allocate"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
	// SubscribeTable is the table that holds the subscribe relation/edge.
	SubscribeTable = "allocate"
	// SubscribeInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribeInverseTable = "subscribe"
	// SubscribeColumn is the table column denoting the subscribe relation/edge.
	SubscribeColumn = "subscribe_id"
	// EmployeeTable is the table that holds the employee relation/edge.
	EmployeeTable = "allocate"
	// EmployeeInverseTable is the table name for the Employee entity.
	// It exists in this package in order to avoid circular dependency with the "employee" package.
	EmployeeInverseTable = "employee"
	// EmployeeColumn is the table column denoting the employee relation/edge.
	EmployeeColumn = "employee_id"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "allocate"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "allocate"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "store_id"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "allocate"
	// BrandInverseTable is the table name for the EbikeBrand entity.
	// It exists in this package in order to avoid circular dependency with the "ebikebrand" package.
	BrandInverseTable = "ebike_brand"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "allocate"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "battery_id"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "allocate"
	// StationInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationInverseTable = "enterprise_station"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_id"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "allocate"
	// AgentInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentInverseTable = "agent"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_id"
	// ContractTable is the table that holds the contract relation/edge.
	ContractTable = "contract"
	// ContractInverseTable is the table name for the Contract entity.
	// It exists in this package in order to avoid circular dependency with the "contract" package.
	ContractInverseTable = "contract"
	// ContractColumn is the table column denoting the contract relation/edge.
	ContractColumn = "allocate_id"
	// EbikeTable is the table that holds the ebike relation/edge.
	EbikeTable = "allocate"
	// EbikeInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	EbikeInverseTable = "asset"
	// EbikeColumn is the table column denoting the ebike relation/edge.
	EbikeColumn = "ebike_id"
)

// Columns holds all SQL columns for allocate fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRiderID,
	FieldSubscribeID,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldEmployeeID,
	FieldCabinetID,
	FieldStoreID,
	FieldBrandID,
	FieldBatteryID,
	FieldStationID,
	FieldAgentID,
	FieldType,
	FieldStatus,
	FieldTime,
	FieldModel,
	FieldEbikeID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "allocate"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ebike_allocates",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeBattery Type = "battery"
	TypeEbike   Type = "ebike"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeBattery, TypeEbike:
		return nil
	default:
		return fmt.Errorf("allocate: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Allocate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}

// BySubscribeID orders the results by the subscribe_id field.
func BySubscribeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribeID, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// ByStoreID orders the results by the store_id field.
func ByStoreID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreID, opts...).ToFunc()
}

// ByBrandID orders the results by the brand_id field.
func ByBrandID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrandID, opts...).ToFunc()
}

// ByBatteryID orders the results by the battery_id field.
func ByBatteryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryID, opts...).ToFunc()
}

// ByStationID orders the results by the station_id field.
func ByStationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStationID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByEbikeID orders the results by the ebike_id field.
func ByEbikeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEbikeID, opts...).ToFunc()
}

// ByRiderField orders the results by rider field.
func ByRiderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiderStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscribeField orders the results by subscribe field.
func BySubscribeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribeStep(), sql.OrderByField(field, opts...))
	}
}

// ByEmployeeField orders the results by employee field.
func ByEmployeeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEmployeeStep(), sql.OrderByField(field, opts...))
	}
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByBrandField orders the results by brand field.
func ByBrandField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBrandStep(), sql.OrderByField(field, opts...))
	}
}

// ByBatteryField orders the results by battery field.
func ByBatteryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryStep(), sql.OrderByField(field, opts...))
	}
}

// ByStationField orders the results by station field.
func ByStationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationStep(), sql.OrderByField(field, opts...))
	}
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByContractField orders the results by contract field.
func ByContractField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractStep(), sql.OrderByField(field, opts...))
	}
}

// ByEbikeField orders the results by ebike field.
func ByEbikeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEbikeStep(), sql.OrderByField(field, opts...))
	}
}
func newRiderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
	)
}
func newSubscribeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
	)
}
func newEmployeeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EmployeeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
	)
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
	)
}
func newBrandStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BrandInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
	)
}
func newBatteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BatteryTable, BatteryColumn),
	)
}
func newStationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
	)
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AgentTable, AgentColumn),
	)
}
func newContractStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ContractTable, ContractColumn),
	)
}
func newEbikeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EbikeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EbikeTable, EbikeColumn),
	)
}
