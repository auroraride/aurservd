// Code generated by ent, DO NOT EDIT.

package allocate

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// SubscribeID applies equality check predicate on the "subscribe_id" field. It's identical to SubscribeIDEQ.
func SubscribeID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscribeID), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// StoreID applies equality check predicate on the "store_id" field. It's identical to StoreIDEQ.
func StoreID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// EbikeID applies equality check predicate on the "ebike_id" field. It's identical to EbikeIDEQ.
func EbikeID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEbikeID), v))
	})
}

// BrandID applies equality check predicate on the "brand_id" field. It's identical to BrandIDEQ.
func BrandID(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRiderID), v))
	})
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRiderID), v))
	})
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRiderID), v...))
	})
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRiderID), v...))
	})
}

// SubscribeIDEQ applies the EQ predicate on the "subscribe_id" field.
func SubscribeIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubscribeID), v))
	})
}

// SubscribeIDNEQ applies the NEQ predicate on the "subscribe_id" field.
func SubscribeIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubscribeID), v))
	})
}

// SubscribeIDIn applies the In predicate on the "subscribe_id" field.
func SubscribeIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubscribeID), v...))
	})
}

// SubscribeIDNotIn applies the NotIn predicate on the "subscribe_id" field.
func SubscribeIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubscribeID), v...))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmployeeID), v))
	})
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmployeeID), v...))
	})
}

// EmployeeIDIsNil applies the IsNil predicate on the "employee_id" field.
func EmployeeIDIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEmployeeID)))
	})
}

// EmployeeIDNotNil applies the NotNil predicate on the "employee_id" field.
func EmployeeIDNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEmployeeID)))
	})
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCabinetID), v...))
	})
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCabinetID), v...))
	})
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCabinetID)))
	})
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCabinetID)))
	})
}

// StoreIDEQ applies the EQ predicate on the "store_id" field.
func StoreIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStoreID), v))
	})
}

// StoreIDNEQ applies the NEQ predicate on the "store_id" field.
func StoreIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStoreID), v))
	})
}

// StoreIDIn applies the In predicate on the "store_id" field.
func StoreIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStoreID), v...))
	})
}

// StoreIDNotIn applies the NotIn predicate on the "store_id" field.
func StoreIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStoreID), v...))
	})
}

// StoreIDIsNil applies the IsNil predicate on the "store_id" field.
func StoreIDIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStoreID)))
	})
}

// StoreIDNotNil applies the NotNil predicate on the "store_id" field.
func StoreIDNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStoreID)))
	})
}

// EbikeIDEQ applies the EQ predicate on the "ebike_id" field.
func EbikeIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEbikeID), v))
	})
}

// EbikeIDNEQ applies the NEQ predicate on the "ebike_id" field.
func EbikeIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEbikeID), v))
	})
}

// EbikeIDIn applies the In predicate on the "ebike_id" field.
func EbikeIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEbikeID), v...))
	})
}

// EbikeIDNotIn applies the NotIn predicate on the "ebike_id" field.
func EbikeIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEbikeID), v...))
	})
}

// EbikeIDIsNil applies the IsNil predicate on the "ebike_id" field.
func EbikeIDIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEbikeID)))
	})
}

// EbikeIDNotNil applies the NotNil predicate on the "ebike_id" field.
func EbikeIDNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEbikeID)))
	})
}

// BrandIDEQ applies the EQ predicate on the "brand_id" field.
func BrandIDEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrandID), v))
	})
}

// BrandIDNEQ applies the NEQ predicate on the "brand_id" field.
func BrandIDNEQ(v uint64) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrandID), v))
	})
}

// BrandIDIn applies the In predicate on the "brand_id" field.
func BrandIDIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrandID), v...))
	})
}

// BrandIDNotIn applies the NotIn predicate on the "brand_id" field.
func BrandIDNotIn(vs ...uint64) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrandID), v...))
	})
}

// BrandIDIsNil applies the IsNil predicate on the "brand_id" field.
func BrandIDIsNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrandID)))
	})
}

// BrandIDNotNil applies the NotNil predicate on the "brand_id" field.
func BrandIDNotNil() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrandID)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTime), v))
	})
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTime), v))
	})
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTime), v...))
	})
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTime), v...))
	})
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTime), v))
	})
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTime), v))
	})
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTime), v))
	})
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTime), v))
	})
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModel), v))
	})
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModel), v))
	})
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldModel), v...))
	})
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Allocate {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldModel), v...))
	})
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModel), v))
	})
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModel), v))
	})
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModel), v))
	})
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModel), v))
	})
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldModel), v))
	})
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldModel), v))
	})
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldModel), v))
	})
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldModel), v))
	})
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldModel), v))
	})
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribe applies the HasEdge predicate on the "subscribe" edge.
func HasSubscribe() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribeWith applies the HasEdge predicate on the "subscribe" edge with a given conditions (other predicates).
func HasSubscribeWith(preds ...predicate.Subscribe) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscribeTable, SubscribeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StoreInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEbike applies the HasEdge predicate on the "ebike" edge.
func HasEbike() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EbikeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEbikeWith applies the HasEdge predicate on the "ebike" edge with a given conditions (other predicates).
func HasEbikeWith(preds ...predicate.Ebike) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EbikeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, EbikeTable, EbikeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.EbikeBrand) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContract applies the HasEdge predicate on the "contract" edge.
func HasContract() predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ContractTable, ContractColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractWith applies the HasEdge predicate on the "contract" edge with a given conditions (other predicates).
func HasContractWith(preds ...predicate.Contract) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ContractTable, ContractColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Allocate) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Allocate) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Allocate) predicate.Allocate {
	return predicate.Allocate(func(s *sql.Selector) {
		p(s.Not())
	})
}
