// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotioncommission"
)

// PromotionCommissionDelete is the builder for deleting a PromotionCommission entity.
type PromotionCommissionDelete struct {
	config
	hooks    []Hook
	mutation *PromotionCommissionMutation
}

// Where appends a list predicates to the PromotionCommissionDelete builder.
func (pcd *PromotionCommissionDelete) Where(ps ...predicate.PromotionCommission) *PromotionCommissionDelete {
	pcd.mutation.Where(ps...)
	return pcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pcd *PromotionCommissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pcd.sqlExec, pcd.mutation, pcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pcd *PromotionCommissionDelete) ExecX(ctx context.Context) int {
	n, err := pcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pcd *PromotionCommissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(promotioncommission.Table, sqlgraph.NewFieldSpec(promotioncommission.FieldID, field.TypeUint64))
	if ps := pcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pcd.mutation.done = true
	return affected, err
}

// PromotionCommissionDeleteOne is the builder for deleting a single PromotionCommission entity.
type PromotionCommissionDeleteOne struct {
	pcd *PromotionCommissionDelete
}

// Where appends a list predicates to the PromotionCommissionDelete builder.
func (pcdo *PromotionCommissionDeleteOne) Where(ps ...predicate.PromotionCommission) *PromotionCommissionDeleteOne {
	pcdo.pcd.mutation.Where(ps...)
	return pcdo
}

// Exec executes the deletion query.
func (pcdo *PromotionCommissionDeleteOne) Exec(ctx context.Context) error {
	n, err := pcdo.pcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{promotioncommission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pcdo *PromotionCommissionDeleteOne) ExecX(ctx context.Context) {
	if err := pcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
