// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agreement"
)

// AgreementCreate is the builder for creating a Agreement entity.
type AgreementCreate struct {
	config
	mutation *AgreementMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AgreementCreate) SetCreatedAt(t time.Time) *AgreementCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableCreatedAt(t *time.Time) *AgreementCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AgreementCreate) SetUpdatedAt(t time.Time) *AgreementCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableUpdatedAt(t *time.Time) *AgreementCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AgreementCreate) SetDeletedAt(t time.Time) *AgreementCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableDeletedAt(t *time.Time) *AgreementCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreator sets the "creator" field.
func (ac *AgreementCreate) SetCreator(m *model.Modifier) *AgreementCreate {
	ac.mutation.SetCreator(m)
	return ac
}

// SetLastModifier sets the "last_modifier" field.
func (ac *AgreementCreate) SetLastModifier(m *model.Modifier) *AgreementCreate {
	ac.mutation.SetLastModifier(m)
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AgreementCreate) SetRemark(s string) *AgreementCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableRemark(s *string) *AgreementCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AgreementCreate) SetName(s string) *AgreementCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetContent sets the "content" field.
func (ac *AgreementCreate) SetContent(s string) *AgreementCreate {
	ac.mutation.SetContent(s)
	return ac
}

// SetUserType sets the "user_type" field.
func (ac *AgreementCreate) SetUserType(u uint8) *AgreementCreate {
	ac.mutation.SetUserType(u)
	return ac
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableUserType(u *uint8) *AgreementCreate {
	if u != nil {
		ac.SetUserType(*u)
	}
	return ac
}

// SetForceReadTime sets the "force_read_time" field.
func (ac *AgreementCreate) SetForceReadTime(u uint8) *AgreementCreate {
	ac.mutation.SetForceReadTime(u)
	return ac
}

// SetNillableForceReadTime sets the "force_read_time" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableForceReadTime(u *uint8) *AgreementCreate {
	if u != nil {
		ac.SetForceReadTime(*u)
	}
	return ac
}

// SetIsDefault sets the "is_default" field.
func (ac *AgreementCreate) SetIsDefault(b bool) *AgreementCreate {
	ac.mutation.SetIsDefault(b)
	return ac
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableIsDefault(b *bool) *AgreementCreate {
	if b != nil {
		ac.SetIsDefault(*b)
	}
	return ac
}

// SetHash sets the "hash" field.
func (ac *AgreementCreate) SetHash(s string) *AgreementCreate {
	ac.mutation.SetHash(s)
	return ac
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableHash(s *string) *AgreementCreate {
	if s != nil {
		ac.SetHash(*s)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *AgreementCreate) SetURL(s string) *AgreementCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ac *AgreementCreate) SetNillableURL(s *string) *AgreementCreate {
	if s != nil {
		ac.SetURL(*s)
	}
	return ac
}

// Mutation returns the AgreementMutation object of the builder.
func (ac *AgreementCreate) Mutation() *AgreementMutation {
	return ac.mutation
}

// Save creates the Agreement in the database.
func (ac *AgreementCreate) Save(ctx context.Context) (*Agreement, error) {
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgreementCreate) SaveX(ctx context.Context) *Agreement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgreementCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgreementCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgreementCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if agreement.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized agreement.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := agreement.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if agreement.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized agreement.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := agreement.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.UserType(); !ok {
		v := agreement.DefaultUserType
		ac.mutation.SetUserType(v)
	}
	if _, ok := ac.mutation.ForceReadTime(); !ok {
		v := agreement.DefaultForceReadTime
		ac.mutation.SetForceReadTime(v)
	}
	if _, ok := ac.mutation.IsDefault(); !ok {
		v := agreement.DefaultIsDefault
		ac.mutation.SetIsDefault(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgreementCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Agreement.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Agreement.updated_at"`)}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Agreement.name"`)}
	}
	if _, ok := ac.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Agreement.content"`)}
	}
	if _, ok := ac.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "Agreement.user_type"`)}
	}
	if _, ok := ac.mutation.ForceReadTime(); !ok {
		return &ValidationError{Name: "force_read_time", err: errors.New(`ent: missing required field "Agreement.force_read_time"`)}
	}
	if _, ok := ac.mutation.IsDefault(); !ok {
		return &ValidationError{Name: "is_default", err: errors.New(`ent: missing required field "Agreement.is_default"`)}
	}
	return nil
}

func (ac *AgreementCreate) sqlSave(ctx context.Context) (*Agreement, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgreementCreate) createSpec() (*Agreement, *sqlgraph.CreateSpec) {
	var (
		_node = &Agreement{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agreement.Table, sqlgraph.NewFieldSpec(agreement.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(agreement.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(agreement.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(agreement.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := ac.mutation.Creator(); ok {
		_spec.SetField(agreement.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := ac.mutation.LastModifier(); ok {
		_spec.SetField(agreement.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.SetField(agreement.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(agreement.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Content(); ok {
		_spec.SetField(agreement.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := ac.mutation.UserType(); ok {
		_spec.SetField(agreement.FieldUserType, field.TypeUint8, value)
		_node.UserType = value
	}
	if value, ok := ac.mutation.ForceReadTime(); ok {
		_spec.SetField(agreement.FieldForceReadTime, field.TypeUint8, value)
		_node.ForceReadTime = value
	}
	if value, ok := ac.mutation.IsDefault(); ok {
		_spec.SetField(agreement.FieldIsDefault, field.TypeBool, value)
		_node.IsDefault = value
	}
	if value, ok := ac.mutation.Hash(); ok {
		_spec.SetField(agreement.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(agreement.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agreement.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgreementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AgreementCreate) OnConflict(opts ...sql.ConflictOption) *AgreementUpsertOne {
	ac.conflict = opts
	return &AgreementUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agreement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AgreementCreate) OnConflictColumns(columns ...string) *AgreementUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AgreementUpsertOne{
		create: ac,
	}
}

type (
	// AgreementUpsertOne is the builder for "upsert"-ing
	//  one Agreement node.
	AgreementUpsertOne struct {
		create *AgreementCreate
	}

	// AgreementUpsert is the "OnConflict" setter.
	AgreementUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AgreementUpsert) SetUpdatedAt(v time.Time) *AgreementUpsert {
	u.Set(agreement.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateUpdatedAt() *AgreementUpsert {
	u.SetExcluded(agreement.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgreementUpsert) SetDeletedAt(v time.Time) *AgreementUpsert {
	u.Set(agreement.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateDeletedAt() *AgreementUpsert {
	u.SetExcluded(agreement.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgreementUpsert) ClearDeletedAt() *AgreementUpsert {
	u.SetNull(agreement.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgreementUpsert) SetLastModifier(v *model.Modifier) *AgreementUpsert {
	u.Set(agreement.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateLastModifier() *AgreementUpsert {
	u.SetExcluded(agreement.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgreementUpsert) ClearLastModifier() *AgreementUpsert {
	u.SetNull(agreement.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AgreementUpsert) SetRemark(v string) *AgreementUpsert {
	u.Set(agreement.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateRemark() *AgreementUpsert {
	u.SetExcluded(agreement.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AgreementUpsert) ClearRemark() *AgreementUpsert {
	u.SetNull(agreement.FieldRemark)
	return u
}

// SetName sets the "name" field.
func (u *AgreementUpsert) SetName(v string) *AgreementUpsert {
	u.Set(agreement.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateName() *AgreementUpsert {
	u.SetExcluded(agreement.FieldName)
	return u
}

// SetContent sets the "content" field.
func (u *AgreementUpsert) SetContent(v string) *AgreementUpsert {
	u.Set(agreement.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateContent() *AgreementUpsert {
	u.SetExcluded(agreement.FieldContent)
	return u
}

// SetUserType sets the "user_type" field.
func (u *AgreementUpsert) SetUserType(v uint8) *AgreementUpsert {
	u.Set(agreement.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateUserType() *AgreementUpsert {
	u.SetExcluded(agreement.FieldUserType)
	return u
}

// AddUserType adds v to the "user_type" field.
func (u *AgreementUpsert) AddUserType(v uint8) *AgreementUpsert {
	u.Add(agreement.FieldUserType, v)
	return u
}

// SetForceReadTime sets the "force_read_time" field.
func (u *AgreementUpsert) SetForceReadTime(v uint8) *AgreementUpsert {
	u.Set(agreement.FieldForceReadTime, v)
	return u
}

// UpdateForceReadTime sets the "force_read_time" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateForceReadTime() *AgreementUpsert {
	u.SetExcluded(agreement.FieldForceReadTime)
	return u
}

// AddForceReadTime adds v to the "force_read_time" field.
func (u *AgreementUpsert) AddForceReadTime(v uint8) *AgreementUpsert {
	u.Add(agreement.FieldForceReadTime, v)
	return u
}

// SetIsDefault sets the "is_default" field.
func (u *AgreementUpsert) SetIsDefault(v bool) *AgreementUpsert {
	u.Set(agreement.FieldIsDefault, v)
	return u
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateIsDefault() *AgreementUpsert {
	u.SetExcluded(agreement.FieldIsDefault)
	return u
}

// SetHash sets the "hash" field.
func (u *AgreementUpsert) SetHash(v string) *AgreementUpsert {
	u.Set(agreement.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateHash() *AgreementUpsert {
	u.SetExcluded(agreement.FieldHash)
	return u
}

// ClearHash clears the value of the "hash" field.
func (u *AgreementUpsert) ClearHash() *AgreementUpsert {
	u.SetNull(agreement.FieldHash)
	return u
}

// SetURL sets the "url" field.
func (u *AgreementUpsert) SetURL(v string) *AgreementUpsert {
	u.Set(agreement.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AgreementUpsert) UpdateURL() *AgreementUpsert {
	u.SetExcluded(agreement.FieldURL)
	return u
}

// ClearURL clears the value of the "url" field.
func (u *AgreementUpsert) ClearURL() *AgreementUpsert {
	u.SetNull(agreement.FieldURL)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Agreement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgreementUpsertOne) UpdateNewValues() *AgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(agreement.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(agreement.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agreement.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AgreementUpsertOne) Ignore() *AgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgreementUpsertOne) DoNothing() *AgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgreementCreate.OnConflict
// documentation for more info.
func (u *AgreementUpsertOne) Update(set func(*AgreementUpsert)) *AgreementUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgreementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AgreementUpsertOne) SetUpdatedAt(v time.Time) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateUpdatedAt() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgreementUpsertOne) SetDeletedAt(v time.Time) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateDeletedAt() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgreementUpsertOne) ClearDeletedAt() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgreementUpsertOne) SetLastModifier(v *model.Modifier) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateLastModifier() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgreementUpsertOne) ClearLastModifier() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AgreementUpsertOne) SetRemark(v string) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateRemark() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AgreementUpsertOne) ClearRemark() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AgreementUpsertOne) SetName(v string) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateName() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *AgreementUpsertOne) SetContent(v string) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateContent() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateContent()
	})
}

// SetUserType sets the "user_type" field.
func (u *AgreementUpsertOne) SetUserType(v uint8) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetUserType(v)
	})
}

// AddUserType adds v to the "user_type" field.
func (u *AgreementUpsertOne) AddUserType(v uint8) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.AddUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateUserType() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateUserType()
	})
}

// SetForceReadTime sets the "force_read_time" field.
func (u *AgreementUpsertOne) SetForceReadTime(v uint8) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetForceReadTime(v)
	})
}

// AddForceReadTime adds v to the "force_read_time" field.
func (u *AgreementUpsertOne) AddForceReadTime(v uint8) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.AddForceReadTime(v)
	})
}

// UpdateForceReadTime sets the "force_read_time" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateForceReadTime() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateForceReadTime()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *AgreementUpsertOne) SetIsDefault(v bool) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateIsDefault() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateIsDefault()
	})
}

// SetHash sets the "hash" field.
func (u *AgreementUpsertOne) SetHash(v string) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateHash() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *AgreementUpsertOne) ClearHash() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearHash()
	})
}

// SetURL sets the "url" field.
func (u *AgreementUpsertOne) SetURL(v string) *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AgreementUpsertOne) UpdateURL() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *AgreementUpsertOne) ClearURL() *AgreementUpsertOne {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearURL()
	})
}

// Exec executes the query.
func (u *AgreementUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgreementCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgreementUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AgreementUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AgreementUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AgreementCreateBulk is the builder for creating many Agreement entities in bulk.
type AgreementCreateBulk struct {
	config
	err      error
	builders []*AgreementCreate
	conflict []sql.ConflictOption
}

// Save creates the Agreement entities in the database.
func (acb *AgreementCreateBulk) Save(ctx context.Context) ([]*Agreement, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agreement, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgreementMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgreementCreateBulk) SaveX(ctx context.Context) []*Agreement {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgreementCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgreementCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Agreement.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AgreementUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AgreementCreateBulk) OnConflict(opts ...sql.ConflictOption) *AgreementUpsertBulk {
	acb.conflict = opts
	return &AgreementUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Agreement.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AgreementCreateBulk) OnConflictColumns(columns ...string) *AgreementUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AgreementUpsertBulk{
		create: acb,
	}
}

// AgreementUpsertBulk is the builder for "upsert"-ing
// a bulk of Agreement nodes.
type AgreementUpsertBulk struct {
	create *AgreementCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Agreement.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AgreementUpsertBulk) UpdateNewValues() *AgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(agreement.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(agreement.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Agreement.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AgreementUpsertBulk) Ignore() *AgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AgreementUpsertBulk) DoNothing() *AgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AgreementCreateBulk.OnConflict
// documentation for more info.
func (u *AgreementUpsertBulk) Update(set func(*AgreementUpsert)) *AgreementUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AgreementUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AgreementUpsertBulk) SetUpdatedAt(v time.Time) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateUpdatedAt() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AgreementUpsertBulk) SetDeletedAt(v time.Time) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateDeletedAt() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AgreementUpsertBulk) ClearDeletedAt() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AgreementUpsertBulk) SetLastModifier(v *model.Modifier) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateLastModifier() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AgreementUpsertBulk) ClearLastModifier() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AgreementUpsertBulk) SetRemark(v string) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateRemark() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AgreementUpsertBulk) ClearRemark() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearRemark()
	})
}

// SetName sets the "name" field.
func (u *AgreementUpsertBulk) SetName(v string) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateName() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateName()
	})
}

// SetContent sets the "content" field.
func (u *AgreementUpsertBulk) SetContent(v string) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateContent() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateContent()
	})
}

// SetUserType sets the "user_type" field.
func (u *AgreementUpsertBulk) SetUserType(v uint8) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetUserType(v)
	})
}

// AddUserType adds v to the "user_type" field.
func (u *AgreementUpsertBulk) AddUserType(v uint8) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.AddUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateUserType() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateUserType()
	})
}

// SetForceReadTime sets the "force_read_time" field.
func (u *AgreementUpsertBulk) SetForceReadTime(v uint8) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetForceReadTime(v)
	})
}

// AddForceReadTime adds v to the "force_read_time" field.
func (u *AgreementUpsertBulk) AddForceReadTime(v uint8) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.AddForceReadTime(v)
	})
}

// UpdateForceReadTime sets the "force_read_time" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateForceReadTime() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateForceReadTime()
	})
}

// SetIsDefault sets the "is_default" field.
func (u *AgreementUpsertBulk) SetIsDefault(v bool) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetIsDefault(v)
	})
}

// UpdateIsDefault sets the "is_default" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateIsDefault() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateIsDefault()
	})
}

// SetHash sets the "hash" field.
func (u *AgreementUpsertBulk) SetHash(v string) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateHash() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateHash()
	})
}

// ClearHash clears the value of the "hash" field.
func (u *AgreementUpsertBulk) ClearHash() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearHash()
	})
}

// SetURL sets the "url" field.
func (u *AgreementUpsertBulk) SetURL(v string) *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *AgreementUpsertBulk) UpdateURL() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.UpdateURL()
	})
}

// ClearURL clears the value of the "url" field.
func (u *AgreementUpsertBulk) ClearURL() *AgreementUpsertBulk {
	return u.Update(func(s *AgreementUpsert) {
		s.ClearURL()
	})
}

// Exec executes the query.
func (u *AgreementUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AgreementCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AgreementCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AgreementUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
