// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/ebikebrandattribute"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EbikeBrandAttributeQuery is the builder for querying EbikeBrandAttribute entities.
type EbikeBrandAttributeQuery struct {
	config
	ctx        *QueryContext
	order      []ebikebrandattribute.OrderOption
	inters     []Interceptor
	predicates []predicate.EbikeBrandAttribute
	withBrand  *EbikeBrandQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EbikeBrandAttributeQuery builder.
func (ebaq *EbikeBrandAttributeQuery) Where(ps ...predicate.EbikeBrandAttribute) *EbikeBrandAttributeQuery {
	ebaq.predicates = append(ebaq.predicates, ps...)
	return ebaq
}

// Limit the number of records to be returned by this query.
func (ebaq *EbikeBrandAttributeQuery) Limit(limit int) *EbikeBrandAttributeQuery {
	ebaq.ctx.Limit = &limit
	return ebaq
}

// Offset to start from.
func (ebaq *EbikeBrandAttributeQuery) Offset(offset int) *EbikeBrandAttributeQuery {
	ebaq.ctx.Offset = &offset
	return ebaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ebaq *EbikeBrandAttributeQuery) Unique(unique bool) *EbikeBrandAttributeQuery {
	ebaq.ctx.Unique = &unique
	return ebaq
}

// Order specifies how the records should be ordered.
func (ebaq *EbikeBrandAttributeQuery) Order(o ...ebikebrandattribute.OrderOption) *EbikeBrandAttributeQuery {
	ebaq.order = append(ebaq.order, o...)
	return ebaq
}

// QueryBrand chains the current query on the "brand" edge.
func (ebaq *EbikeBrandAttributeQuery) QueryBrand() *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: ebaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(ebikebrandattribute.Table, ebikebrandattribute.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ebikebrandattribute.BrandTable, ebikebrandattribute.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EbikeBrandAttribute entity from the query.
// Returns a *NotFoundError when no EbikeBrandAttribute was found.
func (ebaq *EbikeBrandAttributeQuery) First(ctx context.Context) (*EbikeBrandAttribute, error) {
	nodes, err := ebaq.Limit(1).All(setContextOp(ctx, ebaq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ebikebrandattribute.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) FirstX(ctx context.Context) *EbikeBrandAttribute {
	node, err := ebaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EbikeBrandAttribute ID from the query.
// Returns a *NotFoundError when no EbikeBrandAttribute ID was found.
func (ebaq *EbikeBrandAttributeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebaq.Limit(1).IDs(setContextOp(ctx, ebaq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{ebikebrandattribute.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ebaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EbikeBrandAttribute entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EbikeBrandAttribute entity is found.
// Returns a *NotFoundError when no EbikeBrandAttribute entities are found.
func (ebaq *EbikeBrandAttributeQuery) Only(ctx context.Context) (*EbikeBrandAttribute, error) {
	nodes, err := ebaq.Limit(2).All(setContextOp(ctx, ebaq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ebikebrandattribute.Label}
	default:
		return nil, &NotSingularError{ebikebrandattribute.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) OnlyX(ctx context.Context) *EbikeBrandAttribute {
	node, err := ebaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EbikeBrandAttribute ID in the query.
// Returns a *NotSingularError when more than one EbikeBrandAttribute ID is found.
// Returns a *NotFoundError when no entities are found.
func (ebaq *EbikeBrandAttributeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebaq.Limit(2).IDs(setContextOp(ctx, ebaq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{ebikebrandattribute.Label}
	default:
		err = &NotSingularError{ebikebrandattribute.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ebaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EbikeBrandAttributes.
func (ebaq *EbikeBrandAttributeQuery) All(ctx context.Context) ([]*EbikeBrandAttribute, error) {
	ctx = setContextOp(ctx, ebaq.ctx, "All")
	if err := ebaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EbikeBrandAttribute, *EbikeBrandAttributeQuery]()
	return withInterceptors[[]*EbikeBrandAttribute](ctx, ebaq, qr, ebaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) AllX(ctx context.Context) []*EbikeBrandAttribute {
	nodes, err := ebaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EbikeBrandAttribute IDs.
func (ebaq *EbikeBrandAttributeQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if ebaq.ctx.Unique == nil && ebaq.path != nil {
		ebaq.Unique(true)
	}
	ctx = setContextOp(ctx, ebaq.ctx, "IDs")
	if err = ebaq.Select(ebikebrandattribute.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ebaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ebaq *EbikeBrandAttributeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ebaq.ctx, "Count")
	if err := ebaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ebaq, querierCount[*EbikeBrandAttributeQuery](), ebaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) CountX(ctx context.Context) int {
	count, err := ebaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ebaq *EbikeBrandAttributeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ebaq.ctx, "Exist")
	switch _, err := ebaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ebaq *EbikeBrandAttributeQuery) ExistX(ctx context.Context) bool {
	exist, err := ebaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EbikeBrandAttributeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ebaq *EbikeBrandAttributeQuery) Clone() *EbikeBrandAttributeQuery {
	if ebaq == nil {
		return nil
	}
	return &EbikeBrandAttributeQuery{
		config:     ebaq.config,
		ctx:        ebaq.ctx.Clone(),
		order:      append([]ebikebrandattribute.OrderOption{}, ebaq.order...),
		inters:     append([]Interceptor{}, ebaq.inters...),
		predicates: append([]predicate.EbikeBrandAttribute{}, ebaq.predicates...),
		withBrand:  ebaq.withBrand.Clone(),
		// clone intermediate query.
		sql:  ebaq.sql.Clone(),
		path: ebaq.path,
	}
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (ebaq *EbikeBrandAttributeQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *EbikeBrandAttributeQuery {
	query := (&EbikeBrandClient{config: ebaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebaq.withBrand = query
	return ebaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EbikeBrandAttribute.Query().
//		GroupBy(ebikebrandattribute.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ebaq *EbikeBrandAttributeQuery) GroupBy(field string, fields ...string) *EbikeBrandAttributeGroupBy {
	ebaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EbikeBrandAttributeGroupBy{build: ebaq}
	grbuild.flds = &ebaq.ctx.Fields
	grbuild.label = ebikebrandattribute.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EbikeBrandAttribute.Query().
//		Select(ebikebrandattribute.FieldCreatedAt).
//		Scan(ctx, &v)
func (ebaq *EbikeBrandAttributeQuery) Select(fields ...string) *EbikeBrandAttributeSelect {
	ebaq.ctx.Fields = append(ebaq.ctx.Fields, fields...)
	sbuild := &EbikeBrandAttributeSelect{EbikeBrandAttributeQuery: ebaq}
	sbuild.label = ebikebrandattribute.Label
	sbuild.flds, sbuild.scan = &ebaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EbikeBrandAttributeSelect configured with the given aggregations.
func (ebaq *EbikeBrandAttributeQuery) Aggregate(fns ...AggregateFunc) *EbikeBrandAttributeSelect {
	return ebaq.Select().Aggregate(fns...)
}

func (ebaq *EbikeBrandAttributeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ebaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ebaq); err != nil {
				return err
			}
		}
	}
	for _, f := range ebaq.ctx.Fields {
		if !ebikebrandattribute.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ebaq.path != nil {
		prev, err := ebaq.path(ctx)
		if err != nil {
			return err
		}
		ebaq.sql = prev
	}
	return nil
}

func (ebaq *EbikeBrandAttributeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EbikeBrandAttribute, error) {
	var (
		nodes       = []*EbikeBrandAttribute{}
		_spec       = ebaq.querySpec()
		loadedTypes = [1]bool{
			ebaq.withBrand != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EbikeBrandAttribute).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EbikeBrandAttribute{config: ebaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ebaq.modifiers) > 0 {
		_spec.Modifiers = ebaq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ebaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ebaq.withBrand; query != nil {
		if err := ebaq.loadBrand(ctx, query, nodes, nil,
			func(n *EbikeBrandAttribute, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ebaq *EbikeBrandAttributeQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*EbikeBrandAttribute, init func(*EbikeBrandAttribute), assign func(*EbikeBrandAttribute, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EbikeBrandAttribute)
	for i := range nodes {
		fk := nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ebaq *EbikeBrandAttributeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ebaq.querySpec()
	if len(ebaq.modifiers) > 0 {
		_spec.Modifiers = ebaq.modifiers
	}
	_spec.Node.Columns = ebaq.ctx.Fields
	if len(ebaq.ctx.Fields) > 0 {
		_spec.Unique = ebaq.ctx.Unique != nil && *ebaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ebaq.driver, _spec)
}

func (ebaq *EbikeBrandAttributeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(ebikebrandattribute.Table, ebikebrandattribute.Columns, sqlgraph.NewFieldSpec(ebikebrandattribute.FieldID, field.TypeUint64))
	_spec.From = ebaq.sql
	if unique := ebaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ebaq.path != nil {
		_spec.Unique = true
	}
	if fields := ebaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebikebrandattribute.FieldID)
		for i := range fields {
			if fields[i] != ebikebrandattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ebaq.withBrand != nil {
			_spec.Node.AddColumnOnce(ebikebrandattribute.FieldBrandID)
		}
	}
	if ps := ebaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ebaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ebaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ebaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ebaq *EbikeBrandAttributeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ebaq.driver.Dialect())
	t1 := builder.Table(ebikebrandattribute.Table)
	columns := ebaq.ctx.Fields
	if len(columns) == 0 {
		columns = ebikebrandattribute.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ebaq.sql != nil {
		selector = ebaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ebaq.ctx.Unique != nil && *ebaq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ebaq.modifiers {
		m(selector)
	}
	for _, p := range ebaq.predicates {
		p(selector)
	}
	for _, p := range ebaq.order {
		p(selector)
	}
	if offset := ebaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ebaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebaq *EbikeBrandAttributeQuery) Modify(modifiers ...func(s *sql.Selector)) *EbikeBrandAttributeSelect {
	ebaq.modifiers = append(ebaq.modifiers, modifiers...)
	return ebaq.Select()
}

type EbikeBrandAttributeQueryWith string

var (
	EbikeBrandAttributeQueryWithBrand EbikeBrandAttributeQueryWith = "Brand"
)

func (ebaq *EbikeBrandAttributeQuery) With(withEdges ...EbikeBrandAttributeQueryWith) *EbikeBrandAttributeQuery {
	for _, v := range withEdges {
		switch v {
		case EbikeBrandAttributeQueryWithBrand:
			ebaq.WithBrand()
		}
	}
	return ebaq
}

// EbikeBrandAttributeGroupBy is the group-by builder for EbikeBrandAttribute entities.
type EbikeBrandAttributeGroupBy struct {
	selector
	build *EbikeBrandAttributeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ebagb *EbikeBrandAttributeGroupBy) Aggregate(fns ...AggregateFunc) *EbikeBrandAttributeGroupBy {
	ebagb.fns = append(ebagb.fns, fns...)
	return ebagb
}

// Scan applies the selector query and scans the result into the given value.
func (ebagb *EbikeBrandAttributeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebagb.build.ctx, "GroupBy")
	if err := ebagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EbikeBrandAttributeQuery, *EbikeBrandAttributeGroupBy](ctx, ebagb.build, ebagb, ebagb.build.inters, v)
}

func (ebagb *EbikeBrandAttributeGroupBy) sqlScan(ctx context.Context, root *EbikeBrandAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ebagb.fns))
	for _, fn := range ebagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ebagb.flds)+len(ebagb.fns))
		for _, f := range *ebagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ebagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EbikeBrandAttributeSelect is the builder for selecting fields of EbikeBrandAttribute entities.
type EbikeBrandAttributeSelect struct {
	*EbikeBrandAttributeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ebas *EbikeBrandAttributeSelect) Aggregate(fns ...AggregateFunc) *EbikeBrandAttributeSelect {
	ebas.fns = append(ebas.fns, fns...)
	return ebas
}

// Scan applies the selector query and scans the result into the given value.
func (ebas *EbikeBrandAttributeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebas.ctx, "Select")
	if err := ebas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EbikeBrandAttributeQuery, *EbikeBrandAttributeSelect](ctx, ebas.EbikeBrandAttributeQuery, ebas, ebas.inters, v)
}

func (ebas *EbikeBrandAttributeSelect) sqlScan(ctx context.Context, root *EbikeBrandAttributeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ebas.fns))
	for _, fn := range ebas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ebas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebas *EbikeBrandAttributeSelect) Modify(modifiers ...func(s *sql.Selector)) *EbikeBrandAttributeSelect {
	ebas.modifiers = append(ebas.modifiers, modifiers...)
	return ebas
}
