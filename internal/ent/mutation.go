// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/person"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/setting"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContract = "Contract"
	TypeManager  = "Manager"
	TypePerson   = "Person"
	TypeRider    = "Rider"
	TypeSetting  = "Setting"
)

// ContractMutation represents an operation that mutates the Contract nodes in the graph.
type ContractMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	last_modify   *time.Time
	remark        *string
	status        *uint8
	addstatus     *uint8
	flow_id       *string
	sn            *string
	files         *[]string
	clearedFields map[string]struct{}
	rider         *uint64
	clearedrider  bool
	done          bool
	oldValue      func(context.Context) (*Contract, error)
	predicates    []predicate.Contract
}

var _ ent.Mutation = (*ContractMutation)(nil)

// contractOption allows management of the mutation configuration using functional options.
type contractOption func(*ContractMutation)

// newContractMutation creates new mutation for the Contract entity.
func newContractMutation(c config, op Op, opts ...contractOption) *ContractMutation {
	m := &ContractMutation{
		config:        c,
		op:            op,
		typ:           TypeContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractID sets the ID field of the mutation.
func withContractID(id uint64) contractOption {
	return func(m *ContractMutation) {
		var (
			err   error
			once  sync.Once
			value *Contract
		)
		m.oldValue = func(ctx context.Context) (*Contract, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContract sets the old Contract of the mutation.
func withContract(node *Contract) contractOption {
	return func(m *ContractMutation) {
		m.oldValue = func(context.Context) (*Contract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ContractMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContractMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContractMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContractMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContractMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContractMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ContractMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ContractMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ContractMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[contract.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ContractMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[contract.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ContractMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, contract.FieldDeletedAt)
}

// SetLastModify sets the "last_modify" field.
func (m *ContractMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *ContractMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldLastModify(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ClearLastModify clears the value of the "last_modify" field.
func (m *ContractMutation) ClearLastModify() {
	m.last_modify = nil
	m.clearedFields[contract.FieldLastModify] = struct{}{}
}

// LastModifyCleared returns if the "last_modify" field was cleared in this mutation.
func (m *ContractMutation) LastModifyCleared() bool {
	_, ok := m.clearedFields[contract.FieldLastModify]
	return ok
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *ContractMutation) ResetLastModify() {
	m.last_modify = nil
	delete(m.clearedFields, contract.FieldLastModify)
}

// SetRemark sets the "remark" field.
func (m *ContractMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ContractMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ContractMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[contract.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ContractMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[contract.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ContractMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, contract.FieldRemark)
}

// SetStatus sets the "status" field.
func (m *ContractMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ContractMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ContractMutation) AddStatus(u uint8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ContractMutation) AddedStatus() (r uint8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ContractMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetRiderID sets the "rider_id" field.
func (m *ContractMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *ContractMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *ContractMutation) ResetRiderID() {
	m.rider = nil
}

// SetFlowID sets the "flow_id" field.
func (m *ContractMutation) SetFlowID(s string) {
	m.flow_id = &s
}

// FlowID returns the value of the "flow_id" field in the mutation.
func (m *ContractMutation) FlowID() (r string, exists bool) {
	v := m.flow_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowID returns the old "flow_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldFlowID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFlowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFlowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowID: %w", err)
	}
	return oldValue.FlowID, nil
}

// ResetFlowID resets all changes to the "flow_id" field.
func (m *ContractMutation) ResetFlowID() {
	m.flow_id = nil
}

// SetSn sets the "sn" field.
func (m *ContractMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *ContractMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *ContractMutation) ResetSn() {
	m.sn = nil
}

// SetFiles sets the "files" field.
func (m *ContractMutation) SetFiles(s []string) {
	m.files = &s
}

// Files returns the value of the "files" field in the mutation.
func (m *ContractMutation) Files() (r []string, exists bool) {
	v := m.files
	if v == nil {
		return
	}
	return *v, true
}

// OldFiles returns the old "files" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldFiles(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFiles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFiles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFiles: %w", err)
	}
	return oldValue.Files, nil
}

// ClearFiles clears the value of the "files" field.
func (m *ContractMutation) ClearFiles() {
	m.files = nil
	m.clearedFields[contract.FieldFiles] = struct{}{}
}

// FilesCleared returns if the "files" field was cleared in this mutation.
func (m *ContractMutation) FilesCleared() bool {
	_, ok := m.clearedFields[contract.FieldFiles]
	return ok
}

// ResetFiles resets all changes to the "files" field.
func (m *ContractMutation) ResetFiles() {
	m.files = nil
	delete(m.clearedFields, contract.FieldFiles)
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *ContractMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *ContractMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *ContractMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *ContractMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// Where appends a list predicates to the ContractMutation builder.
func (m *ContractMutation) Where(ps ...predicate.Contract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contract).
func (m *ContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, contract.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, contract.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, contract.FieldDeletedAt)
	}
	if m.last_modify != nil {
		fields = append(fields, contract.FieldLastModify)
	}
	if m.remark != nil {
		fields = append(fields, contract.FieldRemark)
	}
	if m.status != nil {
		fields = append(fields, contract.FieldStatus)
	}
	if m.rider != nil {
		fields = append(fields, contract.FieldRiderID)
	}
	if m.flow_id != nil {
		fields = append(fields, contract.FieldFlowID)
	}
	if m.sn != nil {
		fields = append(fields, contract.FieldSn)
	}
	if m.files != nil {
		fields = append(fields, contract.FieldFiles)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldCreatedAt:
		return m.CreatedAt()
	case contract.FieldUpdatedAt:
		return m.UpdatedAt()
	case contract.FieldDeletedAt:
		return m.DeletedAt()
	case contract.FieldLastModify:
		return m.LastModify()
	case contract.FieldRemark:
		return m.Remark()
	case contract.FieldStatus:
		return m.Status()
	case contract.FieldRiderID:
		return m.RiderID()
	case contract.FieldFlowID:
		return m.FlowID()
	case contract.FieldSn:
		return m.Sn()
	case contract.FieldFiles:
		return m.Files()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contract.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case contract.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case contract.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case contract.FieldLastModify:
		return m.OldLastModify(ctx)
	case contract.FieldRemark:
		return m.OldRemark(ctx)
	case contract.FieldStatus:
		return m.OldStatus(ctx)
	case contract.FieldRiderID:
		return m.OldRiderID(ctx)
	case contract.FieldFlowID:
		return m.OldFlowID(ctx)
	case contract.FieldSn:
		return m.OldSn(ctx)
	case contract.FieldFiles:
		return m.OldFiles(ctx)
	}
	return nil, fmt.Errorf("unknown Contract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contract.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case contract.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case contract.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case contract.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case contract.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case contract.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case contract.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case contract.FieldFlowID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowID(v)
		return nil
	case contract.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case contract.FieldFiles:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFiles(v)
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, contract.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contract.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Contract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contract.FieldDeletedAt) {
		fields = append(fields, contract.FieldDeletedAt)
	}
	if m.FieldCleared(contract.FieldLastModify) {
		fields = append(fields, contract.FieldLastModify)
	}
	if m.FieldCleared(contract.FieldRemark) {
		fields = append(fields, contract.FieldRemark)
	}
	if m.FieldCleared(contract.FieldFiles) {
		fields = append(fields, contract.FieldFiles)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractMutation) ClearField(name string) error {
	switch name {
	case contract.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case contract.FieldLastModify:
		m.ClearLastModify()
		return nil
	case contract.FieldRemark:
		m.ClearRemark()
		return nil
	case contract.FieldFiles:
		m.ClearFiles()
		return nil
	}
	return fmt.Errorf("unknown Contract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractMutation) ResetField(name string) error {
	switch name {
	case contract.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case contract.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case contract.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case contract.FieldLastModify:
		m.ResetLastModify()
		return nil
	case contract.FieldRemark:
		m.ResetRemark()
		return nil
	case contract.FieldStatus:
		m.ResetStatus()
		return nil
	case contract.FieldRiderID:
		m.ResetRiderID()
		return nil
	case contract.FieldFlowID:
		m.ResetFlowID()
		return nil
	case contract.FieldSn:
		m.ResetSn()
		return nil
	case contract.FieldFiles:
		m.ResetFiles()
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rider != nil {
		edges = append(edges, contract.EdgeRider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrider {
		edges = append(edges, contract.EdgeRider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractMutation) EdgeCleared(name string) bool {
	switch name {
	case contract.EdgeRider:
		return m.clearedrider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractMutation) ClearEdge(name string) error {
	switch name {
	case contract.EdgeRider:
		m.ClearRider()
		return nil
	}
	return fmt.Errorf("unknown Contract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractMutation) ResetEdge(name string) error {
	switch name {
	case contract.EdgeRider:
		m.ResetRider()
		return nil
	}
	return fmt.Errorf("unknown Contract edge %s", name)
}

// ManagerMutation represents an operation that mutates the Manager nodes in the graph.
type ManagerMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	last_modify   *time.Time
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Manager, error)
	predicates    []predicate.Manager
}

var _ ent.Mutation = (*ManagerMutation)(nil)

// managerOption allows management of the mutation configuration using functional options.
type managerOption func(*ManagerMutation)

// newManagerMutation creates new mutation for the Manager entity.
func newManagerMutation(c config, op Op, opts ...managerOption) *ManagerMutation {
	m := &ManagerMutation{
		config:        c,
		op:            op,
		typ:           TypeManager,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withManagerID sets the ID field of the mutation.
func withManagerID(id uint64) managerOption {
	return func(m *ManagerMutation) {
		var (
			err   error
			once  sync.Once
			value *Manager
		)
		m.oldValue = func(ctx context.Context) (*Manager, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Manager.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withManager sets the old Manager of the mutation.
func withManager(node *Manager) managerOption {
	return func(m *ManagerMutation) {
		m.oldValue = func(context.Context) (*Manager, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ManagerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ManagerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ManagerMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ManagerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ManagerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Manager entity.
// If the Manager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManagerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ManagerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ManagerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ManagerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Manager entity.
// If the Manager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManagerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ManagerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ManagerMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ManagerMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Manager entity.
// If the Manager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManagerMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ManagerMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[manager.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ManagerMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[manager.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ManagerMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, manager.FieldDeletedAt)
}

// SetLastModify sets the "last_modify" field.
func (m *ManagerMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *ManagerMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Manager entity.
// If the Manager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManagerMutation) OldLastModify(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ClearLastModify clears the value of the "last_modify" field.
func (m *ManagerMutation) ClearLastModify() {
	m.last_modify = nil
	m.clearedFields[manager.FieldLastModify] = struct{}{}
}

// LastModifyCleared returns if the "last_modify" field was cleared in this mutation.
func (m *ManagerMutation) LastModifyCleared() bool {
	_, ok := m.clearedFields[manager.FieldLastModify]
	return ok
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *ManagerMutation) ResetLastModify() {
	m.last_modify = nil
	delete(m.clearedFields, manager.FieldLastModify)
}

// SetRemark sets the "remark" field.
func (m *ManagerMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ManagerMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Manager entity.
// If the Manager object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ManagerMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ManagerMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[manager.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ManagerMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[manager.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ManagerMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, manager.FieldRemark)
}

// Where appends a list predicates to the ManagerMutation builder.
func (m *ManagerMutation) Where(ps ...predicate.Manager) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ManagerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Manager).
func (m *ManagerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ManagerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, manager.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, manager.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, manager.FieldDeletedAt)
	}
	if m.last_modify != nil {
		fields = append(fields, manager.FieldLastModify)
	}
	if m.remark != nil {
		fields = append(fields, manager.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ManagerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case manager.FieldCreatedAt:
		return m.CreatedAt()
	case manager.FieldUpdatedAt:
		return m.UpdatedAt()
	case manager.FieldDeletedAt:
		return m.DeletedAt()
	case manager.FieldLastModify:
		return m.LastModify()
	case manager.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ManagerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case manager.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case manager.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case manager.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case manager.FieldLastModify:
		return m.OldLastModify(ctx)
	case manager.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown Manager field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManagerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case manager.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case manager.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case manager.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case manager.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case manager.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown Manager field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ManagerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ManagerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ManagerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Manager numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ManagerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(manager.FieldDeletedAt) {
		fields = append(fields, manager.FieldDeletedAt)
	}
	if m.FieldCleared(manager.FieldLastModify) {
		fields = append(fields, manager.FieldLastModify)
	}
	if m.FieldCleared(manager.FieldRemark) {
		fields = append(fields, manager.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ManagerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ManagerMutation) ClearField(name string) error {
	switch name {
	case manager.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case manager.FieldLastModify:
		m.ClearLastModify()
		return nil
	case manager.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown Manager nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ManagerMutation) ResetField(name string) error {
	switch name {
	case manager.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case manager.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case manager.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case manager.FieldLastModify:
		m.ResetLastModify()
		return nil
	case manager.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown Manager field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ManagerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ManagerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ManagerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ManagerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ManagerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ManagerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ManagerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Manager unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ManagerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Manager edge %s", name)
}

// PersonMutation represents an operation that mutates the Person nodes in the graph.
type PersonMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	last_modify      *time.Time
	remark           *string
	status           *uint8
	addstatus        *uint8
	block            *bool
	name             *string
	id_card_number   *string
	id_card_type     *uint8
	addid_card_type  *uint8
	id_card_portrait *string
	id_card_national *string
	auth_face        *string
	auth_result      **model.FaceVerifyResult
	auth_at          *time.Time
	clearedFields    map[string]struct{}
	rider            map[uint64]struct{}
	removedrider     map[uint64]struct{}
	clearedrider     bool
	done             bool
	oldValue         func(context.Context) (*Person, error)
	predicates       []predicate.Person
}

var _ ent.Mutation = (*PersonMutation)(nil)

// personOption allows management of the mutation configuration using functional options.
type personOption func(*PersonMutation)

// newPersonMutation creates new mutation for the Person entity.
func newPersonMutation(c config, op Op, opts ...personOption) *PersonMutation {
	m := &PersonMutation{
		config:        c,
		op:            op,
		typ:           TypePerson,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonID sets the ID field of the mutation.
func withPersonID(id uint64) personOption {
	return func(m *PersonMutation) {
		var (
			err   error
			once  sync.Once
			value *Person
		)
		m.oldValue = func(ctx context.Context) (*Person, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Person.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPerson sets the old Person of the mutation.
func withPerson(node *Person) personOption {
	return func(m *PersonMutation) {
		m.oldValue = func(context.Context) (*Person, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *PersonMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PersonMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PersonMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PersonMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PersonMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PersonMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PersonMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PersonMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PersonMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[person.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PersonMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[person.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PersonMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, person.FieldDeletedAt)
}

// SetLastModify sets the "last_modify" field.
func (m *PersonMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *PersonMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldLastModify(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ClearLastModify clears the value of the "last_modify" field.
func (m *PersonMutation) ClearLastModify() {
	m.last_modify = nil
	m.clearedFields[person.FieldLastModify] = struct{}{}
}

// LastModifyCleared returns if the "last_modify" field was cleared in this mutation.
func (m *PersonMutation) LastModifyCleared() bool {
	_, ok := m.clearedFields[person.FieldLastModify]
	return ok
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *PersonMutation) ResetLastModify() {
	m.last_modify = nil
	delete(m.clearedFields, person.FieldLastModify)
}

// SetRemark sets the "remark" field.
func (m *PersonMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *PersonMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *PersonMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[person.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *PersonMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[person.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *PersonMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, person.FieldRemark)
}

// SetStatus sets the "status" field.
func (m *PersonMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *PersonMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *PersonMutation) AddStatus(u uint8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *PersonMutation) AddedStatus() (r uint8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *PersonMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetBlock sets the "block" field.
func (m *PersonMutation) SetBlock(b bool) {
	m.block = &b
}

// Block returns the value of the "block" field in the mutation.
func (m *PersonMutation) Block() (r bool, exists bool) {
	v := m.block
	if v == nil {
		return
	}
	return *v, true
}

// OldBlock returns the old "block" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldBlock(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBlock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBlock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlock: %w", err)
	}
	return oldValue.Block, nil
}

// ResetBlock resets all changes to the "block" field.
func (m *PersonMutation) ResetBlock() {
	m.block = nil
}

// SetName sets the "name" field.
func (m *PersonMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonMutation) ResetName() {
	m.name = nil
}

// SetIDCardNumber sets the "id_card_number" field.
func (m *PersonMutation) SetIDCardNumber(s string) {
	m.id_card_number = &s
}

// IDCardNumber returns the value of the "id_card_number" field in the mutation.
func (m *PersonMutation) IDCardNumber() (r string, exists bool) {
	v := m.id_card_number
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNumber returns the old "id_card_number" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDCardNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDCardNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNumber: %w", err)
	}
	return oldValue.IDCardNumber, nil
}

// ResetIDCardNumber resets all changes to the "id_card_number" field.
func (m *PersonMutation) ResetIDCardNumber() {
	m.id_card_number = nil
}

// SetIDCardType sets the "id_card_type" field.
func (m *PersonMutation) SetIDCardType(u uint8) {
	m.id_card_type = &u
	m.addid_card_type = nil
}

// IDCardType returns the value of the "id_card_type" field in the mutation.
func (m *PersonMutation) IDCardType() (r uint8, exists bool) {
	v := m.id_card_type
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardType returns the old "id_card_type" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDCardType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDCardType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardType: %w", err)
	}
	return oldValue.IDCardType, nil
}

// AddIDCardType adds u to the "id_card_type" field.
func (m *PersonMutation) AddIDCardType(u uint8) {
	if m.addid_card_type != nil {
		*m.addid_card_type += u
	} else {
		m.addid_card_type = &u
	}
}

// AddedIDCardType returns the value that was added to the "id_card_type" field in this mutation.
func (m *PersonMutation) AddedIDCardType() (r uint8, exists bool) {
	v := m.addid_card_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetIDCardType resets all changes to the "id_card_type" field.
func (m *PersonMutation) ResetIDCardType() {
	m.id_card_type = nil
	m.addid_card_type = nil
}

// SetIDCardPortrait sets the "id_card_portrait" field.
func (m *PersonMutation) SetIDCardPortrait(s string) {
	m.id_card_portrait = &s
}

// IDCardPortrait returns the value of the "id_card_portrait" field in the mutation.
func (m *PersonMutation) IDCardPortrait() (r string, exists bool) {
	v := m.id_card_portrait
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardPortrait returns the old "id_card_portrait" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardPortrait(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDCardPortrait is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDCardPortrait requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardPortrait: %w", err)
	}
	return oldValue.IDCardPortrait, nil
}

// ResetIDCardPortrait resets all changes to the "id_card_portrait" field.
func (m *PersonMutation) ResetIDCardPortrait() {
	m.id_card_portrait = nil
}

// SetIDCardNational sets the "id_card_national" field.
func (m *PersonMutation) SetIDCardNational(s string) {
	m.id_card_national = &s
}

// IDCardNational returns the value of the "id_card_national" field in the mutation.
func (m *PersonMutation) IDCardNational() (r string, exists bool) {
	v := m.id_card_national
	if v == nil {
		return
	}
	return *v, true
}

// OldIDCardNational returns the old "id_card_national" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldIDCardNational(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIDCardNational is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIDCardNational requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDCardNational: %w", err)
	}
	return oldValue.IDCardNational, nil
}

// ResetIDCardNational resets all changes to the "id_card_national" field.
func (m *PersonMutation) ResetIDCardNational() {
	m.id_card_national = nil
}

// SetAuthFace sets the "auth_face" field.
func (m *PersonMutation) SetAuthFace(s string) {
	m.auth_face = &s
}

// AuthFace returns the value of the "auth_face" field in the mutation.
func (m *PersonMutation) AuthFace() (r string, exists bool) {
	v := m.auth_face
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthFace returns the old "auth_face" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthFace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthFace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthFace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthFace: %w", err)
	}
	return oldValue.AuthFace, nil
}

// ResetAuthFace resets all changes to the "auth_face" field.
func (m *PersonMutation) ResetAuthFace() {
	m.auth_face = nil
}

// SetAuthResult sets the "auth_result" field.
func (m *PersonMutation) SetAuthResult(mvr *model.FaceVerifyResult) {
	m.auth_result = &mvr
}

// AuthResult returns the value of the "auth_result" field in the mutation.
func (m *PersonMutation) AuthResult() (r *model.FaceVerifyResult, exists bool) {
	v := m.auth_result
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthResult returns the old "auth_result" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthResult(ctx context.Context) (v *model.FaceVerifyResult, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthResult: %w", err)
	}
	return oldValue.AuthResult, nil
}

// ClearAuthResult clears the value of the "auth_result" field.
func (m *PersonMutation) ClearAuthResult() {
	m.auth_result = nil
	m.clearedFields[person.FieldAuthResult] = struct{}{}
}

// AuthResultCleared returns if the "auth_result" field was cleared in this mutation.
func (m *PersonMutation) AuthResultCleared() bool {
	_, ok := m.clearedFields[person.FieldAuthResult]
	return ok
}

// ResetAuthResult resets all changes to the "auth_result" field.
func (m *PersonMutation) ResetAuthResult() {
	m.auth_result = nil
	delete(m.clearedFields, person.FieldAuthResult)
}

// SetAuthAt sets the "auth_at" field.
func (m *PersonMutation) SetAuthAt(t time.Time) {
	m.auth_at = &t
}

// AuthAt returns the value of the "auth_at" field in the mutation.
func (m *PersonMutation) AuthAt() (r time.Time, exists bool) {
	v := m.auth_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthAt returns the old "auth_at" field's value of the Person entity.
// If the Person object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonMutation) OldAuthAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthAt: %w", err)
	}
	return oldValue.AuthAt, nil
}

// ClearAuthAt clears the value of the "auth_at" field.
func (m *PersonMutation) ClearAuthAt() {
	m.auth_at = nil
	m.clearedFields[person.FieldAuthAt] = struct{}{}
}

// AuthAtCleared returns if the "auth_at" field was cleared in this mutation.
func (m *PersonMutation) AuthAtCleared() bool {
	_, ok := m.clearedFields[person.FieldAuthAt]
	return ok
}

// ResetAuthAt resets all changes to the "auth_at" field.
func (m *PersonMutation) ResetAuthAt() {
	m.auth_at = nil
	delete(m.clearedFields, person.FieldAuthAt)
}

// AddRiderIDs adds the "rider" edge to the Rider entity by ids.
func (m *PersonMutation) AddRiderIDs(ids ...uint64) {
	if m.rider == nil {
		m.rider = make(map[uint64]struct{})
	}
	for i := range ids {
		m.rider[ids[i]] = struct{}{}
	}
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *PersonMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *PersonMutation) RiderCleared() bool {
	return m.clearedrider
}

// RemoveRiderIDs removes the "rider" edge to the Rider entity by IDs.
func (m *PersonMutation) RemoveRiderIDs(ids ...uint64) {
	if m.removedrider == nil {
		m.removedrider = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.rider, ids[i])
		m.removedrider[ids[i]] = struct{}{}
	}
}

// RemovedRider returns the removed IDs of the "rider" edge to the Rider entity.
func (m *PersonMutation) RemovedRiderIDs() (ids []uint64) {
	for id := range m.removedrider {
		ids = append(ids, id)
	}
	return
}

// RiderIDs returns the "rider" edge IDs in the mutation.
func (m *PersonMutation) RiderIDs() (ids []uint64) {
	for id := range m.rider {
		ids = append(ids, id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *PersonMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
	m.removedrider = nil
}

// Where appends a list predicates to the PersonMutation builder.
func (m *PersonMutation) Where(ps ...predicate.Person) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PersonMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Person).
func (m *PersonMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, person.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, person.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, person.FieldDeletedAt)
	}
	if m.last_modify != nil {
		fields = append(fields, person.FieldLastModify)
	}
	if m.remark != nil {
		fields = append(fields, person.FieldRemark)
	}
	if m.status != nil {
		fields = append(fields, person.FieldStatus)
	}
	if m.block != nil {
		fields = append(fields, person.FieldBlock)
	}
	if m.name != nil {
		fields = append(fields, person.FieldName)
	}
	if m.id_card_number != nil {
		fields = append(fields, person.FieldIDCardNumber)
	}
	if m.id_card_type != nil {
		fields = append(fields, person.FieldIDCardType)
	}
	if m.id_card_portrait != nil {
		fields = append(fields, person.FieldIDCardPortrait)
	}
	if m.id_card_national != nil {
		fields = append(fields, person.FieldIDCardNational)
	}
	if m.auth_face != nil {
		fields = append(fields, person.FieldAuthFace)
	}
	if m.auth_result != nil {
		fields = append(fields, person.FieldAuthResult)
	}
	if m.auth_at != nil {
		fields = append(fields, person.FieldAuthAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case person.FieldCreatedAt:
		return m.CreatedAt()
	case person.FieldUpdatedAt:
		return m.UpdatedAt()
	case person.FieldDeletedAt:
		return m.DeletedAt()
	case person.FieldLastModify:
		return m.LastModify()
	case person.FieldRemark:
		return m.Remark()
	case person.FieldStatus:
		return m.Status()
	case person.FieldBlock:
		return m.Block()
	case person.FieldName:
		return m.Name()
	case person.FieldIDCardNumber:
		return m.IDCardNumber()
	case person.FieldIDCardType:
		return m.IDCardType()
	case person.FieldIDCardPortrait:
		return m.IDCardPortrait()
	case person.FieldIDCardNational:
		return m.IDCardNational()
	case person.FieldAuthFace:
		return m.AuthFace()
	case person.FieldAuthResult:
		return m.AuthResult()
	case person.FieldAuthAt:
		return m.AuthAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case person.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case person.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case person.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case person.FieldLastModify:
		return m.OldLastModify(ctx)
	case person.FieldRemark:
		return m.OldRemark(ctx)
	case person.FieldStatus:
		return m.OldStatus(ctx)
	case person.FieldBlock:
		return m.OldBlock(ctx)
	case person.FieldName:
		return m.OldName(ctx)
	case person.FieldIDCardNumber:
		return m.OldIDCardNumber(ctx)
	case person.FieldIDCardType:
		return m.OldIDCardType(ctx)
	case person.FieldIDCardPortrait:
		return m.OldIDCardPortrait(ctx)
	case person.FieldIDCardNational:
		return m.OldIDCardNational(ctx)
	case person.FieldAuthFace:
		return m.OldAuthFace(ctx)
	case person.FieldAuthResult:
		return m.OldAuthResult(ctx)
	case person.FieldAuthAt:
		return m.OldAuthAt(ctx)
	}
	return nil, fmt.Errorf("unknown Person field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) SetField(name string, value ent.Value) error {
	switch name {
	case person.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case person.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case person.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case person.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case person.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case person.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case person.FieldBlock:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlock(v)
		return nil
	case person.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case person.FieldIDCardNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNumber(v)
		return nil
	case person.FieldIDCardType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardType(v)
		return nil
	case person.FieldIDCardPortrait:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardPortrait(v)
		return nil
	case person.FieldIDCardNational:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDCardNational(v)
		return nil
	case person.FieldAuthFace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthFace(v)
		return nil
	case person.FieldAuthResult:
		v, ok := value.(*model.FaceVerifyResult)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthResult(v)
		return nil
	case person.FieldAuthAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthAt(v)
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, person.FieldStatus)
	}
	if m.addid_card_type != nil {
		fields = append(fields, person.FieldIDCardType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case person.FieldStatus:
		return m.AddedStatus()
	case person.FieldIDCardType:
		return m.AddedIDCardType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonMutation) AddField(name string, value ent.Value) error {
	switch name {
	case person.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case person.FieldIDCardType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIDCardType(v)
		return nil
	}
	return fmt.Errorf("unknown Person numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(person.FieldDeletedAt) {
		fields = append(fields, person.FieldDeletedAt)
	}
	if m.FieldCleared(person.FieldLastModify) {
		fields = append(fields, person.FieldLastModify)
	}
	if m.FieldCleared(person.FieldRemark) {
		fields = append(fields, person.FieldRemark)
	}
	if m.FieldCleared(person.FieldAuthResult) {
		fields = append(fields, person.FieldAuthResult)
	}
	if m.FieldCleared(person.FieldAuthAt) {
		fields = append(fields, person.FieldAuthAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonMutation) ClearField(name string) error {
	switch name {
	case person.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case person.FieldLastModify:
		m.ClearLastModify()
		return nil
	case person.FieldRemark:
		m.ClearRemark()
		return nil
	case person.FieldAuthResult:
		m.ClearAuthResult()
		return nil
	case person.FieldAuthAt:
		m.ClearAuthAt()
		return nil
	}
	return fmt.Errorf("unknown Person nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonMutation) ResetField(name string) error {
	switch name {
	case person.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case person.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case person.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case person.FieldLastModify:
		m.ResetLastModify()
		return nil
	case person.FieldRemark:
		m.ResetRemark()
		return nil
	case person.FieldStatus:
		m.ResetStatus()
		return nil
	case person.FieldBlock:
		m.ResetBlock()
		return nil
	case person.FieldName:
		m.ResetName()
		return nil
	case person.FieldIDCardNumber:
		m.ResetIDCardNumber()
		return nil
	case person.FieldIDCardType:
		m.ResetIDCardType()
		return nil
	case person.FieldIDCardPortrait:
		m.ResetIDCardPortrait()
		return nil
	case person.FieldIDCardNational:
		m.ResetIDCardNational()
		return nil
	case person.FieldAuthFace:
		m.ResetAuthFace()
		return nil
	case person.FieldAuthResult:
		m.ResetAuthResult()
		return nil
	case person.FieldAuthAt:
		m.ResetAuthAt()
		return nil
	}
	return fmt.Errorf("unknown Person field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rider != nil {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeRider:
		ids := make([]ent.Value, 0, len(m.rider))
		for id := range m.rider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrider != nil {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case person.EdgeRider:
		ids := make([]ent.Value, 0, len(m.removedrider))
		for id := range m.removedrider {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrider {
		edges = append(edges, person.EdgeRider)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonMutation) EdgeCleared(name string) bool {
	switch name {
	case person.EdgeRider:
		return m.clearedrider
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Person unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonMutation) ResetEdge(name string) error {
	switch name {
	case person.EdgeRider:
		m.ResetRider()
		return nil
	}
	return fmt.Errorf("unknown Person edge %s", name)
}

// RiderMutation represents an operation that mutates the Rider nodes in the graph.
type RiderMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	last_modify      *time.Time
	remark           *string
	group_id         *uint64
	addgroup_id      *uint64
	phone            *string
	contact          **model.RiderContact
	device_type      *uint8
	adddevice_type   *uint8
	last_device      *string
	is_new_device    *bool
	last_face        *string
	push_id          *string
	last_signin_at   *time.Time
	esign_account_id *string
	clearedFields    map[string]struct{}
	person           *uint64
	clearedperson    bool
	contract         map[uint64]struct{}
	removedcontract  map[uint64]struct{}
	clearedcontract  bool
	done             bool
	oldValue         func(context.Context) (*Rider, error)
	predicates       []predicate.Rider
}

var _ ent.Mutation = (*RiderMutation)(nil)

// riderOption allows management of the mutation configuration using functional options.
type riderOption func(*RiderMutation)

// newRiderMutation creates new mutation for the Rider entity.
func newRiderMutation(c config, op Op, opts ...riderOption) *RiderMutation {
	m := &RiderMutation{
		config:        c,
		op:            op,
		typ:           TypeRider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRiderID sets the ID field of the mutation.
func withRiderID(id uint64) riderOption {
	return func(m *RiderMutation) {
		var (
			err   error
			once  sync.Once
			value *Rider
		)
		m.oldValue = func(ctx context.Context) (*Rider, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRider sets the old Rider of the mutation.
func withRider(node *Rider) riderOption {
	return func(m *RiderMutation) {
		m.oldValue = func(context.Context) (*Rider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RiderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RiderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RiderMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *RiderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RiderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RiderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RiderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RiderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RiderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RiderMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RiderMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RiderMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[rider.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RiderMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[rider.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RiderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, rider.FieldDeletedAt)
}

// SetLastModify sets the "last_modify" field.
func (m *RiderMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *RiderMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastModify(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ClearLastModify clears the value of the "last_modify" field.
func (m *RiderMutation) ClearLastModify() {
	m.last_modify = nil
	m.clearedFields[rider.FieldLastModify] = struct{}{}
}

// LastModifyCleared returns if the "last_modify" field was cleared in this mutation.
func (m *RiderMutation) LastModifyCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastModify]
	return ok
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *RiderMutation) ResetLastModify() {
	m.last_modify = nil
	delete(m.clearedFields, rider.FieldLastModify)
}

// SetRemark sets the "remark" field.
func (m *RiderMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *RiderMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldRemark(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *RiderMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[rider.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *RiderMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[rider.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *RiderMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, rider.FieldRemark)
}

// SetPersonID sets the "person_id" field.
func (m *RiderMutation) SetPersonID(u uint64) {
	m.person = &u
}

// PersonID returns the value of the "person_id" field in the mutation.
func (m *RiderMutation) PersonID() (r uint64, exists bool) {
	v := m.person
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonID returns the old "person_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPersonID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPersonID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPersonID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonID: %w", err)
	}
	return oldValue.PersonID, nil
}

// ClearPersonID clears the value of the "person_id" field.
func (m *RiderMutation) ClearPersonID() {
	m.person = nil
	m.clearedFields[rider.FieldPersonID] = struct{}{}
}

// PersonIDCleared returns if the "person_id" field was cleared in this mutation.
func (m *RiderMutation) PersonIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldPersonID]
	return ok
}

// ResetPersonID resets all changes to the "person_id" field.
func (m *RiderMutation) ResetPersonID() {
	m.person = nil
	delete(m.clearedFields, rider.FieldPersonID)
}

// SetGroupID sets the "group_id" field.
func (m *RiderMutation) SetGroupID(u uint64) {
	m.group_id = &u
	m.addgroup_id = nil
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *RiderMutation) GroupID() (r uint64, exists bool) {
	v := m.group_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldGroupID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// AddGroupID adds u to the "group_id" field.
func (m *RiderMutation) AddGroupID(u uint64) {
	if m.addgroup_id != nil {
		*m.addgroup_id += u
	} else {
		m.addgroup_id = &u
	}
}

// AddedGroupID returns the value that was added to the "group_id" field in this mutation.
func (m *RiderMutation) AddedGroupID() (r uint64, exists bool) {
	v := m.addgroup_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearGroupID clears the value of the "group_id" field.
func (m *RiderMutation) ClearGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
	m.clearedFields[rider.FieldGroupID] = struct{}{}
}

// GroupIDCleared returns if the "group_id" field was cleared in this mutation.
func (m *RiderMutation) GroupIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldGroupID]
	return ok
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *RiderMutation) ResetGroupID() {
	m.group_id = nil
	m.addgroup_id = nil
	delete(m.clearedFields, rider.FieldGroupID)
}

// SetPhone sets the "phone" field.
func (m *RiderMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *RiderMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *RiderMutation) ResetPhone() {
	m.phone = nil
}

// SetContact sets the "contact" field.
func (m *RiderMutation) SetContact(mc *model.RiderContact) {
	m.contact = &mc
}

// Contact returns the value of the "contact" field in the mutation.
func (m *RiderMutation) Contact() (r *model.RiderContact, exists bool) {
	v := m.contact
	if v == nil {
		return
	}
	return *v, true
}

// OldContact returns the old "contact" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldContact(ctx context.Context) (v *model.RiderContact, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContact: %w", err)
	}
	return oldValue.Contact, nil
}

// ClearContact clears the value of the "contact" field.
func (m *RiderMutation) ClearContact() {
	m.contact = nil
	m.clearedFields[rider.FieldContact] = struct{}{}
}

// ContactCleared returns if the "contact" field was cleared in this mutation.
func (m *RiderMutation) ContactCleared() bool {
	_, ok := m.clearedFields[rider.FieldContact]
	return ok
}

// ResetContact resets all changes to the "contact" field.
func (m *RiderMutation) ResetContact() {
	m.contact = nil
	delete(m.clearedFields, rider.FieldContact)
}

// SetDeviceType sets the "device_type" field.
func (m *RiderMutation) SetDeviceType(u uint8) {
	m.device_type = &u
	m.adddevice_type = nil
}

// DeviceType returns the value of the "device_type" field in the mutation.
func (m *RiderMutation) DeviceType() (r uint8, exists bool) {
	v := m.device_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceType returns the old "device_type" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldDeviceType(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDeviceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDeviceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceType: %w", err)
	}
	return oldValue.DeviceType, nil
}

// AddDeviceType adds u to the "device_type" field.
func (m *RiderMutation) AddDeviceType(u uint8) {
	if m.adddevice_type != nil {
		*m.adddevice_type += u
	} else {
		m.adddevice_type = &u
	}
}

// AddedDeviceType returns the value that was added to the "device_type" field in this mutation.
func (m *RiderMutation) AddedDeviceType() (r uint8, exists bool) {
	v := m.adddevice_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeviceType resets all changes to the "device_type" field.
func (m *RiderMutation) ResetDeviceType() {
	m.device_type = nil
	m.adddevice_type = nil
}

// SetLastDevice sets the "last_device" field.
func (m *RiderMutation) SetLastDevice(s string) {
	m.last_device = &s
}

// LastDevice returns the value of the "last_device" field in the mutation.
func (m *RiderMutation) LastDevice() (r string, exists bool) {
	v := m.last_device
	if v == nil {
		return
	}
	return *v, true
}

// OldLastDevice returns the old "last_device" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastDevice: %w", err)
	}
	return oldValue.LastDevice, nil
}

// ResetLastDevice resets all changes to the "last_device" field.
func (m *RiderMutation) ResetLastDevice() {
	m.last_device = nil
}

// SetIsNewDevice sets the "is_new_device" field.
func (m *RiderMutation) SetIsNewDevice(b bool) {
	m.is_new_device = &b
}

// IsNewDevice returns the value of the "is_new_device" field in the mutation.
func (m *RiderMutation) IsNewDevice() (r bool, exists bool) {
	v := m.is_new_device
	if v == nil {
		return
	}
	return *v, true
}

// OldIsNewDevice returns the old "is_new_device" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldIsNewDevice(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsNewDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsNewDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsNewDevice: %w", err)
	}
	return oldValue.IsNewDevice, nil
}

// ResetIsNewDevice resets all changes to the "is_new_device" field.
func (m *RiderMutation) ResetIsNewDevice() {
	m.is_new_device = nil
}

// SetLastFace sets the "last_face" field.
func (m *RiderMutation) SetLastFace(s string) {
	m.last_face = &s
}

// LastFace returns the value of the "last_face" field in the mutation.
func (m *RiderMutation) LastFace() (r string, exists bool) {
	v := m.last_face
	if v == nil {
		return
	}
	return *v, true
}

// OldLastFace returns the old "last_face" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastFace(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastFace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastFace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastFace: %w", err)
	}
	return oldValue.LastFace, nil
}

// ClearLastFace clears the value of the "last_face" field.
func (m *RiderMutation) ClearLastFace() {
	m.last_face = nil
	m.clearedFields[rider.FieldLastFace] = struct{}{}
}

// LastFaceCleared returns if the "last_face" field was cleared in this mutation.
func (m *RiderMutation) LastFaceCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastFace]
	return ok
}

// ResetLastFace resets all changes to the "last_face" field.
func (m *RiderMutation) ResetLastFace() {
	m.last_face = nil
	delete(m.clearedFields, rider.FieldLastFace)
}

// SetPushID sets the "push_id" field.
func (m *RiderMutation) SetPushID(s string) {
	m.push_id = &s
}

// PushID returns the value of the "push_id" field in the mutation.
func (m *RiderMutation) PushID() (r string, exists bool) {
	v := m.push_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPushID returns the old "push_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldPushID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPushID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPushID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPushID: %w", err)
	}
	return oldValue.PushID, nil
}

// ClearPushID clears the value of the "push_id" field.
func (m *RiderMutation) ClearPushID() {
	m.push_id = nil
	m.clearedFields[rider.FieldPushID] = struct{}{}
}

// PushIDCleared returns if the "push_id" field was cleared in this mutation.
func (m *RiderMutation) PushIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldPushID]
	return ok
}

// ResetPushID resets all changes to the "push_id" field.
func (m *RiderMutation) ResetPushID() {
	m.push_id = nil
	delete(m.clearedFields, rider.FieldPushID)
}

// SetLastSigninAt sets the "last_signin_at" field.
func (m *RiderMutation) SetLastSigninAt(t time.Time) {
	m.last_signin_at = &t
}

// LastSigninAt returns the value of the "last_signin_at" field in the mutation.
func (m *RiderMutation) LastSigninAt() (r time.Time, exists bool) {
	v := m.last_signin_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSigninAt returns the old "last_signin_at" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldLastSigninAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastSigninAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastSigninAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSigninAt: %w", err)
	}
	return oldValue.LastSigninAt, nil
}

// ClearLastSigninAt clears the value of the "last_signin_at" field.
func (m *RiderMutation) ClearLastSigninAt() {
	m.last_signin_at = nil
	m.clearedFields[rider.FieldLastSigninAt] = struct{}{}
}

// LastSigninAtCleared returns if the "last_signin_at" field was cleared in this mutation.
func (m *RiderMutation) LastSigninAtCleared() bool {
	_, ok := m.clearedFields[rider.FieldLastSigninAt]
	return ok
}

// ResetLastSigninAt resets all changes to the "last_signin_at" field.
func (m *RiderMutation) ResetLastSigninAt() {
	m.last_signin_at = nil
	delete(m.clearedFields, rider.FieldLastSigninAt)
}

// SetEsignAccountID sets the "esign_account_id" field.
func (m *RiderMutation) SetEsignAccountID(s string) {
	m.esign_account_id = &s
}

// EsignAccountID returns the value of the "esign_account_id" field in the mutation.
func (m *RiderMutation) EsignAccountID() (r string, exists bool) {
	v := m.esign_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEsignAccountID returns the old "esign_account_id" field's value of the Rider entity.
// If the Rider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RiderMutation) OldEsignAccountID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEsignAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEsignAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEsignAccountID: %w", err)
	}
	return oldValue.EsignAccountID, nil
}

// ClearEsignAccountID clears the value of the "esign_account_id" field.
func (m *RiderMutation) ClearEsignAccountID() {
	m.esign_account_id = nil
	m.clearedFields[rider.FieldEsignAccountID] = struct{}{}
}

// EsignAccountIDCleared returns if the "esign_account_id" field was cleared in this mutation.
func (m *RiderMutation) EsignAccountIDCleared() bool {
	_, ok := m.clearedFields[rider.FieldEsignAccountID]
	return ok
}

// ResetEsignAccountID resets all changes to the "esign_account_id" field.
func (m *RiderMutation) ResetEsignAccountID() {
	m.esign_account_id = nil
	delete(m.clearedFields, rider.FieldEsignAccountID)
}

// ClearPerson clears the "person" edge to the Person entity.
func (m *RiderMutation) ClearPerson() {
	m.clearedperson = true
}

// PersonCleared reports if the "person" edge to the Person entity was cleared.
func (m *RiderMutation) PersonCleared() bool {
	return m.PersonIDCleared() || m.clearedperson
}

// PersonIDs returns the "person" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonID instead. It exists only for internal usage by the builders.
func (m *RiderMutation) PersonIDs() (ids []uint64) {
	if id := m.person; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPerson resets all changes to the "person" edge.
func (m *RiderMutation) ResetPerson() {
	m.person = nil
	m.clearedperson = false
}

// AddContractIDs adds the "contract" edge to the Contract entity by ids.
func (m *RiderMutation) AddContractIDs(ids ...uint64) {
	if m.contract == nil {
		m.contract = make(map[uint64]struct{})
	}
	for i := range ids {
		m.contract[ids[i]] = struct{}{}
	}
}

// ClearContract clears the "contract" edge to the Contract entity.
func (m *RiderMutation) ClearContract() {
	m.clearedcontract = true
}

// ContractCleared reports if the "contract" edge to the Contract entity was cleared.
func (m *RiderMutation) ContractCleared() bool {
	return m.clearedcontract
}

// RemoveContractIDs removes the "contract" edge to the Contract entity by IDs.
func (m *RiderMutation) RemoveContractIDs(ids ...uint64) {
	if m.removedcontract == nil {
		m.removedcontract = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.contract, ids[i])
		m.removedcontract[ids[i]] = struct{}{}
	}
}

// RemovedContract returns the removed IDs of the "contract" edge to the Contract entity.
func (m *RiderMutation) RemovedContractIDs() (ids []uint64) {
	for id := range m.removedcontract {
		ids = append(ids, id)
	}
	return
}

// ContractIDs returns the "contract" edge IDs in the mutation.
func (m *RiderMutation) ContractIDs() (ids []uint64) {
	for id := range m.contract {
		ids = append(ids, id)
	}
	return
}

// ResetContract resets all changes to the "contract" edge.
func (m *RiderMutation) ResetContract() {
	m.contract = nil
	m.clearedcontract = false
	m.removedcontract = nil
}

// Where appends a list predicates to the RiderMutation builder.
func (m *RiderMutation) Where(ps ...predicate.Rider) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RiderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rider).
func (m *RiderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RiderMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, rider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rider.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, rider.FieldDeletedAt)
	}
	if m.last_modify != nil {
		fields = append(fields, rider.FieldLastModify)
	}
	if m.remark != nil {
		fields = append(fields, rider.FieldRemark)
	}
	if m.person != nil {
		fields = append(fields, rider.FieldPersonID)
	}
	if m.group_id != nil {
		fields = append(fields, rider.FieldGroupID)
	}
	if m.phone != nil {
		fields = append(fields, rider.FieldPhone)
	}
	if m.contact != nil {
		fields = append(fields, rider.FieldContact)
	}
	if m.device_type != nil {
		fields = append(fields, rider.FieldDeviceType)
	}
	if m.last_device != nil {
		fields = append(fields, rider.FieldLastDevice)
	}
	if m.is_new_device != nil {
		fields = append(fields, rider.FieldIsNewDevice)
	}
	if m.last_face != nil {
		fields = append(fields, rider.FieldLastFace)
	}
	if m.push_id != nil {
		fields = append(fields, rider.FieldPushID)
	}
	if m.last_signin_at != nil {
		fields = append(fields, rider.FieldLastSigninAt)
	}
	if m.esign_account_id != nil {
		fields = append(fields, rider.FieldEsignAccountID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RiderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rider.FieldCreatedAt:
		return m.CreatedAt()
	case rider.FieldUpdatedAt:
		return m.UpdatedAt()
	case rider.FieldDeletedAt:
		return m.DeletedAt()
	case rider.FieldLastModify:
		return m.LastModify()
	case rider.FieldRemark:
		return m.Remark()
	case rider.FieldPersonID:
		return m.PersonID()
	case rider.FieldGroupID:
		return m.GroupID()
	case rider.FieldPhone:
		return m.Phone()
	case rider.FieldContact:
		return m.Contact()
	case rider.FieldDeviceType:
		return m.DeviceType()
	case rider.FieldLastDevice:
		return m.LastDevice()
	case rider.FieldIsNewDevice:
		return m.IsNewDevice()
	case rider.FieldLastFace:
		return m.LastFace()
	case rider.FieldPushID:
		return m.PushID()
	case rider.FieldLastSigninAt:
		return m.LastSigninAt()
	case rider.FieldEsignAccountID:
		return m.EsignAccountID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RiderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case rider.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case rider.FieldLastModify:
		return m.OldLastModify(ctx)
	case rider.FieldRemark:
		return m.OldRemark(ctx)
	case rider.FieldPersonID:
		return m.OldPersonID(ctx)
	case rider.FieldGroupID:
		return m.OldGroupID(ctx)
	case rider.FieldPhone:
		return m.OldPhone(ctx)
	case rider.FieldContact:
		return m.OldContact(ctx)
	case rider.FieldDeviceType:
		return m.OldDeviceType(ctx)
	case rider.FieldLastDevice:
		return m.OldLastDevice(ctx)
	case rider.FieldIsNewDevice:
		return m.OldIsNewDevice(ctx)
	case rider.FieldLastFace:
		return m.OldLastFace(ctx)
	case rider.FieldPushID:
		return m.OldPushID(ctx)
	case rider.FieldLastSigninAt:
		return m.OldLastSigninAt(ctx)
	case rider.FieldEsignAccountID:
		return m.OldEsignAccountID(ctx)
	}
	return nil, fmt.Errorf("unknown Rider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case rider.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case rider.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case rider.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case rider.FieldPersonID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonID(v)
		return nil
	case rider.FieldGroupID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case rider.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case rider.FieldContact:
		v, ok := value.(*model.RiderContact)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContact(v)
		return nil
	case rider.FieldDeviceType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceType(v)
		return nil
	case rider.FieldLastDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastDevice(v)
		return nil
	case rider.FieldIsNewDevice:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsNewDevice(v)
		return nil
	case rider.FieldLastFace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastFace(v)
		return nil
	case rider.FieldPushID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPushID(v)
		return nil
	case rider.FieldLastSigninAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSigninAt(v)
		return nil
	case rider.FieldEsignAccountID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEsignAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown Rider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RiderMutation) AddedFields() []string {
	var fields []string
	if m.addgroup_id != nil {
		fields = append(fields, rider.FieldGroupID)
	}
	if m.adddevice_type != nil {
		fields = append(fields, rider.FieldDeviceType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RiderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rider.FieldGroupID:
		return m.AddedGroupID()
	case rider.FieldDeviceType:
		return m.AddedDeviceType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RiderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rider.FieldGroupID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGroupID(v)
		return nil
	case rider.FieldDeviceType:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeviceType(v)
		return nil
	}
	return fmt.Errorf("unknown Rider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RiderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rider.FieldDeletedAt) {
		fields = append(fields, rider.FieldDeletedAt)
	}
	if m.FieldCleared(rider.FieldLastModify) {
		fields = append(fields, rider.FieldLastModify)
	}
	if m.FieldCleared(rider.FieldRemark) {
		fields = append(fields, rider.FieldRemark)
	}
	if m.FieldCleared(rider.FieldPersonID) {
		fields = append(fields, rider.FieldPersonID)
	}
	if m.FieldCleared(rider.FieldGroupID) {
		fields = append(fields, rider.FieldGroupID)
	}
	if m.FieldCleared(rider.FieldContact) {
		fields = append(fields, rider.FieldContact)
	}
	if m.FieldCleared(rider.FieldLastFace) {
		fields = append(fields, rider.FieldLastFace)
	}
	if m.FieldCleared(rider.FieldPushID) {
		fields = append(fields, rider.FieldPushID)
	}
	if m.FieldCleared(rider.FieldLastSigninAt) {
		fields = append(fields, rider.FieldLastSigninAt)
	}
	if m.FieldCleared(rider.FieldEsignAccountID) {
		fields = append(fields, rider.FieldEsignAccountID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RiderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RiderMutation) ClearField(name string) error {
	switch name {
	case rider.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case rider.FieldLastModify:
		m.ClearLastModify()
		return nil
	case rider.FieldRemark:
		m.ClearRemark()
		return nil
	case rider.FieldPersonID:
		m.ClearPersonID()
		return nil
	case rider.FieldGroupID:
		m.ClearGroupID()
		return nil
	case rider.FieldContact:
		m.ClearContact()
		return nil
	case rider.FieldLastFace:
		m.ClearLastFace()
		return nil
	case rider.FieldPushID:
		m.ClearPushID()
		return nil
	case rider.FieldLastSigninAt:
		m.ClearLastSigninAt()
		return nil
	case rider.FieldEsignAccountID:
		m.ClearEsignAccountID()
		return nil
	}
	return fmt.Errorf("unknown Rider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RiderMutation) ResetField(name string) error {
	switch name {
	case rider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case rider.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case rider.FieldLastModify:
		m.ResetLastModify()
		return nil
	case rider.FieldRemark:
		m.ResetRemark()
		return nil
	case rider.FieldPersonID:
		m.ResetPersonID()
		return nil
	case rider.FieldGroupID:
		m.ResetGroupID()
		return nil
	case rider.FieldPhone:
		m.ResetPhone()
		return nil
	case rider.FieldContact:
		m.ResetContact()
		return nil
	case rider.FieldDeviceType:
		m.ResetDeviceType()
		return nil
	case rider.FieldLastDevice:
		m.ResetLastDevice()
		return nil
	case rider.FieldIsNewDevice:
		m.ResetIsNewDevice()
		return nil
	case rider.FieldLastFace:
		m.ResetLastFace()
		return nil
	case rider.FieldPushID:
		m.ResetPushID()
		return nil
	case rider.FieldLastSigninAt:
		m.ResetLastSigninAt()
		return nil
	case rider.FieldEsignAccountID:
		m.ResetEsignAccountID()
		return nil
	}
	return fmt.Errorf("unknown Rider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RiderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.person != nil {
		edges = append(edges, rider.EdgePerson)
	}
	if m.contract != nil {
		edges = append(edges, rider.EdgeContract)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RiderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rider.EdgePerson:
		if id := m.person; id != nil {
			return []ent.Value{*id}
		}
	case rider.EdgeContract:
		ids := make([]ent.Value, 0, len(m.contract))
		for id := range m.contract {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RiderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcontract != nil {
		edges = append(edges, rider.EdgeContract)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RiderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rider.EdgeContract:
		ids := make([]ent.Value, 0, len(m.removedcontract))
		for id := range m.removedcontract {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RiderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedperson {
		edges = append(edges, rider.EdgePerson)
	}
	if m.clearedcontract {
		edges = append(edges, rider.EdgeContract)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RiderMutation) EdgeCleared(name string) bool {
	switch name {
	case rider.EdgePerson:
		return m.clearedperson
	case rider.EdgeContract:
		return m.clearedcontract
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RiderMutation) ClearEdge(name string) error {
	switch name {
	case rider.EdgePerson:
		m.ClearPerson()
		return nil
	}
	return fmt.Errorf("unknown Rider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RiderMutation) ResetEdge(name string) error {
	switch name {
	case rider.EdgePerson:
		m.ResetPerson()
		return nil
	case rider.EdgeContract:
		m.ResetContract()
		return nil
	}
	return fmt.Errorf("unknown Rider edge %s", name)
}

// SettingMutation represents an operation that mutates the Setting nodes in the graph.
type SettingMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	key           *string
	val           *model.Setting
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Setting, error)
	predicates    []predicate.Setting
}

var _ ent.Mutation = (*SettingMutation)(nil)

// settingOption allows management of the mutation configuration using functional options.
type settingOption func(*SettingMutation)

// newSettingMutation creates new mutation for the Setting entity.
func newSettingMutation(c config, op Op, opts ...settingOption) *SettingMutation {
	m := &SettingMutation{
		config:        c,
		op:            op,
		typ:           TypeSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingID sets the ID field of the mutation.
func withSettingID(id uint64) settingOption {
	return func(m *SettingMutation) {
		var (
			err   error
			once  sync.Once
			value *Setting
		)
		m.oldValue = func(ctx context.Context) (*Setting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Setting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSetting sets the old Setting of the mutation.
func withSetting(node *Setting) settingOption {
	return func(m *SettingMutation) {
		m.oldValue = func(context.Context) (*Setting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *SettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetKey sets the "key" field.
func (m *SettingMutation) SetKey(s string) {
	m.key = &s
}

// Key returns the value of the "key" field in the mutation.
func (m *SettingMutation) Key() (r string, exists bool) {
	v := m.key
	if v == nil {
		return
	}
	return *v, true
}

// OldKey returns the old "key" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKey: %w", err)
	}
	return oldValue.Key, nil
}

// ResetKey resets all changes to the "key" field.
func (m *SettingMutation) ResetKey() {
	m.key = nil
}

// SetVal sets the "val" field.
func (m *SettingMutation) SetVal(value model.Setting) {
	m.val = &value
}

// Val returns the value of the "val" field in the mutation.
func (m *SettingMutation) Val() (r model.Setting, exists bool) {
	v := m.val
	if v == nil {
		return
	}
	return *v, true
}

// OldVal returns the old "val" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldVal(ctx context.Context) (v model.Setting, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVal: %w", err)
	}
	return oldValue.Val, nil
}

// ResetVal resets all changes to the "val" field.
func (m *SettingMutation) ResetVal() {
	m.val = nil
}

// Where appends a list predicates to the SettingMutation builder.
func (m *SettingMutation) Where(ps ...predicate.Setting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Setting).
func (m *SettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, setting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, setting.FieldUpdatedAt)
	}
	if m.key != nil {
		fields = append(fields, setting.FieldKey)
	}
	if m.val != nil {
		fields = append(fields, setting.FieldVal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldCreatedAt:
		return m.CreatedAt()
	case setting.FieldUpdatedAt:
		return m.UpdatedAt()
	case setting.FieldKey:
		return m.Key()
	case setting.FieldVal:
		return m.Val()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case setting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case setting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case setting.FieldKey:
		return m.OldKey(ctx)
	case setting.FieldVal:
		return m.OldVal(ctx)
	}
	return nil, fmt.Errorf("unknown Setting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case setting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case setting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case setting.FieldKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKey(v)
		return nil
	case setting.FieldVal:
		v, ok := value.(model.Setting)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVal(v)
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Setting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Setting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingMutation) ResetField(name string) error {
	switch name {
	case setting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case setting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case setting.FieldKey:
		m.ResetKey()
		return nil
	case setting.FieldVal:
		m.ResetVal()
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Setting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Setting edge %s", name)
}
