// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/pushmessage"
)

// PushmessageCreate is the builder for creating a Pushmessage entity.
type PushmessageCreate struct {
	config
	mutation *PushmessageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PushmessageCreate) SetCreatedAt(t time.Time) *PushmessageCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PushmessageCreate) SetNillableCreatedAt(t *time.Time) *PushmessageCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PushmessageCreate) SetUpdatedAt(t time.Time) *PushmessageCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PushmessageCreate) SetNillableUpdatedAt(t *time.Time) *PushmessageCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PushmessageCreate) SetDeletedAt(t time.Time) *PushmessageCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *PushmessageCreate) SetNillableDeletedAt(t *time.Time) *PushmessageCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetCreator sets the "creator" field.
func (pc *PushmessageCreate) SetCreator(m *model.Modifier) *PushmessageCreate {
	pc.mutation.SetCreator(m)
	return pc
}

// SetLastModifier sets the "last_modifier" field.
func (pc *PushmessageCreate) SetLastModifier(m *model.Modifier) *PushmessageCreate {
	pc.mutation.SetLastModifier(m)
	return pc
}

// SetRemark sets the "remark" field.
func (pc *PushmessageCreate) SetRemark(s string) *PushmessageCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *PushmessageCreate) SetNillableRemark(s *string) *PushmessageCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *PushmessageCreate) SetTitle(s string) *PushmessageCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetImage sets the "image" field.
func (pc *PushmessageCreate) SetImage(s string) *PushmessageCreate {
	pc.mutation.SetImage(s)
	return pc
}

// SetContent sets the "content" field.
func (pc *PushmessageCreate) SetContent(s string) *PushmessageCreate {
	pc.mutation.SetContent(s)
	return pc
}

// SetPushType sets the "push_type" field.
func (pc *PushmessageCreate) SetPushType(u uint8) *PushmessageCreate {
	pc.mutation.SetPushType(u)
	return pc
}

// SetPushTime sets the "push_time" field.
func (pc *PushmessageCreate) SetPushTime(t time.Time) *PushmessageCreate {
	pc.mutation.SetPushTime(t)
	return pc
}

// SetNillablePushTime sets the "push_time" field if the given value is not nil.
func (pc *PushmessageCreate) SetNillablePushTime(t *time.Time) *PushmessageCreate {
	if t != nil {
		pc.SetPushTime(*t)
	}
	return pc
}

// SetIsHome sets the "is_home" field.
func (pc *PushmessageCreate) SetIsHome(b bool) *PushmessageCreate {
	pc.mutation.SetIsHome(b)
	return pc
}

// SetHomeContent sets the "home_content" field.
func (pc *PushmessageCreate) SetHomeContent(s string) *PushmessageCreate {
	pc.mutation.SetHomeContent(s)
	return pc
}

// SetMessageStatus sets the "message_status" field.
func (pc *PushmessageCreate) SetMessageStatus(u uint8) *PushmessageCreate {
	pc.mutation.SetMessageStatus(u)
	return pc
}

// SetMessageType sets the "message_type" field.
func (pc *PushmessageCreate) SetMessageType(u uint8) *PushmessageCreate {
	pc.mutation.SetMessageType(u)
	return pc
}

// SetThirdPartyID sets the "third_party_id" field.
func (pc *PushmessageCreate) SetThirdPartyID(s string) *PushmessageCreate {
	pc.mutation.SetThirdPartyID(s)
	return pc
}

// Mutation returns the PushmessageMutation object of the builder.
func (pc *PushmessageCreate) Mutation() *PushmessageMutation {
	return pc.mutation
}

// Save creates the Pushmessage in the database.
func (pc *PushmessageCreate) Save(ctx context.Context) (*Pushmessage, error) {
	if err := pc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PushmessageCreate) SaveX(ctx context.Context) *Pushmessage {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PushmessageCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PushmessageCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PushmessageCreate) defaults() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		if pushmessage.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized pushmessage.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := pushmessage.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		if pushmessage.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized pushmessage.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := pushmessage.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pc *PushmessageCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Pushmessage.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Pushmessage.updated_at"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Pushmessage.title"`)}
	}
	if _, ok := pc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Pushmessage.image"`)}
	}
	if _, ok := pc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Pushmessage.content"`)}
	}
	if _, ok := pc.mutation.PushType(); !ok {
		return &ValidationError{Name: "push_type", err: errors.New(`ent: missing required field "Pushmessage.push_type"`)}
	}
	if _, ok := pc.mutation.IsHome(); !ok {
		return &ValidationError{Name: "is_home", err: errors.New(`ent: missing required field "Pushmessage.is_home"`)}
	}
	if _, ok := pc.mutation.HomeContent(); !ok {
		return &ValidationError{Name: "home_content", err: errors.New(`ent: missing required field "Pushmessage.home_content"`)}
	}
	if _, ok := pc.mutation.MessageStatus(); !ok {
		return &ValidationError{Name: "message_status", err: errors.New(`ent: missing required field "Pushmessage.message_status"`)}
	}
	if _, ok := pc.mutation.MessageType(); !ok {
		return &ValidationError{Name: "message_type", err: errors.New(`ent: missing required field "Pushmessage.message_type"`)}
	}
	if _, ok := pc.mutation.ThirdPartyID(); !ok {
		return &ValidationError{Name: "third_party_id", err: errors.New(`ent: missing required field "Pushmessage.third_party_id"`)}
	}
	return nil
}

func (pc *PushmessageCreate) sqlSave(ctx context.Context) (*Pushmessage, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PushmessageCreate) createSpec() (*Pushmessage, *sqlgraph.CreateSpec) {
	var (
		_node = &Pushmessage{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(pushmessage.Table, sqlgraph.NewFieldSpec(pushmessage.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(pushmessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(pushmessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(pushmessage.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.Creator(); ok {
		_spec.SetField(pushmessage.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := pc.mutation.LastModifier(); ok {
		_spec.SetField(pushmessage.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.SetField(pushmessage.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(pushmessage.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Image(); ok {
		_spec.SetField(pushmessage.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := pc.mutation.Content(); ok {
		_spec.SetField(pushmessage.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pc.mutation.PushType(); ok {
		_spec.SetField(pushmessage.FieldPushType, field.TypeUint8, value)
		_node.PushType = value
	}
	if value, ok := pc.mutation.PushTime(); ok {
		_spec.SetField(pushmessage.FieldPushTime, field.TypeTime, value)
		_node.PushTime = &value
	}
	if value, ok := pc.mutation.IsHome(); ok {
		_spec.SetField(pushmessage.FieldIsHome, field.TypeBool, value)
		_node.IsHome = value
	}
	if value, ok := pc.mutation.HomeContent(); ok {
		_spec.SetField(pushmessage.FieldHomeContent, field.TypeString, value)
		_node.HomeContent = value
	}
	if value, ok := pc.mutation.MessageStatus(); ok {
		_spec.SetField(pushmessage.FieldMessageStatus, field.TypeUint8, value)
		_node.MessageStatus = value
	}
	if value, ok := pc.mutation.MessageType(); ok {
		_spec.SetField(pushmessage.FieldMessageType, field.TypeUint8, value)
		_node.MessageType = value
	}
	if value, ok := pc.mutation.ThirdPartyID(); ok {
		_spec.SetField(pushmessage.FieldThirdPartyID, field.TypeString, value)
		_node.ThirdPartyID = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pushmessage.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PushmessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PushmessageCreate) OnConflict(opts ...sql.ConflictOption) *PushmessageUpsertOne {
	pc.conflict = opts
	return &PushmessageUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PushmessageCreate) OnConflictColumns(columns ...string) *PushmessageUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PushmessageUpsertOne{
		create: pc,
	}
}

type (
	// PushmessageUpsertOne is the builder for "upsert"-ing
	//  one Pushmessage node.
	PushmessageUpsertOne struct {
		create *PushmessageCreate
	}

	// PushmessageUpsert is the "OnConflict" setter.
	PushmessageUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PushmessageUpsert) SetUpdatedAt(v time.Time) *PushmessageUpsert {
	u.Set(pushmessage.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateUpdatedAt() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PushmessageUpsert) SetDeletedAt(v time.Time) *PushmessageUpsert {
	u.Set(pushmessage.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateDeletedAt() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PushmessageUpsert) ClearDeletedAt() *PushmessageUpsert {
	u.SetNull(pushmessage.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *PushmessageUpsert) SetLastModifier(v *model.Modifier) *PushmessageUpsert {
	u.Set(pushmessage.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateLastModifier() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PushmessageUpsert) ClearLastModifier() *PushmessageUpsert {
	u.SetNull(pushmessage.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *PushmessageUpsert) SetRemark(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateRemark() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *PushmessageUpsert) ClearRemark() *PushmessageUpsert {
	u.SetNull(pushmessage.FieldRemark)
	return u
}

// SetTitle sets the "title" field.
func (u *PushmessageUpsert) SetTitle(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateTitle() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldTitle)
	return u
}

// SetImage sets the "image" field.
func (u *PushmessageUpsert) SetImage(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateImage() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldImage)
	return u
}

// SetContent sets the "content" field.
func (u *PushmessageUpsert) SetContent(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateContent() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldContent)
	return u
}

// SetPushType sets the "push_type" field.
func (u *PushmessageUpsert) SetPushType(v uint8) *PushmessageUpsert {
	u.Set(pushmessage.FieldPushType, v)
	return u
}

// UpdatePushType sets the "push_type" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdatePushType() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldPushType)
	return u
}

// AddPushType adds v to the "push_type" field.
func (u *PushmessageUpsert) AddPushType(v uint8) *PushmessageUpsert {
	u.Add(pushmessage.FieldPushType, v)
	return u
}

// SetPushTime sets the "push_time" field.
func (u *PushmessageUpsert) SetPushTime(v time.Time) *PushmessageUpsert {
	u.Set(pushmessage.FieldPushTime, v)
	return u
}

// UpdatePushTime sets the "push_time" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdatePushTime() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldPushTime)
	return u
}

// ClearPushTime clears the value of the "push_time" field.
func (u *PushmessageUpsert) ClearPushTime() *PushmessageUpsert {
	u.SetNull(pushmessage.FieldPushTime)
	return u
}

// SetIsHome sets the "is_home" field.
func (u *PushmessageUpsert) SetIsHome(v bool) *PushmessageUpsert {
	u.Set(pushmessage.FieldIsHome, v)
	return u
}

// UpdateIsHome sets the "is_home" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateIsHome() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldIsHome)
	return u
}

// SetHomeContent sets the "home_content" field.
func (u *PushmessageUpsert) SetHomeContent(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldHomeContent, v)
	return u
}

// UpdateHomeContent sets the "home_content" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateHomeContent() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldHomeContent)
	return u
}

// SetMessageStatus sets the "message_status" field.
func (u *PushmessageUpsert) SetMessageStatus(v uint8) *PushmessageUpsert {
	u.Set(pushmessage.FieldMessageStatus, v)
	return u
}

// UpdateMessageStatus sets the "message_status" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateMessageStatus() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldMessageStatus)
	return u
}

// AddMessageStatus adds v to the "message_status" field.
func (u *PushmessageUpsert) AddMessageStatus(v uint8) *PushmessageUpsert {
	u.Add(pushmessage.FieldMessageStatus, v)
	return u
}

// SetMessageType sets the "message_type" field.
func (u *PushmessageUpsert) SetMessageType(v uint8) *PushmessageUpsert {
	u.Set(pushmessage.FieldMessageType, v)
	return u
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateMessageType() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldMessageType)
	return u
}

// AddMessageType adds v to the "message_type" field.
func (u *PushmessageUpsert) AddMessageType(v uint8) *PushmessageUpsert {
	u.Add(pushmessage.FieldMessageType, v)
	return u
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *PushmessageUpsert) SetThirdPartyID(v string) *PushmessageUpsert {
	u.Set(pushmessage.FieldThirdPartyID, v)
	return u
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *PushmessageUpsert) UpdateThirdPartyID() *PushmessageUpsert {
	u.SetExcluded(pushmessage.FieldThirdPartyID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PushmessageUpsertOne) UpdateNewValues() *PushmessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(pushmessage.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(pushmessage.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PushmessageUpsertOne) Ignore() *PushmessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PushmessageUpsertOne) DoNothing() *PushmessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PushmessageCreate.OnConflict
// documentation for more info.
func (u *PushmessageUpsertOne) Update(set func(*PushmessageUpsert)) *PushmessageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PushmessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PushmessageUpsertOne) SetUpdatedAt(v time.Time) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateUpdatedAt() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PushmessageUpsertOne) SetDeletedAt(v time.Time) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateDeletedAt() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PushmessageUpsertOne) ClearDeletedAt() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PushmessageUpsertOne) SetLastModifier(v *model.Modifier) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateLastModifier() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PushmessageUpsertOne) ClearLastModifier() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PushmessageUpsertOne) SetRemark(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateRemark() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PushmessageUpsertOne) ClearRemark() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *PushmessageUpsertOne) SetTitle(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateTitle() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateTitle()
	})
}

// SetImage sets the "image" field.
func (u *PushmessageUpsertOne) SetImage(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateImage() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateImage()
	})
}

// SetContent sets the "content" field.
func (u *PushmessageUpsertOne) SetContent(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateContent() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateContent()
	})
}

// SetPushType sets the "push_type" field.
func (u *PushmessageUpsertOne) SetPushType(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetPushType(v)
	})
}

// AddPushType adds v to the "push_type" field.
func (u *PushmessageUpsertOne) AddPushType(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddPushType(v)
	})
}

// UpdatePushType sets the "push_type" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdatePushType() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdatePushType()
	})
}

// SetPushTime sets the "push_time" field.
func (u *PushmessageUpsertOne) SetPushTime(v time.Time) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetPushTime(v)
	})
}

// UpdatePushTime sets the "push_time" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdatePushTime() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdatePushTime()
	})
}

// ClearPushTime clears the value of the "push_time" field.
func (u *PushmessageUpsertOne) ClearPushTime() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearPushTime()
	})
}

// SetIsHome sets the "is_home" field.
func (u *PushmessageUpsertOne) SetIsHome(v bool) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetIsHome(v)
	})
}

// UpdateIsHome sets the "is_home" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateIsHome() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateIsHome()
	})
}

// SetHomeContent sets the "home_content" field.
func (u *PushmessageUpsertOne) SetHomeContent(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetHomeContent(v)
	})
}

// UpdateHomeContent sets the "home_content" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateHomeContent() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateHomeContent()
	})
}

// SetMessageStatus sets the "message_status" field.
func (u *PushmessageUpsertOne) SetMessageStatus(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetMessageStatus(v)
	})
}

// AddMessageStatus adds v to the "message_status" field.
func (u *PushmessageUpsertOne) AddMessageStatus(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddMessageStatus(v)
	})
}

// UpdateMessageStatus sets the "message_status" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateMessageStatus() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateMessageStatus()
	})
}

// SetMessageType sets the "message_type" field.
func (u *PushmessageUpsertOne) SetMessageType(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetMessageType(v)
	})
}

// AddMessageType adds v to the "message_type" field.
func (u *PushmessageUpsertOne) AddMessageType(v uint8) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddMessageType(v)
	})
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateMessageType() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateMessageType()
	})
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *PushmessageUpsertOne) SetThirdPartyID(v string) *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetThirdPartyID(v)
	})
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *PushmessageUpsertOne) UpdateThirdPartyID() *PushmessageUpsertOne {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateThirdPartyID()
	})
}

// Exec executes the query.
func (u *PushmessageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PushmessageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PushmessageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PushmessageUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PushmessageUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PushmessageCreateBulk is the builder for creating many Pushmessage entities in bulk.
type PushmessageCreateBulk struct {
	config
	err      error
	builders []*PushmessageCreate
	conflict []sql.ConflictOption
}

// Save creates the Pushmessage entities in the database.
func (pcb *PushmessageCreateBulk) Save(ctx context.Context) ([]*Pushmessage, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Pushmessage, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PushmessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PushmessageCreateBulk) SaveX(ctx context.Context) []*Pushmessage {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PushmessageCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PushmessageCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Pushmessage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PushmessageUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PushmessageCreateBulk) OnConflict(opts ...sql.ConflictOption) *PushmessageUpsertBulk {
	pcb.conflict = opts
	return &PushmessageUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PushmessageCreateBulk) OnConflictColumns(columns ...string) *PushmessageUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PushmessageUpsertBulk{
		create: pcb,
	}
}

// PushmessageUpsertBulk is the builder for "upsert"-ing
// a bulk of Pushmessage nodes.
type PushmessageUpsertBulk struct {
	create *PushmessageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PushmessageUpsertBulk) UpdateNewValues() *PushmessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(pushmessage.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(pushmessage.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Pushmessage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PushmessageUpsertBulk) Ignore() *PushmessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PushmessageUpsertBulk) DoNothing() *PushmessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PushmessageCreateBulk.OnConflict
// documentation for more info.
func (u *PushmessageUpsertBulk) Update(set func(*PushmessageUpsert)) *PushmessageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PushmessageUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PushmessageUpsertBulk) SetUpdatedAt(v time.Time) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateUpdatedAt() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *PushmessageUpsertBulk) SetDeletedAt(v time.Time) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateDeletedAt() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *PushmessageUpsertBulk) ClearDeletedAt() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *PushmessageUpsertBulk) SetLastModifier(v *model.Modifier) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateLastModifier() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *PushmessageUpsertBulk) ClearLastModifier() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *PushmessageUpsertBulk) SetRemark(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateRemark() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *PushmessageUpsertBulk) ClearRemark() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearRemark()
	})
}

// SetTitle sets the "title" field.
func (u *PushmessageUpsertBulk) SetTitle(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateTitle() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateTitle()
	})
}

// SetImage sets the "image" field.
func (u *PushmessageUpsertBulk) SetImage(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateImage() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateImage()
	})
}

// SetContent sets the "content" field.
func (u *PushmessageUpsertBulk) SetContent(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateContent() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateContent()
	})
}

// SetPushType sets the "push_type" field.
func (u *PushmessageUpsertBulk) SetPushType(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetPushType(v)
	})
}

// AddPushType adds v to the "push_type" field.
func (u *PushmessageUpsertBulk) AddPushType(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddPushType(v)
	})
}

// UpdatePushType sets the "push_type" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdatePushType() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdatePushType()
	})
}

// SetPushTime sets the "push_time" field.
func (u *PushmessageUpsertBulk) SetPushTime(v time.Time) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetPushTime(v)
	})
}

// UpdatePushTime sets the "push_time" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdatePushTime() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdatePushTime()
	})
}

// ClearPushTime clears the value of the "push_time" field.
func (u *PushmessageUpsertBulk) ClearPushTime() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.ClearPushTime()
	})
}

// SetIsHome sets the "is_home" field.
func (u *PushmessageUpsertBulk) SetIsHome(v bool) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetIsHome(v)
	})
}

// UpdateIsHome sets the "is_home" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateIsHome() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateIsHome()
	})
}

// SetHomeContent sets the "home_content" field.
func (u *PushmessageUpsertBulk) SetHomeContent(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetHomeContent(v)
	})
}

// UpdateHomeContent sets the "home_content" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateHomeContent() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateHomeContent()
	})
}

// SetMessageStatus sets the "message_status" field.
func (u *PushmessageUpsertBulk) SetMessageStatus(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetMessageStatus(v)
	})
}

// AddMessageStatus adds v to the "message_status" field.
func (u *PushmessageUpsertBulk) AddMessageStatus(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddMessageStatus(v)
	})
}

// UpdateMessageStatus sets the "message_status" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateMessageStatus() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateMessageStatus()
	})
}

// SetMessageType sets the "message_type" field.
func (u *PushmessageUpsertBulk) SetMessageType(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetMessageType(v)
	})
}

// AddMessageType adds v to the "message_type" field.
func (u *PushmessageUpsertBulk) AddMessageType(v uint8) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.AddMessageType(v)
	})
}

// UpdateMessageType sets the "message_type" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateMessageType() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateMessageType()
	})
}

// SetThirdPartyID sets the "third_party_id" field.
func (u *PushmessageUpsertBulk) SetThirdPartyID(v string) *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.SetThirdPartyID(v)
	})
}

// UpdateThirdPartyID sets the "third_party_id" field to the value that was provided on create.
func (u *PushmessageUpsertBulk) UpdateThirdPartyID() *PushmessageUpsertBulk {
	return u.Update(func(s *PushmessageUpsert) {
		s.UpdateThirdPartyID()
	})
}

// Exec executes the query.
func (u *PushmessageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PushmessageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PushmessageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PushmessageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
