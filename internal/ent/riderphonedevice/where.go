// Code generated by ent, DO NOT EDIT.

package riderphonedevice

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeviceSn applies equality check predicate on the "device_sn" field. It's identical to DeviceSnEQ.
func DeviceSn(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldDeviceSn, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldModel, v))
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldBrand, v))
}

// OsVersion applies equality check predicate on the "os_version" field. It's identical to OsVersionEQ.
func OsVersion(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldOsVersion, v))
}

// OsName applies equality check predicate on the "os_name" field. It's identical to OsNameEQ.
func OsName(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldOsName, v))
}

// ScreenWidth applies equality check predicate on the "screen_width" field. It's identical to ScreenWidthEQ.
func ScreenWidth(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldScreenWidth, v))
}

// ScreenHeight applies equality check predicate on the "screen_height" field. It's identical to ScreenHeightEQ.
func ScreenHeight(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldScreenHeight, v))
}

// Imei applies equality check predicate on the "imei" field. It's identical to ImeiEQ.
func Imei(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldImei, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldRiderID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldDeletedAt))
}

// DeviceSnEQ applies the EQ predicate on the "device_sn" field.
func DeviceSnEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldDeviceSn, v))
}

// DeviceSnNEQ applies the NEQ predicate on the "device_sn" field.
func DeviceSnNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldDeviceSn, v))
}

// DeviceSnIn applies the In predicate on the "device_sn" field.
func DeviceSnIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldDeviceSn, vs...))
}

// DeviceSnNotIn applies the NotIn predicate on the "device_sn" field.
func DeviceSnNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldDeviceSn, vs...))
}

// DeviceSnGT applies the GT predicate on the "device_sn" field.
func DeviceSnGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldDeviceSn, v))
}

// DeviceSnGTE applies the GTE predicate on the "device_sn" field.
func DeviceSnGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldDeviceSn, v))
}

// DeviceSnLT applies the LT predicate on the "device_sn" field.
func DeviceSnLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldDeviceSn, v))
}

// DeviceSnLTE applies the LTE predicate on the "device_sn" field.
func DeviceSnLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldDeviceSn, v))
}

// DeviceSnContains applies the Contains predicate on the "device_sn" field.
func DeviceSnContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldDeviceSn, v))
}

// DeviceSnHasPrefix applies the HasPrefix predicate on the "device_sn" field.
func DeviceSnHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldDeviceSn, v))
}

// DeviceSnHasSuffix applies the HasSuffix predicate on the "device_sn" field.
func DeviceSnHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldDeviceSn, v))
}

// DeviceSnIsNil applies the IsNil predicate on the "device_sn" field.
func DeviceSnIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldDeviceSn))
}

// DeviceSnNotNil applies the NotNil predicate on the "device_sn" field.
func DeviceSnNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldDeviceSn))
}

// DeviceSnEqualFold applies the EqualFold predicate on the "device_sn" field.
func DeviceSnEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldDeviceSn, v))
}

// DeviceSnContainsFold applies the ContainsFold predicate on the "device_sn" field.
func DeviceSnContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldDeviceSn, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldModel, v))
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldBrand, v))
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldBrand, v))
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldBrand, vs...))
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldBrand, vs...))
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldBrand, v))
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldBrand, v))
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldBrand, v))
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldBrand, v))
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldBrand, v))
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldBrand, v))
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldBrand, v))
}

// BrandIsNil applies the IsNil predicate on the "brand" field.
func BrandIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldBrand))
}

// BrandNotNil applies the NotNil predicate on the "brand" field.
func BrandNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldBrand))
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldBrand, v))
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldBrand, v))
}

// OsVersionEQ applies the EQ predicate on the "os_version" field.
func OsVersionEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldOsVersion, v))
}

// OsVersionNEQ applies the NEQ predicate on the "os_version" field.
func OsVersionNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldOsVersion, v))
}

// OsVersionIn applies the In predicate on the "os_version" field.
func OsVersionIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldOsVersion, vs...))
}

// OsVersionNotIn applies the NotIn predicate on the "os_version" field.
func OsVersionNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldOsVersion, vs...))
}

// OsVersionGT applies the GT predicate on the "os_version" field.
func OsVersionGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldOsVersion, v))
}

// OsVersionGTE applies the GTE predicate on the "os_version" field.
func OsVersionGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldOsVersion, v))
}

// OsVersionLT applies the LT predicate on the "os_version" field.
func OsVersionLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldOsVersion, v))
}

// OsVersionLTE applies the LTE predicate on the "os_version" field.
func OsVersionLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldOsVersion, v))
}

// OsVersionContains applies the Contains predicate on the "os_version" field.
func OsVersionContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldOsVersion, v))
}

// OsVersionHasPrefix applies the HasPrefix predicate on the "os_version" field.
func OsVersionHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldOsVersion, v))
}

// OsVersionHasSuffix applies the HasSuffix predicate on the "os_version" field.
func OsVersionHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldOsVersion, v))
}

// OsVersionIsNil applies the IsNil predicate on the "os_version" field.
func OsVersionIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldOsVersion))
}

// OsVersionNotNil applies the NotNil predicate on the "os_version" field.
func OsVersionNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldOsVersion))
}

// OsVersionEqualFold applies the EqualFold predicate on the "os_version" field.
func OsVersionEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldOsVersion, v))
}

// OsVersionContainsFold applies the ContainsFold predicate on the "os_version" field.
func OsVersionContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldOsVersion, v))
}

// OsNameEQ applies the EQ predicate on the "os_name" field.
func OsNameEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldOsName, v))
}

// OsNameNEQ applies the NEQ predicate on the "os_name" field.
func OsNameNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldOsName, v))
}

// OsNameIn applies the In predicate on the "os_name" field.
func OsNameIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldOsName, vs...))
}

// OsNameNotIn applies the NotIn predicate on the "os_name" field.
func OsNameNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldOsName, vs...))
}

// OsNameGT applies the GT predicate on the "os_name" field.
func OsNameGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldOsName, v))
}

// OsNameGTE applies the GTE predicate on the "os_name" field.
func OsNameGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldOsName, v))
}

// OsNameLT applies the LT predicate on the "os_name" field.
func OsNameLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldOsName, v))
}

// OsNameLTE applies the LTE predicate on the "os_name" field.
func OsNameLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldOsName, v))
}

// OsNameContains applies the Contains predicate on the "os_name" field.
func OsNameContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldOsName, v))
}

// OsNameHasPrefix applies the HasPrefix predicate on the "os_name" field.
func OsNameHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldOsName, v))
}

// OsNameHasSuffix applies the HasSuffix predicate on the "os_name" field.
func OsNameHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldOsName, v))
}

// OsNameIsNil applies the IsNil predicate on the "os_name" field.
func OsNameIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldOsName))
}

// OsNameNotNil applies the NotNil predicate on the "os_name" field.
func OsNameNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldOsName))
}

// OsNameEqualFold applies the EqualFold predicate on the "os_name" field.
func OsNameEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldOsName, v))
}

// OsNameContainsFold applies the ContainsFold predicate on the "os_name" field.
func OsNameContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldOsName, v))
}

// ScreenWidthEQ applies the EQ predicate on the "screen_width" field.
func ScreenWidthEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldScreenWidth, v))
}

// ScreenWidthNEQ applies the NEQ predicate on the "screen_width" field.
func ScreenWidthNEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldScreenWidth, v))
}

// ScreenWidthIn applies the In predicate on the "screen_width" field.
func ScreenWidthIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldScreenWidth, vs...))
}

// ScreenWidthNotIn applies the NotIn predicate on the "screen_width" field.
func ScreenWidthNotIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldScreenWidth, vs...))
}

// ScreenWidthGT applies the GT predicate on the "screen_width" field.
func ScreenWidthGT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldScreenWidth, v))
}

// ScreenWidthGTE applies the GTE predicate on the "screen_width" field.
func ScreenWidthGTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldScreenWidth, v))
}

// ScreenWidthLT applies the LT predicate on the "screen_width" field.
func ScreenWidthLT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldScreenWidth, v))
}

// ScreenWidthLTE applies the LTE predicate on the "screen_width" field.
func ScreenWidthLTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldScreenWidth, v))
}

// ScreenWidthIsNil applies the IsNil predicate on the "screen_width" field.
func ScreenWidthIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldScreenWidth))
}

// ScreenWidthNotNil applies the NotNil predicate on the "screen_width" field.
func ScreenWidthNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldScreenWidth))
}

// ScreenHeightEQ applies the EQ predicate on the "screen_height" field.
func ScreenHeightEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldScreenHeight, v))
}

// ScreenHeightNEQ applies the NEQ predicate on the "screen_height" field.
func ScreenHeightNEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldScreenHeight, v))
}

// ScreenHeightIn applies the In predicate on the "screen_height" field.
func ScreenHeightIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldScreenHeight, vs...))
}

// ScreenHeightNotIn applies the NotIn predicate on the "screen_height" field.
func ScreenHeightNotIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldScreenHeight, vs...))
}

// ScreenHeightGT applies the GT predicate on the "screen_height" field.
func ScreenHeightGT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldScreenHeight, v))
}

// ScreenHeightGTE applies the GTE predicate on the "screen_height" field.
func ScreenHeightGTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldScreenHeight, v))
}

// ScreenHeightLT applies the LT predicate on the "screen_height" field.
func ScreenHeightLT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldScreenHeight, v))
}

// ScreenHeightLTE applies the LTE predicate on the "screen_height" field.
func ScreenHeightLTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldScreenHeight, v))
}

// ScreenHeightIsNil applies the IsNil predicate on the "screen_height" field.
func ScreenHeightIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldScreenHeight))
}

// ScreenHeightNotNil applies the NotNil predicate on the "screen_height" field.
func ScreenHeightNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldScreenHeight))
}

// ImeiEQ applies the EQ predicate on the "imei" field.
func ImeiEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldImei, v))
}

// ImeiNEQ applies the NEQ predicate on the "imei" field.
func ImeiNEQ(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldImei, v))
}

// ImeiIn applies the In predicate on the "imei" field.
func ImeiIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldImei, vs...))
}

// ImeiNotIn applies the NotIn predicate on the "imei" field.
func ImeiNotIn(vs ...string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldImei, vs...))
}

// ImeiGT applies the GT predicate on the "imei" field.
func ImeiGT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldImei, v))
}

// ImeiGTE applies the GTE predicate on the "imei" field.
func ImeiGTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldImei, v))
}

// ImeiLT applies the LT predicate on the "imei" field.
func ImeiLT(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldImei, v))
}

// ImeiLTE applies the LTE predicate on the "imei" field.
func ImeiLTE(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldImei, v))
}

// ImeiContains applies the Contains predicate on the "imei" field.
func ImeiContains(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContains(FieldImei, v))
}

// ImeiHasPrefix applies the HasPrefix predicate on the "imei" field.
func ImeiHasPrefix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasPrefix(FieldImei, v))
}

// ImeiHasSuffix applies the HasSuffix predicate on the "imei" field.
func ImeiHasSuffix(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldHasSuffix(FieldImei, v))
}

// ImeiIsNil applies the IsNil predicate on the "imei" field.
func ImeiIsNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIsNull(FieldImei))
}

// ImeiNotNil applies the NotNil predicate on the "imei" field.
func ImeiNotNil() predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotNull(FieldImei))
}

// ImeiEqualFold applies the EqualFold predicate on the "imei" field.
func ImeiEqualFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEqualFold(FieldImei, v))
}

// ImeiContainsFold applies the ContainsFold predicate on the "imei" field.
func ImeiContainsFold(v string) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldContainsFold(FieldImei, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldNotIn(FieldRiderID, vs...))
}

// RiderIDGT applies the GT predicate on the "rider_id" field.
func RiderIDGT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGT(FieldRiderID, v))
}

// RiderIDGTE applies the GTE predicate on the "rider_id" field.
func RiderIDGTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldGTE(FieldRiderID, v))
}

// RiderIDLT applies the LT predicate on the "rider_id" field.
func RiderIDLT(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLT(FieldRiderID, v))
}

// RiderIDLTE applies the LTE predicate on the "rider_id" field.
func RiderIDLTE(v uint64) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.FieldLTE(FieldRiderID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RiderPhoneDevice) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RiderPhoneDevice) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RiderPhoneDevice) predicate.RiderPhoneDevice {
	return predicate.RiderPhoneDevice(sql.NotPredicates(p))
}
