// Code generated by ent, DO NOT EDIT.

package riderphonedevice

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the riderphonedevice type in the database.
	Label = "rider_phone_device"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeviceSn holds the string denoting the device_sn field in the database.
	FieldDeviceSn = "device_sn"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldBrand holds the string denoting the brand field in the database.
	FieldBrand = "brand"
	// FieldOsVersion holds the string denoting the os_version field in the database.
	FieldOsVersion = "os_version"
	// FieldOsName holds the string denoting the os_name field in the database.
	FieldOsName = "os_name"
	// FieldScreenWidth holds the string denoting the screen_width field in the database.
	FieldScreenWidth = "screen_width"
	// FieldScreenHeight holds the string denoting the screen_height field in the database.
	FieldScreenHeight = "screen_height"
	// FieldImei holds the string denoting the imei field in the database.
	FieldImei = "imei"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// Table holds the table name of the riderphonedevice in the database.
	Table = "rider_phone_device"
)

// Columns holds all SQL columns for riderphonedevice fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldDeviceSn,
	FieldModel,
	FieldBrand,
	FieldOsVersion,
	FieldOsName,
	FieldScreenWidth,
	FieldScreenHeight,
	FieldImei,
	FieldRiderID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the RiderPhoneDevice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeviceSn orders the results by the device_sn field.
func ByDeviceSn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceSn, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByBrand orders the results by the brand field.
func ByBrand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBrand, opts...).ToFunc()
}

// ByOsVersion orders the results by the os_version field.
func ByOsVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsVersion, opts...).ToFunc()
}

// ByOsName orders the results by the os_name field.
func ByOsName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsName, opts...).ToFunc()
}

// ByScreenWidth orders the results by the screen_width field.
func ByScreenWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScreenWidth, opts...).ToFunc()
}

// ByScreenHeight orders the results by the screen_height field.
func ByScreenHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScreenHeight, opts...).ToFunc()
}

// ByImei orders the results by the imei field.
func ByImei(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImei, opts...).ToFunc()
}

// ByRiderID orders the results by the rider_id field.
func ByRiderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiderID, opts...).ToFunc()
}
