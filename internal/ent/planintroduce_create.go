// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/planintroduce"
)

// PlanIntroduceCreate is the builder for creating a PlanIntroduce entity.
type PlanIntroduceCreate struct {
	config
	mutation *PlanIntroduceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pic *PlanIntroduceCreate) SetCreatedAt(t time.Time) *PlanIntroduceCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *PlanIntroduceCreate) SetNillableCreatedAt(t *time.Time) *PlanIntroduceCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetUpdatedAt sets the "updated_at" field.
func (pic *PlanIntroduceCreate) SetUpdatedAt(t time.Time) *PlanIntroduceCreate {
	pic.mutation.SetUpdatedAt(t)
	return pic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pic *PlanIntroduceCreate) SetNillableUpdatedAt(t *time.Time) *PlanIntroduceCreate {
	if t != nil {
		pic.SetUpdatedAt(*t)
	}
	return pic
}

// SetBrandID sets the "brand_id" field.
func (pic *PlanIntroduceCreate) SetBrandID(u uint64) *PlanIntroduceCreate {
	pic.mutation.SetBrandID(u)
	return pic
}

// SetNillableBrandID sets the "brand_id" field if the given value is not nil.
func (pic *PlanIntroduceCreate) SetNillableBrandID(u *uint64) *PlanIntroduceCreate {
	if u != nil {
		pic.SetBrandID(*u)
	}
	return pic
}

// SetModel sets the "model" field.
func (pic *PlanIntroduceCreate) SetModel(s string) *PlanIntroduceCreate {
	pic.mutation.SetModel(s)
	return pic
}

// SetImage sets the "image" field.
func (pic *PlanIntroduceCreate) SetImage(s string) *PlanIntroduceCreate {
	pic.mutation.SetImage(s)
	return pic
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (pic *PlanIntroduceCreate) SetBrand(e *EbikeBrand) *PlanIntroduceCreate {
	return pic.SetBrandID(e.ID)
}

// Mutation returns the PlanIntroduceMutation object of the builder.
func (pic *PlanIntroduceCreate) Mutation() *PlanIntroduceMutation {
	return pic.mutation
}

// Save creates the PlanIntroduce in the database.
func (pic *PlanIntroduceCreate) Save(ctx context.Context) (*PlanIntroduce, error) {
	pic.defaults()
	return withHooks[*PlanIntroduce, PlanIntroduceMutation](ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PlanIntroduceCreate) SaveX(ctx context.Context) *PlanIntroduce {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PlanIntroduceCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PlanIntroduceCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *PlanIntroduceCreate) defaults() {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		v := planintroduce.DefaultCreatedAt()
		pic.mutation.SetCreatedAt(v)
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		v := planintroduce.DefaultUpdatedAt()
		pic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PlanIntroduceCreate) check() error {
	if _, ok := pic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PlanIntroduce.created_at"`)}
	}
	if _, ok := pic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PlanIntroduce.updated_at"`)}
	}
	if _, ok := pic.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "PlanIntroduce.model"`)}
	}
	if _, ok := pic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "PlanIntroduce.image"`)}
	}
	return nil
}

func (pic *PlanIntroduceCreate) sqlSave(ctx context.Context) (*PlanIntroduce, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PlanIntroduceCreate) createSpec() (*PlanIntroduce, *sqlgraph.CreateSpec) {
	var (
		_node = &PlanIntroduce{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: planintroduce.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: planintroduce.FieldID,
			},
		}
	)
	_spec.OnConflict = pic.conflict
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(planintroduce.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.UpdatedAt(); ok {
		_spec.SetField(planintroduce.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pic.mutation.Model(); ok {
		_spec.SetField(planintroduce.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := pic.mutation.Image(); ok {
		_spec.SetField(planintroduce.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if nodes := pic.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   planintroduce.BrandTable,
			Columns: []string{planintroduce.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BrandID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanIntroduce.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanIntroduceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pic *PlanIntroduceCreate) OnConflict(opts ...sql.ConflictOption) *PlanIntroduceUpsertOne {
	pic.conflict = opts
	return &PlanIntroduceUpsertOne{
		create: pic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pic *PlanIntroduceCreate) OnConflictColumns(columns ...string) *PlanIntroduceUpsertOne {
	pic.conflict = append(pic.conflict, sql.ConflictColumns(columns...))
	return &PlanIntroduceUpsertOne{
		create: pic,
	}
}

type (
	// PlanIntroduceUpsertOne is the builder for "upsert"-ing
	//  one PlanIntroduce node.
	PlanIntroduceUpsertOne struct {
		create *PlanIntroduceCreate
	}

	// PlanIntroduceUpsert is the "OnConflict" setter.
	PlanIntroduceUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanIntroduceUpsert) SetUpdatedAt(v time.Time) *PlanIntroduceUpsert {
	u.Set(planintroduce.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanIntroduceUpsert) UpdateUpdatedAt() *PlanIntroduceUpsert {
	u.SetExcluded(planintroduce.FieldUpdatedAt)
	return u
}

// SetBrandID sets the "brand_id" field.
func (u *PlanIntroduceUpsert) SetBrandID(v uint64) *PlanIntroduceUpsert {
	u.Set(planintroduce.FieldBrandID, v)
	return u
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanIntroduceUpsert) UpdateBrandID() *PlanIntroduceUpsert {
	u.SetExcluded(planintroduce.FieldBrandID)
	return u
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanIntroduceUpsert) ClearBrandID() *PlanIntroduceUpsert {
	u.SetNull(planintroduce.FieldBrandID)
	return u
}

// SetModel sets the "model" field.
func (u *PlanIntroduceUpsert) SetModel(v string) *PlanIntroduceUpsert {
	u.Set(planintroduce.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanIntroduceUpsert) UpdateModel() *PlanIntroduceUpsert {
	u.SetExcluded(planintroduce.FieldModel)
	return u
}

// SetImage sets the "image" field.
func (u *PlanIntroduceUpsert) SetImage(v string) *PlanIntroduceUpsert {
	u.Set(planintroduce.FieldImage, v)
	return u
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PlanIntroduceUpsert) UpdateImage() *PlanIntroduceUpsert {
	u.SetExcluded(planintroduce.FieldImage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanIntroduceUpsertOne) UpdateNewValues() *PlanIntroduceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(planintroduce.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanIntroduceUpsertOne) Ignore() *PlanIntroduceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanIntroduceUpsertOne) DoNothing() *PlanIntroduceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanIntroduceCreate.OnConflict
// documentation for more info.
func (u *PlanIntroduceUpsertOne) Update(set func(*PlanIntroduceUpsert)) *PlanIntroduceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanIntroduceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanIntroduceUpsertOne) SetUpdatedAt(v time.Time) *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanIntroduceUpsertOne) UpdateUpdatedAt() *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *PlanIntroduceUpsertOne) SetBrandID(v uint64) *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanIntroduceUpsertOne) UpdateBrandID() *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanIntroduceUpsertOne) ClearBrandID() *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.ClearBrandID()
	})
}

// SetModel sets the "model" field.
func (u *PlanIntroduceUpsertOne) SetModel(v string) *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanIntroduceUpsertOne) UpdateModel() *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateModel()
	})
}

// SetImage sets the "image" field.
func (u *PlanIntroduceUpsertOne) SetImage(v string) *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PlanIntroduceUpsertOne) UpdateImage() *PlanIntroduceUpsertOne {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateImage()
	})
}

// Exec executes the query.
func (u *PlanIntroduceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanIntroduceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanIntroduceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanIntroduceUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanIntroduceUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanIntroduceCreateBulk is the builder for creating many PlanIntroduce entities in bulk.
type PlanIntroduceCreateBulk struct {
	config
	builders []*PlanIntroduceCreate
	conflict []sql.ConflictOption
}

// Save creates the PlanIntroduce entities in the database.
func (picb *PlanIntroduceCreateBulk) Save(ctx context.Context) ([]*PlanIntroduce, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PlanIntroduce, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanIntroduceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = picb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PlanIntroduceCreateBulk) SaveX(ctx context.Context) []*PlanIntroduce {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PlanIntroduceCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PlanIntroduceCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlanIntroduce.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanIntroduceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (picb *PlanIntroduceCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanIntroduceUpsertBulk {
	picb.conflict = opts
	return &PlanIntroduceUpsertBulk{
		create: picb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (picb *PlanIntroduceCreateBulk) OnConflictColumns(columns ...string) *PlanIntroduceUpsertBulk {
	picb.conflict = append(picb.conflict, sql.ConflictColumns(columns...))
	return &PlanIntroduceUpsertBulk{
		create: picb,
	}
}

// PlanIntroduceUpsertBulk is the builder for "upsert"-ing
// a bulk of PlanIntroduce nodes.
type PlanIntroduceUpsertBulk struct {
	create *PlanIntroduceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PlanIntroduceUpsertBulk) UpdateNewValues() *PlanIntroduceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(planintroduce.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlanIntroduce.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanIntroduceUpsertBulk) Ignore() *PlanIntroduceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanIntroduceUpsertBulk) DoNothing() *PlanIntroduceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanIntroduceCreateBulk.OnConflict
// documentation for more info.
func (u *PlanIntroduceUpsertBulk) Update(set func(*PlanIntroduceUpsert)) *PlanIntroduceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanIntroduceUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanIntroduceUpsertBulk) SetUpdatedAt(v time.Time) *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanIntroduceUpsertBulk) UpdateUpdatedAt() *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrandID sets the "brand_id" field.
func (u *PlanIntroduceUpsertBulk) SetBrandID(v uint64) *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetBrandID(v)
	})
}

// UpdateBrandID sets the "brand_id" field to the value that was provided on create.
func (u *PlanIntroduceUpsertBulk) UpdateBrandID() *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateBrandID()
	})
}

// ClearBrandID clears the value of the "brand_id" field.
func (u *PlanIntroduceUpsertBulk) ClearBrandID() *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.ClearBrandID()
	})
}

// SetModel sets the "model" field.
func (u *PlanIntroduceUpsertBulk) SetModel(v string) *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PlanIntroduceUpsertBulk) UpdateModel() *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateModel()
	})
}

// SetImage sets the "image" field.
func (u *PlanIntroduceUpsertBulk) SetImage(v string) *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.SetImage(v)
	})
}

// UpdateImage sets the "image" field to the value that was provided on create.
func (u *PlanIntroduceUpsertBulk) UpdateImage() *PlanIntroduceUpsertBulk {
	return u.Update(func(s *PlanIntroduceUpsert) {
		s.UpdateImage()
	})
}

// Exec executes the query.
func (u *PlanIntroduceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanIntroduceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanIntroduceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanIntroduceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
