// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseBatterySwapDelete is the builder for deleting a EnterpriseBatterySwap entity.
type EnterpriseBatterySwapDelete struct {
	config
	hooks    []Hook
	mutation *EnterpriseBatterySwapMutation
}

// Where appends a list predicates to the EnterpriseBatterySwapDelete builder.
func (ebsd *EnterpriseBatterySwapDelete) Where(ps ...predicate.EnterpriseBatterySwap) *EnterpriseBatterySwapDelete {
	ebsd.mutation.Where(ps...)
	return ebsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ebsd *EnterpriseBatterySwapDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ebsd.sqlExec, ebsd.mutation, ebsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ebsd *EnterpriseBatterySwapDelete) ExecX(ctx context.Context) int {
	n, err := ebsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ebsd *EnterpriseBatterySwapDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(enterprisebatteryswap.Table, sqlgraph.NewFieldSpec(enterprisebatteryswap.FieldID, field.TypeUint64))
	if ps := ebsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ebsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ebsd.mutation.done = true
	return affected, err
}

// EnterpriseBatterySwapDeleteOne is the builder for deleting a single EnterpriseBatterySwap entity.
type EnterpriseBatterySwapDeleteOne struct {
	ebsd *EnterpriseBatterySwapDelete
}

// Where appends a list predicates to the EnterpriseBatterySwapDelete builder.
func (ebsdo *EnterpriseBatterySwapDeleteOne) Where(ps ...predicate.EnterpriseBatterySwap) *EnterpriseBatterySwapDeleteOne {
	ebsdo.ebsd.mutation.Where(ps...)
	return ebsdo
}

// Exec executes the deletion query.
func (ebsdo *EnterpriseBatterySwapDeleteOne) Exec(ctx context.Context) error {
	n, err := ebsdo.ebsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{enterprisebatteryswap.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ebsdo *EnterpriseBatterySwapDeleteOne) ExecX(ctx context.Context) {
	if err := ebsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
