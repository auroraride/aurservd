// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/riderphonedevice"
)

// RiderPhoneDevice is the model entity for the RiderPhoneDevice schema.
type RiderPhoneDevice struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 设备编号
	DeviceSn string `json:"device_sn,omitempty"`
	// 手机型号
	Model string `json:"model,omitempty"`
	// 手机品牌
	Brand string `json:"brand,omitempty"`
	// 系统版本
	OsVersion string `json:"os_version,omitempty"`
	// 系统名称
	OsName string `json:"os_name,omitempty"`
	// 屏幕宽度
	ScreenWidth uint64 `json:"screen_width,omitempty"`
	// 屏幕高度
	ScreenHeight uint64 `json:"screen_height,omitempty"`
	// IMEI
	Imei string `json:"imei,omitempty"`
	// 骑手ID
	RiderID      uint64 `json:"rider_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RiderPhoneDevice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case riderphonedevice.FieldID, riderphonedevice.FieldScreenWidth, riderphonedevice.FieldScreenHeight, riderphonedevice.FieldRiderID:
			values[i] = new(sql.NullInt64)
		case riderphonedevice.FieldDeviceSn, riderphonedevice.FieldModel, riderphonedevice.FieldBrand, riderphonedevice.FieldOsVersion, riderphonedevice.FieldOsName, riderphonedevice.FieldImei:
			values[i] = new(sql.NullString)
		case riderphonedevice.FieldCreatedAt, riderphonedevice.FieldUpdatedAt, riderphonedevice.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RiderPhoneDevice fields.
func (rpd *RiderPhoneDevice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case riderphonedevice.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rpd.ID = uint64(value.Int64)
		case riderphonedevice.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rpd.CreatedAt = value.Time
			}
		case riderphonedevice.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rpd.UpdatedAt = value.Time
			}
		case riderphonedevice.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rpd.DeletedAt = new(time.Time)
				*rpd.DeletedAt = value.Time
			}
		case riderphonedevice.FieldDeviceSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_sn", values[i])
			} else if value.Valid {
				rpd.DeviceSn = value.String
			}
		case riderphonedevice.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				rpd.Model = value.String
			}
		case riderphonedevice.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				rpd.Brand = value.String
			}
		case riderphonedevice.FieldOsVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_version", values[i])
			} else if value.Valid {
				rpd.OsVersion = value.String
			}
		case riderphonedevice.FieldOsName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_name", values[i])
			} else if value.Valid {
				rpd.OsName = value.String
			}
		case riderphonedevice.FieldScreenWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field screen_width", values[i])
			} else if value.Valid {
				rpd.ScreenWidth = uint64(value.Int64)
			}
		case riderphonedevice.FieldScreenHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field screen_height", values[i])
			} else if value.Valid {
				rpd.ScreenHeight = uint64(value.Int64)
			}
		case riderphonedevice.FieldImei:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field imei", values[i])
			} else if value.Valid {
				rpd.Imei = value.String
			}
		case riderphonedevice.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				rpd.RiderID = uint64(value.Int64)
			}
		default:
			rpd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RiderPhoneDevice.
// This includes values selected through modifiers, order, etc.
func (rpd *RiderPhoneDevice) Value(name string) (ent.Value, error) {
	return rpd.selectValues.Get(name)
}

// Update returns a builder for updating this RiderPhoneDevice.
// Note that you need to call RiderPhoneDevice.Unwrap() before calling this method if this RiderPhoneDevice
// was returned from a transaction, and the transaction was committed or rolled back.
func (rpd *RiderPhoneDevice) Update() *RiderPhoneDeviceUpdateOne {
	return NewRiderPhoneDeviceClient(rpd.config).UpdateOne(rpd)
}

// Unwrap unwraps the RiderPhoneDevice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rpd *RiderPhoneDevice) Unwrap() *RiderPhoneDevice {
	_tx, ok := rpd.config.driver.(*txDriver)
	if !ok {
		panic("ent: RiderPhoneDevice is not a transactional entity")
	}
	rpd.config.driver = _tx.drv
	return rpd
}

// String implements the fmt.Stringer.
func (rpd *RiderPhoneDevice) String() string {
	var builder strings.Builder
	builder.WriteString("RiderPhoneDevice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rpd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rpd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rpd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := rpd.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("device_sn=")
	builder.WriteString(rpd.DeviceSn)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(rpd.Model)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(rpd.Brand)
	builder.WriteString(", ")
	builder.WriteString("os_version=")
	builder.WriteString(rpd.OsVersion)
	builder.WriteString(", ")
	builder.WriteString("os_name=")
	builder.WriteString(rpd.OsName)
	builder.WriteString(", ")
	builder.WriteString("screen_width=")
	builder.WriteString(fmt.Sprintf("%v", rpd.ScreenWidth))
	builder.WriteString(", ")
	builder.WriteString("screen_height=")
	builder.WriteString(fmt.Sprintf("%v", rpd.ScreenHeight))
	builder.WriteString(", ")
	builder.WriteString("imei=")
	builder.WriteString(rpd.Imei)
	builder.WriteString(", ")
	builder.WriteString("rider_id=")
	builder.WriteString(fmt.Sprintf("%v", rpd.RiderID))
	builder.WriteByte(')')
	return builder.String()
}

// RiderPhoneDevices is a parsable slice of RiderPhoneDevice.
type RiderPhoneDevices []*RiderPhoneDevice
