// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BatteryDelete is the builder for deleting a Battery entity.
type BatteryDelete struct {
	config
	hooks    []Hook
	mutation *BatteryMutation
}

// Where appends a list predicates to the BatteryDelete builder.
func (bd *BatteryDelete) Where(ps ...predicate.Battery) *BatteryDelete {
	bd.mutation.Where(ps...)
	return bd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bd *BatteryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, BatteryMutation](ctx, bd.sqlExec, bd.mutation, bd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bd *BatteryDelete) ExecX(ctx context.Context) int {
	n, err := bd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bd *BatteryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: battery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: battery.FieldID,
			},
		},
	}
	if ps := bd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bd.mutation.done = true
	return affected, err
}

// BatteryDeleteOne is the builder for deleting a single Battery entity.
type BatteryDeleteOne struct {
	bd *BatteryDelete
}

// Exec executes the deletion query.
func (bdo *BatteryDeleteOne) Exec(ctx context.Context) error {
	n, err := bdo.bd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{battery.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bdo *BatteryDeleteOne) ExecX(ctx context.Context) {
	bdo.bd.ExecX(ctx)
}
