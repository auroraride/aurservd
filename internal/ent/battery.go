// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// Battery is the model entity for the Battery schema.
type Battery struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 城市ID
	CityID *uint64 `json:"city_id,omitempty"`
	// 骑手ID
	RiderID *uint64 `json:"rider_id,omitempty"`
	// 电柜ID
	CabinetID *uint64 `json:"cabinet_id,omitempty"`
	// 订阅ID
	SubscribeID *uint64 `json:"subscribe_id,omitempty"`
	// 电池编号
	Sn string `json:"sn,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
	// 电池型号
	Model string `json:"model,omitempty"`
	// 所在智能柜仓位序号
	Ordinal *int `json:"ordinal,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatteryQuery when eager-loading is set.
	Edges BatteryEdges `json:"edges"`
}

// BatteryEdges holds the relations/edges for other nodes in the graph.
type BatteryEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// 所属骑手
	Rider *Rider `json:"rider,omitempty"`
	// 所属电柜
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// 所属订阅
	Subscribe *Subscribe `json:"subscribe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[1] {
		if e.Rider == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[2] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// SubscribeOrErr returns the Subscribe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatteryEdges) SubscribeOrErr() (*Subscribe, error) {
	if e.loadedTypes[3] {
		if e.Subscribe == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subscribe.Label}
		}
		return e.Subscribe, nil
	}
	return nil, &NotLoadedError{edge: "subscribe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Battery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case battery.FieldCreator, battery.FieldLastModifier:
			values[i] = new([]byte)
		case battery.FieldEnable:
			values[i] = new(sql.NullBool)
		case battery.FieldID, battery.FieldCityID, battery.FieldRiderID, battery.FieldCabinetID, battery.FieldSubscribeID, battery.FieldOrdinal:
			values[i] = new(sql.NullInt64)
		case battery.FieldRemark, battery.FieldSn, battery.FieldModel:
			values[i] = new(sql.NullString)
		case battery.FieldCreatedAt, battery.FieldUpdatedAt, battery.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Battery", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Battery fields.
func (b *Battery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case battery.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = uint64(value.Int64)
		case battery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case battery.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case battery.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = new(time.Time)
				*b.DeletedAt = value.Time
			}
		case battery.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case battery.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &b.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case battery.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				b.Remark = value.String
			}
		case battery.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				b.CityID = new(uint64)
				*b.CityID = uint64(value.Int64)
			}
		case battery.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				b.RiderID = new(uint64)
				*b.RiderID = uint64(value.Int64)
			}
		case battery.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				b.CabinetID = new(uint64)
				*b.CabinetID = uint64(value.Int64)
			}
		case battery.FieldSubscribeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subscribe_id", values[i])
			} else if value.Valid {
				b.SubscribeID = new(uint64)
				*b.SubscribeID = uint64(value.Int64)
			}
		case battery.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				b.Sn = value.String
			}
		case battery.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				b.Enable = value.Bool
			}
		case battery.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				b.Model = value.String
			}
		case battery.FieldOrdinal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordinal", values[i])
			} else if value.Valid {
				b.Ordinal = new(int)
				*b.Ordinal = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the Battery entity.
func (b *Battery) QueryCity() *CityQuery {
	return NewBatteryClient(b.config).QueryCity(b)
}

// QueryRider queries the "rider" edge of the Battery entity.
func (b *Battery) QueryRider() *RiderQuery {
	return NewBatteryClient(b.config).QueryRider(b)
}

// QueryCabinet queries the "cabinet" edge of the Battery entity.
func (b *Battery) QueryCabinet() *CabinetQuery {
	return NewBatteryClient(b.config).QueryCabinet(b)
}

// QuerySubscribe queries the "subscribe" edge of the Battery entity.
func (b *Battery) QuerySubscribe() *SubscribeQuery {
	return NewBatteryClient(b.config).QuerySubscribe(b)
}

// Update returns a builder for updating this Battery.
// Note that you need to call Battery.Unwrap() before calling this method if this Battery
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Battery) Update() *BatteryUpdateOne {
	return NewBatteryClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Battery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Battery) Unwrap() *Battery {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Battery is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Battery) String() string {
	var builder strings.Builder
	builder.WriteString("Battery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := b.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", b.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", b.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(b.Remark)
	builder.WriteString(", ")
	if v := b.CityID; v != nil {
		builder.WriteString("city_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.RiderID; v != nil {
		builder.WriteString("rider_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.CabinetID; v != nil {
		builder.WriteString("cabinet_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := b.SubscribeID; v != nil {
		builder.WriteString("subscribe_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(b.Sn)
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", b.Enable))
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(b.Model)
	builder.WriteString(", ")
	if v := b.Ordinal; v != nil {
		builder.WriteString("ordinal=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Batteries is a parsable slice of Battery.
type Batteries []*Battery

func (b Batteries) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
