// Code generated by ent, DO NOT EDIT.

package assetexport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the assetexport type in the database.
	Label = "asset_export"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldAssetManagerID holds the string denoting the asset_manager_id field in the database.
	FieldAssetManagerID = "asset_manager_id"
	// FieldTaxonomy holds the string denoting the taxonomy field in the database.
	FieldTaxonomy = "taxonomy"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldFinishAt holds the string denoting the finish_at field in the database.
	FieldFinishAt = "finish_at"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// FieldCondition holds the string denoting the condition field in the database.
	FieldCondition = "condition"
	// FieldInfo holds the string denoting the info field in the database.
	FieldInfo = "info"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// EdgeAssetManager holds the string denoting the asset_manager edge name in mutations.
	EdgeAssetManager = "asset_manager"
	// Table holds the table name of the assetexport in the database.
	Table = "asset_export"
	// AssetManagerTable is the table that holds the asset_manager relation/edge.
	AssetManagerTable = "asset_export"
	// AssetManagerInverseTable is the table name for the AssetManager entity.
	// It exists in this package in order to avoid circular dependency with the "assetmanager" package.
	AssetManagerInverseTable = "asset_manager"
	// AssetManagerColumn is the table column denoting the asset_manager relation/edge.
	AssetManagerColumn = "asset_manager_id"
)

// Columns holds all SQL columns for assetexport fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldAssetManagerID,
	FieldTaxonomy,
	FieldSn,
	FieldStatus,
	FieldPath,
	FieldMessage,
	FieldFinishAt,
	FieldDuration,
	FieldCondition,
	FieldInfo,
	FieldRemark,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus uint8
)

// OrderOption defines the ordering options for the AssetExport queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByAssetManagerID orders the results by the asset_manager_id field.
func ByAssetManagerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetManagerID, opts...).ToFunc()
}

// ByTaxonomy orders the results by the taxonomy field.
func ByTaxonomy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxonomy, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByFinishAt orders the results by the finish_at field.
func ByFinishAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishAt, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByCondition orders the results by the condition field.
func ByCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCondition, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByAssetManagerField orders the results by asset_manager field.
func ByAssetManagerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetManagerStep(), sql.OrderByField(field, opts...))
	}
}
func newAssetManagerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetManagerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AssetManagerTable, AssetManagerColumn),
	)
}
