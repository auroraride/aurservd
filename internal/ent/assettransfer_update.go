// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetTransferUpdate is the builder for updating AssetTransfer entities.
type AssetTransferUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atu *AssetTransferUpdate) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AssetTransferUpdate) SetUpdatedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *AssetTransferUpdate) SetDeletedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *AssetTransferUpdate) ClearDeletedAt() *AssetTransferUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetLastModifier sets the "last_modifier" field.
func (atu *AssetTransferUpdate) SetLastModifier(m *model.Modifier) *AssetTransferUpdate {
	atu.mutation.SetLastModifier(m)
	return atu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atu *AssetTransferUpdate) ClearLastModifier() *AssetTransferUpdate {
	atu.mutation.ClearLastModifier()
	return atu
}

// SetRemark sets the "remark" field.
func (atu *AssetTransferUpdate) SetRemark(s string) *AssetTransferUpdate {
	atu.mutation.SetRemark(s)
	return atu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableRemark(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetRemark(*s)
	}
	return atu
}

// ClearRemark clears the value of the "remark" field.
func (atu *AssetTransferUpdate) ClearRemark() *AssetTransferUpdate {
	atu.mutation.ClearRemark()
	return atu
}

// SetStatus sets the "status" field.
func (atu *AssetTransferUpdate) SetStatus(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetStatus()
	atu.mutation.SetStatus(u)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableStatus(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetStatus(*u)
	}
	return atu
}

// AddStatus adds u to the "status" field.
func (atu *AssetTransferUpdate) AddStatus(u int8) *AssetTransferUpdate {
	atu.mutation.AddStatus(u)
	return atu
}

// SetSn sets the "sn" field.
func (atu *AssetTransferUpdate) SetSn(s string) *AssetTransferUpdate {
	atu.mutation.SetSn(s)
	return atu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableSn(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetSn(*s)
	}
	return atu
}

// SetFromLocationType sets the "from_location_type" field.
func (atu *AssetTransferUpdate) SetFromLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetFromLocationType()
	atu.mutation.SetFromLocationType(u)
	return atu
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationType(*u)
	}
	return atu
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atu *AssetTransferUpdate) AddFromLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddFromLocationType(u)
	return atu
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atu *AssetTransferUpdate) ClearFromLocationType() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationType()
	return atu
}

// SetFromLocationID sets the "from_location_id" field.
func (atu *AssetTransferUpdate) SetFromLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.ResetFromLocationID()
	atu.mutation.SetFromLocationID(u)
	return atu
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationID(*u)
	}
	return atu
}

// AddFromLocationID adds u to the "from_location_id" field.
func (atu *AssetTransferUpdate) AddFromLocationID(u int64) *AssetTransferUpdate {
	atu.mutation.AddFromLocationID(u)
	return atu
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atu *AssetTransferUpdate) ClearFromLocationID() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationID()
	return atu
}

// SetToLocationType sets the "to_location_type" field.
func (atu *AssetTransferUpdate) SetToLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetToLocationType()
	atu.mutation.SetToLocationType(u)
	return atu
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationType(*u)
	}
	return atu
}

// AddToLocationType adds u to the "to_location_type" field.
func (atu *AssetTransferUpdate) AddToLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddToLocationType(u)
	return atu
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atu *AssetTransferUpdate) ClearToLocationType() *AssetTransferUpdate {
	atu.mutation.ClearToLocationType()
	return atu
}

// SetToLocationID sets the "to_location_id" field.
func (atu *AssetTransferUpdate) SetToLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.ResetToLocationID()
	atu.mutation.SetToLocationID(u)
	return atu
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationID(*u)
	}
	return atu
}

// AddToLocationID adds u to the "to_location_id" field.
func (atu *AssetTransferUpdate) AddToLocationID(u int64) *AssetTransferUpdate {
	atu.mutation.AddToLocationID(u)
	return atu
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atu *AssetTransferUpdate) ClearToLocationID() *AssetTransferUpdate {
	atu.mutation.ClearToLocationID()
	return atu
}

// SetOutNum sets the "out_num" field.
func (atu *AssetTransferUpdate) SetOutNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetOutNum()
	atu.mutation.SetOutNum(u)
	return atu
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutNum(*u)
	}
	return atu
}

// AddOutNum adds u to the "out_num" field.
func (atu *AssetTransferUpdate) AddOutNum(u int) *AssetTransferUpdate {
	atu.mutation.AddOutNum(u)
	return atu
}

// ClearOutNum clears the value of the "out_num" field.
func (atu *AssetTransferUpdate) ClearOutNum() *AssetTransferUpdate {
	atu.mutation.ClearOutNum()
	return atu
}

// SetInNum sets the "in_num" field.
func (atu *AssetTransferUpdate) SetInNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetInNum()
	atu.mutation.SetInNum(u)
	return atu
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetInNum(*u)
	}
	return atu
}

// AddInNum adds u to the "in_num" field.
func (atu *AssetTransferUpdate) AddInNum(u int) *AssetTransferUpdate {
	atu.mutation.AddInNum(u)
	return atu
}

// ClearInNum clears the value of the "in_num" field.
func (atu *AssetTransferUpdate) ClearInNum() *AssetTransferUpdate {
	atu.mutation.ClearInNum()
	return atu
}

// SetOutUserID sets the "out_user_id" field.
func (atu *AssetTransferUpdate) SetOutUserID(u uint64) *AssetTransferUpdate {
	atu.mutation.ResetOutUserID()
	atu.mutation.SetOutUserID(u)
	return atu
}

// SetNillableOutUserID sets the "out_user_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutUserID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutUserID(*u)
	}
	return atu
}

// AddOutUserID adds u to the "out_user_id" field.
func (atu *AssetTransferUpdate) AddOutUserID(u int64) *AssetTransferUpdate {
	atu.mutation.AddOutUserID(u)
	return atu
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (atu *AssetTransferUpdate) ClearOutUserID() *AssetTransferUpdate {
	atu.mutation.ClearOutUserID()
	return atu
}

// SetOutRoleType sets the "out_role_type" field.
func (atu *AssetTransferUpdate) SetOutRoleType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetOutRoleType()
	atu.mutation.SetOutRoleType(u)
	return atu
}

// SetNillableOutRoleType sets the "out_role_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutRoleType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutRoleType(*u)
	}
	return atu
}

// AddOutRoleType adds u to the "out_role_type" field.
func (atu *AssetTransferUpdate) AddOutRoleType(u int8) *AssetTransferUpdate {
	atu.mutation.AddOutRoleType(u)
	return atu
}

// ClearOutRoleType clears the value of the "out_role_type" field.
func (atu *AssetTransferUpdate) ClearOutRoleType() *AssetTransferUpdate {
	atu.mutation.ClearOutRoleType()
	return atu
}

// SetInUserID sets the "in_user_id" field.
func (atu *AssetTransferUpdate) SetInUserID(u uint64) *AssetTransferUpdate {
	atu.mutation.ResetInUserID()
	atu.mutation.SetInUserID(u)
	return atu
}

// SetNillableInUserID sets the "in_user_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInUserID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetInUserID(*u)
	}
	return atu
}

// AddInUserID adds u to the "in_user_id" field.
func (atu *AssetTransferUpdate) AddInUserID(u int64) *AssetTransferUpdate {
	atu.mutation.AddInUserID(u)
	return atu
}

// ClearInUserID clears the value of the "in_user_id" field.
func (atu *AssetTransferUpdate) ClearInUserID() *AssetTransferUpdate {
	atu.mutation.ClearInUserID()
	return atu
}

// SetInRoleType sets the "in_role_type" field.
func (atu *AssetTransferUpdate) SetInRoleType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetInRoleType()
	atu.mutation.SetInRoleType(u)
	return atu
}

// SetNillableInRoleType sets the "in_role_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInRoleType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetInRoleType(*u)
	}
	return atu
}

// AddInRoleType adds u to the "in_role_type" field.
func (atu *AssetTransferUpdate) AddInRoleType(u int8) *AssetTransferUpdate {
	atu.mutation.AddInRoleType(u)
	return atu
}

// ClearInRoleType clears the value of the "in_role_type" field.
func (atu *AssetTransferUpdate) ClearInRoleType() *AssetTransferUpdate {
	atu.mutation.ClearInRoleType()
	return atu
}

// SetOutTimeAt sets the "out_time_at" field.
func (atu *AssetTransferUpdate) SetOutTimeAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetOutTimeAt(t)
	return atu
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetOutTimeAt(*t)
	}
	return atu
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atu *AssetTransferUpdate) ClearOutTimeAt() *AssetTransferUpdate {
	atu.mutation.ClearOutTimeAt()
	return atu
}

// SetInTimeAt sets the "in_time_at" field.
func (atu *AssetTransferUpdate) SetInTimeAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetInTimeAt(t)
	return atu
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInTimeAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetInTimeAt(*t)
	}
	return atu
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atu *AssetTransferUpdate) ClearInTimeAt() *AssetTransferUpdate {
	atu.mutation.ClearInTimeAt()
	return atu
}

// SetTransferType sets the "transfer_type" field.
func (atu *AssetTransferUpdate) SetTransferType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetTransferType()
	atu.mutation.SetTransferType(u)
	return atu
}

// SetNillableTransferType sets the "transfer_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableTransferType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetTransferType(*u)
	}
	return atu
}

// AddTransferType adds u to the "transfer_type" field.
func (atu *AssetTransferUpdate) AddTransferType(u int8) *AssetTransferUpdate {
	atu.mutation.AddTransferType(u)
	return atu
}

// ClearTransferType clears the value of the "transfer_type" field.
func (atu *AssetTransferUpdate) ClearTransferType() *AssetTransferUpdate {
	atu.mutation.ClearTransferType()
	return atu
}

// SetReason sets the "reason" field.
func (atu *AssetTransferUpdate) SetReason(s string) *AssetTransferUpdate {
	atu.mutation.SetReason(s)
	return atu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableReason(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetReason(*s)
	}
	return atu
}

// ClearReason clears the value of the "reason" field.
func (atu *AssetTransferUpdate) ClearReason() *AssetTransferUpdate {
	atu.mutation.ClearReason()
	return atu
}

// AddDetailIDs adds the "details" edge to the AssetTransferDetails entity by IDs.
func (atu *AssetTransferUpdate) AddDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.AddDetailIDs(ids...)
	return atu
}

// AddDetails adds the "details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) AddDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddDetailIDs(ids...)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atu *AssetTransferUpdate) Mutation() *AssetTransferMutation {
	return atu.mutation
}

// ClearDetails clears all "details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) ClearDetails() *AssetTransferUpdate {
	atu.mutation.ClearDetails()
	return atu
}

// RemoveDetailIDs removes the "details" edge to AssetTransferDetails entities by IDs.
func (atu *AssetTransferUpdate) RemoveDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.RemoveDetailIDs(ids...)
	return atu
}

// RemoveDetails removes "details" edges to AssetTransferDetails entities.
func (atu *AssetTransferUpdate) RemoveDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AssetTransferUpdate) Save(ctx context.Context) (int, error) {
	if err := atu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AssetTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AssetTransferUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AssetTransferUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AssetTransferUpdate) defaults() error {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atu *AssetTransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdate {
	atu.modifiers = append(atu.modifiers, modifiers...)
	return atu
}

func (atu *AssetTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atu.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atu.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atu.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atu.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atu.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atu.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atu.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.FromLocationID(); ok {
		_spec.SetField(assettransfer.FieldFromLocationID, field.TypeUint64, value)
	}
	if value, ok := atu.mutation.AddedFromLocationID(); ok {
		_spec.AddField(assettransfer.FieldFromLocationID, field.TypeUint64, value)
	}
	if atu.mutation.FromLocationIDCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationID, field.TypeUint64)
	}
	if value, ok := atu.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atu.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.ToLocationID(); ok {
		_spec.SetField(assettransfer.FieldToLocationID, field.TypeUint64, value)
	}
	if value, ok := atu.mutation.AddedToLocationID(); ok {
		_spec.AddField(assettransfer.FieldToLocationID, field.TypeUint64, value)
	}
	if atu.mutation.ToLocationIDCleared() {
		_spec.ClearField(assettransfer.FieldToLocationID, field.TypeUint64)
	}
	if value, ok := atu.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atu.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atu.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atu.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atu.mutation.OutUserID(); ok {
		_spec.SetField(assettransfer.FieldOutUserID, field.TypeUint64, value)
	}
	if value, ok := atu.mutation.AddedOutUserID(); ok {
		_spec.AddField(assettransfer.FieldOutUserID, field.TypeUint64, value)
	}
	if atu.mutation.OutUserIDCleared() {
		_spec.ClearField(assettransfer.FieldOutUserID, field.TypeUint64)
	}
	if value, ok := atu.mutation.OutRoleType(); ok {
		_spec.SetField(assettransfer.FieldOutRoleType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedOutRoleType(); ok {
		_spec.AddField(assettransfer.FieldOutRoleType, field.TypeUint8, value)
	}
	if atu.mutation.OutRoleTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutRoleType, field.TypeUint8)
	}
	if value, ok := atu.mutation.InUserID(); ok {
		_spec.SetField(assettransfer.FieldInUserID, field.TypeUint64, value)
	}
	if value, ok := atu.mutation.AddedInUserID(); ok {
		_spec.AddField(assettransfer.FieldInUserID, field.TypeUint64, value)
	}
	if atu.mutation.InUserIDCleared() {
		_spec.ClearField(assettransfer.FieldInUserID, field.TypeUint64)
	}
	if value, ok := atu.mutation.InRoleType(); ok {
		_spec.SetField(assettransfer.FieldInRoleType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedInRoleType(); ok {
		_spec.AddField(assettransfer.FieldInRoleType, field.TypeUint8, value)
	}
	if atu.mutation.InRoleTypeCleared() {
		_spec.ClearField(assettransfer.FieldInRoleType, field.TypeUint8)
	}
	if value, ok := atu.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atu.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atu.mutation.InTimeAt(); ok {
		_spec.SetField(assettransfer.FieldInTimeAt, field.TypeTime, value)
	}
	if atu.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldInTimeAt, field.TypeTime)
	}
	if value, ok := atu.mutation.TransferType(); ok {
		_spec.SetField(assettransfer.FieldTransferType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedTransferType(); ok {
		_spec.AddField(assettransfer.FieldTransferType, field.TypeUint8, value)
	}
	if atu.mutation.TransferTypeCleared() {
		_spec.ClearField(assettransfer.FieldTransferType, field.TypeUint8)
	}
	if value, ok := atu.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atu.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if atu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !atu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AssetTransferUpdateOne is the builder for updating a single AssetTransfer entity.
type AssetTransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AssetTransferUpdateOne) SetUpdatedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) SetDeletedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) ClearDeletedAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetLastModifier sets the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) SetLastModifier(m *model.Modifier) *AssetTransferUpdateOne {
	atuo.mutation.SetLastModifier(m)
	return atuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) ClearLastModifier() *AssetTransferUpdateOne {
	atuo.mutation.ClearLastModifier()
	return atuo
}

// SetRemark sets the "remark" field.
func (atuo *AssetTransferUpdateOne) SetRemark(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetRemark(s)
	return atuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableRemark(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetRemark(*s)
	}
	return atuo
}

// ClearRemark clears the value of the "remark" field.
func (atuo *AssetTransferUpdateOne) ClearRemark() *AssetTransferUpdateOne {
	atuo.mutation.ClearRemark()
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *AssetTransferUpdateOne) SetStatus(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetStatus()
	atuo.mutation.SetStatus(u)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableStatus(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetStatus(*u)
	}
	return atuo
}

// AddStatus adds u to the "status" field.
func (atuo *AssetTransferUpdateOne) AddStatus(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddStatus(u)
	return atuo
}

// SetSn sets the "sn" field.
func (atuo *AssetTransferUpdateOne) SetSn(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetSn(s)
	return atuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableSn(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetSn(*s)
	}
	return atuo
}

// SetFromLocationType sets the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetFromLocationType()
	atuo.mutation.SetFromLocationType(u)
	return atuo
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationType(*u)
	}
	return atuo
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) AddFromLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddFromLocationType(u)
	return atuo
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationType()
	return atuo
}

// SetFromLocationID sets the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.ResetFromLocationID()
	atuo.mutation.SetFromLocationID(u)
	return atuo
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationID(*u)
	}
	return atuo
}

// AddFromLocationID adds u to the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) AddFromLocationID(u int64) *AssetTransferUpdateOne {
	atuo.mutation.AddFromLocationID(u)
	return atuo
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationID()
	return atuo
}

// SetToLocationType sets the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) SetToLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetToLocationType()
	atuo.mutation.SetToLocationType(u)
	return atuo
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationType(*u)
	}
	return atuo
}

// AddToLocationType adds u to the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) AddToLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddToLocationType(u)
	return atuo
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationType()
	return atuo
}

// SetToLocationID sets the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) SetToLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.ResetToLocationID()
	atuo.mutation.SetToLocationID(u)
	return atuo
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationID(*u)
	}
	return atuo
}

// AddToLocationID adds u to the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) AddToLocationID(u int64) *AssetTransferUpdateOne {
	atuo.mutation.AddToLocationID(u)
	return atuo
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationID()
	return atuo
}

// SetOutNum sets the "out_num" field.
func (atuo *AssetTransferUpdateOne) SetOutNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutNum()
	atuo.mutation.SetOutNum(u)
	return atuo
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutNum(*u)
	}
	return atuo
}

// AddOutNum adds u to the "out_num" field.
func (atuo *AssetTransferUpdateOne) AddOutNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddOutNum(u)
	return atuo
}

// ClearOutNum clears the value of the "out_num" field.
func (atuo *AssetTransferUpdateOne) ClearOutNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutNum()
	return atuo
}

// SetInNum sets the "in_num" field.
func (atuo *AssetTransferUpdateOne) SetInNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetInNum()
	atuo.mutation.SetInNum(u)
	return atuo
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInNum(*u)
	}
	return atuo
}

// AddInNum adds u to the "in_num" field.
func (atuo *AssetTransferUpdateOne) AddInNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddInNum(u)
	return atuo
}

// ClearInNum clears the value of the "in_num" field.
func (atuo *AssetTransferUpdateOne) ClearInNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearInNum()
	return atuo
}

// SetOutUserID sets the "out_user_id" field.
func (atuo *AssetTransferUpdateOne) SetOutUserID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutUserID()
	atuo.mutation.SetOutUserID(u)
	return atuo
}

// SetNillableOutUserID sets the "out_user_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutUserID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutUserID(*u)
	}
	return atuo
}

// AddOutUserID adds u to the "out_user_id" field.
func (atuo *AssetTransferUpdateOne) AddOutUserID(u int64) *AssetTransferUpdateOne {
	atuo.mutation.AddOutUserID(u)
	return atuo
}

// ClearOutUserID clears the value of the "out_user_id" field.
func (atuo *AssetTransferUpdateOne) ClearOutUserID() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutUserID()
	return atuo
}

// SetOutRoleType sets the "out_role_type" field.
func (atuo *AssetTransferUpdateOne) SetOutRoleType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutRoleType()
	atuo.mutation.SetOutRoleType(u)
	return atuo
}

// SetNillableOutRoleType sets the "out_role_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutRoleType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutRoleType(*u)
	}
	return atuo
}

// AddOutRoleType adds u to the "out_role_type" field.
func (atuo *AssetTransferUpdateOne) AddOutRoleType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddOutRoleType(u)
	return atuo
}

// ClearOutRoleType clears the value of the "out_role_type" field.
func (atuo *AssetTransferUpdateOne) ClearOutRoleType() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutRoleType()
	return atuo
}

// SetInUserID sets the "in_user_id" field.
func (atuo *AssetTransferUpdateOne) SetInUserID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.ResetInUserID()
	atuo.mutation.SetInUserID(u)
	return atuo
}

// SetNillableInUserID sets the "in_user_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInUserID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInUserID(*u)
	}
	return atuo
}

// AddInUserID adds u to the "in_user_id" field.
func (atuo *AssetTransferUpdateOne) AddInUserID(u int64) *AssetTransferUpdateOne {
	atuo.mutation.AddInUserID(u)
	return atuo
}

// ClearInUserID clears the value of the "in_user_id" field.
func (atuo *AssetTransferUpdateOne) ClearInUserID() *AssetTransferUpdateOne {
	atuo.mutation.ClearInUserID()
	return atuo
}

// SetInRoleType sets the "in_role_type" field.
func (atuo *AssetTransferUpdateOne) SetInRoleType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetInRoleType()
	atuo.mutation.SetInRoleType(u)
	return atuo
}

// SetNillableInRoleType sets the "in_role_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInRoleType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInRoleType(*u)
	}
	return atuo
}

// AddInRoleType adds u to the "in_role_type" field.
func (atuo *AssetTransferUpdateOne) AddInRoleType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddInRoleType(u)
	return atuo
}

// ClearInRoleType clears the value of the "in_role_type" field.
func (atuo *AssetTransferUpdateOne) ClearInRoleType() *AssetTransferUpdateOne {
	atuo.mutation.ClearInRoleType()
	return atuo
}

// SetOutTimeAt sets the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) SetOutTimeAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetOutTimeAt(t)
	return atuo
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetOutTimeAt(*t)
	}
	return atuo
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) ClearOutTimeAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutTimeAt()
	return atuo
}

// SetInTimeAt sets the "in_time_at" field.
func (atuo *AssetTransferUpdateOne) SetInTimeAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetInTimeAt(t)
	return atuo
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInTimeAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetInTimeAt(*t)
	}
	return atuo
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atuo *AssetTransferUpdateOne) ClearInTimeAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearInTimeAt()
	return atuo
}

// SetTransferType sets the "transfer_type" field.
func (atuo *AssetTransferUpdateOne) SetTransferType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetTransferType()
	atuo.mutation.SetTransferType(u)
	return atuo
}

// SetNillableTransferType sets the "transfer_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableTransferType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetTransferType(*u)
	}
	return atuo
}

// AddTransferType adds u to the "transfer_type" field.
func (atuo *AssetTransferUpdateOne) AddTransferType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddTransferType(u)
	return atuo
}

// ClearTransferType clears the value of the "transfer_type" field.
func (atuo *AssetTransferUpdateOne) ClearTransferType() *AssetTransferUpdateOne {
	atuo.mutation.ClearTransferType()
	return atuo
}

// SetReason sets the "reason" field.
func (atuo *AssetTransferUpdateOne) SetReason(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetReason(s)
	return atuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableReason(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetReason(*s)
	}
	return atuo
}

// ClearReason clears the value of the "reason" field.
func (atuo *AssetTransferUpdateOne) ClearReason() *AssetTransferUpdateOne {
	atuo.mutation.ClearReason()
	return atuo
}

// AddDetailIDs adds the "details" edge to the AssetTransferDetails entity by IDs.
func (atuo *AssetTransferUpdateOne) AddDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.AddDetailIDs(ids...)
	return atuo
}

// AddDetails adds the "details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) AddDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddDetailIDs(ids...)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atuo *AssetTransferUpdateOne) Mutation() *AssetTransferMutation {
	return atuo.mutation
}

// ClearDetails clears all "details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) ClearDetails() *AssetTransferUpdateOne {
	atuo.mutation.ClearDetails()
	return atuo
}

// RemoveDetailIDs removes the "details" edge to AssetTransferDetails entities by IDs.
func (atuo *AssetTransferUpdateOne) RemoveDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.RemoveDetailIDs(ids...)
	return atuo
}

// RemoveDetails removes "details" edges to AssetTransferDetails entities.
func (atuo *AssetTransferUpdateOne) RemoveDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveDetailIDs(ids...)
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atuo *AssetTransferUpdateOne) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AssetTransferUpdateOne) Select(field string, fields ...string) *AssetTransferUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AssetTransfer entity.
func (atuo *AssetTransferUpdateOne) Save(ctx context.Context) (*AssetTransfer, error) {
	if err := atuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) SaveX(ctx context.Context) *AssetTransfer {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AssetTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AssetTransferUpdateOne) defaults() error {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atuo *AssetTransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdateOne {
	atuo.modifiers = append(atuo.modifiers, modifiers...)
	return atuo
}

func (atuo *AssetTransferUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransfer.FieldID)
		for _, f := range fields {
			if !assettransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atuo.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atuo.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atuo.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atuo.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atuo.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atuo.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.FromLocationID(); ok {
		_spec.SetField(assettransfer.FieldFromLocationID, field.TypeUint64, value)
	}
	if value, ok := atuo.mutation.AddedFromLocationID(); ok {
		_spec.AddField(assettransfer.FieldFromLocationID, field.TypeUint64, value)
	}
	if atuo.mutation.FromLocationIDCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationID, field.TypeUint64)
	}
	if value, ok := atuo.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.ToLocationID(); ok {
		_spec.SetField(assettransfer.FieldToLocationID, field.TypeUint64, value)
	}
	if value, ok := atuo.mutation.AddedToLocationID(); ok {
		_spec.AddField(assettransfer.FieldToLocationID, field.TypeUint64, value)
	}
	if atuo.mutation.ToLocationIDCleared() {
		_spec.ClearField(assettransfer.FieldToLocationID, field.TypeUint64)
	}
	if value, ok := atuo.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atuo.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atuo.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.OutUserID(); ok {
		_spec.SetField(assettransfer.FieldOutUserID, field.TypeUint64, value)
	}
	if value, ok := atuo.mutation.AddedOutUserID(); ok {
		_spec.AddField(assettransfer.FieldOutUserID, field.TypeUint64, value)
	}
	if atuo.mutation.OutUserIDCleared() {
		_spec.ClearField(assettransfer.FieldOutUserID, field.TypeUint64)
	}
	if value, ok := atuo.mutation.OutRoleType(); ok {
		_spec.SetField(assettransfer.FieldOutRoleType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedOutRoleType(); ok {
		_spec.AddField(assettransfer.FieldOutRoleType, field.TypeUint8, value)
	}
	if atuo.mutation.OutRoleTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutRoleType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.InUserID(); ok {
		_spec.SetField(assettransfer.FieldInUserID, field.TypeUint64, value)
	}
	if value, ok := atuo.mutation.AddedInUserID(); ok {
		_spec.AddField(assettransfer.FieldInUserID, field.TypeUint64, value)
	}
	if atuo.mutation.InUserIDCleared() {
		_spec.ClearField(assettransfer.FieldInUserID, field.TypeUint64)
	}
	if value, ok := atuo.mutation.InRoleType(); ok {
		_spec.SetField(assettransfer.FieldInRoleType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedInRoleType(); ok {
		_spec.AddField(assettransfer.FieldInRoleType, field.TypeUint8, value)
	}
	if atuo.mutation.InRoleTypeCleared() {
		_spec.ClearField(assettransfer.FieldInRoleType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atuo.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.InTimeAt(); ok {
		_spec.SetField(assettransfer.FieldInTimeAt, field.TypeTime, value)
	}
	if atuo.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldInTimeAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.TransferType(); ok {
		_spec.SetField(assettransfer.FieldTransferType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedTransferType(); ok {
		_spec.AddField(assettransfer.FieldTransferType, field.TypeUint8, value)
	}
	if atuo.mutation.TransferTypeCleared() {
		_spec.ClearField(assettransfer.FieldTransferType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atuo.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if atuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !atuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atuo.modifiers...)
	_node = &AssetTransfer{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
