// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetTransferUpdate is the builder for updating AssetTransfer entities.
type AssetTransferUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atu *AssetTransferUpdate) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AssetTransferUpdate) SetUpdatedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *AssetTransferUpdate) SetDeletedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *AssetTransferUpdate) ClearDeletedAt() *AssetTransferUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetLastModifier sets the "last_modifier" field.
func (atu *AssetTransferUpdate) SetLastModifier(m *model.Modifier) *AssetTransferUpdate {
	atu.mutation.SetLastModifier(m)
	return atu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atu *AssetTransferUpdate) ClearLastModifier() *AssetTransferUpdate {
	atu.mutation.ClearLastModifier()
	return atu
}

// SetRemark sets the "remark" field.
func (atu *AssetTransferUpdate) SetRemark(s string) *AssetTransferUpdate {
	atu.mutation.SetRemark(s)
	return atu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableRemark(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetRemark(*s)
	}
	return atu
}

// ClearRemark clears the value of the "remark" field.
func (atu *AssetTransferUpdate) ClearRemark() *AssetTransferUpdate {
	atu.mutation.ClearRemark()
	return atu
}

// SetStatus sets the "status" field.
func (atu *AssetTransferUpdate) SetStatus(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetStatus()
	atu.mutation.SetStatus(u)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableStatus(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetStatus(*u)
	}
	return atu
}

// AddStatus adds u to the "status" field.
func (atu *AssetTransferUpdate) AddStatus(u int8) *AssetTransferUpdate {
	atu.mutation.AddStatus(u)
	return atu
}

// SetSn sets the "sn" field.
func (atu *AssetTransferUpdate) SetSn(s string) *AssetTransferUpdate {
	atu.mutation.SetSn(s)
	return atu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableSn(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetSn(*s)
	}
	return atu
}

// SetFromLocationType sets the "from_location_type" field.
func (atu *AssetTransferUpdate) SetFromLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetFromLocationType()
	atu.mutation.SetFromLocationType(u)
	return atu
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationType(*u)
	}
	return atu
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atu *AssetTransferUpdate) AddFromLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddFromLocationType(u)
	return atu
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atu *AssetTransferUpdate) ClearFromLocationType() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationType()
	return atu
}

// SetFromLocationID sets the "from_location_id" field.
func (atu *AssetTransferUpdate) SetFromLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationID(u)
	return atu
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationID(*u)
	}
	return atu
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atu *AssetTransferUpdate) ClearFromLocationID() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationID()
	return atu
}

// SetToLocationType sets the "to_location_type" field.
func (atu *AssetTransferUpdate) SetToLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetToLocationType()
	atu.mutation.SetToLocationType(u)
	return atu
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationType(*u)
	}
	return atu
}

// AddToLocationType adds u to the "to_location_type" field.
func (atu *AssetTransferUpdate) AddToLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddToLocationType(u)
	return atu
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atu *AssetTransferUpdate) ClearToLocationType() *AssetTransferUpdate {
	atu.mutation.ClearToLocationType()
	return atu
}

// SetToLocationID sets the "to_location_id" field.
func (atu *AssetTransferUpdate) SetToLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationID(u)
	return atu
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationID(*u)
	}
	return atu
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atu *AssetTransferUpdate) ClearToLocationID() *AssetTransferUpdate {
	atu.mutation.ClearToLocationID()
	return atu
}

// SetOutNum sets the "out_num" field.
func (atu *AssetTransferUpdate) SetOutNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetOutNum()
	atu.mutation.SetOutNum(u)
	return atu
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutNum(*u)
	}
	return atu
}

// AddOutNum adds u to the "out_num" field.
func (atu *AssetTransferUpdate) AddOutNum(u int) *AssetTransferUpdate {
	atu.mutation.AddOutNum(u)
	return atu
}

// ClearOutNum clears the value of the "out_num" field.
func (atu *AssetTransferUpdate) ClearOutNum() *AssetTransferUpdate {
	atu.mutation.ClearOutNum()
	return atu
}

// SetInNum sets the "in_num" field.
func (atu *AssetTransferUpdate) SetInNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetInNum()
	atu.mutation.SetInNum(u)
	return atu
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetInNum(*u)
	}
	return atu
}

// AddInNum adds u to the "in_num" field.
func (atu *AssetTransferUpdate) AddInNum(u int) *AssetTransferUpdate {
	atu.mutation.AddInNum(u)
	return atu
}

// ClearInNum clears the value of the "in_num" field.
func (atu *AssetTransferUpdate) ClearInNum() *AssetTransferUpdate {
	atu.mutation.ClearInNum()
	return atu
}

// SetOutOperateID sets the "out_operate_id" field.
func (atu *AssetTransferUpdate) SetOutOperateID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateID(u)
	return atu
}

// SetNillableOutOperateID sets the "out_operate_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutOperateID(*u)
	}
	return atu
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (atu *AssetTransferUpdate) ClearOutOperateID() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateID()
	return atu
}

// SetOutOperateType sets the "out_operate_type" field.
func (atu *AssetTransferUpdate) SetOutOperateType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetOutOperateType()
	atu.mutation.SetOutOperateType(u)
	return atu
}

// SetNillableOutOperateType sets the "out_operate_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutOperateType(*u)
	}
	return atu
}

// AddOutOperateType adds u to the "out_operate_type" field.
func (atu *AssetTransferUpdate) AddOutOperateType(u int8) *AssetTransferUpdate {
	atu.mutation.AddOutOperateType(u)
	return atu
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (atu *AssetTransferUpdate) ClearOutOperateType() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateType()
	return atu
}

// SetInOperateID sets the "in_operate_id" field.
func (atu *AssetTransferUpdate) SetInOperateID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateID(u)
	return atu
}

// SetNillableInOperateID sets the "in_operate_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetInOperateID(*u)
	}
	return atu
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (atu *AssetTransferUpdate) ClearInOperateID() *AssetTransferUpdate {
	atu.mutation.ClearInOperateID()
	return atu
}

// SetInOperateType sets the "in_operate_type" field.
func (atu *AssetTransferUpdate) SetInOperateType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetInOperateType()
	atu.mutation.SetInOperateType(u)
	return atu
}

// SetNillableInOperateType sets the "in_operate_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetInOperateType(*u)
	}
	return atu
}

// AddInOperateType adds u to the "in_operate_type" field.
func (atu *AssetTransferUpdate) AddInOperateType(u int8) *AssetTransferUpdate {
	atu.mutation.AddInOperateType(u)
	return atu
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (atu *AssetTransferUpdate) ClearInOperateType() *AssetTransferUpdate {
	atu.mutation.ClearInOperateType()
	return atu
}

// SetOutTimeAt sets the "out_time_at" field.
func (atu *AssetTransferUpdate) SetOutTimeAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetOutTimeAt(t)
	return atu
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetOutTimeAt(*t)
	}
	return atu
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atu *AssetTransferUpdate) ClearOutTimeAt() *AssetTransferUpdate {
	atu.mutation.ClearOutTimeAt()
	return atu
}

// SetInTimeAt sets the "in_time_at" field.
func (atu *AssetTransferUpdate) SetInTimeAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetInTimeAt(t)
	return atu
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInTimeAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetInTimeAt(*t)
	}
	return atu
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atu *AssetTransferUpdate) ClearInTimeAt() *AssetTransferUpdate {
	atu.mutation.ClearInTimeAt()
	return atu
}

// SetReason sets the "reason" field.
func (atu *AssetTransferUpdate) SetReason(s string) *AssetTransferUpdate {
	atu.mutation.SetReason(s)
	return atu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableReason(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetReason(*s)
	}
	return atu
}

// ClearReason clears the value of the "reason" field.
func (atu *AssetTransferUpdate) ClearReason() *AssetTransferUpdate {
	atu.mutation.ClearReason()
	return atu
}

// AddDetailIDs adds the "details" edge to the AssetTransferDetails entity by IDs.
func (atu *AssetTransferUpdate) AddDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.AddDetailIDs(ids...)
	return atu
}

// AddDetails adds the "details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) AddDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddDetailIDs(ids...)
}

// SetLocationStoreID sets the "location_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetLocationStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationStoreID(id)
	return atu
}

// SetNillableLocationStoreID sets the "location_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationStoreID(*id)
	}
	return atu
}

// SetLocationStore sets the "location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetLocationStore(s *Store) *AssetTransferUpdate {
	return atu.SetLocationStoreID(s.ID)
}

// SetLocationCabinetID sets the "location_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetLocationCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationCabinetID(id)
	return atu
}

// SetNillableLocationCabinetID sets the "location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationCabinetID(*id)
	}
	return atu
}

// SetLocationCabinet sets the "location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetLocationCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetLocationCabinetID(c.ID)
}

// SetLocationStationID sets the "location_station" edge to the EnterpriseStation entity by ID.
func (atu *AssetTransferUpdate) SetLocationStationID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationStationID(id)
	return atu
}

// SetNillableLocationStationID sets the "location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationStationID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationStationID(*id)
	}
	return atu
}

// SetLocationStation sets the "location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) SetLocationStation(e *EnterpriseStation) *AssetTransferUpdate {
	return atu.SetLocationStationID(e.ID)
}

// SetLocationRiderID sets the "location_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetLocationRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationRiderID(id)
	return atu
}

// SetNillableLocationRiderID sets the "location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationRiderID(*id)
	}
	return atu
}

// SetLocationRider sets the "location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetLocationRider(r *Rider) *AssetTransferUpdate {
	return atu.SetLocationRiderID(r.ID)
}

// SetLocationOperatorID sets the "location_operator" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetLocationOperatorID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationOperatorID(id)
	return atu
}

// SetNillableLocationOperatorID sets the "location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationOperatorID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationOperatorID(*id)
	}
	return atu
}

// SetLocationOperator sets the "location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetLocationOperator(m *Maintainer) *AssetTransferUpdate {
	return atu.SetLocationOperatorID(m.ID)
}

// SetLocationWarehouseID sets the "location_warehouse" edge to the Warehouse entity by ID.
func (atu *AssetTransferUpdate) SetLocationWarehouseID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetLocationWarehouseID(id)
	return atu
}

// SetNillableLocationWarehouseID sets the "location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableLocationWarehouseID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetLocationWarehouseID(*id)
	}
	return atu
}

// SetLocationWarehouse sets the "location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) SetLocationWarehouse(w *Warehouse) *AssetTransferUpdate {
	return atu.SetLocationWarehouseID(w.ID)
}

// SetToStoreID sets the "to_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetToStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToStoreID(id)
	return atu
}

// SetNillableToStoreID sets the "to_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToStoreID(*id)
	}
	return atu
}

// SetToStore sets the "to_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetToStore(s *Store) *AssetTransferUpdate {
	return atu.SetToStoreID(s.ID)
}

// SetToCabinetID sets the "to_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetToCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToCabinetID(id)
	return atu
}

// SetNillableToCabinetID sets the "to_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToCabinetID(*id)
	}
	return atu
}

// SetToCabinet sets the "to_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetToCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetToCabinetID(c.ID)
}

// SetToStationID sets the "to_station" edge to the EnterpriseStation entity by ID.
func (atu *AssetTransferUpdate) SetToStationID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToStationID(id)
	return atu
}

// SetNillableToStationID sets the "to_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToStationID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToStationID(*id)
	}
	return atu
}

// SetToStation sets the "to_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) SetToStation(e *EnterpriseStation) *AssetTransferUpdate {
	return atu.SetToStationID(e.ID)
}

// SetToRiderID sets the "to_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetToRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToRiderID(id)
	return atu
}

// SetNillableToRiderID sets the "to_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToRiderID(*id)
	}
	return atu
}

// SetToRider sets the "to_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetToRider(r *Rider) *AssetTransferUpdate {
	return atu.SetToRiderID(r.ID)
}

// SetToOperatorID sets the "to_operator" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetToOperatorID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToOperatorID(id)
	return atu
}

// SetNillableToOperatorID sets the "to_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToOperatorID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToOperatorID(*id)
	}
	return atu
}

// SetToOperator sets the "to_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetToOperator(m *Maintainer) *AssetTransferUpdate {
	return atu.SetToOperatorID(m.ID)
}

// SetToWarehouseID sets the "to_warehouse" edge to the Warehouse entity by ID.
func (atu *AssetTransferUpdate) SetToWarehouseID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToWarehouseID(id)
	return atu
}

// SetNillableToWarehouseID sets the "to_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToWarehouseID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToWarehouseID(*id)
	}
	return atu
}

// SetToWarehouse sets the "to_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) SetToWarehouse(w *Warehouse) *AssetTransferUpdate {
	return atu.SetToWarehouseID(w.ID)
}

// SetOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateManagerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateManagerID(id)
	return atu
}

// SetNillableOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateManagerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateManagerID(*id)
	}
	return atu
}

// SetOutOperateManager sets the "out_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) SetOutOperateManager(m *Manager) *AssetTransferUpdate {
	return atu.SetOutOperateManagerID(m.ID)
}

// SetOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateStoreID(id)
	return atu
}

// SetNillableOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateStoreID(*id)
	}
	return atu
}

// SetOutOperateStore sets the "out_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetOutOperateStore(s *Store) *AssetTransferUpdate {
	return atu.SetOutOperateStoreID(s.ID)
}

// SetOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateAgentID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateAgentID(id)
	return atu
}

// SetNillableOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateAgentID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateAgentID(*id)
	}
	return atu
}

// SetOutOperateAgent sets the "out_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) SetOutOperateAgent(a *Agent) *AssetTransferUpdate {
	return atu.SetOutOperateAgentID(a.ID)
}

// SetOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateMaintainerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateMaintainerID(id)
	return atu
}

// SetNillableOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateMaintainerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateMaintainerID(*id)
	}
	return atu
}

// SetOutOperateMaintainer sets the "out_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetOutOperateMaintainer(m *Maintainer) *AssetTransferUpdate {
	return atu.SetOutOperateMaintainerID(m.ID)
}

// SetOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateCabinetID(id)
	return atu
}

// SetNillableOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateCabinetID(*id)
	}
	return atu
}

// SetOutOperateCabinet sets the "out_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetOutOperateCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetOutOperateCabinetID(c.ID)
}

// SetOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateRiderID(id)
	return atu
}

// SetNillableOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateRiderID(*id)
	}
	return atu
}

// SetOutOperateRider sets the "out_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetOutOperateRider(r *Rider) *AssetTransferUpdate {
	return atu.SetOutOperateRiderID(r.ID)
}

// SetInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID.
func (atu *AssetTransferUpdate) SetInOperateManagerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateManagerID(id)
	return atu
}

// SetNillableInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateManagerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateManagerID(*id)
	}
	return atu
}

// SetInOperateManager sets the "in_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) SetInOperateManager(m *Manager) *AssetTransferUpdate {
	return atu.SetInOperateManagerID(m.ID)
}

// SetInOperateStoreID sets the "in_operate_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetInOperateStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateStoreID(id)
	return atu
}

// SetNillableInOperateStoreID sets the "in_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateStoreID(*id)
	}
	return atu
}

// SetInOperateStore sets the "in_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetInOperateStore(s *Store) *AssetTransferUpdate {
	return atu.SetInOperateStoreID(s.ID)
}

// SetInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID.
func (atu *AssetTransferUpdate) SetInOperateAgentID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateAgentID(id)
	return atu
}

// SetNillableInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateAgentID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateAgentID(*id)
	}
	return atu
}

// SetInOperateAgent sets the "in_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) SetInOperateAgent(a *Agent) *AssetTransferUpdate {
	return atu.SetInOperateAgentID(a.ID)
}

// SetInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetInOperateMaintainerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateMaintainerID(id)
	return atu
}

// SetNillableInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateMaintainerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateMaintainerID(*id)
	}
	return atu
}

// SetInOperateMaintainer sets the "in_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetInOperateMaintainer(m *Maintainer) *AssetTransferUpdate {
	return atu.SetInOperateMaintainerID(m.ID)
}

// SetInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetInOperateCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateCabinetID(id)
	return atu
}

// SetNillableInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateCabinetID(*id)
	}
	return atu
}

// SetInOperateCabinet sets the "in_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetInOperateCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetInOperateCabinetID(c.ID)
}

// SetInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetInOperateRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetInOperateRiderID(id)
	return atu
}

// SetNillableInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInOperateRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetInOperateRiderID(*id)
	}
	return atu
}

// SetInOperateRider sets the "in_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetInOperateRider(r *Rider) *AssetTransferUpdate {
	return atu.SetInOperateRiderID(r.ID)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atu *AssetTransferUpdate) Mutation() *AssetTransferMutation {
	return atu.mutation
}

// ClearDetails clears all "details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) ClearDetails() *AssetTransferUpdate {
	atu.mutation.ClearDetails()
	return atu
}

// RemoveDetailIDs removes the "details" edge to AssetTransferDetails entities by IDs.
func (atu *AssetTransferUpdate) RemoveDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.RemoveDetailIDs(ids...)
	return atu
}

// RemoveDetails removes "details" edges to AssetTransferDetails entities.
func (atu *AssetTransferUpdate) RemoveDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveDetailIDs(ids...)
}

// ClearLocationStore clears the "location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearLocationStore() *AssetTransferUpdate {
	atu.mutation.ClearLocationStore()
	return atu
}

// ClearLocationCabinet clears the "location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearLocationCabinet() *AssetTransferUpdate {
	atu.mutation.ClearLocationCabinet()
	return atu
}

// ClearLocationStation clears the "location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) ClearLocationStation() *AssetTransferUpdate {
	atu.mutation.ClearLocationStation()
	return atu
}

// ClearLocationRider clears the "location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearLocationRider() *AssetTransferUpdate {
	atu.mutation.ClearLocationRider()
	return atu
}

// ClearLocationOperator clears the "location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearLocationOperator() *AssetTransferUpdate {
	atu.mutation.ClearLocationOperator()
	return atu
}

// ClearLocationWarehouse clears the "location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) ClearLocationWarehouse() *AssetTransferUpdate {
	atu.mutation.ClearLocationWarehouse()
	return atu
}

// ClearToStore clears the "to_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearToStore() *AssetTransferUpdate {
	atu.mutation.ClearToStore()
	return atu
}

// ClearToCabinet clears the "to_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearToCabinet() *AssetTransferUpdate {
	atu.mutation.ClearToCabinet()
	return atu
}

// ClearToStation clears the "to_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) ClearToStation() *AssetTransferUpdate {
	atu.mutation.ClearToStation()
	return atu
}

// ClearToRider clears the "to_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearToRider() *AssetTransferUpdate {
	atu.mutation.ClearToRider()
	return atu
}

// ClearToOperator clears the "to_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearToOperator() *AssetTransferUpdate {
	atu.mutation.ClearToOperator()
	return atu
}

// ClearToWarehouse clears the "to_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) ClearToWarehouse() *AssetTransferUpdate {
	atu.mutation.ClearToWarehouse()
	return atu
}

// ClearOutOperateManager clears the "out_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) ClearOutOperateManager() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateManager()
	return atu
}

// ClearOutOperateStore clears the "out_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearOutOperateStore() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateStore()
	return atu
}

// ClearOutOperateAgent clears the "out_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) ClearOutOperateAgent() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateAgent()
	return atu
}

// ClearOutOperateMaintainer clears the "out_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearOutOperateMaintainer() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateMaintainer()
	return atu
}

// ClearOutOperateCabinet clears the "out_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearOutOperateCabinet() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateCabinet()
	return atu
}

// ClearOutOperateRider clears the "out_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearOutOperateRider() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateRider()
	return atu
}

// ClearInOperateManager clears the "in_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) ClearInOperateManager() *AssetTransferUpdate {
	atu.mutation.ClearInOperateManager()
	return atu
}

// ClearInOperateStore clears the "in_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearInOperateStore() *AssetTransferUpdate {
	atu.mutation.ClearInOperateStore()
	return atu
}

// ClearInOperateAgent clears the "in_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) ClearInOperateAgent() *AssetTransferUpdate {
	atu.mutation.ClearInOperateAgent()
	return atu
}

// ClearInOperateMaintainer clears the "in_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearInOperateMaintainer() *AssetTransferUpdate {
	atu.mutation.ClearInOperateMaintainer()
	return atu
}

// ClearInOperateCabinet clears the "in_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearInOperateCabinet() *AssetTransferUpdate {
	atu.mutation.ClearInOperateCabinet()
	return atu
}

// ClearInOperateRider clears the "in_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearInOperateRider() *AssetTransferUpdate {
	atu.mutation.ClearInOperateRider()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AssetTransferUpdate) Save(ctx context.Context) (int, error) {
	if err := atu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AssetTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AssetTransferUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AssetTransferUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AssetTransferUpdate) defaults() error {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atu *AssetTransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdate {
	atu.modifiers = append(atu.modifiers, modifiers...)
	return atu
}

func (atu *AssetTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atu.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atu.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atu.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atu.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atu.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atu.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atu.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atu.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atu.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atu.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atu.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atu.mutation.OutOperateType(); ok {
		_spec.SetField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedOutOperateType(); ok {
		_spec.AddField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if atu.mutation.OutOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutOperateType, field.TypeUint8)
	}
	if value, ok := atu.mutation.InOperateType(); ok {
		_spec.SetField(assettransfer.FieldInOperateType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedInOperateType(); ok {
		_spec.AddField(assettransfer.FieldInOperateType, field.TypeUint8, value)
	}
	if atu.mutation.InOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldInOperateType, field.TypeUint8)
	}
	if value, ok := atu.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atu.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atu.mutation.InTimeAt(); ok {
		_spec.SetField(assettransfer.FieldInTimeAt, field.TypeTime, value)
	}
	if atu.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldInTimeAt, field.TypeTime)
	}
	if value, ok := atu.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atu.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if atu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !atu.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStoreTable,
			Columns: []string{assettransfer.LocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStoreTable,
			Columns: []string{assettransfer.LocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationCabinetTable,
			Columns: []string{assettransfer.LocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationCabinetTable,
			Columns: []string{assettransfer.LocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStationTable,
			Columns: []string{assettransfer.LocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStationTable,
			Columns: []string{assettransfer.LocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationRiderTable,
			Columns: []string{assettransfer.LocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationRiderTable,
			Columns: []string{assettransfer.LocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationOperatorTable,
			Columns: []string{assettransfer.LocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationOperatorTable,
			Columns: []string{assettransfer.LocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.LocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationWarehouseTable,
			Columns: []string{assettransfer.LocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.LocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationWarehouseTable,
			Columns: []string{assettransfer.LocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStoreTable,
			Columns: []string{assettransfer.ToStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStoreTable,
			Columns: []string{assettransfer.ToStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToCabinetTable,
			Columns: []string{assettransfer.ToCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToCabinetTable,
			Columns: []string{assettransfer.ToCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStationTable,
			Columns: []string{assettransfer.ToStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStationTable,
			Columns: []string{assettransfer.ToStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToRiderTable,
			Columns: []string{assettransfer.ToRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToRiderTable,
			Columns: []string{assettransfer.ToRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToOperatorTable,
			Columns: []string{assettransfer.ToOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToOperatorTable,
			Columns: []string{assettransfer.ToOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToWarehouseTable,
			Columns: []string{assettransfer.ToWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToWarehouseTable,
			Columns: []string{assettransfer.ToWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateManagerTable,
			Columns: []string{assettransfer.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateManagerTable,
			Columns: []string{assettransfer.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateStoreTable,
			Columns: []string{assettransfer.InOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateStoreTable,
			Columns: []string{assettransfer.InOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateAgentTable,
			Columns: []string{assettransfer.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateAgentTable,
			Columns: []string{assettransfer.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateMaintainerTable,
			Columns: []string{assettransfer.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateMaintainerTable,
			Columns: []string{assettransfer.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateCabinetTable,
			Columns: []string{assettransfer.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateCabinetTable,
			Columns: []string{assettransfer.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.InOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateRiderTable,
			Columns: []string{assettransfer.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.InOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateRiderTable,
			Columns: []string{assettransfer.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AssetTransferUpdateOne is the builder for updating a single AssetTransfer entity.
type AssetTransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AssetTransferUpdateOne) SetUpdatedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) SetDeletedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) ClearDeletedAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetLastModifier sets the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) SetLastModifier(m *model.Modifier) *AssetTransferUpdateOne {
	atuo.mutation.SetLastModifier(m)
	return atuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) ClearLastModifier() *AssetTransferUpdateOne {
	atuo.mutation.ClearLastModifier()
	return atuo
}

// SetRemark sets the "remark" field.
func (atuo *AssetTransferUpdateOne) SetRemark(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetRemark(s)
	return atuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableRemark(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetRemark(*s)
	}
	return atuo
}

// ClearRemark clears the value of the "remark" field.
func (atuo *AssetTransferUpdateOne) ClearRemark() *AssetTransferUpdateOne {
	atuo.mutation.ClearRemark()
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *AssetTransferUpdateOne) SetStatus(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetStatus()
	atuo.mutation.SetStatus(u)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableStatus(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetStatus(*u)
	}
	return atuo
}

// AddStatus adds u to the "status" field.
func (atuo *AssetTransferUpdateOne) AddStatus(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddStatus(u)
	return atuo
}

// SetSn sets the "sn" field.
func (atuo *AssetTransferUpdateOne) SetSn(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetSn(s)
	return atuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableSn(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetSn(*s)
	}
	return atuo
}

// SetFromLocationType sets the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetFromLocationType()
	atuo.mutation.SetFromLocationType(u)
	return atuo
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationType(*u)
	}
	return atuo
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) AddFromLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddFromLocationType(u)
	return atuo
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationType()
	return atuo
}

// SetFromLocationID sets the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationID(u)
	return atuo
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationID(*u)
	}
	return atuo
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationID()
	return atuo
}

// SetToLocationType sets the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) SetToLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetToLocationType()
	atuo.mutation.SetToLocationType(u)
	return atuo
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationType(*u)
	}
	return atuo
}

// AddToLocationType adds u to the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) AddToLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddToLocationType(u)
	return atuo
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationType()
	return atuo
}

// SetToLocationID sets the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) SetToLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationID(u)
	return atuo
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationID(*u)
	}
	return atuo
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationID()
	return atuo
}

// SetOutNum sets the "out_num" field.
func (atuo *AssetTransferUpdateOne) SetOutNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutNum()
	atuo.mutation.SetOutNum(u)
	return atuo
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutNum(*u)
	}
	return atuo
}

// AddOutNum adds u to the "out_num" field.
func (atuo *AssetTransferUpdateOne) AddOutNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddOutNum(u)
	return atuo
}

// ClearOutNum clears the value of the "out_num" field.
func (atuo *AssetTransferUpdateOne) ClearOutNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutNum()
	return atuo
}

// SetInNum sets the "in_num" field.
func (atuo *AssetTransferUpdateOne) SetInNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetInNum()
	atuo.mutation.SetInNum(u)
	return atuo
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInNum(*u)
	}
	return atuo
}

// AddInNum adds u to the "in_num" field.
func (atuo *AssetTransferUpdateOne) AddInNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddInNum(u)
	return atuo
}

// ClearInNum clears the value of the "in_num" field.
func (atuo *AssetTransferUpdateOne) ClearInNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearInNum()
	return atuo
}

// SetOutOperateID sets the "out_operate_id" field.
func (atuo *AssetTransferUpdateOne) SetOutOperateID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateID(u)
	return atuo
}

// SetNillableOutOperateID sets the "out_operate_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutOperateID(*u)
	}
	return atuo
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (atuo *AssetTransferUpdateOne) ClearOutOperateID() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateID()
	return atuo
}

// SetOutOperateType sets the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) SetOutOperateType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutOperateType()
	atuo.mutation.SetOutOperateType(u)
	return atuo
}

// SetNillableOutOperateType sets the "out_operate_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutOperateType(*u)
	}
	return atuo
}

// AddOutOperateType adds u to the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) AddOutOperateType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddOutOperateType(u)
	return atuo
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) ClearOutOperateType() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateType()
	return atuo
}

// SetInOperateID sets the "in_operate_id" field.
func (atuo *AssetTransferUpdateOne) SetInOperateID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateID(u)
	return atuo
}

// SetNillableInOperateID sets the "in_operate_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInOperateID(*u)
	}
	return atuo
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (atuo *AssetTransferUpdateOne) ClearInOperateID() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateID()
	return atuo
}

// SetInOperateType sets the "in_operate_type" field.
func (atuo *AssetTransferUpdateOne) SetInOperateType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetInOperateType()
	atuo.mutation.SetInOperateType(u)
	return atuo
}

// SetNillableInOperateType sets the "in_operate_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInOperateType(*u)
	}
	return atuo
}

// AddInOperateType adds u to the "in_operate_type" field.
func (atuo *AssetTransferUpdateOne) AddInOperateType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddInOperateType(u)
	return atuo
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (atuo *AssetTransferUpdateOne) ClearInOperateType() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateType()
	return atuo
}

// SetOutTimeAt sets the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) SetOutTimeAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetOutTimeAt(t)
	return atuo
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetOutTimeAt(*t)
	}
	return atuo
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) ClearOutTimeAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutTimeAt()
	return atuo
}

// SetInTimeAt sets the "in_time_at" field.
func (atuo *AssetTransferUpdateOne) SetInTimeAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetInTimeAt(t)
	return atuo
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInTimeAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetInTimeAt(*t)
	}
	return atuo
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atuo *AssetTransferUpdateOne) ClearInTimeAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearInTimeAt()
	return atuo
}

// SetReason sets the "reason" field.
func (atuo *AssetTransferUpdateOne) SetReason(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetReason(s)
	return atuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableReason(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetReason(*s)
	}
	return atuo
}

// ClearReason clears the value of the "reason" field.
func (atuo *AssetTransferUpdateOne) ClearReason() *AssetTransferUpdateOne {
	atuo.mutation.ClearReason()
	return atuo
}

// AddDetailIDs adds the "details" edge to the AssetTransferDetails entity by IDs.
func (atuo *AssetTransferUpdateOne) AddDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.AddDetailIDs(ids...)
	return atuo
}

// AddDetails adds the "details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) AddDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddDetailIDs(ids...)
}

// SetLocationStoreID sets the "location_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationStoreID(id)
	return atuo
}

// SetNillableLocationStoreID sets the "location_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationStoreID(*id)
	}
	return atuo
}

// SetLocationStore sets the "location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetLocationStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetLocationStoreID(s.ID)
}

// SetLocationCabinetID sets the "location_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationCabinetID(id)
	return atuo
}

// SetNillableLocationCabinetID sets the "location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationCabinetID(*id)
	}
	return atuo
}

// SetLocationCabinet sets the "location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetLocationCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetLocationCabinetID(c.ID)
}

// SetLocationStationID sets the "location_station" edge to the EnterpriseStation entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationStationID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationStationID(id)
	return atuo
}

// SetNillableLocationStationID sets the "location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationStationID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationStationID(*id)
	}
	return atuo
}

// SetLocationStation sets the "location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) SetLocationStation(e *EnterpriseStation) *AssetTransferUpdateOne {
	return atuo.SetLocationStationID(e.ID)
}

// SetLocationRiderID sets the "location_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationRiderID(id)
	return atuo
}

// SetNillableLocationRiderID sets the "location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationRiderID(*id)
	}
	return atuo
}

// SetLocationRider sets the "location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetLocationRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetLocationRiderID(r.ID)
}

// SetLocationOperatorID sets the "location_operator" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationOperatorID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationOperatorID(id)
	return atuo
}

// SetNillableLocationOperatorID sets the "location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationOperatorID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationOperatorID(*id)
	}
	return atuo
}

// SetLocationOperator sets the "location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetLocationOperator(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetLocationOperatorID(m.ID)
}

// SetLocationWarehouseID sets the "location_warehouse" edge to the Warehouse entity by ID.
func (atuo *AssetTransferUpdateOne) SetLocationWarehouseID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetLocationWarehouseID(id)
	return atuo
}

// SetNillableLocationWarehouseID sets the "location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableLocationWarehouseID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetLocationWarehouseID(*id)
	}
	return atuo
}

// SetLocationWarehouse sets the "location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) SetLocationWarehouse(w *Warehouse) *AssetTransferUpdateOne {
	return atuo.SetLocationWarehouseID(w.ID)
}

// SetToStoreID sets the "to_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetToStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToStoreID(id)
	return atuo
}

// SetNillableToStoreID sets the "to_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToStoreID(*id)
	}
	return atuo
}

// SetToStore sets the "to_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetToStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetToStoreID(s.ID)
}

// SetToCabinetID sets the "to_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetToCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToCabinetID(id)
	return atuo
}

// SetNillableToCabinetID sets the "to_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToCabinetID(*id)
	}
	return atuo
}

// SetToCabinet sets the "to_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetToCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetToCabinetID(c.ID)
}

// SetToStationID sets the "to_station" edge to the EnterpriseStation entity by ID.
func (atuo *AssetTransferUpdateOne) SetToStationID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToStationID(id)
	return atuo
}

// SetNillableToStationID sets the "to_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToStationID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToStationID(*id)
	}
	return atuo
}

// SetToStation sets the "to_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) SetToStation(e *EnterpriseStation) *AssetTransferUpdateOne {
	return atuo.SetToStationID(e.ID)
}

// SetToRiderID sets the "to_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetToRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToRiderID(id)
	return atuo
}

// SetNillableToRiderID sets the "to_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToRiderID(*id)
	}
	return atuo
}

// SetToRider sets the "to_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetToRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetToRiderID(r.ID)
}

// SetToOperatorID sets the "to_operator" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetToOperatorID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToOperatorID(id)
	return atuo
}

// SetNillableToOperatorID sets the "to_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToOperatorID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToOperatorID(*id)
	}
	return atuo
}

// SetToOperator sets the "to_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetToOperator(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetToOperatorID(m.ID)
}

// SetToWarehouseID sets the "to_warehouse" edge to the Warehouse entity by ID.
func (atuo *AssetTransferUpdateOne) SetToWarehouseID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToWarehouseID(id)
	return atuo
}

// SetNillableToWarehouseID sets the "to_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToWarehouseID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToWarehouseID(*id)
	}
	return atuo
}

// SetToWarehouse sets the "to_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) SetToWarehouse(w *Warehouse) *AssetTransferUpdateOne {
	return atuo.SetToWarehouseID(w.ID)
}

// SetOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateManagerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateManagerID(id)
	return atuo
}

// SetNillableOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateManagerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateManagerID(*id)
	}
	return atuo
}

// SetOutOperateManager sets the "out_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateManager(m *Manager) *AssetTransferUpdateOne {
	return atuo.SetOutOperateManagerID(m.ID)
}

// SetOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateStoreID(id)
	return atuo
}

// SetNillableOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateStoreID(*id)
	}
	return atuo
}

// SetOutOperateStore sets the "out_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetOutOperateStoreID(s.ID)
}

// SetOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateAgentID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateAgentID(id)
	return atuo
}

// SetNillableOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateAgentID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateAgentID(*id)
	}
	return atuo
}

// SetOutOperateAgent sets the "out_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateAgent(a *Agent) *AssetTransferUpdateOne {
	return atuo.SetOutOperateAgentID(a.ID)
}

// SetOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateMaintainerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateMaintainerID(id)
	return atuo
}

// SetNillableOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateMaintainerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateMaintainerID(*id)
	}
	return atuo
}

// SetOutOperateMaintainer sets the "out_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateMaintainer(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetOutOperateMaintainerID(m.ID)
}

// SetOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateCabinetID(id)
	return atuo
}

// SetNillableOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateCabinetID(*id)
	}
	return atuo
}

// SetOutOperateCabinet sets the "out_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetOutOperateCabinetID(c.ID)
}

// SetOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateRiderID(id)
	return atuo
}

// SetNillableOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateRiderID(*id)
	}
	return atuo
}

// SetOutOperateRider sets the "out_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetOutOperateRiderID(r.ID)
}

// SetInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateManagerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateManagerID(id)
	return atuo
}

// SetNillableInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateManagerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateManagerID(*id)
	}
	return atuo
}

// SetInOperateManager sets the "in_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) SetInOperateManager(m *Manager) *AssetTransferUpdateOne {
	return atuo.SetInOperateManagerID(m.ID)
}

// SetInOperateStoreID sets the "in_operate_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateStoreID(id)
	return atuo
}

// SetNillableInOperateStoreID sets the "in_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateStoreID(*id)
	}
	return atuo
}

// SetInOperateStore sets the "in_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetInOperateStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetInOperateStoreID(s.ID)
}

// SetInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateAgentID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateAgentID(id)
	return atuo
}

// SetNillableInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateAgentID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateAgentID(*id)
	}
	return atuo
}

// SetInOperateAgent sets the "in_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) SetInOperateAgent(a *Agent) *AssetTransferUpdateOne {
	return atuo.SetInOperateAgentID(a.ID)
}

// SetInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateMaintainerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateMaintainerID(id)
	return atuo
}

// SetNillableInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateMaintainerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateMaintainerID(*id)
	}
	return atuo
}

// SetInOperateMaintainer sets the "in_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetInOperateMaintainer(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetInOperateMaintainerID(m.ID)
}

// SetInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateCabinetID(id)
	return atuo
}

// SetNillableInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateCabinetID(*id)
	}
	return atuo
}

// SetInOperateCabinet sets the "in_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetInOperateCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetInOperateCabinetID(c.ID)
}

// SetInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetInOperateRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetInOperateRiderID(id)
	return atuo
}

// SetNillableInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInOperateRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetInOperateRiderID(*id)
	}
	return atuo
}

// SetInOperateRider sets the "in_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetInOperateRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetInOperateRiderID(r.ID)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atuo *AssetTransferUpdateOne) Mutation() *AssetTransferMutation {
	return atuo.mutation
}

// ClearDetails clears all "details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) ClearDetails() *AssetTransferUpdateOne {
	atuo.mutation.ClearDetails()
	return atuo
}

// RemoveDetailIDs removes the "details" edge to AssetTransferDetails entities by IDs.
func (atuo *AssetTransferUpdateOne) RemoveDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.RemoveDetailIDs(ids...)
	return atuo
}

// RemoveDetails removes "details" edges to AssetTransferDetails entities.
func (atuo *AssetTransferUpdateOne) RemoveDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveDetailIDs(ids...)
}

// ClearLocationStore clears the "location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearLocationStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationStore()
	return atuo
}

// ClearLocationCabinet clears the "location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearLocationCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationCabinet()
	return atuo
}

// ClearLocationStation clears the "location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) ClearLocationStation() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationStation()
	return atuo
}

// ClearLocationRider clears the "location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearLocationRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationRider()
	return atuo
}

// ClearLocationOperator clears the "location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearLocationOperator() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationOperator()
	return atuo
}

// ClearLocationWarehouse clears the "location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) ClearLocationWarehouse() *AssetTransferUpdateOne {
	atuo.mutation.ClearLocationWarehouse()
	return atuo
}

// ClearToStore clears the "to_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearToStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearToStore()
	return atuo
}

// ClearToCabinet clears the "to_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearToCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearToCabinet()
	return atuo
}

// ClearToStation clears the "to_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) ClearToStation() *AssetTransferUpdateOne {
	atuo.mutation.ClearToStation()
	return atuo
}

// ClearToRider clears the "to_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearToRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearToRider()
	return atuo
}

// ClearToOperator clears the "to_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearToOperator() *AssetTransferUpdateOne {
	atuo.mutation.ClearToOperator()
	return atuo
}

// ClearToWarehouse clears the "to_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) ClearToWarehouse() *AssetTransferUpdateOne {
	atuo.mutation.ClearToWarehouse()
	return atuo
}

// ClearOutOperateManager clears the "out_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateManager() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateManager()
	return atuo
}

// ClearOutOperateStore clears the "out_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateStore()
	return atuo
}

// ClearOutOperateAgent clears the "out_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateAgent() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateAgent()
	return atuo
}

// ClearOutOperateMaintainer clears the "out_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateMaintainer() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateMaintainer()
	return atuo
}

// ClearOutOperateCabinet clears the "out_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateCabinet()
	return atuo
}

// ClearOutOperateRider clears the "out_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateRider()
	return atuo
}

// ClearInOperateManager clears the "in_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateManager() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateManager()
	return atuo
}

// ClearInOperateStore clears the "in_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateStore()
	return atuo
}

// ClearInOperateAgent clears the "in_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateAgent() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateAgent()
	return atuo
}

// ClearInOperateMaintainer clears the "in_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateMaintainer() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateMaintainer()
	return atuo
}

// ClearInOperateCabinet clears the "in_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateCabinet()
	return atuo
}

// ClearInOperateRider clears the "in_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearInOperateRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearInOperateRider()
	return atuo
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atuo *AssetTransferUpdateOne) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AssetTransferUpdateOne) Select(field string, fields ...string) *AssetTransferUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AssetTransfer entity.
func (atuo *AssetTransferUpdateOne) Save(ctx context.Context) (*AssetTransfer, error) {
	if err := atuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) SaveX(ctx context.Context) *AssetTransfer {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AssetTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AssetTransferUpdateOne) defaults() error {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atuo *AssetTransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdateOne {
	atuo.modifiers = append(atuo.modifiers, modifiers...)
	return atuo
}

func (atuo *AssetTransferUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransfer.FieldID)
		for _, f := range fields {
			if !assettransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atuo.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atuo.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atuo.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atuo.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atuo.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atuo.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atuo.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atuo.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.OutOperateType(); ok {
		_spec.SetField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedOutOperateType(); ok {
		_spec.AddField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if atuo.mutation.OutOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutOperateType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.InOperateType(); ok {
		_spec.SetField(assettransfer.FieldInOperateType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedInOperateType(); ok {
		_spec.AddField(assettransfer.FieldInOperateType, field.TypeUint8, value)
	}
	if atuo.mutation.InOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldInOperateType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atuo.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.InTimeAt(); ok {
		_spec.SetField(assettransfer.FieldInTimeAt, field.TypeTime, value)
	}
	if atuo.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldInTimeAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atuo.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if atuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !atuo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.DetailsTable,
			Columns: []string{assettransfer.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStoreTable,
			Columns: []string{assettransfer.LocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStoreTable,
			Columns: []string{assettransfer.LocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationCabinetTable,
			Columns: []string{assettransfer.LocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationCabinetTable,
			Columns: []string{assettransfer.LocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStationTable,
			Columns: []string{assettransfer.LocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationStationTable,
			Columns: []string{assettransfer.LocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationRiderTable,
			Columns: []string{assettransfer.LocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationRiderTable,
			Columns: []string{assettransfer.LocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationOperatorTable,
			Columns: []string{assettransfer.LocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationOperatorTable,
			Columns: []string{assettransfer.LocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.LocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationWarehouseTable,
			Columns: []string{assettransfer.LocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.LocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.LocationWarehouseTable,
			Columns: []string{assettransfer.LocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStoreTable,
			Columns: []string{assettransfer.ToStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStoreTable,
			Columns: []string{assettransfer.ToStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToCabinetTable,
			Columns: []string{assettransfer.ToCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToCabinetTable,
			Columns: []string{assettransfer.ToCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStationTable,
			Columns: []string{assettransfer.ToStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToStationTable,
			Columns: []string{assettransfer.ToStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToRiderTable,
			Columns: []string{assettransfer.ToRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToRiderTable,
			Columns: []string{assettransfer.ToRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToOperatorTable,
			Columns: []string{assettransfer.ToOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToOperatorTable,
			Columns: []string{assettransfer.ToOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToWarehouseTable,
			Columns: []string{assettransfer.ToWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToWarehouseTable,
			Columns: []string{assettransfer.ToWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateManagerTable,
			Columns: []string{assettransfer.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateManagerTable,
			Columns: []string{assettransfer.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateStoreTable,
			Columns: []string{assettransfer.InOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateStoreTable,
			Columns: []string{assettransfer.InOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateAgentTable,
			Columns: []string{assettransfer.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateAgentTable,
			Columns: []string{assettransfer.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateMaintainerTable,
			Columns: []string{assettransfer.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateMaintainerTable,
			Columns: []string{assettransfer.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateCabinetTable,
			Columns: []string{assettransfer.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateCabinetTable,
			Columns: []string{assettransfer.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.InOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateRiderTable,
			Columns: []string{assettransfer.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.InOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.InOperateRiderTable,
			Columns: []string{assettransfer.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atuo.modifiers...)
	_node = &AssetTransfer{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
