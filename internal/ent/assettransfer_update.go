// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetTransferUpdate is the builder for updating AssetTransfer entities.
type AssetTransferUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atu *AssetTransferUpdate) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AssetTransferUpdate) SetUpdatedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetDeletedAt sets the "deleted_at" field.
func (atu *AssetTransferUpdate) SetDeletedAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetDeletedAt(t)
	return atu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetDeletedAt(*t)
	}
	return atu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atu *AssetTransferUpdate) ClearDeletedAt() *AssetTransferUpdate {
	atu.mutation.ClearDeletedAt()
	return atu
}

// SetLastModifier sets the "last_modifier" field.
func (atu *AssetTransferUpdate) SetLastModifier(m *model.Modifier) *AssetTransferUpdate {
	atu.mutation.SetLastModifier(m)
	return atu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atu *AssetTransferUpdate) ClearLastModifier() *AssetTransferUpdate {
	atu.mutation.ClearLastModifier()
	return atu
}

// SetRemark sets the "remark" field.
func (atu *AssetTransferUpdate) SetRemark(s string) *AssetTransferUpdate {
	atu.mutation.SetRemark(s)
	return atu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableRemark(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetRemark(*s)
	}
	return atu
}

// ClearRemark clears the value of the "remark" field.
func (atu *AssetTransferUpdate) ClearRemark() *AssetTransferUpdate {
	atu.mutation.ClearRemark()
	return atu
}

// SetStatus sets the "status" field.
func (atu *AssetTransferUpdate) SetStatus(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetStatus()
	atu.mutation.SetStatus(u)
	return atu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableStatus(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetStatus(*u)
	}
	return atu
}

// AddStatus adds u to the "status" field.
func (atu *AssetTransferUpdate) AddStatus(u int8) *AssetTransferUpdate {
	atu.mutation.AddStatus(u)
	return atu
}

// SetSn sets the "sn" field.
func (atu *AssetTransferUpdate) SetSn(s string) *AssetTransferUpdate {
	atu.mutation.SetSn(s)
	return atu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableSn(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetSn(*s)
	}
	return atu
}

// SetFromLocationType sets the "from_location_type" field.
func (atu *AssetTransferUpdate) SetFromLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetFromLocationType()
	atu.mutation.SetFromLocationType(u)
	return atu
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationType(*u)
	}
	return atu
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atu *AssetTransferUpdate) AddFromLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddFromLocationType(u)
	return atu
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atu *AssetTransferUpdate) ClearFromLocationType() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationType()
	return atu
}

// SetFromLocationID sets the "from_location_id" field.
func (atu *AssetTransferUpdate) SetFromLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationID(u)
	return atu
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetFromLocationID(*u)
	}
	return atu
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atu *AssetTransferUpdate) ClearFromLocationID() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationID()
	return atu
}

// SetToLocationType sets the "to_location_type" field.
func (atu *AssetTransferUpdate) SetToLocationType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetToLocationType()
	atu.mutation.SetToLocationType(u)
	return atu
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationType(*u)
	}
	return atu
}

// AddToLocationType adds u to the "to_location_type" field.
func (atu *AssetTransferUpdate) AddToLocationType(u int8) *AssetTransferUpdate {
	atu.mutation.AddToLocationType(u)
	return atu
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atu *AssetTransferUpdate) ClearToLocationType() *AssetTransferUpdate {
	atu.mutation.ClearToLocationType()
	return atu
}

// SetToLocationID sets the "to_location_id" field.
func (atu *AssetTransferUpdate) SetToLocationID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationID(u)
	return atu
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetToLocationID(*u)
	}
	return atu
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atu *AssetTransferUpdate) ClearToLocationID() *AssetTransferUpdate {
	atu.mutation.ClearToLocationID()
	return atu
}

// SetOutNum sets the "out_num" field.
func (atu *AssetTransferUpdate) SetOutNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetOutNum()
	atu.mutation.SetOutNum(u)
	return atu
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutNum(*u)
	}
	return atu
}

// AddOutNum adds u to the "out_num" field.
func (atu *AssetTransferUpdate) AddOutNum(u int) *AssetTransferUpdate {
	atu.mutation.AddOutNum(u)
	return atu
}

// ClearOutNum clears the value of the "out_num" field.
func (atu *AssetTransferUpdate) ClearOutNum() *AssetTransferUpdate {
	atu.mutation.ClearOutNum()
	return atu
}

// SetInNum sets the "in_num" field.
func (atu *AssetTransferUpdate) SetInNum(u uint) *AssetTransferUpdate {
	atu.mutation.ResetInNum()
	atu.mutation.SetInNum(u)
	return atu
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableInNum(u *uint) *AssetTransferUpdate {
	if u != nil {
		atu.SetInNum(*u)
	}
	return atu
}

// AddInNum adds u to the "in_num" field.
func (atu *AssetTransferUpdate) AddInNum(u int) *AssetTransferUpdate {
	atu.mutation.AddInNum(u)
	return atu
}

// ClearInNum clears the value of the "in_num" field.
func (atu *AssetTransferUpdate) ClearInNum() *AssetTransferUpdate {
	atu.mutation.ClearInNum()
	return atu
}

// SetOutOperateID sets the "out_operate_id" field.
func (atu *AssetTransferUpdate) SetOutOperateID(u uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateID(u)
	return atu
}

// SetNillableOutOperateID sets the "out_operate_id" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateID(u *uint64) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutOperateID(*u)
	}
	return atu
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (atu *AssetTransferUpdate) ClearOutOperateID() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateID()
	return atu
}

// SetOutOperateType sets the "out_operate_type" field.
func (atu *AssetTransferUpdate) SetOutOperateType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetOutOperateType()
	atu.mutation.SetOutOperateType(u)
	return atu
}

// SetNillableOutOperateType sets the "out_operate_type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetOutOperateType(*u)
	}
	return atu
}

// AddOutOperateType adds u to the "out_operate_type" field.
func (atu *AssetTransferUpdate) AddOutOperateType(u int8) *AssetTransferUpdate {
	atu.mutation.AddOutOperateType(u)
	return atu
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (atu *AssetTransferUpdate) ClearOutOperateType() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateType()
	return atu
}

// SetOutTimeAt sets the "out_time_at" field.
func (atu *AssetTransferUpdate) SetOutTimeAt(t time.Time) *AssetTransferUpdate {
	atu.mutation.SetOutTimeAt(t)
	return atu
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdate {
	if t != nil {
		atu.SetOutTimeAt(*t)
	}
	return atu
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atu *AssetTransferUpdate) ClearOutTimeAt() *AssetTransferUpdate {
	atu.mutation.ClearOutTimeAt()
	return atu
}

// SetReason sets the "reason" field.
func (atu *AssetTransferUpdate) SetReason(s string) *AssetTransferUpdate {
	atu.mutation.SetReason(s)
	return atu
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableReason(s *string) *AssetTransferUpdate {
	if s != nil {
		atu.SetReason(*s)
	}
	return atu
}

// ClearReason clears the value of the "reason" field.
func (atu *AssetTransferUpdate) ClearReason() *AssetTransferUpdate {
	atu.mutation.ClearReason()
	return atu
}

// SetType sets the "type" field.
func (atu *AssetTransferUpdate) SetType(u uint8) *AssetTransferUpdate {
	atu.mutation.ResetType()
	atu.mutation.SetType(u)
	return atu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableType(u *uint8) *AssetTransferUpdate {
	if u != nil {
		atu.SetType(*u)
	}
	return atu
}

// AddType adds u to the "type" field.
func (atu *AssetTransferUpdate) AddType(u int8) *AssetTransferUpdate {
	atu.mutation.AddType(u)
	return atu
}

// ClearType clears the value of the "type" field.
func (atu *AssetTransferUpdate) ClearType() *AssetTransferUpdate {
	atu.mutation.ClearType()
	return atu
}

// AddTransferDetailIDs adds the "transfer_details" edge to the AssetTransferDetails entity by IDs.
func (atu *AssetTransferUpdate) AddTransferDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.AddTransferDetailIDs(ids...)
	return atu
}

// AddTransferDetails adds the "transfer_details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) AddTransferDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.AddTransferDetailIDs(ids...)
}

// SetFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationStoreID(id)
	return atu
}

// SetNillableFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationStoreID(*id)
	}
	return atu
}

// SetFromLocationStore sets the "from_location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetFromLocationStore(s *Store) *AssetTransferUpdate {
	return atu.SetFromLocationStoreID(s.ID)
}

// SetFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationCabinetID(id)
	return atu
}

// SetNillableFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationCabinetID(*id)
	}
	return atu
}

// SetFromLocationCabinet sets the "from_location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetFromLocationCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetFromLocationCabinetID(c.ID)
}

// SetFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationStationID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationStationID(id)
	return atu
}

// SetNillableFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationStationID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationStationID(*id)
	}
	return atu
}

// SetFromLocationStation sets the "from_location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) SetFromLocationStation(e *EnterpriseStation) *AssetTransferUpdate {
	return atu.SetFromLocationStationID(e.ID)
}

// SetFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationRiderID(id)
	return atu
}

// SetNillableFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationRiderID(*id)
	}
	return atu
}

// SetFromLocationRider sets the "from_location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetFromLocationRider(r *Rider) *AssetTransferUpdate {
	return atu.SetFromLocationRiderID(r.ID)
}

// SetFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationOperatorID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationOperatorID(id)
	return atu
}

// SetNillableFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationOperatorID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationOperatorID(*id)
	}
	return atu
}

// SetFromLocationOperator sets the "from_location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetFromLocationOperator(m *Maintainer) *AssetTransferUpdate {
	return atu.SetFromLocationOperatorID(m.ID)
}

// SetFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID.
func (atu *AssetTransferUpdate) SetFromLocationWarehouseID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetFromLocationWarehouseID(id)
	return atu
}

// SetNillableFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableFromLocationWarehouseID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetFromLocationWarehouseID(*id)
	}
	return atu
}

// SetFromLocationWarehouse sets the "from_location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) SetFromLocationWarehouse(w *Warehouse) *AssetTransferUpdate {
	return atu.SetFromLocationWarehouseID(w.ID)
}

// SetToLocationStoreID sets the "to_location_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetToLocationStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationStoreID(id)
	return atu
}

// SetNillableToLocationStoreID sets the "to_location_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationStoreID(*id)
	}
	return atu
}

// SetToLocationStore sets the "to_location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetToLocationStore(s *Store) *AssetTransferUpdate {
	return atu.SetToLocationStoreID(s.ID)
}

// SetToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetToLocationCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationCabinetID(id)
	return atu
}

// SetNillableToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationCabinetID(*id)
	}
	return atu
}

// SetToLocationCabinet sets the "to_location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetToLocationCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetToLocationCabinetID(c.ID)
}

// SetToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID.
func (atu *AssetTransferUpdate) SetToLocationStationID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationStationID(id)
	return atu
}

// SetNillableToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationStationID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationStationID(*id)
	}
	return atu
}

// SetToLocationStation sets the "to_location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) SetToLocationStation(e *EnterpriseStation) *AssetTransferUpdate {
	return atu.SetToLocationStationID(e.ID)
}

// SetToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetToLocationRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationRiderID(id)
	return atu
}

// SetNillableToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationRiderID(*id)
	}
	return atu
}

// SetToLocationRider sets the "to_location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetToLocationRider(r *Rider) *AssetTransferUpdate {
	return atu.SetToLocationRiderID(r.ID)
}

// SetToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetToLocationOperatorID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationOperatorID(id)
	return atu
}

// SetNillableToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationOperatorID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationOperatorID(*id)
	}
	return atu
}

// SetToLocationOperator sets the "to_location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetToLocationOperator(m *Maintainer) *AssetTransferUpdate {
	return atu.SetToLocationOperatorID(m.ID)
}

// SetToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID.
func (atu *AssetTransferUpdate) SetToLocationWarehouseID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetToLocationWarehouseID(id)
	return atu
}

// SetNillableToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableToLocationWarehouseID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetToLocationWarehouseID(*id)
	}
	return atu
}

// SetToLocationWarehouse sets the "to_location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) SetToLocationWarehouse(w *Warehouse) *AssetTransferUpdate {
	return atu.SetToLocationWarehouseID(w.ID)
}

// SetOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateManagerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateManagerID(id)
	return atu
}

// SetNillableOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateManagerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateManagerID(*id)
	}
	return atu
}

// SetOutOperateManager sets the "out_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) SetOutOperateManager(m *Manager) *AssetTransferUpdate {
	return atu.SetOutOperateManagerID(m.ID)
}

// SetOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateStoreID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateStoreID(id)
	return atu
}

// SetNillableOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateStoreID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateStoreID(*id)
	}
	return atu
}

// SetOutOperateStore sets the "out_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) SetOutOperateStore(s *Store) *AssetTransferUpdate {
	return atu.SetOutOperateStoreID(s.ID)
}

// SetOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateAgentID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateAgentID(id)
	return atu
}

// SetNillableOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateAgentID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateAgentID(*id)
	}
	return atu
}

// SetOutOperateAgent sets the "out_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) SetOutOperateAgent(a *Agent) *AssetTransferUpdate {
	return atu.SetOutOperateAgentID(a.ID)
}

// SetOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateMaintainerID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateMaintainerID(id)
	return atu
}

// SetNillableOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateMaintainerID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateMaintainerID(*id)
	}
	return atu
}

// SetOutOperateMaintainer sets the "out_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) SetOutOperateMaintainer(m *Maintainer) *AssetTransferUpdate {
	return atu.SetOutOperateMaintainerID(m.ID)
}

// SetOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateCabinetID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateCabinetID(id)
	return atu
}

// SetNillableOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateCabinetID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateCabinetID(*id)
	}
	return atu
}

// SetOutOperateCabinet sets the "out_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) SetOutOperateCabinet(c *Cabinet) *AssetTransferUpdate {
	return atu.SetOutOperateCabinetID(c.ID)
}

// SetOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID.
func (atu *AssetTransferUpdate) SetOutOperateRiderID(id uint64) *AssetTransferUpdate {
	atu.mutation.SetOutOperateRiderID(id)
	return atu
}

// SetNillableOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atu *AssetTransferUpdate) SetNillableOutOperateRiderID(id *uint64) *AssetTransferUpdate {
	if id != nil {
		atu = atu.SetOutOperateRiderID(*id)
	}
	return atu
}

// SetOutOperateRider sets the "out_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) SetOutOperateRider(r *Rider) *AssetTransferUpdate {
	return atu.SetOutOperateRiderID(r.ID)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atu *AssetTransferUpdate) Mutation() *AssetTransferMutation {
	return atu.mutation
}

// ClearTransferDetails clears all "transfer_details" edges to the AssetTransferDetails entity.
func (atu *AssetTransferUpdate) ClearTransferDetails() *AssetTransferUpdate {
	atu.mutation.ClearTransferDetails()
	return atu
}

// RemoveTransferDetailIDs removes the "transfer_details" edge to AssetTransferDetails entities by IDs.
func (atu *AssetTransferUpdate) RemoveTransferDetailIDs(ids ...uint64) *AssetTransferUpdate {
	atu.mutation.RemoveTransferDetailIDs(ids...)
	return atu
}

// RemoveTransferDetails removes "transfer_details" edges to AssetTransferDetails entities.
func (atu *AssetTransferUpdate) RemoveTransferDetails(a ...*AssetTransferDetails) *AssetTransferUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atu.RemoveTransferDetailIDs(ids...)
}

// ClearFromLocationStore clears the "from_location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearFromLocationStore() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationStore()
	return atu
}

// ClearFromLocationCabinet clears the "from_location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearFromLocationCabinet() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationCabinet()
	return atu
}

// ClearFromLocationStation clears the "from_location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) ClearFromLocationStation() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationStation()
	return atu
}

// ClearFromLocationRider clears the "from_location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearFromLocationRider() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationRider()
	return atu
}

// ClearFromLocationOperator clears the "from_location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearFromLocationOperator() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationOperator()
	return atu
}

// ClearFromLocationWarehouse clears the "from_location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) ClearFromLocationWarehouse() *AssetTransferUpdate {
	atu.mutation.ClearFromLocationWarehouse()
	return atu
}

// ClearToLocationStore clears the "to_location_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearToLocationStore() *AssetTransferUpdate {
	atu.mutation.ClearToLocationStore()
	return atu
}

// ClearToLocationCabinet clears the "to_location_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearToLocationCabinet() *AssetTransferUpdate {
	atu.mutation.ClearToLocationCabinet()
	return atu
}

// ClearToLocationStation clears the "to_location_station" edge to the EnterpriseStation entity.
func (atu *AssetTransferUpdate) ClearToLocationStation() *AssetTransferUpdate {
	atu.mutation.ClearToLocationStation()
	return atu
}

// ClearToLocationRider clears the "to_location_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearToLocationRider() *AssetTransferUpdate {
	atu.mutation.ClearToLocationRider()
	return atu
}

// ClearToLocationOperator clears the "to_location_operator" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearToLocationOperator() *AssetTransferUpdate {
	atu.mutation.ClearToLocationOperator()
	return atu
}

// ClearToLocationWarehouse clears the "to_location_warehouse" edge to the Warehouse entity.
func (atu *AssetTransferUpdate) ClearToLocationWarehouse() *AssetTransferUpdate {
	atu.mutation.ClearToLocationWarehouse()
	return atu
}

// ClearOutOperateManager clears the "out_operate_manager" edge to the Manager entity.
func (atu *AssetTransferUpdate) ClearOutOperateManager() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateManager()
	return atu
}

// ClearOutOperateStore clears the "out_operate_store" edge to the Store entity.
func (atu *AssetTransferUpdate) ClearOutOperateStore() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateStore()
	return atu
}

// ClearOutOperateAgent clears the "out_operate_agent" edge to the Agent entity.
func (atu *AssetTransferUpdate) ClearOutOperateAgent() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateAgent()
	return atu
}

// ClearOutOperateMaintainer clears the "out_operate_maintainer" edge to the Maintainer entity.
func (atu *AssetTransferUpdate) ClearOutOperateMaintainer() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateMaintainer()
	return atu
}

// ClearOutOperateCabinet clears the "out_operate_cabinet" edge to the Cabinet entity.
func (atu *AssetTransferUpdate) ClearOutOperateCabinet() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateCabinet()
	return atu
}

// ClearOutOperateRider clears the "out_operate_rider" edge to the Rider entity.
func (atu *AssetTransferUpdate) ClearOutOperateRider() *AssetTransferUpdate {
	atu.mutation.ClearOutOperateRider()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AssetTransferUpdate) Save(ctx context.Context) (int, error) {
	if err := atu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AssetTransferUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AssetTransferUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AssetTransferUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AssetTransferUpdate) defaults() error {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atu *AssetTransferUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdate {
	atu.modifiers = append(atu.modifiers, modifiers...)
	return atu
}

func (atu *AssetTransferUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atu.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atu.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atu.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atu.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atu.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atu.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atu.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atu.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atu.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atu.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atu.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atu.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atu.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atu.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atu.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atu.mutation.OutOperateType(); ok {
		_spec.SetField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedOutOperateType(); ok {
		_spec.AddField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if atu.mutation.OutOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutOperateType, field.TypeUint8)
	}
	if value, ok := atu.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atu.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atu.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atu.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if value, ok := atu.mutation.GetType(); ok {
		_spec.SetField(assettransfer.FieldType, field.TypeUint8, value)
	}
	if value, ok := atu.mutation.AddedType(); ok {
		_spec.AddField(assettransfer.FieldType, field.TypeUint8, value)
	}
	if atu.mutation.TypeCleared() {
		_spec.ClearField(assettransfer.FieldType, field.TypeUint8)
	}
	if atu.mutation.TransferDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.RemovedTransferDetailsIDs(); len(nodes) > 0 && !atu.mutation.TransferDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.TransferDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStoreTable,
			Columns: []string{assettransfer.FromLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStoreTable,
			Columns: []string{assettransfer.FromLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationCabinetTable,
			Columns: []string{assettransfer.FromLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationCabinetTable,
			Columns: []string{assettransfer.FromLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStationTable,
			Columns: []string{assettransfer.FromLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStationTable,
			Columns: []string{assettransfer.FromLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationRiderTable,
			Columns: []string{assettransfer.FromLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationRiderTable,
			Columns: []string{assettransfer.FromLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationOperatorTable,
			Columns: []string{assettransfer.FromLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationOperatorTable,
			Columns: []string{assettransfer.FromLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.FromLocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationWarehouseTable,
			Columns: []string{assettransfer.FromLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.FromLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationWarehouseTable,
			Columns: []string{assettransfer.FromLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStoreTable,
			Columns: []string{assettransfer.ToLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStoreTable,
			Columns: []string{assettransfer.ToLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationCabinetTable,
			Columns: []string{assettransfer.ToLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationCabinetTable,
			Columns: []string{assettransfer.ToLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStationTable,
			Columns: []string{assettransfer.ToLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStationTable,
			Columns: []string{assettransfer.ToLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationRiderTable,
			Columns: []string{assettransfer.ToLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationRiderTable,
			Columns: []string{assettransfer.ToLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationOperatorTable,
			Columns: []string{assettransfer.ToLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationOperatorTable,
			Columns: []string{assettransfer.ToLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.ToLocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationWarehouseTable,
			Columns: []string{assettransfer.ToLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ToLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationWarehouseTable,
			Columns: []string{assettransfer.ToLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.OutOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OutOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AssetTransferUpdateOne is the builder for updating a single AssetTransfer entity.
type AssetTransferUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetTransferMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AssetTransferUpdateOne) SetUpdatedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetDeletedAt sets the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) SetDeletedAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetDeletedAt(t)
	return atuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetDeletedAt(*t)
	}
	return atuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atuo *AssetTransferUpdateOne) ClearDeletedAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearDeletedAt()
	return atuo
}

// SetLastModifier sets the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) SetLastModifier(m *model.Modifier) *AssetTransferUpdateOne {
	atuo.mutation.SetLastModifier(m)
	return atuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atuo *AssetTransferUpdateOne) ClearLastModifier() *AssetTransferUpdateOne {
	atuo.mutation.ClearLastModifier()
	return atuo
}

// SetRemark sets the "remark" field.
func (atuo *AssetTransferUpdateOne) SetRemark(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetRemark(s)
	return atuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableRemark(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetRemark(*s)
	}
	return atuo
}

// ClearRemark clears the value of the "remark" field.
func (atuo *AssetTransferUpdateOne) ClearRemark() *AssetTransferUpdateOne {
	atuo.mutation.ClearRemark()
	return atuo
}

// SetStatus sets the "status" field.
func (atuo *AssetTransferUpdateOne) SetStatus(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetStatus()
	atuo.mutation.SetStatus(u)
	return atuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableStatus(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetStatus(*u)
	}
	return atuo
}

// AddStatus adds u to the "status" field.
func (atuo *AssetTransferUpdateOne) AddStatus(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddStatus(u)
	return atuo
}

// SetSn sets the "sn" field.
func (atuo *AssetTransferUpdateOne) SetSn(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetSn(s)
	return atuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableSn(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetSn(*s)
	}
	return atuo
}

// SetFromLocationType sets the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetFromLocationType()
	atuo.mutation.SetFromLocationType(u)
	return atuo
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationType(*u)
	}
	return atuo
}

// AddFromLocationType adds u to the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) AddFromLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddFromLocationType(u)
	return atuo
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationType()
	return atuo
}

// SetFromLocationID sets the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) SetFromLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationID(u)
	return atuo
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetFromLocationID(*u)
	}
	return atuo
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearFromLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationID()
	return atuo
}

// SetToLocationType sets the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) SetToLocationType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetToLocationType()
	atuo.mutation.SetToLocationType(u)
	return atuo
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationType(*u)
	}
	return atuo
}

// AddToLocationType adds u to the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) AddToLocationType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddToLocationType(u)
	return atuo
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationType() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationType()
	return atuo
}

// SetToLocationID sets the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) SetToLocationID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationID(u)
	return atuo
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetToLocationID(*u)
	}
	return atuo
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (atuo *AssetTransferUpdateOne) ClearToLocationID() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationID()
	return atuo
}

// SetOutNum sets the "out_num" field.
func (atuo *AssetTransferUpdateOne) SetOutNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutNum()
	atuo.mutation.SetOutNum(u)
	return atuo
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutNum(*u)
	}
	return atuo
}

// AddOutNum adds u to the "out_num" field.
func (atuo *AssetTransferUpdateOne) AddOutNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddOutNum(u)
	return atuo
}

// ClearOutNum clears the value of the "out_num" field.
func (atuo *AssetTransferUpdateOne) ClearOutNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutNum()
	return atuo
}

// SetInNum sets the "in_num" field.
func (atuo *AssetTransferUpdateOne) SetInNum(u uint) *AssetTransferUpdateOne {
	atuo.mutation.ResetInNum()
	atuo.mutation.SetInNum(u)
	return atuo
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableInNum(u *uint) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetInNum(*u)
	}
	return atuo
}

// AddInNum adds u to the "in_num" field.
func (atuo *AssetTransferUpdateOne) AddInNum(u int) *AssetTransferUpdateOne {
	atuo.mutation.AddInNum(u)
	return atuo
}

// ClearInNum clears the value of the "in_num" field.
func (atuo *AssetTransferUpdateOne) ClearInNum() *AssetTransferUpdateOne {
	atuo.mutation.ClearInNum()
	return atuo
}

// SetOutOperateID sets the "out_operate_id" field.
func (atuo *AssetTransferUpdateOne) SetOutOperateID(u uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateID(u)
	return atuo
}

// SetNillableOutOperateID sets the "out_operate_id" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateID(u *uint64) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutOperateID(*u)
	}
	return atuo
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (atuo *AssetTransferUpdateOne) ClearOutOperateID() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateID()
	return atuo
}

// SetOutOperateType sets the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) SetOutOperateType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetOutOperateType()
	atuo.mutation.SetOutOperateType(u)
	return atuo
}

// SetNillableOutOperateType sets the "out_operate_type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetOutOperateType(*u)
	}
	return atuo
}

// AddOutOperateType adds u to the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) AddOutOperateType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddOutOperateType(u)
	return atuo
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (atuo *AssetTransferUpdateOne) ClearOutOperateType() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateType()
	return atuo
}

// SetOutTimeAt sets the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) SetOutTimeAt(t time.Time) *AssetTransferUpdateOne {
	atuo.mutation.SetOutTimeAt(t)
	return atuo
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutTimeAt(t *time.Time) *AssetTransferUpdateOne {
	if t != nil {
		atuo.SetOutTimeAt(*t)
	}
	return atuo
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (atuo *AssetTransferUpdateOne) ClearOutTimeAt() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutTimeAt()
	return atuo
}

// SetReason sets the "reason" field.
func (atuo *AssetTransferUpdateOne) SetReason(s string) *AssetTransferUpdateOne {
	atuo.mutation.SetReason(s)
	return atuo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableReason(s *string) *AssetTransferUpdateOne {
	if s != nil {
		atuo.SetReason(*s)
	}
	return atuo
}

// ClearReason clears the value of the "reason" field.
func (atuo *AssetTransferUpdateOne) ClearReason() *AssetTransferUpdateOne {
	atuo.mutation.ClearReason()
	return atuo
}

// SetType sets the "type" field.
func (atuo *AssetTransferUpdateOne) SetType(u uint8) *AssetTransferUpdateOne {
	atuo.mutation.ResetType()
	atuo.mutation.SetType(u)
	return atuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableType(u *uint8) *AssetTransferUpdateOne {
	if u != nil {
		atuo.SetType(*u)
	}
	return atuo
}

// AddType adds u to the "type" field.
func (atuo *AssetTransferUpdateOne) AddType(u int8) *AssetTransferUpdateOne {
	atuo.mutation.AddType(u)
	return atuo
}

// ClearType clears the value of the "type" field.
func (atuo *AssetTransferUpdateOne) ClearType() *AssetTransferUpdateOne {
	atuo.mutation.ClearType()
	return atuo
}

// AddTransferDetailIDs adds the "transfer_details" edge to the AssetTransferDetails entity by IDs.
func (atuo *AssetTransferUpdateOne) AddTransferDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.AddTransferDetailIDs(ids...)
	return atuo
}

// AddTransferDetails adds the "transfer_details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) AddTransferDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.AddTransferDetailIDs(ids...)
}

// SetFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationStoreID(id)
	return atuo
}

// SetNillableFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationStoreID(*id)
	}
	return atuo
}

// SetFromLocationStore sets the "from_location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetFromLocationStoreID(s.ID)
}

// SetFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationCabinetID(id)
	return atuo
}

// SetNillableFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationCabinetID(*id)
	}
	return atuo
}

// SetFromLocationCabinet sets the "from_location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetFromLocationCabinetID(c.ID)
}

// SetFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationStationID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationStationID(id)
	return atuo
}

// SetNillableFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationStationID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationStationID(*id)
	}
	return atuo
}

// SetFromLocationStation sets the "from_location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationStation(e *EnterpriseStation) *AssetTransferUpdateOne {
	return atuo.SetFromLocationStationID(e.ID)
}

// SetFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationRiderID(id)
	return atuo
}

// SetNillableFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationRiderID(*id)
	}
	return atuo
}

// SetFromLocationRider sets the "from_location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetFromLocationRiderID(r.ID)
}

// SetFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationOperatorID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationOperatorID(id)
	return atuo
}

// SetNillableFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationOperatorID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationOperatorID(*id)
	}
	return atuo
}

// SetFromLocationOperator sets the "from_location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationOperator(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetFromLocationOperatorID(m.ID)
}

// SetFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID.
func (atuo *AssetTransferUpdateOne) SetFromLocationWarehouseID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetFromLocationWarehouseID(id)
	return atuo
}

// SetNillableFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableFromLocationWarehouseID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetFromLocationWarehouseID(*id)
	}
	return atuo
}

// SetFromLocationWarehouse sets the "from_location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) SetFromLocationWarehouse(w *Warehouse) *AssetTransferUpdateOne {
	return atuo.SetFromLocationWarehouseID(w.ID)
}

// SetToLocationStoreID sets the "to_location_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationStoreID(id)
	return atuo
}

// SetNillableToLocationStoreID sets the "to_location_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationStoreID(*id)
	}
	return atuo
}

// SetToLocationStore sets the "to_location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetToLocationStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetToLocationStoreID(s.ID)
}

// SetToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationCabinetID(id)
	return atuo
}

// SetNillableToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationCabinetID(*id)
	}
	return atuo
}

// SetToLocationCabinet sets the "to_location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetToLocationCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetToLocationCabinetID(c.ID)
}

// SetToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationStationID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationStationID(id)
	return atuo
}

// SetNillableToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationStationID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationStationID(*id)
	}
	return atuo
}

// SetToLocationStation sets the "to_location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) SetToLocationStation(e *EnterpriseStation) *AssetTransferUpdateOne {
	return atuo.SetToLocationStationID(e.ID)
}

// SetToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationRiderID(id)
	return atuo
}

// SetNillableToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationRiderID(*id)
	}
	return atuo
}

// SetToLocationRider sets the "to_location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetToLocationRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetToLocationRiderID(r.ID)
}

// SetToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationOperatorID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationOperatorID(id)
	return atuo
}

// SetNillableToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationOperatorID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationOperatorID(*id)
	}
	return atuo
}

// SetToLocationOperator sets the "to_location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetToLocationOperator(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetToLocationOperatorID(m.ID)
}

// SetToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID.
func (atuo *AssetTransferUpdateOne) SetToLocationWarehouseID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetToLocationWarehouseID(id)
	return atuo
}

// SetNillableToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableToLocationWarehouseID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetToLocationWarehouseID(*id)
	}
	return atuo
}

// SetToLocationWarehouse sets the "to_location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) SetToLocationWarehouse(w *Warehouse) *AssetTransferUpdateOne {
	return atuo.SetToLocationWarehouseID(w.ID)
}

// SetOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateManagerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateManagerID(id)
	return atuo
}

// SetNillableOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateManagerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateManagerID(*id)
	}
	return atuo
}

// SetOutOperateManager sets the "out_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateManager(m *Manager) *AssetTransferUpdateOne {
	return atuo.SetOutOperateManagerID(m.ID)
}

// SetOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateStoreID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateStoreID(id)
	return atuo
}

// SetNillableOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateStoreID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateStoreID(*id)
	}
	return atuo
}

// SetOutOperateStore sets the "out_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateStore(s *Store) *AssetTransferUpdateOne {
	return atuo.SetOutOperateStoreID(s.ID)
}

// SetOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateAgentID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateAgentID(id)
	return atuo
}

// SetNillableOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateAgentID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateAgentID(*id)
	}
	return atuo
}

// SetOutOperateAgent sets the "out_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateAgent(a *Agent) *AssetTransferUpdateOne {
	return atuo.SetOutOperateAgentID(a.ID)
}

// SetOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateMaintainerID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateMaintainerID(id)
	return atuo
}

// SetNillableOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateMaintainerID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateMaintainerID(*id)
	}
	return atuo
}

// SetOutOperateMaintainer sets the "out_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateMaintainer(m *Maintainer) *AssetTransferUpdateOne {
	return atuo.SetOutOperateMaintainerID(m.ID)
}

// SetOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateCabinetID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateCabinetID(id)
	return atuo
}

// SetNillableOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateCabinetID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateCabinetID(*id)
	}
	return atuo
}

// SetOutOperateCabinet sets the "out_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateCabinet(c *Cabinet) *AssetTransferUpdateOne {
	return atuo.SetOutOperateCabinetID(c.ID)
}

// SetOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID.
func (atuo *AssetTransferUpdateOne) SetOutOperateRiderID(id uint64) *AssetTransferUpdateOne {
	atuo.mutation.SetOutOperateRiderID(id)
	return atuo
}

// SetNillableOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atuo *AssetTransferUpdateOne) SetNillableOutOperateRiderID(id *uint64) *AssetTransferUpdateOne {
	if id != nil {
		atuo = atuo.SetOutOperateRiderID(*id)
	}
	return atuo
}

// SetOutOperateRider sets the "out_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) SetOutOperateRider(r *Rider) *AssetTransferUpdateOne {
	return atuo.SetOutOperateRiderID(r.ID)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atuo *AssetTransferUpdateOne) Mutation() *AssetTransferMutation {
	return atuo.mutation
}

// ClearTransferDetails clears all "transfer_details" edges to the AssetTransferDetails entity.
func (atuo *AssetTransferUpdateOne) ClearTransferDetails() *AssetTransferUpdateOne {
	atuo.mutation.ClearTransferDetails()
	return atuo
}

// RemoveTransferDetailIDs removes the "transfer_details" edge to AssetTransferDetails entities by IDs.
func (atuo *AssetTransferUpdateOne) RemoveTransferDetailIDs(ids ...uint64) *AssetTransferUpdateOne {
	atuo.mutation.RemoveTransferDetailIDs(ids...)
	return atuo
}

// RemoveTransferDetails removes "transfer_details" edges to AssetTransferDetails entities.
func (atuo *AssetTransferUpdateOne) RemoveTransferDetails(a ...*AssetTransferDetails) *AssetTransferUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atuo.RemoveTransferDetailIDs(ids...)
}

// ClearFromLocationStore clears the "from_location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationStore()
	return atuo
}

// ClearFromLocationCabinet clears the "from_location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationCabinet()
	return atuo
}

// ClearFromLocationStation clears the "from_location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationStation() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationStation()
	return atuo
}

// ClearFromLocationRider clears the "from_location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationRider()
	return atuo
}

// ClearFromLocationOperator clears the "from_location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationOperator() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationOperator()
	return atuo
}

// ClearFromLocationWarehouse clears the "from_location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) ClearFromLocationWarehouse() *AssetTransferUpdateOne {
	atuo.mutation.ClearFromLocationWarehouse()
	return atuo
}

// ClearToLocationStore clears the "to_location_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationStore()
	return atuo
}

// ClearToLocationCabinet clears the "to_location_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationCabinet()
	return atuo
}

// ClearToLocationStation clears the "to_location_station" edge to the EnterpriseStation entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationStation() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationStation()
	return atuo
}

// ClearToLocationRider clears the "to_location_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationRider()
	return atuo
}

// ClearToLocationOperator clears the "to_location_operator" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationOperator() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationOperator()
	return atuo
}

// ClearToLocationWarehouse clears the "to_location_warehouse" edge to the Warehouse entity.
func (atuo *AssetTransferUpdateOne) ClearToLocationWarehouse() *AssetTransferUpdateOne {
	atuo.mutation.ClearToLocationWarehouse()
	return atuo
}

// ClearOutOperateManager clears the "out_operate_manager" edge to the Manager entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateManager() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateManager()
	return atuo
}

// ClearOutOperateStore clears the "out_operate_store" edge to the Store entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateStore() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateStore()
	return atuo
}

// ClearOutOperateAgent clears the "out_operate_agent" edge to the Agent entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateAgent() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateAgent()
	return atuo
}

// ClearOutOperateMaintainer clears the "out_operate_maintainer" edge to the Maintainer entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateMaintainer() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateMaintainer()
	return atuo
}

// ClearOutOperateCabinet clears the "out_operate_cabinet" edge to the Cabinet entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateCabinet() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateCabinet()
	return atuo
}

// ClearOutOperateRider clears the "out_operate_rider" edge to the Rider entity.
func (atuo *AssetTransferUpdateOne) ClearOutOperateRider() *AssetTransferUpdateOne {
	atuo.mutation.ClearOutOperateRider()
	return atuo
}

// Where appends a list predicates to the AssetTransferUpdate builder.
func (atuo *AssetTransferUpdateOne) Where(ps ...predicate.AssetTransfer) *AssetTransferUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AssetTransferUpdateOne) Select(field string, fields ...string) *AssetTransferUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AssetTransfer entity.
func (atuo *AssetTransferUpdateOne) Save(ctx context.Context) (*AssetTransfer, error) {
	if err := atuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) SaveX(ctx context.Context) *AssetTransfer {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AssetTransferUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AssetTransferUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AssetTransferUpdateOne) defaults() error {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		if assettransfer.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atuo *AssetTransferUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferUpdateOne {
	atuo.modifiers = append(atuo.modifiers, modifiers...)
	return atuo
}

func (atuo *AssetTransferUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransfer, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransfer.Table, assettransfer.Columns, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransfer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransfer.FieldID)
		for _, f := range fields {
			if !assettransfer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransfer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
	}
	if atuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransfer.FieldDeletedAt, field.TypeTime)
	}
	if atuo.mutation.CreatorCleared() {
		_spec.ClearField(assettransfer.FieldCreator, field.TypeJSON)
	}
	if value, ok := atuo.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
	}
	if atuo.mutation.LastModifierCleared() {
		_spec.ClearField(assettransfer.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atuo.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
	}
	if atuo.mutation.RemarkCleared() {
		_spec.ClearField(assettransfer.FieldRemark, field.TypeString)
	}
	if value, ok := atuo.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedStatus(); ok {
		_spec.AddField(assettransfer.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
	}
	if value, ok := atuo.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedFromLocationType(); ok {
		_spec.AddField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.FromLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldFromLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedToLocationType(); ok {
		_spec.AddField(assettransfer.FieldToLocationType, field.TypeUint8, value)
	}
	if atuo.mutation.ToLocationTypeCleared() {
		_spec.ClearField(assettransfer.FieldToLocationType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedOutNum(); ok {
		_spec.AddField(assettransfer.FieldOutNum, field.TypeUint, value)
	}
	if atuo.mutation.OutNumCleared() {
		_spec.ClearField(assettransfer.FieldOutNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if value, ok := atuo.mutation.AddedInNum(); ok {
		_spec.AddField(assettransfer.FieldInNum, field.TypeUint, value)
	}
	if atuo.mutation.InNumCleared() {
		_spec.ClearField(assettransfer.FieldInNum, field.TypeUint)
	}
	if value, ok := atuo.mutation.OutOperateType(); ok {
		_spec.SetField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedOutOperateType(); ok {
		_spec.AddField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
	}
	if atuo.mutation.OutOperateTypeCleared() {
		_spec.ClearField(assettransfer.FieldOutOperateType, field.TypeUint8)
	}
	if value, ok := atuo.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
	}
	if atuo.mutation.OutTimeAtCleared() {
		_spec.ClearField(assettransfer.FieldOutTimeAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
	}
	if atuo.mutation.ReasonCleared() {
		_spec.ClearField(assettransfer.FieldReason, field.TypeString)
	}
	if value, ok := atuo.mutation.GetType(); ok {
		_spec.SetField(assettransfer.FieldType, field.TypeUint8, value)
	}
	if value, ok := atuo.mutation.AddedType(); ok {
		_spec.AddField(assettransfer.FieldType, field.TypeUint8, value)
	}
	if atuo.mutation.TypeCleared() {
		_spec.ClearField(assettransfer.FieldType, field.TypeUint8)
	}
	if atuo.mutation.TransferDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.RemovedTransferDetailsIDs(); len(nodes) > 0 && !atuo.mutation.TransferDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.TransferDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStoreTable,
			Columns: []string{assettransfer.FromLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStoreTable,
			Columns: []string{assettransfer.FromLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationCabinetTable,
			Columns: []string{assettransfer.FromLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationCabinetTable,
			Columns: []string{assettransfer.FromLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStationTable,
			Columns: []string{assettransfer.FromLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStationTable,
			Columns: []string{assettransfer.FromLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationRiderTable,
			Columns: []string{assettransfer.FromLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationRiderTable,
			Columns: []string{assettransfer.FromLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationOperatorTable,
			Columns: []string{assettransfer.FromLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationOperatorTable,
			Columns: []string{assettransfer.FromLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.FromLocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationWarehouseTable,
			Columns: []string{assettransfer.FromLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.FromLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationWarehouseTable,
			Columns: []string{assettransfer.FromLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStoreTable,
			Columns: []string{assettransfer.ToLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStoreTable,
			Columns: []string{assettransfer.ToLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationCabinetTable,
			Columns: []string{assettransfer.ToLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationCabinetTable,
			Columns: []string{assettransfer.ToLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationStationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStationTable,
			Columns: []string{assettransfer.ToLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStationTable,
			Columns: []string{assettransfer.ToLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationRiderTable,
			Columns: []string{assettransfer.ToLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationRiderTable,
			Columns: []string{assettransfer.ToLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationOperatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationOperatorTable,
			Columns: []string{assettransfer.ToLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationOperatorTable,
			Columns: []string{assettransfer.ToLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.ToLocationWarehouseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationWarehouseTable,
			Columns: []string{assettransfer.ToLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ToLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationWarehouseTable,
			Columns: []string{assettransfer.ToLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateStoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.OutOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OutOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atuo.modifiers...)
	_node = &AssetTransfer{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransfer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
