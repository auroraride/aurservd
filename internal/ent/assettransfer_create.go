// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/warehouse"
)

// AssetTransferCreate is the builder for creating a AssetTransfer entity.
type AssetTransferCreate struct {
	config
	mutation *AssetTransferMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (atc *AssetTransferCreate) SetCreatedAt(t time.Time) *AssetTransferCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableCreatedAt(t *time.Time) *AssetTransferCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *AssetTransferCreate) SetUpdatedAt(t time.Time) *AssetTransferCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableUpdatedAt(t *time.Time) *AssetTransferCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetDeletedAt sets the "deleted_at" field.
func (atc *AssetTransferCreate) SetDeletedAt(t time.Time) *AssetTransferCreate {
	atc.mutation.SetDeletedAt(t)
	return atc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableDeletedAt(t *time.Time) *AssetTransferCreate {
	if t != nil {
		atc.SetDeletedAt(*t)
	}
	return atc
}

// SetCreator sets the "creator" field.
func (atc *AssetTransferCreate) SetCreator(m *model.Modifier) *AssetTransferCreate {
	atc.mutation.SetCreator(m)
	return atc
}

// SetLastModifier sets the "last_modifier" field.
func (atc *AssetTransferCreate) SetLastModifier(m *model.Modifier) *AssetTransferCreate {
	atc.mutation.SetLastModifier(m)
	return atc
}

// SetRemark sets the "remark" field.
func (atc *AssetTransferCreate) SetRemark(s string) *AssetTransferCreate {
	atc.mutation.SetRemark(s)
	return atc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableRemark(s *string) *AssetTransferCreate {
	if s != nil {
		atc.SetRemark(*s)
	}
	return atc
}

// SetStatus sets the "status" field.
func (atc *AssetTransferCreate) SetStatus(u uint8) *AssetTransferCreate {
	atc.mutation.SetStatus(u)
	return atc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableStatus(u *uint8) *AssetTransferCreate {
	if u != nil {
		atc.SetStatus(*u)
	}
	return atc
}

// SetSn sets the "sn" field.
func (atc *AssetTransferCreate) SetSn(s string) *AssetTransferCreate {
	atc.mutation.SetSn(s)
	return atc
}

// SetFromLocationType sets the "from_location_type" field.
func (atc *AssetTransferCreate) SetFromLocationType(u uint8) *AssetTransferCreate {
	atc.mutation.SetFromLocationType(u)
	return atc
}

// SetNillableFromLocationType sets the "from_location_type" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationType(u *uint8) *AssetTransferCreate {
	if u != nil {
		atc.SetFromLocationType(*u)
	}
	return atc
}

// SetFromLocationID sets the "from_location_id" field.
func (atc *AssetTransferCreate) SetFromLocationID(u uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationID(u)
	return atc
}

// SetNillableFromLocationID sets the "from_location_id" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationID(u *uint64) *AssetTransferCreate {
	if u != nil {
		atc.SetFromLocationID(*u)
	}
	return atc
}

// SetToLocationType sets the "to_location_type" field.
func (atc *AssetTransferCreate) SetToLocationType(u uint8) *AssetTransferCreate {
	atc.mutation.SetToLocationType(u)
	return atc
}

// SetNillableToLocationType sets the "to_location_type" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationType(u *uint8) *AssetTransferCreate {
	if u != nil {
		atc.SetToLocationType(*u)
	}
	return atc
}

// SetToLocationID sets the "to_location_id" field.
func (atc *AssetTransferCreate) SetToLocationID(u uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationID(u)
	return atc
}

// SetNillableToLocationID sets the "to_location_id" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationID(u *uint64) *AssetTransferCreate {
	if u != nil {
		atc.SetToLocationID(*u)
	}
	return atc
}

// SetOutNum sets the "out_num" field.
func (atc *AssetTransferCreate) SetOutNum(u uint) *AssetTransferCreate {
	atc.mutation.SetOutNum(u)
	return atc
}

// SetNillableOutNum sets the "out_num" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutNum(u *uint) *AssetTransferCreate {
	if u != nil {
		atc.SetOutNum(*u)
	}
	return atc
}

// SetInNum sets the "in_num" field.
func (atc *AssetTransferCreate) SetInNum(u uint) *AssetTransferCreate {
	atc.mutation.SetInNum(u)
	return atc
}

// SetNillableInNum sets the "in_num" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableInNum(u *uint) *AssetTransferCreate {
	if u != nil {
		atc.SetInNum(*u)
	}
	return atc
}

// SetOutOperateID sets the "out_operate_id" field.
func (atc *AssetTransferCreate) SetOutOperateID(u uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateID(u)
	return atc
}

// SetNillableOutOperateID sets the "out_operate_id" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateID(u *uint64) *AssetTransferCreate {
	if u != nil {
		atc.SetOutOperateID(*u)
	}
	return atc
}

// SetOutOperateType sets the "out_operate_type" field.
func (atc *AssetTransferCreate) SetOutOperateType(u uint8) *AssetTransferCreate {
	atc.mutation.SetOutOperateType(u)
	return atc
}

// SetNillableOutOperateType sets the "out_operate_type" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateType(u *uint8) *AssetTransferCreate {
	if u != nil {
		atc.SetOutOperateType(*u)
	}
	return atc
}

// SetOutTimeAt sets the "out_time_at" field.
func (atc *AssetTransferCreate) SetOutTimeAt(t time.Time) *AssetTransferCreate {
	atc.mutation.SetOutTimeAt(t)
	return atc
}

// SetNillableOutTimeAt sets the "out_time_at" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutTimeAt(t *time.Time) *AssetTransferCreate {
	if t != nil {
		atc.SetOutTimeAt(*t)
	}
	return atc
}

// SetReason sets the "reason" field.
func (atc *AssetTransferCreate) SetReason(s string) *AssetTransferCreate {
	atc.mutation.SetReason(s)
	return atc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableReason(s *string) *AssetTransferCreate {
	if s != nil {
		atc.SetReason(*s)
	}
	return atc
}

// AddTransferDetailIDs adds the "transfer_details" edge to the AssetTransferDetails entity by IDs.
func (atc *AssetTransferCreate) AddTransferDetailIDs(ids ...uint64) *AssetTransferCreate {
	atc.mutation.AddTransferDetailIDs(ids...)
	return atc
}

// AddTransferDetails adds the "transfer_details" edges to the AssetTransferDetails entity.
func (atc *AssetTransferCreate) AddTransferDetails(a ...*AssetTransferDetails) *AssetTransferCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return atc.AddTransferDetailIDs(ids...)
}

// SetFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID.
func (atc *AssetTransferCreate) SetFromLocationStoreID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationStoreID(id)
	return atc
}

// SetNillableFromLocationStoreID sets the "from_location_store" edge to the Store entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationStoreID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationStoreID(*id)
	}
	return atc
}

// SetFromLocationStore sets the "from_location_store" edge to the Store entity.
func (atc *AssetTransferCreate) SetFromLocationStore(s *Store) *AssetTransferCreate {
	return atc.SetFromLocationStoreID(s.ID)
}

// SetFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID.
func (atc *AssetTransferCreate) SetFromLocationCabinetID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationCabinetID(id)
	return atc
}

// SetNillableFromLocationCabinetID sets the "from_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationCabinetID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationCabinetID(*id)
	}
	return atc
}

// SetFromLocationCabinet sets the "from_location_cabinet" edge to the Cabinet entity.
func (atc *AssetTransferCreate) SetFromLocationCabinet(c *Cabinet) *AssetTransferCreate {
	return atc.SetFromLocationCabinetID(c.ID)
}

// SetFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID.
func (atc *AssetTransferCreate) SetFromLocationStationID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationStationID(id)
	return atc
}

// SetNillableFromLocationStationID sets the "from_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationStationID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationStationID(*id)
	}
	return atc
}

// SetFromLocationStation sets the "from_location_station" edge to the EnterpriseStation entity.
func (atc *AssetTransferCreate) SetFromLocationStation(e *EnterpriseStation) *AssetTransferCreate {
	return atc.SetFromLocationStationID(e.ID)
}

// SetFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID.
func (atc *AssetTransferCreate) SetFromLocationRiderID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationRiderID(id)
	return atc
}

// SetNillableFromLocationRiderID sets the "from_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationRiderID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationRiderID(*id)
	}
	return atc
}

// SetFromLocationRider sets the "from_location_rider" edge to the Rider entity.
func (atc *AssetTransferCreate) SetFromLocationRider(r *Rider) *AssetTransferCreate {
	return atc.SetFromLocationRiderID(r.ID)
}

// SetFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID.
func (atc *AssetTransferCreate) SetFromLocationOperatorID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationOperatorID(id)
	return atc
}

// SetNillableFromLocationOperatorID sets the "from_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationOperatorID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationOperatorID(*id)
	}
	return atc
}

// SetFromLocationOperator sets the "from_location_operator" edge to the Maintainer entity.
func (atc *AssetTransferCreate) SetFromLocationOperator(m *Maintainer) *AssetTransferCreate {
	return atc.SetFromLocationOperatorID(m.ID)
}

// SetFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID.
func (atc *AssetTransferCreate) SetFromLocationWarehouseID(id uint64) *AssetTransferCreate {
	atc.mutation.SetFromLocationWarehouseID(id)
	return atc
}

// SetNillableFromLocationWarehouseID sets the "from_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableFromLocationWarehouseID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetFromLocationWarehouseID(*id)
	}
	return atc
}

// SetFromLocationWarehouse sets the "from_location_warehouse" edge to the Warehouse entity.
func (atc *AssetTransferCreate) SetFromLocationWarehouse(w *Warehouse) *AssetTransferCreate {
	return atc.SetFromLocationWarehouseID(w.ID)
}

// SetToLocationStoreID sets the "to_location_store" edge to the Store entity by ID.
func (atc *AssetTransferCreate) SetToLocationStoreID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationStoreID(id)
	return atc
}

// SetNillableToLocationStoreID sets the "to_location_store" edge to the Store entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationStoreID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationStoreID(*id)
	}
	return atc
}

// SetToLocationStore sets the "to_location_store" edge to the Store entity.
func (atc *AssetTransferCreate) SetToLocationStore(s *Store) *AssetTransferCreate {
	return atc.SetToLocationStoreID(s.ID)
}

// SetToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID.
func (atc *AssetTransferCreate) SetToLocationCabinetID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationCabinetID(id)
	return atc
}

// SetNillableToLocationCabinetID sets the "to_location_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationCabinetID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationCabinetID(*id)
	}
	return atc
}

// SetToLocationCabinet sets the "to_location_cabinet" edge to the Cabinet entity.
func (atc *AssetTransferCreate) SetToLocationCabinet(c *Cabinet) *AssetTransferCreate {
	return atc.SetToLocationCabinetID(c.ID)
}

// SetToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID.
func (atc *AssetTransferCreate) SetToLocationStationID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationStationID(id)
	return atc
}

// SetNillableToLocationStationID sets the "to_location_station" edge to the EnterpriseStation entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationStationID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationStationID(*id)
	}
	return atc
}

// SetToLocationStation sets the "to_location_station" edge to the EnterpriseStation entity.
func (atc *AssetTransferCreate) SetToLocationStation(e *EnterpriseStation) *AssetTransferCreate {
	return atc.SetToLocationStationID(e.ID)
}

// SetToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID.
func (atc *AssetTransferCreate) SetToLocationRiderID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationRiderID(id)
	return atc
}

// SetNillableToLocationRiderID sets the "to_location_rider" edge to the Rider entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationRiderID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationRiderID(*id)
	}
	return atc
}

// SetToLocationRider sets the "to_location_rider" edge to the Rider entity.
func (atc *AssetTransferCreate) SetToLocationRider(r *Rider) *AssetTransferCreate {
	return atc.SetToLocationRiderID(r.ID)
}

// SetToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID.
func (atc *AssetTransferCreate) SetToLocationOperatorID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationOperatorID(id)
	return atc
}

// SetNillableToLocationOperatorID sets the "to_location_operator" edge to the Maintainer entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationOperatorID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationOperatorID(*id)
	}
	return atc
}

// SetToLocationOperator sets the "to_location_operator" edge to the Maintainer entity.
func (atc *AssetTransferCreate) SetToLocationOperator(m *Maintainer) *AssetTransferCreate {
	return atc.SetToLocationOperatorID(m.ID)
}

// SetToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID.
func (atc *AssetTransferCreate) SetToLocationWarehouseID(id uint64) *AssetTransferCreate {
	atc.mutation.SetToLocationWarehouseID(id)
	return atc
}

// SetNillableToLocationWarehouseID sets the "to_location_warehouse" edge to the Warehouse entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableToLocationWarehouseID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetToLocationWarehouseID(*id)
	}
	return atc
}

// SetToLocationWarehouse sets the "to_location_warehouse" edge to the Warehouse entity.
func (atc *AssetTransferCreate) SetToLocationWarehouse(w *Warehouse) *AssetTransferCreate {
	return atc.SetToLocationWarehouseID(w.ID)
}

// SetOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID.
func (atc *AssetTransferCreate) SetOutOperateManagerID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateManagerID(id)
	return atc
}

// SetNillableOutOperateManagerID sets the "out_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateManagerID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateManagerID(*id)
	}
	return atc
}

// SetOutOperateManager sets the "out_operate_manager" edge to the Manager entity.
func (atc *AssetTransferCreate) SetOutOperateManager(m *Manager) *AssetTransferCreate {
	return atc.SetOutOperateManagerID(m.ID)
}

// SetOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID.
func (atc *AssetTransferCreate) SetOutOperateStoreID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateStoreID(id)
	return atc
}

// SetNillableOutOperateStoreID sets the "out_operate_store" edge to the Store entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateStoreID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateStoreID(*id)
	}
	return atc
}

// SetOutOperateStore sets the "out_operate_store" edge to the Store entity.
func (atc *AssetTransferCreate) SetOutOperateStore(s *Store) *AssetTransferCreate {
	return atc.SetOutOperateStoreID(s.ID)
}

// SetOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID.
func (atc *AssetTransferCreate) SetOutOperateAgentID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateAgentID(id)
	return atc
}

// SetNillableOutOperateAgentID sets the "out_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateAgentID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateAgentID(*id)
	}
	return atc
}

// SetOutOperateAgent sets the "out_operate_agent" edge to the Agent entity.
func (atc *AssetTransferCreate) SetOutOperateAgent(a *Agent) *AssetTransferCreate {
	return atc.SetOutOperateAgentID(a.ID)
}

// SetOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID.
func (atc *AssetTransferCreate) SetOutOperateMaintainerID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateMaintainerID(id)
	return atc
}

// SetNillableOutOperateMaintainerID sets the "out_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateMaintainerID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateMaintainerID(*id)
	}
	return atc
}

// SetOutOperateMaintainer sets the "out_operate_maintainer" edge to the Maintainer entity.
func (atc *AssetTransferCreate) SetOutOperateMaintainer(m *Maintainer) *AssetTransferCreate {
	return atc.SetOutOperateMaintainerID(m.ID)
}

// SetOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID.
func (atc *AssetTransferCreate) SetOutOperateCabinetID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateCabinetID(id)
	return atc
}

// SetNillableOutOperateCabinetID sets the "out_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateCabinetID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateCabinetID(*id)
	}
	return atc
}

// SetOutOperateCabinet sets the "out_operate_cabinet" edge to the Cabinet entity.
func (atc *AssetTransferCreate) SetOutOperateCabinet(c *Cabinet) *AssetTransferCreate {
	return atc.SetOutOperateCabinetID(c.ID)
}

// SetOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID.
func (atc *AssetTransferCreate) SetOutOperateRiderID(id uint64) *AssetTransferCreate {
	atc.mutation.SetOutOperateRiderID(id)
	return atc
}

// SetNillableOutOperateRiderID sets the "out_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atc *AssetTransferCreate) SetNillableOutOperateRiderID(id *uint64) *AssetTransferCreate {
	if id != nil {
		atc = atc.SetOutOperateRiderID(*id)
	}
	return atc
}

// SetOutOperateRider sets the "out_operate_rider" edge to the Rider entity.
func (atc *AssetTransferCreate) SetOutOperateRider(r *Rider) *AssetTransferCreate {
	return atc.SetOutOperateRiderID(r.ID)
}

// Mutation returns the AssetTransferMutation object of the builder.
func (atc *AssetTransferCreate) Mutation() *AssetTransferMutation {
	return atc.mutation
}

// Save creates the AssetTransfer in the database.
func (atc *AssetTransferCreate) Save(ctx context.Context) (*AssetTransfer, error) {
	if err := atc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AssetTransferCreate) SaveX(ctx context.Context) *AssetTransfer {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AssetTransferCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AssetTransferCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AssetTransferCreate) defaults() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		if assettransfer.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		if assettransfer.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransfer.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransfer.DefaultUpdatedAt()
		atc.mutation.SetUpdatedAt(v)
	}
	if _, ok := atc.mutation.Status(); !ok {
		v := assettransfer.DefaultStatus
		atc.mutation.SetStatus(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atc *AssetTransferCreate) check() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetTransfer.created_at"`)}
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetTransfer.updated_at"`)}
	}
	if _, ok := atc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AssetTransfer.status"`)}
	}
	if _, ok := atc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "AssetTransfer.sn"`)}
	}
	return nil
}

func (atc *AssetTransferCreate) sqlSave(ctx context.Context) (*AssetTransfer, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AssetTransferCreate) createSpec() (*AssetTransfer, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetTransfer{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(assettransfer.Table, sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = atc.conflict
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(assettransfer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransfer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := atc.mutation.DeletedAt(); ok {
		_spec.SetField(assettransfer.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := atc.mutation.Creator(); ok {
		_spec.SetField(assettransfer.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := atc.mutation.LastModifier(); ok {
		_spec.SetField(assettransfer.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := atc.mutation.Remark(); ok {
		_spec.SetField(assettransfer.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := atc.mutation.Status(); ok {
		_spec.SetField(assettransfer.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := atc.mutation.Sn(); ok {
		_spec.SetField(assettransfer.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := atc.mutation.FromLocationType(); ok {
		_spec.SetField(assettransfer.FieldFromLocationType, field.TypeUint8, value)
		_node.FromLocationType = &value
	}
	if value, ok := atc.mutation.ToLocationType(); ok {
		_spec.SetField(assettransfer.FieldToLocationType, field.TypeUint8, value)
		_node.ToLocationType = value
	}
	if value, ok := atc.mutation.OutNum(); ok {
		_spec.SetField(assettransfer.FieldOutNum, field.TypeUint, value)
		_node.OutNum = value
	}
	if value, ok := atc.mutation.InNum(); ok {
		_spec.SetField(assettransfer.FieldInNum, field.TypeUint, value)
		_node.InNum = value
	}
	if value, ok := atc.mutation.OutOperateType(); ok {
		_spec.SetField(assettransfer.FieldOutOperateType, field.TypeUint8, value)
		_node.OutOperateType = &value
	}
	if value, ok := atc.mutation.OutTimeAt(); ok {
		_spec.SetField(assettransfer.FieldOutTimeAt, field.TypeTime, value)
		_node.OutTimeAt = &value
	}
	if value, ok := atc.mutation.Reason(); ok {
		_spec.SetField(assettransfer.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if nodes := atc.mutation.TransferDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assettransfer.TransferDetailsTable,
			Columns: []string{assettransfer.TransferDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStoreTable,
			Columns: []string{assettransfer.FromLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationCabinetTable,
			Columns: []string{assettransfer.FromLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationStationTable,
			Columns: []string{assettransfer.FromLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationRiderTable,
			Columns: []string{assettransfer.FromLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationOperatorTable,
			Columns: []string{assettransfer.FromLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.FromLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.FromLocationWarehouseTable,
			Columns: []string{assettransfer.FromLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromLocationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStoreTable,
			Columns: []string{assettransfer.ToLocationStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationCabinetTable,
			Columns: []string{assettransfer.ToLocationCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationStationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationStationTable,
			Columns: []string{assettransfer.ToLocationStationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enterprisestation.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationRiderTable,
			Columns: []string{assettransfer.ToLocationRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationOperatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationOperatorTable,
			Columns: []string{assettransfer.ToLocationOperatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ToLocationWarehouseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.ToLocationWarehouseTable,
			Columns: []string{assettransfer.ToLocationWarehouseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(warehouse.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToLocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateManagerTable,
			Columns: []string{assettransfer.OutOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateStoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateStoreTable,
			Columns: []string{assettransfer.OutOperateStoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(store.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateAgentTable,
			Columns: []string{assettransfer.OutOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateMaintainerTable,
			Columns: []string{assettransfer.OutOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateCabinetTable,
			Columns: []string{assettransfer.OutOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.OutOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransfer.OutOperateRiderTable,
			Columns: []string{assettransfer.OutOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OutOperateID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetTransfer.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (atc *AssetTransferCreate) OnConflict(opts ...sql.ConflictOption) *AssetTransferUpsertOne {
	atc.conflict = opts
	return &AssetTransferUpsertOne{
		create: atc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atc *AssetTransferCreate) OnConflictColumns(columns ...string) *AssetTransferUpsertOne {
	atc.conflict = append(atc.conflict, sql.ConflictColumns(columns...))
	return &AssetTransferUpsertOne{
		create: atc,
	}
}

type (
	// AssetTransferUpsertOne is the builder for "upsert"-ing
	//  one AssetTransfer node.
	AssetTransferUpsertOne struct {
		create *AssetTransferCreate
	}

	// AssetTransferUpsert is the "OnConflict" setter.
	AssetTransferUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferUpsert) SetUpdatedAt(v time.Time) *AssetTransferUpsert {
	u.Set(assettransfer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateUpdatedAt() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferUpsert) SetDeletedAt(v time.Time) *AssetTransferUpsert {
	u.Set(assettransfer.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateDeletedAt() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferUpsert) ClearDeletedAt() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferUpsert) SetLastModifier(v *model.Modifier) *AssetTransferUpsert {
	u.Set(assettransfer.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateLastModifier() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferUpsert) ClearLastModifier() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *AssetTransferUpsert) SetRemark(v string) *AssetTransferUpsert {
	u.Set(assettransfer.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateRemark() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferUpsert) ClearRemark() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldRemark)
	return u
}

// SetStatus sets the "status" field.
func (u *AssetTransferUpsert) SetStatus(v uint8) *AssetTransferUpsert {
	u.Set(assettransfer.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateStatus() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *AssetTransferUpsert) AddStatus(v uint8) *AssetTransferUpsert {
	u.Add(assettransfer.FieldStatus, v)
	return u
}

// SetSn sets the "sn" field.
func (u *AssetTransferUpsert) SetSn(v string) *AssetTransferUpsert {
	u.Set(assettransfer.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateSn() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldSn)
	return u
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetTransferUpsert) SetFromLocationType(v uint8) *AssetTransferUpsert {
	u.Set(assettransfer.FieldFromLocationType, v)
	return u
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateFromLocationType() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldFromLocationType)
	return u
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetTransferUpsert) AddFromLocationType(v uint8) *AssetTransferUpsert {
	u.Add(assettransfer.FieldFromLocationType, v)
	return u
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (u *AssetTransferUpsert) ClearFromLocationType() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldFromLocationType)
	return u
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetTransferUpsert) SetFromLocationID(v uint64) *AssetTransferUpsert {
	u.Set(assettransfer.FieldFromLocationID, v)
	return u
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateFromLocationID() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldFromLocationID)
	return u
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (u *AssetTransferUpsert) ClearFromLocationID() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldFromLocationID)
	return u
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetTransferUpsert) SetToLocationType(v uint8) *AssetTransferUpsert {
	u.Set(assettransfer.FieldToLocationType, v)
	return u
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateToLocationType() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldToLocationType)
	return u
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetTransferUpsert) AddToLocationType(v uint8) *AssetTransferUpsert {
	u.Add(assettransfer.FieldToLocationType, v)
	return u
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (u *AssetTransferUpsert) ClearToLocationType() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldToLocationType)
	return u
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetTransferUpsert) SetToLocationID(v uint64) *AssetTransferUpsert {
	u.Set(assettransfer.FieldToLocationID, v)
	return u
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateToLocationID() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldToLocationID)
	return u
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (u *AssetTransferUpsert) ClearToLocationID() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldToLocationID)
	return u
}

// SetOutNum sets the "out_num" field.
func (u *AssetTransferUpsert) SetOutNum(v uint) *AssetTransferUpsert {
	u.Set(assettransfer.FieldOutNum, v)
	return u
}

// UpdateOutNum sets the "out_num" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateOutNum() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldOutNum)
	return u
}

// AddOutNum adds v to the "out_num" field.
func (u *AssetTransferUpsert) AddOutNum(v uint) *AssetTransferUpsert {
	u.Add(assettransfer.FieldOutNum, v)
	return u
}

// ClearOutNum clears the value of the "out_num" field.
func (u *AssetTransferUpsert) ClearOutNum() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldOutNum)
	return u
}

// SetInNum sets the "in_num" field.
func (u *AssetTransferUpsert) SetInNum(v uint) *AssetTransferUpsert {
	u.Set(assettransfer.FieldInNum, v)
	return u
}

// UpdateInNum sets the "in_num" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateInNum() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldInNum)
	return u
}

// AddInNum adds v to the "in_num" field.
func (u *AssetTransferUpsert) AddInNum(v uint) *AssetTransferUpsert {
	u.Add(assettransfer.FieldInNum, v)
	return u
}

// ClearInNum clears the value of the "in_num" field.
func (u *AssetTransferUpsert) ClearInNum() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldInNum)
	return u
}

// SetOutOperateID sets the "out_operate_id" field.
func (u *AssetTransferUpsert) SetOutOperateID(v uint64) *AssetTransferUpsert {
	u.Set(assettransfer.FieldOutOperateID, v)
	return u
}

// UpdateOutOperateID sets the "out_operate_id" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateOutOperateID() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldOutOperateID)
	return u
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (u *AssetTransferUpsert) ClearOutOperateID() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldOutOperateID)
	return u
}

// SetOutOperateType sets the "out_operate_type" field.
func (u *AssetTransferUpsert) SetOutOperateType(v uint8) *AssetTransferUpsert {
	u.Set(assettransfer.FieldOutOperateType, v)
	return u
}

// UpdateOutOperateType sets the "out_operate_type" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateOutOperateType() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldOutOperateType)
	return u
}

// AddOutOperateType adds v to the "out_operate_type" field.
func (u *AssetTransferUpsert) AddOutOperateType(v uint8) *AssetTransferUpsert {
	u.Add(assettransfer.FieldOutOperateType, v)
	return u
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (u *AssetTransferUpsert) ClearOutOperateType() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldOutOperateType)
	return u
}

// SetOutTimeAt sets the "out_time_at" field.
func (u *AssetTransferUpsert) SetOutTimeAt(v time.Time) *AssetTransferUpsert {
	u.Set(assettransfer.FieldOutTimeAt, v)
	return u
}

// UpdateOutTimeAt sets the "out_time_at" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateOutTimeAt() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldOutTimeAt)
	return u
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (u *AssetTransferUpsert) ClearOutTimeAt() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldOutTimeAt)
	return u
}

// SetReason sets the "reason" field.
func (u *AssetTransferUpsert) SetReason(v string) *AssetTransferUpsert {
	u.Set(assettransfer.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssetTransferUpsert) UpdateReason() *AssetTransferUpsert {
	u.SetExcluded(assettransfer.FieldReason)
	return u
}

// ClearReason clears the value of the "reason" field.
func (u *AssetTransferUpsert) ClearReason() *AssetTransferUpsert {
	u.SetNull(assettransfer.FieldReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetTransferUpsertOne) UpdateNewValues() *AssetTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(assettransfer.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(assettransfer.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AssetTransferUpsertOne) Ignore() *AssetTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetTransferUpsertOne) DoNothing() *AssetTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetTransferCreate.OnConflict
// documentation for more info.
func (u *AssetTransferUpsertOne) Update(set func(*AssetTransferUpsert)) *AssetTransferUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferUpsertOne) SetUpdatedAt(v time.Time) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateUpdatedAt() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferUpsertOne) SetDeletedAt(v time.Time) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateDeletedAt() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferUpsertOne) ClearDeletedAt() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferUpsertOne) SetLastModifier(v *model.Modifier) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateLastModifier() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferUpsertOne) ClearLastModifier() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetTransferUpsertOne) SetRemark(v string) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateRemark() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferUpsertOne) ClearRemark() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *AssetTransferUpsertOne) SetStatus(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetTransferUpsertOne) AddStatus(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateStatus() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateStatus()
	})
}

// SetSn sets the "sn" field.
func (u *AssetTransferUpsertOne) SetSn(v string) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateSn() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateSn()
	})
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetTransferUpsertOne) SetFromLocationType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetFromLocationType(v)
	})
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetTransferUpsertOne) AddFromLocationType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddFromLocationType(v)
	})
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateFromLocationType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateFromLocationType()
	})
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (u *AssetTransferUpsertOne) ClearFromLocationType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearFromLocationType()
	})
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetTransferUpsertOne) SetFromLocationID(v uint64) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetFromLocationID(v)
	})
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateFromLocationID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateFromLocationID()
	})
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (u *AssetTransferUpsertOne) ClearFromLocationID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearFromLocationID()
	})
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetTransferUpsertOne) SetToLocationType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetToLocationType(v)
	})
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetTransferUpsertOne) AddToLocationType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddToLocationType(v)
	})
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateToLocationType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateToLocationType()
	})
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (u *AssetTransferUpsertOne) ClearToLocationType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearToLocationType()
	})
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetTransferUpsertOne) SetToLocationID(v uint64) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetToLocationID(v)
	})
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateToLocationID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateToLocationID()
	})
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (u *AssetTransferUpsertOne) ClearToLocationID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearToLocationID()
	})
}

// SetOutNum sets the "out_num" field.
func (u *AssetTransferUpsertOne) SetOutNum(v uint) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutNum(v)
	})
}

// AddOutNum adds v to the "out_num" field.
func (u *AssetTransferUpsertOne) AddOutNum(v uint) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddOutNum(v)
	})
}

// UpdateOutNum sets the "out_num" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateOutNum() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutNum()
	})
}

// ClearOutNum clears the value of the "out_num" field.
func (u *AssetTransferUpsertOne) ClearOutNum() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutNum()
	})
}

// SetInNum sets the "in_num" field.
func (u *AssetTransferUpsertOne) SetInNum(v uint) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetInNum(v)
	})
}

// AddInNum adds v to the "in_num" field.
func (u *AssetTransferUpsertOne) AddInNum(v uint) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddInNum(v)
	})
}

// UpdateInNum sets the "in_num" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateInNum() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateInNum()
	})
}

// ClearInNum clears the value of the "in_num" field.
func (u *AssetTransferUpsertOne) ClearInNum() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearInNum()
	})
}

// SetOutOperateID sets the "out_operate_id" field.
func (u *AssetTransferUpsertOne) SetOutOperateID(v uint64) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutOperateID(v)
	})
}

// UpdateOutOperateID sets the "out_operate_id" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateOutOperateID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutOperateID()
	})
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (u *AssetTransferUpsertOne) ClearOutOperateID() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutOperateID()
	})
}

// SetOutOperateType sets the "out_operate_type" field.
func (u *AssetTransferUpsertOne) SetOutOperateType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutOperateType(v)
	})
}

// AddOutOperateType adds v to the "out_operate_type" field.
func (u *AssetTransferUpsertOne) AddOutOperateType(v uint8) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddOutOperateType(v)
	})
}

// UpdateOutOperateType sets the "out_operate_type" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateOutOperateType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutOperateType()
	})
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (u *AssetTransferUpsertOne) ClearOutOperateType() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutOperateType()
	})
}

// SetOutTimeAt sets the "out_time_at" field.
func (u *AssetTransferUpsertOne) SetOutTimeAt(v time.Time) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutTimeAt(v)
	})
}

// UpdateOutTimeAt sets the "out_time_at" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateOutTimeAt() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutTimeAt()
	})
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (u *AssetTransferUpsertOne) ClearOutTimeAt() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutTimeAt()
	})
}

// SetReason sets the "reason" field.
func (u *AssetTransferUpsertOne) SetReason(v string) *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssetTransferUpsertOne) UpdateReason() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *AssetTransferUpsertOne) ClearReason() *AssetTransferUpsertOne {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearReason()
	})
}

// Exec executes the query.
func (u *AssetTransferUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetTransferCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetTransferUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AssetTransferUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AssetTransferUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AssetTransferCreateBulk is the builder for creating many AssetTransfer entities in bulk.
type AssetTransferCreateBulk struct {
	config
	err      error
	builders []*AssetTransferCreate
	conflict []sql.ConflictOption
}

// Save creates the AssetTransfer entities in the database.
func (atcb *AssetTransferCreateBulk) Save(ctx context.Context) ([]*AssetTransfer, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AssetTransfer, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetTransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = atcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AssetTransferCreateBulk) SaveX(ctx context.Context) []*AssetTransfer {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AssetTransferCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AssetTransferCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AssetTransfer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AssetTransferUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (atcb *AssetTransferCreateBulk) OnConflict(opts ...sql.ConflictOption) *AssetTransferUpsertBulk {
	atcb.conflict = opts
	return &AssetTransferUpsertBulk{
		create: atcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (atcb *AssetTransferCreateBulk) OnConflictColumns(columns ...string) *AssetTransferUpsertBulk {
	atcb.conflict = append(atcb.conflict, sql.ConflictColumns(columns...))
	return &AssetTransferUpsertBulk{
		create: atcb,
	}
}

// AssetTransferUpsertBulk is the builder for "upsert"-ing
// a bulk of AssetTransfer nodes.
type AssetTransferUpsertBulk struct {
	create *AssetTransferCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AssetTransferUpsertBulk) UpdateNewValues() *AssetTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(assettransfer.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(assettransfer.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AssetTransfer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AssetTransferUpsertBulk) Ignore() *AssetTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AssetTransferUpsertBulk) DoNothing() *AssetTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AssetTransferCreateBulk.OnConflict
// documentation for more info.
func (u *AssetTransferUpsertBulk) Update(set func(*AssetTransferUpsert)) *AssetTransferUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AssetTransferUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AssetTransferUpsertBulk) SetUpdatedAt(v time.Time) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateUpdatedAt() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AssetTransferUpsertBulk) SetDeletedAt(v time.Time) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateDeletedAt() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AssetTransferUpsertBulk) ClearDeletedAt() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *AssetTransferUpsertBulk) SetLastModifier(v *model.Modifier) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateLastModifier() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *AssetTransferUpsertBulk) ClearLastModifier() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *AssetTransferUpsertBulk) SetRemark(v string) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateRemark() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AssetTransferUpsertBulk) ClearRemark() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearRemark()
	})
}

// SetStatus sets the "status" field.
func (u *AssetTransferUpsertBulk) SetStatus(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *AssetTransferUpsertBulk) AddStatus(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateStatus() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateStatus()
	})
}

// SetSn sets the "sn" field.
func (u *AssetTransferUpsertBulk) SetSn(v string) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateSn() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateSn()
	})
}

// SetFromLocationType sets the "from_location_type" field.
func (u *AssetTransferUpsertBulk) SetFromLocationType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetFromLocationType(v)
	})
}

// AddFromLocationType adds v to the "from_location_type" field.
func (u *AssetTransferUpsertBulk) AddFromLocationType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddFromLocationType(v)
	})
}

// UpdateFromLocationType sets the "from_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateFromLocationType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateFromLocationType()
	})
}

// ClearFromLocationType clears the value of the "from_location_type" field.
func (u *AssetTransferUpsertBulk) ClearFromLocationType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearFromLocationType()
	})
}

// SetFromLocationID sets the "from_location_id" field.
func (u *AssetTransferUpsertBulk) SetFromLocationID(v uint64) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetFromLocationID(v)
	})
}

// UpdateFromLocationID sets the "from_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateFromLocationID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateFromLocationID()
	})
}

// ClearFromLocationID clears the value of the "from_location_id" field.
func (u *AssetTransferUpsertBulk) ClearFromLocationID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearFromLocationID()
	})
}

// SetToLocationType sets the "to_location_type" field.
func (u *AssetTransferUpsertBulk) SetToLocationType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetToLocationType(v)
	})
}

// AddToLocationType adds v to the "to_location_type" field.
func (u *AssetTransferUpsertBulk) AddToLocationType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddToLocationType(v)
	})
}

// UpdateToLocationType sets the "to_location_type" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateToLocationType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateToLocationType()
	})
}

// ClearToLocationType clears the value of the "to_location_type" field.
func (u *AssetTransferUpsertBulk) ClearToLocationType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearToLocationType()
	})
}

// SetToLocationID sets the "to_location_id" field.
func (u *AssetTransferUpsertBulk) SetToLocationID(v uint64) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetToLocationID(v)
	})
}

// UpdateToLocationID sets the "to_location_id" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateToLocationID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateToLocationID()
	})
}

// ClearToLocationID clears the value of the "to_location_id" field.
func (u *AssetTransferUpsertBulk) ClearToLocationID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearToLocationID()
	})
}

// SetOutNum sets the "out_num" field.
func (u *AssetTransferUpsertBulk) SetOutNum(v uint) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutNum(v)
	})
}

// AddOutNum adds v to the "out_num" field.
func (u *AssetTransferUpsertBulk) AddOutNum(v uint) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddOutNum(v)
	})
}

// UpdateOutNum sets the "out_num" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateOutNum() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutNum()
	})
}

// ClearOutNum clears the value of the "out_num" field.
func (u *AssetTransferUpsertBulk) ClearOutNum() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutNum()
	})
}

// SetInNum sets the "in_num" field.
func (u *AssetTransferUpsertBulk) SetInNum(v uint) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetInNum(v)
	})
}

// AddInNum adds v to the "in_num" field.
func (u *AssetTransferUpsertBulk) AddInNum(v uint) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddInNum(v)
	})
}

// UpdateInNum sets the "in_num" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateInNum() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateInNum()
	})
}

// ClearInNum clears the value of the "in_num" field.
func (u *AssetTransferUpsertBulk) ClearInNum() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearInNum()
	})
}

// SetOutOperateID sets the "out_operate_id" field.
func (u *AssetTransferUpsertBulk) SetOutOperateID(v uint64) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutOperateID(v)
	})
}

// UpdateOutOperateID sets the "out_operate_id" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateOutOperateID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutOperateID()
	})
}

// ClearOutOperateID clears the value of the "out_operate_id" field.
func (u *AssetTransferUpsertBulk) ClearOutOperateID() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutOperateID()
	})
}

// SetOutOperateType sets the "out_operate_type" field.
func (u *AssetTransferUpsertBulk) SetOutOperateType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutOperateType(v)
	})
}

// AddOutOperateType adds v to the "out_operate_type" field.
func (u *AssetTransferUpsertBulk) AddOutOperateType(v uint8) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.AddOutOperateType(v)
	})
}

// UpdateOutOperateType sets the "out_operate_type" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateOutOperateType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutOperateType()
	})
}

// ClearOutOperateType clears the value of the "out_operate_type" field.
func (u *AssetTransferUpsertBulk) ClearOutOperateType() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutOperateType()
	})
}

// SetOutTimeAt sets the "out_time_at" field.
func (u *AssetTransferUpsertBulk) SetOutTimeAt(v time.Time) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetOutTimeAt(v)
	})
}

// UpdateOutTimeAt sets the "out_time_at" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateOutTimeAt() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateOutTimeAt()
	})
}

// ClearOutTimeAt clears the value of the "out_time_at" field.
func (u *AssetTransferUpsertBulk) ClearOutTimeAt() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearOutTimeAt()
	})
}

// SetReason sets the "reason" field.
func (u *AssetTransferUpsertBulk) SetReason(v string) *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *AssetTransferUpsertBulk) UpdateReason() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.UpdateReason()
	})
}

// ClearReason clears the value of the "reason" field.
func (u *AssetTransferUpsertBulk) ClearReason() *AssetTransferUpsertBulk {
	return u.Update(func(s *AssetTransferUpsert) {
		s.ClearReason()
	})
}

// Exec executes the query.
func (u *AssetTransferUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AssetTransferCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AssetTransferCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AssetTransferUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
