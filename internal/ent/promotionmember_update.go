// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionbankcard"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionmembercommission"
	"github.com/auroraride/aurservd/internal/ent/promotionperson"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// PromotionMemberUpdate is the builder for updating PromotionMember entities.
type PromotionMemberUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionMemberUpdate builder.
func (pmu *PromotionMemberUpdate) Where(ps ...predicate.PromotionMember) *PromotionMemberUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *PromotionMemberUpdate) SetUpdatedAt(t time.Time) *PromotionMemberUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// SetDeletedAt sets the "deleted_at" field.
func (pmu *PromotionMemberUpdate) SetDeletedAt(t time.Time) *PromotionMemberUpdate {
	pmu.mutation.SetDeletedAt(t)
	return pmu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableDeletedAt(t *time.Time) *PromotionMemberUpdate {
	if t != nil {
		pmu.SetDeletedAt(*t)
	}
	return pmu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmu *PromotionMemberUpdate) ClearDeletedAt() *PromotionMemberUpdate {
	pmu.mutation.ClearDeletedAt()
	return pmu
}

// SetLastModifier sets the "last_modifier" field.
func (pmu *PromotionMemberUpdate) SetLastModifier(m *model.Modifier) *PromotionMemberUpdate {
	pmu.mutation.SetLastModifier(m)
	return pmu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pmu *PromotionMemberUpdate) ClearLastModifier() *PromotionMemberUpdate {
	pmu.mutation.ClearLastModifier()
	return pmu
}

// SetRemark sets the "remark" field.
func (pmu *PromotionMemberUpdate) SetRemark(s string) *PromotionMemberUpdate {
	pmu.mutation.SetRemark(s)
	return pmu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableRemark(s *string) *PromotionMemberUpdate {
	if s != nil {
		pmu.SetRemark(*s)
	}
	return pmu
}

// ClearRemark clears the value of the "remark" field.
func (pmu *PromotionMemberUpdate) ClearRemark() *PromotionMemberUpdate {
	pmu.mutation.ClearRemark()
	return pmu
}

// SetRiderID sets the "rider_id" field.
func (pmu *PromotionMemberUpdate) SetRiderID(u uint64) *PromotionMemberUpdate {
	pmu.mutation.SetRiderID(u)
	return pmu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableRiderID(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetRiderID(*u)
	}
	return pmu
}

// ClearRiderID clears the value of the "rider_id" field.
func (pmu *PromotionMemberUpdate) ClearRiderID() *PromotionMemberUpdate {
	pmu.mutation.ClearRiderID()
	return pmu
}

// SetSubscribeID sets the "subscribe_id" field.
func (pmu *PromotionMemberUpdate) SetSubscribeID(u uint64) *PromotionMemberUpdate {
	pmu.mutation.SetSubscribeID(u)
	return pmu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableSubscribeID(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetSubscribeID(*u)
	}
	return pmu
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (pmu *PromotionMemberUpdate) ClearSubscribeID() *PromotionMemberUpdate {
	pmu.mutation.ClearSubscribeID()
	return pmu
}

// SetLevelID sets the "level_id" field.
func (pmu *PromotionMemberUpdate) SetLevelID(u uint64) *PromotionMemberUpdate {
	pmu.mutation.SetLevelID(u)
	return pmu
}

// SetNillableLevelID sets the "level_id" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableLevelID(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetLevelID(*u)
	}
	return pmu
}

// ClearLevelID clears the value of the "level_id" field.
func (pmu *PromotionMemberUpdate) ClearLevelID() *PromotionMemberUpdate {
	pmu.mutation.ClearLevelID()
	return pmu
}

// SetPhone sets the "phone" field.
func (pmu *PromotionMemberUpdate) SetPhone(s string) *PromotionMemberUpdate {
	pmu.mutation.SetPhone(s)
	return pmu
}

// SetName sets the "name" field.
func (pmu *PromotionMemberUpdate) SetName(s string) *PromotionMemberUpdate {
	pmu.mutation.SetName(s)
	return pmu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableName(s *string) *PromotionMemberUpdate {
	if s != nil {
		pmu.SetName(*s)
	}
	return pmu
}

// ClearName clears the value of the "name" field.
func (pmu *PromotionMemberUpdate) ClearName() *PromotionMemberUpdate {
	pmu.mutation.ClearName()
	return pmu
}

// SetBalance sets the "balance" field.
func (pmu *PromotionMemberUpdate) SetBalance(f float64) *PromotionMemberUpdate {
	pmu.mutation.ResetBalance()
	pmu.mutation.SetBalance(f)
	return pmu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableBalance(f *float64) *PromotionMemberUpdate {
	if f != nil {
		pmu.SetBalance(*f)
	}
	return pmu
}

// AddBalance adds f to the "balance" field.
func (pmu *PromotionMemberUpdate) AddBalance(f float64) *PromotionMemberUpdate {
	pmu.mutation.AddBalance(f)
	return pmu
}

// SetFrozen sets the "frozen" field.
func (pmu *PromotionMemberUpdate) SetFrozen(f float64) *PromotionMemberUpdate {
	pmu.mutation.ResetFrozen()
	pmu.mutation.SetFrozen(f)
	return pmu
}

// SetNillableFrozen sets the "frozen" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableFrozen(f *float64) *PromotionMemberUpdate {
	if f != nil {
		pmu.SetFrozen(*f)
	}
	return pmu
}

// AddFrozen adds f to the "frozen" field.
func (pmu *PromotionMemberUpdate) AddFrozen(f float64) *PromotionMemberUpdate {
	pmu.mutation.AddFrozen(f)
	return pmu
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (pmu *PromotionMemberUpdate) SetTotalGrowthValue(u uint64) *PromotionMemberUpdate {
	pmu.mutation.ResetTotalGrowthValue()
	pmu.mutation.SetTotalGrowthValue(u)
	return pmu
}

// SetNillableTotalGrowthValue sets the "total_growth_value" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableTotalGrowthValue(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetTotalGrowthValue(*u)
	}
	return pmu
}

// AddTotalGrowthValue adds u to the "total_growth_value" field.
func (pmu *PromotionMemberUpdate) AddTotalGrowthValue(u int64) *PromotionMemberUpdate {
	pmu.mutation.AddTotalGrowthValue(u)
	return pmu
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (pmu *PromotionMemberUpdate) SetCurrentGrowthValue(u uint64) *PromotionMemberUpdate {
	pmu.mutation.ResetCurrentGrowthValue()
	pmu.mutation.SetCurrentGrowthValue(u)
	return pmu
}

// SetNillableCurrentGrowthValue sets the "current_growth_value" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableCurrentGrowthValue(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetCurrentGrowthValue(*u)
	}
	return pmu
}

// AddCurrentGrowthValue adds u to the "current_growth_value" field.
func (pmu *PromotionMemberUpdate) AddCurrentGrowthValue(u int64) *PromotionMemberUpdate {
	pmu.mutation.AddCurrentGrowthValue(u)
	return pmu
}

// SetEnable sets the "enable" field.
func (pmu *PromotionMemberUpdate) SetEnable(b bool) *PromotionMemberUpdate {
	pmu.mutation.SetEnable(b)
	return pmu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableEnable(b *bool) *PromotionMemberUpdate {
	if b != nil {
		pmu.SetEnable(*b)
	}
	return pmu
}

// SetPersonID sets the "person_id" field.
func (pmu *PromotionMemberUpdate) SetPersonID(u uint64) *PromotionMemberUpdate {
	pmu.mutation.SetPersonID(u)
	return pmu
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillablePersonID(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetPersonID(*u)
	}
	return pmu
}

// ClearPersonID clears the value of the "person_id" field.
func (pmu *PromotionMemberUpdate) ClearPersonID() *PromotionMemberUpdate {
	pmu.mutation.ClearPersonID()
	return pmu
}

// SetAvatarURL sets the "avatar_url" field.
func (pmu *PromotionMemberUpdate) SetAvatarURL(s string) *PromotionMemberUpdate {
	pmu.mutation.SetAvatarURL(s)
	return pmu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableAvatarURL(s *string) *PromotionMemberUpdate {
	if s != nil {
		pmu.SetAvatarURL(*s)
	}
	return pmu
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (pmu *PromotionMemberUpdate) ClearAvatarURL() *PromotionMemberUpdate {
	pmu.mutation.ClearAvatarURL()
	return pmu
}

// SetNewSignCount sets the "new_sign_count" field.
func (pmu *PromotionMemberUpdate) SetNewSignCount(u uint64) *PromotionMemberUpdate {
	pmu.mutation.ResetNewSignCount()
	pmu.mutation.SetNewSignCount(u)
	return pmu
}

// SetNillableNewSignCount sets the "new_sign_count" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableNewSignCount(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetNewSignCount(*u)
	}
	return pmu
}

// AddNewSignCount adds u to the "new_sign_count" field.
func (pmu *PromotionMemberUpdate) AddNewSignCount(u int64) *PromotionMemberUpdate {
	pmu.mutation.AddNewSignCount(u)
	return pmu
}

// SetRenewCount sets the "renew_count" field.
func (pmu *PromotionMemberUpdate) SetRenewCount(u uint64) *PromotionMemberUpdate {
	pmu.mutation.ResetRenewCount()
	pmu.mutation.SetRenewCount(u)
	return pmu
}

// SetNillableRenewCount sets the "renew_count" field if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableRenewCount(u *uint64) *PromotionMemberUpdate {
	if u != nil {
		pmu.SetRenewCount(*u)
	}
	return pmu
}

// AddRenewCount adds u to the "renew_count" field.
func (pmu *PromotionMemberUpdate) AddRenewCount(u int64) *PromotionMemberUpdate {
	pmu.mutation.AddRenewCount(u)
	return pmu
}

// SetRider sets the "rider" edge to the Rider entity.
func (pmu *PromotionMemberUpdate) SetRider(r *Rider) *PromotionMemberUpdate {
	return pmu.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (pmu *PromotionMemberUpdate) SetSubscribe(s *Subscribe) *PromotionMemberUpdate {
	return pmu.SetSubscribeID(s.ID)
}

// SetLevel sets the "level" edge to the PromotionLevel entity.
func (pmu *PromotionMemberUpdate) SetLevel(p *PromotionLevel) *PromotionMemberUpdate {
	return pmu.SetLevelID(p.ID)
}

// AddReferringIDs adds the "referring" edge to the PromotionReferrals entity by IDs.
func (pmu *PromotionMemberUpdate) AddReferringIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.AddReferringIDs(ids...)
	return pmu
}

// AddReferring adds the "referring" edges to the PromotionReferrals entity.
func (pmu *PromotionMemberUpdate) AddReferring(p ...*PromotionReferrals) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.AddReferringIDs(ids...)
}

// SetReferredID sets the "referred" edge to the PromotionReferrals entity by ID.
func (pmu *PromotionMemberUpdate) SetReferredID(id uint64) *PromotionMemberUpdate {
	pmu.mutation.SetReferredID(id)
	return pmu
}

// SetNillableReferredID sets the "referred" edge to the PromotionReferrals entity by ID if the given value is not nil.
func (pmu *PromotionMemberUpdate) SetNillableReferredID(id *uint64) *PromotionMemberUpdate {
	if id != nil {
		pmu = pmu.SetReferredID(*id)
	}
	return pmu
}

// SetReferred sets the "referred" edge to the PromotionReferrals entity.
func (pmu *PromotionMemberUpdate) SetReferred(p *PromotionReferrals) *PromotionMemberUpdate {
	return pmu.SetReferredID(p.ID)
}

// SetPerson sets the "person" edge to the PromotionPerson entity.
func (pmu *PromotionMemberUpdate) SetPerson(p *PromotionPerson) *PromotionMemberUpdate {
	return pmu.SetPersonID(p.ID)
}

// AddCardIDs adds the "cards" edge to the PromotionBankCard entity by IDs.
func (pmu *PromotionMemberUpdate) AddCardIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.AddCardIDs(ids...)
	return pmu
}

// AddCards adds the "cards" edges to the PromotionBankCard entity.
func (pmu *PromotionMemberUpdate) AddCards(p ...*PromotionBankCard) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.AddCardIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the PromotionMemberCommission entity by IDs.
func (pmu *PromotionMemberUpdate) AddCommissionIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.AddCommissionIDs(ids...)
	return pmu
}

// AddCommissions adds the "commissions" edges to the PromotionMemberCommission entity.
func (pmu *PromotionMemberUpdate) AddCommissions(p ...*PromotionMemberCommission) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.AddCommissionIDs(ids...)
}

// Mutation returns the PromotionMemberMutation object of the builder.
func (pmu *PromotionMemberUpdate) Mutation() *PromotionMemberMutation {
	return pmu.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (pmu *PromotionMemberUpdate) ClearRider() *PromotionMemberUpdate {
	pmu.mutation.ClearRider()
	return pmu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (pmu *PromotionMemberUpdate) ClearSubscribe() *PromotionMemberUpdate {
	pmu.mutation.ClearSubscribe()
	return pmu
}

// ClearLevel clears the "level" edge to the PromotionLevel entity.
func (pmu *PromotionMemberUpdate) ClearLevel() *PromotionMemberUpdate {
	pmu.mutation.ClearLevel()
	return pmu
}

// ClearReferring clears all "referring" edges to the PromotionReferrals entity.
func (pmu *PromotionMemberUpdate) ClearReferring() *PromotionMemberUpdate {
	pmu.mutation.ClearReferring()
	return pmu
}

// RemoveReferringIDs removes the "referring" edge to PromotionReferrals entities by IDs.
func (pmu *PromotionMemberUpdate) RemoveReferringIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.RemoveReferringIDs(ids...)
	return pmu
}

// RemoveReferring removes "referring" edges to PromotionReferrals entities.
func (pmu *PromotionMemberUpdate) RemoveReferring(p ...*PromotionReferrals) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.RemoveReferringIDs(ids...)
}

// ClearReferred clears the "referred" edge to the PromotionReferrals entity.
func (pmu *PromotionMemberUpdate) ClearReferred() *PromotionMemberUpdate {
	pmu.mutation.ClearReferred()
	return pmu
}

// ClearPerson clears the "person" edge to the PromotionPerson entity.
func (pmu *PromotionMemberUpdate) ClearPerson() *PromotionMemberUpdate {
	pmu.mutation.ClearPerson()
	return pmu
}

// ClearCards clears all "cards" edges to the PromotionBankCard entity.
func (pmu *PromotionMemberUpdate) ClearCards() *PromotionMemberUpdate {
	pmu.mutation.ClearCards()
	return pmu
}

// RemoveCardIDs removes the "cards" edge to PromotionBankCard entities by IDs.
func (pmu *PromotionMemberUpdate) RemoveCardIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.RemoveCardIDs(ids...)
	return pmu
}

// RemoveCards removes "cards" edges to PromotionBankCard entities.
func (pmu *PromotionMemberUpdate) RemoveCards(p ...*PromotionBankCard) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.RemoveCardIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the PromotionMemberCommission entity.
func (pmu *PromotionMemberUpdate) ClearCommissions() *PromotionMemberUpdate {
	pmu.mutation.ClearCommissions()
	return pmu
}

// RemoveCommissionIDs removes the "commissions" edge to PromotionMemberCommission entities by IDs.
func (pmu *PromotionMemberUpdate) RemoveCommissionIDs(ids ...uint64) *PromotionMemberUpdate {
	pmu.mutation.RemoveCommissionIDs(ids...)
	return pmu
}

// RemoveCommissions removes "commissions" edges to PromotionMemberCommission entities.
func (pmu *PromotionMemberUpdate) RemoveCommissions(p ...*PromotionMemberCommission) *PromotionMemberUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.RemoveCommissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PromotionMemberUpdate) Save(ctx context.Context) (int, error) {
	if err := pmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PromotionMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PromotionMemberUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PromotionMemberUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *PromotionMemberUpdate) defaults() error {
	if _, ok := pmu.mutation.UpdatedAt(); !ok {
		if promotionmember.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionmember.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionmember.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmu *PromotionMemberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionMemberUpdate {
	pmu.modifiers = append(pmu.modifiers, modifiers...)
	return pmu
}

func (pmu *PromotionMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionmember.Table, promotionmember.Columns, sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionmember.FieldDeletedAt, field.TypeTime, value)
	}
	if pmu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionmember.FieldDeletedAt, field.TypeTime)
	}
	if pmu.mutation.CreatorCleared() {
		_spec.ClearField(promotionmember.FieldCreator, field.TypeJSON)
	}
	if value, ok := pmu.mutation.LastModifier(); ok {
		_spec.SetField(promotionmember.FieldLastModifier, field.TypeJSON, value)
	}
	if pmu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionmember.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pmu.mutation.Remark(); ok {
		_spec.SetField(promotionmember.FieldRemark, field.TypeString, value)
	}
	if pmu.mutation.RemarkCleared() {
		_spec.ClearField(promotionmember.FieldRemark, field.TypeString)
	}
	if value, ok := pmu.mutation.Phone(); ok {
		_spec.SetField(promotionmember.FieldPhone, field.TypeString, value)
	}
	if value, ok := pmu.mutation.Name(); ok {
		_spec.SetField(promotionmember.FieldName, field.TypeString, value)
	}
	if pmu.mutation.NameCleared() {
		_spec.ClearField(promotionmember.FieldName, field.TypeString)
	}
	if value, ok := pmu.mutation.Balance(); ok {
		_spec.SetField(promotionmember.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.AddedBalance(); ok {
		_spec.AddField(promotionmember.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.Frozen(); ok {
		_spec.SetField(promotionmember.FieldFrozen, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.AddedFrozen(); ok {
		_spec.AddField(promotionmember.FieldFrozen, field.TypeFloat64, value)
	}
	if value, ok := pmu.mutation.TotalGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldTotalGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.AddedTotalGrowthValue(); ok {
		_spec.AddField(promotionmember.FieldTotalGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.CurrentGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldCurrentGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.AddedCurrentGrowthValue(); ok {
		_spec.AddField(promotionmember.FieldCurrentGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.Enable(); ok {
		_spec.SetField(promotionmember.FieldEnable, field.TypeBool, value)
	}
	if value, ok := pmu.mutation.AvatarURL(); ok {
		_spec.SetField(promotionmember.FieldAvatarURL, field.TypeString, value)
	}
	if pmu.mutation.AvatarURLCleared() {
		_spec.ClearField(promotionmember.FieldAvatarURL, field.TypeString)
	}
	if value, ok := pmu.mutation.NewSignCount(); ok {
		_spec.SetField(promotionmember.FieldNewSignCount, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.AddedNewSignCount(); ok {
		_spec.AddField(promotionmember.FieldNewSignCount, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.RenewCount(); ok {
		_spec.SetField(promotionmember.FieldRenewCount, field.TypeUint64, value)
	}
	if value, ok := pmu.mutation.AddedRenewCount(); ok {
		_spec.AddField(promotionmember.FieldRenewCount, field.TypeUint64, value)
	}
	if pmu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.SubscribeTable,
			Columns: []string{promotionmember.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.SubscribeTable,
			Columns: []string{promotionmember.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.ReferringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedReferringIDs(); len(nodes) > 0 && !pmu.mutation.ReferringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ReferringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.ReferredCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ReferredIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionperson.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionperson.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedCardsIDs(); len(nodes) > 0 && !pmu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !pmu.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// PromotionMemberUpdateOne is the builder for updating a single PromotionMember entity.
type PromotionMemberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionMemberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *PromotionMemberUpdateOne) SetUpdatedAt(t time.Time) *PromotionMemberUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pmuo *PromotionMemberUpdateOne) SetDeletedAt(t time.Time) *PromotionMemberUpdateOne {
	pmuo.mutation.SetDeletedAt(t)
	return pmuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionMemberUpdateOne {
	if t != nil {
		pmuo.SetDeletedAt(*t)
	}
	return pmuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pmuo *PromotionMemberUpdateOne) ClearDeletedAt() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearDeletedAt()
	return pmuo
}

// SetLastModifier sets the "last_modifier" field.
func (pmuo *PromotionMemberUpdateOne) SetLastModifier(m *model.Modifier) *PromotionMemberUpdateOne {
	pmuo.mutation.SetLastModifier(m)
	return pmuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pmuo *PromotionMemberUpdateOne) ClearLastModifier() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearLastModifier()
	return pmuo
}

// SetRemark sets the "remark" field.
func (pmuo *PromotionMemberUpdateOne) SetRemark(s string) *PromotionMemberUpdateOne {
	pmuo.mutation.SetRemark(s)
	return pmuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableRemark(s *string) *PromotionMemberUpdateOne {
	if s != nil {
		pmuo.SetRemark(*s)
	}
	return pmuo
}

// ClearRemark clears the value of the "remark" field.
func (pmuo *PromotionMemberUpdateOne) ClearRemark() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearRemark()
	return pmuo
}

// SetRiderID sets the "rider_id" field.
func (pmuo *PromotionMemberUpdateOne) SetRiderID(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.SetRiderID(u)
	return pmuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableRiderID(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetRiderID(*u)
	}
	return pmuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (pmuo *PromotionMemberUpdateOne) ClearRiderID() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearRiderID()
	return pmuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (pmuo *PromotionMemberUpdateOne) SetSubscribeID(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.SetSubscribeID(u)
	return pmuo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableSubscribeID(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetSubscribeID(*u)
	}
	return pmuo
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (pmuo *PromotionMemberUpdateOne) ClearSubscribeID() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearSubscribeID()
	return pmuo
}

// SetLevelID sets the "level_id" field.
func (pmuo *PromotionMemberUpdateOne) SetLevelID(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.SetLevelID(u)
	return pmuo
}

// SetNillableLevelID sets the "level_id" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableLevelID(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetLevelID(*u)
	}
	return pmuo
}

// ClearLevelID clears the value of the "level_id" field.
func (pmuo *PromotionMemberUpdateOne) ClearLevelID() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearLevelID()
	return pmuo
}

// SetPhone sets the "phone" field.
func (pmuo *PromotionMemberUpdateOne) SetPhone(s string) *PromotionMemberUpdateOne {
	pmuo.mutation.SetPhone(s)
	return pmuo
}

// SetName sets the "name" field.
func (pmuo *PromotionMemberUpdateOne) SetName(s string) *PromotionMemberUpdateOne {
	pmuo.mutation.SetName(s)
	return pmuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableName(s *string) *PromotionMemberUpdateOne {
	if s != nil {
		pmuo.SetName(*s)
	}
	return pmuo
}

// ClearName clears the value of the "name" field.
func (pmuo *PromotionMemberUpdateOne) ClearName() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearName()
	return pmuo
}

// SetBalance sets the "balance" field.
func (pmuo *PromotionMemberUpdateOne) SetBalance(f float64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetBalance()
	pmuo.mutation.SetBalance(f)
	return pmuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableBalance(f *float64) *PromotionMemberUpdateOne {
	if f != nil {
		pmuo.SetBalance(*f)
	}
	return pmuo
}

// AddBalance adds f to the "balance" field.
func (pmuo *PromotionMemberUpdateOne) AddBalance(f float64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddBalance(f)
	return pmuo
}

// SetFrozen sets the "frozen" field.
func (pmuo *PromotionMemberUpdateOne) SetFrozen(f float64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetFrozen()
	pmuo.mutation.SetFrozen(f)
	return pmuo
}

// SetNillableFrozen sets the "frozen" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableFrozen(f *float64) *PromotionMemberUpdateOne {
	if f != nil {
		pmuo.SetFrozen(*f)
	}
	return pmuo
}

// AddFrozen adds f to the "frozen" field.
func (pmuo *PromotionMemberUpdateOne) AddFrozen(f float64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddFrozen(f)
	return pmuo
}

// SetTotalGrowthValue sets the "total_growth_value" field.
func (pmuo *PromotionMemberUpdateOne) SetTotalGrowthValue(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetTotalGrowthValue()
	pmuo.mutation.SetTotalGrowthValue(u)
	return pmuo
}

// SetNillableTotalGrowthValue sets the "total_growth_value" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableTotalGrowthValue(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetTotalGrowthValue(*u)
	}
	return pmuo
}

// AddTotalGrowthValue adds u to the "total_growth_value" field.
func (pmuo *PromotionMemberUpdateOne) AddTotalGrowthValue(u int64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddTotalGrowthValue(u)
	return pmuo
}

// SetCurrentGrowthValue sets the "current_growth_value" field.
func (pmuo *PromotionMemberUpdateOne) SetCurrentGrowthValue(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetCurrentGrowthValue()
	pmuo.mutation.SetCurrentGrowthValue(u)
	return pmuo
}

// SetNillableCurrentGrowthValue sets the "current_growth_value" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableCurrentGrowthValue(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetCurrentGrowthValue(*u)
	}
	return pmuo
}

// AddCurrentGrowthValue adds u to the "current_growth_value" field.
func (pmuo *PromotionMemberUpdateOne) AddCurrentGrowthValue(u int64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddCurrentGrowthValue(u)
	return pmuo
}

// SetEnable sets the "enable" field.
func (pmuo *PromotionMemberUpdateOne) SetEnable(b bool) *PromotionMemberUpdateOne {
	pmuo.mutation.SetEnable(b)
	return pmuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableEnable(b *bool) *PromotionMemberUpdateOne {
	if b != nil {
		pmuo.SetEnable(*b)
	}
	return pmuo
}

// SetPersonID sets the "person_id" field.
func (pmuo *PromotionMemberUpdateOne) SetPersonID(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.SetPersonID(u)
	return pmuo
}

// SetNillablePersonID sets the "person_id" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillablePersonID(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetPersonID(*u)
	}
	return pmuo
}

// ClearPersonID clears the value of the "person_id" field.
func (pmuo *PromotionMemberUpdateOne) ClearPersonID() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearPersonID()
	return pmuo
}

// SetAvatarURL sets the "avatar_url" field.
func (pmuo *PromotionMemberUpdateOne) SetAvatarURL(s string) *PromotionMemberUpdateOne {
	pmuo.mutation.SetAvatarURL(s)
	return pmuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableAvatarURL(s *string) *PromotionMemberUpdateOne {
	if s != nil {
		pmuo.SetAvatarURL(*s)
	}
	return pmuo
}

// ClearAvatarURL clears the value of the "avatar_url" field.
func (pmuo *PromotionMemberUpdateOne) ClearAvatarURL() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearAvatarURL()
	return pmuo
}

// SetNewSignCount sets the "new_sign_count" field.
func (pmuo *PromotionMemberUpdateOne) SetNewSignCount(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetNewSignCount()
	pmuo.mutation.SetNewSignCount(u)
	return pmuo
}

// SetNillableNewSignCount sets the "new_sign_count" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableNewSignCount(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetNewSignCount(*u)
	}
	return pmuo
}

// AddNewSignCount adds u to the "new_sign_count" field.
func (pmuo *PromotionMemberUpdateOne) AddNewSignCount(u int64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddNewSignCount(u)
	return pmuo
}

// SetRenewCount sets the "renew_count" field.
func (pmuo *PromotionMemberUpdateOne) SetRenewCount(u uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.ResetRenewCount()
	pmuo.mutation.SetRenewCount(u)
	return pmuo
}

// SetNillableRenewCount sets the "renew_count" field if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableRenewCount(u *uint64) *PromotionMemberUpdateOne {
	if u != nil {
		pmuo.SetRenewCount(*u)
	}
	return pmuo
}

// AddRenewCount adds u to the "renew_count" field.
func (pmuo *PromotionMemberUpdateOne) AddRenewCount(u int64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddRenewCount(u)
	return pmuo
}

// SetRider sets the "rider" edge to the Rider entity.
func (pmuo *PromotionMemberUpdateOne) SetRider(r *Rider) *PromotionMemberUpdateOne {
	return pmuo.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (pmuo *PromotionMemberUpdateOne) SetSubscribe(s *Subscribe) *PromotionMemberUpdateOne {
	return pmuo.SetSubscribeID(s.ID)
}

// SetLevel sets the "level" edge to the PromotionLevel entity.
func (pmuo *PromotionMemberUpdateOne) SetLevel(p *PromotionLevel) *PromotionMemberUpdateOne {
	return pmuo.SetLevelID(p.ID)
}

// AddReferringIDs adds the "referring" edge to the PromotionReferrals entity by IDs.
func (pmuo *PromotionMemberUpdateOne) AddReferringIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddReferringIDs(ids...)
	return pmuo
}

// AddReferring adds the "referring" edges to the PromotionReferrals entity.
func (pmuo *PromotionMemberUpdateOne) AddReferring(p ...*PromotionReferrals) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.AddReferringIDs(ids...)
}

// SetReferredID sets the "referred" edge to the PromotionReferrals entity by ID.
func (pmuo *PromotionMemberUpdateOne) SetReferredID(id uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.SetReferredID(id)
	return pmuo
}

// SetNillableReferredID sets the "referred" edge to the PromotionReferrals entity by ID if the given value is not nil.
func (pmuo *PromotionMemberUpdateOne) SetNillableReferredID(id *uint64) *PromotionMemberUpdateOne {
	if id != nil {
		pmuo = pmuo.SetReferredID(*id)
	}
	return pmuo
}

// SetReferred sets the "referred" edge to the PromotionReferrals entity.
func (pmuo *PromotionMemberUpdateOne) SetReferred(p *PromotionReferrals) *PromotionMemberUpdateOne {
	return pmuo.SetReferredID(p.ID)
}

// SetPerson sets the "person" edge to the PromotionPerson entity.
func (pmuo *PromotionMemberUpdateOne) SetPerson(p *PromotionPerson) *PromotionMemberUpdateOne {
	return pmuo.SetPersonID(p.ID)
}

// AddCardIDs adds the "cards" edge to the PromotionBankCard entity by IDs.
func (pmuo *PromotionMemberUpdateOne) AddCardIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddCardIDs(ids...)
	return pmuo
}

// AddCards adds the "cards" edges to the PromotionBankCard entity.
func (pmuo *PromotionMemberUpdateOne) AddCards(p ...*PromotionBankCard) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.AddCardIDs(ids...)
}

// AddCommissionIDs adds the "commissions" edge to the PromotionMemberCommission entity by IDs.
func (pmuo *PromotionMemberUpdateOne) AddCommissionIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.AddCommissionIDs(ids...)
	return pmuo
}

// AddCommissions adds the "commissions" edges to the PromotionMemberCommission entity.
func (pmuo *PromotionMemberUpdateOne) AddCommissions(p ...*PromotionMemberCommission) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.AddCommissionIDs(ids...)
}

// Mutation returns the PromotionMemberMutation object of the builder.
func (pmuo *PromotionMemberUpdateOne) Mutation() *PromotionMemberMutation {
	return pmuo.mutation
}

// ClearRider clears the "rider" edge to the Rider entity.
func (pmuo *PromotionMemberUpdateOne) ClearRider() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearRider()
	return pmuo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (pmuo *PromotionMemberUpdateOne) ClearSubscribe() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearSubscribe()
	return pmuo
}

// ClearLevel clears the "level" edge to the PromotionLevel entity.
func (pmuo *PromotionMemberUpdateOne) ClearLevel() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearLevel()
	return pmuo
}

// ClearReferring clears all "referring" edges to the PromotionReferrals entity.
func (pmuo *PromotionMemberUpdateOne) ClearReferring() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearReferring()
	return pmuo
}

// RemoveReferringIDs removes the "referring" edge to PromotionReferrals entities by IDs.
func (pmuo *PromotionMemberUpdateOne) RemoveReferringIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.RemoveReferringIDs(ids...)
	return pmuo
}

// RemoveReferring removes "referring" edges to PromotionReferrals entities.
func (pmuo *PromotionMemberUpdateOne) RemoveReferring(p ...*PromotionReferrals) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.RemoveReferringIDs(ids...)
}

// ClearReferred clears the "referred" edge to the PromotionReferrals entity.
func (pmuo *PromotionMemberUpdateOne) ClearReferred() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearReferred()
	return pmuo
}

// ClearPerson clears the "person" edge to the PromotionPerson entity.
func (pmuo *PromotionMemberUpdateOne) ClearPerson() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearPerson()
	return pmuo
}

// ClearCards clears all "cards" edges to the PromotionBankCard entity.
func (pmuo *PromotionMemberUpdateOne) ClearCards() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearCards()
	return pmuo
}

// RemoveCardIDs removes the "cards" edge to PromotionBankCard entities by IDs.
func (pmuo *PromotionMemberUpdateOne) RemoveCardIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.RemoveCardIDs(ids...)
	return pmuo
}

// RemoveCards removes "cards" edges to PromotionBankCard entities.
func (pmuo *PromotionMemberUpdateOne) RemoveCards(p ...*PromotionBankCard) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.RemoveCardIDs(ids...)
}

// ClearCommissions clears all "commissions" edges to the PromotionMemberCommission entity.
func (pmuo *PromotionMemberUpdateOne) ClearCommissions() *PromotionMemberUpdateOne {
	pmuo.mutation.ClearCommissions()
	return pmuo
}

// RemoveCommissionIDs removes the "commissions" edge to PromotionMemberCommission entities by IDs.
func (pmuo *PromotionMemberUpdateOne) RemoveCommissionIDs(ids ...uint64) *PromotionMemberUpdateOne {
	pmuo.mutation.RemoveCommissionIDs(ids...)
	return pmuo
}

// RemoveCommissions removes "commissions" edges to PromotionMemberCommission entities.
func (pmuo *PromotionMemberUpdateOne) RemoveCommissions(p ...*PromotionMemberCommission) *PromotionMemberUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.RemoveCommissionIDs(ids...)
}

// Where appends a list predicates to the PromotionMemberUpdate builder.
func (pmuo *PromotionMemberUpdateOne) Where(ps ...predicate.PromotionMember) *PromotionMemberUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PromotionMemberUpdateOne) Select(field string, fields ...string) *PromotionMemberUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PromotionMember entity.
func (pmuo *PromotionMemberUpdateOne) Save(ctx context.Context) (*PromotionMember, error) {
	if err := pmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PromotionMemberUpdateOne) SaveX(ctx context.Context) *PromotionMember {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PromotionMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PromotionMemberUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *PromotionMemberUpdateOne) defaults() error {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok {
		if promotionmember.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionmember.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionmember.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmuo *PromotionMemberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionMemberUpdateOne {
	pmuo.modifiers = append(pmuo.modifiers, modifiers...)
	return pmuo
}

func (pmuo *PromotionMemberUpdateOne) sqlSave(ctx context.Context) (_node *PromotionMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionmember.Table, promotionmember.Columns, sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionmember.FieldID)
		for _, f := range fields {
			if !promotionmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pmuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionmember.FieldDeletedAt, field.TypeTime, value)
	}
	if pmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionmember.FieldDeletedAt, field.TypeTime)
	}
	if pmuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionmember.FieldCreator, field.TypeJSON)
	}
	if value, ok := pmuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionmember.FieldLastModifier, field.TypeJSON, value)
	}
	if pmuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionmember.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pmuo.mutation.Remark(); ok {
		_spec.SetField(promotionmember.FieldRemark, field.TypeString, value)
	}
	if pmuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionmember.FieldRemark, field.TypeString)
	}
	if value, ok := pmuo.mutation.Phone(); ok {
		_spec.SetField(promotionmember.FieldPhone, field.TypeString, value)
	}
	if value, ok := pmuo.mutation.Name(); ok {
		_spec.SetField(promotionmember.FieldName, field.TypeString, value)
	}
	if pmuo.mutation.NameCleared() {
		_spec.ClearField(promotionmember.FieldName, field.TypeString)
	}
	if value, ok := pmuo.mutation.Balance(); ok {
		_spec.SetField(promotionmember.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.AddedBalance(); ok {
		_spec.AddField(promotionmember.FieldBalance, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.Frozen(); ok {
		_spec.SetField(promotionmember.FieldFrozen, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.AddedFrozen(); ok {
		_spec.AddField(promotionmember.FieldFrozen, field.TypeFloat64, value)
	}
	if value, ok := pmuo.mutation.TotalGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldTotalGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.AddedTotalGrowthValue(); ok {
		_spec.AddField(promotionmember.FieldTotalGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.CurrentGrowthValue(); ok {
		_spec.SetField(promotionmember.FieldCurrentGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.AddedCurrentGrowthValue(); ok {
		_spec.AddField(promotionmember.FieldCurrentGrowthValue, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.Enable(); ok {
		_spec.SetField(promotionmember.FieldEnable, field.TypeBool, value)
	}
	if value, ok := pmuo.mutation.AvatarURL(); ok {
		_spec.SetField(promotionmember.FieldAvatarURL, field.TypeString, value)
	}
	if pmuo.mutation.AvatarURLCleared() {
		_spec.ClearField(promotionmember.FieldAvatarURL, field.TypeString)
	}
	if value, ok := pmuo.mutation.NewSignCount(); ok {
		_spec.SetField(promotionmember.FieldNewSignCount, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.AddedNewSignCount(); ok {
		_spec.AddField(promotionmember.FieldNewSignCount, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.RenewCount(); ok {
		_spec.SetField(promotionmember.FieldRenewCount, field.TypeUint64, value)
	}
	if value, ok := pmuo.mutation.AddedRenewCount(); ok {
		_spec.AddField(promotionmember.FieldRenewCount, field.TypeUint64, value)
	}
	if pmuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.RiderTable,
			Columns: []string{promotionmember.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.SubscribeTable,
			Columns: []string{promotionmember.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.SubscribeTable,
			Columns: []string{promotionmember.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.LevelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.LevelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   promotionmember.LevelTable,
			Columns: []string{promotionmember.LevelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionlevel.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.ReferringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedReferringIDs(); len(nodes) > 0 && !pmuo.mutation.ReferringCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ReferringIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.ReferringTable,
			Columns: []string{promotionmember.ReferringColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.ReferredCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ReferredIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   promotionmember.ReferredTable,
			Columns: []string{promotionmember.ReferredColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionperson.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionmember.PersonTable,
			Columns: []string{promotionmember.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionperson.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !pmuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CardsTable,
			Columns: []string{promotionmember.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionbankcard.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedCommissionsIDs(); len(nodes) > 0 && !pmuo.mutation.CommissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.CommissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionmember.CommissionsTable,
			Columns: []string{promotionmember.CommissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmembercommission.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pmuo.modifiers...)
	_node = &PromotionMember{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
