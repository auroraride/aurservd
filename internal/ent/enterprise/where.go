// Code generated by entc, DO NOT EDIT.

package enterprise

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CityID applies equality check predicate on the "city_id" field. It's identical to CityIDEQ.
func CityID(v uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// CompanyName applies equality check predicate on the "company_name" field. It's identical to CompanyNameEQ.
func CompanyName(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyName), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ContactName applies equality check predicate on the "contact_name" field. It's identical to ContactNameEQ.
func ContactName(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactName), v))
	})
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// IdcardNumber applies equality check predicate on the "idcard_number" field. It's identical to IdcardNumberEQ.
func IdcardNumber(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdcardNumber), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// Payment applies equality check predicate on the "payment" field. It's identical to PaymentEQ.
func Payment(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// Deposit applies equality check predicate on the "deposit" field. It's identical to DepositEQ.
func Deposit(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeposit), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// PrepaymentTotal applies equality check predicate on the "prepayment_total" field. It's identical to PrepaymentTotalEQ.
func PrepaymentTotal(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepaymentTotal), v))
	})
}

// SuspensedAt applies equality check predicate on the "suspensed_at" field. It's identical to SuspensedAtEQ.
func SuspensedAt(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuspensedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// CityIDEQ applies the EQ predicate on the "city_id" field.
func CityIDEQ(v uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCityID), v))
	})
}

// CityIDNEQ applies the NEQ predicate on the "city_id" field.
func CityIDNEQ(v uint64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCityID), v))
	})
}

// CityIDIn applies the In predicate on the "city_id" field.
func CityIDIn(vs ...uint64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCityID), v...))
	})
}

// CityIDNotIn applies the NotIn predicate on the "city_id" field.
func CityIDNotIn(vs ...uint64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCityID), v...))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CompanyNameEQ applies the EQ predicate on the "company_name" field.
func CompanyNameEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompanyName), v))
	})
}

// CompanyNameNEQ applies the NEQ predicate on the "company_name" field.
func CompanyNameNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompanyName), v))
	})
}

// CompanyNameIn applies the In predicate on the "company_name" field.
func CompanyNameIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompanyName), v...))
	})
}

// CompanyNameNotIn applies the NotIn predicate on the "company_name" field.
func CompanyNameNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompanyName), v...))
	})
}

// CompanyNameGT applies the GT predicate on the "company_name" field.
func CompanyNameGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompanyName), v))
	})
}

// CompanyNameGTE applies the GTE predicate on the "company_name" field.
func CompanyNameGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompanyName), v))
	})
}

// CompanyNameLT applies the LT predicate on the "company_name" field.
func CompanyNameLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompanyName), v))
	})
}

// CompanyNameLTE applies the LTE predicate on the "company_name" field.
func CompanyNameLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompanyName), v))
	})
}

// CompanyNameContains applies the Contains predicate on the "company_name" field.
func CompanyNameContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompanyName), v))
	})
}

// CompanyNameHasPrefix applies the HasPrefix predicate on the "company_name" field.
func CompanyNameHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompanyName), v))
	})
}

// CompanyNameHasSuffix applies the HasSuffix predicate on the "company_name" field.
func CompanyNameHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompanyName), v))
	})
}

// CompanyNameIsNil applies the IsNil predicate on the "company_name" field.
func CompanyNameIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCompanyName)))
	})
}

// CompanyNameNotNil applies the NotNil predicate on the "company_name" field.
func CompanyNameNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCompanyName)))
	})
}

// CompanyNameEqualFold applies the EqualFold predicate on the "company_name" field.
func CompanyNameEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompanyName), v))
	})
}

// CompanyNameContainsFold applies the ContainsFold predicate on the "company_name" field.
func CompanyNameContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompanyName), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// ContactNameEQ applies the EQ predicate on the "contact_name" field.
func ContactNameEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactName), v))
	})
}

// ContactNameNEQ applies the NEQ predicate on the "contact_name" field.
func ContactNameNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactName), v))
	})
}

// ContactNameIn applies the In predicate on the "contact_name" field.
func ContactNameIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactName), v...))
	})
}

// ContactNameNotIn applies the NotIn predicate on the "contact_name" field.
func ContactNameNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactName), v...))
	})
}

// ContactNameGT applies the GT predicate on the "contact_name" field.
func ContactNameGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactName), v))
	})
}

// ContactNameGTE applies the GTE predicate on the "contact_name" field.
func ContactNameGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactName), v))
	})
}

// ContactNameLT applies the LT predicate on the "contact_name" field.
func ContactNameLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactName), v))
	})
}

// ContactNameLTE applies the LTE predicate on the "contact_name" field.
func ContactNameLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactName), v))
	})
}

// ContactNameContains applies the Contains predicate on the "contact_name" field.
func ContactNameContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactName), v))
	})
}

// ContactNameHasPrefix applies the HasPrefix predicate on the "contact_name" field.
func ContactNameHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactName), v))
	})
}

// ContactNameHasSuffix applies the HasSuffix predicate on the "contact_name" field.
func ContactNameHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactName), v))
	})
}

// ContactNameEqualFold applies the EqualFold predicate on the "contact_name" field.
func ContactNameEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactName), v))
	})
}

// ContactNameContainsFold applies the ContainsFold predicate on the "contact_name" field.
func ContactNameContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactName), v))
	})
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactPhone), v...))
	})
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactPhone), v))
	})
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactPhone), v))
	})
}

// IdcardNumberEQ applies the EQ predicate on the "idcard_number" field.
func IdcardNumberEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberNEQ applies the NEQ predicate on the "idcard_number" field.
func IdcardNumberNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberIn applies the In predicate on the "idcard_number" field.
func IdcardNumberIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdcardNumber), v...))
	})
}

// IdcardNumberNotIn applies the NotIn predicate on the "idcard_number" field.
func IdcardNumberNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdcardNumber), v...))
	})
}

// IdcardNumberGT applies the GT predicate on the "idcard_number" field.
func IdcardNumberGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberGTE applies the GTE predicate on the "idcard_number" field.
func IdcardNumberGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberLT applies the LT predicate on the "idcard_number" field.
func IdcardNumberLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberLTE applies the LTE predicate on the "idcard_number" field.
func IdcardNumberLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberContains applies the Contains predicate on the "idcard_number" field.
func IdcardNumberContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberHasPrefix applies the HasPrefix predicate on the "idcard_number" field.
func IdcardNumberHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberHasSuffix applies the HasSuffix predicate on the "idcard_number" field.
func IdcardNumberHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberEqualFold applies the EqualFold predicate on the "idcard_number" field.
func IdcardNumberEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdcardNumber), v))
	})
}

// IdcardNumberContainsFold applies the ContainsFold predicate on the "idcard_number" field.
func IdcardNumberContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdcardNumber), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// PaymentEQ applies the EQ predicate on the "payment" field.
func PaymentEQ(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayment), v))
	})
}

// PaymentNEQ applies the NEQ predicate on the "payment" field.
func PaymentNEQ(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayment), v))
	})
}

// PaymentIn applies the In predicate on the "payment" field.
func PaymentIn(vs ...uint8) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPayment), v...))
	})
}

// PaymentNotIn applies the NotIn predicate on the "payment" field.
func PaymentNotIn(vs ...uint8) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPayment), v...))
	})
}

// PaymentGT applies the GT predicate on the "payment" field.
func PaymentGT(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayment), v))
	})
}

// PaymentGTE applies the GTE predicate on the "payment" field.
func PaymentGTE(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayment), v))
	})
}

// PaymentLT applies the LT predicate on the "payment" field.
func PaymentLT(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayment), v))
	})
}

// PaymentLTE applies the LTE predicate on the "payment" field.
func PaymentLTE(v uint8) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayment), v))
	})
}

// DepositEQ applies the EQ predicate on the "deposit" field.
func DepositEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeposit), v))
	})
}

// DepositNEQ applies the NEQ predicate on the "deposit" field.
func DepositNEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeposit), v))
	})
}

// DepositIn applies the In predicate on the "deposit" field.
func DepositIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeposit), v...))
	})
}

// DepositNotIn applies the NotIn predicate on the "deposit" field.
func DepositNotIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeposit), v...))
	})
}

// DepositGT applies the GT predicate on the "deposit" field.
func DepositGT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeposit), v))
	})
}

// DepositGTE applies the GTE predicate on the "deposit" field.
func DepositGTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeposit), v))
	})
}

// DepositLT applies the LT predicate on the "deposit" field.
func DepositLT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeposit), v))
	})
}

// DepositLTE applies the LTE predicate on the "deposit" field.
func DepositLTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeposit), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// PrepaymentTotalEQ applies the EQ predicate on the "prepayment_total" field.
func PrepaymentTotalEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrepaymentTotal), v))
	})
}

// PrepaymentTotalNEQ applies the NEQ predicate on the "prepayment_total" field.
func PrepaymentTotalNEQ(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrepaymentTotal), v))
	})
}

// PrepaymentTotalIn applies the In predicate on the "prepayment_total" field.
func PrepaymentTotalIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrepaymentTotal), v...))
	})
}

// PrepaymentTotalNotIn applies the NotIn predicate on the "prepayment_total" field.
func PrepaymentTotalNotIn(vs ...float64) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrepaymentTotal), v...))
	})
}

// PrepaymentTotalGT applies the GT predicate on the "prepayment_total" field.
func PrepaymentTotalGT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrepaymentTotal), v))
	})
}

// PrepaymentTotalGTE applies the GTE predicate on the "prepayment_total" field.
func PrepaymentTotalGTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrepaymentTotal), v))
	})
}

// PrepaymentTotalLT applies the LT predicate on the "prepayment_total" field.
func PrepaymentTotalLT(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrepaymentTotal), v))
	})
}

// PrepaymentTotalLTE applies the LTE predicate on the "prepayment_total" field.
func PrepaymentTotalLTE(v float64) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrepaymentTotal), v))
	})
}

// SuspensedAtEQ applies the EQ predicate on the "suspensed_at" field.
func SuspensedAtEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtNEQ applies the NEQ predicate on the "suspensed_at" field.
func SuspensedAtNEQ(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtIn applies the In predicate on the "suspensed_at" field.
func SuspensedAtIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSuspensedAt), v...))
	})
}

// SuspensedAtNotIn applies the NotIn predicate on the "suspensed_at" field.
func SuspensedAtNotIn(vs ...time.Time) predicate.Enterprise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Enterprise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSuspensedAt), v...))
	})
}

// SuspensedAtGT applies the GT predicate on the "suspensed_at" field.
func SuspensedAtGT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtGTE applies the GTE predicate on the "suspensed_at" field.
func SuspensedAtGTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtLT applies the LT predicate on the "suspensed_at" field.
func SuspensedAtLT(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtLTE applies the LTE predicate on the "suspensed_at" field.
func SuspensedAtLTE(v time.Time) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuspensedAt), v))
	})
}

// SuspensedAtIsNil applies the IsNil predicate on the "suspensed_at" field.
func SuspensedAtIsNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuspensedAt)))
	})
}

// SuspensedAtNotNil applies the NotNil predicate on the "suspensed_at" field.
func SuspensedAtNotNil() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuspensedAt)))
	})
}

// HasCity applies the HasEdge predicate on the "city" edge.
func HasCity() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCityWith applies the HasEdge predicate on the "city" edge with a given conditions (other predicates).
func HasCityWith(preds ...predicate.City) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CityInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiders applies the HasEdge predicate on the "riders" edge.
func HasRiders() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RidersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RidersTable, RidersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRidersWith applies the HasEdge predicate on the "riders" edge with a given conditions (other predicates).
func HasRidersWith(preds ...predicate.Rider) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RidersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RidersTable, RidersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContracts applies the HasEdge predicate on the "contracts" edge.
func HasContracts() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContractsTable, ContractsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContractsWith applies the HasEdge predicate on the "contracts" edge with a given conditions (other predicates).
func HasContractsWith(preds ...predicate.EnterpriseContract) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ContractsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContractsTable, ContractsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrices applies the HasEdge predicate on the "prices" edge.
func HasPrices() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PricesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPricesWith applies the HasEdge predicate on the "prices" edge with a given conditions (other predicates).
func HasPricesWith(preds ...predicate.EnterprisePrice) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PricesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribes applies the HasEdge predicate on the "subscribes" edge.
func HasSubscribes() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribesWith applies the HasEdge predicate on the "subscribes" edge with a given conditions (other predicates).
func HasSubscribesWith(preds ...predicate.Subscribe) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubscribesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatements applies the HasEdge predicate on the "statements" edge.
func HasStatements() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatementsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatementsWith applies the HasEdge predicate on the "statements" edge with a given conditions (other predicates).
func HasStatementsWith(preds ...predicate.EnterpriseStatement) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatementsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStations applies the HasEdge predicate on the "stations" edge.
func HasStations() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StationsTable, StationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationsWith applies the HasEdge predicate on the "stations" edge with a given conditions (other predicates).
func HasStationsWith(preds ...predicate.EnterpriseStation) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StationsTable, StationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBills applies the HasEdge predicate on the "bills" edge.
func HasBills() predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBillsWith applies the HasEdge predicate on the "bills" edge with a given conditions (other predicates).
func HasBillsWith(preds ...predicate.EnterpriseBill) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BillsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Enterprise) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Enterprise) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Enterprise) predicate.Enterprise {
	return predicate.Enterprise(func(s *sql.Selector) {
		p(s.Not())
	})
}
