// Code generated by entc, DO NOT EDIT.

package enterprise

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the enterprise type in the database.
	Label = "enterprise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContactName holds the string denoting the contact_name field in the database.
	FieldContactName = "contact_name"
	// FieldContactPhone holds the string denoting the contact_phone field in the database.
	FieldContactPhone = "contact_phone"
	// FieldIdcardNumber holds the string denoting the idcard_number field in the database.
	FieldIdcardNumber = "idcard_number"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPayment holds the string denoting the payment field in the database.
	FieldPayment = "payment"
	// FieldDeposit holds the string denoting the deposit field in the database.
	FieldDeposit = "deposit"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldPrepaymentTotal holds the string denoting the prepayment_total field in the database.
	FieldPrepaymentTotal = "prepayment_total"
	// FieldSuspensedAt holds the string denoting the suspensed_at field in the database.
	FieldSuspensedAt = "suspensed_at"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeRiders holds the string denoting the riders edge name in mutations.
	EdgeRiders = "riders"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgePrices holds the string denoting the prices edge name in mutations.
	EdgePrices = "prices"
	// EdgeSubscribes holds the string denoting the subscribes edge name in mutations.
	EdgeSubscribes = "subscribes"
	// EdgeStatements holds the string denoting the statements edge name in mutations.
	EdgeStatements = "statements"
	// EdgeStations holds the string denoting the stations edge name in mutations.
	EdgeStations = "stations"
	// EdgeBills holds the string denoting the bills edge name in mutations.
	EdgeBills = "bills"
	// Table holds the table name of the enterprise in the database.
	Table = "enterprise"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "enterprise"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// RidersTable is the table that holds the riders relation/edge.
	RidersTable = "rider"
	// RidersInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RidersInverseTable = "rider"
	// RidersColumn is the table column denoting the riders relation/edge.
	RidersColumn = "enterprise_id"
	// ContractsTable is the table that holds the contracts relation/edge.
	ContractsTable = "enterprise_contract"
	// ContractsInverseTable is the table name for the EnterpriseContract entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisecontract" package.
	ContractsInverseTable = "enterprise_contract"
	// ContractsColumn is the table column denoting the contracts relation/edge.
	ContractsColumn = "enterprise_id"
	// PricesTable is the table that holds the prices relation/edge.
	PricesTable = "enterprise_price"
	// PricesInverseTable is the table name for the EnterprisePrice entity.
	// It exists in this package in order to avoid circular dependency with the "enterpriseprice" package.
	PricesInverseTable = "enterprise_price"
	// PricesColumn is the table column denoting the prices relation/edge.
	PricesColumn = "enterprise_id"
	// SubscribesTable is the table that holds the subscribes relation/edge.
	SubscribesTable = "subscribe"
	// SubscribesInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribesInverseTable = "subscribe"
	// SubscribesColumn is the table column denoting the subscribes relation/edge.
	SubscribesColumn = "enterprise_id"
	// StatementsTable is the table that holds the statements relation/edge.
	StatementsTable = "enterprise_statement"
	// StatementsInverseTable is the table name for the EnterpriseStatement entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestatement" package.
	StatementsInverseTable = "enterprise_statement"
	// StatementsColumn is the table column denoting the statements relation/edge.
	StatementsColumn = "enterprise_id"
	// StationsTable is the table that holds the stations relation/edge.
	StationsTable = "enterprise_station"
	// StationsInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationsInverseTable = "enterprise_station"
	// StationsColumn is the table column denoting the stations relation/edge.
	StationsColumn = "enterprise_id"
	// BillsTable is the table that holds the bills relation/edge.
	BillsTable = "enterprise_bill"
	// BillsInverseTable is the table name for the EnterpriseBill entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebill" package.
	BillsInverseTable = "enterprise_bill"
	// BillsColumn is the table column denoting the bills relation/edge.
	BillsColumn = "enterprise_id"
)

// Columns holds all SQL columns for enterprise fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldName,
	FieldCompanyName,
	FieldStatus,
	FieldContactName,
	FieldContactPhone,
	FieldIdcardNumber,
	FieldAddress,
	FieldPayment,
	FieldDeposit,
	FieldBalance,
	FieldPrepaymentTotal,
	FieldSuspensedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeposit holds the default value on creation for the "deposit" field.
	DefaultDeposit float64
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// DefaultPrepaymentTotal holds the default value on creation for the "prepayment_total" field.
	DefaultPrepaymentTotal float64
)
