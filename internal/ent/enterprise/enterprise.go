// Code generated by ent, DO NOT EDIT.

package enterprise

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the enterprise type in the database.
	Label = "enterprise"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCompanyName holds the string denoting the company_name field in the database.
	FieldCompanyName = "company_name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldContactName holds the string denoting the contact_name field in the database.
	FieldContactName = "contact_name"
	// FieldContactPhone holds the string denoting the contact_phone field in the database.
	FieldContactPhone = "contact_phone"
	// FieldIdcardNumber holds the string denoting the idcard_number field in the database.
	FieldIdcardNumber = "idcard_number"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldPayment holds the string denoting the payment field in the database.
	FieldPayment = "payment"
	// FieldDeposit holds the string denoting the deposit field in the database.
	FieldDeposit = "deposit"
	// FieldBalance holds the string denoting the balance field in the database.
	FieldBalance = "balance"
	// FieldPrepaymentTotal holds the string denoting the prepayment_total field in the database.
	FieldPrepaymentTotal = "prepayment_total"
	// FieldSuspensedAt holds the string denoting the suspensed_at field in the database.
	FieldSuspensedAt = "suspensed_at"
	// FieldAgent holds the string denoting the agent field in the database.
	FieldAgent = "agent"
	// FieldUseStore holds the string denoting the use_store field in the database.
	FieldUseStore = "use_store"
	// FieldDays holds the string denoting the days field in the database.
	FieldDays = "days"
	// FieldDistance holds the string denoting the distance field in the database.
	FieldDistance = "distance"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeRiders holds the string denoting the riders edge name in mutations.
	EdgeRiders = "riders"
	// EdgeContracts holds the string denoting the contracts edge name in mutations.
	EdgeContracts = "contracts"
	// EdgePrices holds the string denoting the prices edge name in mutations.
	EdgePrices = "prices"
	// EdgeSubscribes holds the string denoting the subscribes edge name in mutations.
	EdgeSubscribes = "subscribes"
	// EdgeStatements holds the string denoting the statements edge name in mutations.
	EdgeStatements = "statements"
	// EdgeStations holds the string denoting the stations edge name in mutations.
	EdgeStations = "stations"
	// EdgeBills holds the string denoting the bills edge name in mutations.
	EdgeBills = "bills"
	// EdgeBattery holds the string denoting the battery edge name in mutations.
	EdgeBattery = "battery"
	// EdgeFeedback holds the string denoting the feedback edge name in mutations.
	EdgeFeedback = "feedback"
	// EdgeAgents holds the string denoting the agents edge name in mutations.
	EdgeAgents = "agents"
	// EdgeCabinets holds the string denoting the cabinets edge name in mutations.
	EdgeCabinets = "cabinets"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgePrepayments holds the string denoting the prepayments edge name in mutations.
	EdgePrepayments = "prepayments"
	// Table holds the table name of the enterprise in the database.
	Table = "enterprise"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "enterprise"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// RidersTable is the table that holds the riders relation/edge.
	RidersTable = "rider"
	// RidersInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RidersInverseTable = "rider"
	// RidersColumn is the table column denoting the riders relation/edge.
	RidersColumn = "enterprise_id"
	// ContractsTable is the table that holds the contracts relation/edge.
	ContractsTable = "enterprise_contract"
	// ContractsInverseTable is the table name for the EnterpriseContract entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisecontract" package.
	ContractsInverseTable = "enterprise_contract"
	// ContractsColumn is the table column denoting the contracts relation/edge.
	ContractsColumn = "enterprise_id"
	// PricesTable is the table that holds the prices relation/edge.
	PricesTable = "enterprise_price"
	// PricesInverseTable is the table name for the EnterprisePrice entity.
	// It exists in this package in order to avoid circular dependency with the "enterpriseprice" package.
	PricesInverseTable = "enterprise_price"
	// PricesColumn is the table column denoting the prices relation/edge.
	PricesColumn = "enterprise_id"
	// SubscribesTable is the table that holds the subscribes relation/edge.
	SubscribesTable = "subscribe"
	// SubscribesInverseTable is the table name for the Subscribe entity.
	// It exists in this package in order to avoid circular dependency with the "subscribe" package.
	SubscribesInverseTable = "subscribe"
	// SubscribesColumn is the table column denoting the subscribes relation/edge.
	SubscribesColumn = "enterprise_id"
	// StatementsTable is the table that holds the statements relation/edge.
	StatementsTable = "enterprise_statement"
	// StatementsInverseTable is the table name for the EnterpriseStatement entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestatement" package.
	StatementsInverseTable = "enterprise_statement"
	// StatementsColumn is the table column denoting the statements relation/edge.
	StatementsColumn = "enterprise_id"
	// StationsTable is the table that holds the stations relation/edge.
	StationsTable = "enterprise_station"
	// StationsInverseTable is the table name for the EnterpriseStation entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisestation" package.
	StationsInverseTable = "enterprise_station"
	// StationsColumn is the table column denoting the stations relation/edge.
	StationsColumn = "enterprise_id"
	// BillsTable is the table that holds the bills relation/edge.
	BillsTable = "enterprise_bill"
	// BillsInverseTable is the table name for the EnterpriseBill entity.
	// It exists in this package in order to avoid circular dependency with the "enterprisebill" package.
	BillsInverseTable = "enterprise_bill"
	// BillsColumn is the table column denoting the bills relation/edge.
	BillsColumn = "enterprise_id"
	// BatteryTable is the table that holds the battery relation/edge.
	BatteryTable = "battery"
	// BatteryInverseTable is the table name for the Battery entity.
	// It exists in this package in order to avoid circular dependency with the "battery" package.
	BatteryInverseTable = "battery"
	// BatteryColumn is the table column denoting the battery relation/edge.
	BatteryColumn = "enterprise_id"
	// FeedbackTable is the table that holds the feedback relation/edge.
	FeedbackTable = "feedback"
	// FeedbackInverseTable is the table name for the Feedback entity.
	// It exists in this package in order to avoid circular dependency with the "feedback" package.
	FeedbackInverseTable = "feedback"
	// FeedbackColumn is the table column denoting the feedback relation/edge.
	FeedbackColumn = "enterprise_id"
	// AgentsTable is the table that holds the agents relation/edge.
	AgentsTable = "agent"
	// AgentsInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	AgentsInverseTable = "agent"
	// AgentsColumn is the table column denoting the agents relation/edge.
	AgentsColumn = "enterprise_agents"
	// CabinetsTable is the table that holds the cabinets relation/edge.
	CabinetsTable = "cabinet"
	// CabinetsInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetsInverseTable = "cabinet"
	// CabinetsColumn is the table column denoting the cabinets relation/edge.
	CabinetsColumn = "enterprise_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "enterprise_id"
	// PrepaymentsTable is the table that holds the prepayments relation/edge.
	PrepaymentsTable = "enterprise_prepayment"
	// PrepaymentsInverseTable is the table name for the EnterprisePrepayment entity.
	// It exists in this package in order to avoid circular dependency with the "enterpriseprepayment" package.
	PrepaymentsInverseTable = "enterprise_prepayment"
	// PrepaymentsColumn is the table column denoting the prepayments relation/edge.
	PrepaymentsColumn = "enterprise_prepayments"
)

// Columns holds all SQL columns for enterprise fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldName,
	FieldCompanyName,
	FieldStatus,
	FieldContactName,
	FieldContactPhone,
	FieldIdcardNumber,
	FieldAddress,
	FieldPayment,
	FieldDeposit,
	FieldBalance,
	FieldPrepaymentTotal,
	FieldSuspensedAt,
	FieldAgent,
	FieldUseStore,
	FieldDays,
	FieldDistance,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultDeposit holds the default value on creation for the "deposit" field.
	DefaultDeposit float64
	// DefaultBalance holds the default value on creation for the "balance" field.
	DefaultBalance float64
	// DefaultPrepaymentTotal holds the default value on creation for the "prepayment_total" field.
	DefaultPrepaymentTotal float64
	// DefaultAgent holds the default value on creation for the "agent" field.
	DefaultAgent bool
	// DefaultUseStore holds the default value on creation for the "use_store" field.
	DefaultUseStore bool
	// DefaultDistance holds the default value on creation for the "distance" field.
	DefaultDistance float64
)

// OrderOption defines the ordering options for the Enterprise queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCompanyName orders the results by the company_name field.
func ByCompanyName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompanyName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByContactName orders the results by the contact_name field.
func ByContactName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactName, opts...).ToFunc()
}

// ByContactPhone orders the results by the contact_phone field.
func ByContactPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContactPhone, opts...).ToFunc()
}

// ByIdcardNumber orders the results by the idcard_number field.
func ByIdcardNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdcardNumber, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByPayment orders the results by the payment field.
func ByPayment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayment, opts...).ToFunc()
}

// ByDeposit orders the results by the deposit field.
func ByDeposit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeposit, opts...).ToFunc()
}

// ByBalance orders the results by the balance field.
func ByBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBalance, opts...).ToFunc()
}

// ByPrepaymentTotal orders the results by the prepayment_total field.
func ByPrepaymentTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrepaymentTotal, opts...).ToFunc()
}

// BySuspensedAt orders the results by the suspensed_at field.
func BySuspensedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuspensedAt, opts...).ToFunc()
}

// ByAgent orders the results by the agent field.
func ByAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgent, opts...).ToFunc()
}

// ByUseStore orders the results by the use_store field.
func ByUseStore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseStore, opts...).ToFunc()
}

// ByDistance orders the results by the distance field.
func ByDistance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistance, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByRidersCount orders the results by riders count.
func ByRidersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRidersStep(), opts...)
	}
}

// ByRiders orders the results by riders terms.
func ByRiders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRidersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContractsCount orders the results by contracts count.
func ByContractsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContractsStep(), opts...)
	}
}

// ByContracts orders the results by contracts terms.
func ByContracts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContractsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPricesCount orders the results by prices count.
func ByPricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPricesStep(), opts...)
	}
}

// ByPrices orders the results by prices terms.
func ByPrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribesCount orders the results by subscribes count.
func BySubscribesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribesStep(), opts...)
	}
}

// BySubscribes orders the results by subscribes terms.
func BySubscribes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatementsCount orders the results by statements count.
func ByStatementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatementsStep(), opts...)
	}
}

// ByStatements orders the results by statements terms.
func ByStatements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStationsCount orders the results by stations count.
func ByStationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStationsStep(), opts...)
	}
}

// ByStations orders the results by stations terms.
func ByStations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBillsCount orders the results by bills count.
func ByBillsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBillsStep(), opts...)
	}
}

// ByBills orders the results by bills terms.
func ByBills(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBillsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBatteryCount orders the results by battery count.
func ByBatteryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBatteryStep(), opts...)
	}
}

// ByBattery orders the results by battery terms.
func ByBattery(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBatteryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFeedbackCount orders the results by feedback count.
func ByFeedbackCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFeedbackStep(), opts...)
	}
}

// ByFeedback orders the results by feedback terms.
func ByFeedback(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFeedbackStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentsCount orders the results by agents count.
func ByAgentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentsStep(), opts...)
	}
}

// ByAgents orders the results by agents terms.
func ByAgents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCabinetsCount orders the results by cabinets count.
func ByCabinetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCabinetsStep(), opts...)
	}
}

// ByCabinets orders the results by cabinets terms.
func ByCabinets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPrepaymentsCount orders the results by prepayments count.
func ByPrepaymentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPrepaymentsStep(), opts...)
	}
}

// ByPrepayments orders the results by prepayments terms.
func ByPrepayments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPrepaymentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newRidersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RidersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RidersTable, RidersColumn),
	)
}
func newContractsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContractsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContractsTable, ContractsColumn),
	)
}
func newPricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
	)
}
func newSubscribesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscribesTable, SubscribesColumn),
	)
}
func newStatementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatementsTable, StatementsColumn),
	)
}
func newStationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StationsTable, StationsColumn),
	)
}
func newBillsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BillsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BillsTable, BillsColumn),
	)
}
func newBatteryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BatteryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BatteryTable, BatteryColumn),
	)
}
func newFeedbackStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FeedbackInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FeedbackTable, FeedbackColumn),
	)
}
func newAgentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentsTable, AgentsColumn),
	)
}
func newCabinetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CabinetsTable, CabinetsColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
func newPrepaymentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PrepaymentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PrepaymentsTable, PrepaymentsColumn),
	)
}
