// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/couponassembly"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// CouponAssemblyUpdate is the builder for updating CouponAssembly entities.
type CouponAssemblyUpdate struct {
	config
	hooks     []Hook
	mutation  *CouponAssemblyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CouponAssemblyUpdate builder.
func (cau *CouponAssemblyUpdate) Where(ps ...predicate.CouponAssembly) *CouponAssemblyUpdate {
	cau.mutation.Where(ps...)
	return cau
}

// SetUpdatedAt sets the "updated_at" field.
func (cau *CouponAssemblyUpdate) SetUpdatedAt(t time.Time) *CouponAssemblyUpdate {
	cau.mutation.SetUpdatedAt(t)
	return cau
}

// SetLastModifier sets the "last_modifier" field.
func (cau *CouponAssemblyUpdate) SetLastModifier(m *model.Modifier) *CouponAssemblyUpdate {
	cau.mutation.SetLastModifier(m)
	return cau
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cau *CouponAssemblyUpdate) ClearLastModifier() *CouponAssemblyUpdate {
	cau.mutation.ClearLastModifier()
	return cau
}

// SetRemark sets the "remark" field.
func (cau *CouponAssemblyUpdate) SetRemark(s string) *CouponAssemblyUpdate {
	cau.mutation.SetRemark(s)
	return cau
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cau *CouponAssemblyUpdate) SetNillableRemark(s *string) *CouponAssemblyUpdate {
	if s != nil {
		cau.SetRemark(*s)
	}
	return cau
}

// ClearRemark clears the value of the "remark" field.
func (cau *CouponAssemblyUpdate) ClearRemark() *CouponAssemblyUpdate {
	cau.mutation.ClearRemark()
	return cau
}

// SetTotal sets the "total" field.
func (cau *CouponAssemblyUpdate) SetTotal(i int) *CouponAssemblyUpdate {
	cau.mutation.ResetTotal()
	cau.mutation.SetTotal(i)
	return cau
}

// AddTotal adds i to the "total" field.
func (cau *CouponAssemblyUpdate) AddTotal(i int) *CouponAssemblyUpdate {
	cau.mutation.AddTotal(i)
	return cau
}

// SetExpiredType sets the "expired_type" field.
func (cau *CouponAssemblyUpdate) SetExpiredType(u uint8) *CouponAssemblyUpdate {
	cau.mutation.ResetExpiredType()
	cau.mutation.SetExpiredType(u)
	return cau
}

// AddExpiredType adds u to the "expired_type" field.
func (cau *CouponAssemblyUpdate) AddExpiredType(u int8) *CouponAssemblyUpdate {
	cau.mutation.AddExpiredType(u)
	return cau
}

// SetRule sets the "rule" field.
func (cau *CouponAssemblyUpdate) SetRule(u uint8) *CouponAssemblyUpdate {
	cau.mutation.ResetRule()
	cau.mutation.SetRule(u)
	return cau
}

// AddRule adds u to the "rule" field.
func (cau *CouponAssemblyUpdate) AddRule(u int8) *CouponAssemblyUpdate {
	cau.mutation.AddRule(u)
	return cau
}

// SetAmount sets the "amount" field.
func (cau *CouponAssemblyUpdate) SetAmount(f float64) *CouponAssemblyUpdate {
	cau.mutation.ResetAmount()
	cau.mutation.SetAmount(f)
	return cau
}

// AddAmount adds f to the "amount" field.
func (cau *CouponAssemblyUpdate) AddAmount(f float64) *CouponAssemblyUpdate {
	cau.mutation.AddAmount(f)
	return cau
}

// SetMultiple sets the "multiple" field.
func (cau *CouponAssemblyUpdate) SetMultiple(b bool) *CouponAssemblyUpdate {
	cau.mutation.SetMultiple(b)
	return cau
}

// SetNillableMultiple sets the "multiple" field if the given value is not nil.
func (cau *CouponAssemblyUpdate) SetNillableMultiple(b *bool) *CouponAssemblyUpdate {
	if b != nil {
		cau.SetMultiple(*b)
	}
	return cau
}

// SetPlans sets the "plans" field.
func (cau *CouponAssemblyUpdate) SetPlans(m []model.Plan) *CouponAssemblyUpdate {
	cau.mutation.SetPlans(m)
	return cau
}

// ClearPlans clears the value of the "plans" field.
func (cau *CouponAssemblyUpdate) ClearPlans() *CouponAssemblyUpdate {
	cau.mutation.ClearPlans()
	return cau
}

// SetCities sets the "cities" field.
func (cau *CouponAssemblyUpdate) SetCities(m []model.City) *CouponAssemblyUpdate {
	cau.mutation.SetCities(m)
	return cau
}

// ClearCities clears the value of the "cities" field.
func (cau *CouponAssemblyUpdate) ClearCities() *CouponAssemblyUpdate {
	cau.mutation.ClearCities()
	return cau
}

// Mutation returns the CouponAssemblyMutation object of the builder.
func (cau *CouponAssemblyUpdate) Mutation() *CouponAssemblyMutation {
	return cau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cau *CouponAssemblyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := cau.defaults(); err != nil {
		return 0, err
	}
	if len(cau.hooks) == 0 {
		affected, err = cau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponAssemblyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cau.mutation = mutation
			affected, err = cau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cau.hooks) - 1; i >= 0; i-- {
			if cau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cau *CouponAssemblyUpdate) SaveX(ctx context.Context) int {
	affected, err := cau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cau *CouponAssemblyUpdate) Exec(ctx context.Context) error {
	_, err := cau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cau *CouponAssemblyUpdate) ExecX(ctx context.Context) {
	if err := cau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cau *CouponAssemblyUpdate) defaults() error {
	if _, ok := cau.mutation.UpdatedAt(); !ok {
		if couponassembly.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponassembly.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponassembly.UpdateDefaultUpdatedAt()
		cau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cau *CouponAssemblyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponAssemblyUpdate {
	cau.modifiers = append(cau.modifiers, modifiers...)
	return cau
}

func (cau *CouponAssemblyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponassembly.Table,
			Columns: couponassembly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponassembly.FieldID,
			},
		},
	}
	if ps := cau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponassembly.FieldUpdatedAt,
		})
	}
	if cau.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldCreator,
		})
	}
	if value, ok := cau.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldLastModifier,
		})
	}
	if cau.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldLastModifier,
		})
	}
	if value, ok := cau.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponassembly.FieldRemark,
		})
	}
	if cau.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponassembly.FieldRemark,
		})
	}
	if value, ok := cau.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: couponassembly.FieldTotal,
		})
	}
	if value, ok := cau.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: couponassembly.FieldTotal,
		})
	}
	if value, ok := cau.mutation.ExpiredType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldExpiredType,
		})
	}
	if value, ok := cau.mutation.AddedExpiredType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldExpiredType,
		})
	}
	if value, ok := cau.mutation.Rule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldRule,
		})
	}
	if value, ok := cau.mutation.AddedRule(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldRule,
		})
	}
	if value, ok := cau.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponassembly.FieldAmount,
		})
	}
	if value, ok := cau.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponassembly.FieldAmount,
		})
	}
	if value, ok := cau.mutation.Multiple(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: couponassembly.FieldMultiple,
		})
	}
	if value, ok := cau.mutation.Plans(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldPlans,
		})
	}
	if cau.mutation.PlansCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldPlans,
		})
	}
	if value, ok := cau.mutation.Cities(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldCities,
		})
	}
	if cau.mutation.CitiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldCities,
		})
	}
	_spec.Modifiers = cau.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, cau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponassembly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CouponAssemblyUpdateOne is the builder for updating a single CouponAssembly entity.
type CouponAssemblyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CouponAssemblyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cauo *CouponAssemblyUpdateOne) SetUpdatedAt(t time.Time) *CouponAssemblyUpdateOne {
	cauo.mutation.SetUpdatedAt(t)
	return cauo
}

// SetLastModifier sets the "last_modifier" field.
func (cauo *CouponAssemblyUpdateOne) SetLastModifier(m *model.Modifier) *CouponAssemblyUpdateOne {
	cauo.mutation.SetLastModifier(m)
	return cauo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cauo *CouponAssemblyUpdateOne) ClearLastModifier() *CouponAssemblyUpdateOne {
	cauo.mutation.ClearLastModifier()
	return cauo
}

// SetRemark sets the "remark" field.
func (cauo *CouponAssemblyUpdateOne) SetRemark(s string) *CouponAssemblyUpdateOne {
	cauo.mutation.SetRemark(s)
	return cauo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cauo *CouponAssemblyUpdateOne) SetNillableRemark(s *string) *CouponAssemblyUpdateOne {
	if s != nil {
		cauo.SetRemark(*s)
	}
	return cauo
}

// ClearRemark clears the value of the "remark" field.
func (cauo *CouponAssemblyUpdateOne) ClearRemark() *CouponAssemblyUpdateOne {
	cauo.mutation.ClearRemark()
	return cauo
}

// SetTotal sets the "total" field.
func (cauo *CouponAssemblyUpdateOne) SetTotal(i int) *CouponAssemblyUpdateOne {
	cauo.mutation.ResetTotal()
	cauo.mutation.SetTotal(i)
	return cauo
}

// AddTotal adds i to the "total" field.
func (cauo *CouponAssemblyUpdateOne) AddTotal(i int) *CouponAssemblyUpdateOne {
	cauo.mutation.AddTotal(i)
	return cauo
}

// SetExpiredType sets the "expired_type" field.
func (cauo *CouponAssemblyUpdateOne) SetExpiredType(u uint8) *CouponAssemblyUpdateOne {
	cauo.mutation.ResetExpiredType()
	cauo.mutation.SetExpiredType(u)
	return cauo
}

// AddExpiredType adds u to the "expired_type" field.
func (cauo *CouponAssemblyUpdateOne) AddExpiredType(u int8) *CouponAssemblyUpdateOne {
	cauo.mutation.AddExpiredType(u)
	return cauo
}

// SetRule sets the "rule" field.
func (cauo *CouponAssemblyUpdateOne) SetRule(u uint8) *CouponAssemblyUpdateOne {
	cauo.mutation.ResetRule()
	cauo.mutation.SetRule(u)
	return cauo
}

// AddRule adds u to the "rule" field.
func (cauo *CouponAssemblyUpdateOne) AddRule(u int8) *CouponAssemblyUpdateOne {
	cauo.mutation.AddRule(u)
	return cauo
}

// SetAmount sets the "amount" field.
func (cauo *CouponAssemblyUpdateOne) SetAmount(f float64) *CouponAssemblyUpdateOne {
	cauo.mutation.ResetAmount()
	cauo.mutation.SetAmount(f)
	return cauo
}

// AddAmount adds f to the "amount" field.
func (cauo *CouponAssemblyUpdateOne) AddAmount(f float64) *CouponAssemblyUpdateOne {
	cauo.mutation.AddAmount(f)
	return cauo
}

// SetMultiple sets the "multiple" field.
func (cauo *CouponAssemblyUpdateOne) SetMultiple(b bool) *CouponAssemblyUpdateOne {
	cauo.mutation.SetMultiple(b)
	return cauo
}

// SetNillableMultiple sets the "multiple" field if the given value is not nil.
func (cauo *CouponAssemblyUpdateOne) SetNillableMultiple(b *bool) *CouponAssemblyUpdateOne {
	if b != nil {
		cauo.SetMultiple(*b)
	}
	return cauo
}

// SetPlans sets the "plans" field.
func (cauo *CouponAssemblyUpdateOne) SetPlans(m []model.Plan) *CouponAssemblyUpdateOne {
	cauo.mutation.SetPlans(m)
	return cauo
}

// ClearPlans clears the value of the "plans" field.
func (cauo *CouponAssemblyUpdateOne) ClearPlans() *CouponAssemblyUpdateOne {
	cauo.mutation.ClearPlans()
	return cauo
}

// SetCities sets the "cities" field.
func (cauo *CouponAssemblyUpdateOne) SetCities(m []model.City) *CouponAssemblyUpdateOne {
	cauo.mutation.SetCities(m)
	return cauo
}

// ClearCities clears the value of the "cities" field.
func (cauo *CouponAssemblyUpdateOne) ClearCities() *CouponAssemblyUpdateOne {
	cauo.mutation.ClearCities()
	return cauo
}

// Mutation returns the CouponAssemblyMutation object of the builder.
func (cauo *CouponAssemblyUpdateOne) Mutation() *CouponAssemblyMutation {
	return cauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauo *CouponAssemblyUpdateOne) Select(field string, fields ...string) *CouponAssemblyUpdateOne {
	cauo.fields = append([]string{field}, fields...)
	return cauo
}

// Save executes the query and returns the updated CouponAssembly entity.
func (cauo *CouponAssemblyUpdateOne) Save(ctx context.Context) (*CouponAssembly, error) {
	var (
		err  error
		node *CouponAssembly
	)
	if err := cauo.defaults(); err != nil {
		return nil, err
	}
	if len(cauo.hooks) == 0 {
		node, err = cauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CouponAssemblyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cauo.mutation = mutation
			node, err = cauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cauo.hooks) - 1; i >= 0; i-- {
			if cauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CouponAssembly)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CouponAssemblyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cauo *CouponAssemblyUpdateOne) SaveX(ctx context.Context) *CouponAssembly {
	node, err := cauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauo *CouponAssemblyUpdateOne) Exec(ctx context.Context) error {
	_, err := cauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauo *CouponAssemblyUpdateOne) ExecX(ctx context.Context) {
	if err := cauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cauo *CouponAssemblyUpdateOne) defaults() error {
	if _, ok := cauo.mutation.UpdatedAt(); !ok {
		if couponassembly.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized couponassembly.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := couponassembly.UpdateDefaultUpdatedAt()
		cauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cauo *CouponAssemblyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CouponAssemblyUpdateOne {
	cauo.modifiers = append(cauo.modifiers, modifiers...)
	return cauo
}

func (cauo *CouponAssemblyUpdateOne) sqlSave(ctx context.Context) (_node *CouponAssembly, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   couponassembly.Table,
			Columns: couponassembly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: couponassembly.FieldID,
			},
		},
	}
	id, ok := cauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CouponAssembly.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, couponassembly.FieldID)
		for _, f := range fields {
			if !couponassembly.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != couponassembly.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: couponassembly.FieldUpdatedAt,
		})
	}
	if cauo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldCreator,
		})
	}
	if value, ok := cauo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldLastModifier,
		})
	}
	if cauo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldLastModifier,
		})
	}
	if value, ok := cauo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: couponassembly.FieldRemark,
		})
	}
	if cauo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: couponassembly.FieldRemark,
		})
	}
	if value, ok := cauo.mutation.Total(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: couponassembly.FieldTotal,
		})
	}
	if value, ok := cauo.mutation.AddedTotal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: couponassembly.FieldTotal,
		})
	}
	if value, ok := cauo.mutation.ExpiredType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldExpiredType,
		})
	}
	if value, ok := cauo.mutation.AddedExpiredType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldExpiredType,
		})
	}
	if value, ok := cauo.mutation.Rule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldRule,
		})
	}
	if value, ok := cauo.mutation.AddedRule(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: couponassembly.FieldRule,
		})
	}
	if value, ok := cauo.mutation.Amount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponassembly.FieldAmount,
		})
	}
	if value, ok := cauo.mutation.AddedAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: couponassembly.FieldAmount,
		})
	}
	if value, ok := cauo.mutation.Multiple(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: couponassembly.FieldMultiple,
		})
	}
	if value, ok := cauo.mutation.Plans(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldPlans,
		})
	}
	if cauo.mutation.PlansCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldPlans,
		})
	}
	if value, ok := cauo.mutation.Cities(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: couponassembly.FieldCities,
		})
	}
	if cauo.mutation.CitiesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: couponassembly.FieldCities,
		})
	}
	_spec.Modifiers = cauo.modifiers
	_node = &CouponAssembly{config: cauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{couponassembly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
