// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderrefund"
)

// OrderRefundCreate is the builder for creating a OrderRefund entity.
type OrderRefundCreate struct {
	config
	mutation *OrderRefundMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (orc *OrderRefundCreate) SetCreatedAt(t time.Time) *OrderRefundCreate {
	orc.mutation.SetCreatedAt(t)
	return orc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableCreatedAt(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetCreatedAt(*t)
	}
	return orc
}

// SetUpdatedAt sets the "updated_at" field.
func (orc *OrderRefundCreate) SetUpdatedAt(t time.Time) *OrderRefundCreate {
	orc.mutation.SetUpdatedAt(t)
	return orc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableUpdatedAt(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetUpdatedAt(*t)
	}
	return orc
}

// SetDeletedAt sets the "deleted_at" field.
func (orc *OrderRefundCreate) SetDeletedAt(t time.Time) *OrderRefundCreate {
	orc.mutation.SetDeletedAt(t)
	return orc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableDeletedAt(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetDeletedAt(*t)
	}
	return orc
}

// SetCreator sets the "creator" field.
func (orc *OrderRefundCreate) SetCreator(m *model.Modifier) *OrderRefundCreate {
	orc.mutation.SetCreator(m)
	return orc
}

// SetLastModifier sets the "last_modifier" field.
func (orc *OrderRefundCreate) SetLastModifier(m *model.Modifier) *OrderRefundCreate {
	orc.mutation.SetLastModifier(m)
	return orc
}

// SetRemark sets the "remark" field.
func (orc *OrderRefundCreate) SetRemark(s string) *OrderRefundCreate {
	orc.mutation.SetRemark(s)
	return orc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableRemark(s *string) *OrderRefundCreate {
	if s != nil {
		orc.SetRemark(*s)
	}
	return orc
}

// SetOrderID sets the "order_id" field.
func (orc *OrderRefundCreate) SetOrderID(u uint64) *OrderRefundCreate {
	orc.mutation.SetOrderID(u)
	return orc
}

// SetStatus sets the "status" field.
func (orc *OrderRefundCreate) SetStatus(u uint8) *OrderRefundCreate {
	orc.mutation.SetStatus(u)
	return orc
}

// SetAmount sets the "amount" field.
func (orc *OrderRefundCreate) SetAmount(f float64) *OrderRefundCreate {
	orc.mutation.SetAmount(f)
	return orc
}

// SetOutRefundNo sets the "out_refund_no" field.
func (orc *OrderRefundCreate) SetOutRefundNo(s string) *OrderRefundCreate {
	orc.mutation.SetOutRefundNo(s)
	return orc
}

// SetReason sets the "reason" field.
func (orc *OrderRefundCreate) SetReason(s string) *OrderRefundCreate {
	orc.mutation.SetReason(s)
	return orc
}

// SetRefundAt sets the "refund_at" field.
func (orc *OrderRefundCreate) SetRefundAt(t time.Time) *OrderRefundCreate {
	orc.mutation.SetRefundAt(t)
	return orc
}

// SetNillableRefundAt sets the "refund_at" field if the given value is not nil.
func (orc *OrderRefundCreate) SetNillableRefundAt(t *time.Time) *OrderRefundCreate {
	if t != nil {
		orc.SetRefundAt(*t)
	}
	return orc
}

// SetOrder sets the "order" edge to the Order entity.
func (orc *OrderRefundCreate) SetOrder(o *Order) *OrderRefundCreate {
	return orc.SetOrderID(o.ID)
}

// Mutation returns the OrderRefundMutation object of the builder.
func (orc *OrderRefundCreate) Mutation() *OrderRefundMutation {
	return orc.mutation
}

// Save creates the OrderRefund in the database.
func (orc *OrderRefundCreate) Save(ctx context.Context) (*OrderRefund, error) {
	if err := orc.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*OrderRefund, OrderRefundMutation](ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OrderRefundCreate) SaveX(ctx context.Context) *OrderRefund {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OrderRefundCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OrderRefundCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OrderRefundCreate) defaults() error {
	if _, ok := orc.mutation.CreatedAt(); !ok {
		if orderrefund.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderrefund.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderrefund.DefaultCreatedAt()
		orc.mutation.SetCreatedAt(v)
	}
	if _, ok := orc.mutation.UpdatedAt(); !ok {
		if orderrefund.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderrefund.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderrefund.DefaultUpdatedAt()
		orc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (orc *OrderRefundCreate) check() error {
	if _, ok := orc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderRefund.created_at"`)}
	}
	if _, ok := orc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderRefund.updated_at"`)}
	}
	if _, ok := orc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderRefund.order_id"`)}
	}
	if _, ok := orc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "OrderRefund.status"`)}
	}
	if _, ok := orc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "OrderRefund.amount"`)}
	}
	if _, ok := orc.mutation.OutRefundNo(); !ok {
		return &ValidationError{Name: "out_refund_no", err: errors.New(`ent: missing required field "OrderRefund.out_refund_no"`)}
	}
	if _, ok := orc.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "OrderRefund.reason"`)}
	}
	if _, ok := orc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderRefund.order"`)}
	}
	return nil
}

func (orc *OrderRefundCreate) sqlSave(ctx context.Context) (*OrderRefund, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OrderRefundCreate) createSpec() (*OrderRefund, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderRefund{config: orc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderrefund.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderrefund.FieldID,
			},
		}
	)
	_spec.OnConflict = orc.conflict
	if value, ok := orc.mutation.CreatedAt(); ok {
		_spec.SetField(orderrefund.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := orc.mutation.UpdatedAt(); ok {
		_spec.SetField(orderrefund.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := orc.mutation.DeletedAt(); ok {
		_spec.SetField(orderrefund.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := orc.mutation.Creator(); ok {
		_spec.SetField(orderrefund.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := orc.mutation.LastModifier(); ok {
		_spec.SetField(orderrefund.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := orc.mutation.Remark(); ok {
		_spec.SetField(orderrefund.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := orc.mutation.Status(); ok {
		_spec.SetField(orderrefund.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := orc.mutation.Amount(); ok {
		_spec.SetField(orderrefund.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := orc.mutation.OutRefundNo(); ok {
		_spec.SetField(orderrefund.FieldOutRefundNo, field.TypeString, value)
		_node.OutRefundNo = value
	}
	if value, ok := orc.mutation.Reason(); ok {
		_spec.SetField(orderrefund.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := orc.mutation.RefundAt(); ok {
		_spec.SetField(orderrefund.FieldRefundAt, field.TypeTime, value)
		_node.RefundAt = &value
	}
	if nodes := orc.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   orderrefund.OrderTable,
			Columns: []string{orderrefund.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderRefund.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderRefundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (orc *OrderRefundCreate) OnConflict(opts ...sql.ConflictOption) *OrderRefundUpsertOne {
	orc.conflict = opts
	return &OrderRefundUpsertOne{
		create: orc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orc *OrderRefundCreate) OnConflictColumns(columns ...string) *OrderRefundUpsertOne {
	orc.conflict = append(orc.conflict, sql.ConflictColumns(columns...))
	return &OrderRefundUpsertOne{
		create: orc,
	}
}

type (
	// OrderRefundUpsertOne is the builder for "upsert"-ing
	//  one OrderRefund node.
	OrderRefundUpsertOne struct {
		create *OrderRefundCreate
	}

	// OrderRefundUpsert is the "OnConflict" setter.
	OrderRefundUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsert) SetUpdatedAt(v time.Time) *OrderRefundUpsert {
	u.Set(orderrefund.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateUpdatedAt() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderRefundUpsert) SetDeletedAt(v time.Time) *OrderRefundUpsert {
	u.Set(orderrefund.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateDeletedAt() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderRefundUpsert) ClearDeletedAt() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderRefundUpsert) SetLastModifier(v *model.Modifier) *OrderRefundUpsert {
	u.Set(orderrefund.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateLastModifier() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderRefundUpsert) ClearLastModifier() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderRefundUpsert) SetRemark(v string) *OrderRefundUpsert {
	u.Set(orderrefund.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateRemark() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderRefundUpsert) ClearRemark() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldRemark)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsert) SetOrderID(v uint64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateOrderID() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldOrderID)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderRefundUpsert) SetStatus(v uint8) *OrderRefundUpsert {
	u.Set(orderrefund.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateStatus() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OrderRefundUpsert) AddStatus(v uint8) *OrderRefundUpsert {
	u.Add(orderrefund.FieldStatus, v)
	return u
}

// SetAmount sets the "amount" field.
func (u *OrderRefundUpsert) SetAmount(v float64) *OrderRefundUpsert {
	u.Set(orderrefund.FieldAmount, v)
	return u
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateAmount() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldAmount)
	return u
}

// AddAmount adds v to the "amount" field.
func (u *OrderRefundUpsert) AddAmount(v float64) *OrderRefundUpsert {
	u.Add(orderrefund.FieldAmount, v)
	return u
}

// SetOutRefundNo sets the "out_refund_no" field.
func (u *OrderRefundUpsert) SetOutRefundNo(v string) *OrderRefundUpsert {
	u.Set(orderrefund.FieldOutRefundNo, v)
	return u
}

// UpdateOutRefundNo sets the "out_refund_no" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateOutRefundNo() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldOutRefundNo)
	return u
}

// SetReason sets the "reason" field.
func (u *OrderRefundUpsert) SetReason(v string) *OrderRefundUpsert {
	u.Set(orderrefund.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateReason() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldReason)
	return u
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsert) SetRefundAt(v time.Time) *OrderRefundUpsert {
	u.Set(orderrefund.FieldRefundAt, v)
	return u
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsert) UpdateRefundAt() *OrderRefundUpsert {
	u.SetExcluded(orderrefund.FieldRefundAt)
	return u
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsert) ClearRefundAt() *OrderRefundUpsert {
	u.SetNull(orderrefund.FieldRefundAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrderRefundUpsertOne) UpdateNewValues() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderrefund.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(orderrefund.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderRefundUpsertOne) Ignore() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderRefundUpsertOne) DoNothing() *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderRefundCreate.OnConflict
// documentation for more info.
func (u *OrderRefundUpsertOne) Update(set func(*OrderRefundUpsert)) *OrderRefundUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderRefundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsertOne) SetUpdatedAt(v time.Time) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateUpdatedAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderRefundUpsertOne) SetDeletedAt(v time.Time) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateDeletedAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderRefundUpsertOne) ClearDeletedAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderRefundUpsertOne) SetLastModifier(v *model.Modifier) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateLastModifier() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderRefundUpsertOne) ClearLastModifier() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderRefundUpsertOne) SetRemark(v string) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateRemark() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderRefundUpsertOne) ClearRemark() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRemark()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsertOne) SetOrderID(v uint64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateOrderID() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderRefundUpsertOne) SetStatus(v uint8) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderRefundUpsertOne) AddStatus(v uint8) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateStatus() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateStatus()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderRefundUpsertOne) SetAmount(v float64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *OrderRefundUpsertOne) AddAmount(v float64) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateAmount() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateAmount()
	})
}

// SetOutRefundNo sets the "out_refund_no" field.
func (u *OrderRefundUpsertOne) SetOutRefundNo(v string) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOutRefundNo(v)
	})
}

// UpdateOutRefundNo sets the "out_refund_no" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateOutRefundNo() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOutRefundNo()
	})
}

// SetReason sets the "reason" field.
func (u *OrderRefundUpsertOne) SetReason(v string) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateReason() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateReason()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsertOne) SetRefundAt(v time.Time) *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsertOne) UpdateRefundAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsertOne) ClearRefundAt() *OrderRefundUpsertOne {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *OrderRefundUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderRefundCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderRefundUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderRefundUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderRefundUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderRefundCreateBulk is the builder for creating many OrderRefund entities in bulk.
type OrderRefundCreateBulk struct {
	config
	builders []*OrderRefundCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderRefund entities in the database.
func (orcb *OrderRefundCreateBulk) Save(ctx context.Context) ([]*OrderRefund, error) {
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OrderRefund, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderRefundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = orcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OrderRefundCreateBulk) SaveX(ctx context.Context) []*OrderRefund {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OrderRefundCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OrderRefundCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderRefund.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderRefundUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (orcb *OrderRefundCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderRefundUpsertBulk {
	orcb.conflict = opts
	return &OrderRefundUpsertBulk{
		create: orcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (orcb *OrderRefundCreateBulk) OnConflictColumns(columns ...string) *OrderRefundUpsertBulk {
	orcb.conflict = append(orcb.conflict, sql.ConflictColumns(columns...))
	return &OrderRefundUpsertBulk{
		create: orcb,
	}
}

// OrderRefundUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderRefund nodes.
type OrderRefundUpsertBulk struct {
	create *OrderRefundCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrderRefundUpsertBulk) UpdateNewValues() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderrefund.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(orderrefund.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderRefund.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderRefundUpsertBulk) Ignore() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderRefundUpsertBulk) DoNothing() *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderRefundCreateBulk.OnConflict
// documentation for more info.
func (u *OrderRefundUpsertBulk) Update(set func(*OrderRefundUpsert)) *OrderRefundUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderRefundUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderRefundUpsertBulk) SetUpdatedAt(v time.Time) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateUpdatedAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderRefundUpsertBulk) SetDeletedAt(v time.Time) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateDeletedAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderRefundUpsertBulk) ClearDeletedAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderRefundUpsertBulk) SetLastModifier(v *model.Modifier) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateLastModifier() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderRefundUpsertBulk) ClearLastModifier() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderRefundUpsertBulk) SetRemark(v string) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateRemark() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderRefundUpsertBulk) ClearRemark() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRemark()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderRefundUpsertBulk) SetOrderID(v uint64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateOrderID() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOrderID()
	})
}

// SetStatus sets the "status" field.
func (u *OrderRefundUpsertBulk) SetStatus(v uint8) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderRefundUpsertBulk) AddStatus(v uint8) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateStatus() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateStatus()
	})
}

// SetAmount sets the "amount" field.
func (u *OrderRefundUpsertBulk) SetAmount(v float64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "amount" field.
func (u *OrderRefundUpsertBulk) AddAmount(v float64) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "amount" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateAmount() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateAmount()
	})
}

// SetOutRefundNo sets the "out_refund_no" field.
func (u *OrderRefundUpsertBulk) SetOutRefundNo(v string) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetOutRefundNo(v)
	})
}

// UpdateOutRefundNo sets the "out_refund_no" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateOutRefundNo() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateOutRefundNo()
	})
}

// SetReason sets the "reason" field.
func (u *OrderRefundUpsertBulk) SetReason(v string) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateReason() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateReason()
	})
}

// SetRefundAt sets the "refund_at" field.
func (u *OrderRefundUpsertBulk) SetRefundAt(v time.Time) *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.SetRefundAt(v)
	})
}

// UpdateRefundAt sets the "refund_at" field to the value that was provided on create.
func (u *OrderRefundUpsertBulk) UpdateRefundAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.UpdateRefundAt()
	})
}

// ClearRefundAt clears the value of the "refund_at" field.
func (u *OrderRefundUpsertBulk) ClearRefundAt() *OrderRefundUpsertBulk {
	return u.Update(func(s *OrderRefundUpsert) {
		s.ClearRefundAt()
	})
}

// Exec executes the query.
func (u *OrderRefundUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderRefundCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderRefundCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderRefundUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
