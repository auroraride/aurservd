// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/feedback"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// FeedbackQuery is the builder for querying Feedback entities.
type FeedbackQuery struct {
	config
	ctx            *QueryContext
	order          []feedback.OrderOption
	inters         []Interceptor
	predicates     []predicate.Feedback
	withEnterprise *EnterpriseQuery
	withAgent      *AgentQuery
	withRider      *RiderQuery
	withCity       *CityQuery
	modifiers      []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeedbackQuery builder.
func (fq *FeedbackQuery) Where(ps ...predicate.Feedback) *FeedbackQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *FeedbackQuery) Limit(limit int) *FeedbackQuery {
	fq.ctx.Limit = &limit
	return fq
}

// Offset to start from.
func (fq *FeedbackQuery) Offset(offset int) *FeedbackQuery {
	fq.ctx.Offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FeedbackQuery) Unique(unique bool) *FeedbackQuery {
	fq.ctx.Unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *FeedbackQuery) Order(o ...feedback.OrderOption) *FeedbackQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (fq *FeedbackQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.EnterpriseTable, feedback.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgent chains the current query on the "agent" edge.
func (fq *FeedbackQuery) QueryAgent() *AgentQuery {
	query := (&AgentClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.AgentTable, feedback.AgentColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (fq *FeedbackQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.RiderTable, feedback.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (fq *FeedbackQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feedback.Table, feedback.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, feedback.CityTable, feedback.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Feedback entity from the query.
// Returns a *NotFoundError when no Feedback was found.
func (fq *FeedbackQuery) First(ctx context.Context) (*Feedback, error) {
	nodes, err := fq.Limit(1).All(setContextOp(ctx, fq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feedback.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FeedbackQuery) FirstX(ctx context.Context) *Feedback {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Feedback ID from the query.
// Returns a *NotFoundError when no Feedback ID was found.
func (fq *FeedbackQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = fq.Limit(1).IDs(setContextOp(ctx, fq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feedback.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FeedbackQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Feedback entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Feedback entity is found.
// Returns a *NotFoundError when no Feedback entities are found.
func (fq *FeedbackQuery) Only(ctx context.Context) (*Feedback, error) {
	nodes, err := fq.Limit(2).All(setContextOp(ctx, fq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feedback.Label}
	default:
		return nil, &NotSingularError{feedback.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FeedbackQuery) OnlyX(ctx context.Context) *Feedback {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Feedback ID in the query.
// Returns a *NotSingularError when more than one Feedback ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FeedbackQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = fq.Limit(2).IDs(setContextOp(ctx, fq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feedback.Label}
	default:
		err = &NotSingularError{feedback.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FeedbackQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Feedbacks.
func (fq *FeedbackQuery) All(ctx context.Context) ([]*Feedback, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryAll)
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Feedback, *FeedbackQuery]()
	return withInterceptors[[]*Feedback](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *FeedbackQuery) AllX(ctx context.Context) []*Feedback {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Feedback IDs.
func (fq *FeedbackQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if fq.ctx.Unique == nil && fq.path != nil {
		fq.Unique(true)
	}
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryIDs)
	if err = fq.Select(feedback.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FeedbackQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FeedbackQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryCount)
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*FeedbackQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FeedbackQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FeedbackQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryExist)
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FeedbackQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeedbackQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FeedbackQuery) Clone() *FeedbackQuery {
	if fq == nil {
		return nil
	}
	return &FeedbackQuery{
		config:         fq.config,
		ctx:            fq.ctx.Clone(),
		order:          append([]feedback.OrderOption{}, fq.order...),
		inters:         append([]Interceptor{}, fq.inters...),
		predicates:     append([]predicate.Feedback{}, fq.predicates...),
		withEnterprise: fq.withEnterprise.Clone(),
		withAgent:      fq.withAgent.Clone(),
		withRider:      fq.withRider.Clone(),
		withCity:       fq.withCity.Clone(),
		// clone intermediate query.
		sql:       fq.sql.Clone(),
		path:      fq.path,
		modifiers: append([]func(*sql.Selector){}, fq.modifiers...),
	}
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeedbackQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *FeedbackQuery {
	query := (&EnterpriseClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withEnterprise = query
	return fq
}

// WithAgent tells the query-builder to eager-load the nodes that are connected to
// the "agent" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeedbackQuery) WithAgent(opts ...func(*AgentQuery)) *FeedbackQuery {
	query := (&AgentClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withAgent = query
	return fq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeedbackQuery) WithRider(opts ...func(*RiderQuery)) *FeedbackQuery {
	query := (&RiderClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withRider = query
	return fq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeedbackQuery) WithCity(opts ...func(*CityQuery)) *FeedbackQuery {
	query := (&CityClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withCity = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Feedback.Query().
//		GroupBy(feedback.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fq *FeedbackQuery) GroupBy(field string, fields ...string) *FeedbackGroupBy {
	fq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeedbackGroupBy{build: fq}
	grbuild.flds = &fq.ctx.Fields
	grbuild.label = feedback.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Feedback.Query().
//		Select(feedback.FieldCreatedAt).
//		Scan(ctx, &v)
func (fq *FeedbackQuery) Select(fields ...string) *FeedbackSelect {
	fq.ctx.Fields = append(fq.ctx.Fields, fields...)
	sbuild := &FeedbackSelect{FeedbackQuery: fq}
	sbuild.label = feedback.Label
	sbuild.flds, sbuild.scan = &fq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeedbackSelect configured with the given aggregations.
func (fq *FeedbackQuery) Aggregate(fns ...AggregateFunc) *FeedbackSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FeedbackQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.ctx.Fields {
		if !feedback.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *FeedbackQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Feedback, error) {
	var (
		nodes       = []*Feedback{}
		_spec       = fq.querySpec()
		loadedTypes = [4]bool{
			fq.withEnterprise != nil,
			fq.withAgent != nil,
			fq.withRider != nil,
			fq.withCity != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Feedback).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Feedback{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withEnterprise; query != nil {
		if err := fq.loadEnterprise(ctx, query, nodes, nil,
			func(n *Feedback, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withAgent; query != nil {
		if err := fq.loadAgent(ctx, query, nodes, nil,
			func(n *Feedback, e *Agent) { n.Edges.Agent = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withRider; query != nil {
		if err := fq.loadRider(ctx, query, nodes, nil,
			func(n *Feedback, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withCity; query != nil {
		if err := fq.loadCity(ctx, query, nodes, nil,
			func(n *Feedback, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FeedbackQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*Feedback, init func(*Feedback), assign func(*Feedback, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Feedback)
	for i := range nodes {
		if nodes[i].EnterpriseID == nil {
			continue
		}
		fk := *nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FeedbackQuery) loadAgent(ctx context.Context, query *AgentQuery, nodes []*Feedback, init func(*Feedback), assign func(*Feedback, *Agent)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Feedback)
	for i := range nodes {
		if nodes[i].AgentID == nil {
			continue
		}
		fk := *nodes[i].AgentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FeedbackQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Feedback, init func(*Feedback), assign func(*Feedback, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Feedback)
	for i := range nodes {
		if nodes[i].RiderID == nil {
			continue
		}
		fk := *nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FeedbackQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Feedback, init func(*Feedback), assign func(*Feedback, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Feedback)
	for i := range nodes {
		if nodes[i].CityID == nil {
			continue
		}
		fk := *nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (fq *FeedbackQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	_spec.Node.Columns = fq.ctx.Fields
	if len(fq.ctx.Fields) > 0 {
		_spec.Unique = fq.ctx.Unique != nil && *fq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FeedbackQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feedback.Table, feedback.Columns, sqlgraph.NewFieldSpec(feedback.FieldID, field.TypeUint64))
	_spec.From = fq.sql
	if unique := fq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fq.path != nil {
		_spec.Unique = true
	}
	if fields := fq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feedback.FieldID)
		for i := range fields {
			if fields[i] != feedback.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if fq.withEnterprise != nil {
			_spec.Node.AddColumnOnce(feedback.FieldEnterpriseID)
		}
		if fq.withAgent != nil {
			_spec.Node.AddColumnOnce(feedback.FieldAgentID)
		}
		if fq.withRider != nil {
			_spec.Node.AddColumnOnce(feedback.FieldRiderID)
		}
		if fq.withCity != nil {
			_spec.Node.AddColumnOnce(feedback.FieldCityID)
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FeedbackQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(feedback.Table)
	columns := fq.ctx.Fields
	if len(columns) == 0 {
		columns = feedback.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.ctx.Unique != nil && *fq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range fq.modifiers {
		m(selector)
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fq *FeedbackQuery) Modify(modifiers ...func(s *sql.Selector)) *FeedbackSelect {
	fq.modifiers = append(fq.modifiers, modifiers...)
	return fq.Select()
}

type FeedbackQueryWith string

var (
	FeedbackQueryWithEnterprise FeedbackQueryWith = "Enterprise"
	FeedbackQueryWithAgent      FeedbackQueryWith = "Agent"
	FeedbackQueryWithRider      FeedbackQueryWith = "Rider"
	FeedbackQueryWithCity       FeedbackQueryWith = "City"
)

func (fq *FeedbackQuery) With(withEdges ...FeedbackQueryWith) *FeedbackQuery {
	for _, v := range withEdges {
		switch v {
		case FeedbackQueryWithEnterprise:
			fq.WithEnterprise()
		case FeedbackQueryWithAgent:
			fq.WithAgent()
		case FeedbackQueryWithRider:
			fq.WithRider()
		case FeedbackQueryWithCity:
			fq.WithCity()
		}
	}
	return fq
}

// FeedbackGroupBy is the group-by builder for Feedback entities.
type FeedbackGroupBy struct {
	selector
	build *FeedbackQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FeedbackGroupBy) Aggregate(fns ...AggregateFunc) *FeedbackGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *FeedbackGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgb.build.ctx, ent.OpQueryGroupBy)
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedbackQuery, *FeedbackGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *FeedbackGroupBy) sqlScan(ctx context.Context, root *FeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeedbackSelect is the builder for selecting fields of Feedback entities.
type FeedbackSelect struct {
	*FeedbackQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FeedbackSelect) Aggregate(fns ...AggregateFunc) *FeedbackSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FeedbackSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fs.ctx, ent.OpQuerySelect)
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeedbackQuery, *FeedbackSelect](ctx, fs.FeedbackQuery, fs, fs.inters, v)
}

func (fs *FeedbackSelect) sqlScan(ctx context.Context, root *FeedbackQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fs *FeedbackSelect) Modify(modifiers ...func(s *sql.Selector)) *FeedbackSelect {
	fs.modifiers = append(fs.modifiers, modifiers...)
	return fs
}
