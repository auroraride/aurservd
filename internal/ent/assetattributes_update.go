// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assetattributes"
	"github.com/auroraride/aurservd/internal/ent/assetattributevalues"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetAttributesUpdate is the builder for updating AssetAttributes entities.
type AssetAttributesUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetAttributesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetAttributesUpdate builder.
func (aau *AssetAttributesUpdate) Where(ps ...predicate.AssetAttributes) *AssetAttributesUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetUpdatedAt sets the "updated_at" field.
func (aau *AssetAttributesUpdate) SetUpdatedAt(t time.Time) *AssetAttributesUpdate {
	aau.mutation.SetUpdatedAt(t)
	return aau
}

// SetAssetType sets the "asset_type" field.
func (aau *AssetAttributesUpdate) SetAssetType(u uint8) *AssetAttributesUpdate {
	aau.mutation.ResetAssetType()
	aau.mutation.SetAssetType(u)
	return aau
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (aau *AssetAttributesUpdate) SetNillableAssetType(u *uint8) *AssetAttributesUpdate {
	if u != nil {
		aau.SetAssetType(*u)
	}
	return aau
}

// AddAssetType adds u to the "asset_type" field.
func (aau *AssetAttributesUpdate) AddAssetType(u int8) *AssetAttributesUpdate {
	aau.mutation.AddAssetType(u)
	return aau
}

// ClearAssetType clears the value of the "asset_type" field.
func (aau *AssetAttributesUpdate) ClearAssetType() *AssetAttributesUpdate {
	aau.mutation.ClearAssetType()
	return aau
}

// SetName sets the "name" field.
func (aau *AssetAttributesUpdate) SetName(s string) *AssetAttributesUpdate {
	aau.mutation.SetName(s)
	return aau
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aau *AssetAttributesUpdate) SetNillableName(s *string) *AssetAttributesUpdate {
	if s != nil {
		aau.SetName(*s)
	}
	return aau
}

// ClearName clears the value of the "name" field.
func (aau *AssetAttributesUpdate) ClearName() *AssetAttributesUpdate {
	aau.mutation.ClearName()
	return aau
}

// SetKey sets the "key" field.
func (aau *AssetAttributesUpdate) SetKey(s string) *AssetAttributesUpdate {
	aau.mutation.SetKey(s)
	return aau
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aau *AssetAttributesUpdate) SetNillableKey(s *string) *AssetAttributesUpdate {
	if s != nil {
		aau.SetKey(*s)
	}
	return aau
}

// ClearKey clears the value of the "key" field.
func (aau *AssetAttributesUpdate) ClearKey() *AssetAttributesUpdate {
	aau.mutation.ClearKey()
	return aau
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (aau *AssetAttributesUpdate) AddValueIDs(ids ...uint64) *AssetAttributesUpdate {
	aau.mutation.AddValueIDs(ids...)
	return aau
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (aau *AssetAttributesUpdate) AddValues(a ...*AssetAttributeValues) *AssetAttributesUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aau.AddValueIDs(ids...)
}

// Mutation returns the AssetAttributesMutation object of the builder.
func (aau *AssetAttributesUpdate) Mutation() *AssetAttributesMutation {
	return aau.mutation
}

// ClearValues clears all "values" edges to the AssetAttributeValues entity.
func (aau *AssetAttributesUpdate) ClearValues() *AssetAttributesUpdate {
	aau.mutation.ClearValues()
	return aau
}

// RemoveValueIDs removes the "values" edge to AssetAttributeValues entities by IDs.
func (aau *AssetAttributesUpdate) RemoveValueIDs(ids ...uint64) *AssetAttributesUpdate {
	aau.mutation.RemoveValueIDs(ids...)
	return aau
}

// RemoveValues removes "values" edges to AssetAttributeValues entities.
func (aau *AssetAttributesUpdate) RemoveValues(a ...*AssetAttributeValues) *AssetAttributesUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aau.RemoveValueIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *AssetAttributesUpdate) Save(ctx context.Context) (int, error) {
	aau.defaults()
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *AssetAttributesUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *AssetAttributesUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *AssetAttributesUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aau *AssetAttributesUpdate) defaults() {
	if _, ok := aau.mutation.UpdatedAt(); !ok {
		v := assetattributes.UpdateDefaultUpdatedAt()
		aau.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aau *AssetAttributesUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetAttributesUpdate {
	aau.modifiers = append(aau.modifiers, modifiers...)
	return aau
}

func (aau *AssetAttributesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetattributes.Table, assetattributes.Columns, sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributes.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aau.mutation.AssetType(); ok {
		_spec.SetField(assetattributes.FieldAssetType, field.TypeUint8, value)
	}
	if value, ok := aau.mutation.AddedAssetType(); ok {
		_spec.AddField(assetattributes.FieldAssetType, field.TypeUint8, value)
	}
	if aau.mutation.AssetTypeCleared() {
		_spec.ClearField(assetattributes.FieldAssetType, field.TypeUint8)
	}
	if value, ok := aau.mutation.Name(); ok {
		_spec.SetField(assetattributes.FieldName, field.TypeString, value)
	}
	if aau.mutation.NameCleared() {
		_spec.ClearField(assetattributes.FieldName, field.TypeString)
	}
	if value, ok := aau.mutation.Key(); ok {
		_spec.SetField(assetattributes.FieldKey, field.TypeString, value)
	}
	if aau.mutation.KeyCleared() {
		_spec.ClearField(assetattributes.FieldKey, field.TypeString)
	}
	if aau.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.RemovedValuesIDs(); len(nodes) > 0 && !aau.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetattributes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// AssetAttributesUpdateOne is the builder for updating a single AssetAttributes entity.
type AssetAttributesUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetAttributesMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aauo *AssetAttributesUpdateOne) SetUpdatedAt(t time.Time) *AssetAttributesUpdateOne {
	aauo.mutation.SetUpdatedAt(t)
	return aauo
}

// SetAssetType sets the "asset_type" field.
func (aauo *AssetAttributesUpdateOne) SetAssetType(u uint8) *AssetAttributesUpdateOne {
	aauo.mutation.ResetAssetType()
	aauo.mutation.SetAssetType(u)
	return aauo
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (aauo *AssetAttributesUpdateOne) SetNillableAssetType(u *uint8) *AssetAttributesUpdateOne {
	if u != nil {
		aauo.SetAssetType(*u)
	}
	return aauo
}

// AddAssetType adds u to the "asset_type" field.
func (aauo *AssetAttributesUpdateOne) AddAssetType(u int8) *AssetAttributesUpdateOne {
	aauo.mutation.AddAssetType(u)
	return aauo
}

// ClearAssetType clears the value of the "asset_type" field.
func (aauo *AssetAttributesUpdateOne) ClearAssetType() *AssetAttributesUpdateOne {
	aauo.mutation.ClearAssetType()
	return aauo
}

// SetName sets the "name" field.
func (aauo *AssetAttributesUpdateOne) SetName(s string) *AssetAttributesUpdateOne {
	aauo.mutation.SetName(s)
	return aauo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aauo *AssetAttributesUpdateOne) SetNillableName(s *string) *AssetAttributesUpdateOne {
	if s != nil {
		aauo.SetName(*s)
	}
	return aauo
}

// ClearName clears the value of the "name" field.
func (aauo *AssetAttributesUpdateOne) ClearName() *AssetAttributesUpdateOne {
	aauo.mutation.ClearName()
	return aauo
}

// SetKey sets the "key" field.
func (aauo *AssetAttributesUpdateOne) SetKey(s string) *AssetAttributesUpdateOne {
	aauo.mutation.SetKey(s)
	return aauo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aauo *AssetAttributesUpdateOne) SetNillableKey(s *string) *AssetAttributesUpdateOne {
	if s != nil {
		aauo.SetKey(*s)
	}
	return aauo
}

// ClearKey clears the value of the "key" field.
func (aauo *AssetAttributesUpdateOne) ClearKey() *AssetAttributesUpdateOne {
	aauo.mutation.ClearKey()
	return aauo
}

// AddValueIDs adds the "values" edge to the AssetAttributeValues entity by IDs.
func (aauo *AssetAttributesUpdateOne) AddValueIDs(ids ...uint64) *AssetAttributesUpdateOne {
	aauo.mutation.AddValueIDs(ids...)
	return aauo
}

// AddValues adds the "values" edges to the AssetAttributeValues entity.
func (aauo *AssetAttributesUpdateOne) AddValues(a ...*AssetAttributeValues) *AssetAttributesUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aauo.AddValueIDs(ids...)
}

// Mutation returns the AssetAttributesMutation object of the builder.
func (aauo *AssetAttributesUpdateOne) Mutation() *AssetAttributesMutation {
	return aauo.mutation
}

// ClearValues clears all "values" edges to the AssetAttributeValues entity.
func (aauo *AssetAttributesUpdateOne) ClearValues() *AssetAttributesUpdateOne {
	aauo.mutation.ClearValues()
	return aauo
}

// RemoveValueIDs removes the "values" edge to AssetAttributeValues entities by IDs.
func (aauo *AssetAttributesUpdateOne) RemoveValueIDs(ids ...uint64) *AssetAttributesUpdateOne {
	aauo.mutation.RemoveValueIDs(ids...)
	return aauo
}

// RemoveValues removes "values" edges to AssetAttributeValues entities.
func (aauo *AssetAttributesUpdateOne) RemoveValues(a ...*AssetAttributeValues) *AssetAttributesUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aauo.RemoveValueIDs(ids...)
}

// Where appends a list predicates to the AssetAttributesUpdate builder.
func (aauo *AssetAttributesUpdateOne) Where(ps ...predicate.AssetAttributes) *AssetAttributesUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *AssetAttributesUpdateOne) Select(field string, fields ...string) *AssetAttributesUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated AssetAttributes entity.
func (aauo *AssetAttributesUpdateOne) Save(ctx context.Context) (*AssetAttributes, error) {
	aauo.defaults()
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *AssetAttributesUpdateOne) SaveX(ctx context.Context) *AssetAttributes {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *AssetAttributesUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *AssetAttributesUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aauo *AssetAttributesUpdateOne) defaults() {
	if _, ok := aauo.mutation.UpdatedAt(); !ok {
		v := assetattributes.UpdateDefaultUpdatedAt()
		aauo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aauo *AssetAttributesUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetAttributesUpdateOne {
	aauo.modifiers = append(aauo.modifiers, modifiers...)
	return aauo
}

func (aauo *AssetAttributesUpdateOne) sqlSave(ctx context.Context) (_node *AssetAttributes, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetattributes.Table, assetattributes.Columns, sqlgraph.NewFieldSpec(assetattributes.FieldID, field.TypeUint64))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetAttributes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetattributes.FieldID)
		for _, f := range fields {
			if !assetattributes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetattributes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetattributes.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aauo.mutation.AssetType(); ok {
		_spec.SetField(assetattributes.FieldAssetType, field.TypeUint8, value)
	}
	if value, ok := aauo.mutation.AddedAssetType(); ok {
		_spec.AddField(assetattributes.FieldAssetType, field.TypeUint8, value)
	}
	if aauo.mutation.AssetTypeCleared() {
		_spec.ClearField(assetattributes.FieldAssetType, field.TypeUint8)
	}
	if value, ok := aauo.mutation.Name(); ok {
		_spec.SetField(assetattributes.FieldName, field.TypeString, value)
	}
	if aauo.mutation.NameCleared() {
		_spec.ClearField(assetattributes.FieldName, field.TypeString)
	}
	if value, ok := aauo.mutation.Key(); ok {
		_spec.SetField(assetattributes.FieldKey, field.TypeString, value)
	}
	if aauo.mutation.KeyCleared() {
		_spec.ClearField(assetattributes.FieldKey, field.TypeString)
	}
	if aauo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.RemovedValuesIDs(); len(nodes) > 0 && !aauo.mutation.ValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetattributes.ValuesTable,
			Columns: []string{assetattributes.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetattributevalues.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aauo.modifiers...)
	_node = &AssetAttributes{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetattributes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
