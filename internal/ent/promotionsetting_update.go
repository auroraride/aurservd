// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionsetting"
)

// PromotionSettingUpdate is the builder for updating PromotionSetting entities.
type PromotionSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionSettingUpdate builder.
func (psu *PromotionSettingUpdate) Where(ps ...predicate.PromotionSetting) *PromotionSettingUpdate {
	psu.mutation.Where(ps...)
	return psu
}

// SetUpdatedAt sets the "updated_at" field.
func (psu *PromotionSettingUpdate) SetUpdatedAt(t time.Time) *PromotionSettingUpdate {
	psu.mutation.SetUpdatedAt(t)
	return psu
}

// SetDeletedAt sets the "deleted_at" field.
func (psu *PromotionSettingUpdate) SetDeletedAt(t time.Time) *PromotionSettingUpdate {
	psu.mutation.SetDeletedAt(t)
	return psu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (psu *PromotionSettingUpdate) SetNillableDeletedAt(t *time.Time) *PromotionSettingUpdate {
	if t != nil {
		psu.SetDeletedAt(*t)
	}
	return psu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (psu *PromotionSettingUpdate) ClearDeletedAt() *PromotionSettingUpdate {
	psu.mutation.ClearDeletedAt()
	return psu
}

// SetLastModifier sets the "last_modifier" field.
func (psu *PromotionSettingUpdate) SetLastModifier(m *model.Modifier) *PromotionSettingUpdate {
	psu.mutation.SetLastModifier(m)
	return psu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (psu *PromotionSettingUpdate) ClearLastModifier() *PromotionSettingUpdate {
	psu.mutation.ClearLastModifier()
	return psu
}

// SetRemark sets the "remark" field.
func (psu *PromotionSettingUpdate) SetRemark(s string) *PromotionSettingUpdate {
	psu.mutation.SetRemark(s)
	return psu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (psu *PromotionSettingUpdate) SetNillableRemark(s *string) *PromotionSettingUpdate {
	if s != nil {
		psu.SetRemark(*s)
	}
	return psu
}

// ClearRemark clears the value of the "remark" field.
func (psu *PromotionSettingUpdate) ClearRemark() *PromotionSettingUpdate {
	psu.mutation.ClearRemark()
	return psu
}

// SetTitle sets the "title" field.
func (psu *PromotionSettingUpdate) SetTitle(s string) *PromotionSettingUpdate {
	psu.mutation.SetTitle(s)
	return psu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psu *PromotionSettingUpdate) SetNillableTitle(s *string) *PromotionSettingUpdate {
	if s != nil {
		psu.SetTitle(*s)
	}
	return psu
}

// ClearTitle clears the value of the "title" field.
func (psu *PromotionSettingUpdate) ClearTitle() *PromotionSettingUpdate {
	psu.mutation.ClearTitle()
	return psu
}

// SetContent sets the "content" field.
func (psu *PromotionSettingUpdate) SetContent(s string) *PromotionSettingUpdate {
	psu.mutation.SetContent(s)
	return psu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (psu *PromotionSettingUpdate) SetNillableContent(s *string) *PromotionSettingUpdate {
	if s != nil {
		psu.SetContent(*s)
	}
	return psu
}

// ClearContent clears the value of the "content" field.
func (psu *PromotionSettingUpdate) ClearContent() *PromotionSettingUpdate {
	psu.mutation.ClearContent()
	return psu
}

// SetKey sets the "key" field.
func (psu *PromotionSettingUpdate) SetKey(s string) *PromotionSettingUpdate {
	psu.mutation.SetKey(s)
	return psu
}

// Mutation returns the PromotionSettingMutation object of the builder.
func (psu *PromotionSettingUpdate) Mutation() *PromotionSettingMutation {
	return psu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psu *PromotionSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := psu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, psu.sqlSave, psu.mutation, psu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psu *PromotionSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := psu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psu *PromotionSettingUpdate) Exec(ctx context.Context) error {
	_, err := psu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psu *PromotionSettingUpdate) ExecX(ctx context.Context) {
	if err := psu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psu *PromotionSettingUpdate) defaults() error {
	if _, ok := psu.mutation.UpdatedAt(); !ok {
		if promotionsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionsetting.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionsetting.UpdateDefaultUpdatedAt()
		psu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psu *PromotionSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionSettingUpdate {
	psu.modifiers = append(psu.modifiers, modifiers...)
	return psu
}

func (psu *PromotionSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionsetting.Table, promotionsetting.Columns, sqlgraph.NewFieldSpec(promotionsetting.FieldID, field.TypeUint64))
	if ps := psu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psu.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psu.mutation.DeletedAt(); ok {
		_spec.SetField(promotionsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if psu.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionsetting.FieldDeletedAt, field.TypeTime)
	}
	if psu.mutation.CreatorCleared() {
		_spec.ClearField(promotionsetting.FieldCreator, field.TypeJSON)
	}
	if value, ok := psu.mutation.LastModifier(); ok {
		_spec.SetField(promotionsetting.FieldLastModifier, field.TypeJSON, value)
	}
	if psu.mutation.LastModifierCleared() {
		_spec.ClearField(promotionsetting.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := psu.mutation.Remark(); ok {
		_spec.SetField(promotionsetting.FieldRemark, field.TypeString, value)
	}
	if psu.mutation.RemarkCleared() {
		_spec.ClearField(promotionsetting.FieldRemark, field.TypeString)
	}
	if value, ok := psu.mutation.Title(); ok {
		_spec.SetField(promotionsetting.FieldTitle, field.TypeString, value)
	}
	if psu.mutation.TitleCleared() {
		_spec.ClearField(promotionsetting.FieldTitle, field.TypeString)
	}
	if value, ok := psu.mutation.Content(); ok {
		_spec.SetField(promotionsetting.FieldContent, field.TypeString, value)
	}
	if psu.mutation.ContentCleared() {
		_spec.ClearField(promotionsetting.FieldContent, field.TypeString)
	}
	if value, ok := psu.mutation.Key(); ok {
		_spec.SetField(promotionsetting.FieldKey, field.TypeString, value)
	}
	_spec.AddModifiers(psu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, psu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psu.mutation.done = true
	return n, nil
}

// PromotionSettingUpdateOne is the builder for updating a single PromotionSetting entity.
type PromotionSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (psuo *PromotionSettingUpdateOne) SetUpdatedAt(t time.Time) *PromotionSettingUpdateOne {
	psuo.mutation.SetUpdatedAt(t)
	return psuo
}

// SetDeletedAt sets the "deleted_at" field.
func (psuo *PromotionSettingUpdateOne) SetDeletedAt(t time.Time) *PromotionSettingUpdateOne {
	psuo.mutation.SetDeletedAt(t)
	return psuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (psuo *PromotionSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionSettingUpdateOne {
	if t != nil {
		psuo.SetDeletedAt(*t)
	}
	return psuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (psuo *PromotionSettingUpdateOne) ClearDeletedAt() *PromotionSettingUpdateOne {
	psuo.mutation.ClearDeletedAt()
	return psuo
}

// SetLastModifier sets the "last_modifier" field.
func (psuo *PromotionSettingUpdateOne) SetLastModifier(m *model.Modifier) *PromotionSettingUpdateOne {
	psuo.mutation.SetLastModifier(m)
	return psuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (psuo *PromotionSettingUpdateOne) ClearLastModifier() *PromotionSettingUpdateOne {
	psuo.mutation.ClearLastModifier()
	return psuo
}

// SetRemark sets the "remark" field.
func (psuo *PromotionSettingUpdateOne) SetRemark(s string) *PromotionSettingUpdateOne {
	psuo.mutation.SetRemark(s)
	return psuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (psuo *PromotionSettingUpdateOne) SetNillableRemark(s *string) *PromotionSettingUpdateOne {
	if s != nil {
		psuo.SetRemark(*s)
	}
	return psuo
}

// ClearRemark clears the value of the "remark" field.
func (psuo *PromotionSettingUpdateOne) ClearRemark() *PromotionSettingUpdateOne {
	psuo.mutation.ClearRemark()
	return psuo
}

// SetTitle sets the "title" field.
func (psuo *PromotionSettingUpdateOne) SetTitle(s string) *PromotionSettingUpdateOne {
	psuo.mutation.SetTitle(s)
	return psuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (psuo *PromotionSettingUpdateOne) SetNillableTitle(s *string) *PromotionSettingUpdateOne {
	if s != nil {
		psuo.SetTitle(*s)
	}
	return psuo
}

// ClearTitle clears the value of the "title" field.
func (psuo *PromotionSettingUpdateOne) ClearTitle() *PromotionSettingUpdateOne {
	psuo.mutation.ClearTitle()
	return psuo
}

// SetContent sets the "content" field.
func (psuo *PromotionSettingUpdateOne) SetContent(s string) *PromotionSettingUpdateOne {
	psuo.mutation.SetContent(s)
	return psuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (psuo *PromotionSettingUpdateOne) SetNillableContent(s *string) *PromotionSettingUpdateOne {
	if s != nil {
		psuo.SetContent(*s)
	}
	return psuo
}

// ClearContent clears the value of the "content" field.
func (psuo *PromotionSettingUpdateOne) ClearContent() *PromotionSettingUpdateOne {
	psuo.mutation.ClearContent()
	return psuo
}

// SetKey sets the "key" field.
func (psuo *PromotionSettingUpdateOne) SetKey(s string) *PromotionSettingUpdateOne {
	psuo.mutation.SetKey(s)
	return psuo
}

// Mutation returns the PromotionSettingMutation object of the builder.
func (psuo *PromotionSettingUpdateOne) Mutation() *PromotionSettingMutation {
	return psuo.mutation
}

// Where appends a list predicates to the PromotionSettingUpdate builder.
func (psuo *PromotionSettingUpdateOne) Where(ps ...predicate.PromotionSetting) *PromotionSettingUpdateOne {
	psuo.mutation.Where(ps...)
	return psuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psuo *PromotionSettingUpdateOne) Select(field string, fields ...string) *PromotionSettingUpdateOne {
	psuo.fields = append([]string{field}, fields...)
	return psuo
}

// Save executes the query and returns the updated PromotionSetting entity.
func (psuo *PromotionSettingUpdateOne) Save(ctx context.Context) (*PromotionSetting, error) {
	if err := psuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, psuo.sqlSave, psuo.mutation, psuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psuo *PromotionSettingUpdateOne) SaveX(ctx context.Context) *PromotionSetting {
	node, err := psuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psuo *PromotionSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := psuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psuo *PromotionSettingUpdateOne) ExecX(ctx context.Context) {
	if err := psuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psuo *PromotionSettingUpdateOne) defaults() error {
	if _, ok := psuo.mutation.UpdatedAt(); !ok {
		if promotionsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionsetting.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionsetting.UpdateDefaultUpdatedAt()
		psuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (psuo *PromotionSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionSettingUpdateOne {
	psuo.modifiers = append(psuo.modifiers, modifiers...)
	return psuo
}

func (psuo *PromotionSettingUpdateOne) sqlSave(ctx context.Context) (_node *PromotionSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionsetting.Table, promotionsetting.Columns, sqlgraph.NewFieldSpec(promotionsetting.FieldID, field.TypeUint64))
	id, ok := psuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionsetting.FieldID)
		for _, f := range fields {
			if !promotionsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psuo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := psuo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if psuo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionsetting.FieldDeletedAt, field.TypeTime)
	}
	if psuo.mutation.CreatorCleared() {
		_spec.ClearField(promotionsetting.FieldCreator, field.TypeJSON)
	}
	if value, ok := psuo.mutation.LastModifier(); ok {
		_spec.SetField(promotionsetting.FieldLastModifier, field.TypeJSON, value)
	}
	if psuo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionsetting.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := psuo.mutation.Remark(); ok {
		_spec.SetField(promotionsetting.FieldRemark, field.TypeString, value)
	}
	if psuo.mutation.RemarkCleared() {
		_spec.ClearField(promotionsetting.FieldRemark, field.TypeString)
	}
	if value, ok := psuo.mutation.Title(); ok {
		_spec.SetField(promotionsetting.FieldTitle, field.TypeString, value)
	}
	if psuo.mutation.TitleCleared() {
		_spec.ClearField(promotionsetting.FieldTitle, field.TypeString)
	}
	if value, ok := psuo.mutation.Content(); ok {
		_spec.SetField(promotionsetting.FieldContent, field.TypeString, value)
	}
	if psuo.mutation.ContentCleared() {
		_spec.ClearField(promotionsetting.FieldContent, field.TypeString)
	}
	if value, ok := psuo.mutation.Key(); ok {
		_spec.SetField(promotionsetting.FieldKey, field.TypeString, value)
	}
	_spec.AddModifiers(psuo.modifiers...)
	_node = &PromotionSetting{config: psuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psuo.mutation.done = true
	return _node, nil
}
