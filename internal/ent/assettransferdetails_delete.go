// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetTransferDetailsDelete is the builder for deleting a AssetTransferDetails entity.
type AssetTransferDetailsDelete struct {
	config
	hooks    []Hook
	mutation *AssetTransferDetailsMutation
}

// Where appends a list predicates to the AssetTransferDetailsDelete builder.
func (atdd *AssetTransferDetailsDelete) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsDelete {
	atdd.mutation.Where(ps...)
	return atdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (atdd *AssetTransferDetailsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, atdd.sqlExec, atdd.mutation, atdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (atdd *AssetTransferDetailsDelete) ExecX(ctx context.Context) int {
	n, err := atdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (atdd *AssetTransferDetailsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(assettransferdetails.Table, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	if ps := atdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, atdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	atdd.mutation.done = true
	return affected, err
}

// AssetTransferDetailsDeleteOne is the builder for deleting a single AssetTransferDetails entity.
type AssetTransferDetailsDeleteOne struct {
	atdd *AssetTransferDetailsDelete
}

// Where appends a list predicates to the AssetTransferDetailsDelete builder.
func (atddo *AssetTransferDetailsDeleteOne) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsDeleteOne {
	atddo.atdd.mutation.Where(ps...)
	return atddo
}

// Exec executes the deletion query.
func (atddo *AssetTransferDetailsDeleteOne) Exec(ctx context.Context) error {
	n, err := atddo.atdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{assettransferdetails.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (atddo *AssetTransferDetailsDeleteOne) ExecX(ctx context.Context) {
	if err := atddo.Exec(ctx); err != nil {
		panic(err)
	}
}
