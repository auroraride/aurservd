// Code generated by ent, DO NOT EDIT.

package promotionbankcard

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the promotionbankcard type in the database.
	Label = "promotion_bank_card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldCardNo holds the string denoting the card_no field in the database.
	FieldCardNo = "card_no"
	// FieldBank holds the string denoting the bank field in the database.
	FieldBank = "bank"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldBankLogoURL holds the string denoting the bank_logo_url field in the database.
	FieldBankLogoURL = "bank_logo_url"
	// FieldProvince holds the string denoting the province field in the database.
	FieldProvince = "province"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgeWithdrawals holds the string denoting the withdrawals edge name in mutations.
	EdgeWithdrawals = "withdrawals"
	// Table holds the table name of the promotionbankcard in the database.
	Table = "promotion_bank_card"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "promotion_bank_card"
	// MemberInverseTable is the table name for the PromotionMember entity.
	// It exists in this package in order to avoid circular dependency with the "promotionmember" package.
	MemberInverseTable = "promotion_member"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// WithdrawalsTable is the table that holds the withdrawals relation/edge.
	WithdrawalsTable = "promotion_withdrawal"
	// WithdrawalsInverseTable is the table name for the PromotionWithdrawal entity.
	// It exists in this package in order to avoid circular dependency with the "promotionwithdrawal" package.
	WithdrawalsInverseTable = "promotion_withdrawal"
	// WithdrawalsColumn is the table column denoting the withdrawals relation/edge.
	WithdrawalsColumn = "account_id"
)

// Columns holds all SQL columns for promotionbankcard fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldMemberID,
	FieldCardNo,
	FieldBank,
	FieldIsDefault,
	FieldBankLogoURL,
	FieldProvince,
	FieldCity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultIsDefault holds the default value on creation for the "is_default" field.
	DefaultIsDefault bool
)

// OrderOption defines the ordering options for the PromotionBankCard queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByCardNo orders the results by the card_no field.
func ByCardNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardNo, opts...).ToFunc()
}

// ByBank orders the results by the bank field.
func ByBank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBank, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByBankLogoURL orders the results by the bank_logo_url field.
func ByBankLogoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankLogoURL, opts...).ToFunc()
}

// ByProvince orders the results by the province field.
func ByProvince(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvince, opts...).ToFunc()
}

// ByCity orders the results by the city field.
func ByCity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCity, opts...).ToFunc()
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByWithdrawalsCount orders the results by withdrawals count.
func ByWithdrawalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWithdrawalsStep(), opts...)
	}
}

// ByWithdrawals orders the results by withdrawals terms.
func ByWithdrawals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWithdrawalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
	)
}
func newWithdrawalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WithdrawalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WithdrawalsTable, WithdrawalsColumn),
	)
}
