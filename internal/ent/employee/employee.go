// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldLastModifier holds the string denoting the last_modifier field in the database.
	FieldLastModifier = "last_modifier"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldCityID holds the string denoting the city_id field in the database.
	FieldCityID = "city_id"
	// FieldSn holds the string denoting the sn field in the database.
	FieldSn = "sn"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeCity holds the string denoting the city edge name in mutations.
	EdgeCity = "city"
	// EdgeStore holds the string denoting the store edge name in mutations.
	EdgeStore = "store"
	// EdgeAttendances holds the string denoting the attendances edge name in mutations.
	EdgeAttendances = "attendances"
	// EdgeStocks holds the string denoting the stocks edge name in mutations.
	EdgeStocks = "stocks"
	// EdgeExchanges holds the string denoting the exchanges edge name in mutations.
	EdgeExchanges = "exchanges"
	// EdgeCommissions holds the string denoting the commissions edge name in mutations.
	EdgeCommissions = "commissions"
	// EdgeAssistances holds the string denoting the assistances edge name in mutations.
	EdgeAssistances = "assistances"
	// EdgeStores holds the string denoting the stores edge name in mutations.
	EdgeStores = "stores"
	// Table holds the table name of the employee in the database.
	Table = "employee"
	// CityTable is the table that holds the city relation/edge.
	CityTable = "employee"
	// CityInverseTable is the table name for the City entity.
	// It exists in this package in order to avoid circular dependency with the "city" package.
	CityInverseTable = "city"
	// CityColumn is the table column denoting the city relation/edge.
	CityColumn = "city_id"
	// StoreTable is the table that holds the store relation/edge.
	StoreTable = "store"
	// StoreInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoreInverseTable = "store"
	// StoreColumn is the table column denoting the store relation/edge.
	StoreColumn = "employee_id"
	// AttendancesTable is the table that holds the attendances relation/edge.
	AttendancesTable = "attendance"
	// AttendancesInverseTable is the table name for the Attendance entity.
	// It exists in this package in order to avoid circular dependency with the "attendance" package.
	AttendancesInverseTable = "attendance"
	// AttendancesColumn is the table column denoting the attendances relation/edge.
	AttendancesColumn = "employee_id"
	// StocksTable is the table that holds the stocks relation/edge.
	StocksTable = "stock"
	// StocksInverseTable is the table name for the Stock entity.
	// It exists in this package in order to avoid circular dependency with the "stock" package.
	StocksInverseTable = "stock"
	// StocksColumn is the table column denoting the stocks relation/edge.
	StocksColumn = "employee_id"
	// ExchangesTable is the table that holds the exchanges relation/edge.
	ExchangesTable = "exchange"
	// ExchangesInverseTable is the table name for the Exchange entity.
	// It exists in this package in order to avoid circular dependency with the "exchange" package.
	ExchangesInverseTable = "exchange"
	// ExchangesColumn is the table column denoting the exchanges relation/edge.
	ExchangesColumn = "employee_id"
	// CommissionsTable is the table that holds the commissions relation/edge.
	CommissionsTable = "commission"
	// CommissionsInverseTable is the table name for the Commission entity.
	// It exists in this package in order to avoid circular dependency with the "commission" package.
	CommissionsInverseTable = "commission"
	// CommissionsColumn is the table column denoting the commissions relation/edge.
	CommissionsColumn = "employee_id"
	// AssistancesTable is the table that holds the assistances relation/edge.
	AssistancesTable = "assistance"
	// AssistancesInverseTable is the table name for the Assistance entity.
	// It exists in this package in order to avoid circular dependency with the "assistance" package.
	AssistancesInverseTable = "assistance"
	// AssistancesColumn is the table column denoting the assistances relation/edge.
	AssistancesColumn = "employee_id"
	// StoresTable is the table that holds the stores relation/edge. The primary key declared below.
	StoresTable = "store_employees"
	// StoresInverseTable is the table name for the Store entity.
	// It exists in this package in order to avoid circular dependency with the "store" package.
	StoresInverseTable = "store"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldCreator,
	FieldLastModifier,
	FieldRemark,
	FieldCityID,
	FieldSn,
	FieldName,
	FieldPhone,
	FieldEnable,
	FieldPassword,
}

var (
	// StoresPrimaryKey and StoresColumn2 are the table columns denoting the
	// primary key for the stores relation (M2M).
	StoresPrimaryKey = []string{"store_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/auroraride/aurservd/internal/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
)

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByCityID orders the results by the city_id field.
func ByCityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCityID, opts...).ToFunc()
}

// BySn orders the results by the sn field.
func BySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSn, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByCityField orders the results by city field.
func ByCityField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCityStep(), sql.OrderByField(field, opts...))
	}
}

// ByStoreField orders the results by store field.
func ByStoreField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoreStep(), sql.OrderByField(field, opts...))
	}
}

// ByAttendancesCount orders the results by attendances count.
func ByAttendancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAttendancesStep(), opts...)
	}
}

// ByAttendances orders the results by attendances terms.
func ByAttendances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAttendancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStocksCount orders the results by stocks count.
func ByStocksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStocksStep(), opts...)
	}
}

// ByStocks orders the results by stocks terms.
func ByStocks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStocksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByExchangesCount orders the results by exchanges count.
func ByExchangesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newExchangesStep(), opts...)
	}
}

// ByExchanges orders the results by exchanges terms.
func ByExchanges(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExchangesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCommissionsCount orders the results by commissions count.
func ByCommissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCommissionsStep(), opts...)
	}
}

// ByCommissions orders the results by commissions terms.
func ByCommissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssistancesCount orders the results by assistances count.
func ByAssistancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssistancesStep(), opts...)
	}
}

// ByAssistances orders the results by assistances terms.
func ByAssistances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssistancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStoresCount orders the results by stores count.
func ByStoresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStoresStep(), opts...)
	}
}

// ByStores orders the results by stores terms.
func ByStores(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStoresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCityStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CityInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CityTable, CityColumn),
	)
}
func newStoreStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoreInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, StoreTable, StoreColumn),
	)
}
func newAttendancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AttendancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AttendancesTable, AttendancesColumn),
	)
}
func newStocksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StocksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StocksTable, StocksColumn),
	)
}
func newExchangesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExchangesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ExchangesTable, ExchangesColumn),
	)
}
func newCommissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CommissionsTable, CommissionsColumn),
	)
}
func newAssistancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssistancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssistancesTable, AssistancesColumn),
	)
}
func newStoresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StoresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, StoresTable, StoresPrimaryKey...),
	)
}
