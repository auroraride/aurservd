// Code generated by ent, DO NOT EDIT.

package couponassembly

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// ExpiredType applies equality check predicate on the "expired_type" field. It's identical to ExpiredTypeEQ.
func ExpiredType(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredType), v))
	})
}

// Rule applies equality check predicate on the "rule" field. It's identical to RuleEQ.
func Rule(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRule), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// Multiple applies equality check predicate on the "multiple" field. It's identical to MultipleEQ.
func Multiple(v bool) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiple), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreator)))
	})
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreator)))
	})
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastModifier)))
	})
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastModifier)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotal), v))
	})
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotal), v))
	})
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotal), v...))
	})
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotal), v...))
	})
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotal), v))
	})
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotal), v))
	})
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotal), v))
	})
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotal), v))
	})
}

// ExpiredTypeEQ applies the EQ predicate on the "expired_type" field.
func ExpiredTypeEQ(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredType), v))
	})
}

// ExpiredTypeNEQ applies the NEQ predicate on the "expired_type" field.
func ExpiredTypeNEQ(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredType), v))
	})
}

// ExpiredTypeIn applies the In predicate on the "expired_type" field.
func ExpiredTypeIn(vs ...uint8) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExpiredType), v...))
	})
}

// ExpiredTypeNotIn applies the NotIn predicate on the "expired_type" field.
func ExpiredTypeNotIn(vs ...uint8) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExpiredType), v...))
	})
}

// ExpiredTypeGT applies the GT predicate on the "expired_type" field.
func ExpiredTypeGT(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredType), v))
	})
}

// ExpiredTypeGTE applies the GTE predicate on the "expired_type" field.
func ExpiredTypeGTE(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredType), v))
	})
}

// ExpiredTypeLT applies the LT predicate on the "expired_type" field.
func ExpiredTypeLT(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredType), v))
	})
}

// ExpiredTypeLTE applies the LTE predicate on the "expired_type" field.
func ExpiredTypeLTE(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredType), v))
	})
}

// RuleEQ applies the EQ predicate on the "rule" field.
func RuleEQ(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRule), v))
	})
}

// RuleNEQ applies the NEQ predicate on the "rule" field.
func RuleNEQ(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRule), v))
	})
}

// RuleIn applies the In predicate on the "rule" field.
func RuleIn(vs ...uint8) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRule), v...))
	})
}

// RuleNotIn applies the NotIn predicate on the "rule" field.
func RuleNotIn(vs ...uint8) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRule), v...))
	})
}

// RuleGT applies the GT predicate on the "rule" field.
func RuleGT(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRule), v))
	})
}

// RuleGTE applies the GTE predicate on the "rule" field.
func RuleGTE(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRule), v))
	})
}

// RuleLT applies the LT predicate on the "rule" field.
func RuleLT(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRule), v))
	})
}

// RuleLTE applies the LTE predicate on the "rule" field.
func RuleLTE(v uint8) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRule), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.CouponAssembly {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// MultipleEQ applies the EQ predicate on the "multiple" field.
func MultipleEQ(v bool) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiple), v))
	})
}

// MultipleNEQ applies the NEQ predicate on the "multiple" field.
func MultipleNEQ(v bool) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiple), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CouponAssembly) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CouponAssembly) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CouponAssembly) predicate.CouponAssembly {
	return predicate.CouponAssembly(func(s *sql.Selector) {
		p(s.Not())
	})
}
