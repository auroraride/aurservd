// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderalter"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderAlter is the model entity for the OrderAlter schema.
type OrderAlter struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// OrderID holds the value of the "order_id" field.
	// 订单ID
	OrderID uint64 `json:"order_id,omitempty"`
	// Days holds the value of the "days" field.
	// 更改天数
	Days int `json:"days,omitempty"`
	// Reason holds the value of the "reason" field.
	// 更改原因
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrderAlterQuery when eager-loading is set.
	Edges OrderAlterEdges `json:"edges"`
}

// OrderAlterEdges holds the relations/edges for other nodes in the graph.
type OrderAlterEdges struct {
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// Order holds the value of the order edge.
	Order *Order `json:"order,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAlterEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[0] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// OrderOrErr returns the Order value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrderAlterEdges) OrderOrErr() (*Order, error) {
	if e.loadedTypes[1] {
		if e.Order == nil {
			// The edge order was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: order.Label}
		}
		return e.Order, nil
	}
	return nil, &NotLoadedError{edge: "order"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderAlter) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderalter.FieldCreator, orderalter.FieldLastModifier:
			values[i] = new([]byte)
		case orderalter.FieldID, orderalter.FieldRiderID, orderalter.FieldOrderID, orderalter.FieldDays:
			values[i] = new(sql.NullInt64)
		case orderalter.FieldRemark, orderalter.FieldReason:
			values[i] = new(sql.NullString)
		case orderalter.FieldCreatedAt, orderalter.FieldUpdatedAt, orderalter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderAlter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderAlter fields.
func (oa *OrderAlter) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderalter.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oa.ID = uint64(value.Int64)
		case orderalter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oa.CreatedAt = value.Time
			}
		case orderalter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oa.UpdatedAt = value.Time
			}
		case orderalter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				oa.DeletedAt = new(time.Time)
				*oa.DeletedAt = value.Time
			}
		case orderalter.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oa.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case orderalter.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oa.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case orderalter.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				oa.Remark = value.String
			}
		case orderalter.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				oa.RiderID = uint64(value.Int64)
			}
		case orderalter.FieldOrderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order_id", values[i])
			} else if value.Valid {
				oa.OrderID = uint64(value.Int64)
			}
		case orderalter.FieldDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field days", values[i])
			} else if value.Valid {
				oa.Days = int(value.Int64)
			}
		case orderalter.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				oa.Reason = value.String
			}
		}
	}
	return nil
}

// QueryRider queries the "rider" edge of the OrderAlter entity.
func (oa *OrderAlter) QueryRider() *RiderQuery {
	return (&OrderAlterClient{config: oa.config}).QueryRider(oa)
}

// QueryOrder queries the "order" edge of the OrderAlter entity.
func (oa *OrderAlter) QueryOrder() *OrderQuery {
	return (&OrderAlterClient{config: oa.config}).QueryOrder(oa)
}

// Update returns a builder for updating this OrderAlter.
// Note that you need to call OrderAlter.Unwrap() before calling this method if this OrderAlter
// was returned from a transaction, and the transaction was committed or rolled back.
func (oa *OrderAlter) Update() *OrderAlterUpdateOne {
	return (&OrderAlterClient{config: oa.config}).UpdateOne(oa)
}

// Unwrap unwraps the OrderAlter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oa *OrderAlter) Unwrap() *OrderAlter {
	tx, ok := oa.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderAlter is not a transactional entity")
	}
	oa.config.driver = tx.drv
	return oa
}

// String implements the fmt.Stringer.
func (oa *OrderAlter) String() string {
	var builder strings.Builder
	builder.WriteString("OrderAlter(")
	builder.WriteString(fmt.Sprintf("id=%v", oa.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(oa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(oa.UpdatedAt.Format(time.ANSIC))
	if v := oa.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", oa.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", oa.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(oa.Remark)
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.RiderID))
	builder.WriteString(", order_id=")
	builder.WriteString(fmt.Sprintf("%v", oa.OrderID))
	builder.WriteString(", days=")
	builder.WriteString(fmt.Sprintf("%v", oa.Days))
	builder.WriteString(", reason=")
	builder.WriteString(oa.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// OrderAlters is a parsable slice of OrderAlter.
type OrderAlters []*OrderAlter

func (oa OrderAlters) config(cfg config) {
	for _i := range oa {
		oa[_i].config = cfg
	}
}
