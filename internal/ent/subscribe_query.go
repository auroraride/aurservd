// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
)

// SubscribeQuery is the builder for querying Subscribe entities.
type SubscribeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Subscribe
	// eager-loading edges.
	withPlan         *PlanQuery
	withEmployee     *EmployeeQuery
	withCity         *CityQuery
	withStation      *EnterpriseStationQuery
	withRider        *RiderQuery
	withEnterprise   *EnterpriseQuery
	withPauses       *SubscribePauseQuery
	withAlters       *SubscribeAlterQuery
	withOrders       *OrderQuery
	withInitialOrder *OrderQuery
	withStatement    *EnterpriseStatementQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscribeQuery builder.
func (sq *SubscribeQuery) Where(ps ...predicate.Subscribe) *SubscribeQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit adds a limit step to the query.
func (sq *SubscribeQuery) Limit(limit int) *SubscribeQuery {
	sq.limit = &limit
	return sq
}

// Offset adds an offset step to the query.
func (sq *SubscribeQuery) Offset(offset int) *SubscribeQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SubscribeQuery) Unique(unique bool) *SubscribeQuery {
	sq.unique = &unique
	return sq
}

// Order adds an order step to the query.
func (sq *SubscribeQuery) Order(o ...OrderFunc) *SubscribeQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryPlan chains the current query on the "plan" edge.
func (sq *SubscribeQuery) QueryPlan() *PlanQuery {
	query := &PlanQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.PlanTable, subscribe.PlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (sq *SubscribeQuery) QueryEmployee() *EmployeeQuery {
	query := &EmployeeQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EmployeeTable, subscribe.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (sq *SubscribeQuery) QueryCity() *CityQuery {
	query := &CityQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CityTable, subscribe.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (sq *SubscribeQuery) QueryStation() *EnterpriseStationQuery {
	query := &EnterpriseStationQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StationTable, subscribe.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (sq *SubscribeQuery) QueryRider() *RiderQuery {
	query := &RiderQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.RiderTable, subscribe.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (sq *SubscribeQuery) QueryEnterprise() *EnterpriseQuery {
	query := &EnterpriseQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.EnterpriseTable, subscribe.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPauses chains the current query on the "pauses" edge.
func (sq *SubscribeQuery) QueryPauses() *SubscribePauseQuery {
	query := &SubscribePauseQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.PausesTable, subscribe.PausesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlters chains the current query on the "alters" edge.
func (sq *SubscribeQuery) QueryAlters() *SubscribeAlterQuery {
	query := &SubscribeAlterQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(subscribealter.Table, subscribealter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.AltersTable, subscribe.AltersColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (sq *SubscribeQuery) QueryOrders() *OrderQuery {
	query := &OrderQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.OrdersTable, subscribe.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInitialOrder chains the current query on the "initial_order" edge.
func (sq *SubscribeQuery) QueryInitialOrder() *OrderQuery {
	query := &OrderQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.InitialOrderTable, subscribe.InitialOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatement chains the current query on the "statement" edge.
func (sq *SubscribeQuery) QueryStatement() *EnterpriseStatementQuery {
	query := &EnterpriseStatementQuery{config: sq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.StatementTable, subscribe.StatementColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Subscribe entity from the query.
// Returns a *NotFoundError when no Subscribe was found.
func (sq *SubscribeQuery) First(ctx context.Context) (*Subscribe, error) {
	nodes, err := sq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscribe.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SubscribeQuery) FirstX(ctx context.Context) *Subscribe {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Subscribe ID from the query.
// Returns a *NotFoundError when no Subscribe ID was found.
func (sq *SubscribeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscribe.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SubscribeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Subscribe entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Subscribe entity is found.
// Returns a *NotFoundError when no Subscribe entities are found.
func (sq *SubscribeQuery) Only(ctx context.Context) (*Subscribe, error) {
	nodes, err := sq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscribe.Label}
	default:
		return nil, &NotSingularError{subscribe.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SubscribeQuery) OnlyX(ctx context.Context) *Subscribe {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Subscribe ID in the query.
// Returns a *NotSingularError when more than one Subscribe ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SubscribeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscribe.Label}
	default:
		err = &NotSingularError{subscribe.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SubscribeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Subscribes.
func (sq *SubscribeQuery) All(ctx context.Context) ([]*Subscribe, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sq *SubscribeQuery) AllX(ctx context.Context) []*Subscribe {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Subscribe IDs.
func (sq *SubscribeQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := sq.Select(subscribe.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SubscribeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SubscribeQuery) Count(ctx context.Context) (int, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SubscribeQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SubscribeQuery) Exist(ctx context.Context) (bool, error) {
	if err := sq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SubscribeQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscribeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SubscribeQuery) Clone() *SubscribeQuery {
	if sq == nil {
		return nil
	}
	return &SubscribeQuery{
		config:           sq.config,
		limit:            sq.limit,
		offset:           sq.offset,
		order:            append([]OrderFunc{}, sq.order...),
		predicates:       append([]predicate.Subscribe{}, sq.predicates...),
		withPlan:         sq.withPlan.Clone(),
		withEmployee:     sq.withEmployee.Clone(),
		withCity:         sq.withCity.Clone(),
		withStation:      sq.withStation.Clone(),
		withRider:        sq.withRider.Clone(),
		withEnterprise:   sq.withEnterprise.Clone(),
		withPauses:       sq.withPauses.Clone(),
		withAlters:       sq.withAlters.Clone(),
		withOrders:       sq.withOrders.Clone(),
		withInitialOrder: sq.withInitialOrder.Clone(),
		withStatement:    sq.withStatement.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithPlan tells the query-builder to eager-load the nodes that are connected to
// the "plan" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithPlan(opts ...func(*PlanQuery)) *SubscribeQuery {
	query := &PlanQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withPlan = query
	return sq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithEmployee(opts ...func(*EmployeeQuery)) *SubscribeQuery {
	query := &EmployeeQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withEmployee = query
	return sq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithCity(opts ...func(*CityQuery)) *SubscribeQuery {
	query := &CityQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withCity = query
	return sq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *SubscribeQuery {
	query := &EnterpriseStationQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withStation = query
	return sq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithRider(opts ...func(*RiderQuery)) *SubscribeQuery {
	query := &RiderQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withRider = query
	return sq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *SubscribeQuery {
	query := &EnterpriseQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withEnterprise = query
	return sq
}

// WithPauses tells the query-builder to eager-load the nodes that are connected to
// the "pauses" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithPauses(opts ...func(*SubscribePauseQuery)) *SubscribeQuery {
	query := &SubscribePauseQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withPauses = query
	return sq
}

// WithAlters tells the query-builder to eager-load the nodes that are connected to
// the "alters" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithAlters(opts ...func(*SubscribeAlterQuery)) *SubscribeQuery {
	query := &SubscribeAlterQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withAlters = query
	return sq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithOrders(opts ...func(*OrderQuery)) *SubscribeQuery {
	query := &OrderQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withOrders = query
	return sq
}

// WithInitialOrder tells the query-builder to eager-load the nodes that are connected to
// the "initial_order" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithInitialOrder(opts ...func(*OrderQuery)) *SubscribeQuery {
	query := &OrderQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withInitialOrder = query
	return sq
}

// WithStatement tells the query-builder to eager-load the nodes that are connected to
// the "statement" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithStatement(opts ...func(*EnterpriseStatementQuery)) *SubscribeQuery {
	query := &EnterpriseStatementQuery{config: sq.config}
	for _, opt := range opts {
		opt(query)
	}
	sq.withStatement = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Subscribe.Query().
//		GroupBy(subscribe.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sq *SubscribeQuery) GroupBy(field string, fields ...string) *SubscribeGroupBy {
	grbuild := &SubscribeGroupBy{config: sq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sq.sqlQuery(ctx), nil
	}
	grbuild.label = subscribe.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Subscribe.Query().
//		Select(subscribe.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (sq *SubscribeQuery) Select(fields ...string) *SubscribeSelect {
	sq.fields = append(sq.fields, fields...)
	selbuild := &SubscribeSelect{SubscribeQuery: sq}
	selbuild.label = subscribe.Label
	selbuild.flds, selbuild.scan = &sq.fields, selbuild.Scan
	return selbuild
}

func (sq *SubscribeQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sq.fields {
		if !subscribe.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SubscribeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Subscribe, error) {
	var (
		nodes       = []*Subscribe{}
		_spec       = sq.querySpec()
		loadedTypes = [11]bool{
			sq.withPlan != nil,
			sq.withEmployee != nil,
			sq.withCity != nil,
			sq.withStation != nil,
			sq.withRider != nil,
			sq.withEnterprise != nil,
			sq.withPauses != nil,
			sq.withAlters != nil,
			sq.withOrders != nil,
			sq.withInitialOrder != nil,
			sq.withStatement != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Subscribe).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Subscribe{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sq.withPlan; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			fk := nodes[i].PlanID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(plan.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "plan_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Plan = n
			}
		}
	}

	if query := sq.withEmployee; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			fk := nodes[i].EmployeeID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(employee.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Employee = n
			}
		}
	}

	if query := sq.withCity; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			fk := nodes[i].CityID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(city.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.City = n
			}
		}
	}

	if query := sq.withStation; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			if nodes[i].StationID == nil {
				continue
			}
			fk := *nodes[i].StationID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprisestation.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Station = n
			}
		}
	}

	if query := sq.withRider; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			fk := nodes[i].RiderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(rider.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Rider = n
			}
		}
	}

	if query := sq.withEnterprise; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			if nodes[i].EnterpriseID == nil {
				continue
			}
			fk := *nodes[i].EnterpriseID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprise.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Enterprise = n
			}
		}
	}

	if query := sq.withPauses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Subscribe)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Pauses = []*SubscribePause{}
		}
		query.Where(predicate.SubscribePause(func(s *sql.Selector) {
			s.Where(sql.InValues(subscribe.PausesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SubscribeID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Pauses = append(node.Edges.Pauses, n)
		}
	}

	if query := sq.withAlters; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Subscribe)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Alters = []*SubscribeAlter{}
		}
		query.Where(predicate.SubscribeAlter(func(s *sql.Selector) {
			s.Where(sql.InValues(subscribe.AltersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SubscribeID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Alters = append(node.Edges.Alters, n)
		}
	}

	if query := sq.withOrders; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[uint64]*Subscribe)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Orders = []*Order{}
		}
		query.Where(predicate.Order(func(s *sql.Selector) {
			s.Where(sql.InValues(subscribe.OrdersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.SubscribeID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Orders = append(node.Edges.Orders, n)
		}
	}

	if query := sq.withInitialOrder; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			fk := nodes[i].InitialOrderID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(order.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "initial_order_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.InitialOrder = n
			}
		}
	}

	if query := sq.withStatement; query != nil {
		ids := make([]uint64, 0, len(nodes))
		nodeids := make(map[uint64][]*Subscribe)
		for i := range nodes {
			if nodes[i].StatementID == nil {
				continue
			}
			fk := *nodes[i].StatementID
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(enterprisestatement.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "statement_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Statement = n
			}
		}
	}

	return nodes, nil
}

func (sq *SubscribeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SubscribeQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sq *SubscribeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribe.FieldID)
		for i := range fields {
			if fields[i] != subscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SubscribeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(subscribe.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = subscribe.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *SubscribeQuery) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// SubscribeGroupBy is the group-by builder for Subscribe entities.
type SubscribeGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SubscribeGroupBy) Aggregate(fns ...AggregateFunc) *SubscribeGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sgb *SubscribeGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sgb.path(ctx)
	if err != nil {
		return err
	}
	sgb.sql = query
	return sgb.sqlScan(ctx, v)
}

func (sgb *SubscribeGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sgb.fields {
		if !subscribe.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sgb *SubscribeGroupBy) sqlQuery() *sql.Selector {
	selector := sgb.sql.Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sgb.fields)+len(sgb.fns))
		for _, f := range sgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sgb.fields...)...)
}

// SubscribeSelect is the builder for selecting fields of Subscribe entities.
type SubscribeSelect struct {
	*SubscribeQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SubscribeSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	ss.sql = ss.SubscribeQuery.sqlQuery(ctx)
	return ss.sqlScan(ctx, v)
}

func (ss *SubscribeSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ss.sql.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *SubscribeSelect) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
