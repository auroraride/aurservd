// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribealter"
	"github.com/auroraride/aurservd/internal/ent/subscribepause"
	"github.com/auroraride/aurservd/internal/ent/subscribesuspend"
)

// SubscribeQuery is the builder for querying Subscribe entities.
type SubscribeQuery struct {
	config
	limit            *int
	offset           *int
	unique           *bool
	order            []OrderFunc
	fields           []string
	inters           []Interceptor
	predicates       []predicate.Subscribe
	withPlan         *PlanQuery
	withEmployee     *EmployeeQuery
	withCity         *CityQuery
	withStation      *EnterpriseStationQuery
	withStore        *StoreQuery
	withCabinet      *CabinetQuery
	withBrand        *EbikeBrandQuery
	withEbike        *EbikeQuery
	withBattery      *BatteryQuery
	withRider        *RiderQuery
	withEnterprise   *EnterpriseQuery
	withPauses       *SubscribePauseQuery
	withSuspends     *SubscribeSuspendQuery
	withAlters       *SubscribeAlterQuery
	withOrders       *OrderQuery
	withInitialOrder *OrderQuery
	withBills        *EnterpriseBillQuery
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubscribeQuery builder.
func (sq *SubscribeQuery) Where(ps ...predicate.Subscribe) *SubscribeQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SubscribeQuery) Limit(limit int) *SubscribeQuery {
	sq.limit = &limit
	return sq
}

// Offset to start from.
func (sq *SubscribeQuery) Offset(offset int) *SubscribeQuery {
	sq.offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SubscribeQuery) Unique(unique bool) *SubscribeQuery {
	sq.unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SubscribeQuery) Order(o ...OrderFunc) *SubscribeQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryPlan chains the current query on the "plan" edge.
func (sq *SubscribeQuery) QueryPlan() *PlanQuery {
	query := (&PlanClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(plan.Table, plan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.PlanTable, subscribe.PlanColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (sq *SubscribeQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EmployeeTable, subscribe.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (sq *SubscribeQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CityTable, subscribe.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStation chains the current query on the "station" edge.
func (sq *SubscribeQuery) QueryStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StationTable, subscribe.StationColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStore chains the current query on the "store" edge.
func (sq *SubscribeQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.StoreTable, subscribe.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (sq *SubscribeQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.CabinetTable, subscribe.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBrand chains the current query on the "brand" edge.
func (sq *SubscribeQuery) QueryBrand() *EbikeBrandQuery {
	query := (&EbikeBrandClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(ebikebrand.Table, ebikebrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.BrandTable, subscribe.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEbike chains the current query on the "ebike" edge.
func (sq *SubscribeQuery) QueryEbike() *EbikeQuery {
	query := (&EbikeClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(ebike.Table, ebike.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.EbikeTable, subscribe.EbikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBattery chains the current query on the "battery" edge.
func (sq *SubscribeQuery) QueryBattery() *BatteryQuery {
	query := (&BatteryClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.BatteryTable, subscribe.BatteryColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (sq *SubscribeQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.RiderTable, subscribe.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnterprise chains the current query on the "enterprise" edge.
func (sq *SubscribeQuery) QueryEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subscribe.EnterpriseTable, subscribe.EnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPauses chains the current query on the "pauses" edge.
func (sq *SubscribeQuery) QueryPauses() *SubscribePauseQuery {
	query := (&SubscribePauseClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(subscribepause.Table, subscribepause.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.PausesTable, subscribe.PausesColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySuspends chains the current query on the "suspends" edge.
func (sq *SubscribeQuery) QuerySuspends() *SubscribeSuspendQuery {
	query := (&SubscribeSuspendClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(subscribesuspend.Table, subscribesuspend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.SuspendsTable, subscribe.SuspendsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlters chains the current query on the "alters" edge.
func (sq *SubscribeQuery) QueryAlters() *SubscribeAlterQuery {
	query := (&SubscribeAlterClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(subscribealter.Table, subscribealter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.AltersTable, subscribe.AltersColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrders chains the current query on the "orders" edge.
func (sq *SubscribeQuery) QueryOrders() *OrderQuery {
	query := (&OrderClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.OrdersTable, subscribe.OrdersColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInitialOrder chains the current query on the "initial_order" edge.
func (sq *SubscribeQuery) QueryInitialOrder() *OrderQuery {
	query := (&OrderClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, subscribe.InitialOrderTable, subscribe.InitialOrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBills chains the current query on the "bills" edge.
func (sq *SubscribeQuery) QueryBills() *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subscribe.Table, subscribe.FieldID, selector),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subscribe.BillsTable, subscribe.BillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Subscribe entity from the query.
// Returns a *NotFoundError when no Subscribe was found.
func (sq *SubscribeQuery) First(ctx context.Context) (*Subscribe, error) {
	nodes, err := sq.Limit(1).All(newQueryContext(ctx, TypeSubscribe, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subscribe.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SubscribeQuery) FirstX(ctx context.Context) *Subscribe {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Subscribe ID from the query.
// Returns a *NotFoundError when no Subscribe ID was found.
func (sq *SubscribeQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(1).IDs(newQueryContext(ctx, TypeSubscribe, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subscribe.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SubscribeQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Subscribe entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Subscribe entity is found.
// Returns a *NotFoundError when no Subscribe entities are found.
func (sq *SubscribeQuery) Only(ctx context.Context) (*Subscribe, error) {
	nodes, err := sq.Limit(2).All(newQueryContext(ctx, TypeSubscribe, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subscribe.Label}
	default:
		return nil, &NotSingularError{subscribe.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SubscribeQuery) OnlyX(ctx context.Context) *Subscribe {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Subscribe ID in the query.
// Returns a *NotSingularError when more than one Subscribe ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SubscribeQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = sq.Limit(2).IDs(newQueryContext(ctx, TypeSubscribe, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subscribe.Label}
	default:
		err = &NotSingularError{subscribe.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SubscribeQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Subscribes.
func (sq *SubscribeQuery) All(ctx context.Context) ([]*Subscribe, error) {
	ctx = newQueryContext(ctx, TypeSubscribe, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Subscribe, *SubscribeQuery]()
	return withInterceptors[[]*Subscribe](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SubscribeQuery) AllX(ctx context.Context) []*Subscribe {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Subscribe IDs.
func (sq *SubscribeQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = newQueryContext(ctx, TypeSubscribe, "IDs")
	if err := sq.Select(subscribe.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SubscribeQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SubscribeQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeSubscribe, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SubscribeQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SubscribeQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SubscribeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeSubscribe, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SubscribeQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubscribeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SubscribeQuery) Clone() *SubscribeQuery {
	if sq == nil {
		return nil
	}
	return &SubscribeQuery{
		config:           sq.config,
		limit:            sq.limit,
		offset:           sq.offset,
		order:            append([]OrderFunc{}, sq.order...),
		predicates:       append([]predicate.Subscribe{}, sq.predicates...),
		withPlan:         sq.withPlan.Clone(),
		withEmployee:     sq.withEmployee.Clone(),
		withCity:         sq.withCity.Clone(),
		withStation:      sq.withStation.Clone(),
		withStore:        sq.withStore.Clone(),
		withCabinet:      sq.withCabinet.Clone(),
		withBrand:        sq.withBrand.Clone(),
		withEbike:        sq.withEbike.Clone(),
		withBattery:      sq.withBattery.Clone(),
		withRider:        sq.withRider.Clone(),
		withEnterprise:   sq.withEnterprise.Clone(),
		withPauses:       sq.withPauses.Clone(),
		withSuspends:     sq.withSuspends.Clone(),
		withAlters:       sq.withAlters.Clone(),
		withOrders:       sq.withOrders.Clone(),
		withInitialOrder: sq.withInitialOrder.Clone(),
		withBills:        sq.withBills.Clone(),
		// clone intermediate query.
		sql:    sq.sql.Clone(),
		path:   sq.path,
		unique: sq.unique,
	}
}

// WithPlan tells the query-builder to eager-load the nodes that are connected to
// the "plan" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithPlan(opts ...func(*PlanQuery)) *SubscribeQuery {
	query := (&PlanClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPlan = query
	return sq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithEmployee(opts ...func(*EmployeeQuery)) *SubscribeQuery {
	query := (&EmployeeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEmployee = query
	return sq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithCity(opts ...func(*CityQuery)) *SubscribeQuery {
	query := (&CityClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCity = query
	return sq
}

// WithStation tells the query-builder to eager-load the nodes that are connected to
// the "station" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithStation(opts ...func(*EnterpriseStationQuery)) *SubscribeQuery {
	query := (&EnterpriseStationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withStation = query
	return sq
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithStore(opts ...func(*StoreQuery)) *SubscribeQuery {
	query := (&StoreClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withStore = query
	return sq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithCabinet(opts ...func(*CabinetQuery)) *SubscribeQuery {
	query := (&CabinetClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withCabinet = query
	return sq
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithBrand(opts ...func(*EbikeBrandQuery)) *SubscribeQuery {
	query := (&EbikeBrandClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBrand = query
	return sq
}

// WithEbike tells the query-builder to eager-load the nodes that are connected to
// the "ebike" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithEbike(opts ...func(*EbikeQuery)) *SubscribeQuery {
	query := (&EbikeClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEbike = query
	return sq
}

// WithBattery tells the query-builder to eager-load the nodes that are connected to
// the "battery" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithBattery(opts ...func(*BatteryQuery)) *SubscribeQuery {
	query := (&BatteryClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBattery = query
	return sq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithRider(opts ...func(*RiderQuery)) *SubscribeQuery {
	query := (&RiderClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withRider = query
	return sq
}

// WithEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithEnterprise(opts ...func(*EnterpriseQuery)) *SubscribeQuery {
	query := (&EnterpriseClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withEnterprise = query
	return sq
}

// WithPauses tells the query-builder to eager-load the nodes that are connected to
// the "pauses" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithPauses(opts ...func(*SubscribePauseQuery)) *SubscribeQuery {
	query := (&SubscribePauseClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPauses = query
	return sq
}

// WithSuspends tells the query-builder to eager-load the nodes that are connected to
// the "suspends" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithSuspends(opts ...func(*SubscribeSuspendQuery)) *SubscribeQuery {
	query := (&SubscribeSuspendClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withSuspends = query
	return sq
}

// WithAlters tells the query-builder to eager-load the nodes that are connected to
// the "alters" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithAlters(opts ...func(*SubscribeAlterQuery)) *SubscribeQuery {
	query := (&SubscribeAlterClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAlters = query
	return sq
}

// WithOrders tells the query-builder to eager-load the nodes that are connected to
// the "orders" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithOrders(opts ...func(*OrderQuery)) *SubscribeQuery {
	query := (&OrderClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOrders = query
	return sq
}

// WithInitialOrder tells the query-builder to eager-load the nodes that are connected to
// the "initial_order" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithInitialOrder(opts ...func(*OrderQuery)) *SubscribeQuery {
	query := (&OrderClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withInitialOrder = query
	return sq
}

// WithBills tells the query-builder to eager-load the nodes that are connected to
// the "bills" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SubscribeQuery) WithBills(opts ...func(*EnterpriseBillQuery)) *SubscribeQuery {
	query := (&EnterpriseBillClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withBills = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Subscribe.Query().
//		GroupBy(subscribe.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *SubscribeQuery) GroupBy(field string, fields ...string) *SubscribeGroupBy {
	sq.fields = append([]string{field}, fields...)
	grbuild := &SubscribeGroupBy{build: sq}
	grbuild.flds = &sq.fields
	grbuild.label = subscribe.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Subscribe.Query().
//		Select(subscribe.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *SubscribeQuery) Select(fields ...string) *SubscribeSelect {
	sq.fields = append(sq.fields, fields...)
	sbuild := &SubscribeSelect{SubscribeQuery: sq}
	sbuild.label = subscribe.Label
	sbuild.flds, sbuild.scan = &sq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubscribeSelect configured with the given aggregations.
func (sq *SubscribeQuery) Aggregate(fns ...AggregateFunc) *SubscribeSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SubscribeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.fields {
		if !subscribe.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SubscribeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Subscribe, error) {
	var (
		nodes       = []*Subscribe{}
		_spec       = sq.querySpec()
		loadedTypes = [17]bool{
			sq.withPlan != nil,
			sq.withEmployee != nil,
			sq.withCity != nil,
			sq.withStation != nil,
			sq.withStore != nil,
			sq.withCabinet != nil,
			sq.withBrand != nil,
			sq.withEbike != nil,
			sq.withBattery != nil,
			sq.withRider != nil,
			sq.withEnterprise != nil,
			sq.withPauses != nil,
			sq.withSuspends != nil,
			sq.withAlters != nil,
			sq.withOrders != nil,
			sq.withInitialOrder != nil,
			sq.withBills != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Subscribe).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Subscribe{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withPlan; query != nil {
		if err := sq.loadPlan(ctx, query, nodes, nil,
			func(n *Subscribe, e *Plan) { n.Edges.Plan = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEmployee; query != nil {
		if err := sq.loadEmployee(ctx, query, nodes, nil,
			func(n *Subscribe, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withCity; query != nil {
		if err := sq.loadCity(ctx, query, nodes, nil,
			func(n *Subscribe, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withStation; query != nil {
		if err := sq.loadStation(ctx, query, nodes, nil,
			func(n *Subscribe, e *EnterpriseStation) { n.Edges.Station = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withStore; query != nil {
		if err := sq.loadStore(ctx, query, nodes, nil,
			func(n *Subscribe, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withCabinet; query != nil {
		if err := sq.loadCabinet(ctx, query, nodes, nil,
			func(n *Subscribe, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withBrand; query != nil {
		if err := sq.loadBrand(ctx, query, nodes, nil,
			func(n *Subscribe, e *EbikeBrand) { n.Edges.Brand = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEbike; query != nil {
		if err := sq.loadEbike(ctx, query, nodes, nil,
			func(n *Subscribe, e *Ebike) { n.Edges.Ebike = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withBattery; query != nil {
		if err := sq.loadBattery(ctx, query, nodes, nil,
			func(n *Subscribe, e *Battery) { n.Edges.Battery = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withRider; query != nil {
		if err := sq.loadRider(ctx, query, nodes, nil,
			func(n *Subscribe, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withEnterprise; query != nil {
		if err := sq.loadEnterprise(ctx, query, nodes, nil,
			func(n *Subscribe, e *Enterprise) { n.Edges.Enterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPauses; query != nil {
		if err := sq.loadPauses(ctx, query, nodes,
			func(n *Subscribe) { n.Edges.Pauses = []*SubscribePause{} },
			func(n *Subscribe, e *SubscribePause) { n.Edges.Pauses = append(n.Edges.Pauses, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withSuspends; query != nil {
		if err := sq.loadSuspends(ctx, query, nodes,
			func(n *Subscribe) { n.Edges.Suspends = []*SubscribeSuspend{} },
			func(n *Subscribe, e *SubscribeSuspend) { n.Edges.Suspends = append(n.Edges.Suspends, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withAlters; query != nil {
		if err := sq.loadAlters(ctx, query, nodes,
			func(n *Subscribe) { n.Edges.Alters = []*SubscribeAlter{} },
			func(n *Subscribe, e *SubscribeAlter) { n.Edges.Alters = append(n.Edges.Alters, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withOrders; query != nil {
		if err := sq.loadOrders(ctx, query, nodes,
			func(n *Subscribe) { n.Edges.Orders = []*Order{} },
			func(n *Subscribe, e *Order) { n.Edges.Orders = append(n.Edges.Orders, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withInitialOrder; query != nil {
		if err := sq.loadInitialOrder(ctx, query, nodes, nil,
			func(n *Subscribe, e *Order) { n.Edges.InitialOrder = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withBills; query != nil {
		if err := sq.loadBills(ctx, query, nodes,
			func(n *Subscribe) { n.Edges.Bills = []*EnterpriseBill{} },
			func(n *Subscribe, e *EnterpriseBill) { n.Edges.Bills = append(n.Edges.Bills, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SubscribeQuery) loadPlan(ctx context.Context, query *PlanQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Plan)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].PlanID == nil {
			continue
		}
		fk := *nodes[i].PlanID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(plan.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "plan_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].EmployeeID == nil {
			continue
		}
		fk := *nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].StationID == nil {
			continue
		}
		fk := *nodes[i].StationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].StoreID == nil {
			continue
		}
		fk := *nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].CabinetID == nil {
			continue
		}
		fk := *nodes[i].CabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadBrand(ctx context.Context, query *EbikeBrandQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *EbikeBrand)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].BrandID == nil {
			continue
		}
		fk := *nodes[i].BrandID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ebikebrand.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "brand_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadEbike(ctx context.Context, query *EbikeQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Ebike)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].EbikeID == nil {
			continue
		}
		fk := *nodes[i].EbikeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(ebike.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ebike_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadBattery(ctx context.Context, query *BatteryQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Battery)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].BatteryID == nil {
			continue
		}
		fk := *nodes[i].BatteryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(battery.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "battery_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		if nodes[i].EnterpriseID == nil {
			continue
		}
		fk := *nodes[i].EnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadPauses(ctx context.Context, query *SubscribePauseQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *SubscribePause)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Subscribe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.SubscribePause(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribe.PausesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscribeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubscribeQuery) loadSuspends(ctx context.Context, query *SubscribeSuspendQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *SubscribeSuspend)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Subscribe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.SubscribeSuspend(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribe.SuspendsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscribeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubscribeQuery) loadAlters(ctx context.Context, query *SubscribeAlterQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *SubscribeAlter)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Subscribe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.SubscribeAlter(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribe.AltersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscribeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubscribeQuery) loadOrders(ctx context.Context, query *OrderQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Order)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Subscribe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Order(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribe.OrdersColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscribeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SubscribeQuery) loadInitialOrder(ctx context.Context, query *OrderQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *Order)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Subscribe)
	for i := range nodes {
		fk := nodes[i].InitialOrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "initial_order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *SubscribeQuery) loadBills(ctx context.Context, query *EnterpriseBillQuery, nodes []*Subscribe, init func(*Subscribe), assign func(*Subscribe, *EnterpriseBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Subscribe)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.EnterpriseBill(func(s *sql.Selector) {
		s.Where(sql.InValues(subscribe.BillsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SubscribeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *SubscribeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.fields
	if len(sq.fields) > 0 {
		_spec.Unique = sq.unique != nil && *sq.unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SubscribeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscribe.Table,
			Columns: subscribe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: subscribe.FieldID,
			},
		},
		From:   sq.sql,
		Unique: true,
	}
	if unique := sq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribe.FieldID)
		for i := range fields {
			if fields[i] != subscribe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SubscribeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(subscribe.Table)
	columns := sq.fields
	if len(columns) == 0 {
		columns = subscribe.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.unique != nil && *sq.unique {
		selector.Distinct()
	}
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *SubscribeQuery) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

type SubscribeQueryWith string

var (
	SubscribeQueryWithPlan         SubscribeQueryWith = "Plan"
	SubscribeQueryWithEmployee     SubscribeQueryWith = "Employee"
	SubscribeQueryWithCity         SubscribeQueryWith = "City"
	SubscribeQueryWithStation      SubscribeQueryWith = "Station"
	SubscribeQueryWithStore        SubscribeQueryWith = "Store"
	SubscribeQueryWithCabinet      SubscribeQueryWith = "Cabinet"
	SubscribeQueryWithBrand        SubscribeQueryWith = "Brand"
	SubscribeQueryWithEbike        SubscribeQueryWith = "Ebike"
	SubscribeQueryWithBattery      SubscribeQueryWith = "Battery"
	SubscribeQueryWithRider        SubscribeQueryWith = "Rider"
	SubscribeQueryWithEnterprise   SubscribeQueryWith = "Enterprise"
	SubscribeQueryWithPauses       SubscribeQueryWith = "Pauses"
	SubscribeQueryWithSuspends     SubscribeQueryWith = "Suspends"
	SubscribeQueryWithAlters       SubscribeQueryWith = "Alters"
	SubscribeQueryWithOrders       SubscribeQueryWith = "Orders"
	SubscribeQueryWithInitialOrder SubscribeQueryWith = "InitialOrder"
	SubscribeQueryWithBills        SubscribeQueryWith = "Bills"
)

func (sq *SubscribeQuery) With(withEdges ...SubscribeQueryWith) *SubscribeQuery {
	for _, v := range withEdges {
		switch v {
		case SubscribeQueryWithPlan:
			sq.WithPlan()
		case SubscribeQueryWithEmployee:
			sq.WithEmployee()
		case SubscribeQueryWithCity:
			sq.WithCity()
		case SubscribeQueryWithStation:
			sq.WithStation()
		case SubscribeQueryWithStore:
			sq.WithStore()
		case SubscribeQueryWithCabinet:
			sq.WithCabinet()
		case SubscribeQueryWithBrand:
			sq.WithBrand()
		case SubscribeQueryWithEbike:
			sq.WithEbike()
		case SubscribeQueryWithBattery:
			sq.WithBattery()
		case SubscribeQueryWithRider:
			sq.WithRider()
		case SubscribeQueryWithEnterprise:
			sq.WithEnterprise()
		case SubscribeQueryWithPauses:
			sq.WithPauses()
		case SubscribeQueryWithSuspends:
			sq.WithSuspends()
		case SubscribeQueryWithAlters:
			sq.WithAlters()
		case SubscribeQueryWithOrders:
			sq.WithOrders()
		case SubscribeQueryWithInitialOrder:
			sq.WithInitialOrder()
		case SubscribeQueryWithBills:
			sq.WithBills()
		}
	}
	return sq
}

// SubscribeGroupBy is the group-by builder for Subscribe entities.
type SubscribeGroupBy struct {
	selector
	build *SubscribeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SubscribeGroupBy) Aggregate(fns ...AggregateFunc) *SubscribeGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SubscribeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSubscribe, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribeQuery, *SubscribeGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SubscribeGroupBy) sqlScan(ctx context.Context, root *SubscribeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubscribeSelect is the builder for selecting fields of Subscribe entities.
type SubscribeSelect struct {
	*SubscribeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SubscribeSelect) Aggregate(fns ...AggregateFunc) *SubscribeSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SubscribeSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeSubscribe, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubscribeQuery, *SubscribeSelect](ctx, ss.SubscribeQuery, ss, ss.inters, v)
}

func (ss *SubscribeSelect) sqlScan(ctx context.Context, root *SubscribeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *SubscribeSelect) Modify(modifiers ...func(s *sql.Selector)) *SubscribeSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
