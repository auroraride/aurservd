// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/aurservd/internal/ent/batteryflow"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// BatteryFlowCreate is the builder for creating a BatteryFlow entity.
type BatteryFlowCreate struct {
	config
	mutation *BatteryFlowMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bfc *BatteryFlowCreate) SetCreatedAt(t time.Time) *BatteryFlowCreate {
	bfc.mutation.SetCreatedAt(t)
	return bfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableCreatedAt(t *time.Time) *BatteryFlowCreate {
	if t != nil {
		bfc.SetCreatedAt(*t)
	}
	return bfc
}

// SetUpdatedAt sets the "updated_at" field.
func (bfc *BatteryFlowCreate) SetUpdatedAt(t time.Time) *BatteryFlowCreate {
	bfc.mutation.SetUpdatedAt(t)
	return bfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableUpdatedAt(t *time.Time) *BatteryFlowCreate {
	if t != nil {
		bfc.SetUpdatedAt(*t)
	}
	return bfc
}

// SetSubscribeID sets the "subscribe_id" field.
func (bfc *BatteryFlowCreate) SetSubscribeID(u uint64) *BatteryFlowCreate {
	bfc.mutation.SetSubscribeID(u)
	return bfc
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableSubscribeID(u *uint64) *BatteryFlowCreate {
	if u != nil {
		bfc.SetSubscribeID(*u)
	}
	return bfc
}

// SetBatteryID sets the "battery_id" field.
func (bfc *BatteryFlowCreate) SetBatteryID(u uint64) *BatteryFlowCreate {
	bfc.mutation.SetBatteryID(u)
	return bfc
}

// SetSn sets the "sn" field.
func (bfc *BatteryFlowCreate) SetSn(s string) *BatteryFlowCreate {
	bfc.mutation.SetSn(s)
	return bfc
}

// SetSoc sets the "soc" field.
func (bfc *BatteryFlowCreate) SetSoc(f float64) *BatteryFlowCreate {
	bfc.mutation.SetSoc(f)
	return bfc
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableSoc(f *float64) *BatteryFlowCreate {
	if f != nil {
		bfc.SetSoc(*f)
	}
	return bfc
}

// SetRiderID sets the "rider_id" field.
func (bfc *BatteryFlowCreate) SetRiderID(u uint64) *BatteryFlowCreate {
	bfc.mutation.SetRiderID(u)
	return bfc
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableRiderID(u *uint64) *BatteryFlowCreate {
	if u != nil {
		bfc.SetRiderID(*u)
	}
	return bfc
}

// SetCabinetID sets the "cabinet_id" field.
func (bfc *BatteryFlowCreate) SetCabinetID(u uint64) *BatteryFlowCreate {
	bfc.mutation.SetCabinetID(u)
	return bfc
}

// SetNillableCabinetID sets the "cabinet_id" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableCabinetID(u *uint64) *BatteryFlowCreate {
	if u != nil {
		bfc.SetCabinetID(*u)
	}
	return bfc
}

// SetSerial sets the "serial" field.
func (bfc *BatteryFlowCreate) SetSerial(s string) *BatteryFlowCreate {
	bfc.mutation.SetSerial(s)
	return bfc
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableSerial(s *string) *BatteryFlowCreate {
	if s != nil {
		bfc.SetSerial(*s)
	}
	return bfc
}

// SetOrdinal sets the "ordinal" field.
func (bfc *BatteryFlowCreate) SetOrdinal(i int) *BatteryFlowCreate {
	bfc.mutation.SetOrdinal(i)
	return bfc
}

// SetNillableOrdinal sets the "ordinal" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableOrdinal(i *int) *BatteryFlowCreate {
	if i != nil {
		bfc.SetOrdinal(*i)
	}
	return bfc
}

// SetGeom sets the "geom" field.
func (bfc *BatteryFlowCreate) SetGeom(a *adapter.Geometry) *BatteryFlowCreate {
	bfc.mutation.SetGeom(a)
	return bfc
}

// SetRemark sets the "remark" field.
func (bfc *BatteryFlowCreate) SetRemark(s string) *BatteryFlowCreate {
	bfc.mutation.SetRemark(s)
	return bfc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bfc *BatteryFlowCreate) SetNillableRemark(s *string) *BatteryFlowCreate {
	if s != nil {
		bfc.SetRemark(*s)
	}
	return bfc
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (bfc *BatteryFlowCreate) SetSubscribe(s *Subscribe) *BatteryFlowCreate {
	return bfc.SetSubscribeID(s.ID)
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bfc *BatteryFlowCreate) SetCabinet(c *Cabinet) *BatteryFlowCreate {
	return bfc.SetCabinetID(c.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (bfc *BatteryFlowCreate) SetRider(r *Rider) *BatteryFlowCreate {
	return bfc.SetRiderID(r.ID)
}

// Mutation returns the BatteryFlowMutation object of the builder.
func (bfc *BatteryFlowCreate) Mutation() *BatteryFlowMutation {
	return bfc.mutation
}

// Save creates the BatteryFlow in the database.
func (bfc *BatteryFlowCreate) Save(ctx context.Context) (*BatteryFlow, error) {
	bfc.defaults()
	return withHooks(ctx, bfc.sqlSave, bfc.mutation, bfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bfc *BatteryFlowCreate) SaveX(ctx context.Context) *BatteryFlow {
	v, err := bfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfc *BatteryFlowCreate) Exec(ctx context.Context) error {
	_, err := bfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfc *BatteryFlowCreate) ExecX(ctx context.Context) {
	if err := bfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bfc *BatteryFlowCreate) defaults() {
	if _, ok := bfc.mutation.CreatedAt(); !ok {
		v := batteryflow.DefaultCreatedAt()
		bfc.mutation.SetCreatedAt(v)
	}
	if _, ok := bfc.mutation.UpdatedAt(); !ok {
		v := batteryflow.DefaultUpdatedAt()
		bfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bfc.mutation.Soc(); !ok {
		v := batteryflow.DefaultSoc
		bfc.mutation.SetSoc(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bfc *BatteryFlowCreate) check() error {
	if _, ok := bfc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryFlow.created_at"`)}
	}
	if _, ok := bfc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatteryFlow.updated_at"`)}
	}
	if _, ok := bfc.mutation.BatteryID(); !ok {
		return &ValidationError{Name: "battery_id", err: errors.New(`ent: missing required field "BatteryFlow.battery_id"`)}
	}
	if _, ok := bfc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "BatteryFlow.sn"`)}
	}
	if _, ok := bfc.mutation.Soc(); !ok {
		return &ValidationError{Name: "soc", err: errors.New(`ent: missing required field "BatteryFlow.soc"`)}
	}
	return nil
}

func (bfc *BatteryFlowCreate) sqlSave(ctx context.Context) (*BatteryFlow, error) {
	if err := bfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bfc.mutation.id = &_node.ID
	bfc.mutation.done = true
	return _node, nil
}

func (bfc *BatteryFlowCreate) createSpec() (*BatteryFlow, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryFlow{config: bfc.config}
		_spec = sqlgraph.NewCreateSpec(batteryflow.Table, sqlgraph.NewFieldSpec(batteryflow.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bfc.conflict
	if value, ok := bfc.mutation.CreatedAt(); ok {
		_spec.SetField(batteryflow.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bfc.mutation.UpdatedAt(); ok {
		_spec.SetField(batteryflow.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bfc.mutation.BatteryID(); ok {
		_spec.SetField(batteryflow.FieldBatteryID, field.TypeUint64, value)
		_node.BatteryID = value
	}
	if value, ok := bfc.mutation.Sn(); ok {
		_spec.SetField(batteryflow.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := bfc.mutation.Soc(); ok {
		_spec.SetField(batteryflow.FieldSoc, field.TypeFloat64, value)
		_node.Soc = value
	}
	if value, ok := bfc.mutation.Serial(); ok {
		_spec.SetField(batteryflow.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := bfc.mutation.Ordinal(); ok {
		_spec.SetField(batteryflow.FieldOrdinal, field.TypeInt, value)
		_node.Ordinal = value
	}
	if value, ok := bfc.mutation.Geom(); ok {
		_spec.SetField(batteryflow.FieldGeom, field.TypeOther, value)
		_node.Geom = value
	}
	if value, ok := bfc.mutation.Remark(); ok {
		_spec.SetField(batteryflow.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if nodes := bfc.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   batteryflow.SubscribeTable,
			Columns: []string{batteryflow.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bfc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.CabinetTable,
			Columns: []string{batteryflow.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bfc.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batteryflow.RiderTable,
			Columns: []string{batteryflow.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryFlow.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryFlowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bfc *BatteryFlowCreate) OnConflict(opts ...sql.ConflictOption) *BatteryFlowUpsertOne {
	bfc.conflict = opts
	return &BatteryFlowUpsertOne{
		create: bfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfc *BatteryFlowCreate) OnConflictColumns(columns ...string) *BatteryFlowUpsertOne {
	bfc.conflict = append(bfc.conflict, sql.ConflictColumns(columns...))
	return &BatteryFlowUpsertOne{
		create: bfc,
	}
}

type (
	// BatteryFlowUpsertOne is the builder for "upsert"-ing
	//  one BatteryFlow node.
	BatteryFlowUpsertOne struct {
		create *BatteryFlowCreate
	}

	// BatteryFlowUpsert is the "OnConflict" setter.
	BatteryFlowUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFlowUpsert) SetUpdatedAt(v time.Time) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateUpdatedAt() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldUpdatedAt)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryFlowUpsert) SetSubscribeID(v uint64) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateSubscribeID() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldSubscribeID)
	return u
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryFlowUpsert) ClearSubscribeID() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldSubscribeID)
	return u
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFlowUpsert) SetBatteryID(v uint64) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldBatteryID, v)
	return u
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateBatteryID() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldBatteryID)
	return u
}

// AddBatteryID adds v to the "battery_id" field.
func (u *BatteryFlowUpsert) AddBatteryID(v uint64) *BatteryFlowUpsert {
	u.Add(batteryflow.FieldBatteryID, v)
	return u
}

// SetSn sets the "sn" field.
func (u *BatteryFlowUpsert) SetSn(v string) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateSn() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldSn)
	return u
}

// SetSoc sets the "soc" field.
func (u *BatteryFlowUpsert) SetSoc(v float64) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldSoc, v)
	return u
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateSoc() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldSoc)
	return u
}

// AddSoc adds v to the "soc" field.
func (u *BatteryFlowUpsert) AddSoc(v float64) *BatteryFlowUpsert {
	u.Add(batteryflow.FieldSoc, v)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryFlowUpsert) SetRiderID(v uint64) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateRiderID() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldRiderID)
	return u
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryFlowUpsert) ClearRiderID() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldRiderID)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryFlowUpsert) SetCabinetID(v uint64) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateCabinetID() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldCabinetID)
	return u
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryFlowUpsert) ClearCabinetID() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldCabinetID)
	return u
}

// SetSerial sets the "serial" field.
func (u *BatteryFlowUpsert) SetSerial(v string) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateSerial() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldSerial)
	return u
}

// ClearSerial clears the value of the "serial" field.
func (u *BatteryFlowUpsert) ClearSerial() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldSerial)
	return u
}

// SetOrdinal sets the "ordinal" field.
func (u *BatteryFlowUpsert) SetOrdinal(v int) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldOrdinal, v)
	return u
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateOrdinal() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldOrdinal)
	return u
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BatteryFlowUpsert) AddOrdinal(v int) *BatteryFlowUpsert {
	u.Add(batteryflow.FieldOrdinal, v)
	return u
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *BatteryFlowUpsert) ClearOrdinal() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldOrdinal)
	return u
}

// SetGeom sets the "geom" field.
func (u *BatteryFlowUpsert) SetGeom(v *adapter.Geometry) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldGeom, v)
	return u
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateGeom() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldGeom)
	return u
}

// ClearGeom clears the value of the "geom" field.
func (u *BatteryFlowUpsert) ClearGeom() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldGeom)
	return u
}

// SetRemark sets the "remark" field.
func (u *BatteryFlowUpsert) SetRemark(v string) *BatteryFlowUpsert {
	u.Set(batteryflow.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryFlowUpsert) UpdateRemark() *BatteryFlowUpsert {
	u.SetExcluded(batteryflow.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryFlowUpsert) ClearRemark() *BatteryFlowUpsert {
	u.SetNull(batteryflow.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryFlowUpsertOne) UpdateNewValues() *BatteryFlowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batteryflow.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryFlowUpsertOne) Ignore() *BatteryFlowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryFlowUpsertOne) DoNothing() *BatteryFlowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryFlowCreate.OnConflict
// documentation for more info.
func (u *BatteryFlowUpsertOne) Update(set func(*BatteryFlowUpsert)) *BatteryFlowUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryFlowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFlowUpsertOne) SetUpdatedAt(v time.Time) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateUpdatedAt() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryFlowUpsertOne) SetSubscribeID(v uint64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateSubscribeID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryFlowUpsertOne) ClearSubscribeID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearSubscribeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFlowUpsertOne) SetBatteryID(v uint64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetBatteryID(v)
	})
}

// AddBatteryID adds v to the "battery_id" field.
func (u *BatteryFlowUpsertOne) AddBatteryID(v uint64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateBatteryID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateBatteryID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryFlowUpsertOne) SetSn(v string) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateSn() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSn()
	})
}

// SetSoc sets the "soc" field.
func (u *BatteryFlowUpsertOne) SetSoc(v float64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *BatteryFlowUpsertOne) AddSoc(v float64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateSoc() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSoc()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryFlowUpsertOne) SetRiderID(v uint64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateRiderID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryFlowUpsertOne) ClearRiderID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryFlowUpsertOne) SetCabinetID(v uint64) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateCabinetID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryFlowUpsertOne) ClearCabinetID() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *BatteryFlowUpsertOne) SetSerial(v string) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateSerial() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSerial()
	})
}

// ClearSerial clears the value of the "serial" field.
func (u *BatteryFlowUpsertOne) ClearSerial() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearSerial()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *BatteryFlowUpsertOne) SetOrdinal(v int) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BatteryFlowUpsertOne) AddOrdinal(v int) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateOrdinal() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateOrdinal()
	})
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *BatteryFlowUpsertOne) ClearOrdinal() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearOrdinal()
	})
}

// SetGeom sets the "geom" field.
func (u *BatteryFlowUpsertOne) SetGeom(v *adapter.Geometry) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateGeom() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateGeom()
	})
}

// ClearGeom clears the value of the "geom" field.
func (u *BatteryFlowUpsertOne) ClearGeom() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearGeom()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryFlowUpsertOne) SetRemark(v string) *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryFlowUpsertOne) UpdateRemark() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryFlowUpsertOne) ClearRemark() *BatteryFlowUpsertOne {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *BatteryFlowUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryFlowCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryFlowUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryFlowUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryFlowUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryFlowCreateBulk is the builder for creating many BatteryFlow entities in bulk.
type BatteryFlowCreateBulk struct {
	config
	err      error
	builders []*BatteryFlowCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryFlow entities in the database.
func (bfcb *BatteryFlowCreateBulk) Save(ctx context.Context) ([]*BatteryFlow, error) {
	if bfcb.err != nil {
		return nil, bfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bfcb.builders))
	nodes := make([]*BatteryFlow, len(bfcb.builders))
	mutators := make([]Mutator, len(bfcb.builders))
	for i := range bfcb.builders {
		func(i int, root context.Context) {
			builder := bfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryFlowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bfcb *BatteryFlowCreateBulk) SaveX(ctx context.Context) []*BatteryFlow {
	v, err := bfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bfcb *BatteryFlowCreateBulk) Exec(ctx context.Context) error {
	_, err := bfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bfcb *BatteryFlowCreateBulk) ExecX(ctx context.Context) {
	if err := bfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryFlow.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryFlowUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bfcb *BatteryFlowCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryFlowUpsertBulk {
	bfcb.conflict = opts
	return &BatteryFlowUpsertBulk{
		create: bfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bfcb *BatteryFlowCreateBulk) OnConflictColumns(columns ...string) *BatteryFlowUpsertBulk {
	bfcb.conflict = append(bfcb.conflict, sql.ConflictColumns(columns...))
	return &BatteryFlowUpsertBulk{
		create: bfcb,
	}
}

// BatteryFlowUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryFlow nodes.
type BatteryFlowUpsertBulk struct {
	create *BatteryFlowCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryFlowUpsertBulk) UpdateNewValues() *BatteryFlowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batteryflow.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryFlow.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryFlowUpsertBulk) Ignore() *BatteryFlowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryFlowUpsertBulk) DoNothing() *BatteryFlowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryFlowCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryFlowUpsertBulk) Update(set func(*BatteryFlowUpsert)) *BatteryFlowUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryFlowUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryFlowUpsertBulk) SetUpdatedAt(v time.Time) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateUpdatedAt() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *BatteryFlowUpsertBulk) SetSubscribeID(v uint64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateSubscribeID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSubscribeID()
	})
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (u *BatteryFlowUpsertBulk) ClearSubscribeID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearSubscribeID()
	})
}

// SetBatteryID sets the "battery_id" field.
func (u *BatteryFlowUpsertBulk) SetBatteryID(v uint64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetBatteryID(v)
	})
}

// AddBatteryID adds v to the "battery_id" field.
func (u *BatteryFlowUpsertBulk) AddBatteryID(v uint64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddBatteryID(v)
	})
}

// UpdateBatteryID sets the "battery_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateBatteryID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateBatteryID()
	})
}

// SetSn sets the "sn" field.
func (u *BatteryFlowUpsertBulk) SetSn(v string) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateSn() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSn()
	})
}

// SetSoc sets the "soc" field.
func (u *BatteryFlowUpsertBulk) SetSoc(v float64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *BatteryFlowUpsertBulk) AddSoc(v float64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateSoc() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSoc()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *BatteryFlowUpsertBulk) SetRiderID(v uint64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateRiderID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateRiderID()
	})
}

// ClearRiderID clears the value of the "rider_id" field.
func (u *BatteryFlowUpsertBulk) ClearRiderID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearRiderID()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BatteryFlowUpsertBulk) SetCabinetID(v uint64) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateCabinetID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateCabinetID()
	})
}

// ClearCabinetID clears the value of the "cabinet_id" field.
func (u *BatteryFlowUpsertBulk) ClearCabinetID() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *BatteryFlowUpsertBulk) SetSerial(v string) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateSerial() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateSerial()
	})
}

// ClearSerial clears the value of the "serial" field.
func (u *BatteryFlowUpsertBulk) ClearSerial() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearSerial()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *BatteryFlowUpsertBulk) SetOrdinal(v int) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BatteryFlowUpsertBulk) AddOrdinal(v int) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateOrdinal() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateOrdinal()
	})
}

// ClearOrdinal clears the value of the "ordinal" field.
func (u *BatteryFlowUpsertBulk) ClearOrdinal() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearOrdinal()
	})
}

// SetGeom sets the "geom" field.
func (u *BatteryFlowUpsertBulk) SetGeom(v *adapter.Geometry) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetGeom(v)
	})
}

// UpdateGeom sets the "geom" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateGeom() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateGeom()
	})
}

// ClearGeom clears the value of the "geom" field.
func (u *BatteryFlowUpsertBulk) ClearGeom() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearGeom()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryFlowUpsertBulk) SetRemark(v string) *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryFlowUpsertBulk) UpdateRemark() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryFlowUpsertBulk) ClearRemark() *BatteryFlowUpsertBulk {
	return u.Update(func(s *BatteryFlowUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *BatteryFlowUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryFlowCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryFlowCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryFlowUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
