// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/enterprisestatement"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EnterpriseStatementMutation represents an operation that mutates the EnterpriseStatement nodes in the graph.
type EnterpriseStatementMutation struct {
	config
	op                Op
	typ               string
	id                *uint64
	created_at        *time.Time
	updated_at        *time.Time
	deleted_at        *time.Time
	creator           **model.Modifier
	last_modifier     **model.Modifier
	remark            *string
	cost              *float64
	addcost           *float64
	settled_at        *time.Time
	days              *int
	adddays           *int
	rider_number      *int
	addrider_number   *int
	date              *model.Date
	start             *model.Date
	end               *model.Date
	clearedFields     map[string]struct{}
	enterprise        *uint64
	clearedenterprise bool
	bills             map[uint64]struct{}
	removedbills      map[uint64]struct{}
	clearedbills      bool
	done              bool
	oldValue          func(context.Context) (*EnterpriseStatement, error)
	predicates        []predicate.EnterpriseStatement
}

var _ ent.Mutation = (*EnterpriseStatementMutation)(nil)

// enterprisestatementOption allows management of the mutation configuration using functional options.
type enterprisestatementOption func(*EnterpriseStatementMutation)

// newEnterpriseStatementMutation creates new mutation for the EnterpriseStatement entity.
func newEnterpriseStatementMutation(c config, op Op, opts ...enterprisestatementOption) *EnterpriseStatementMutation {
	m := &EnterpriseStatementMutation{
		config:        c,
		op:            op,
		typ:           TypeEnterpriseStatement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnterpriseStatementID sets the ID field of the mutation.
func withEnterpriseStatementID(id uint64) enterprisestatementOption {
	return func(m *EnterpriseStatementMutation) {
		var (
			err   error
			once  sync.Once
			value *EnterpriseStatement
		)
		m.oldValue = func(ctx context.Context) (*EnterpriseStatement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EnterpriseStatement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnterpriseStatement sets the old EnterpriseStatement of the mutation.
func withEnterpriseStatement(node *EnterpriseStatement) enterprisestatementOption {
	return func(m *EnterpriseStatementMutation) {
		m.oldValue = func(context.Context) (*EnterpriseStatement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnterpriseStatementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnterpriseStatementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnterpriseStatementMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnterpriseStatementMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EnterpriseStatement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EnterpriseStatementMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EnterpriseStatementMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EnterpriseStatementMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EnterpriseStatementMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EnterpriseStatementMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EnterpriseStatementMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EnterpriseStatementMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EnterpriseStatementMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EnterpriseStatementMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[enterprisestatement.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EnterpriseStatementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, enterprisestatement.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *EnterpriseStatementMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EnterpriseStatementMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *EnterpriseStatementMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[enterprisestatement.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *EnterpriseStatementMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, enterprisestatement.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *EnterpriseStatementMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *EnterpriseStatementMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *EnterpriseStatementMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[enterprisestatement.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *EnterpriseStatementMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, enterprisestatement.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *EnterpriseStatementMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *EnterpriseStatementMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *EnterpriseStatementMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[enterprisestatement.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *EnterpriseStatementMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, enterprisestatement.FieldRemark)
}

// SetEnterpriseID sets the "enterprise_id" field.
func (m *EnterpriseStatementMutation) SetEnterpriseID(u uint64) {
	m.enterprise = &u
}

// EnterpriseID returns the value of the "enterprise_id" field in the mutation.
func (m *EnterpriseStatementMutation) EnterpriseID() (r uint64, exists bool) {
	v := m.enterprise
	if v == nil {
		return
	}
	return *v, true
}

// OldEnterpriseID returns the old "enterprise_id" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldEnterpriseID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnterpriseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnterpriseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnterpriseID: %w", err)
	}
	return oldValue.EnterpriseID, nil
}

// ResetEnterpriseID resets all changes to the "enterprise_id" field.
func (m *EnterpriseStatementMutation) ResetEnterpriseID() {
	m.enterprise = nil
}

// SetCost sets the "cost" field.
func (m *EnterpriseStatementMutation) SetCost(f float64) {
	m.cost = &f
	m.addcost = nil
}

// Cost returns the value of the "cost" field in the mutation.
func (m *EnterpriseStatementMutation) Cost() (r float64, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old "cost" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds f to the "cost" field.
func (m *EnterpriseStatementMutation) AddCost(f float64) {
	if m.addcost != nil {
		*m.addcost += f
	} else {
		m.addcost = &f
	}
}

// AddedCost returns the value that was added to the "cost" field in this mutation.
func (m *EnterpriseStatementMutation) AddedCost() (r float64, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost resets all changes to the "cost" field.
func (m *EnterpriseStatementMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetSettledAt sets the "settled_at" field.
func (m *EnterpriseStatementMutation) SetSettledAt(t time.Time) {
	m.settled_at = &t
}

// SettledAt returns the value of the "settled_at" field in the mutation.
func (m *EnterpriseStatementMutation) SettledAt() (r time.Time, exists bool) {
	v := m.settled_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSettledAt returns the old "settled_at" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldSettledAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSettledAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSettledAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSettledAt: %w", err)
	}
	return oldValue.SettledAt, nil
}

// ClearSettledAt clears the value of the "settled_at" field.
func (m *EnterpriseStatementMutation) ClearSettledAt() {
	m.settled_at = nil
	m.clearedFields[enterprisestatement.FieldSettledAt] = struct{}{}
}

// SettledAtCleared returns if the "settled_at" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) SettledAtCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldSettledAt]
	return ok
}

// ResetSettledAt resets all changes to the "settled_at" field.
func (m *EnterpriseStatementMutation) ResetSettledAt() {
	m.settled_at = nil
	delete(m.clearedFields, enterprisestatement.FieldSettledAt)
}

// SetDays sets the "days" field.
func (m *EnterpriseStatementMutation) SetDays(i int) {
	m.days = &i
	m.adddays = nil
}

// Days returns the value of the "days" field in the mutation.
func (m *EnterpriseStatementMutation) Days() (r int, exists bool) {
	v := m.days
	if v == nil {
		return
	}
	return *v, true
}

// OldDays returns the old "days" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldDays(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDays: %w", err)
	}
	return oldValue.Days, nil
}

// AddDays adds i to the "days" field.
func (m *EnterpriseStatementMutation) AddDays(i int) {
	if m.adddays != nil {
		*m.adddays += i
	} else {
		m.adddays = &i
	}
}

// AddedDays returns the value that was added to the "days" field in this mutation.
func (m *EnterpriseStatementMutation) AddedDays() (r int, exists bool) {
	v := m.adddays
	if v == nil {
		return
	}
	return *v, true
}

// ResetDays resets all changes to the "days" field.
func (m *EnterpriseStatementMutation) ResetDays() {
	m.days = nil
	m.adddays = nil
}

// SetRiderNumber sets the "rider_number" field.
func (m *EnterpriseStatementMutation) SetRiderNumber(i int) {
	m.rider_number = &i
	m.addrider_number = nil
}

// RiderNumber returns the value of the "rider_number" field in the mutation.
func (m *EnterpriseStatementMutation) RiderNumber() (r int, exists bool) {
	v := m.rider_number
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderNumber returns the old "rider_number" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldRiderNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderNumber: %w", err)
	}
	return oldValue.RiderNumber, nil
}

// AddRiderNumber adds i to the "rider_number" field.
func (m *EnterpriseStatementMutation) AddRiderNumber(i int) {
	if m.addrider_number != nil {
		*m.addrider_number += i
	} else {
		m.addrider_number = &i
	}
}

// AddedRiderNumber returns the value that was added to the "rider_number" field in this mutation.
func (m *EnterpriseStatementMutation) AddedRiderNumber() (r int, exists bool) {
	v := m.addrider_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetRiderNumber resets all changes to the "rider_number" field.
func (m *EnterpriseStatementMutation) ResetRiderNumber() {
	m.rider_number = nil
	m.addrider_number = nil
}

// SetDate sets the "date" field.
func (m *EnterpriseStatementMutation) SetDate(value model.Date) {
	m.date = &value
}

// Date returns the value of the "date" field in the mutation.
func (m *EnterpriseStatementMutation) Date() (r model.Date, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldDate(ctx context.Context) (v *model.Date, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *EnterpriseStatementMutation) ClearDate() {
	m.date = nil
	m.clearedFields[enterprisestatement.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) DateCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *EnterpriseStatementMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, enterprisestatement.FieldDate)
}

// SetStart sets the "start" field.
func (m *EnterpriseStatementMutation) SetStart(value model.Date) {
	m.start = &value
}

// Start returns the value of the "start" field in the mutation.
func (m *EnterpriseStatementMutation) Start() (r model.Date, exists bool) {
	v := m.start
	if v == nil {
		return
	}
	return *v, true
}

// OldStart returns the old "start" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldStart(ctx context.Context) (v model.Date, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStart is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStart: %w", err)
	}
	return oldValue.Start, nil
}

// ResetStart resets all changes to the "start" field.
func (m *EnterpriseStatementMutation) ResetStart() {
	m.start = nil
}

// SetEnd sets the "end" field.
func (m *EnterpriseStatementMutation) SetEnd(value model.Date) {
	m.end = &value
}

// End returns the value of the "end" field in the mutation.
func (m *EnterpriseStatementMutation) End() (r model.Date, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the EnterpriseStatement entity.
// If the EnterpriseStatement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnterpriseStatementMutation) OldEnd(ctx context.Context) (v *model.Date, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ClearEnd clears the value of the "end" field.
func (m *EnterpriseStatementMutation) ClearEnd() {
	m.end = nil
	m.clearedFields[enterprisestatement.FieldEnd] = struct{}{}
}

// EndCleared returns if the "end" field was cleared in this mutation.
func (m *EnterpriseStatementMutation) EndCleared() bool {
	_, ok := m.clearedFields[enterprisestatement.FieldEnd]
	return ok
}

// ResetEnd resets all changes to the "end" field.
func (m *EnterpriseStatementMutation) ResetEnd() {
	m.end = nil
	delete(m.clearedFields, enterprisestatement.FieldEnd)
}

// ClearEnterprise clears the "enterprise" edge to the Enterprise entity.
func (m *EnterpriseStatementMutation) ClearEnterprise() {
	m.clearedenterprise = true
}

// EnterpriseCleared reports if the "enterprise" edge to the Enterprise entity was cleared.
func (m *EnterpriseStatementMutation) EnterpriseCleared() bool {
	return m.clearedenterprise
}

// EnterpriseIDs returns the "enterprise" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EnterpriseID instead. It exists only for internal usage by the builders.
func (m *EnterpriseStatementMutation) EnterpriseIDs() (ids []uint64) {
	if id := m.enterprise; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEnterprise resets all changes to the "enterprise" edge.
func (m *EnterpriseStatementMutation) ResetEnterprise() {
	m.enterprise = nil
	m.clearedenterprise = false
}

// AddBillIDs adds the "bills" edge to the EnterpriseBill entity by ids.
func (m *EnterpriseStatementMutation) AddBillIDs(ids ...uint64) {
	if m.bills == nil {
		m.bills = make(map[uint64]struct{})
	}
	for i := range ids {
		m.bills[ids[i]] = struct{}{}
	}
}

// ClearBills clears the "bills" edge to the EnterpriseBill entity.
func (m *EnterpriseStatementMutation) ClearBills() {
	m.clearedbills = true
}

// BillsCleared reports if the "bills" edge to the EnterpriseBill entity was cleared.
func (m *EnterpriseStatementMutation) BillsCleared() bool {
	return m.clearedbills
}

// RemoveBillIDs removes the "bills" edge to the EnterpriseBill entity by IDs.
func (m *EnterpriseStatementMutation) RemoveBillIDs(ids ...uint64) {
	if m.removedbills == nil {
		m.removedbills = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.bills, ids[i])
		m.removedbills[ids[i]] = struct{}{}
	}
}

// RemovedBills returns the removed IDs of the "bills" edge to the EnterpriseBill entity.
func (m *EnterpriseStatementMutation) RemovedBillsIDs() (ids []uint64) {
	for id := range m.removedbills {
		ids = append(ids, id)
	}
	return
}

// BillsIDs returns the "bills" edge IDs in the mutation.
func (m *EnterpriseStatementMutation) BillsIDs() (ids []uint64) {
	for id := range m.bills {
		ids = append(ids, id)
	}
	return
}

// ResetBills resets all changes to the "bills" edge.
func (m *EnterpriseStatementMutation) ResetBills() {
	m.bills = nil
	m.clearedbills = false
	m.removedbills = nil
}

// Where appends a list predicates to the EnterpriseStatementMutation builder.
func (m *EnterpriseStatementMutation) Where(ps ...predicate.EnterpriseStatement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EnterpriseStatementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (EnterpriseStatement).
func (m *EnterpriseStatementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnterpriseStatementMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, enterprisestatement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, enterprisestatement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, enterprisestatement.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, enterprisestatement.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, enterprisestatement.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, enterprisestatement.FieldRemark)
	}
	if m.enterprise != nil {
		fields = append(fields, enterprisestatement.FieldEnterpriseID)
	}
	if m.cost != nil {
		fields = append(fields, enterprisestatement.FieldCost)
	}
	if m.settled_at != nil {
		fields = append(fields, enterprisestatement.FieldSettledAt)
	}
	if m.days != nil {
		fields = append(fields, enterprisestatement.FieldDays)
	}
	if m.rider_number != nil {
		fields = append(fields, enterprisestatement.FieldRiderNumber)
	}
	if m.date != nil {
		fields = append(fields, enterprisestatement.FieldDate)
	}
	if m.start != nil {
		fields = append(fields, enterprisestatement.FieldStart)
	}
	if m.end != nil {
		fields = append(fields, enterprisestatement.FieldEnd)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnterpriseStatementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enterprisestatement.FieldCreatedAt:
		return m.CreatedAt()
	case enterprisestatement.FieldUpdatedAt:
		return m.UpdatedAt()
	case enterprisestatement.FieldDeletedAt:
		return m.DeletedAt()
	case enterprisestatement.FieldCreator:
		return m.Creator()
	case enterprisestatement.FieldLastModifier:
		return m.LastModifier()
	case enterprisestatement.FieldRemark:
		return m.Remark()
	case enterprisestatement.FieldEnterpriseID:
		return m.EnterpriseID()
	case enterprisestatement.FieldCost:
		return m.Cost()
	case enterprisestatement.FieldSettledAt:
		return m.SettledAt()
	case enterprisestatement.FieldDays:
		return m.Days()
	case enterprisestatement.FieldRiderNumber:
		return m.RiderNumber()
	case enterprisestatement.FieldDate:
		return m.Date()
	case enterprisestatement.FieldStart:
		return m.Start()
	case enterprisestatement.FieldEnd:
		return m.End()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnterpriseStatementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enterprisestatement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case enterprisestatement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case enterprisestatement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case enterprisestatement.FieldCreator:
		return m.OldCreator(ctx)
	case enterprisestatement.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case enterprisestatement.FieldRemark:
		return m.OldRemark(ctx)
	case enterprisestatement.FieldEnterpriseID:
		return m.OldEnterpriseID(ctx)
	case enterprisestatement.FieldCost:
		return m.OldCost(ctx)
	case enterprisestatement.FieldSettledAt:
		return m.OldSettledAt(ctx)
	case enterprisestatement.FieldDays:
		return m.OldDays(ctx)
	case enterprisestatement.FieldRiderNumber:
		return m.OldRiderNumber(ctx)
	case enterprisestatement.FieldDate:
		return m.OldDate(ctx)
	case enterprisestatement.FieldStart:
		return m.OldStart(ctx)
	case enterprisestatement.FieldEnd:
		return m.OldEnd(ctx)
	}
	return nil, fmt.Errorf("unknown EnterpriseStatement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseStatementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enterprisestatement.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case enterprisestatement.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case enterprisestatement.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case enterprisestatement.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case enterprisestatement.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case enterprisestatement.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case enterprisestatement.FieldEnterpriseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnterpriseID(v)
		return nil
	case enterprisestatement.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case enterprisestatement.FieldSettledAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSettledAt(v)
		return nil
	case enterprisestatement.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDays(v)
		return nil
	case enterprisestatement.FieldRiderNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderNumber(v)
		return nil
	case enterprisestatement.FieldDate:
		v, ok := value.(model.Date)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case enterprisestatement.FieldStart:
		v, ok := value.(model.Date)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStart(v)
		return nil
	case enterprisestatement.FieldEnd:
		v, ok := value.(model.Date)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnterpriseStatementMutation) AddedFields() []string {
	var fields []string
	if m.addcost != nil {
		fields = append(fields, enterprisestatement.FieldCost)
	}
	if m.adddays != nil {
		fields = append(fields, enterprisestatement.FieldDays)
	}
	if m.addrider_number != nil {
		fields = append(fields, enterprisestatement.FieldRiderNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnterpriseStatementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enterprisestatement.FieldCost:
		return m.AddedCost()
	case enterprisestatement.FieldDays:
		return m.AddedDays()
	case enterprisestatement.FieldRiderNumber:
		return m.AddedRiderNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnterpriseStatementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enterprisestatement.FieldCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	case enterprisestatement.FieldDays:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDays(v)
		return nil
	case enterprisestatement.FieldRiderNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRiderNumber(v)
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnterpriseStatementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enterprisestatement.FieldDeletedAt) {
		fields = append(fields, enterprisestatement.FieldDeletedAt)
	}
	if m.FieldCleared(enterprisestatement.FieldCreator) {
		fields = append(fields, enterprisestatement.FieldCreator)
	}
	if m.FieldCleared(enterprisestatement.FieldLastModifier) {
		fields = append(fields, enterprisestatement.FieldLastModifier)
	}
	if m.FieldCleared(enterprisestatement.FieldRemark) {
		fields = append(fields, enterprisestatement.FieldRemark)
	}
	if m.FieldCleared(enterprisestatement.FieldSettledAt) {
		fields = append(fields, enterprisestatement.FieldSettledAt)
	}
	if m.FieldCleared(enterprisestatement.FieldDate) {
		fields = append(fields, enterprisestatement.FieldDate)
	}
	if m.FieldCleared(enterprisestatement.FieldEnd) {
		fields = append(fields, enterprisestatement.FieldEnd)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnterpriseStatementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnterpriseStatementMutation) ClearField(name string) error {
	switch name {
	case enterprisestatement.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case enterprisestatement.FieldCreator:
		m.ClearCreator()
		return nil
	case enterprisestatement.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case enterprisestatement.FieldRemark:
		m.ClearRemark()
		return nil
	case enterprisestatement.FieldSettledAt:
		m.ClearSettledAt()
		return nil
	case enterprisestatement.FieldDate:
		m.ClearDate()
		return nil
	case enterprisestatement.FieldEnd:
		m.ClearEnd()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnterpriseStatementMutation) ResetField(name string) error {
	switch name {
	case enterprisestatement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case enterprisestatement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case enterprisestatement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case enterprisestatement.FieldCreator:
		m.ResetCreator()
		return nil
	case enterprisestatement.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case enterprisestatement.FieldRemark:
		m.ResetRemark()
		return nil
	case enterprisestatement.FieldEnterpriseID:
		m.ResetEnterpriseID()
		return nil
	case enterprisestatement.FieldCost:
		m.ResetCost()
		return nil
	case enterprisestatement.FieldSettledAt:
		m.ResetSettledAt()
		return nil
	case enterprisestatement.FieldDays:
		m.ResetDays()
		return nil
	case enterprisestatement.FieldRiderNumber:
		m.ResetRiderNumber()
		return nil
	case enterprisestatement.FieldDate:
		m.ResetDate()
		return nil
	case enterprisestatement.FieldStart:
		m.ResetStart()
		return nil
	case enterprisestatement.FieldEnd:
		m.ResetEnd()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnterpriseStatementMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.enterprise != nil {
		edges = append(edges, enterprisestatement.EdgeEnterprise)
	}
	if m.bills != nil {
		edges = append(edges, enterprisestatement.EdgeBills)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnterpriseStatementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case enterprisestatement.EdgeEnterprise:
		if id := m.enterprise; id != nil {
			return []ent.Value{*id}
		}
	case enterprisestatement.EdgeBills:
		ids := make([]ent.Value, 0, len(m.bills))
		for id := range m.bills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnterpriseStatementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedbills != nil {
		edges = append(edges, enterprisestatement.EdgeBills)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnterpriseStatementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case enterprisestatement.EdgeBills:
		ids := make([]ent.Value, 0, len(m.removedbills))
		for id := range m.removedbills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnterpriseStatementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedenterprise {
		edges = append(edges, enterprisestatement.EdgeEnterprise)
	}
	if m.clearedbills {
		edges = append(edges, enterprisestatement.EdgeBills)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnterpriseStatementMutation) EdgeCleared(name string) bool {
	switch name {
	case enterprisestatement.EdgeEnterprise:
		return m.clearedenterprise
	case enterprisestatement.EdgeBills:
		return m.clearedbills
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnterpriseStatementMutation) ClearEdge(name string) error {
	switch name {
	case enterprisestatement.EdgeEnterprise:
		m.ClearEnterprise()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnterpriseStatementMutation) ResetEdge(name string) error {
	switch name {
	case enterprisestatement.EdgeEnterprise:
		m.ResetEnterprise()
		return nil
	case enterprisestatement.EdgeBills:
		m.ResetBills()
		return nil
	}
	return fmt.Errorf("unknown EnterpriseStatement edge %s", name)
}

