// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// EbikeUpdate is the builder for updating Ebike entities.
type EbikeUpdate struct {
	config
	hooks     []Hook
	mutation  *EbikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EbikeUpdate builder.
func (eu *EbikeUpdate) Where(ps ...predicate.Ebike) *EbikeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EbikeUpdate) SetUpdatedAt(t time.Time) *EbikeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetLastModifier sets the "last_modifier" field.
func (eu *EbikeUpdate) SetLastModifier(m *model.Modifier) *EbikeUpdate {
	eu.mutation.SetLastModifier(m)
	return eu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (eu *EbikeUpdate) ClearLastModifier() *EbikeUpdate {
	eu.mutation.ClearLastModifier()
	return eu
}

// SetRemark sets the "remark" field.
func (eu *EbikeUpdate) SetRemark(s string) *EbikeUpdate {
	eu.mutation.SetRemark(s)
	return eu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableRemark(s *string) *EbikeUpdate {
	if s != nil {
		eu.SetRemark(*s)
	}
	return eu
}

// ClearRemark clears the value of the "remark" field.
func (eu *EbikeUpdate) ClearRemark() *EbikeUpdate {
	eu.mutation.ClearRemark()
	return eu
}

// SetBrandID sets the "brand_id" field.
func (eu *EbikeUpdate) SetBrandID(u uint64) *EbikeUpdate {
	eu.mutation.SetBrandID(u)
	return eu
}

// SetRiderID sets the "rider_id" field.
func (eu *EbikeUpdate) SetRiderID(u uint64) *EbikeUpdate {
	eu.mutation.SetRiderID(u)
	return eu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableRiderID(u *uint64) *EbikeUpdate {
	if u != nil {
		eu.SetRiderID(*u)
	}
	return eu
}

// ClearRiderID clears the value of the "rider_id" field.
func (eu *EbikeUpdate) ClearRiderID() *EbikeUpdate {
	eu.mutation.ClearRiderID()
	return eu
}

// SetStoreID sets the "store_id" field.
func (eu *EbikeUpdate) SetStoreID(u uint64) *EbikeUpdate {
	eu.mutation.SetStoreID(u)
	return eu
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableStoreID(u *uint64) *EbikeUpdate {
	if u != nil {
		eu.SetStoreID(*u)
	}
	return eu
}

// ClearStoreID clears the value of the "store_id" field.
func (eu *EbikeUpdate) ClearStoreID() *EbikeUpdate {
	eu.mutation.ClearStoreID()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EbikeUpdate) SetStatus(ms model.EbikeStatus) *EbikeUpdate {
	eu.mutation.SetStatus(ms)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableStatus(ms *model.EbikeStatus) *EbikeUpdate {
	if ms != nil {
		eu.SetStatus(*ms)
	}
	return eu
}

// SetEnable sets the "enable" field.
func (eu *EbikeUpdate) SetEnable(b bool) *EbikeUpdate {
	eu.mutation.SetEnable(b)
	return eu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableEnable(b *bool) *EbikeUpdate {
	if b != nil {
		eu.SetEnable(*b)
	}
	return eu
}

// SetSn sets the "sn" field.
func (eu *EbikeUpdate) SetSn(s string) *EbikeUpdate {
	eu.mutation.SetSn(s)
	return eu
}

// SetPlate sets the "plate" field.
func (eu *EbikeUpdate) SetPlate(s string) *EbikeUpdate {
	eu.mutation.SetPlate(s)
	return eu
}

// SetNillablePlate sets the "plate" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillablePlate(s *string) *EbikeUpdate {
	if s != nil {
		eu.SetPlate(*s)
	}
	return eu
}

// ClearPlate clears the value of the "plate" field.
func (eu *EbikeUpdate) ClearPlate() *EbikeUpdate {
	eu.mutation.ClearPlate()
	return eu
}

// SetMachine sets the "machine" field.
func (eu *EbikeUpdate) SetMachine(s string) *EbikeUpdate {
	eu.mutation.SetMachine(s)
	return eu
}

// SetNillableMachine sets the "machine" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableMachine(s *string) *EbikeUpdate {
	if s != nil {
		eu.SetMachine(*s)
	}
	return eu
}

// ClearMachine clears the value of the "machine" field.
func (eu *EbikeUpdate) ClearMachine() *EbikeUpdate {
	eu.mutation.ClearMachine()
	return eu
}

// SetSim sets the "sim" field.
func (eu *EbikeUpdate) SetSim(s string) *EbikeUpdate {
	eu.mutation.SetSim(s)
	return eu
}

// SetNillableSim sets the "sim" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableSim(s *string) *EbikeUpdate {
	if s != nil {
		eu.SetSim(*s)
	}
	return eu
}

// ClearSim clears the value of the "sim" field.
func (eu *EbikeUpdate) ClearSim() *EbikeUpdate {
	eu.mutation.ClearSim()
	return eu
}

// SetColor sets the "color" field.
func (eu *EbikeUpdate) SetColor(s string) *EbikeUpdate {
	eu.mutation.SetColor(s)
	return eu
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (eu *EbikeUpdate) SetNillableColor(s *string) *EbikeUpdate {
	if s != nil {
		eu.SetColor(*s)
	}
	return eu
}

// SetExFactory sets the "ex_factory" field.
func (eu *EbikeUpdate) SetExFactory(s string) *EbikeUpdate {
	eu.mutation.SetExFactory(s)
	return eu
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (eu *EbikeUpdate) SetBrand(e *EbikeBrand) *EbikeUpdate {
	return eu.SetBrandID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eu *EbikeUpdate) SetRider(r *Rider) *EbikeUpdate {
	return eu.SetRiderID(r.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eu *EbikeUpdate) SetStore(s *Store) *EbikeUpdate {
	return eu.SetStoreID(s.ID)
}

// Mutation returns the EbikeMutation object of the builder.
func (eu *EbikeUpdate) Mutation() *EbikeMutation {
	return eu.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (eu *EbikeUpdate) ClearBrand() *EbikeUpdate {
	eu.mutation.ClearBrand()
	return eu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eu *EbikeUpdate) ClearRider() *EbikeUpdate {
	eu.mutation.ClearRider()
	return eu
}

// ClearStore clears the "store" edge to the Store entity.
func (eu *EbikeUpdate) ClearStore() *EbikeUpdate {
	eu.mutation.ClearStore()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EbikeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EbikeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EbikeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EbikeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EbikeUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		if ebike.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebike.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebike.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (eu *EbikeUpdate) check() error {
	if _, ok := eu.mutation.BrandID(); eu.mutation.BrandCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ebike.brand"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EbikeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EbikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ebike.Table,
			Columns: ebike.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebike.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebike.FieldUpdatedAt,
		})
	}
	if eu.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ebike.FieldCreator,
		})
	}
	if value, ok := eu.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebike.FieldLastModifier,
		})
	}
	if eu.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ebike.FieldLastModifier,
		})
	}
	if value, ok := eu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldRemark,
		})
	}
	if eu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldRemark,
		})
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: ebike.FieldStatus,
		})
	}
	if value, ok := eu.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ebike.FieldEnable,
		})
	}
	if value, ok := eu.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldSn,
		})
	}
	if value, ok := eu.mutation.Plate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldPlate,
		})
	}
	if eu.mutation.PlateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldPlate,
		})
	}
	if value, ok := eu.mutation.Machine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldMachine,
		})
	}
	if eu.mutation.MachineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldMachine,
		})
	}
	if value, ok := eu.mutation.Sim(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldSim,
		})
	}
	if eu.mutation.SimCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldSim,
		})
	}
	if value, ok := eu.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldColor,
		})
	}
	if value, ok := eu.mutation.ExFactory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldExFactory,
		})
	}
	if eu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = eu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EbikeUpdateOne is the builder for updating a single Ebike entity.
type EbikeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EbikeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EbikeUpdateOne) SetUpdatedAt(t time.Time) *EbikeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetLastModifier sets the "last_modifier" field.
func (euo *EbikeUpdateOne) SetLastModifier(m *model.Modifier) *EbikeUpdateOne {
	euo.mutation.SetLastModifier(m)
	return euo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (euo *EbikeUpdateOne) ClearLastModifier() *EbikeUpdateOne {
	euo.mutation.ClearLastModifier()
	return euo
}

// SetRemark sets the "remark" field.
func (euo *EbikeUpdateOne) SetRemark(s string) *EbikeUpdateOne {
	euo.mutation.SetRemark(s)
	return euo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableRemark(s *string) *EbikeUpdateOne {
	if s != nil {
		euo.SetRemark(*s)
	}
	return euo
}

// ClearRemark clears the value of the "remark" field.
func (euo *EbikeUpdateOne) ClearRemark() *EbikeUpdateOne {
	euo.mutation.ClearRemark()
	return euo
}

// SetBrandID sets the "brand_id" field.
func (euo *EbikeUpdateOne) SetBrandID(u uint64) *EbikeUpdateOne {
	euo.mutation.SetBrandID(u)
	return euo
}

// SetRiderID sets the "rider_id" field.
func (euo *EbikeUpdateOne) SetRiderID(u uint64) *EbikeUpdateOne {
	euo.mutation.SetRiderID(u)
	return euo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableRiderID(u *uint64) *EbikeUpdateOne {
	if u != nil {
		euo.SetRiderID(*u)
	}
	return euo
}

// ClearRiderID clears the value of the "rider_id" field.
func (euo *EbikeUpdateOne) ClearRiderID() *EbikeUpdateOne {
	euo.mutation.ClearRiderID()
	return euo
}

// SetStoreID sets the "store_id" field.
func (euo *EbikeUpdateOne) SetStoreID(u uint64) *EbikeUpdateOne {
	euo.mutation.SetStoreID(u)
	return euo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableStoreID(u *uint64) *EbikeUpdateOne {
	if u != nil {
		euo.SetStoreID(*u)
	}
	return euo
}

// ClearStoreID clears the value of the "store_id" field.
func (euo *EbikeUpdateOne) ClearStoreID() *EbikeUpdateOne {
	euo.mutation.ClearStoreID()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EbikeUpdateOne) SetStatus(ms model.EbikeStatus) *EbikeUpdateOne {
	euo.mutation.SetStatus(ms)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableStatus(ms *model.EbikeStatus) *EbikeUpdateOne {
	if ms != nil {
		euo.SetStatus(*ms)
	}
	return euo
}

// SetEnable sets the "enable" field.
func (euo *EbikeUpdateOne) SetEnable(b bool) *EbikeUpdateOne {
	euo.mutation.SetEnable(b)
	return euo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableEnable(b *bool) *EbikeUpdateOne {
	if b != nil {
		euo.SetEnable(*b)
	}
	return euo
}

// SetSn sets the "sn" field.
func (euo *EbikeUpdateOne) SetSn(s string) *EbikeUpdateOne {
	euo.mutation.SetSn(s)
	return euo
}

// SetPlate sets the "plate" field.
func (euo *EbikeUpdateOne) SetPlate(s string) *EbikeUpdateOne {
	euo.mutation.SetPlate(s)
	return euo
}

// SetNillablePlate sets the "plate" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillablePlate(s *string) *EbikeUpdateOne {
	if s != nil {
		euo.SetPlate(*s)
	}
	return euo
}

// ClearPlate clears the value of the "plate" field.
func (euo *EbikeUpdateOne) ClearPlate() *EbikeUpdateOne {
	euo.mutation.ClearPlate()
	return euo
}

// SetMachine sets the "machine" field.
func (euo *EbikeUpdateOne) SetMachine(s string) *EbikeUpdateOne {
	euo.mutation.SetMachine(s)
	return euo
}

// SetNillableMachine sets the "machine" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableMachine(s *string) *EbikeUpdateOne {
	if s != nil {
		euo.SetMachine(*s)
	}
	return euo
}

// ClearMachine clears the value of the "machine" field.
func (euo *EbikeUpdateOne) ClearMachine() *EbikeUpdateOne {
	euo.mutation.ClearMachine()
	return euo
}

// SetSim sets the "sim" field.
func (euo *EbikeUpdateOne) SetSim(s string) *EbikeUpdateOne {
	euo.mutation.SetSim(s)
	return euo
}

// SetNillableSim sets the "sim" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableSim(s *string) *EbikeUpdateOne {
	if s != nil {
		euo.SetSim(*s)
	}
	return euo
}

// ClearSim clears the value of the "sim" field.
func (euo *EbikeUpdateOne) ClearSim() *EbikeUpdateOne {
	euo.mutation.ClearSim()
	return euo
}

// SetColor sets the "color" field.
func (euo *EbikeUpdateOne) SetColor(s string) *EbikeUpdateOne {
	euo.mutation.SetColor(s)
	return euo
}

// SetNillableColor sets the "color" field if the given value is not nil.
func (euo *EbikeUpdateOne) SetNillableColor(s *string) *EbikeUpdateOne {
	if s != nil {
		euo.SetColor(*s)
	}
	return euo
}

// SetExFactory sets the "ex_factory" field.
func (euo *EbikeUpdateOne) SetExFactory(s string) *EbikeUpdateOne {
	euo.mutation.SetExFactory(s)
	return euo
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (euo *EbikeUpdateOne) SetBrand(e *EbikeBrand) *EbikeUpdateOne {
	return euo.SetBrandID(e.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (euo *EbikeUpdateOne) SetRider(r *Rider) *EbikeUpdateOne {
	return euo.SetRiderID(r.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (euo *EbikeUpdateOne) SetStore(s *Store) *EbikeUpdateOne {
	return euo.SetStoreID(s.ID)
}

// Mutation returns the EbikeMutation object of the builder.
func (euo *EbikeUpdateOne) Mutation() *EbikeMutation {
	return euo.mutation
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (euo *EbikeUpdateOne) ClearBrand() *EbikeUpdateOne {
	euo.mutation.ClearBrand()
	return euo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (euo *EbikeUpdateOne) ClearRider() *EbikeUpdateOne {
	euo.mutation.ClearRider()
	return euo
}

// ClearStore clears the "store" edge to the Store entity.
func (euo *EbikeUpdateOne) ClearStore() *EbikeUpdateOne {
	euo.mutation.ClearStore()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EbikeUpdateOne) Select(field string, fields ...string) *EbikeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Ebike entity.
func (euo *EbikeUpdateOne) Save(ctx context.Context) (*Ebike, error) {
	var (
		err  error
		node *Ebike
	)
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Ebike)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EbikeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EbikeUpdateOne) SaveX(ctx context.Context) *Ebike {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EbikeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EbikeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EbikeUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		if ebike.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized ebike.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := ebike.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (euo *EbikeUpdateOne) check() error {
	if _, ok := euo.mutation.BrandID(); euo.mutation.BrandCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Ebike.brand"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EbikeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EbikeUpdateOne) sqlSave(ctx context.Context) (_node *Ebike, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ebike.Table,
			Columns: ebike.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebike.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ebike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebike.FieldID)
		for _, f := range fields {
			if !ebike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ebike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebike.FieldUpdatedAt,
		})
	}
	if euo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ebike.FieldCreator,
		})
	}
	if value, ok := euo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebike.FieldLastModifier,
		})
	}
	if euo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: ebike.FieldLastModifier,
		})
	}
	if value, ok := euo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldRemark,
		})
	}
	if euo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldRemark,
		})
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: ebike.FieldStatus,
		})
	}
	if value, ok := euo.mutation.Enable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: ebike.FieldEnable,
		})
	}
	if value, ok := euo.mutation.Sn(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldSn,
		})
	}
	if value, ok := euo.mutation.Plate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldPlate,
		})
	}
	if euo.mutation.PlateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldPlate,
		})
	}
	if value, ok := euo.mutation.Machine(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldMachine,
		})
	}
	if euo.mutation.MachineCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldMachine,
		})
	}
	if value, ok := euo.mutation.Sim(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldSim,
		})
	}
	if euo.mutation.SimCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: ebike.FieldSim,
		})
	}
	if value, ok := euo.mutation.Color(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldColor,
		})
	}
	if value, ok := euo.mutation.ExFactory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ebike.FieldExFactory,
		})
	}
	if euo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.BrandTable,
			Columns: []string{ebike.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.RiderTable,
			Columns: []string{ebike.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebike.StoreTable,
			Columns: []string{ebike.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = euo.modifiers
	_node = &Ebike{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
