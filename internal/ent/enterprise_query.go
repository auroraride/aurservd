// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisebill"
	"github.com/auroraride/aurservd/internal/ent/enterprisecontract"
	"github.com/auroraride/aurservd/internal/ent/enterpriseprice"
	"github.com/auroraride/aurservd/internal/ent/enterprisestatement"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/stock"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EnterpriseQuery is the builder for querying Enterprise entities.
type EnterpriseQuery struct {
	config
	ctx                     *QueryContext
	order                   []enterprise.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Enterprise
	withCity                *CityQuery
	withRiders              *RiderQuery
	withContracts           *EnterpriseContractQuery
	withPrices              *EnterprisePriceQuery
	withSubscribes          *SubscribeQuery
	withStatements          *EnterpriseStatementQuery
	withStations            *EnterpriseStationQuery
	withBills               *EnterpriseBillQuery
	withAgents              *AgentQuery
	withCabinets            *CabinetQuery
	withStocks              *StockQuery
	withSwapPutinBatteries  *EnterpriseBatterySwapQuery
	withSwapPutoutBatteries *EnterpriseBatterySwapQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterpriseQuery builder.
func (eq *EnterpriseQuery) Where(ps ...predicate.Enterprise) *EnterpriseQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EnterpriseQuery) Limit(limit int) *EnterpriseQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EnterpriseQuery) Offset(offset int) *EnterpriseQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EnterpriseQuery) Unique(unique bool) *EnterpriseQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EnterpriseQuery) Order(o ...enterprise.OrderOption) *EnterpriseQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryCity chains the current query on the "city" edge.
func (eq *EnterpriseQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprise.CityTable, enterprise.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiders chains the current query on the "riders" edge.
func (eq *EnterpriseQuery) QueryRiders() *RiderQuery {
	query := (&RiderClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.RidersTable, enterprise.RidersColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContracts chains the current query on the "contracts" edge.
func (eq *EnterpriseQuery) QueryContracts() *EnterpriseContractQuery {
	query := (&EnterpriseContractClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisecontract.Table, enterprisecontract.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.ContractsTable, enterprise.ContractsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrices chains the current query on the "prices" edge.
func (eq *EnterpriseQuery) QueryPrices() *EnterprisePriceQuery {
	query := (&EnterprisePriceClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterpriseprice.Table, enterpriseprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.PricesTable, enterprise.PricesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribes chains the current query on the "subscribes" edge.
func (eq *EnterpriseQuery) QuerySubscribes() *SubscribeQuery {
	query := (&SubscribeClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SubscribesTable, enterprise.SubscribesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatements chains the current query on the "statements" edge.
func (eq *EnterpriseQuery) QueryStatements() *EnterpriseStatementQuery {
	query := (&EnterpriseStatementClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisestatement.Table, enterprisestatement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StatementsTable, enterprise.StatementsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStations chains the current query on the "stations" edge.
func (eq *EnterpriseQuery) QueryStations() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StationsTable, enterprise.StationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBills chains the current query on the "bills" edge.
func (eq *EnterpriseQuery) QueryBills() *EnterpriseBillQuery {
	query := (&EnterpriseBillClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisebill.Table, enterprisebill.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.BillsTable, enterprise.BillsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAgents chains the current query on the "agents" edge.
func (eq *EnterpriseQuery) QueryAgents() *AgentQuery {
	query := (&AgentClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.AgentsTable, enterprise.AgentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinets chains the current query on the "cabinets" edge.
func (eq *EnterpriseQuery) QueryCabinets() *CabinetQuery {
	query := (&CabinetClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.CabinetsTable, enterprise.CabinetsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStocks chains the current query on the "stocks" edge.
func (eq *EnterpriseQuery) QueryStocks() *StockQuery {
	query := (&StockClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(stock.Table, stock.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.StocksTable, enterprise.StocksColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwapPutinBatteries chains the current query on the "swap_putin_batteries" edge.
func (eq *EnterpriseQuery) QuerySwapPutinBatteries() *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutinBatteriesTable, enterprise.SwapPutinBatteriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySwapPutoutBatteries chains the current query on the "swap_putout_batteries" edge.
func (eq *EnterpriseQuery) QuerySwapPutoutBatteries() *EnterpriseBatterySwapQuery {
	query := (&EnterpriseBatterySwapClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprise.Table, enterprise.FieldID, selector),
			sqlgraph.To(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enterprise.SwapPutoutBatteriesTable, enterprise.SwapPutoutBatteriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Enterprise entity from the query.
// Returns a *NotFoundError when no Enterprise was found.
func (eq *EnterpriseQuery) First(ctx context.Context) (*Enterprise, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterprise.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EnterpriseQuery) FirstX(ctx context.Context) *Enterprise {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Enterprise ID from the query.
// Returns a *NotFoundError when no Enterprise ID was found.
func (eq *EnterpriseQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterprise.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EnterpriseQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Enterprise entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Enterprise entity is found.
// Returns a *NotFoundError when no Enterprise entities are found.
func (eq *EnterpriseQuery) Only(ctx context.Context) (*Enterprise, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterprise.Label}
	default:
		return nil, &NotSingularError{enterprise.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EnterpriseQuery) OnlyX(ctx context.Context) *Enterprise {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Enterprise ID in the query.
// Returns a *NotSingularError when more than one Enterprise ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EnterpriseQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterprise.Label}
	default:
		err = &NotSingularError{enterprise.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EnterpriseQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Enterprises.
func (eq *EnterpriseQuery) All(ctx context.Context) ([]*Enterprise, error) {
	ctx = setContextOp(ctx, eq.ctx, "All")
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Enterprise, *EnterpriseQuery]()
	return withInterceptors[[]*Enterprise](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EnterpriseQuery) AllX(ctx context.Context) []*Enterprise {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Enterprise IDs.
func (eq *EnterpriseQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, "IDs")
	if err = eq.Select(enterprise.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EnterpriseQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EnterpriseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, "Count")
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EnterpriseQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EnterpriseQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EnterpriseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, "Exist")
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EnterpriseQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterpriseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EnterpriseQuery) Clone() *EnterpriseQuery {
	if eq == nil {
		return nil
	}
	return &EnterpriseQuery{
		config:                  eq.config,
		ctx:                     eq.ctx.Clone(),
		order:                   append([]enterprise.OrderOption{}, eq.order...),
		inters:                  append([]Interceptor{}, eq.inters...),
		predicates:              append([]predicate.Enterprise{}, eq.predicates...),
		withCity:                eq.withCity.Clone(),
		withRiders:              eq.withRiders.Clone(),
		withContracts:           eq.withContracts.Clone(),
		withPrices:              eq.withPrices.Clone(),
		withSubscribes:          eq.withSubscribes.Clone(),
		withStatements:          eq.withStatements.Clone(),
		withStations:            eq.withStations.Clone(),
		withBills:               eq.withBills.Clone(),
		withAgents:              eq.withAgents.Clone(),
		withCabinets:            eq.withCabinets.Clone(),
		withStocks:              eq.withStocks.Clone(),
		withSwapPutinBatteries:  eq.withSwapPutinBatteries.Clone(),
		withSwapPutoutBatteries: eq.withSwapPutoutBatteries.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithCity(opts ...func(*CityQuery)) *EnterpriseQuery {
	query := (&CityClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCity = query
	return eq
}

// WithRiders tells the query-builder to eager-load the nodes that are connected to
// the "riders" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithRiders(opts ...func(*RiderQuery)) *EnterpriseQuery {
	query := (&RiderClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withRiders = query
	return eq
}

// WithContracts tells the query-builder to eager-load the nodes that are connected to
// the "contracts" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithContracts(opts ...func(*EnterpriseContractQuery)) *EnterpriseQuery {
	query := (&EnterpriseContractClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withContracts = query
	return eq
}

// WithPrices tells the query-builder to eager-load the nodes that are connected to
// the "prices" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithPrices(opts ...func(*EnterprisePriceQuery)) *EnterpriseQuery {
	query := (&EnterprisePriceClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPrices = query
	return eq
}

// WithSubscribes tells the query-builder to eager-load the nodes that are connected to
// the "subscribes" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithSubscribes(opts ...func(*SubscribeQuery)) *EnterpriseQuery {
	query := (&SubscribeClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSubscribes = query
	return eq
}

// WithStatements tells the query-builder to eager-load the nodes that are connected to
// the "statements" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithStatements(opts ...func(*EnterpriseStatementQuery)) *EnterpriseQuery {
	query := (&EnterpriseStatementClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStatements = query
	return eq
}

// WithStations tells the query-builder to eager-load the nodes that are connected to
// the "stations" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithStations(opts ...func(*EnterpriseStationQuery)) *EnterpriseQuery {
	query := (&EnterpriseStationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStations = query
	return eq
}

// WithBills tells the query-builder to eager-load the nodes that are connected to
// the "bills" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithBills(opts ...func(*EnterpriseBillQuery)) *EnterpriseQuery {
	query := (&EnterpriseBillClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withBills = query
	return eq
}

// WithAgents tells the query-builder to eager-load the nodes that are connected to
// the "agents" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithAgents(opts ...func(*AgentQuery)) *EnterpriseQuery {
	query := (&AgentClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAgents = query
	return eq
}

// WithCabinets tells the query-builder to eager-load the nodes that are connected to
// the "cabinets" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithCabinets(opts ...func(*CabinetQuery)) *EnterpriseQuery {
	query := (&CabinetClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCabinets = query
	return eq
}

// WithStocks tells the query-builder to eager-load the nodes that are connected to
// the "stocks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithStocks(opts ...func(*StockQuery)) *EnterpriseQuery {
	query := (&StockClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withStocks = query
	return eq
}

// WithSwapPutinBatteries tells the query-builder to eager-load the nodes that are connected to
// the "swap_putin_batteries" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithSwapPutinBatteries(opts ...func(*EnterpriseBatterySwapQuery)) *EnterpriseQuery {
	query := (&EnterpriseBatterySwapClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSwapPutinBatteries = query
	return eq
}

// WithSwapPutoutBatteries tells the query-builder to eager-load the nodes that are connected to
// the "swap_putout_batteries" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EnterpriseQuery) WithSwapPutoutBatteries(opts ...func(*EnterpriseBatterySwapQuery)) *EnterpriseQuery {
	query := (&EnterpriseBatterySwapClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSwapPutoutBatteries = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Enterprise.Query().
//		GroupBy(enterprise.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EnterpriseQuery) GroupBy(field string, fields ...string) *EnterpriseGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnterpriseGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = enterprise.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Enterprise.Query().
//		Select(enterprise.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EnterpriseQuery) Select(fields ...string) *EnterpriseSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EnterpriseSelect{EnterpriseQuery: eq}
	sbuild.label = enterprise.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnterpriseSelect configured with the given aggregations.
func (eq *EnterpriseQuery) Aggregate(fns ...AggregateFunc) *EnterpriseSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EnterpriseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !enterprise.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EnterpriseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Enterprise, error) {
	var (
		nodes       = []*Enterprise{}
		_spec       = eq.querySpec()
		loadedTypes = [13]bool{
			eq.withCity != nil,
			eq.withRiders != nil,
			eq.withContracts != nil,
			eq.withPrices != nil,
			eq.withSubscribes != nil,
			eq.withStatements != nil,
			eq.withStations != nil,
			eq.withBills != nil,
			eq.withAgents != nil,
			eq.withCabinets != nil,
			eq.withStocks != nil,
			eq.withSwapPutinBatteries != nil,
			eq.withSwapPutoutBatteries != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Enterprise).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Enterprise{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withCity; query != nil {
		if err := eq.loadCity(ctx, query, nodes, nil,
			func(n *Enterprise, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withRiders; query != nil {
		if err := eq.loadRiders(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Riders = []*Rider{} },
			func(n *Enterprise, e *Rider) { n.Edges.Riders = append(n.Edges.Riders, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withContracts; query != nil {
		if err := eq.loadContracts(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Contracts = []*EnterpriseContract{} },
			func(n *Enterprise, e *EnterpriseContract) { n.Edges.Contracts = append(n.Edges.Contracts, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPrices; query != nil {
		if err := eq.loadPrices(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Prices = []*EnterprisePrice{} },
			func(n *Enterprise, e *EnterprisePrice) { n.Edges.Prices = append(n.Edges.Prices, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSubscribes; query != nil {
		if err := eq.loadSubscribes(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Subscribes = []*Subscribe{} },
			func(n *Enterprise, e *Subscribe) { n.Edges.Subscribes = append(n.Edges.Subscribes, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStatements; query != nil {
		if err := eq.loadStatements(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Statements = []*EnterpriseStatement{} },
			func(n *Enterprise, e *EnterpriseStatement) { n.Edges.Statements = append(n.Edges.Statements, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStations; query != nil {
		if err := eq.loadStations(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Stations = []*EnterpriseStation{} },
			func(n *Enterprise, e *EnterpriseStation) { n.Edges.Stations = append(n.Edges.Stations, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withBills; query != nil {
		if err := eq.loadBills(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Bills = []*EnterpriseBill{} },
			func(n *Enterprise, e *EnterpriseBill) { n.Edges.Bills = append(n.Edges.Bills, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAgents; query != nil {
		if err := eq.loadAgents(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Agents = []*Agent{} },
			func(n *Enterprise, e *Agent) { n.Edges.Agents = append(n.Edges.Agents, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCabinets; query != nil {
		if err := eq.loadCabinets(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Cabinets = []*Cabinet{} },
			func(n *Enterprise, e *Cabinet) { n.Edges.Cabinets = append(n.Edges.Cabinets, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withStocks; query != nil {
		if err := eq.loadStocks(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.Stocks = []*Stock{} },
			func(n *Enterprise, e *Stock) { n.Edges.Stocks = append(n.Edges.Stocks, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSwapPutinBatteries; query != nil {
		if err := eq.loadSwapPutinBatteries(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.SwapPutinBatteries = []*EnterpriseBatterySwap{} },
			func(n *Enterprise, e *EnterpriseBatterySwap) {
				n.Edges.SwapPutinBatteries = append(n.Edges.SwapPutinBatteries, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withSwapPutoutBatteries; query != nil {
		if err := eq.loadSwapPutoutBatteries(ctx, query, nodes,
			func(n *Enterprise) { n.Edges.SwapPutoutBatteries = []*EnterpriseBatterySwap{} },
			func(n *Enterprise, e *EnterpriseBatterySwap) {
				n.Edges.SwapPutoutBatteries = append(n.Edges.SwapPutoutBatteries, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EnterpriseQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Enterprise)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EnterpriseQuery) loadRiders(ctx context.Context, query *RiderQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *Rider)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(rider.FieldEnterpriseID)
	}
	query.Where(predicate.Rider(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.RidersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadContracts(ctx context.Context, query *EnterpriseContractQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseContract)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisecontract.FieldEnterpriseID)
	}
	query.Where(predicate.EnterpriseContract(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.ContractsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadPrices(ctx context.Context, query *EnterprisePriceQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterprisePrice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterpriseprice.FieldEnterpriseID)
	}
	query.Where(predicate.EnterprisePrice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.PricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadSubscribes(ctx context.Context, query *SubscribeQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *Subscribe)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscribe.FieldEnterpriseID)
	}
	query.Where(predicate.Subscribe(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.SubscribesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadStatements(ctx context.Context, query *EnterpriseStatementQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseStatement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisestatement.FieldEnterpriseID)
	}
	query.Where(predicate.EnterpriseStatement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.StatementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadStations(ctx context.Context, query *EnterpriseStationQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseStation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisestation.FieldEnterpriseID)
	}
	query.Where(predicate.EnterpriseStation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.StationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadBills(ctx context.Context, query *EnterpriseBillQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseBill)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisebill.FieldEnterpriseID)
	}
	query.Where(predicate.EnterpriseBill(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.BillsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadAgents(ctx context.Context, query *AgentQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *Agent)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Agent(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.AgentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.enterprise_agents
		if fk == nil {
			return fmt.Errorf(`foreign-key "enterprise_agents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_agents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadCabinets(ctx context.Context, query *CabinetQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *Cabinet)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(cabinet.FieldEnterpriseID)
	}
	query.Where(predicate.Cabinet(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.CabinetsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadStocks(ctx context.Context, query *StockQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *Stock)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(stock.FieldEnterpriseID)
	}
	query.Where(predicate.Stock(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.StocksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadSwapPutinBatteries(ctx context.Context, query *EnterpriseBatterySwapQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseBatterySwap)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisebatteryswap.FieldPutinEnterpriseID)
	}
	query.Where(predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.SwapPutinBatteriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PutinEnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "putin_enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "putin_enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EnterpriseQuery) loadSwapPutoutBatteries(ctx context.Context, query *EnterpriseBatterySwapQuery, nodes []*Enterprise, init func(*Enterprise), assign func(*Enterprise, *EnterpriseBatterySwap)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Enterprise)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(enterprisebatteryswap.FieldPutoutEnterpriseID)
	}
	query.Where(predicate.EnterpriseBatterySwap(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(enterprise.SwapPutoutBatteriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.PutoutEnterpriseID
		if fk == nil {
			return fmt.Errorf(`foreign-key "putout_enterprise_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "putout_enterprise_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EnterpriseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EnterpriseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(enterprise.Table, enterprise.Columns, sqlgraph.NewFieldSpec(enterprise.FieldID, field.TypeUint64))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprise.FieldID)
		for i := range fields {
			if fields[i] != enterprise.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withCity != nil {
			_spec.Node.AddColumnOnce(enterprise.FieldCityID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EnterpriseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(enterprise.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = enterprise.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EnterpriseQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

type EnterpriseQueryWith string

var (
	EnterpriseQueryWithCity                EnterpriseQueryWith = "City"
	EnterpriseQueryWithRiders              EnterpriseQueryWith = "Riders"
	EnterpriseQueryWithContracts           EnterpriseQueryWith = "Contracts"
	EnterpriseQueryWithPrices              EnterpriseQueryWith = "Prices"
	EnterpriseQueryWithSubscribes          EnterpriseQueryWith = "Subscribes"
	EnterpriseQueryWithStatements          EnterpriseQueryWith = "Statements"
	EnterpriseQueryWithStations            EnterpriseQueryWith = "Stations"
	EnterpriseQueryWithBills               EnterpriseQueryWith = "Bills"
	EnterpriseQueryWithAgents              EnterpriseQueryWith = "Agents"
	EnterpriseQueryWithCabinets            EnterpriseQueryWith = "Cabinets"
	EnterpriseQueryWithStocks              EnterpriseQueryWith = "Stocks"
	EnterpriseQueryWithSwapPutinBatteries  EnterpriseQueryWith = "SwapPutinBatteries"
	EnterpriseQueryWithSwapPutoutBatteries EnterpriseQueryWith = "SwapPutoutBatteries"
)

func (eq *EnterpriseQuery) With(withEdges ...EnterpriseQueryWith) *EnterpriseQuery {
	for _, v := range withEdges {
		switch v {
		case EnterpriseQueryWithCity:
			eq.WithCity()
		case EnterpriseQueryWithRiders:
			eq.WithRiders()
		case EnterpriseQueryWithContracts:
			eq.WithContracts()
		case EnterpriseQueryWithPrices:
			eq.WithPrices()
		case EnterpriseQueryWithSubscribes:
			eq.WithSubscribes()
		case EnterpriseQueryWithStatements:
			eq.WithStatements()
		case EnterpriseQueryWithStations:
			eq.WithStations()
		case EnterpriseQueryWithBills:
			eq.WithBills()
		case EnterpriseQueryWithAgents:
			eq.WithAgents()
		case EnterpriseQueryWithCabinets:
			eq.WithCabinets()
		case EnterpriseQueryWithStocks:
			eq.WithStocks()
		case EnterpriseQueryWithSwapPutinBatteries:
			eq.WithSwapPutinBatteries()
		case EnterpriseQueryWithSwapPutoutBatteries:
			eq.WithSwapPutoutBatteries()
		}
	}
	return eq
}

// EnterpriseGroupBy is the group-by builder for Enterprise entities.
type EnterpriseGroupBy struct {
	selector
	build *EnterpriseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EnterpriseGroupBy) Aggregate(fns ...AggregateFunc) *EnterpriseGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EnterpriseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, "GroupBy")
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseQuery, *EnterpriseGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EnterpriseGroupBy) sqlScan(ctx context.Context, root *EnterpriseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnterpriseSelect is the builder for selecting fields of Enterprise entities.
type EnterpriseSelect struct {
	*EnterpriseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EnterpriseSelect) Aggregate(fns ...AggregateFunc) *EnterpriseSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EnterpriseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, "Select")
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseQuery, *EnterpriseSelect](ctx, es.EnterpriseQuery, es, es.inters, v)
}

func (es *EnterpriseSelect) sqlScan(ctx context.Context, root *EnterpriseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EnterpriseSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
