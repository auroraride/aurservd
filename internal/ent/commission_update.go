// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/business"
	"github.com/auroraride/aurservd/internal/ent/commission"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// CommissionUpdate is the builder for updating Commission entities.
type CommissionUpdate struct {
	config
	hooks     []Hook
	mutation  *CommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CommissionUpdate builder.
func (cu *CommissionUpdate) Where(ps ...predicate.Commission) *CommissionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommissionUpdate) SetUpdatedAt(t time.Time) *CommissionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CommissionUpdate) SetDeletedAt(t time.Time) *CommissionUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableDeletedAt(t *time.Time) *CommissionUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CommissionUpdate) ClearDeletedAt() *CommissionUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetLastModifier sets the "last_modifier" field.
func (cu *CommissionUpdate) SetLastModifier(m *model.Modifier) *CommissionUpdate {
	cu.mutation.SetLastModifier(m)
	return cu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cu *CommissionUpdate) ClearLastModifier() *CommissionUpdate {
	cu.mutation.ClearLastModifier()
	return cu
}

// SetRemark sets the "remark" field.
func (cu *CommissionUpdate) SetRemark(s string) *CommissionUpdate {
	cu.mutation.SetRemark(s)
	return cu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableRemark(s *string) *CommissionUpdate {
	if s != nil {
		cu.SetRemark(*s)
	}
	return cu
}

// ClearRemark clears the value of the "remark" field.
func (cu *CommissionUpdate) ClearRemark() *CommissionUpdate {
	cu.mutation.ClearRemark()
	return cu
}

// SetBusinessID sets the "business_id" field.
func (cu *CommissionUpdate) SetBusinessID(u uint64) *CommissionUpdate {
	cu.mutation.SetBusinessID(u)
	return cu
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableBusinessID(u *uint64) *CommissionUpdate {
	if u != nil {
		cu.SetBusinessID(*u)
	}
	return cu
}

// ClearBusinessID clears the value of the "business_id" field.
func (cu *CommissionUpdate) ClearBusinessID() *CommissionUpdate {
	cu.mutation.ClearBusinessID()
	return cu
}

// SetSubscribeID sets the "subscribe_id" field.
func (cu *CommissionUpdate) SetSubscribeID(u uint64) *CommissionUpdate {
	cu.mutation.SetSubscribeID(u)
	return cu
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableSubscribeID(u *uint64) *CommissionUpdate {
	if u != nil {
		cu.SetSubscribeID(*u)
	}
	return cu
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (cu *CommissionUpdate) ClearSubscribeID() *CommissionUpdate {
	cu.mutation.ClearSubscribeID()
	return cu
}

// SetPlanID sets the "plan_id" field.
func (cu *CommissionUpdate) SetPlanID(u uint64) *CommissionUpdate {
	cu.mutation.SetPlanID(u)
	return cu
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillablePlanID(u *uint64) *CommissionUpdate {
	if u != nil {
		cu.SetPlanID(*u)
	}
	return cu
}

// ClearPlanID clears the value of the "plan_id" field.
func (cu *CommissionUpdate) ClearPlanID() *CommissionUpdate {
	cu.mutation.ClearPlanID()
	return cu
}

// SetRiderID sets the "rider_id" field.
func (cu *CommissionUpdate) SetRiderID(u uint64) *CommissionUpdate {
	cu.mutation.SetRiderID(u)
	return cu
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableRiderID(u *uint64) *CommissionUpdate {
	if u != nil {
		cu.SetRiderID(*u)
	}
	return cu
}

// ClearRiderID clears the value of the "rider_id" field.
func (cu *CommissionUpdate) ClearRiderID() *CommissionUpdate {
	cu.mutation.ClearRiderID()
	return cu
}

// SetOrderID sets the "order_id" field.
func (cu *CommissionUpdate) SetOrderID(u uint64) *CommissionUpdate {
	cu.mutation.SetOrderID(u)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CommissionUpdate) SetStatus(u uint8) *CommissionUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(u)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableStatus(u *uint8) *CommissionUpdate {
	if u != nil {
		cu.SetStatus(*u)
	}
	return cu
}

// AddStatus adds u to the "status" field.
func (cu *CommissionUpdate) AddStatus(u int8) *CommissionUpdate {
	cu.mutation.AddStatus(u)
	return cu
}

// SetEmployeeID sets the "employee_id" field.
func (cu *CommissionUpdate) SetEmployeeID(u uint64) *CommissionUpdate {
	cu.mutation.SetEmployeeID(u)
	return cu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (cu *CommissionUpdate) SetNillableEmployeeID(u *uint64) *CommissionUpdate {
	if u != nil {
		cu.SetEmployeeID(*u)
	}
	return cu
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (cu *CommissionUpdate) ClearEmployeeID() *CommissionUpdate {
	cu.mutation.ClearEmployeeID()
	return cu
}

// SetBusiness sets the "business" edge to the Business entity.
func (cu *CommissionUpdate) SetBusiness(b *Business) *CommissionUpdate {
	return cu.SetBusinessID(b.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (cu *CommissionUpdate) SetSubscribe(s *Subscribe) *CommissionUpdate {
	return cu.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cu *CommissionUpdate) SetPlan(p *Plan) *CommissionUpdate {
	return cu.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cu *CommissionUpdate) SetRider(r *Rider) *CommissionUpdate {
	return cu.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cu *CommissionUpdate) SetOrder(o *Order) *CommissionUpdate {
	return cu.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (cu *CommissionUpdate) SetEmployee(e *Employee) *CommissionUpdate {
	return cu.SetEmployeeID(e.ID)
}

// Mutation returns the CommissionMutation object of the builder.
func (cu *CommissionUpdate) Mutation() *CommissionMutation {
	return cu.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (cu *CommissionUpdate) ClearBusiness() *CommissionUpdate {
	cu.mutation.ClearBusiness()
	return cu
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (cu *CommissionUpdate) ClearSubscribe() *CommissionUpdate {
	cu.mutation.ClearSubscribe()
	return cu
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cu *CommissionUpdate) ClearPlan() *CommissionUpdate {
	cu.mutation.ClearPlan()
	return cu
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cu *CommissionUpdate) ClearRider() *CommissionUpdate {
	cu.mutation.ClearRider()
	return cu
}

// ClearOrder clears the "order" edge to the Order entity.
func (cu *CommissionUpdate) ClearOrder() *CommissionUpdate {
	cu.mutation.ClearOrder()
	return cu
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (cu *CommissionUpdate) ClearEmployee() *CommissionUpdate {
	cu.mutation.ClearEmployee()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommissionUpdate) Save(ctx context.Context) (int, error) {
	if err := cu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, CommissionMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommissionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommissionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommissionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommissionUpdate) defaults() error {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		if commission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := commission.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cu *CommissionUpdate) check() error {
	if _, ok := cu.mutation.OrderID(); cu.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Commission.order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CommissionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommissionUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CommissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commission.Table, commission.Columns, sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(commission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.SetField(commission.FieldDeletedAt, field.TypeTime, value)
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.ClearField(commission.FieldDeletedAt, field.TypeTime)
	}
	if cu.mutation.CreatorCleared() {
		_spec.ClearField(commission.FieldCreator, field.TypeJSON)
	}
	if value, ok := cu.mutation.LastModifier(); ok {
		_spec.SetField(commission.FieldLastModifier, field.TypeJSON, value)
	}
	if cu.mutation.LastModifierCleared() {
		_spec.ClearField(commission.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cu.mutation.Remark(); ok {
		_spec.SetField(commission.FieldRemark, field.TypeString, value)
	}
	if cu.mutation.RemarkCleared() {
		_spec.ClearField(commission.FieldRemark, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(commission.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(commission.FieldStatus, field.TypeUint8, value)
	}
	if cu.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CommissionUpdateOne is the builder for updating a single Commission entity.
type CommissionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CommissionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommissionUpdateOne) SetUpdatedAt(t time.Time) *CommissionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CommissionUpdateOne) SetDeletedAt(t time.Time) *CommissionUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableDeletedAt(t *time.Time) *CommissionUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CommissionUpdateOne) ClearDeletedAt() *CommissionUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetLastModifier sets the "last_modifier" field.
func (cuo *CommissionUpdateOne) SetLastModifier(m *model.Modifier) *CommissionUpdateOne {
	cuo.mutation.SetLastModifier(m)
	return cuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (cuo *CommissionUpdateOne) ClearLastModifier() *CommissionUpdateOne {
	cuo.mutation.ClearLastModifier()
	return cuo
}

// SetRemark sets the "remark" field.
func (cuo *CommissionUpdateOne) SetRemark(s string) *CommissionUpdateOne {
	cuo.mutation.SetRemark(s)
	return cuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableRemark(s *string) *CommissionUpdateOne {
	if s != nil {
		cuo.SetRemark(*s)
	}
	return cuo
}

// ClearRemark clears the value of the "remark" field.
func (cuo *CommissionUpdateOne) ClearRemark() *CommissionUpdateOne {
	cuo.mutation.ClearRemark()
	return cuo
}

// SetBusinessID sets the "business_id" field.
func (cuo *CommissionUpdateOne) SetBusinessID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetBusinessID(u)
	return cuo
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableBusinessID(u *uint64) *CommissionUpdateOne {
	if u != nil {
		cuo.SetBusinessID(*u)
	}
	return cuo
}

// ClearBusinessID clears the value of the "business_id" field.
func (cuo *CommissionUpdateOne) ClearBusinessID() *CommissionUpdateOne {
	cuo.mutation.ClearBusinessID()
	return cuo
}

// SetSubscribeID sets the "subscribe_id" field.
func (cuo *CommissionUpdateOne) SetSubscribeID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetSubscribeID(u)
	return cuo
}

// SetNillableSubscribeID sets the "subscribe_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableSubscribeID(u *uint64) *CommissionUpdateOne {
	if u != nil {
		cuo.SetSubscribeID(*u)
	}
	return cuo
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (cuo *CommissionUpdateOne) ClearSubscribeID() *CommissionUpdateOne {
	cuo.mutation.ClearSubscribeID()
	return cuo
}

// SetPlanID sets the "plan_id" field.
func (cuo *CommissionUpdateOne) SetPlanID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetPlanID(u)
	return cuo
}

// SetNillablePlanID sets the "plan_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillablePlanID(u *uint64) *CommissionUpdateOne {
	if u != nil {
		cuo.SetPlanID(*u)
	}
	return cuo
}

// ClearPlanID clears the value of the "plan_id" field.
func (cuo *CommissionUpdateOne) ClearPlanID() *CommissionUpdateOne {
	cuo.mutation.ClearPlanID()
	return cuo
}

// SetRiderID sets the "rider_id" field.
func (cuo *CommissionUpdateOne) SetRiderID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetRiderID(u)
	return cuo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableRiderID(u *uint64) *CommissionUpdateOne {
	if u != nil {
		cuo.SetRiderID(*u)
	}
	return cuo
}

// ClearRiderID clears the value of the "rider_id" field.
func (cuo *CommissionUpdateOne) ClearRiderID() *CommissionUpdateOne {
	cuo.mutation.ClearRiderID()
	return cuo
}

// SetOrderID sets the "order_id" field.
func (cuo *CommissionUpdateOne) SetOrderID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetOrderID(u)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CommissionUpdateOne) SetStatus(u uint8) *CommissionUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(u)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableStatus(u *uint8) *CommissionUpdateOne {
	if u != nil {
		cuo.SetStatus(*u)
	}
	return cuo
}

// AddStatus adds u to the "status" field.
func (cuo *CommissionUpdateOne) AddStatus(u int8) *CommissionUpdateOne {
	cuo.mutation.AddStatus(u)
	return cuo
}

// SetEmployeeID sets the "employee_id" field.
func (cuo *CommissionUpdateOne) SetEmployeeID(u uint64) *CommissionUpdateOne {
	cuo.mutation.SetEmployeeID(u)
	return cuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (cuo *CommissionUpdateOne) SetNillableEmployeeID(u *uint64) *CommissionUpdateOne {
	if u != nil {
		cuo.SetEmployeeID(*u)
	}
	return cuo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (cuo *CommissionUpdateOne) ClearEmployeeID() *CommissionUpdateOne {
	cuo.mutation.ClearEmployeeID()
	return cuo
}

// SetBusiness sets the "business" edge to the Business entity.
func (cuo *CommissionUpdateOne) SetBusiness(b *Business) *CommissionUpdateOne {
	return cuo.SetBusinessID(b.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (cuo *CommissionUpdateOne) SetSubscribe(s *Subscribe) *CommissionUpdateOne {
	return cuo.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (cuo *CommissionUpdateOne) SetPlan(p *Plan) *CommissionUpdateOne {
	return cuo.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (cuo *CommissionUpdateOne) SetRider(r *Rider) *CommissionUpdateOne {
	return cuo.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (cuo *CommissionUpdateOne) SetOrder(o *Order) *CommissionUpdateOne {
	return cuo.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (cuo *CommissionUpdateOne) SetEmployee(e *Employee) *CommissionUpdateOne {
	return cuo.SetEmployeeID(e.ID)
}

// Mutation returns the CommissionMutation object of the builder.
func (cuo *CommissionUpdateOne) Mutation() *CommissionMutation {
	return cuo.mutation
}

// ClearBusiness clears the "business" edge to the Business entity.
func (cuo *CommissionUpdateOne) ClearBusiness() *CommissionUpdateOne {
	cuo.mutation.ClearBusiness()
	return cuo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (cuo *CommissionUpdateOne) ClearSubscribe() *CommissionUpdateOne {
	cuo.mutation.ClearSubscribe()
	return cuo
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (cuo *CommissionUpdateOne) ClearPlan() *CommissionUpdateOne {
	cuo.mutation.ClearPlan()
	return cuo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (cuo *CommissionUpdateOne) ClearRider() *CommissionUpdateOne {
	cuo.mutation.ClearRider()
	return cuo
}

// ClearOrder clears the "order" edge to the Order entity.
func (cuo *CommissionUpdateOne) ClearOrder() *CommissionUpdateOne {
	cuo.mutation.ClearOrder()
	return cuo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (cuo *CommissionUpdateOne) ClearEmployee() *CommissionUpdateOne {
	cuo.mutation.ClearEmployee()
	return cuo
}

// Where appends a list predicates to the CommissionUpdate builder.
func (cuo *CommissionUpdateOne) Where(ps ...predicate.Commission) *CommissionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommissionUpdateOne) Select(field string, fields ...string) *CommissionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Commission entity.
func (cuo *CommissionUpdateOne) Save(ctx context.Context) (*Commission, error) {
	if err := cuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*Commission, CommissionMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommissionUpdateOne) SaveX(ctx context.Context) *Commission {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommissionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommissionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommissionUpdateOne) defaults() error {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		if commission.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized commission.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := commission.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CommissionUpdateOne) check() error {
	if _, ok := cuo.mutation.OrderID(); cuo.mutation.OrderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Commission.order"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CommissionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CommissionUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CommissionUpdateOne) sqlSave(ctx context.Context) (_node *Commission, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commission.Table, commission.Columns, sqlgraph.NewFieldSpec(commission.FieldID, field.TypeUint64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Commission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commission.FieldID)
		for _, f := range fields {
			if !commission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(commission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.SetField(commission.FieldDeletedAt, field.TypeTime, value)
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.ClearField(commission.FieldDeletedAt, field.TypeTime)
	}
	if cuo.mutation.CreatorCleared() {
		_spec.ClearField(commission.FieldCreator, field.TypeJSON)
	}
	if value, ok := cuo.mutation.LastModifier(); ok {
		_spec.SetField(commission.FieldLastModifier, field.TypeJSON, value)
	}
	if cuo.mutation.LastModifierCleared() {
		_spec.ClearField(commission.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Remark(); ok {
		_spec.SetField(commission.FieldRemark, field.TypeString, value)
	}
	if cuo.mutation.RemarkCleared() {
		_spec.ClearField(commission.FieldRemark, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(commission.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(commission.FieldStatus, field.TypeUint8, value)
	}
	if cuo.mutation.BusinessCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BusinessIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.BusinessTable,
			Columns: []string{commission.BusinessColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: business.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.SubscribeTable,
			Columns: []string{commission.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PlanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.PlanTable,
			Columns: []string{commission.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: plan.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   commission.RiderTable,
			Columns: []string{commission.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   commission.OrderTable,
			Columns: []string{commission.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commission.EmployeeTable,
			Columns: []string{commission.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Commission{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
