// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/branchcontract"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// BranchContractDelete is the builder for deleting a BranchContract entity.
type BranchContractDelete struct {
	config
	hooks    []Hook
	mutation *BranchContractMutation
}

// Where appends a list predicates to the BranchContractDelete builder.
func (bcd *BranchContractDelete) Where(ps ...predicate.BranchContract) *BranchContractDelete {
	bcd.mutation.Where(ps...)
	return bcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bcd *BranchContractDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, BranchContractMutation](ctx, bcd.sqlExec, bcd.mutation, bcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bcd *BranchContractDelete) ExecX(ctx context.Context) int {
	n, err := bcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bcd *BranchContractDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(branchcontract.Table, sqlgraph.NewFieldSpec(branchcontract.FieldID, field.TypeUint64))
	if ps := bcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bcd.mutation.done = true
	return affected, err
}

// BranchContractDeleteOne is the builder for deleting a single BranchContract entity.
type BranchContractDeleteOne struct {
	bcd *BranchContractDelete
}

// Where appends a list predicates to the BranchContractDelete builder.
func (bcdo *BranchContractDeleteOne) Where(ps ...predicate.BranchContract) *BranchContractDeleteOne {
	bcdo.bcd.mutation.Where(ps...)
	return bcdo
}

// Exec executes the deletion query.
func (bcdo *BranchContractDeleteOne) Exec(ctx context.Context) error {
	n, err := bcdo.bcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{branchcontract.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bcdo *BranchContractDeleteOne) ExecX(ctx context.Context) {
	if err := bcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
