// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/promotionlevel"
)

// PromotionLevel is the model entity for the PromotionLevel schema.
type PromotionLevel struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// 会员等级
	Level uint64 `json:"level,omitempty"`
	// 所需成长值
	GrowthValue uint64 `json:"growth_value,omitempty"`
	// 会员权益佣金比例
	CommissionRatio float64 `json:"commission_ratio,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PromotionLevel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case promotionlevel.FieldCreator, promotionlevel.FieldLastModifier:
			values[i] = new([]byte)
		case promotionlevel.FieldCommissionRatio:
			values[i] = new(sql.NullFloat64)
		case promotionlevel.FieldID, promotionlevel.FieldLevel, promotionlevel.FieldGrowthValue:
			values[i] = new(sql.NullInt64)
		case promotionlevel.FieldRemark:
			values[i] = new(sql.NullString)
		case promotionlevel.FieldCreatedAt, promotionlevel.FieldUpdatedAt, promotionlevel.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PromotionLevel fields.
func (pl *PromotionLevel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case promotionlevel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = uint64(value.Int64)
		case promotionlevel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pl.CreatedAt = value.Time
			}
		case promotionlevel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pl.UpdatedAt = value.Time
			}
		case promotionlevel.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				pl.DeletedAt = new(time.Time)
				*pl.DeletedAt = value.Time
			}
		case promotionlevel.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case promotionlevel.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pl.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case promotionlevel.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				pl.Remark = value.String
			}
		case promotionlevel.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				pl.Level = uint64(value.Int64)
			}
		case promotionlevel.FieldGrowthValue:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field growth_value", values[i])
			} else if value.Valid {
				pl.GrowthValue = uint64(value.Int64)
			}
		case promotionlevel.FieldCommissionRatio:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field commission_ratio", values[i])
			} else if value.Valid {
				pl.CommissionRatio = value.Float64
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PromotionLevel.
// This includes values selected through modifiers, order, etc.
func (pl *PromotionLevel) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// Update returns a builder for updating this PromotionLevel.
// Note that you need to call PromotionLevel.Unwrap() before calling this method if this PromotionLevel
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *PromotionLevel) Update() *PromotionLevelUpdateOne {
	return NewPromotionLevelClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the PromotionLevel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *PromotionLevel) Unwrap() *PromotionLevel {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: PromotionLevel is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *PromotionLevel) String() string {
	var builder strings.Builder
	builder.WriteString("PromotionLevel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pl.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(fmt.Sprintf("%v", pl.Creator))
	builder.WriteString(", ")
	builder.WriteString("last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", pl.LastModifier))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(pl.Remark)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", pl.Level))
	builder.WriteString(", ")
	builder.WriteString("growth_value=")
	builder.WriteString(fmt.Sprintf("%v", pl.GrowthValue))
	builder.WriteString(", ")
	builder.WriteString("commission_ratio=")
	builder.WriteString(fmt.Sprintf("%v", pl.CommissionRatio))
	builder.WriteByte(')')
	return builder.String()
}

// PromotionLevels is a parsable slice of PromotionLevel.
type PromotionLevels []*PromotionLevel
