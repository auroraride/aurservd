// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/promotionmember"
	"github.com/auroraride/aurservd/internal/ent/promotionreferrals"
)

// PromotionReferralsUpdate is the builder for updating PromotionReferrals entities.
type PromotionReferralsUpdate struct {
	config
	hooks     []Hook
	mutation  *PromotionReferralsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PromotionReferralsUpdate builder.
func (pru *PromotionReferralsUpdate) Where(ps ...predicate.PromotionReferrals) *PromotionReferralsUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PromotionReferralsUpdate) SetUpdatedAt(t time.Time) *PromotionReferralsUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetDeletedAt sets the "deleted_at" field.
func (pru *PromotionReferralsUpdate) SetDeletedAt(t time.Time) *PromotionReferralsUpdate {
	pru.mutation.SetDeletedAt(t)
	return pru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableDeletedAt(t *time.Time) *PromotionReferralsUpdate {
	if t != nil {
		pru.SetDeletedAt(*t)
	}
	return pru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pru *PromotionReferralsUpdate) ClearDeletedAt() *PromotionReferralsUpdate {
	pru.mutation.ClearDeletedAt()
	return pru
}

// SetLastModifier sets the "last_modifier" field.
func (pru *PromotionReferralsUpdate) SetLastModifier(m *model.Modifier) *PromotionReferralsUpdate {
	pru.mutation.SetLastModifier(m)
	return pru
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pru *PromotionReferralsUpdate) ClearLastModifier() *PromotionReferralsUpdate {
	pru.mutation.ClearLastModifier()
	return pru
}

// SetRemark sets the "remark" field.
func (pru *PromotionReferralsUpdate) SetRemark(s string) *PromotionReferralsUpdate {
	pru.mutation.SetRemark(s)
	return pru
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableRemark(s *string) *PromotionReferralsUpdate {
	if s != nil {
		pru.SetRemark(*s)
	}
	return pru
}

// ClearRemark clears the value of the "remark" field.
func (pru *PromotionReferralsUpdate) ClearRemark() *PromotionReferralsUpdate {
	pru.mutation.ClearRemark()
	return pru
}

// SetReferringMemberID sets the "referring_member_id" field.
func (pru *PromotionReferralsUpdate) SetReferringMemberID(u uint64) *PromotionReferralsUpdate {
	pru.mutation.SetReferringMemberID(u)
	return pru
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableReferringMemberID(u *uint64) *PromotionReferralsUpdate {
	if u != nil {
		pru.SetReferringMemberID(*u)
	}
	return pru
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (pru *PromotionReferralsUpdate) ClearReferringMemberID() *PromotionReferralsUpdate {
	pru.mutation.ClearReferringMemberID()
	return pru
}

// SetReferredMemberID sets the "referred_member_id" field.
func (pru *PromotionReferralsUpdate) SetReferredMemberID(u uint64) *PromotionReferralsUpdate {
	pru.mutation.SetReferredMemberID(u)
	return pru
}

// SetNillableReferredMemberID sets the "referred_member_id" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableReferredMemberID(u *uint64) *PromotionReferralsUpdate {
	if u != nil {
		pru.SetReferredMemberID(*u)
	}
	return pru
}

// ClearReferredMemberID clears the value of the "referred_member_id" field.
func (pru *PromotionReferralsUpdate) ClearReferredMemberID() *PromotionReferralsUpdate {
	pru.mutation.ClearReferredMemberID()
	return pru
}

// SetRiderID sets the "rider_id" field.
func (pru *PromotionReferralsUpdate) SetRiderID(u uint64) *PromotionReferralsUpdate {
	pru.mutation.ResetRiderID()
	pru.mutation.SetRiderID(u)
	return pru
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableRiderID(u *uint64) *PromotionReferralsUpdate {
	if u != nil {
		pru.SetRiderID(*u)
	}
	return pru
}

// AddRiderID adds u to the "rider_id" field.
func (pru *PromotionReferralsUpdate) AddRiderID(u int64) *PromotionReferralsUpdate {
	pru.mutation.AddRiderID(u)
	return pru
}

// ClearRiderID clears the value of the "rider_id" field.
func (pru *PromotionReferralsUpdate) ClearRiderID() *PromotionReferralsUpdate {
	pru.mutation.ClearRiderID()
	return pru
}

// SetParentID sets the "parent_id" field.
func (pru *PromotionReferralsUpdate) SetParentID(u uint64) *PromotionReferralsUpdate {
	pru.mutation.SetParentID(u)
	return pru
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pru *PromotionReferralsUpdate) SetNillableParentID(u *uint64) *PromotionReferralsUpdate {
	if u != nil {
		pru.SetParentID(*u)
	}
	return pru
}

// ClearParentID clears the value of the "parent_id" field.
func (pru *PromotionReferralsUpdate) ClearParentID() *PromotionReferralsUpdate {
	pru.mutation.ClearParentID()
	return pru
}

// SetReferringMember sets the "referring_member" edge to the PromotionMember entity.
func (pru *PromotionReferralsUpdate) SetReferringMember(p *PromotionMember) *PromotionReferralsUpdate {
	return pru.SetReferringMemberID(p.ID)
}

// SetReferredMember sets the "referred_member" edge to the PromotionMember entity.
func (pru *PromotionReferralsUpdate) SetReferredMember(p *PromotionMember) *PromotionReferralsUpdate {
	return pru.SetReferredMemberID(p.ID)
}

// SetParent sets the "parent" edge to the PromotionReferrals entity.
func (pru *PromotionReferralsUpdate) SetParent(p *PromotionReferrals) *PromotionReferralsUpdate {
	return pru.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PromotionReferrals entity by IDs.
func (pru *PromotionReferralsUpdate) AddChildIDs(ids ...uint64) *PromotionReferralsUpdate {
	pru.mutation.AddChildIDs(ids...)
	return pru
}

// AddChildren adds the "children" edges to the PromotionReferrals entity.
func (pru *PromotionReferralsUpdate) AddChildren(p ...*PromotionReferrals) *PromotionReferralsUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.AddChildIDs(ids...)
}

// Mutation returns the PromotionReferralsMutation object of the builder.
func (pru *PromotionReferralsUpdate) Mutation() *PromotionReferralsMutation {
	return pru.mutation
}

// ClearReferringMember clears the "referring_member" edge to the PromotionMember entity.
func (pru *PromotionReferralsUpdate) ClearReferringMember() *PromotionReferralsUpdate {
	pru.mutation.ClearReferringMember()
	return pru
}

// ClearReferredMember clears the "referred_member" edge to the PromotionMember entity.
func (pru *PromotionReferralsUpdate) ClearReferredMember() *PromotionReferralsUpdate {
	pru.mutation.ClearReferredMember()
	return pru
}

// ClearParent clears the "parent" edge to the PromotionReferrals entity.
func (pru *PromotionReferralsUpdate) ClearParent() *PromotionReferralsUpdate {
	pru.mutation.ClearParent()
	return pru
}

// ClearChildren clears all "children" edges to the PromotionReferrals entity.
func (pru *PromotionReferralsUpdate) ClearChildren() *PromotionReferralsUpdate {
	pru.mutation.ClearChildren()
	return pru
}

// RemoveChildIDs removes the "children" edge to PromotionReferrals entities by IDs.
func (pru *PromotionReferralsUpdate) RemoveChildIDs(ids ...uint64) *PromotionReferralsUpdate {
	pru.mutation.RemoveChildIDs(ids...)
	return pru
}

// RemoveChildren removes "children" edges to PromotionReferrals entities.
func (pru *PromotionReferralsUpdate) RemoveChildren(p ...*PromotionReferrals) *PromotionReferralsUpdate {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pru.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PromotionReferralsUpdate) Save(ctx context.Context) (int, error) {
	if err := pru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PromotionReferralsUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PromotionReferralsUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PromotionReferralsUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PromotionReferralsUpdate) defaults() error {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		if promotionreferrals.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferrals.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferrals.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pru *PromotionReferralsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionReferralsUpdate {
	pru.modifiers = append(pru.modifiers, modifiers...)
	return pru
}

func (pru *PromotionReferralsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionreferrals.Table, promotionreferrals.Columns, sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferrals.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.DeletedAt(); ok {
		_spec.SetField(promotionreferrals.FieldDeletedAt, field.TypeTime, value)
	}
	if pru.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionreferrals.FieldDeletedAt, field.TypeTime)
	}
	if pru.mutation.CreatorCleared() {
		_spec.ClearField(promotionreferrals.FieldCreator, field.TypeJSON)
	}
	if value, ok := pru.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferrals.FieldLastModifier, field.TypeJSON, value)
	}
	if pru.mutation.LastModifierCleared() {
		_spec.ClearField(promotionreferrals.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pru.mutation.Remark(); ok {
		_spec.SetField(promotionreferrals.FieldRemark, field.TypeString, value)
	}
	if pru.mutation.RemarkCleared() {
		_spec.ClearField(promotionreferrals.FieldRemark, field.TypeString)
	}
	if value, ok := pru.mutation.RiderID(); ok {
		_spec.SetField(promotionreferrals.FieldRiderID, field.TypeUint64, value)
	}
	if value, ok := pru.mutation.AddedRiderID(); ok {
		_spec.AddField(promotionreferrals.FieldRiderID, field.TypeUint64, value)
	}
	if pru.mutation.RiderIDCleared() {
		_spec.ClearField(promotionreferrals.FieldRiderID, field.TypeUint64)
	}
	if pru.mutation.ReferringMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ReferringMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ReferredMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ReferredMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pru.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionreferrals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PromotionReferralsUpdateOne is the builder for updating a single PromotionReferrals entity.
type PromotionReferralsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PromotionReferralsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PromotionReferralsUpdateOne) SetUpdatedAt(t time.Time) *PromotionReferralsUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetDeletedAt sets the "deleted_at" field.
func (pruo *PromotionReferralsUpdateOne) SetDeletedAt(t time.Time) *PromotionReferralsUpdateOne {
	pruo.mutation.SetDeletedAt(t)
	return pruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableDeletedAt(t *time.Time) *PromotionReferralsUpdateOne {
	if t != nil {
		pruo.SetDeletedAt(*t)
	}
	return pruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pruo *PromotionReferralsUpdateOne) ClearDeletedAt() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearDeletedAt()
	return pruo
}

// SetLastModifier sets the "last_modifier" field.
func (pruo *PromotionReferralsUpdateOne) SetLastModifier(m *model.Modifier) *PromotionReferralsUpdateOne {
	pruo.mutation.SetLastModifier(m)
	return pruo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (pruo *PromotionReferralsUpdateOne) ClearLastModifier() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearLastModifier()
	return pruo
}

// SetRemark sets the "remark" field.
func (pruo *PromotionReferralsUpdateOne) SetRemark(s string) *PromotionReferralsUpdateOne {
	pruo.mutation.SetRemark(s)
	return pruo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableRemark(s *string) *PromotionReferralsUpdateOne {
	if s != nil {
		pruo.SetRemark(*s)
	}
	return pruo
}

// ClearRemark clears the value of the "remark" field.
func (pruo *PromotionReferralsUpdateOne) ClearRemark() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearRemark()
	return pruo
}

// SetReferringMemberID sets the "referring_member_id" field.
func (pruo *PromotionReferralsUpdateOne) SetReferringMemberID(u uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.SetReferringMemberID(u)
	return pruo
}

// SetNillableReferringMemberID sets the "referring_member_id" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableReferringMemberID(u *uint64) *PromotionReferralsUpdateOne {
	if u != nil {
		pruo.SetReferringMemberID(*u)
	}
	return pruo
}

// ClearReferringMemberID clears the value of the "referring_member_id" field.
func (pruo *PromotionReferralsUpdateOne) ClearReferringMemberID() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearReferringMemberID()
	return pruo
}

// SetReferredMemberID sets the "referred_member_id" field.
func (pruo *PromotionReferralsUpdateOne) SetReferredMemberID(u uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.SetReferredMemberID(u)
	return pruo
}

// SetNillableReferredMemberID sets the "referred_member_id" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableReferredMemberID(u *uint64) *PromotionReferralsUpdateOne {
	if u != nil {
		pruo.SetReferredMemberID(*u)
	}
	return pruo
}

// ClearReferredMemberID clears the value of the "referred_member_id" field.
func (pruo *PromotionReferralsUpdateOne) ClearReferredMemberID() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearReferredMemberID()
	return pruo
}

// SetRiderID sets the "rider_id" field.
func (pruo *PromotionReferralsUpdateOne) SetRiderID(u uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.ResetRiderID()
	pruo.mutation.SetRiderID(u)
	return pruo
}

// SetNillableRiderID sets the "rider_id" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableRiderID(u *uint64) *PromotionReferralsUpdateOne {
	if u != nil {
		pruo.SetRiderID(*u)
	}
	return pruo
}

// AddRiderID adds u to the "rider_id" field.
func (pruo *PromotionReferralsUpdateOne) AddRiderID(u int64) *PromotionReferralsUpdateOne {
	pruo.mutation.AddRiderID(u)
	return pruo
}

// ClearRiderID clears the value of the "rider_id" field.
func (pruo *PromotionReferralsUpdateOne) ClearRiderID() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearRiderID()
	return pruo
}

// SetParentID sets the "parent_id" field.
func (pruo *PromotionReferralsUpdateOne) SetParentID(u uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.SetParentID(u)
	return pruo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pruo *PromotionReferralsUpdateOne) SetNillableParentID(u *uint64) *PromotionReferralsUpdateOne {
	if u != nil {
		pruo.SetParentID(*u)
	}
	return pruo
}

// ClearParentID clears the value of the "parent_id" field.
func (pruo *PromotionReferralsUpdateOne) ClearParentID() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearParentID()
	return pruo
}

// SetReferringMember sets the "referring_member" edge to the PromotionMember entity.
func (pruo *PromotionReferralsUpdateOne) SetReferringMember(p *PromotionMember) *PromotionReferralsUpdateOne {
	return pruo.SetReferringMemberID(p.ID)
}

// SetReferredMember sets the "referred_member" edge to the PromotionMember entity.
func (pruo *PromotionReferralsUpdateOne) SetReferredMember(p *PromotionMember) *PromotionReferralsUpdateOne {
	return pruo.SetReferredMemberID(p.ID)
}

// SetParent sets the "parent" edge to the PromotionReferrals entity.
func (pruo *PromotionReferralsUpdateOne) SetParent(p *PromotionReferrals) *PromotionReferralsUpdateOne {
	return pruo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PromotionReferrals entity by IDs.
func (pruo *PromotionReferralsUpdateOne) AddChildIDs(ids ...uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.AddChildIDs(ids...)
	return pruo
}

// AddChildren adds the "children" edges to the PromotionReferrals entity.
func (pruo *PromotionReferralsUpdateOne) AddChildren(p ...*PromotionReferrals) *PromotionReferralsUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.AddChildIDs(ids...)
}

// Mutation returns the PromotionReferralsMutation object of the builder.
func (pruo *PromotionReferralsUpdateOne) Mutation() *PromotionReferralsMutation {
	return pruo.mutation
}

// ClearReferringMember clears the "referring_member" edge to the PromotionMember entity.
func (pruo *PromotionReferralsUpdateOne) ClearReferringMember() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearReferringMember()
	return pruo
}

// ClearReferredMember clears the "referred_member" edge to the PromotionMember entity.
func (pruo *PromotionReferralsUpdateOne) ClearReferredMember() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearReferredMember()
	return pruo
}

// ClearParent clears the "parent" edge to the PromotionReferrals entity.
func (pruo *PromotionReferralsUpdateOne) ClearParent() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearParent()
	return pruo
}

// ClearChildren clears all "children" edges to the PromotionReferrals entity.
func (pruo *PromotionReferralsUpdateOne) ClearChildren() *PromotionReferralsUpdateOne {
	pruo.mutation.ClearChildren()
	return pruo
}

// RemoveChildIDs removes the "children" edge to PromotionReferrals entities by IDs.
func (pruo *PromotionReferralsUpdateOne) RemoveChildIDs(ids ...uint64) *PromotionReferralsUpdateOne {
	pruo.mutation.RemoveChildIDs(ids...)
	return pruo
}

// RemoveChildren removes "children" edges to PromotionReferrals entities.
func (pruo *PromotionReferralsUpdateOne) RemoveChildren(p ...*PromotionReferrals) *PromotionReferralsUpdateOne {
	ids := make([]uint64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pruo.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the PromotionReferralsUpdate builder.
func (pruo *PromotionReferralsUpdateOne) Where(ps ...predicate.PromotionReferrals) *PromotionReferralsUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PromotionReferralsUpdateOne) Select(field string, fields ...string) *PromotionReferralsUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PromotionReferrals entity.
func (pruo *PromotionReferralsUpdateOne) Save(ctx context.Context) (*PromotionReferrals, error) {
	if err := pruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PromotionReferralsUpdateOne) SaveX(ctx context.Context) *PromotionReferrals {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PromotionReferralsUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PromotionReferralsUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PromotionReferralsUpdateOne) defaults() error {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		if promotionreferrals.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized promotionreferrals.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := promotionreferrals.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pruo *PromotionReferralsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PromotionReferralsUpdateOne {
	pruo.modifiers = append(pruo.modifiers, modifiers...)
	return pruo
}

func (pruo *PromotionReferralsUpdateOne) sqlSave(ctx context.Context) (_node *PromotionReferrals, err error) {
	_spec := sqlgraph.NewUpdateSpec(promotionreferrals.Table, promotionreferrals.Columns, sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PromotionReferrals.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, promotionreferrals.FieldID)
		for _, f := range fields {
			if !promotionreferrals.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != promotionreferrals.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(promotionreferrals.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.DeletedAt(); ok {
		_spec.SetField(promotionreferrals.FieldDeletedAt, field.TypeTime, value)
	}
	if pruo.mutation.DeletedAtCleared() {
		_spec.ClearField(promotionreferrals.FieldDeletedAt, field.TypeTime)
	}
	if pruo.mutation.CreatorCleared() {
		_spec.ClearField(promotionreferrals.FieldCreator, field.TypeJSON)
	}
	if value, ok := pruo.mutation.LastModifier(); ok {
		_spec.SetField(promotionreferrals.FieldLastModifier, field.TypeJSON, value)
	}
	if pruo.mutation.LastModifierCleared() {
		_spec.ClearField(promotionreferrals.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := pruo.mutation.Remark(); ok {
		_spec.SetField(promotionreferrals.FieldRemark, field.TypeString, value)
	}
	if pruo.mutation.RemarkCleared() {
		_spec.ClearField(promotionreferrals.FieldRemark, field.TypeString)
	}
	if value, ok := pruo.mutation.RiderID(); ok {
		_spec.SetField(promotionreferrals.FieldRiderID, field.TypeUint64, value)
	}
	if value, ok := pruo.mutation.AddedRiderID(); ok {
		_spec.AddField(promotionreferrals.FieldRiderID, field.TypeUint64, value)
	}
	if pruo.mutation.RiderIDCleared() {
		_spec.ClearField(promotionreferrals.FieldRiderID, field.TypeUint64)
	}
	if pruo.mutation.ReferringMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ReferringMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ReferringMemberTable,
			Columns: []string{promotionreferrals.ReferringMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ReferredMemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ReferredMemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   promotionreferrals.ReferredMemberTable,
			Columns: []string{promotionreferrals.ReferredMemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionmember.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   promotionreferrals.ParentTable,
			Columns: []string{promotionreferrals.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pruo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   promotionreferrals.ChildrenTable,
			Columns: []string{promotionreferrals.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(promotionreferrals.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pruo.modifiers...)
	_node = &PromotionReferrals{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{promotionreferrals.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
