// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BatteryModelColumns holds the columns for the "battery_model" table.
	BatteryModelColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "voltage", Type: field.TypeString},
		{Name: "capacity", Type: field.TypeString},
	}
	// BatteryModelTable holds the schema information for the "battery_model" table.
	BatteryModelTable = &schema.Table{
		Name:       "battery_model",
		Columns:    BatteryModelColumns,
		PrimaryKey: []*schema.Column{BatteryModelColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "batterymodel_created_at",
				Unique:  false,
				Columns: []*schema.Column{BatteryModelColumns[1]},
			},
			{
				Name:    "batterymodel_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{BatteryModelColumns[3]},
			},
			{
				Name:    "batterymodel_voltage_capacity",
				Unique:  false,
				Columns: []*schema.Column{BatteryModelColumns[7], BatteryModelColumns[8]},
			},
		},
	}
	// BranchColumns holds the columns for the "branch" table.
	BranchColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
		{Name: "lng", Type: field.TypeFloat64},
		{Name: "lat", Type: field.TypeFloat64},
		{Name: "address", Type: field.TypeString},
		{Name: "photos", Type: field.TypeJSON},
		{Name: "city_id", Type: field.TypeUint64},
	}
	// BranchTable holds the schema information for the "branch" table.
	BranchTable = &schema.Table{
		Name:       "branch",
		Columns:    BranchColumns,
		PrimaryKey: []*schema.Column{BranchColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "branch_city_branches",
				Columns:    []*schema.Column{BranchColumns[12]},
				RefColumns: []*schema.Column{CityColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "branch_created_at",
				Unique:  false,
				Columns: []*schema.Column{BranchColumns[1]},
			},
			{
				Name:    "branch_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{BranchColumns[3]},
			},
			{
				Name:    "branch_city_id",
				Unique:  false,
				Columns: []*schema.Column{BranchColumns[12]},
			},
			{
				Name:    "branch_lng_lat",
				Unique:  false,
				Columns: []*schema.Column{BranchColumns[8], BranchColumns[9]},
			},
		},
	}
	// BranchContractColumns holds the columns for the "branch_contract" table.
	BranchContractColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "landlord_name", Type: field.TypeString},
		{Name: "id_card_number", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "bank_number", Type: field.TypeString},
		{Name: "pledge", Type: field.TypeFloat64},
		{Name: "rent", Type: field.TypeFloat64},
		{Name: "lease", Type: field.TypeUint},
		{Name: "electricity_pledge", Type: field.TypeFloat64},
		{Name: "electricity", Type: field.TypeFloat64},
		{Name: "area", Type: field.TypeFloat64},
		{Name: "start_time", Type: field.TypeString},
		{Name: "end_time", Type: field.TypeString},
		{Name: "file", Type: field.TypeString},
		{Name: "sheets", Type: field.TypeJSON},
		{Name: "branch_id", Type: field.TypeUint64},
	}
	// BranchContractTable holds the schema information for the "branch_contract" table.
	BranchContractTable = &schema.Table{
		Name:       "branch_contract",
		Columns:    BranchContractColumns,
		PrimaryKey: []*schema.Column{BranchContractColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "branch_contract_branch_contracts",
				Columns:    []*schema.Column{BranchContractColumns[21]},
				RefColumns: []*schema.Column{BranchColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "branchcontract_created_at",
				Unique:  false,
				Columns: []*schema.Column{BranchContractColumns[1]},
			},
			{
				Name:    "branchcontract_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{BranchContractColumns[3]},
			},
		},
	}
	// CabinetColumns holds the columns for the "cabinet" table.
	CabinetColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "sn", Type: field.TypeString, Unique: true},
		{Name: "brand", Type: field.TypeString},
		{Name: "serial", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "doors", Type: field.TypeUint},
		{Name: "status", Type: field.TypeUint},
		{Name: "models", Type: field.TypeJSON},
		{Name: "health", Type: field.TypeUint, Default: 0},
		{Name: "bin", Type: field.TypeJSON, Nullable: true},
		{Name: "battery_num", Type: field.TypeUint, Default: 0},
		{Name: "battery_full_num", Type: field.TypeUint, Default: 0},
		{Name: "branch_id", Type: field.TypeUint64, Nullable: true},
	}
	// CabinetTable holds the schema information for the "cabinet" table.
	CabinetTable = &schema.Table{
		Name:       "cabinet",
		Columns:    CabinetColumns,
		PrimaryKey: []*schema.Column{CabinetColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cabinet_branch_cabinets",
				Columns:    []*schema.Column{CabinetColumns[18]},
				RefColumns: []*schema.Column{BranchColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "cabinet_created_at",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[1]},
			},
			{
				Name:    "cabinet_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[3]},
			},
			{
				Name:    "cabinet_branch_id",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[18]},
			},
			{
				Name:    "cabinet_brand",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[8]},
			},
			{
				Name:    "cabinet_serial",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[9]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
			{
				Name:    "cabinet_name",
				Unique:  false,
				Columns: []*schema.Column{CabinetColumns[10]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// CabinetFaultColumns holds the columns for the "cabinet_fault" table.
	CabinetFaultColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeUint8, Default: 0},
		{Name: "fault", Type: field.TypeString, Nullable: true},
		{Name: "attachments", Type: field.TypeJSON, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "branch_id", Type: field.TypeUint64},
		{Name: "cabinet_id", Type: field.TypeUint64},
		{Name: "city_id", Type: field.TypeUint64},
		{Name: "rider_id", Type: field.TypeUint64},
	}
	// CabinetFaultTable holds the schema information for the "cabinet_fault" table.
	CabinetFaultTable = &schema.Table{
		Name:       "cabinet_fault",
		Columns:    CabinetFaultColumns,
		PrimaryKey: []*schema.Column{CabinetFaultColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cabinet_fault_branch_faults",
				Columns:    []*schema.Column{CabinetFaultColumns[11]},
				RefColumns: []*schema.Column{BranchColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "cabinet_fault_cabinet_faults",
				Columns:    []*schema.Column{CabinetFaultColumns[12]},
				RefColumns: []*schema.Column{CabinetColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "cabinet_fault_city_faults",
				Columns:    []*schema.Column{CabinetFaultColumns[13]},
				RefColumns: []*schema.Column{CityColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "cabinet_fault_rider_faults",
				Columns:    []*schema.Column{CabinetFaultColumns[14]},
				RefColumns: []*schema.Column{RiderColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "cabinetfault_created_at",
				Unique:  false,
				Columns: []*schema.Column{CabinetFaultColumns[1]},
			},
			{
				Name:    "cabinetfault_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{CabinetFaultColumns[3]},
			},
			{
				Name:    "cabinetfault_status",
				Unique:  false,
				Columns: []*schema.Column{CabinetFaultColumns[7]},
			},
		},
	}
	// CityColumns holds the columns for the "city" table.
	CityColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "open", Type: field.TypeBool, Nullable: true},
		{Name: "name", Type: field.TypeString, Size: 100},
		{Name: "code", Type: field.TypeString, Size: 10},
		{Name: "parent_id", Type: field.TypeUint64, Nullable: true},
	}
	// CityTable holds the schema information for the "city" table.
	CityTable = &schema.Table{
		Name:       "city",
		Columns:    CityColumns,
		PrimaryKey: []*schema.Column{CityColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "city_city_children",
				Columns:    []*schema.Column{CityColumns[9]},
				RefColumns: []*schema.Column{CityColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "city_created_at",
				Unique:  false,
				Columns: []*schema.Column{CityColumns[1]},
			},
			{
				Name:    "city_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{CityColumns[3]},
			},
			{
				Name:    "city_open",
				Unique:  false,
				Columns: []*schema.Column{CityColumns[6]},
			},
			{
				Name:    "city_parent_id",
				Unique:  false,
				Columns: []*schema.Column{CityColumns[9]},
			},
		},
	}
	// ContractColumns holds the columns for the "contract" table.
	ContractColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeUint8, Default: 0},
		{Name: "flow_id", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "sn", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "files", Type: field.TypeJSON, Nullable: true},
		{Name: "rider_id", Type: field.TypeUint64},
	}
	// ContractTable holds the schema information for the "contract" table.
	ContractTable = &schema.Table{
		Name:       "contract",
		Columns:    ContractColumns,
		PrimaryKey: []*schema.Column{ContractColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contract_rider_contract",
				Columns:    []*schema.Column{ContractColumns[10]},
				RefColumns: []*schema.Column{RiderColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "contract_created_at",
				Unique:  false,
				Columns: []*schema.Column{ContractColumns[1]},
			},
			{
				Name:    "contract_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ContractColumns[3]},
			},
		},
	}
	// EnterpriseColumns holds the columns for the "enterprise" table.
	EnterpriseColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString},
	}
	// EnterpriseTable holds the schema information for the "enterprise" table.
	EnterpriseTable = &schema.Table{
		Name:       "enterprise",
		Columns:    EnterpriseColumns,
		PrimaryKey: []*schema.Column{EnterpriseColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "enterprise_created_at",
				Unique:  false,
				Columns: []*schema.Column{EnterpriseColumns[1]},
			},
			{
				Name:    "enterprise_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{EnterpriseColumns[3]},
			},
			{
				Name:    "enterprise_name",
				Unique:  false,
				Columns: []*schema.Column{EnterpriseColumns[7]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// ManagerColumns holds the columns for the "manager" table.
	ManagerColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Unique: true, Size: 30},
		{Name: "name", Type: field.TypeString, Size: 30},
		{Name: "password", Type: field.TypeString},
		{Name: "last_signin_at", Type: field.TypeTime, Nullable: true},
	}
	// ManagerTable holds the schema information for the "manager" table.
	ManagerTable = &schema.Table{
		Name:       "manager",
		Columns:    ManagerColumns,
		PrimaryKey: []*schema.Column{ManagerColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "manager_created_at",
				Unique:  false,
				Columns: []*schema.Column{ManagerColumns[1]},
			},
			{
				Name:    "manager_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ManagerColumns[3]},
			},
			{
				Name:    "manager_phone",
				Unique:  false,
				Columns: []*schema.Column{ManagerColumns[6]},
			},
		},
	}
	// PersonColumns holds the columns for the "person" table.
	PersonColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeUint8, Default: 0},
		{Name: "block", Type: field.TypeBool, Default: false},
		{Name: "name", Type: field.TypeString, Size: 40},
		{Name: "id_card_number", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "id_card_type", Type: field.TypeUint8, Default: 1},
		{Name: "id_card_portrait", Type: field.TypeString},
		{Name: "id_card_national", Type: field.TypeString},
		{Name: "auth_face", Type: field.TypeString},
		{Name: "auth_result", Type: field.TypeJSON, Nullable: true},
		{Name: "auth_at", Type: field.TypeTime, Nullable: true},
	}
	// PersonTable holds the schema information for the "person" table.
	PersonTable = &schema.Table{
		Name:       "person",
		Columns:    PersonColumns,
		PrimaryKey: []*schema.Column{PersonColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "person_created_at",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[1]},
			},
			{
				Name:    "person_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[3]},
			},
			{
				Name:    "person_status",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[6]},
			},
			{
				Name:    "person_name",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// PlanColumns holds the columns for the "plan" table.
	PlanColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator", Type: field.TypeJSON, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "enable", Type: field.TypeBool},
		{Name: "name", Type: field.TypeString},
		{Name: "start", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "end", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "days", Type: field.TypeUint},
		{Name: "commission", Type: field.TypeFloat64},
	}
	// PlanTable holds the schema information for the "plan" table.
	PlanTable = &schema.Table{
		Name:       "plan",
		Columns:    PlanColumns,
		PrimaryKey: []*schema.Column{PlanColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "plan_created_at",
				Unique:  false,
				Columns: []*schema.Column{PlanColumns[1]},
			},
			{
				Name:    "plan_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{PlanColumns[3]},
			},
			{
				Name:    "plan_enable",
				Unique:  false,
				Columns: []*schema.Column{PlanColumns[7]},
			},
			{
				Name:    "plan_start_end",
				Unique:  false,
				Columns: []*schema.Column{PlanColumns[9], PlanColumns[10]},
			},
			{
				Name:    "plan_name",
				Unique:  false,
				Columns: []*schema.Column{PlanColumns[8]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// RiderColumns holds the columns for the "rider" table.
	RiderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modifier", Type: field.TypeJSON, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "phone", Type: field.TypeString, Unique: true, Size: 11},
		{Name: "contact", Type: field.TypeJSON, Nullable: true},
		{Name: "device_type", Type: field.TypeUint8},
		{Name: "last_device", Type: field.TypeString, Unique: true, Size: 60},
		{Name: "is_new_device", Type: field.TypeBool, Default: false},
		{Name: "last_face", Type: field.TypeString, Nullable: true},
		{Name: "push_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 60},
		{Name: "last_signin_at", Type: field.TypeTime, Nullable: true},
		{Name: "esign_account_id", Type: field.TypeString, Nullable: true},
		{Name: "plan_at", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "date"}},
		{Name: "city_id", Type: field.TypeUint64, Nullable: true},
		{Name: "enterprise_id", Type: field.TypeUint64, Nullable: true},
		{Name: "person_id", Type: field.TypeUint64, Nullable: true},
	}
	// RiderTable holds the schema information for the "rider" table.
	RiderTable = &schema.Table{
		Name:       "rider",
		Columns:    RiderColumns,
		PrimaryKey: []*schema.Column{RiderColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rider_city_riders",
				Columns:    []*schema.Column{RiderColumns[16]},
				RefColumns: []*schema.Column{CityColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "rider_enterprise_riders",
				Columns:    []*schema.Column{RiderColumns[17]},
				RefColumns: []*schema.Column{EnterpriseColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "rider_person_rider",
				Columns:    []*schema.Column{RiderColumns[18]},
				RefColumns: []*schema.Column{PersonColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "rider_created_at",
				Unique:  false,
				Columns: []*schema.Column{RiderColumns[1]},
			},
			{
				Name:    "rider_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{RiderColumns[3]},
			},
			{
				Name:    "rider_phone",
				Unique:  false,
				Columns: []*schema.Column{RiderColumns[6]},
				Annotation: &entsql.IndexAnnotation{
					Types: map[string]string{
						"postgres": "GIN",
					},
				},
			},
		},
	}
	// SettingColumns holds the columns for the "setting" table.
	SettingColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "key", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "val", Type: field.TypeJSON},
	}
	// SettingTable holds the schema information for the "setting" table.
	SettingTable = &schema.Table{
		Name:       "setting",
		Columns:    SettingColumns,
		PrimaryKey: []*schema.Column{SettingColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "setting_created_at",
				Unique:  false,
				Columns: []*schema.Column{SettingColumns[1]},
			},
		},
	}
	// CabinetBmsColumns holds the columns for the "cabinet_bms" table.
	CabinetBmsColumns = []*schema.Column{
		{Name: "cabinet_id", Type: field.TypeInt},
		{Name: "battery_model_id", Type: field.TypeInt},
	}
	// CabinetBmsTable holds the schema information for the "cabinet_bms" table.
	CabinetBmsTable = &schema.Table{
		Name:       "cabinet_bms",
		Columns:    CabinetBmsColumns,
		PrimaryKey: []*schema.Column{CabinetBmsColumns[0], CabinetBmsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cabinet_bms_cabinet_id",
				Columns:    []*schema.Column{CabinetBmsColumns[0]},
				RefColumns: []*schema.Column{CabinetColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "cabinet_bms_battery_model_id",
				Columns:    []*schema.Column{CabinetBmsColumns[1]},
				RefColumns: []*schema.Column{BatteryModelColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanPmsColumns holds the columns for the "plan_pms" table.
	PlanPmsColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeInt},
		{Name: "battery_model_id", Type: field.TypeInt},
	}
	// PlanPmsTable holds the schema information for the "plan_pms" table.
	PlanPmsTable = &schema.Table{
		Name:       "plan_pms",
		Columns:    PlanPmsColumns,
		PrimaryKey: []*schema.Column{PlanPmsColumns[0], PlanPmsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_pms_plan_id",
				Columns:    []*schema.Column{PlanPmsColumns[0]},
				RefColumns: []*schema.Column{PlanColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_pms_battery_model_id",
				Columns:    []*schema.Column{PlanPmsColumns[1]},
				RefColumns: []*schema.Column{BatteryModelColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PlanCitiesColumns holds the columns for the "plan_cities" table.
	PlanCitiesColumns = []*schema.Column{
		{Name: "plan_id", Type: field.TypeInt},
		{Name: "city_id", Type: field.TypeUint64},
	}
	// PlanCitiesTable holds the schema information for the "plan_cities" table.
	PlanCitiesTable = &schema.Table{
		Name:       "plan_cities",
		Columns:    PlanCitiesColumns,
		PrimaryKey: []*schema.Column{PlanCitiesColumns[0], PlanCitiesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "plan_cities_plan_id",
				Columns:    []*schema.Column{PlanCitiesColumns[0]},
				RefColumns: []*schema.Column{PlanColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "plan_cities_city_id",
				Columns:    []*schema.Column{PlanCitiesColumns[1]},
				RefColumns: []*schema.Column{CityColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BatteryModelTable,
		BranchTable,
		BranchContractTable,
		CabinetTable,
		CabinetFaultTable,
		CityTable,
		ContractTable,
		EnterpriseTable,
		ManagerTable,
		PersonTable,
		PlanTable,
		RiderTable,
		SettingTable,
		CabinetBmsTable,
		PlanPmsTable,
		PlanCitiesTable,
	}
)

func init() {
	BatteryModelTable.Annotation = &entsql.Annotation{
		Table: "battery_model",
	}
	BranchTable.ForeignKeys[0].RefTable = CityTable
	BranchTable.Annotation = &entsql.Annotation{
		Table: "branch",
	}
	BranchContractTable.ForeignKeys[0].RefTable = BranchTable
	BranchContractTable.Annotation = &entsql.Annotation{
		Table: "branch_contract",
	}
	CabinetTable.ForeignKeys[0].RefTable = BranchTable
	CabinetTable.Annotation = &entsql.Annotation{
		Table: "cabinet",
	}
	CabinetFaultTable.ForeignKeys[0].RefTable = BranchTable
	CabinetFaultTable.ForeignKeys[1].RefTable = CabinetTable
	CabinetFaultTable.ForeignKeys[2].RefTable = CityTable
	CabinetFaultTable.ForeignKeys[3].RefTable = RiderTable
	CabinetFaultTable.Annotation = &entsql.Annotation{
		Table: "cabinet_fault",
	}
	CityTable.ForeignKeys[0].RefTable = CityTable
	CityTable.Annotation = &entsql.Annotation{
		Table: "city",
	}
	ContractTable.ForeignKeys[0].RefTable = RiderTable
	ContractTable.Annotation = &entsql.Annotation{
		Table: "contract",
	}
	EnterpriseTable.Annotation = &entsql.Annotation{
		Table: "enterprise",
	}
	ManagerTable.Annotation = &entsql.Annotation{
		Table: "manager",
	}
	PersonTable.Annotation = &entsql.Annotation{
		Table: "person",
	}
	PlanTable.Annotation = &entsql.Annotation{
		Table: "plan",
	}
	RiderTable.ForeignKeys[0].RefTable = CityTable
	RiderTable.ForeignKeys[1].RefTable = EnterpriseTable
	RiderTable.ForeignKeys[2].RefTable = PersonTable
	RiderTable.Annotation = &entsql.Annotation{
		Table: "rider",
	}
	SettingTable.Annotation = &entsql.Annotation{
		Table: "setting",
	}
	CabinetBmsTable.ForeignKeys[0].RefTable = CabinetTable
	CabinetBmsTable.ForeignKeys[1].RefTable = BatteryModelTable
	PlanPmsTable.ForeignKeys[0].RefTable = PlanTable
	PlanPmsTable.ForeignKeys[1].RefTable = BatteryModelTable
	PlanCitiesTable.ForeignKeys[0].RefTable = PlanTable
	PlanCitiesTable.ForeignKeys[1].RefTable = CityTable
}
