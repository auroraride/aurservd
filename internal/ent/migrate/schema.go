// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ContractColumns holds the columns for the "contract" table.
	ContractColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modify", Type: field.TypeTime, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeUint8, Default: 0},
		{Name: "flow_id", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "sn", Type: field.TypeString, Unique: true, Size: 20},
		{Name: "files", Type: field.TypeJSON, Nullable: true},
		{Name: "rider_id", Type: field.TypeUint64, Nullable: true},
	}
	// ContractTable holds the schema information for the "contract" table.
	ContractTable = &schema.Table{
		Name:       "contract",
		Columns:    ContractColumns,
		PrimaryKey: []*schema.Column{ContractColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contract_rider_contract",
				Columns:    []*schema.Column{ContractColumns[10]},
				RefColumns: []*schema.Column{RiderColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "contract_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{ContractColumns[3]},
			},
		},
	}
	// PersonColumns holds the columns for the "person" table.
	PersonColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modify", Type: field.TypeTime, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeUint8, Default: 0},
		{Name: "block", Type: field.TypeBool, Default: false},
		{Name: "name", Type: field.TypeString, Size: 40},
		{Name: "id_card_number", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "id_card_type", Type: field.TypeUint8, Default: 1},
		{Name: "id_card_portrait", Type: field.TypeString},
		{Name: "id_card_national", Type: field.TypeString},
		{Name: "auth_face", Type: field.TypeString},
		{Name: "auth_result", Type: field.TypeJSON, Nullable: true},
		{Name: "auth_at", Type: field.TypeTime, Nullable: true},
	}
	// PersonTable holds the schema information for the "person" table.
	PersonTable = &schema.Table{
		Name:       "person",
		Columns:    PersonColumns,
		PrimaryKey: []*schema.Column{PersonColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "person_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[3]},
			},
			{
				Name:    "person_status",
				Unique:  false,
				Columns: []*schema.Column{PersonColumns[6]},
			},
		},
	}
	// RiderColumns holds the columns for the "rider" table.
	RiderColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "last_modify", Type: field.TypeTime, Nullable: true},
		{Name: "remark", Type: field.TypeString, Nullable: true},
		{Name: "group_id", Type: field.TypeUint64, Nullable: true},
		{Name: "phone", Type: field.TypeString, Unique: true, Size: 11},
		{Name: "contact", Type: field.TypeJSON, Nullable: true},
		{Name: "device_type", Type: field.TypeUint8},
		{Name: "last_device", Type: field.TypeString, Unique: true, Size: 60},
		{Name: "is_new_device", Type: field.TypeBool, Default: false},
		{Name: "last_face", Type: field.TypeString, Nullable: true},
		{Name: "push_id", Type: field.TypeString, Unique: true, Nullable: true, Size: 60},
		{Name: "last_signin_at", Type: field.TypeTime, Nullable: true},
		{Name: "esign_account_id", Type: field.TypeString, Nullable: true},
		{Name: "person_id", Type: field.TypeUint64, Nullable: true},
	}
	// RiderTable holds the schema information for the "rider" table.
	RiderTable = &schema.Table{
		Name:       "rider",
		Columns:    RiderColumns,
		PrimaryKey: []*schema.Column{RiderColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rider_person_rider",
				Columns:    []*schema.Column{RiderColumns[16]},
				RefColumns: []*schema.Column{PersonColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "rider_deleted_at",
				Unique:  false,
				Columns: []*schema.Column{RiderColumns[3]},
			},
		},
	}
	// SettingColumns holds the columns for the "setting" table.
	SettingColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "key", Type: field.TypeString, Unique: true, Size: 40},
		{Name: "val", Type: field.TypeJSON},
	}
	// SettingTable holds the schema information for the "setting" table.
	SettingTable = &schema.Table{
		Name:       "setting",
		Columns:    SettingColumns,
		PrimaryKey: []*schema.Column{SettingColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ContractTable,
		PersonTable,
		RiderTable,
		SettingTable,
	}
)

func init() {
	ContractTable.ForeignKeys[0].RefTable = RiderTable
	ContractTable.Annotation = &entsql.Annotation{
		Table: "contract",
	}
	PersonTable.Annotation = &entsql.Annotation{
		Table: "person",
	}
	RiderTable.ForeignKeys[0].RefTable = PersonTable
	RiderTable.Annotation = &entsql.Annotation{
		Table: "rider",
	}
	SettingTable.Annotation = &entsql.Annotation{
		Table: "setting",
	}
}
