// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/riderbelongs"
)

// RiderBelongsUpdate is the builder for updating RiderBelongs entities.
type RiderBelongsUpdate struct {
	config
	hooks     []Hook
	mutation  *RiderBelongsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiderBelongsUpdate builder.
func (rbu *RiderBelongsUpdate) Where(ps ...predicate.RiderBelongs) *RiderBelongsUpdate {
	rbu.mutation.Where(ps...)
	return rbu
}

// SetUpdatedAt sets the "updated_at" field.
func (rbu *RiderBelongsUpdate) SetUpdatedAt(t time.Time) *RiderBelongsUpdate {
	rbu.mutation.SetUpdatedAt(t)
	return rbu
}

// SetDeletedAt sets the "deleted_at" field.
func (rbu *RiderBelongsUpdate) SetDeletedAt(t time.Time) *RiderBelongsUpdate {
	rbu.mutation.SetDeletedAt(t)
	return rbu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rbu *RiderBelongsUpdate) SetNillableDeletedAt(t *time.Time) *RiderBelongsUpdate {
	if t != nil {
		rbu.SetDeletedAt(*t)
	}
	return rbu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rbu *RiderBelongsUpdate) ClearDeletedAt() *RiderBelongsUpdate {
	rbu.mutation.ClearDeletedAt()
	return rbu
}

// SetLastModifier sets the "last_modifier" field.
func (rbu *RiderBelongsUpdate) SetLastModifier(m *model.Modifier) *RiderBelongsUpdate {
	rbu.mutation.SetLastModifier(m)
	return rbu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (rbu *RiderBelongsUpdate) ClearLastModifier() *RiderBelongsUpdate {
	rbu.mutation.ClearLastModifier()
	return rbu
}

// SetRemark sets the "remark" field.
func (rbu *RiderBelongsUpdate) SetRemark(s string) *RiderBelongsUpdate {
	rbu.mutation.SetRemark(s)
	return rbu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rbu *RiderBelongsUpdate) SetNillableRemark(s *string) *RiderBelongsUpdate {
	if s != nil {
		rbu.SetRemark(*s)
	}
	return rbu
}

// ClearRemark clears the value of the "remark" field.
func (rbu *RiderBelongsUpdate) ClearRemark() *RiderBelongsUpdate {
	rbu.mutation.ClearRemark()
	return rbu
}

// Mutation returns the RiderBelongsMutation object of the builder.
func (rbu *RiderBelongsUpdate) Mutation() *RiderBelongsMutation {
	return rbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rbu *RiderBelongsUpdate) Save(ctx context.Context) (int, error) {
	if err := rbu.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, RiderBelongsMutation](ctx, rbu.sqlSave, rbu.mutation, rbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rbu *RiderBelongsUpdate) SaveX(ctx context.Context) int {
	affected, err := rbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rbu *RiderBelongsUpdate) Exec(ctx context.Context) error {
	_, err := rbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbu *RiderBelongsUpdate) ExecX(ctx context.Context) {
	if err := rbu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbu *RiderBelongsUpdate) defaults() error {
	if _, ok := rbu.mutation.UpdatedAt(); !ok {
		if riderbelongs.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderbelongs.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := riderbelongs.UpdateDefaultUpdatedAt()
		rbu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rbu *RiderBelongsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiderBelongsUpdate {
	rbu.modifiers = append(rbu.modifiers, modifiers...)
	return rbu
}

func (rbu *RiderBelongsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(riderbelongs.Table, riderbelongs.Columns, sqlgraph.NewFieldSpec(riderbelongs.FieldID, field.TypeUint64))
	if ps := rbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbu.mutation.UpdatedAt(); ok {
		_spec.SetField(riderbelongs.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rbu.mutation.DeletedAt(); ok {
		_spec.SetField(riderbelongs.FieldDeletedAt, field.TypeTime, value)
	}
	if rbu.mutation.DeletedAtCleared() {
		_spec.ClearField(riderbelongs.FieldDeletedAt, field.TypeTime)
	}
	if rbu.mutation.CreatorCleared() {
		_spec.ClearField(riderbelongs.FieldCreator, field.TypeJSON)
	}
	if value, ok := rbu.mutation.LastModifier(); ok {
		_spec.SetField(riderbelongs.FieldLastModifier, field.TypeJSON, value)
	}
	if rbu.mutation.LastModifierCleared() {
		_spec.ClearField(riderbelongs.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := rbu.mutation.Remark(); ok {
		_spec.SetField(riderbelongs.FieldRemark, field.TypeString, value)
	}
	if rbu.mutation.RemarkCleared() {
		_spec.ClearField(riderbelongs.FieldRemark, field.TypeString)
	}
	_spec.AddModifiers(rbu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderbelongs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rbu.mutation.done = true
	return n, nil
}

// RiderBelongsUpdateOne is the builder for updating a single RiderBelongs entity.
type RiderBelongsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiderBelongsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (rbuo *RiderBelongsUpdateOne) SetUpdatedAt(t time.Time) *RiderBelongsUpdateOne {
	rbuo.mutation.SetUpdatedAt(t)
	return rbuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rbuo *RiderBelongsUpdateOne) SetDeletedAt(t time.Time) *RiderBelongsUpdateOne {
	rbuo.mutation.SetDeletedAt(t)
	return rbuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rbuo *RiderBelongsUpdateOne) SetNillableDeletedAt(t *time.Time) *RiderBelongsUpdateOne {
	if t != nil {
		rbuo.SetDeletedAt(*t)
	}
	return rbuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rbuo *RiderBelongsUpdateOne) ClearDeletedAt() *RiderBelongsUpdateOne {
	rbuo.mutation.ClearDeletedAt()
	return rbuo
}

// SetLastModifier sets the "last_modifier" field.
func (rbuo *RiderBelongsUpdateOne) SetLastModifier(m *model.Modifier) *RiderBelongsUpdateOne {
	rbuo.mutation.SetLastModifier(m)
	return rbuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (rbuo *RiderBelongsUpdateOne) ClearLastModifier() *RiderBelongsUpdateOne {
	rbuo.mutation.ClearLastModifier()
	return rbuo
}

// SetRemark sets the "remark" field.
func (rbuo *RiderBelongsUpdateOne) SetRemark(s string) *RiderBelongsUpdateOne {
	rbuo.mutation.SetRemark(s)
	return rbuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (rbuo *RiderBelongsUpdateOne) SetNillableRemark(s *string) *RiderBelongsUpdateOne {
	if s != nil {
		rbuo.SetRemark(*s)
	}
	return rbuo
}

// ClearRemark clears the value of the "remark" field.
func (rbuo *RiderBelongsUpdateOne) ClearRemark() *RiderBelongsUpdateOne {
	rbuo.mutation.ClearRemark()
	return rbuo
}

// Mutation returns the RiderBelongsMutation object of the builder.
func (rbuo *RiderBelongsUpdateOne) Mutation() *RiderBelongsMutation {
	return rbuo.mutation
}

// Where appends a list predicates to the RiderBelongsUpdate builder.
func (rbuo *RiderBelongsUpdateOne) Where(ps ...predicate.RiderBelongs) *RiderBelongsUpdateOne {
	rbuo.mutation.Where(ps...)
	return rbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rbuo *RiderBelongsUpdateOne) Select(field string, fields ...string) *RiderBelongsUpdateOne {
	rbuo.fields = append([]string{field}, fields...)
	return rbuo
}

// Save executes the query and returns the updated RiderBelongs entity.
func (rbuo *RiderBelongsUpdateOne) Save(ctx context.Context) (*RiderBelongs, error) {
	if err := rbuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*RiderBelongs, RiderBelongsMutation](ctx, rbuo.sqlSave, rbuo.mutation, rbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rbuo *RiderBelongsUpdateOne) SaveX(ctx context.Context) *RiderBelongs {
	node, err := rbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rbuo *RiderBelongsUpdateOne) Exec(ctx context.Context) error {
	_, err := rbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rbuo *RiderBelongsUpdateOne) ExecX(ctx context.Context) {
	if err := rbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rbuo *RiderBelongsUpdateOne) defaults() error {
	if _, ok := rbuo.mutation.UpdatedAt(); !ok {
		if riderbelongs.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized riderbelongs.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := riderbelongs.UpdateDefaultUpdatedAt()
		rbuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rbuo *RiderBelongsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiderBelongsUpdateOne {
	rbuo.modifiers = append(rbuo.modifiers, modifiers...)
	return rbuo
}

func (rbuo *RiderBelongsUpdateOne) sqlSave(ctx context.Context) (_node *RiderBelongs, err error) {
	_spec := sqlgraph.NewUpdateSpec(riderbelongs.Table, riderbelongs.Columns, sqlgraph.NewFieldSpec(riderbelongs.FieldID, field.TypeUint64))
	id, ok := rbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RiderBelongs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, riderbelongs.FieldID)
		for _, f := range fields {
			if !riderbelongs.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != riderbelongs.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rbuo.mutation.UpdatedAt(); ok {
		_spec.SetField(riderbelongs.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rbuo.mutation.DeletedAt(); ok {
		_spec.SetField(riderbelongs.FieldDeletedAt, field.TypeTime, value)
	}
	if rbuo.mutation.DeletedAtCleared() {
		_spec.ClearField(riderbelongs.FieldDeletedAt, field.TypeTime)
	}
	if rbuo.mutation.CreatorCleared() {
		_spec.ClearField(riderbelongs.FieldCreator, field.TypeJSON)
	}
	if value, ok := rbuo.mutation.LastModifier(); ok {
		_spec.SetField(riderbelongs.FieldLastModifier, field.TypeJSON, value)
	}
	if rbuo.mutation.LastModifierCleared() {
		_spec.ClearField(riderbelongs.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := rbuo.mutation.Remark(); ok {
		_spec.SetField(riderbelongs.FieldRemark, field.TypeString, value)
	}
	if rbuo.mutation.RemarkCleared() {
		_spec.ClearField(riderbelongs.FieldRemark, field.TypeString)
	}
	_spec.AddModifiers(rbuo.modifiers...)
	_node = &RiderBelongs{config: rbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{riderbelongs.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rbuo.mutation.done = true
	return _node, nil
}
