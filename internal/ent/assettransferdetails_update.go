// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/manager"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// AssetTransferDetailsUpdate is the builder for updating AssetTransferDetails entities.
type AssetTransferDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetTransferDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetTransferDetailsUpdate builder.
func (atdu *AssetTransferDetailsUpdate) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsUpdate {
	atdu.mutation.Where(ps...)
	return atdu
}

// SetUpdatedAt sets the "updated_at" field.
func (atdu *AssetTransferDetailsUpdate) SetUpdatedAt(t time.Time) *AssetTransferDetailsUpdate {
	atdu.mutation.SetUpdatedAt(t)
	return atdu
}

// SetDeletedAt sets the "deleted_at" field.
func (atdu *AssetTransferDetailsUpdate) SetDeletedAt(t time.Time) *AssetTransferDetailsUpdate {
	atdu.mutation.SetDeletedAt(t)
	return atdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableDeletedAt(t *time.Time) *AssetTransferDetailsUpdate {
	if t != nil {
		atdu.SetDeletedAt(*t)
	}
	return atdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atdu *AssetTransferDetailsUpdate) ClearDeletedAt() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearDeletedAt()
	return atdu
}

// SetLastModifier sets the "last_modifier" field.
func (atdu *AssetTransferDetailsUpdate) SetLastModifier(m *model.Modifier) *AssetTransferDetailsUpdate {
	atdu.mutation.SetLastModifier(m)
	return atdu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atdu *AssetTransferDetailsUpdate) ClearLastModifier() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearLastModifier()
	return atdu
}

// SetRemark sets the "remark" field.
func (atdu *AssetTransferDetailsUpdate) SetRemark(s string) *AssetTransferDetailsUpdate {
	atdu.mutation.SetRemark(s)
	return atdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableRemark(s *string) *AssetTransferDetailsUpdate {
	if s != nil {
		atdu.SetRemark(*s)
	}
	return atdu
}

// ClearRemark clears the value of the "remark" field.
func (atdu *AssetTransferDetailsUpdate) ClearRemark() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearRemark()
	return atdu
}

// SetSn sets the "sn" field.
func (atdu *AssetTransferDetailsUpdate) SetSn(s string) *AssetTransferDetailsUpdate {
	atdu.mutation.SetSn(s)
	return atdu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableSn(s *string) *AssetTransferDetailsUpdate {
	if s != nil {
		atdu.SetSn(*s)
	}
	return atdu
}

// ClearSn clears the value of the "sn" field.
func (atdu *AssetTransferDetailsUpdate) ClearSn() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearSn()
	return atdu
}

// SetTransferID sets the "transfer_id" field.
func (atdu *AssetTransferDetailsUpdate) SetTransferID(u uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetTransferID(u)
	return atdu
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableTransferID(u *uint64) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetTransferID(*u)
	}
	return atdu
}

// ClearTransferID clears the value of the "transfer_id" field.
func (atdu *AssetTransferDetailsUpdate) ClearTransferID() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearTransferID()
	return atdu
}

// SetIsIn sets the "is_in" field.
func (atdu *AssetTransferDetailsUpdate) SetIsIn(b bool) *AssetTransferDetailsUpdate {
	atdu.mutation.SetIsIn(b)
	return atdu
}

// SetNillableIsIn sets the "is_in" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableIsIn(b *bool) *AssetTransferDetailsUpdate {
	if b != nil {
		atdu.SetIsIn(*b)
	}
	return atdu
}

// SetInOperateID sets the "in_operate_id" field.
func (atdu *AssetTransferDetailsUpdate) SetInOperateID(u uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateID(u)
	return atdu
}

// SetNillableInOperateID sets the "in_operate_id" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateID(u *uint64) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetInOperateID(*u)
	}
	return atdu
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateID() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateID()
	return atdu
}

// SetInOperateType sets the "in_operate_type" field.
func (atdu *AssetTransferDetailsUpdate) SetInOperateType(u uint8) *AssetTransferDetailsUpdate {
	atdu.mutation.ResetInOperateType()
	atdu.mutation.SetInOperateType(u)
	return atdu
}

// SetNillableInOperateType sets the "in_operate_type" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateType(u *uint8) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetInOperateType(*u)
	}
	return atdu
}

// AddInOperateType adds u to the "in_operate_type" field.
func (atdu *AssetTransferDetailsUpdate) AddInOperateType(u int8) *AssetTransferDetailsUpdate {
	atdu.mutation.AddInOperateType(u)
	return atdu
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateType() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateType()
	return atdu
}

// SetInTimeAt sets the "in_time_at" field.
func (atdu *AssetTransferDetailsUpdate) SetInTimeAt(t time.Time) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInTimeAt(t)
	return atdu
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInTimeAt(t *time.Time) *AssetTransferDetailsUpdate {
	if t != nil {
		atdu.SetInTimeAt(*t)
	}
	return atdu
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atdu *AssetTransferDetailsUpdate) ClearInTimeAt() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInTimeAt()
	return atdu
}

// SetAssetID sets the "asset_id" field.
func (atdu *AssetTransferDetailsUpdate) SetAssetID(u uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetAssetID(u)
	return atdu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableAssetID(u *uint64) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetAssetID(*u)
	}
	return atdu
}

// ClearAssetID clears the value of the "asset_id" field.
func (atdu *AssetTransferDetailsUpdate) ClearAssetID() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearAssetID()
	return atdu
}

// SetTransfer sets the "transfer" edge to the AssetTransfer entity.
func (atdu *AssetTransferDetailsUpdate) SetTransfer(a *AssetTransfer) *AssetTransferDetailsUpdate {
	return atdu.SetTransferID(a.ID)
}

// SetInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateAssetManagerID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateAssetManagerID(id)
	return atdu
}

// SetNillableInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateAssetManagerID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateAssetManagerID(*id)
	}
	return atdu
}

// SetInOperateAssetManager sets the "in_operate_asset_manager" edge to the AssetManager entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateAssetManager(a *AssetManager) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateAssetManagerID(a.ID)
}

// SetInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateEmployeeID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateEmployeeID(id)
	return atdu
}

// SetNillableInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateEmployeeID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateEmployeeID(*id)
	}
	return atdu
}

// SetInOperateEmployee sets the "in_operate_employee" edge to the Employee entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateEmployee(e *Employee) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateEmployeeID(e.ID)
}

// SetInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateAgentID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateAgentID(id)
	return atdu
}

// SetNillableInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateAgentID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateAgentID(*id)
	}
	return atdu
}

// SetInOperateAgent sets the "in_operate_agent" edge to the Agent entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateAgent(a *Agent) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateAgentID(a.ID)
}

// SetInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateMaintainerID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateMaintainerID(id)
	return atdu
}

// SetNillableInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateMaintainerID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateMaintainerID(*id)
	}
	return atdu
}

// SetInOperateMaintainer sets the "in_operate_maintainer" edge to the Maintainer entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateMaintainer(m *Maintainer) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateMaintainerID(m.ID)
}

// SetInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateCabinetID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateCabinetID(id)
	return atdu
}

// SetNillableInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateCabinetID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateCabinetID(*id)
	}
	return atdu
}

// SetInOperateCabinet sets the "in_operate_cabinet" edge to the Cabinet entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateCabinet(c *Cabinet) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateCabinetID(c.ID)
}

// SetInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateRiderID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateRiderID(id)
	return atdu
}

// SetNillableInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateRiderID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateRiderID(*id)
	}
	return atdu
}

// SetInOperateRider sets the "in_operate_rider" edge to the Rider entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateRider(r *Rider) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateRiderID(r.ID)
}

// SetInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID.
func (atdu *AssetTransferDetailsUpdate) SetInOperateManagerID(id uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetInOperateManagerID(id)
	return atdu
}

// SetNillableInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableInOperateManagerID(id *uint64) *AssetTransferDetailsUpdate {
	if id != nil {
		atdu = atdu.SetInOperateManagerID(*id)
	}
	return atdu
}

// SetInOperateManager sets the "in_operate_manager" edge to the Manager entity.
func (atdu *AssetTransferDetailsUpdate) SetInOperateManager(m *Manager) *AssetTransferDetailsUpdate {
	return atdu.SetInOperateManagerID(m.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atdu *AssetTransferDetailsUpdate) SetAsset(a *Asset) *AssetTransferDetailsUpdate {
	return atdu.SetAssetID(a.ID)
}

// Mutation returns the AssetTransferDetailsMutation object of the builder.
func (atdu *AssetTransferDetailsUpdate) Mutation() *AssetTransferDetailsMutation {
	return atdu.mutation
}

// ClearTransfer clears the "transfer" edge to the AssetTransfer entity.
func (atdu *AssetTransferDetailsUpdate) ClearTransfer() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearTransfer()
	return atdu
}

// ClearInOperateAssetManager clears the "in_operate_asset_manager" edge to the AssetManager entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateAssetManager() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateAssetManager()
	return atdu
}

// ClearInOperateEmployee clears the "in_operate_employee" edge to the Employee entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateEmployee() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateEmployee()
	return atdu
}

// ClearInOperateAgent clears the "in_operate_agent" edge to the Agent entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateAgent() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateAgent()
	return atdu
}

// ClearInOperateMaintainer clears the "in_operate_maintainer" edge to the Maintainer entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateMaintainer() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateMaintainer()
	return atdu
}

// ClearInOperateCabinet clears the "in_operate_cabinet" edge to the Cabinet entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateCabinet() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateCabinet()
	return atdu
}

// ClearInOperateRider clears the "in_operate_rider" edge to the Rider entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateRider() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateRider()
	return atdu
}

// ClearInOperateManager clears the "in_operate_manager" edge to the Manager entity.
func (atdu *AssetTransferDetailsUpdate) ClearInOperateManager() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearInOperateManager()
	return atdu
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (atdu *AssetTransferDetailsUpdate) ClearAsset() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearAsset()
	return atdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atdu *AssetTransferDetailsUpdate) Save(ctx context.Context) (int, error) {
	if err := atdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atdu.sqlSave, atdu.mutation, atdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atdu *AssetTransferDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := atdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atdu *AssetTransferDetailsUpdate) Exec(ctx context.Context) error {
	_, err := atdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atdu *AssetTransferDetailsUpdate) ExecX(ctx context.Context) {
	if err := atdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atdu *AssetTransferDetailsUpdate) defaults() error {
	if _, ok := atdu.mutation.UpdatedAt(); !ok {
		if assettransferdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.UpdateDefaultUpdatedAt()
		atdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atdu *AssetTransferDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferDetailsUpdate {
	atdu.modifiers = append(atdu.modifiers, modifiers...)
	return atdu
}

func (atdu *AssetTransferDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransferdetails.Table, assettransferdetails.Columns, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	if ps := atdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atdu.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atdu.mutation.DeletedAt(); ok {
		_spec.SetField(assettransferdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if atdu.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransferdetails.FieldDeletedAt, field.TypeTime)
	}
	if atdu.mutation.CreatorCleared() {
		_spec.ClearField(assettransferdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := atdu.mutation.LastModifier(); ok {
		_spec.SetField(assettransferdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if atdu.mutation.LastModifierCleared() {
		_spec.ClearField(assettransferdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atdu.mutation.Remark(); ok {
		_spec.SetField(assettransferdetails.FieldRemark, field.TypeString, value)
	}
	if atdu.mutation.RemarkCleared() {
		_spec.ClearField(assettransferdetails.FieldRemark, field.TypeString)
	}
	if value, ok := atdu.mutation.Sn(); ok {
		_spec.SetField(assettransferdetails.FieldSn, field.TypeString, value)
	}
	if atdu.mutation.SnCleared() {
		_spec.ClearField(assettransferdetails.FieldSn, field.TypeString)
	}
	if value, ok := atdu.mutation.IsIn(); ok {
		_spec.SetField(assettransferdetails.FieldIsIn, field.TypeBool, value)
	}
	if value, ok := atdu.mutation.InOperateType(); ok {
		_spec.SetField(assettransferdetails.FieldInOperateType, field.TypeUint8, value)
	}
	if value, ok := atdu.mutation.AddedInOperateType(); ok {
		_spec.AddField(assettransferdetails.FieldInOperateType, field.TypeUint8, value)
	}
	if atdu.mutation.InOperateTypeCleared() {
		_spec.ClearField(assettransferdetails.FieldInOperateType, field.TypeUint8)
	}
	if value, ok := atdu.mutation.InTimeAt(); ok {
		_spec.SetField(assettransferdetails.FieldInTimeAt, field.TypeTime, value)
	}
	if atdu.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransferdetails.FieldInTimeAt, field.TypeTime)
	}
	if atdu.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateAssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAssetManagerTable,
			Columns: []string{assettransferdetails.InOperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateAssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAssetManagerTable,
			Columns: []string{assettransferdetails.InOperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateEmployeeTable,
			Columns: []string{assettransferdetails.InOperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateEmployeeTable,
			Columns: []string{assettransferdetails.InOperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAgentTable,
			Columns: []string{assettransferdetails.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAgentTable,
			Columns: []string{assettransferdetails.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateMaintainerTable,
			Columns: []string{assettransferdetails.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateMaintainerTable,
			Columns: []string{assettransferdetails.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateCabinetTable,
			Columns: []string{assettransferdetails.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateCabinetTable,
			Columns: []string{assettransferdetails.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateRiderTable,
			Columns: []string{assettransferdetails.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateRiderTable,
			Columns: []string{assettransferdetails.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.InOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateManagerTable,
			Columns: []string{assettransferdetails.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.InOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateManagerTable,
			Columns: []string{assettransferdetails.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atdu.mutation.done = true
	return n, nil
}

// AssetTransferDetailsUpdateOne is the builder for updating a single AssetTransferDetails entity.
type AssetTransferDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetTransferDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (atduo *AssetTransferDetailsUpdateOne) SetUpdatedAt(t time.Time) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetUpdatedAt(t)
	return atduo
}

// SetDeletedAt sets the "deleted_at" field.
func (atduo *AssetTransferDetailsUpdateOne) SetDeletedAt(t time.Time) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetDeletedAt(t)
	return atduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetTransferDetailsUpdateOne {
	if t != nil {
		atduo.SetDeletedAt(*t)
	}
	return atduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearDeletedAt() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearDeletedAt()
	return atduo
}

// SetLastModifier sets the "last_modifier" field.
func (atduo *AssetTransferDetailsUpdateOne) SetLastModifier(m *model.Modifier) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetLastModifier(m)
	return atduo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearLastModifier() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearLastModifier()
	return atduo
}

// SetRemark sets the "remark" field.
func (atduo *AssetTransferDetailsUpdateOne) SetRemark(s string) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetRemark(s)
	return atduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableRemark(s *string) *AssetTransferDetailsUpdateOne {
	if s != nil {
		atduo.SetRemark(*s)
	}
	return atduo
}

// ClearRemark clears the value of the "remark" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearRemark() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearRemark()
	return atduo
}

// SetSn sets the "sn" field.
func (atduo *AssetTransferDetailsUpdateOne) SetSn(s string) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetSn(s)
	return atduo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableSn(s *string) *AssetTransferDetailsUpdateOne {
	if s != nil {
		atduo.SetSn(*s)
	}
	return atduo
}

// ClearSn clears the value of the "sn" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearSn() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearSn()
	return atduo
}

// SetTransferID sets the "transfer_id" field.
func (atduo *AssetTransferDetailsUpdateOne) SetTransferID(u uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetTransferID(u)
	return atduo
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableTransferID(u *uint64) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetTransferID(*u)
	}
	return atduo
}

// ClearTransferID clears the value of the "transfer_id" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearTransferID() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearTransferID()
	return atduo
}

// SetIsIn sets the "is_in" field.
func (atduo *AssetTransferDetailsUpdateOne) SetIsIn(b bool) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetIsIn(b)
	return atduo
}

// SetNillableIsIn sets the "is_in" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableIsIn(b *bool) *AssetTransferDetailsUpdateOne {
	if b != nil {
		atduo.SetIsIn(*b)
	}
	return atduo
}

// SetInOperateID sets the "in_operate_id" field.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateID(u uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateID(u)
	return atduo
}

// SetNillableInOperateID sets the "in_operate_id" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateID(u *uint64) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetInOperateID(*u)
	}
	return atduo
}

// ClearInOperateID clears the value of the "in_operate_id" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateID() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateID()
	return atduo
}

// SetInOperateType sets the "in_operate_type" field.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateType(u uint8) *AssetTransferDetailsUpdateOne {
	atduo.mutation.ResetInOperateType()
	atduo.mutation.SetInOperateType(u)
	return atduo
}

// SetNillableInOperateType sets the "in_operate_type" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateType(u *uint8) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetInOperateType(*u)
	}
	return atduo
}

// AddInOperateType adds u to the "in_operate_type" field.
func (atduo *AssetTransferDetailsUpdateOne) AddInOperateType(u int8) *AssetTransferDetailsUpdateOne {
	atduo.mutation.AddInOperateType(u)
	return atduo
}

// ClearInOperateType clears the value of the "in_operate_type" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateType() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateType()
	return atduo
}

// SetInTimeAt sets the "in_time_at" field.
func (atduo *AssetTransferDetailsUpdateOne) SetInTimeAt(t time.Time) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInTimeAt(t)
	return atduo
}

// SetNillableInTimeAt sets the "in_time_at" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInTimeAt(t *time.Time) *AssetTransferDetailsUpdateOne {
	if t != nil {
		atduo.SetInTimeAt(*t)
	}
	return atduo
}

// ClearInTimeAt clears the value of the "in_time_at" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearInTimeAt() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInTimeAt()
	return atduo
}

// SetAssetID sets the "asset_id" field.
func (atduo *AssetTransferDetailsUpdateOne) SetAssetID(u uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetAssetID(u)
	return atduo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableAssetID(u *uint64) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetAssetID(*u)
	}
	return atduo
}

// ClearAssetID clears the value of the "asset_id" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearAssetID() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearAssetID()
	return atduo
}

// SetTransfer sets the "transfer" edge to the AssetTransfer entity.
func (atduo *AssetTransferDetailsUpdateOne) SetTransfer(a *AssetTransfer) *AssetTransferDetailsUpdateOne {
	return atduo.SetTransferID(a.ID)
}

// SetInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateAssetManagerID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateAssetManagerID(id)
	return atduo
}

// SetNillableInOperateAssetManagerID sets the "in_operate_asset_manager" edge to the AssetManager entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateAssetManagerID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateAssetManagerID(*id)
	}
	return atduo
}

// SetInOperateAssetManager sets the "in_operate_asset_manager" edge to the AssetManager entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateAssetManager(a *AssetManager) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateAssetManagerID(a.ID)
}

// SetInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateEmployeeID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateEmployeeID(id)
	return atduo
}

// SetNillableInOperateEmployeeID sets the "in_operate_employee" edge to the Employee entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateEmployeeID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateEmployeeID(*id)
	}
	return atduo
}

// SetInOperateEmployee sets the "in_operate_employee" edge to the Employee entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateEmployee(e *Employee) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateEmployeeID(e.ID)
}

// SetInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateAgentID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateAgentID(id)
	return atduo
}

// SetNillableInOperateAgentID sets the "in_operate_agent" edge to the Agent entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateAgentID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateAgentID(*id)
	}
	return atduo
}

// SetInOperateAgent sets the "in_operate_agent" edge to the Agent entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateAgent(a *Agent) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateAgentID(a.ID)
}

// SetInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateMaintainerID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateMaintainerID(id)
	return atduo
}

// SetNillableInOperateMaintainerID sets the "in_operate_maintainer" edge to the Maintainer entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateMaintainerID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateMaintainerID(*id)
	}
	return atduo
}

// SetInOperateMaintainer sets the "in_operate_maintainer" edge to the Maintainer entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateMaintainer(m *Maintainer) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateMaintainerID(m.ID)
}

// SetInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateCabinetID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateCabinetID(id)
	return atduo
}

// SetNillableInOperateCabinetID sets the "in_operate_cabinet" edge to the Cabinet entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateCabinetID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateCabinetID(*id)
	}
	return atduo
}

// SetInOperateCabinet sets the "in_operate_cabinet" edge to the Cabinet entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateCabinet(c *Cabinet) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateCabinetID(c.ID)
}

// SetInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateRiderID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateRiderID(id)
	return atduo
}

// SetNillableInOperateRiderID sets the "in_operate_rider" edge to the Rider entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateRiderID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateRiderID(*id)
	}
	return atduo
}

// SetInOperateRider sets the "in_operate_rider" edge to the Rider entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateRider(r *Rider) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateRiderID(r.ID)
}

// SetInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateManagerID(id uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetInOperateManagerID(id)
	return atduo
}

// SetNillableInOperateManagerID sets the "in_operate_manager" edge to the Manager entity by ID if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableInOperateManagerID(id *uint64) *AssetTransferDetailsUpdateOne {
	if id != nil {
		atduo = atduo.SetInOperateManagerID(*id)
	}
	return atduo
}

// SetInOperateManager sets the "in_operate_manager" edge to the Manager entity.
func (atduo *AssetTransferDetailsUpdateOne) SetInOperateManager(m *Manager) *AssetTransferDetailsUpdateOne {
	return atduo.SetInOperateManagerID(m.ID)
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atduo *AssetTransferDetailsUpdateOne) SetAsset(a *Asset) *AssetTransferDetailsUpdateOne {
	return atduo.SetAssetID(a.ID)
}

// Mutation returns the AssetTransferDetailsMutation object of the builder.
func (atduo *AssetTransferDetailsUpdateOne) Mutation() *AssetTransferDetailsMutation {
	return atduo.mutation
}

// ClearTransfer clears the "transfer" edge to the AssetTransfer entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearTransfer() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearTransfer()
	return atduo
}

// ClearInOperateAssetManager clears the "in_operate_asset_manager" edge to the AssetManager entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateAssetManager() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateAssetManager()
	return atduo
}

// ClearInOperateEmployee clears the "in_operate_employee" edge to the Employee entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateEmployee() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateEmployee()
	return atduo
}

// ClearInOperateAgent clears the "in_operate_agent" edge to the Agent entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateAgent() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateAgent()
	return atduo
}

// ClearInOperateMaintainer clears the "in_operate_maintainer" edge to the Maintainer entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateMaintainer() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateMaintainer()
	return atduo
}

// ClearInOperateCabinet clears the "in_operate_cabinet" edge to the Cabinet entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateCabinet() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateCabinet()
	return atduo
}

// ClearInOperateRider clears the "in_operate_rider" edge to the Rider entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateRider() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateRider()
	return atduo
}

// ClearInOperateManager clears the "in_operate_manager" edge to the Manager entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearInOperateManager() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearInOperateManager()
	return atduo
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearAsset() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearAsset()
	return atduo
}

// Where appends a list predicates to the AssetTransferDetailsUpdate builder.
func (atduo *AssetTransferDetailsUpdateOne) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsUpdateOne {
	atduo.mutation.Where(ps...)
	return atduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atduo *AssetTransferDetailsUpdateOne) Select(field string, fields ...string) *AssetTransferDetailsUpdateOne {
	atduo.fields = append([]string{field}, fields...)
	return atduo
}

// Save executes the query and returns the updated AssetTransferDetails entity.
func (atduo *AssetTransferDetailsUpdateOne) Save(ctx context.Context) (*AssetTransferDetails, error) {
	if err := atduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atduo.sqlSave, atduo.mutation, atduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atduo *AssetTransferDetailsUpdateOne) SaveX(ctx context.Context) *AssetTransferDetails {
	node, err := atduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atduo *AssetTransferDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := atduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atduo *AssetTransferDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := atduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atduo *AssetTransferDetailsUpdateOne) defaults() error {
	if _, ok := atduo.mutation.UpdatedAt(); !ok {
		if assettransferdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.UpdateDefaultUpdatedAt()
		atduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atduo *AssetTransferDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferDetailsUpdateOne {
	atduo.modifiers = append(atduo.modifiers, modifiers...)
	return atduo
}

func (atduo *AssetTransferDetailsUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransferDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransferdetails.Table, assettransferdetails.Columns, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	id, ok := atduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransferDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransferdetails.FieldID)
		for _, f := range fields {
			if !assettransferdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransferdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atduo.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atduo.mutation.DeletedAt(); ok {
		_spec.SetField(assettransferdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if atduo.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransferdetails.FieldDeletedAt, field.TypeTime)
	}
	if atduo.mutation.CreatorCleared() {
		_spec.ClearField(assettransferdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := atduo.mutation.LastModifier(); ok {
		_spec.SetField(assettransferdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if atduo.mutation.LastModifierCleared() {
		_spec.ClearField(assettransferdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atduo.mutation.Remark(); ok {
		_spec.SetField(assettransferdetails.FieldRemark, field.TypeString, value)
	}
	if atduo.mutation.RemarkCleared() {
		_spec.ClearField(assettransferdetails.FieldRemark, field.TypeString)
	}
	if value, ok := atduo.mutation.Sn(); ok {
		_spec.SetField(assettransferdetails.FieldSn, field.TypeString, value)
	}
	if atduo.mutation.SnCleared() {
		_spec.ClearField(assettransferdetails.FieldSn, field.TypeString)
	}
	if value, ok := atduo.mutation.IsIn(); ok {
		_spec.SetField(assettransferdetails.FieldIsIn, field.TypeBool, value)
	}
	if value, ok := atduo.mutation.InOperateType(); ok {
		_spec.SetField(assettransferdetails.FieldInOperateType, field.TypeUint8, value)
	}
	if value, ok := atduo.mutation.AddedInOperateType(); ok {
		_spec.AddField(assettransferdetails.FieldInOperateType, field.TypeUint8, value)
	}
	if atduo.mutation.InOperateTypeCleared() {
		_spec.ClearField(assettransferdetails.FieldInOperateType, field.TypeUint8)
	}
	if value, ok := atduo.mutation.InTimeAt(); ok {
		_spec.SetField(assettransferdetails.FieldInTimeAt, field.TypeTime, value)
	}
	if atduo.mutation.InTimeAtCleared() {
		_spec.ClearField(assettransferdetails.FieldInTimeAt, field.TypeTime)
	}
	if atduo.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateAssetManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAssetManagerTable,
			Columns: []string{assettransferdetails.InOperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateAssetManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAssetManagerTable,
			Columns: []string{assettransferdetails.InOperateAssetManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetmanager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateEmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateEmployeeTable,
			Columns: []string{assettransferdetails.InOperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateEmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateEmployeeTable,
			Columns: []string{assettransferdetails.InOperateEmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateAgentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAgentTable,
			Columns: []string{assettransferdetails.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateAgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateAgentTable,
			Columns: []string{assettransferdetails.InOperateAgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateMaintainerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateMaintainerTable,
			Columns: []string{assettransferdetails.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateMaintainerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateMaintainerTable,
			Columns: []string{assettransferdetails.InOperateMaintainerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(maintainer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateCabinetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateCabinetTable,
			Columns: []string{assettransferdetails.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateCabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateCabinetTable,
			Columns: []string{assettransferdetails.InOperateCabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cabinet.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateRiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateRiderTable,
			Columns: []string{assettransferdetails.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateRiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateRiderTable,
			Columns: []string{assettransferdetails.InOperateRiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.InOperateManagerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateManagerTable,
			Columns: []string{assettransferdetails.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.InOperateManagerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.InOperateManagerTable,
			Columns: []string{assettransferdetails.InOperateManagerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(manager.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atduo.modifiers...)
	_node = &AssetTransferDetails{config: atduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atduo.mutation.done = true
	return _node, nil
}
