// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AssetTransferDetailsUpdate is the builder for updating AssetTransferDetails entities.
type AssetTransferDetailsUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetTransferDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetTransferDetailsUpdate builder.
func (atdu *AssetTransferDetailsUpdate) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsUpdate {
	atdu.mutation.Where(ps...)
	return atdu
}

// SetUpdatedAt sets the "updated_at" field.
func (atdu *AssetTransferDetailsUpdate) SetUpdatedAt(t time.Time) *AssetTransferDetailsUpdate {
	atdu.mutation.SetUpdatedAt(t)
	return atdu
}

// SetDeletedAt sets the "deleted_at" field.
func (atdu *AssetTransferDetailsUpdate) SetDeletedAt(t time.Time) *AssetTransferDetailsUpdate {
	atdu.mutation.SetDeletedAt(t)
	return atdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableDeletedAt(t *time.Time) *AssetTransferDetailsUpdate {
	if t != nil {
		atdu.SetDeletedAt(*t)
	}
	return atdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atdu *AssetTransferDetailsUpdate) ClearDeletedAt() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearDeletedAt()
	return atdu
}

// SetLastModifier sets the "last_modifier" field.
func (atdu *AssetTransferDetailsUpdate) SetLastModifier(m *model.Modifier) *AssetTransferDetailsUpdate {
	atdu.mutation.SetLastModifier(m)
	return atdu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atdu *AssetTransferDetailsUpdate) ClearLastModifier() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearLastModifier()
	return atdu
}

// SetRemark sets the "remark" field.
func (atdu *AssetTransferDetailsUpdate) SetRemark(s string) *AssetTransferDetailsUpdate {
	atdu.mutation.SetRemark(s)
	return atdu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableRemark(s *string) *AssetTransferDetailsUpdate {
	if s != nil {
		atdu.SetRemark(*s)
	}
	return atdu
}

// ClearRemark clears the value of the "remark" field.
func (atdu *AssetTransferDetailsUpdate) ClearRemark() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearRemark()
	return atdu
}

// SetAssetID sets the "asset_id" field.
func (atdu *AssetTransferDetailsUpdate) SetAssetID(u uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetAssetID(u)
	return atdu
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableAssetID(u *uint64) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetAssetID(*u)
	}
	return atdu
}

// ClearAssetID clears the value of the "asset_id" field.
func (atdu *AssetTransferDetailsUpdate) ClearAssetID() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearAssetID()
	return atdu
}

// SetTransferID sets the "transfer_id" field.
func (atdu *AssetTransferDetailsUpdate) SetTransferID(u uint64) *AssetTransferDetailsUpdate {
	atdu.mutation.SetTransferID(u)
	return atdu
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (atdu *AssetTransferDetailsUpdate) SetNillableTransferID(u *uint64) *AssetTransferDetailsUpdate {
	if u != nil {
		atdu.SetTransferID(*u)
	}
	return atdu
}

// ClearTransferID clears the value of the "transfer_id" field.
func (atdu *AssetTransferDetailsUpdate) ClearTransferID() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearTransferID()
	return atdu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atdu *AssetTransferDetailsUpdate) SetAsset(a *Asset) *AssetTransferDetailsUpdate {
	return atdu.SetAssetID(a.ID)
}

// SetTransfer sets the "transfer" edge to the AssetTransfer entity.
func (atdu *AssetTransferDetailsUpdate) SetTransfer(a *AssetTransfer) *AssetTransferDetailsUpdate {
	return atdu.SetTransferID(a.ID)
}

// Mutation returns the AssetTransferDetailsMutation object of the builder.
func (atdu *AssetTransferDetailsUpdate) Mutation() *AssetTransferDetailsMutation {
	return atdu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (atdu *AssetTransferDetailsUpdate) ClearAsset() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearAsset()
	return atdu
}

// ClearTransfer clears the "transfer" edge to the AssetTransfer entity.
func (atdu *AssetTransferDetailsUpdate) ClearTransfer() *AssetTransferDetailsUpdate {
	atdu.mutation.ClearTransfer()
	return atdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atdu *AssetTransferDetailsUpdate) Save(ctx context.Context) (int, error) {
	if err := atdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atdu.sqlSave, atdu.mutation, atdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atdu *AssetTransferDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := atdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atdu *AssetTransferDetailsUpdate) Exec(ctx context.Context) error {
	_, err := atdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atdu *AssetTransferDetailsUpdate) ExecX(ctx context.Context) {
	if err := atdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atdu *AssetTransferDetailsUpdate) defaults() error {
	if _, ok := atdu.mutation.UpdatedAt(); !ok {
		if assettransferdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.UpdateDefaultUpdatedAt()
		atdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atdu *AssetTransferDetailsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferDetailsUpdate {
	atdu.modifiers = append(atdu.modifiers, modifiers...)
	return atdu
}

func (atdu *AssetTransferDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransferdetails.Table, assettransferdetails.Columns, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	if ps := atdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atdu.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atdu.mutation.DeletedAt(); ok {
		_spec.SetField(assettransferdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if atdu.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransferdetails.FieldDeletedAt, field.TypeTime)
	}
	if atdu.mutation.CreatorCleared() {
		_spec.ClearField(assettransferdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := atdu.mutation.LastModifier(); ok {
		_spec.SetField(assettransferdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if atdu.mutation.LastModifierCleared() {
		_spec.ClearField(assettransferdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atdu.mutation.Remark(); ok {
		_spec.SetField(assettransferdetails.FieldRemark, field.TypeString, value)
	}
	if atdu.mutation.RemarkCleared() {
		_spec.ClearField(assettransferdetails.FieldRemark, field.TypeString)
	}
	if atdu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atdu.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atdu.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, atdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atdu.mutation.done = true
	return n, nil
}

// AssetTransferDetailsUpdateOne is the builder for updating a single AssetTransferDetails entity.
type AssetTransferDetailsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetTransferDetailsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (atduo *AssetTransferDetailsUpdateOne) SetUpdatedAt(t time.Time) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetUpdatedAt(t)
	return atduo
}

// SetDeletedAt sets the "deleted_at" field.
func (atduo *AssetTransferDetailsUpdateOne) SetDeletedAt(t time.Time) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetDeletedAt(t)
	return atduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetTransferDetailsUpdateOne {
	if t != nil {
		atduo.SetDeletedAt(*t)
	}
	return atduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearDeletedAt() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearDeletedAt()
	return atduo
}

// SetLastModifier sets the "last_modifier" field.
func (atduo *AssetTransferDetailsUpdateOne) SetLastModifier(m *model.Modifier) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetLastModifier(m)
	return atduo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearLastModifier() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearLastModifier()
	return atduo
}

// SetRemark sets the "remark" field.
func (atduo *AssetTransferDetailsUpdateOne) SetRemark(s string) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetRemark(s)
	return atduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableRemark(s *string) *AssetTransferDetailsUpdateOne {
	if s != nil {
		atduo.SetRemark(*s)
	}
	return atduo
}

// ClearRemark clears the value of the "remark" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearRemark() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearRemark()
	return atduo
}

// SetAssetID sets the "asset_id" field.
func (atduo *AssetTransferDetailsUpdateOne) SetAssetID(u uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetAssetID(u)
	return atduo
}

// SetNillableAssetID sets the "asset_id" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableAssetID(u *uint64) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetAssetID(*u)
	}
	return atduo
}

// ClearAssetID clears the value of the "asset_id" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearAssetID() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearAssetID()
	return atduo
}

// SetTransferID sets the "transfer_id" field.
func (atduo *AssetTransferDetailsUpdateOne) SetTransferID(u uint64) *AssetTransferDetailsUpdateOne {
	atduo.mutation.SetTransferID(u)
	return atduo
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (atduo *AssetTransferDetailsUpdateOne) SetNillableTransferID(u *uint64) *AssetTransferDetailsUpdateOne {
	if u != nil {
		atduo.SetTransferID(*u)
	}
	return atduo
}

// ClearTransferID clears the value of the "transfer_id" field.
func (atduo *AssetTransferDetailsUpdateOne) ClearTransferID() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearTransferID()
	return atduo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (atduo *AssetTransferDetailsUpdateOne) SetAsset(a *Asset) *AssetTransferDetailsUpdateOne {
	return atduo.SetAssetID(a.ID)
}

// SetTransfer sets the "transfer" edge to the AssetTransfer entity.
func (atduo *AssetTransferDetailsUpdateOne) SetTransfer(a *AssetTransfer) *AssetTransferDetailsUpdateOne {
	return atduo.SetTransferID(a.ID)
}

// Mutation returns the AssetTransferDetailsMutation object of the builder.
func (atduo *AssetTransferDetailsUpdateOne) Mutation() *AssetTransferDetailsMutation {
	return atduo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearAsset() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearAsset()
	return atduo
}

// ClearTransfer clears the "transfer" edge to the AssetTransfer entity.
func (atduo *AssetTransferDetailsUpdateOne) ClearTransfer() *AssetTransferDetailsUpdateOne {
	atduo.mutation.ClearTransfer()
	return atduo
}

// Where appends a list predicates to the AssetTransferDetailsUpdate builder.
func (atduo *AssetTransferDetailsUpdateOne) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsUpdateOne {
	atduo.mutation.Where(ps...)
	return atduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atduo *AssetTransferDetailsUpdateOne) Select(field string, fields ...string) *AssetTransferDetailsUpdateOne {
	atduo.fields = append([]string{field}, fields...)
	return atduo
}

// Save executes the query and returns the updated AssetTransferDetails entity.
func (atduo *AssetTransferDetailsUpdateOne) Save(ctx context.Context) (*AssetTransferDetails, error) {
	if err := atduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atduo.sqlSave, atduo.mutation, atduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atduo *AssetTransferDetailsUpdateOne) SaveX(ctx context.Context) *AssetTransferDetails {
	node, err := atduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atduo *AssetTransferDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := atduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atduo *AssetTransferDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := atduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atduo *AssetTransferDetailsUpdateOne) defaults() error {
	if _, ok := atduo.mutation.UpdatedAt(); !ok {
		if assettransferdetails.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assettransferdetails.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assettransferdetails.UpdateDefaultUpdatedAt()
		atduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (atduo *AssetTransferDetailsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetTransferDetailsUpdateOne {
	atduo.modifiers = append(atduo.modifiers, modifiers...)
	return atduo
}

func (atduo *AssetTransferDetailsUpdateOne) sqlSave(ctx context.Context) (_node *AssetTransferDetails, err error) {
	_spec := sqlgraph.NewUpdateSpec(assettransferdetails.Table, assettransferdetails.Columns, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	id, ok := atduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetTransferDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransferdetails.FieldID)
		for _, f := range fields {
			if !assettransferdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assettransferdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atduo.mutation.UpdatedAt(); ok {
		_spec.SetField(assettransferdetails.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atduo.mutation.DeletedAt(); ok {
		_spec.SetField(assettransferdetails.FieldDeletedAt, field.TypeTime, value)
	}
	if atduo.mutation.DeletedAtCleared() {
		_spec.ClearField(assettransferdetails.FieldDeletedAt, field.TypeTime)
	}
	if atduo.mutation.CreatorCleared() {
		_spec.ClearField(assettransferdetails.FieldCreator, field.TypeJSON)
	}
	if value, ok := atduo.mutation.LastModifier(); ok {
		_spec.SetField(assettransferdetails.FieldLastModifier, field.TypeJSON, value)
	}
	if atduo.mutation.LastModifierCleared() {
		_spec.ClearField(assettransferdetails.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := atduo.mutation.Remark(); ok {
		_spec.SetField(assettransferdetails.FieldRemark, field.TypeString, value)
	}
	if atduo.mutation.RemarkCleared() {
		_spec.ClearField(assettransferdetails.FieldRemark, field.TypeString)
	}
	if atduo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assettransferdetails.AssetTable,
			Columns: []string{assettransferdetails.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atduo.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atduo.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assettransferdetails.TransferTable,
			Columns: []string{assettransferdetails.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assettransfer.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(atduo.modifiers...)
	_node = &AssetTransferDetails{config: atduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assettransferdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atduo.mutation.done = true
	return _node, nil
}
