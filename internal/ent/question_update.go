// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/question"
	"github.com/auroraride/aurservd/internal/ent/questioncategory"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks     []Hook
	mutation  *QuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetDeletedAt sets the "deleted_at" field.
func (qu *QuestionUpdate) SetDeletedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetDeletedAt(t)
	return qu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableDeletedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetDeletedAt(*t)
	}
	return qu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qu *QuestionUpdate) ClearDeletedAt() *QuestionUpdate {
	qu.mutation.ClearDeletedAt()
	return qu
}

// SetLastModifier sets the "last_modifier" field.
func (qu *QuestionUpdate) SetLastModifier(m *model.Modifier) *QuestionUpdate {
	qu.mutation.SetLastModifier(m)
	return qu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (qu *QuestionUpdate) ClearLastModifier() *QuestionUpdate {
	qu.mutation.ClearLastModifier()
	return qu
}

// SetRemark sets the "remark" field.
func (qu *QuestionUpdate) SetRemark(s string) *QuestionUpdate {
	qu.mutation.SetRemark(s)
	return qu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableRemark(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetRemark(*s)
	}
	return qu
}

// ClearRemark clears the value of the "remark" field.
func (qu *QuestionUpdate) ClearRemark() *QuestionUpdate {
	qu.mutation.ClearRemark()
	return qu
}

// SetName sets the "name" field.
func (qu *QuestionUpdate) SetName(s string) *QuestionUpdate {
	qu.mutation.SetName(s)
	return qu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableName(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetName(*s)
	}
	return qu
}

// SetSort sets the "sort" field.
func (qu *QuestionUpdate) SetSort(i int) *QuestionUpdate {
	qu.mutation.ResetSort()
	qu.mutation.SetSort(i)
	return qu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableSort(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetSort(*i)
	}
	return qu
}

// AddSort adds i to the "sort" field.
func (qu *QuestionUpdate) AddSort(i int) *QuestionUpdate {
	qu.mutation.AddSort(i)
	return qu
}

// SetAnswer sets the "answer" field.
func (qu *QuestionUpdate) SetAnswer(s string) *QuestionUpdate {
	qu.mutation.SetAnswer(s)
	return qu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableAnswer(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetAnswer(*s)
	}
	return qu
}

// SetCategoryID sets the "category_id" field.
func (qu *QuestionUpdate) SetCategoryID(u uint64) *QuestionUpdate {
	qu.mutation.SetCategoryID(u)
	return qu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCategoryID(u *uint64) *QuestionUpdate {
	if u != nil {
		qu.SetCategoryID(*u)
	}
	return qu
}

// ClearCategoryID clears the value of the "category_id" field.
func (qu *QuestionUpdate) ClearCategoryID() *QuestionUpdate {
	qu.mutation.ClearCategoryID()
	return qu
}

// SetCategory sets the "category" edge to the QuestionCategory entity.
func (qu *QuestionUpdate) SetCategory(q *QuestionCategory) *QuestionUpdate {
	return qu.SetCategoryID(q.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearCategory clears the "category" edge to the QuestionCategory entity.
func (qu *QuestionUpdate) ClearCategory() *QuestionUpdate {
	qu.mutation.ClearCategory()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	if err := qu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() error {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		if question.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (qu *QuestionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuestionUpdate {
	qu.modifiers = append(qu.modifiers, modifiers...)
	return qu
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if qu.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if qu.mutation.CreatorCleared() {
		_spec.ClearField(question.FieldCreator, field.TypeJSON)
	}
	if value, ok := qu.mutation.LastModifier(); ok {
		_spec.SetField(question.FieldLastModifier, field.TypeJSON, value)
	}
	if qu.mutation.LastModifierCleared() {
		_spec.ClearField(question.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := qu.mutation.Remark(); ok {
		_spec.SetField(question.FieldRemark, field.TypeString, value)
	}
	if qu.mutation.RemarkCleared() {
		_spec.ClearField(question.FieldRemark, field.TypeString)
	}
	if value, ok := qu.mutation.Name(); ok {
		_spec.SetField(question.FieldName, field.TypeString, value)
	}
	if value, ok := qu.mutation.Sort(); ok {
		_spec.SetField(question.FieldSort, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedSort(); ok {
		_spec.AddField(question.FieldSort, field.TypeInt, value)
	}
	if value, ok := qu.mutation.Answer(); ok {
		_spec.SetField(question.FieldAnswer, field.TypeString, value)
	}
	if qu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(qu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *QuestionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetDeletedAt sets the "deleted_at" field.
func (quo *QuestionUpdateOne) SetDeletedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetDeletedAt(t)
	return quo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetDeletedAt(*t)
	}
	return quo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (quo *QuestionUpdateOne) ClearDeletedAt() *QuestionUpdateOne {
	quo.mutation.ClearDeletedAt()
	return quo
}

// SetLastModifier sets the "last_modifier" field.
func (quo *QuestionUpdateOne) SetLastModifier(m *model.Modifier) *QuestionUpdateOne {
	quo.mutation.SetLastModifier(m)
	return quo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (quo *QuestionUpdateOne) ClearLastModifier() *QuestionUpdateOne {
	quo.mutation.ClearLastModifier()
	return quo
}

// SetRemark sets the "remark" field.
func (quo *QuestionUpdateOne) SetRemark(s string) *QuestionUpdateOne {
	quo.mutation.SetRemark(s)
	return quo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableRemark(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetRemark(*s)
	}
	return quo
}

// ClearRemark clears the value of the "remark" field.
func (quo *QuestionUpdateOne) ClearRemark() *QuestionUpdateOne {
	quo.mutation.ClearRemark()
	return quo
}

// SetName sets the "name" field.
func (quo *QuestionUpdateOne) SetName(s string) *QuestionUpdateOne {
	quo.mutation.SetName(s)
	return quo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableName(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetName(*s)
	}
	return quo
}

// SetSort sets the "sort" field.
func (quo *QuestionUpdateOne) SetSort(i int) *QuestionUpdateOne {
	quo.mutation.ResetSort()
	quo.mutation.SetSort(i)
	return quo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableSort(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetSort(*i)
	}
	return quo
}

// AddSort adds i to the "sort" field.
func (quo *QuestionUpdateOne) AddSort(i int) *QuestionUpdateOne {
	quo.mutation.AddSort(i)
	return quo
}

// SetAnswer sets the "answer" field.
func (quo *QuestionUpdateOne) SetAnswer(s string) *QuestionUpdateOne {
	quo.mutation.SetAnswer(s)
	return quo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableAnswer(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetAnswer(*s)
	}
	return quo
}

// SetCategoryID sets the "category_id" field.
func (quo *QuestionUpdateOne) SetCategoryID(u uint64) *QuestionUpdateOne {
	quo.mutation.SetCategoryID(u)
	return quo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCategoryID(u *uint64) *QuestionUpdateOne {
	if u != nil {
		quo.SetCategoryID(*u)
	}
	return quo
}

// ClearCategoryID clears the value of the "category_id" field.
func (quo *QuestionUpdateOne) ClearCategoryID() *QuestionUpdateOne {
	quo.mutation.ClearCategoryID()
	return quo
}

// SetCategory sets the "category" edge to the QuestionCategory entity.
func (quo *QuestionUpdateOne) SetCategory(q *QuestionCategory) *QuestionUpdateOne {
	return quo.SetCategoryID(q.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearCategory clears the "category" edge to the QuestionCategory entity.
func (quo *QuestionUpdateOne) ClearCategory() *QuestionUpdateOne {
	quo.mutation.ClearCategory()
	return quo
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	if err := quo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() error {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		if question.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized question.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (quo *QuestionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *QuestionUpdateOne {
	quo.modifiers = append(quo.modifiers, modifiers...)
	return quo
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeUint64))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.DeletedAt(); ok {
		_spec.SetField(question.FieldDeletedAt, field.TypeTime, value)
	}
	if quo.mutation.DeletedAtCleared() {
		_spec.ClearField(question.FieldDeletedAt, field.TypeTime)
	}
	if quo.mutation.CreatorCleared() {
		_spec.ClearField(question.FieldCreator, field.TypeJSON)
	}
	if value, ok := quo.mutation.LastModifier(); ok {
		_spec.SetField(question.FieldLastModifier, field.TypeJSON, value)
	}
	if quo.mutation.LastModifierCleared() {
		_spec.ClearField(question.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := quo.mutation.Remark(); ok {
		_spec.SetField(question.FieldRemark, field.TypeString, value)
	}
	if quo.mutation.RemarkCleared() {
		_spec.ClearField(question.FieldRemark, field.TypeString)
	}
	if value, ok := quo.mutation.Name(); ok {
		_spec.SetField(question.FieldName, field.TypeString, value)
	}
	if value, ok := quo.mutation.Sort(); ok {
		_spec.SetField(question.FieldSort, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedSort(); ok {
		_spec.AddField(question.FieldSort, field.TypeInt, value)
	}
	if value, ok := quo.mutation.Answer(); ok {
		_spec.SetField(question.FieldAnswer, field.TypeString, value)
	}
	if quo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.CategoryTable,
			Columns: []string{question.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questioncategory.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(quo.modifiers...)
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
