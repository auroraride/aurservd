// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/coupon"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// CouponMutation represents an operation that mutates the Coupon nodes in the graph.
type CouponMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	created_at      *time.Time
	updated_at      *time.Time
	creator         **model.Modifier
	last_modifier   **model.Modifier
	remark          *string
	name            *string
	rule            *uint8
	addrule         *int8
	multiple        *bool
	amount          *float64
	addamount       *float64
	code            *string
	expires_at      *time.Time
	used_at         *time.Time
	duration        **model.CouponDuration
	clearedFields   map[string]struct{}
	rider           *uint64
	clearedrider    bool
	assembly        *uint64
	clearedassembly bool
	plan            *uint64
	clearedplan     bool
	template        *uint64
	clearedtemplate bool
	_order          *uint64
	cleared_order   bool
	cities          map[uint64]struct{}
	removedcities   map[uint64]struct{}
	clearedcities   bool
	plans           map[uint64]struct{}
	removedplans    map[uint64]struct{}
	clearedplans    bool
	done            bool
	oldValue        func(context.Context) (*Coupon, error)
	predicates      []predicate.Coupon
}

var _ ent.Mutation = (*CouponMutation)(nil)

// couponOption allows management of the mutation configuration using functional options.
type couponOption func(*CouponMutation)

// newCouponMutation creates new mutation for the Coupon entity.
func newCouponMutation(c config, op Op, opts ...couponOption) *CouponMutation {
	m := &CouponMutation{
		config:        c,
		op:            op,
		typ:           TypeCoupon,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCouponID sets the ID field of the mutation.
func withCouponID(id uint64) couponOption {
	return func(m *CouponMutation) {
		var (
			err   error
			once  sync.Once
			value *Coupon
		)
		m.oldValue = func(ctx context.Context) (*Coupon, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coupon.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoupon sets the old Coupon of the mutation.
func withCoupon(node *Coupon) couponOption {
	return func(m *CouponMutation) {
		m.oldValue = func(context.Context) (*Coupon, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CouponMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CouponMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CouponMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CouponMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Coupon.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CouponMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CouponMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CouponMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CouponMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CouponMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CouponMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreator sets the "creator" field.
func (m *CouponMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *CouponMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *CouponMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[coupon.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *CouponMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[coupon.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *CouponMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, coupon.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *CouponMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *CouponMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *CouponMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[coupon.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *CouponMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[coupon.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *CouponMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, coupon.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *CouponMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *CouponMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *CouponMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[coupon.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *CouponMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[coupon.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *CouponMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, coupon.FieldRemark)
}

// SetRiderID sets the "rider_id" field.
func (m *CouponMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *CouponMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldRiderID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ClearRiderID clears the value of the "rider_id" field.
func (m *CouponMutation) ClearRiderID() {
	m.rider = nil
	m.clearedFields[coupon.FieldRiderID] = struct{}{}
}

// RiderIDCleared returns if the "rider_id" field was cleared in this mutation.
func (m *CouponMutation) RiderIDCleared() bool {
	_, ok := m.clearedFields[coupon.FieldRiderID]
	return ok
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *CouponMutation) ResetRiderID() {
	m.rider = nil
	delete(m.clearedFields, coupon.FieldRiderID)
}

// SetAssemblyID sets the "assembly_id" field.
func (m *CouponMutation) SetAssemblyID(u uint64) {
	m.assembly = &u
}

// AssemblyID returns the value of the "assembly_id" field in the mutation.
func (m *CouponMutation) AssemblyID() (r uint64, exists bool) {
	v := m.assembly
	if v == nil {
		return
	}
	return *v, true
}

// OldAssemblyID returns the old "assembly_id" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldAssemblyID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssemblyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssemblyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssemblyID: %w", err)
	}
	return oldValue.AssemblyID, nil
}

// ResetAssemblyID resets all changes to the "assembly_id" field.
func (m *CouponMutation) ResetAssemblyID() {
	m.assembly = nil
}

// SetPlanID sets the "plan_id" field.
func (m *CouponMutation) SetPlanID(u uint64) {
	m.plan = &u
}

// PlanID returns the value of the "plan_id" field in the mutation.
func (m *CouponMutation) PlanID() (r uint64, exists bool) {
	v := m.plan
	if v == nil {
		return
	}
	return *v, true
}

// OldPlanID returns the old "plan_id" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldPlanID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlanID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlanID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlanID: %w", err)
	}
	return oldValue.PlanID, nil
}

// ClearPlanID clears the value of the "plan_id" field.
func (m *CouponMutation) ClearPlanID() {
	m.plan = nil
	m.clearedFields[coupon.FieldPlanID] = struct{}{}
}

// PlanIDCleared returns if the "plan_id" field was cleared in this mutation.
func (m *CouponMutation) PlanIDCleared() bool {
	_, ok := m.clearedFields[coupon.FieldPlanID]
	return ok
}

// ResetPlanID resets all changes to the "plan_id" field.
func (m *CouponMutation) ResetPlanID() {
	m.plan = nil
	delete(m.clearedFields, coupon.FieldPlanID)
}

// SetTemplateID sets the "template_id" field.
func (m *CouponMutation) SetTemplateID(u uint64) {
	m.template = &u
}

// TemplateID returns the value of the "template_id" field in the mutation.
func (m *CouponMutation) TemplateID() (r uint64, exists bool) {
	v := m.template
	if v == nil {
		return
	}
	return *v, true
}

// OldTemplateID returns the old "template_id" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldTemplateID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTemplateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTemplateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTemplateID: %w", err)
	}
	return oldValue.TemplateID, nil
}

// ResetTemplateID resets all changes to the "template_id" field.
func (m *CouponMutation) ResetTemplateID() {
	m.template = nil
}

// SetOrderID sets the "order_id" field.
func (m *CouponMutation) SetOrderID(u uint64) {
	m._order = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *CouponMutation) OrderID() (r uint64, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldOrderID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ClearOrderID clears the value of the "order_id" field.
func (m *CouponMutation) ClearOrderID() {
	m._order = nil
	m.clearedFields[coupon.FieldOrderID] = struct{}{}
}

// OrderIDCleared returns if the "order_id" field was cleared in this mutation.
func (m *CouponMutation) OrderIDCleared() bool {
	_, ok := m.clearedFields[coupon.FieldOrderID]
	return ok
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *CouponMutation) ResetOrderID() {
	m._order = nil
	delete(m.clearedFields, coupon.FieldOrderID)
}

// SetName sets the "name" field.
func (m *CouponMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CouponMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CouponMutation) ResetName() {
	m.name = nil
}

// SetRule sets the "rule" field.
func (m *CouponMutation) SetRule(u uint8) {
	m.rule = &u
	m.addrule = nil
}

// Rule returns the value of the "rule" field in the mutation.
func (m *CouponMutation) Rule() (r uint8, exists bool) {
	v := m.rule
	if v == nil {
		return
	}
	return *v, true
}

// OldRule returns the old "rule" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldRule(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRule: %w", err)
	}
	return oldValue.Rule, nil
}

// AddRule adds u to the "rule" field.
func (m *CouponMutation) AddRule(u int8) {
	if m.addrule != nil {
		*m.addrule += u
	} else {
		m.addrule = &u
	}
}

// AddedRule returns the value that was added to the "rule" field in this mutation.
func (m *CouponMutation) AddedRule() (r int8, exists bool) {
	v := m.addrule
	if v == nil {
		return
	}
	return *v, true
}

// ResetRule resets all changes to the "rule" field.
func (m *CouponMutation) ResetRule() {
	m.rule = nil
	m.addrule = nil
}

// SetMultiple sets the "multiple" field.
func (m *CouponMutation) SetMultiple(b bool) {
	m.multiple = &b
}

// Multiple returns the value of the "multiple" field in the mutation.
func (m *CouponMutation) Multiple() (r bool, exists bool) {
	v := m.multiple
	if v == nil {
		return
	}
	return *v, true
}

// OldMultiple returns the old "multiple" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldMultiple(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMultiple is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMultiple requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMultiple: %w", err)
	}
	return oldValue.Multiple, nil
}

// ResetMultiple resets all changes to the "multiple" field.
func (m *CouponMutation) ResetMultiple() {
	m.multiple = nil
}

// SetAmount sets the "amount" field.
func (m *CouponMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CouponMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *CouponMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CouponMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *CouponMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCode sets the "code" field.
func (m *CouponMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CouponMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *CouponMutation) ResetCode() {
	m.code = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *CouponMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *CouponMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *CouponMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[coupon.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *CouponMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[coupon.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *CouponMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, coupon.FieldExpiresAt)
}

// SetUsedAt sets the "used_at" field.
func (m *CouponMutation) SetUsedAt(t time.Time) {
	m.used_at = &t
}

// UsedAt returns the value of the "used_at" field in the mutation.
func (m *CouponMutation) UsedAt() (r time.Time, exists bool) {
	v := m.used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedAt returns the old "used_at" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedAt: %w", err)
	}
	return oldValue.UsedAt, nil
}

// ClearUsedAt clears the value of the "used_at" field.
func (m *CouponMutation) ClearUsedAt() {
	m.used_at = nil
	m.clearedFields[coupon.FieldUsedAt] = struct{}{}
}

// UsedAtCleared returns if the "used_at" field was cleared in this mutation.
func (m *CouponMutation) UsedAtCleared() bool {
	_, ok := m.clearedFields[coupon.FieldUsedAt]
	return ok
}

// ResetUsedAt resets all changes to the "used_at" field.
func (m *CouponMutation) ResetUsedAt() {
	m.used_at = nil
	delete(m.clearedFields, coupon.FieldUsedAt)
}

// SetDuration sets the "duration" field.
func (m *CouponMutation) SetDuration(md *model.CouponDuration) {
	m.duration = &md
}

// Duration returns the value of the "duration" field in the mutation.
func (m *CouponMutation) Duration() (r *model.CouponDuration, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Coupon entity.
// If the Coupon object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CouponMutation) OldDuration(ctx context.Context) (v *model.CouponDuration, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// ResetDuration resets all changes to the "duration" field.
func (m *CouponMutation) ResetDuration() {
	m.duration = nil
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *CouponMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *CouponMutation) RiderCleared() bool {
	return m.RiderIDCleared() || m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *CouponMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearAssembly clears the "assembly" edge to the CouponAssembly entity.
func (m *CouponMutation) ClearAssembly() {
	m.clearedassembly = true
}

// AssemblyCleared reports if the "assembly" edge to the CouponAssembly entity was cleared.
func (m *CouponMutation) AssemblyCleared() bool {
	return m.clearedassembly
}

// AssemblyIDs returns the "assembly" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AssemblyID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) AssemblyIDs() (ids []uint64) {
	if id := m.assembly; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAssembly resets all changes to the "assembly" edge.
func (m *CouponMutation) ResetAssembly() {
	m.assembly = nil
	m.clearedassembly = false
}

// ClearPlan clears the "plan" edge to the Plan entity.
func (m *CouponMutation) ClearPlan() {
	m.clearedplan = true
}

// PlanCleared reports if the "plan" edge to the Plan entity was cleared.
func (m *CouponMutation) PlanCleared() bool {
	return m.PlanIDCleared() || m.clearedplan
}

// PlanIDs returns the "plan" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlanID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) PlanIDs() (ids []uint64) {
	if id := m.plan; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlan resets all changes to the "plan" edge.
func (m *CouponMutation) ResetPlan() {
	m.plan = nil
	m.clearedplan = false
}

// ClearTemplate clears the "template" edge to the CouponTemplate entity.
func (m *CouponMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared reports if the "template" edge to the CouponTemplate entity was cleared.
func (m *CouponMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// TemplateIDs returns the "template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) TemplateIDs() (ids []uint64) {
	if id := m.template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplate resets all changes to the "template" edge.
func (m *CouponMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
}

// ClearOrder clears the "order" edge to the Order entity.
func (m *CouponMutation) ClearOrder() {
	m.cleared_order = true
}

// OrderCleared reports if the "order" edge to the Order entity was cleared.
func (m *CouponMutation) OrderCleared() bool {
	return m.OrderIDCleared() || m.cleared_order
}

// OrderIDs returns the "order" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrderID instead. It exists only for internal usage by the builders.
func (m *CouponMutation) OrderIDs() (ids []uint64) {
	if id := m._order; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrder resets all changes to the "order" edge.
func (m *CouponMutation) ResetOrder() {
	m._order = nil
	m.cleared_order = false
}

// AddCityIDs adds the "cities" edge to the City entity by ids.
func (m *CouponMutation) AddCityIDs(ids ...uint64) {
	if m.cities == nil {
		m.cities = make(map[uint64]struct{})
	}
	for i := range ids {
		m.cities[ids[i]] = struct{}{}
	}
}

// ClearCities clears the "cities" edge to the City entity.
func (m *CouponMutation) ClearCities() {
	m.clearedcities = true
}

// CitiesCleared reports if the "cities" edge to the City entity was cleared.
func (m *CouponMutation) CitiesCleared() bool {
	return m.clearedcities
}

// RemoveCityIDs removes the "cities" edge to the City entity by IDs.
func (m *CouponMutation) RemoveCityIDs(ids ...uint64) {
	if m.removedcities == nil {
		m.removedcities = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.cities, ids[i])
		m.removedcities[ids[i]] = struct{}{}
	}
}

// RemovedCities returns the removed IDs of the "cities" edge to the City entity.
func (m *CouponMutation) RemovedCitiesIDs() (ids []uint64) {
	for id := range m.removedcities {
		ids = append(ids, id)
	}
	return
}

// CitiesIDs returns the "cities" edge IDs in the mutation.
func (m *CouponMutation) CitiesIDs() (ids []uint64) {
	for id := range m.cities {
		ids = append(ids, id)
	}
	return
}

// ResetCities resets all changes to the "cities" edge.
func (m *CouponMutation) ResetCities() {
	m.cities = nil
	m.clearedcities = false
	m.removedcities = nil
}

// AddPlanIDs adds the "plans" edge to the Plan entity by ids.
func (m *CouponMutation) AddPlanIDs(ids ...uint64) {
	if m.plans == nil {
		m.plans = make(map[uint64]struct{})
	}
	for i := range ids {
		m.plans[ids[i]] = struct{}{}
	}
}

// ClearPlans clears the "plans" edge to the Plan entity.
func (m *CouponMutation) ClearPlans() {
	m.clearedplans = true
}

// PlansCleared reports if the "plans" edge to the Plan entity was cleared.
func (m *CouponMutation) PlansCleared() bool {
	return m.clearedplans
}

// RemovePlanIDs removes the "plans" edge to the Plan entity by IDs.
func (m *CouponMutation) RemovePlanIDs(ids ...uint64) {
	if m.removedplans == nil {
		m.removedplans = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.plans, ids[i])
		m.removedplans[ids[i]] = struct{}{}
	}
}

// RemovedPlans returns the removed IDs of the "plans" edge to the Plan entity.
func (m *CouponMutation) RemovedPlansIDs() (ids []uint64) {
	for id := range m.removedplans {
		ids = append(ids, id)
	}
	return
}

// PlansIDs returns the "plans" edge IDs in the mutation.
func (m *CouponMutation) PlansIDs() (ids []uint64) {
	for id := range m.plans {
		ids = append(ids, id)
	}
	return
}

// ResetPlans resets all changes to the "plans" edge.
func (m *CouponMutation) ResetPlans() {
	m.plans = nil
	m.clearedplans = false
	m.removedplans = nil
}

// Where appends a list predicates to the CouponMutation builder.
func (m *CouponMutation) Where(ps ...predicate.Coupon) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CouponMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Coupon).
func (m *CouponMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CouponMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.created_at != nil {
		fields = append(fields, coupon.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, coupon.FieldUpdatedAt)
	}
	if m.creator != nil {
		fields = append(fields, coupon.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, coupon.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, coupon.FieldRemark)
	}
	if m.rider != nil {
		fields = append(fields, coupon.FieldRiderID)
	}
	if m.assembly != nil {
		fields = append(fields, coupon.FieldAssemblyID)
	}
	if m.plan != nil {
		fields = append(fields, coupon.FieldPlanID)
	}
	if m.template != nil {
		fields = append(fields, coupon.FieldTemplateID)
	}
	if m._order != nil {
		fields = append(fields, coupon.FieldOrderID)
	}
	if m.name != nil {
		fields = append(fields, coupon.FieldName)
	}
	if m.rule != nil {
		fields = append(fields, coupon.FieldRule)
	}
	if m.multiple != nil {
		fields = append(fields, coupon.FieldMultiple)
	}
	if m.amount != nil {
		fields = append(fields, coupon.FieldAmount)
	}
	if m.code != nil {
		fields = append(fields, coupon.FieldCode)
	}
	if m.expires_at != nil {
		fields = append(fields, coupon.FieldExpiresAt)
	}
	if m.used_at != nil {
		fields = append(fields, coupon.FieldUsedAt)
	}
	if m.duration != nil {
		fields = append(fields, coupon.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CouponMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coupon.FieldCreatedAt:
		return m.CreatedAt()
	case coupon.FieldUpdatedAt:
		return m.UpdatedAt()
	case coupon.FieldCreator:
		return m.Creator()
	case coupon.FieldLastModifier:
		return m.LastModifier()
	case coupon.FieldRemark:
		return m.Remark()
	case coupon.FieldRiderID:
		return m.RiderID()
	case coupon.FieldAssemblyID:
		return m.AssemblyID()
	case coupon.FieldPlanID:
		return m.PlanID()
	case coupon.FieldTemplateID:
		return m.TemplateID()
	case coupon.FieldOrderID:
		return m.OrderID()
	case coupon.FieldName:
		return m.Name()
	case coupon.FieldRule:
		return m.Rule()
	case coupon.FieldMultiple:
		return m.Multiple()
	case coupon.FieldAmount:
		return m.Amount()
	case coupon.FieldCode:
		return m.Code()
	case coupon.FieldExpiresAt:
		return m.ExpiresAt()
	case coupon.FieldUsedAt:
		return m.UsedAt()
	case coupon.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CouponMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coupon.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case coupon.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case coupon.FieldCreator:
		return m.OldCreator(ctx)
	case coupon.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case coupon.FieldRemark:
		return m.OldRemark(ctx)
	case coupon.FieldRiderID:
		return m.OldRiderID(ctx)
	case coupon.FieldAssemblyID:
		return m.OldAssemblyID(ctx)
	case coupon.FieldPlanID:
		return m.OldPlanID(ctx)
	case coupon.FieldTemplateID:
		return m.OldTemplateID(ctx)
	case coupon.FieldOrderID:
		return m.OldOrderID(ctx)
	case coupon.FieldName:
		return m.OldName(ctx)
	case coupon.FieldRule:
		return m.OldRule(ctx)
	case coupon.FieldMultiple:
		return m.OldMultiple(ctx)
	case coupon.FieldAmount:
		return m.OldAmount(ctx)
	case coupon.FieldCode:
		return m.OldCode(ctx)
	case coupon.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case coupon.FieldUsedAt:
		return m.OldUsedAt(ctx)
	case coupon.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Coupon field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coupon.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case coupon.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case coupon.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case coupon.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case coupon.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case coupon.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case coupon.FieldAssemblyID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssemblyID(v)
		return nil
	case coupon.FieldPlanID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlanID(v)
		return nil
	case coupon.FieldTemplateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTemplateID(v)
		return nil
	case coupon.FieldOrderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case coupon.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case coupon.FieldRule:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRule(v)
		return nil
	case coupon.FieldMultiple:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMultiple(v)
		return nil
	case coupon.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case coupon.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case coupon.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case coupon.FieldUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedAt(v)
		return nil
	case coupon.FieldDuration:
		v, ok := value.(*model.CouponDuration)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Coupon field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CouponMutation) AddedFields() []string {
	var fields []string
	if m.addrule != nil {
		fields = append(fields, coupon.FieldRule)
	}
	if m.addamount != nil {
		fields = append(fields, coupon.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CouponMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coupon.FieldRule:
		return m.AddedRule()
	case coupon.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CouponMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coupon.FieldRule:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRule(v)
		return nil
	case coupon.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Coupon numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CouponMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(coupon.FieldCreator) {
		fields = append(fields, coupon.FieldCreator)
	}
	if m.FieldCleared(coupon.FieldLastModifier) {
		fields = append(fields, coupon.FieldLastModifier)
	}
	if m.FieldCleared(coupon.FieldRemark) {
		fields = append(fields, coupon.FieldRemark)
	}
	if m.FieldCleared(coupon.FieldRiderID) {
		fields = append(fields, coupon.FieldRiderID)
	}
	if m.FieldCleared(coupon.FieldPlanID) {
		fields = append(fields, coupon.FieldPlanID)
	}
	if m.FieldCleared(coupon.FieldOrderID) {
		fields = append(fields, coupon.FieldOrderID)
	}
	if m.FieldCleared(coupon.FieldExpiresAt) {
		fields = append(fields, coupon.FieldExpiresAt)
	}
	if m.FieldCleared(coupon.FieldUsedAt) {
		fields = append(fields, coupon.FieldUsedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CouponMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CouponMutation) ClearField(name string) error {
	switch name {
	case coupon.FieldCreator:
		m.ClearCreator()
		return nil
	case coupon.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case coupon.FieldRemark:
		m.ClearRemark()
		return nil
	case coupon.FieldRiderID:
		m.ClearRiderID()
		return nil
	case coupon.FieldPlanID:
		m.ClearPlanID()
		return nil
	case coupon.FieldOrderID:
		m.ClearOrderID()
		return nil
	case coupon.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	case coupon.FieldUsedAt:
		m.ClearUsedAt()
		return nil
	}
	return fmt.Errorf("unknown Coupon nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CouponMutation) ResetField(name string) error {
	switch name {
	case coupon.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case coupon.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case coupon.FieldCreator:
		m.ResetCreator()
		return nil
	case coupon.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case coupon.FieldRemark:
		m.ResetRemark()
		return nil
	case coupon.FieldRiderID:
		m.ResetRiderID()
		return nil
	case coupon.FieldAssemblyID:
		m.ResetAssemblyID()
		return nil
	case coupon.FieldPlanID:
		m.ResetPlanID()
		return nil
	case coupon.FieldTemplateID:
		m.ResetTemplateID()
		return nil
	case coupon.FieldOrderID:
		m.ResetOrderID()
		return nil
	case coupon.FieldName:
		m.ResetName()
		return nil
	case coupon.FieldRule:
		m.ResetRule()
		return nil
	case coupon.FieldMultiple:
		m.ResetMultiple()
		return nil
	case coupon.FieldAmount:
		m.ResetAmount()
		return nil
	case coupon.FieldCode:
		m.ResetCode()
		return nil
	case coupon.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case coupon.FieldUsedAt:
		m.ResetUsedAt()
		return nil
	case coupon.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Coupon field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CouponMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.rider != nil {
		edges = append(edges, coupon.EdgeRider)
	}
	if m.assembly != nil {
		edges = append(edges, coupon.EdgeAssembly)
	}
	if m.plan != nil {
		edges = append(edges, coupon.EdgePlan)
	}
	if m.template != nil {
		edges = append(edges, coupon.EdgeTemplate)
	}
	if m._order != nil {
		edges = append(edges, coupon.EdgeOrder)
	}
	if m.cities != nil {
		edges = append(edges, coupon.EdgeCities)
	}
	if m.plans != nil {
		edges = append(edges, coupon.EdgePlans)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CouponMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case coupon.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgeAssembly:
		if id := m.assembly; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgePlan:
		if id := m.plan; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgeTemplate:
		if id := m.template; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgeOrder:
		if id := m._order; id != nil {
			return []ent.Value{*id}
		}
	case coupon.EdgeCities:
		ids := make([]ent.Value, 0, len(m.cities))
		for id := range m.cities {
			ids = append(ids, id)
		}
		return ids
	case coupon.EdgePlans:
		ids := make([]ent.Value, 0, len(m.plans))
		for id := range m.plans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CouponMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedcities != nil {
		edges = append(edges, coupon.EdgeCities)
	}
	if m.removedplans != nil {
		edges = append(edges, coupon.EdgePlans)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CouponMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case coupon.EdgeCities:
		ids := make([]ent.Value, 0, len(m.removedcities))
		for id := range m.removedcities {
			ids = append(ids, id)
		}
		return ids
	case coupon.EdgePlans:
		ids := make([]ent.Value, 0, len(m.removedplans))
		for id := range m.removedplans {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CouponMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedrider {
		edges = append(edges, coupon.EdgeRider)
	}
	if m.clearedassembly {
		edges = append(edges, coupon.EdgeAssembly)
	}
	if m.clearedplan {
		edges = append(edges, coupon.EdgePlan)
	}
	if m.clearedtemplate {
		edges = append(edges, coupon.EdgeTemplate)
	}
	if m.cleared_order {
		edges = append(edges, coupon.EdgeOrder)
	}
	if m.clearedcities {
		edges = append(edges, coupon.EdgeCities)
	}
	if m.clearedplans {
		edges = append(edges, coupon.EdgePlans)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CouponMutation) EdgeCleared(name string) bool {
	switch name {
	case coupon.EdgeRider:
		return m.clearedrider
	case coupon.EdgeAssembly:
		return m.clearedassembly
	case coupon.EdgePlan:
		return m.clearedplan
	case coupon.EdgeTemplate:
		return m.clearedtemplate
	case coupon.EdgeOrder:
		return m.cleared_order
	case coupon.EdgeCities:
		return m.clearedcities
	case coupon.EdgePlans:
		return m.clearedplans
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CouponMutation) ClearEdge(name string) error {
	switch name {
	case coupon.EdgeRider:
		m.ClearRider()
		return nil
	case coupon.EdgeAssembly:
		m.ClearAssembly()
		return nil
	case coupon.EdgePlan:
		m.ClearPlan()
		return nil
	case coupon.EdgeTemplate:
		m.ClearTemplate()
		return nil
	case coupon.EdgeOrder:
		m.ClearOrder()
		return nil
	}
	return fmt.Errorf("unknown Coupon unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CouponMutation) ResetEdge(name string) error {
	switch name {
	case coupon.EdgeRider:
		m.ResetRider()
		return nil
	case coupon.EdgeAssembly:
		m.ResetAssembly()
		return nil
	case coupon.EdgePlan:
		m.ResetPlan()
		return nil
	case coupon.EdgeTemplate:
		m.ResetTemplate()
		return nil
	case coupon.EdgeOrder:
		m.ResetOrder()
		return nil
	case coupon.EdgeCities:
		m.ResetCities()
		return nil
	case coupon.EdgePlans:
		m.ResetPlans()
		return nil
	}
	return fmt.Errorf("unknown Coupon edge %s", name)
}

