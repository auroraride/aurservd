// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/orderalter"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// OrderAlterCreate is the builder for creating a OrderAlter entity.
type OrderAlterCreate struct {
	config
	mutation *OrderAlterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (oac *OrderAlterCreate) SetCreatedAt(t time.Time) *OrderAlterCreate {
	oac.mutation.SetCreatedAt(t)
	return oac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oac *OrderAlterCreate) SetNillableCreatedAt(t *time.Time) *OrderAlterCreate {
	if t != nil {
		oac.SetCreatedAt(*t)
	}
	return oac
}

// SetUpdatedAt sets the "updated_at" field.
func (oac *OrderAlterCreate) SetUpdatedAt(t time.Time) *OrderAlterCreate {
	oac.mutation.SetUpdatedAt(t)
	return oac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oac *OrderAlterCreate) SetNillableUpdatedAt(t *time.Time) *OrderAlterCreate {
	if t != nil {
		oac.SetUpdatedAt(*t)
	}
	return oac
}

// SetDeletedAt sets the "deleted_at" field.
func (oac *OrderAlterCreate) SetDeletedAt(t time.Time) *OrderAlterCreate {
	oac.mutation.SetDeletedAt(t)
	return oac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oac *OrderAlterCreate) SetNillableDeletedAt(t *time.Time) *OrderAlterCreate {
	if t != nil {
		oac.SetDeletedAt(*t)
	}
	return oac
}

// SetCreator sets the "creator" field.
func (oac *OrderAlterCreate) SetCreator(m *model.Modifier) *OrderAlterCreate {
	oac.mutation.SetCreator(m)
	return oac
}

// SetLastModifier sets the "last_modifier" field.
func (oac *OrderAlterCreate) SetLastModifier(m *model.Modifier) *OrderAlterCreate {
	oac.mutation.SetLastModifier(m)
	return oac
}

// SetRemark sets the "remark" field.
func (oac *OrderAlterCreate) SetRemark(s string) *OrderAlterCreate {
	oac.mutation.SetRemark(s)
	return oac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (oac *OrderAlterCreate) SetNillableRemark(s *string) *OrderAlterCreate {
	if s != nil {
		oac.SetRemark(*s)
	}
	return oac
}

// SetRiderID sets the "rider_id" field.
func (oac *OrderAlterCreate) SetRiderID(u uint64) *OrderAlterCreate {
	oac.mutation.SetRiderID(u)
	return oac
}

// SetOrderID sets the "order_id" field.
func (oac *OrderAlterCreate) SetOrderID(u uint64) *OrderAlterCreate {
	oac.mutation.SetOrderID(u)
	return oac
}

// SetDays sets the "days" field.
func (oac *OrderAlterCreate) SetDays(i int) *OrderAlterCreate {
	oac.mutation.SetDays(i)
	return oac
}

// SetReason sets the "reason" field.
func (oac *OrderAlterCreate) SetReason(s string) *OrderAlterCreate {
	oac.mutation.SetReason(s)
	return oac
}

// SetRider sets the "rider" edge to the Rider entity.
func (oac *OrderAlterCreate) SetRider(r *Rider) *OrderAlterCreate {
	return oac.SetRiderID(r.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (oac *OrderAlterCreate) SetOrder(o *Order) *OrderAlterCreate {
	return oac.SetOrderID(o.ID)
}

// Mutation returns the OrderAlterMutation object of the builder.
func (oac *OrderAlterCreate) Mutation() *OrderAlterMutation {
	return oac.mutation
}

// Save creates the OrderAlter in the database.
func (oac *OrderAlterCreate) Save(ctx context.Context) (*OrderAlter, error) {
	var (
		err  error
		node *OrderAlter
	)
	if err := oac.defaults(); err != nil {
		return nil, err
	}
	if len(oac.hooks) == 0 {
		if err = oac.check(); err != nil {
			return nil, err
		}
		node, err = oac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderAlterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oac.check(); err != nil {
				return nil, err
			}
			oac.mutation = mutation
			if node, err = oac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(oac.hooks) - 1; i >= 0; i-- {
			if oac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderAlter)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderAlterMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oac *OrderAlterCreate) SaveX(ctx context.Context) *OrderAlter {
	v, err := oac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oac *OrderAlterCreate) Exec(ctx context.Context) error {
	_, err := oac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oac *OrderAlterCreate) ExecX(ctx context.Context) {
	if err := oac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oac *OrderAlterCreate) defaults() error {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		if orderalter.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderalter.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderalter.DefaultCreatedAt()
		oac.mutation.SetCreatedAt(v)
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		if orderalter.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderalter.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderalter.DefaultUpdatedAt()
		oac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oac *OrderAlterCreate) check() error {
	if _, ok := oac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderAlter.created_at"`)}
	}
	if _, ok := oac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderAlter.updated_at"`)}
	}
	if _, ok := oac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "OrderAlter.rider_id"`)}
	}
	if _, ok := oac.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderAlter.order_id"`)}
	}
	if _, ok := oac.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "OrderAlter.days"`)}
	}
	if _, ok := oac.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "OrderAlter.reason"`)}
	}
	if _, ok := oac.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "OrderAlter.rider"`)}
	}
	if _, ok := oac.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required edge "OrderAlter.order"`)}
	}
	return nil
}

func (oac *OrderAlterCreate) sqlSave(ctx context.Context) (*OrderAlter, error) {
	_node, _spec := oac.createSpec()
	if err := sqlgraph.CreateNode(ctx, oac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (oac *OrderAlterCreate) createSpec() (*OrderAlter, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderAlter{config: oac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderalter.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: orderalter.FieldID,
			},
		}
	)
	_spec.OnConflict = oac.conflict
	if value, ok := oac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderalter.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderalter.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := oac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: orderalter.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if value, ok := oac.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderalter.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := oac.mutation.LastModifier(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: orderalter.FieldLastModifier,
		})
		_node.LastModifier = value
	}
	if value, ok := oac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderalter.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := oac.mutation.Days(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderalter.FieldDays,
		})
		_node.Days = value
	}
	if value, ok := oac.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderalter.FieldReason,
		})
		_node.Reason = value
	}
	if nodes := oac.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderalter.RiderTable,
			Columns: []string{orderalter.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oac.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orderalter.OrderTable,
			Columns: []string{orderalter.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderAlter.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderAlterUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oac *OrderAlterCreate) OnConflict(opts ...sql.ConflictOption) *OrderAlterUpsertOne {
	oac.conflict = opts
	return &OrderAlterUpsertOne{
		create: oac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderAlter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oac *OrderAlterCreate) OnConflictColumns(columns ...string) *OrderAlterUpsertOne {
	oac.conflict = append(oac.conflict, sql.ConflictColumns(columns...))
	return &OrderAlterUpsertOne{
		create: oac,
	}
}

type (
	// OrderAlterUpsertOne is the builder for "upsert"-ing
	//  one OrderAlter node.
	OrderAlterUpsertOne struct {
		create *OrderAlterCreate
	}

	// OrderAlterUpsert is the "OnConflict" setter.
	OrderAlterUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderAlterUpsert) SetCreatedAt(v time.Time) *OrderAlterUpsert {
	u.Set(orderalter.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateCreatedAt() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlterUpsert) SetUpdatedAt(v time.Time) *OrderAlterUpsert {
	u.Set(orderalter.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateUpdatedAt() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderAlterUpsert) SetDeletedAt(v time.Time) *OrderAlterUpsert {
	u.Set(orderalter.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateDeletedAt() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderAlterUpsert) ClearDeletedAt() *OrderAlterUpsert {
	u.SetNull(orderalter.FieldDeletedAt)
	return u
}

// SetCreator sets the "creator" field.
func (u *OrderAlterUpsert) SetCreator(v *model.Modifier) *OrderAlterUpsert {
	u.Set(orderalter.FieldCreator, v)
	return u
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateCreator() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldCreator)
	return u
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderAlterUpsert) ClearCreator() *OrderAlterUpsert {
	u.SetNull(orderalter.FieldCreator)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderAlterUpsert) SetLastModifier(v *model.Modifier) *OrderAlterUpsert {
	u.Set(orderalter.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateLastModifier() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderAlterUpsert) ClearLastModifier() *OrderAlterUpsert {
	u.SetNull(orderalter.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *OrderAlterUpsert) SetRemark(v string) *OrderAlterUpsert {
	u.Set(orderalter.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateRemark() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderAlterUpsert) ClearRemark() *OrderAlterUpsert {
	u.SetNull(orderalter.FieldRemark)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *OrderAlterUpsert) SetRiderID(v uint64) *OrderAlterUpsert {
	u.Set(orderalter.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateRiderID() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldRiderID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderAlterUpsert) SetOrderID(v uint64) *OrderAlterUpsert {
	u.Set(orderalter.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateOrderID() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldOrderID)
	return u
}

// SetDays sets the "days" field.
func (u *OrderAlterUpsert) SetDays(v int) *OrderAlterUpsert {
	u.Set(orderalter.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateDays() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *OrderAlterUpsert) AddDays(v int) *OrderAlterUpsert {
	u.Add(orderalter.FieldDays, v)
	return u
}

// SetReason sets the "reason" field.
func (u *OrderAlterUpsert) SetReason(v string) *OrderAlterUpsert {
	u.Set(orderalter.FieldReason, v)
	return u
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderAlterUpsert) UpdateReason() *OrderAlterUpsert {
	u.SetExcluded(orderalter.FieldReason)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.OrderAlter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderAlterUpsertOne) UpdateNewValues() *OrderAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(orderalter.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(orderalter.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderAlter.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderAlterUpsertOne) Ignore() *OrderAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderAlterUpsertOne) DoNothing() *OrderAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderAlterCreate.OnConflict
// documentation for more info.
func (u *OrderAlterUpsertOne) Update(set func(*OrderAlterUpsert)) *OrderAlterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderAlterUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderAlterUpsertOne) SetCreatedAt(v time.Time) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateCreatedAt() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlterUpsertOne) SetUpdatedAt(v time.Time) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateUpdatedAt() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderAlterUpsertOne) SetDeletedAt(v time.Time) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateDeletedAt() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderAlterUpsertOne) ClearDeletedAt() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderAlterUpsertOne) SetCreator(v *model.Modifier) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateCreator() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderAlterUpsertOne) ClearCreator() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderAlterUpsertOne) SetLastModifier(v *model.Modifier) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateLastModifier() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderAlterUpsertOne) ClearLastModifier() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderAlterUpsertOne) SetRemark(v string) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateRemark() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderAlterUpsertOne) ClearRemark() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderAlterUpsertOne) SetRiderID(v uint64) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateRiderID() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderAlterUpsertOne) SetOrderID(v uint64) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateOrderID() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateOrderID()
	})
}

// SetDays sets the "days" field.
func (u *OrderAlterUpsertOne) SetDays(v int) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *OrderAlterUpsertOne) AddDays(v int) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateDays() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateDays()
	})
}

// SetReason sets the "reason" field.
func (u *OrderAlterUpsertOne) SetReason(v string) *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderAlterUpsertOne) UpdateReason() *OrderAlterUpsertOne {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateReason()
	})
}

// Exec executes the query.
func (u *OrderAlterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderAlterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderAlterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderAlterUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderAlterUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderAlterCreateBulk is the builder for creating many OrderAlter entities in bulk.
type OrderAlterCreateBulk struct {
	config
	builders []*OrderAlterCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderAlter entities in the database.
func (oacb *OrderAlterCreateBulk) Save(ctx context.Context) ([]*OrderAlter, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oacb.builders))
	nodes := make([]*OrderAlter, len(oacb.builders))
	mutators := make([]Mutator, len(oacb.builders))
	for i := range oacb.builders {
		func(i int, root context.Context) {
			builder := oacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderAlterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oacb *OrderAlterCreateBulk) SaveX(ctx context.Context) []*OrderAlter {
	v, err := oacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oacb *OrderAlterCreateBulk) Exec(ctx context.Context) error {
	_, err := oacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oacb *OrderAlterCreateBulk) ExecX(ctx context.Context) {
	if err := oacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderAlter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderAlterUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oacb *OrderAlterCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderAlterUpsertBulk {
	oacb.conflict = opts
	return &OrderAlterUpsertBulk{
		create: oacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderAlter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oacb *OrderAlterCreateBulk) OnConflictColumns(columns ...string) *OrderAlterUpsertBulk {
	oacb.conflict = append(oacb.conflict, sql.ConflictColumns(columns...))
	return &OrderAlterUpsertBulk{
		create: oacb,
	}
}

// OrderAlterUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderAlter nodes.
type OrderAlterUpsertBulk struct {
	create *OrderAlterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderAlter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *OrderAlterUpsertBulk) UpdateNewValues() *OrderAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(orderalter.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(orderalter.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderAlter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderAlterUpsertBulk) Ignore() *OrderAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderAlterUpsertBulk) DoNothing() *OrderAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderAlterCreateBulk.OnConflict
// documentation for more info.
func (u *OrderAlterUpsertBulk) Update(set func(*OrderAlterUpsert)) *OrderAlterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderAlterUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderAlterUpsertBulk) SetCreatedAt(v time.Time) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateCreatedAt() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderAlterUpsertBulk) SetUpdatedAt(v time.Time) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateUpdatedAt() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderAlterUpsertBulk) SetDeletedAt(v time.Time) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateDeletedAt() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *OrderAlterUpsertBulk) ClearDeletedAt() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreator sets the "creator" field.
func (u *OrderAlterUpsertBulk) SetCreator(v *model.Modifier) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetCreator(v)
	})
}

// UpdateCreator sets the "creator" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateCreator() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateCreator()
	})
}

// ClearCreator clears the value of the "creator" field.
func (u *OrderAlterUpsertBulk) ClearCreator() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearCreator()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *OrderAlterUpsertBulk) SetLastModifier(v *model.Modifier) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateLastModifier() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *OrderAlterUpsertBulk) ClearLastModifier() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *OrderAlterUpsertBulk) SetRemark(v string) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateRemark() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *OrderAlterUpsertBulk) ClearRemark() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.ClearRemark()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *OrderAlterUpsertBulk) SetRiderID(v uint64) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateRiderID() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateRiderID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderAlterUpsertBulk) SetOrderID(v uint64) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateOrderID() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateOrderID()
	})
}

// SetDays sets the "days" field.
func (u *OrderAlterUpsertBulk) SetDays(v int) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *OrderAlterUpsertBulk) AddDays(v int) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateDays() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateDays()
	})
}

// SetReason sets the "reason" field.
func (u *OrderAlterUpsertBulk) SetReason(v string) *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.SetReason(v)
	})
}

// UpdateReason sets the "reason" field to the value that was provided on create.
func (u *OrderAlterUpsertBulk) UpdateReason() *OrderAlterUpsertBulk {
	return u.Update(func(s *OrderAlterUpsert) {
		s.UpdateReason()
	})
}

// Exec executes the query.
func (u *OrderAlterUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderAlterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderAlterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderAlterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
