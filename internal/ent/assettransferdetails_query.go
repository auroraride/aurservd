// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/agent"
	"github.com/auroraride/aurservd/internal/ent/asset"
	"github.com/auroraride/aurservd/internal/ent/assetmanager"
	"github.com/auroraride/aurservd/internal/ent/assettransfer"
	"github.com/auroraride/aurservd/internal/ent/assettransferdetails"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/maintainer"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
)

// AssetTransferDetailsQuery is the builder for querying AssetTransferDetails entities.
type AssetTransferDetailsQuery struct {
	config
	ctx                     *QueryContext
	order                   []assettransferdetails.OrderOption
	inters                  []Interceptor
	predicates              []predicate.AssetTransferDetails
	withTransfer            *AssetTransferQuery
	withInOperateManager    *AssetManagerQuery
	withInOperateStore      *StoreQuery
	withInOperateAgent      *AgentQuery
	withInOperateMaintainer *MaintainerQuery
	withInOperateCabinet    *CabinetQuery
	withInOperateRider      *RiderQuery
	withAsset               *AssetQuery
	modifiers               []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetTransferDetailsQuery builder.
func (atdq *AssetTransferDetailsQuery) Where(ps ...predicate.AssetTransferDetails) *AssetTransferDetailsQuery {
	atdq.predicates = append(atdq.predicates, ps...)
	return atdq
}

// Limit the number of records to be returned by this query.
func (atdq *AssetTransferDetailsQuery) Limit(limit int) *AssetTransferDetailsQuery {
	atdq.ctx.Limit = &limit
	return atdq
}

// Offset to start from.
func (atdq *AssetTransferDetailsQuery) Offset(offset int) *AssetTransferDetailsQuery {
	atdq.ctx.Offset = &offset
	return atdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (atdq *AssetTransferDetailsQuery) Unique(unique bool) *AssetTransferDetailsQuery {
	atdq.ctx.Unique = &unique
	return atdq
}

// Order specifies how the records should be ordered.
func (atdq *AssetTransferDetailsQuery) Order(o ...assettransferdetails.OrderOption) *AssetTransferDetailsQuery {
	atdq.order = append(atdq.order, o...)
	return atdq
}

// QueryTransfer chains the current query on the "transfer" edge.
func (atdq *AssetTransferDetailsQuery) QueryTransfer() *AssetTransferQuery {
	query := (&AssetTransferClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(assettransfer.Table, assettransfer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferdetails.TransferTable, assettransferdetails.TransferColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateManager chains the current query on the "in_operate_manager" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateManager() *AssetManagerQuery {
	query := (&AssetManagerClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(assetmanager.Table, assetmanager.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateManagerTable, assettransferdetails.InOperateManagerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateStore chains the current query on the "in_operate_store" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateStore() *StoreQuery {
	query := (&StoreClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateStoreTable, assettransferdetails.InOperateStoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateAgent chains the current query on the "in_operate_agent" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateAgent() *AgentQuery {
	query := (&AgentClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateAgentTable, assettransferdetails.InOperateAgentColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateMaintainer chains the current query on the "in_operate_maintainer" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateMaintainer() *MaintainerQuery {
	query := (&MaintainerClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(maintainer.Table, maintainer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateMaintainerTable, assettransferdetails.InOperateMaintainerColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateCabinet chains the current query on the "in_operate_cabinet" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateCabinet() *CabinetQuery {
	query := (&CabinetClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateCabinetTable, assettransferdetails.InOperateCabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInOperateRider chains the current query on the "in_operate_rider" edge.
func (atdq *AssetTransferDetailsQuery) QueryInOperateRider() *RiderQuery {
	query := (&RiderClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assettransferdetails.InOperateRiderTable, assettransferdetails.InOperateRiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAsset chains the current query on the "asset" edge.
func (atdq *AssetTransferDetailsQuery) QueryAsset() *AssetQuery {
	query := (&AssetClient{config: atdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := atdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := atdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assettransferdetails.Table, assettransferdetails.FieldID, selector),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assettransferdetails.AssetTable, assettransferdetails.AssetColumn),
		)
		fromU = sqlgraph.SetNeighbors(atdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssetTransferDetails entity from the query.
// Returns a *NotFoundError when no AssetTransferDetails was found.
func (atdq *AssetTransferDetailsQuery) First(ctx context.Context) (*AssetTransferDetails, error) {
	nodes, err := atdq.Limit(1).All(setContextOp(ctx, atdq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assettransferdetails.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) FirstX(ctx context.Context) *AssetTransferDetails {
	node, err := atdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssetTransferDetails ID from the query.
// Returns a *NotFoundError when no AssetTransferDetails ID was found.
func (atdq *AssetTransferDetailsQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = atdq.Limit(1).IDs(setContextOp(ctx, atdq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assettransferdetails.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := atdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssetTransferDetails entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssetTransferDetails entity is found.
// Returns a *NotFoundError when no AssetTransferDetails entities are found.
func (atdq *AssetTransferDetailsQuery) Only(ctx context.Context) (*AssetTransferDetails, error) {
	nodes, err := atdq.Limit(2).All(setContextOp(ctx, atdq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assettransferdetails.Label}
	default:
		return nil, &NotSingularError{assettransferdetails.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) OnlyX(ctx context.Context) *AssetTransferDetails {
	node, err := atdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssetTransferDetails ID in the query.
// Returns a *NotSingularError when more than one AssetTransferDetails ID is found.
// Returns a *NotFoundError when no entities are found.
func (atdq *AssetTransferDetailsQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = atdq.Limit(2).IDs(setContextOp(ctx, atdq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assettransferdetails.Label}
	default:
		err = &NotSingularError{assettransferdetails.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := atdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssetTransferDetailsSlice.
func (atdq *AssetTransferDetailsQuery) All(ctx context.Context) ([]*AssetTransferDetails, error) {
	ctx = setContextOp(ctx, atdq.ctx, "All")
	if err := atdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssetTransferDetails, *AssetTransferDetailsQuery]()
	return withInterceptors[[]*AssetTransferDetails](ctx, atdq, qr, atdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) AllX(ctx context.Context) []*AssetTransferDetails {
	nodes, err := atdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssetTransferDetails IDs.
func (atdq *AssetTransferDetailsQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if atdq.ctx.Unique == nil && atdq.path != nil {
		atdq.Unique(true)
	}
	ctx = setContextOp(ctx, atdq.ctx, "IDs")
	if err = atdq.Select(assettransferdetails.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := atdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (atdq *AssetTransferDetailsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, atdq.ctx, "Count")
	if err := atdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, atdq, querierCount[*AssetTransferDetailsQuery](), atdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) CountX(ctx context.Context) int {
	count, err := atdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (atdq *AssetTransferDetailsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, atdq.ctx, "Exist")
	switch _, err := atdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (atdq *AssetTransferDetailsQuery) ExistX(ctx context.Context) bool {
	exist, err := atdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetTransferDetailsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (atdq *AssetTransferDetailsQuery) Clone() *AssetTransferDetailsQuery {
	if atdq == nil {
		return nil
	}
	return &AssetTransferDetailsQuery{
		config:                  atdq.config,
		ctx:                     atdq.ctx.Clone(),
		order:                   append([]assettransferdetails.OrderOption{}, atdq.order...),
		inters:                  append([]Interceptor{}, atdq.inters...),
		predicates:              append([]predicate.AssetTransferDetails{}, atdq.predicates...),
		withTransfer:            atdq.withTransfer.Clone(),
		withInOperateManager:    atdq.withInOperateManager.Clone(),
		withInOperateStore:      atdq.withInOperateStore.Clone(),
		withInOperateAgent:      atdq.withInOperateAgent.Clone(),
		withInOperateMaintainer: atdq.withInOperateMaintainer.Clone(),
		withInOperateCabinet:    atdq.withInOperateCabinet.Clone(),
		withInOperateRider:      atdq.withInOperateRider.Clone(),
		withAsset:               atdq.withAsset.Clone(),
		// clone intermediate query.
		sql:  atdq.sql.Clone(),
		path: atdq.path,
	}
}

// WithTransfer tells the query-builder to eager-load the nodes that are connected to
// the "transfer" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithTransfer(opts ...func(*AssetTransferQuery)) *AssetTransferDetailsQuery {
	query := (&AssetTransferClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withTransfer = query
	return atdq
}

// WithInOperateManager tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_manager" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateManager(opts ...func(*AssetManagerQuery)) *AssetTransferDetailsQuery {
	query := (&AssetManagerClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateManager = query
	return atdq
}

// WithInOperateStore tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_store" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateStore(opts ...func(*StoreQuery)) *AssetTransferDetailsQuery {
	query := (&StoreClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateStore = query
	return atdq
}

// WithInOperateAgent tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_agent" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateAgent(opts ...func(*AgentQuery)) *AssetTransferDetailsQuery {
	query := (&AgentClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateAgent = query
	return atdq
}

// WithInOperateMaintainer tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_maintainer" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateMaintainer(opts ...func(*MaintainerQuery)) *AssetTransferDetailsQuery {
	query := (&MaintainerClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateMaintainer = query
	return atdq
}

// WithInOperateCabinet tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateCabinet(opts ...func(*CabinetQuery)) *AssetTransferDetailsQuery {
	query := (&CabinetClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateCabinet = query
	return atdq
}

// WithInOperateRider tells the query-builder to eager-load the nodes that are connected to
// the "in_operate_rider" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithInOperateRider(opts ...func(*RiderQuery)) *AssetTransferDetailsQuery {
	query := (&RiderClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withInOperateRider = query
	return atdq
}

// WithAsset tells the query-builder to eager-load the nodes that are connected to
// the "asset" edge. The optional arguments are used to configure the query builder of the edge.
func (atdq *AssetTransferDetailsQuery) WithAsset(opts ...func(*AssetQuery)) *AssetTransferDetailsQuery {
	query := (&AssetClient{config: atdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	atdq.withAsset = query
	return atdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssetTransferDetails.Query().
//		GroupBy(assettransferdetails.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (atdq *AssetTransferDetailsQuery) GroupBy(field string, fields ...string) *AssetTransferDetailsGroupBy {
	atdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetTransferDetailsGroupBy{build: atdq}
	grbuild.flds = &atdq.ctx.Fields
	grbuild.label = assettransferdetails.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssetTransferDetails.Query().
//		Select(assettransferdetails.FieldCreatedAt).
//		Scan(ctx, &v)
func (atdq *AssetTransferDetailsQuery) Select(fields ...string) *AssetTransferDetailsSelect {
	atdq.ctx.Fields = append(atdq.ctx.Fields, fields...)
	sbuild := &AssetTransferDetailsSelect{AssetTransferDetailsQuery: atdq}
	sbuild.label = assettransferdetails.Label
	sbuild.flds, sbuild.scan = &atdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetTransferDetailsSelect configured with the given aggregations.
func (atdq *AssetTransferDetailsQuery) Aggregate(fns ...AggregateFunc) *AssetTransferDetailsSelect {
	return atdq.Select().Aggregate(fns...)
}

func (atdq *AssetTransferDetailsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range atdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, atdq); err != nil {
				return err
			}
		}
	}
	for _, f := range atdq.ctx.Fields {
		if !assettransferdetails.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if atdq.path != nil {
		prev, err := atdq.path(ctx)
		if err != nil {
			return err
		}
		atdq.sql = prev
	}
	return nil
}

func (atdq *AssetTransferDetailsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssetTransferDetails, error) {
	var (
		nodes       = []*AssetTransferDetails{}
		_spec       = atdq.querySpec()
		loadedTypes = [8]bool{
			atdq.withTransfer != nil,
			atdq.withInOperateManager != nil,
			atdq.withInOperateStore != nil,
			atdq.withInOperateAgent != nil,
			atdq.withInOperateMaintainer != nil,
			atdq.withInOperateCabinet != nil,
			atdq.withInOperateRider != nil,
			atdq.withAsset != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssetTransferDetails).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssetTransferDetails{config: atdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(atdq.modifiers) > 0 {
		_spec.Modifiers = atdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, atdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := atdq.withTransfer; query != nil {
		if err := atdq.loadTransfer(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *AssetTransfer) { n.Edges.Transfer = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateManager; query != nil {
		if err := atdq.loadInOperateManager(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *AssetManager) { n.Edges.InOperateManager = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateStore; query != nil {
		if err := atdq.loadInOperateStore(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Store) { n.Edges.InOperateStore = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateAgent; query != nil {
		if err := atdq.loadInOperateAgent(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Agent) { n.Edges.InOperateAgent = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateMaintainer; query != nil {
		if err := atdq.loadInOperateMaintainer(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Maintainer) { n.Edges.InOperateMaintainer = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateCabinet; query != nil {
		if err := atdq.loadInOperateCabinet(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Cabinet) { n.Edges.InOperateCabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withInOperateRider; query != nil {
		if err := atdq.loadInOperateRider(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Rider) { n.Edges.InOperateRider = e }); err != nil {
			return nil, err
		}
	}
	if query := atdq.withAsset; query != nil {
		if err := atdq.loadAsset(ctx, query, nodes, nil,
			func(n *AssetTransferDetails, e *Asset) { n.Edges.Asset = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (atdq *AssetTransferDetailsQuery) loadTransfer(ctx context.Context, query *AssetTransferQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *AssetTransfer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].TransferID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assettransfer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "transfer_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateManager(ctx context.Context, query *AssetManagerQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *AssetManager)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assetmanager.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateStore(ctx context.Context, query *StoreQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateAgent(ctx context.Context, query *AgentQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Agent)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateMaintainer(ctx context.Context, query *MaintainerQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Maintainer)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(maintainer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateCabinet(ctx context.Context, query *CabinetQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadInOperateRider(ctx context.Context, query *RiderQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].InOperateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "in_operate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (atdq *AssetTransferDetailsQuery) loadAsset(ctx context.Context, query *AssetQuery, nodes []*AssetTransferDetails, init func(*AssetTransferDetails), assign func(*AssetTransferDetails, *Asset)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*AssetTransferDetails)
	for i := range nodes {
		fk := nodes[i].AssetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(asset.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "asset_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (atdq *AssetTransferDetailsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := atdq.querySpec()
	if len(atdq.modifiers) > 0 {
		_spec.Modifiers = atdq.modifiers
	}
	_spec.Node.Columns = atdq.ctx.Fields
	if len(atdq.ctx.Fields) > 0 {
		_spec.Unique = atdq.ctx.Unique != nil && *atdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, atdq.driver, _spec)
}

func (atdq *AssetTransferDetailsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assettransferdetails.Table, assettransferdetails.Columns, sqlgraph.NewFieldSpec(assettransferdetails.FieldID, field.TypeUint64))
	_spec.From = atdq.sql
	if unique := atdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if atdq.path != nil {
		_spec.Unique = true
	}
	if fields := atdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assettransferdetails.FieldID)
		for i := range fields {
			if fields[i] != assettransferdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if atdq.withTransfer != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldTransferID)
		}
		if atdq.withInOperateManager != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withInOperateStore != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withInOperateAgent != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withInOperateMaintainer != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withInOperateCabinet != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withInOperateRider != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldInOperateID)
		}
		if atdq.withAsset != nil {
			_spec.Node.AddColumnOnce(assettransferdetails.FieldAssetID)
		}
	}
	if ps := atdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := atdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := atdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := atdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (atdq *AssetTransferDetailsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(atdq.driver.Dialect())
	t1 := builder.Table(assettransferdetails.Table)
	columns := atdq.ctx.Fields
	if len(columns) == 0 {
		columns = assettransferdetails.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if atdq.sql != nil {
		selector = atdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if atdq.ctx.Unique != nil && *atdq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range atdq.modifiers {
		m(selector)
	}
	for _, p := range atdq.predicates {
		p(selector)
	}
	for _, p := range atdq.order {
		p(selector)
	}
	if offset := atdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := atdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (atdq *AssetTransferDetailsQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetTransferDetailsSelect {
	atdq.modifiers = append(atdq.modifiers, modifiers...)
	return atdq.Select()
}

type AssetTransferDetailsQueryWith string

var (
	AssetTransferDetailsQueryWithTransfer            AssetTransferDetailsQueryWith = "Transfer"
	AssetTransferDetailsQueryWithInOperateManager    AssetTransferDetailsQueryWith = "InOperateManager"
	AssetTransferDetailsQueryWithInOperateStore      AssetTransferDetailsQueryWith = "InOperateStore"
	AssetTransferDetailsQueryWithInOperateAgent      AssetTransferDetailsQueryWith = "InOperateAgent"
	AssetTransferDetailsQueryWithInOperateMaintainer AssetTransferDetailsQueryWith = "InOperateMaintainer"
	AssetTransferDetailsQueryWithInOperateCabinet    AssetTransferDetailsQueryWith = "InOperateCabinet"
	AssetTransferDetailsQueryWithInOperateRider      AssetTransferDetailsQueryWith = "InOperateRider"
	AssetTransferDetailsQueryWithAsset               AssetTransferDetailsQueryWith = "Asset"
)

func (atdq *AssetTransferDetailsQuery) With(withEdges ...AssetTransferDetailsQueryWith) *AssetTransferDetailsQuery {
	for _, v := range withEdges {
		switch v {
		case AssetTransferDetailsQueryWithTransfer:
			atdq.WithTransfer()
		case AssetTransferDetailsQueryWithInOperateManager:
			atdq.WithInOperateManager()
		case AssetTransferDetailsQueryWithInOperateStore:
			atdq.WithInOperateStore()
		case AssetTransferDetailsQueryWithInOperateAgent:
			atdq.WithInOperateAgent()
		case AssetTransferDetailsQueryWithInOperateMaintainer:
			atdq.WithInOperateMaintainer()
		case AssetTransferDetailsQueryWithInOperateCabinet:
			atdq.WithInOperateCabinet()
		case AssetTransferDetailsQueryWithInOperateRider:
			atdq.WithInOperateRider()
		case AssetTransferDetailsQueryWithAsset:
			atdq.WithAsset()
		}
	}
	return atdq
}

// AssetTransferDetailsGroupBy is the group-by builder for AssetTransferDetails entities.
type AssetTransferDetailsGroupBy struct {
	selector
	build *AssetTransferDetailsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (atdgb *AssetTransferDetailsGroupBy) Aggregate(fns ...AggregateFunc) *AssetTransferDetailsGroupBy {
	atdgb.fns = append(atdgb.fns, fns...)
	return atdgb
}

// Scan applies the selector query and scans the result into the given value.
func (atdgb *AssetTransferDetailsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atdgb.build.ctx, "GroupBy")
	if err := atdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferDetailsQuery, *AssetTransferDetailsGroupBy](ctx, atdgb.build, atdgb, atdgb.build.inters, v)
}

func (atdgb *AssetTransferDetailsGroupBy) sqlScan(ctx context.Context, root *AssetTransferDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(atdgb.fns))
	for _, fn := range atdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*atdgb.flds)+len(atdgb.fns))
		for _, f := range *atdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*atdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetTransferDetailsSelect is the builder for selecting fields of AssetTransferDetails entities.
type AssetTransferDetailsSelect struct {
	*AssetTransferDetailsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (atds *AssetTransferDetailsSelect) Aggregate(fns ...AggregateFunc) *AssetTransferDetailsSelect {
	atds.fns = append(atds.fns, fns...)
	return atds
}

// Scan applies the selector query and scans the result into the given value.
func (atds *AssetTransferDetailsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, atds.ctx, "Select")
	if err := atds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetTransferDetailsQuery, *AssetTransferDetailsSelect](ctx, atds.AssetTransferDetailsQuery, atds, atds.inters, v)
}

func (atds *AssetTransferDetailsSelect) sqlScan(ctx context.Context, root *AssetTransferDetailsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(atds.fns))
	for _, fn := range atds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*atds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := atds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (atds *AssetTransferDetailsSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetTransferDetailsSelect {
	atds.modifiers = append(atds.modifiers, modifiers...)
	return atds
}
