// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/advert"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// AdvertUpdate is the builder for updating Advert entities.
type AdvertUpdate struct {
	config
	hooks     []Hook
	mutation  *AdvertMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdvertUpdate builder.
func (au *AdvertUpdate) Where(ps ...predicate.Advert) *AdvertUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdvertUpdate) SetUpdatedAt(t time.Time) *AdvertUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AdvertUpdate) SetDeletedAt(t time.Time) *AdvertUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableDeletedAt(t *time.Time) *AdvertUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AdvertUpdate) ClearDeletedAt() *AdvertUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AdvertUpdate) SetLastModifier(m *model.Modifier) *AdvertUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AdvertUpdate) ClearLastModifier() *AdvertUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AdvertUpdate) SetRemark(s string) *AdvertUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableRemark(s *string) *AdvertUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AdvertUpdate) ClearRemark() *AdvertUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetName sets the "name" field.
func (au *AdvertUpdate) SetName(s string) *AdvertUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableName(s *string) *AdvertUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetImage sets the "image" field.
func (au *AdvertUpdate) SetImage(s string) *AdvertUpdate {
	au.mutation.SetImage(s)
	return au
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableImage(s *string) *AdvertUpdate {
	if s != nil {
		au.SetImage(*s)
	}
	return au
}

// SetLink sets the "link" field.
func (au *AdvertUpdate) SetLink(s string) *AdvertUpdate {
	au.mutation.SetLink(s)
	return au
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableLink(s *string) *AdvertUpdate {
	if s != nil {
		au.SetLink(*s)
	}
	return au
}

// SetSort sets the "sort" field.
func (au *AdvertUpdate) SetSort(i int) *AdvertUpdate {
	au.mutation.ResetSort()
	au.mutation.SetSort(i)
	return au
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (au *AdvertUpdate) SetNillableSort(i *int) *AdvertUpdate {
	if i != nil {
		au.SetSort(*i)
	}
	return au
}

// AddSort adds i to the "sort" field.
func (au *AdvertUpdate) AddSort(i int) *AdvertUpdate {
	au.mutation.AddSort(i)
	return au
}

// Mutation returns the AdvertMutation object of the builder.
func (au *AdvertUpdate) Mutation() *AdvertMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdvertUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdvertUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdvertUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdvertUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdvertUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if advert.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized advert.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := advert.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AdvertUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdvertUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AdvertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(advert.Table, advert.Columns, sqlgraph.NewFieldSpec(advert.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(advert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(advert.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(advert.FieldDeletedAt, field.TypeTime)
	}
	if au.mutation.CreatorCleared() {
		_spec.ClearField(advert.FieldCreator, field.TypeJSON)
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.SetField(advert.FieldLastModifier, field.TypeJSON, value)
	}
	if au.mutation.LastModifierCleared() {
		_spec.ClearField(advert.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.SetField(advert.FieldRemark, field.TypeString, value)
	}
	if au.mutation.RemarkCleared() {
		_spec.ClearField(advert.FieldRemark, field.TypeString)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(advert.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Image(); ok {
		_spec.SetField(advert.FieldImage, field.TypeString, value)
	}
	if value, ok := au.mutation.Link(); ok {
		_spec.SetField(advert.FieldLink, field.TypeString, value)
	}
	if value, ok := au.mutation.Sort(); ok {
		_spec.SetField(advert.FieldSort, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedSort(); ok {
		_spec.AddField(advert.FieldSort, field.TypeInt, value)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{advert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdvertUpdateOne is the builder for updating a single Advert entity.
type AdvertUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdvertMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdvertUpdateOne) SetUpdatedAt(t time.Time) *AdvertUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AdvertUpdateOne) SetDeletedAt(t time.Time) *AdvertUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableDeletedAt(t *time.Time) *AdvertUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AdvertUpdateOne) ClearDeletedAt() *AdvertUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AdvertUpdateOne) SetLastModifier(m *model.Modifier) *AdvertUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AdvertUpdateOne) ClearLastModifier() *AdvertUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AdvertUpdateOne) SetRemark(s string) *AdvertUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableRemark(s *string) *AdvertUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AdvertUpdateOne) ClearRemark() *AdvertUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetName sets the "name" field.
func (auo *AdvertUpdateOne) SetName(s string) *AdvertUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableName(s *string) *AdvertUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetImage sets the "image" field.
func (auo *AdvertUpdateOne) SetImage(s string) *AdvertUpdateOne {
	auo.mutation.SetImage(s)
	return auo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableImage(s *string) *AdvertUpdateOne {
	if s != nil {
		auo.SetImage(*s)
	}
	return auo
}

// SetLink sets the "link" field.
func (auo *AdvertUpdateOne) SetLink(s string) *AdvertUpdateOne {
	auo.mutation.SetLink(s)
	return auo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableLink(s *string) *AdvertUpdateOne {
	if s != nil {
		auo.SetLink(*s)
	}
	return auo
}

// SetSort sets the "sort" field.
func (auo *AdvertUpdateOne) SetSort(i int) *AdvertUpdateOne {
	auo.mutation.ResetSort()
	auo.mutation.SetSort(i)
	return auo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (auo *AdvertUpdateOne) SetNillableSort(i *int) *AdvertUpdateOne {
	if i != nil {
		auo.SetSort(*i)
	}
	return auo
}

// AddSort adds i to the "sort" field.
func (auo *AdvertUpdateOne) AddSort(i int) *AdvertUpdateOne {
	auo.mutation.AddSort(i)
	return auo
}

// Mutation returns the AdvertMutation object of the builder.
func (auo *AdvertUpdateOne) Mutation() *AdvertMutation {
	return auo.mutation
}

// Where appends a list predicates to the AdvertUpdate builder.
func (auo *AdvertUpdateOne) Where(ps ...predicate.Advert) *AdvertUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdvertUpdateOne) Select(field string, fields ...string) *AdvertUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Advert entity.
func (auo *AdvertUpdateOne) Save(ctx context.Context) (*Advert, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdvertUpdateOne) SaveX(ctx context.Context) *Advert {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdvertUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdvertUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdvertUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if advert.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized advert.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := advert.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AdvertUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdvertUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AdvertUpdateOne) sqlSave(ctx context.Context) (_node *Advert, err error) {
	_spec := sqlgraph.NewUpdateSpec(advert.Table, advert.Columns, sqlgraph.NewFieldSpec(advert.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Advert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, advert.FieldID)
		for _, f := range fields {
			if !advert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != advert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(advert.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(advert.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(advert.FieldDeletedAt, field.TypeTime)
	}
	if auo.mutation.CreatorCleared() {
		_spec.ClearField(advert.FieldCreator, field.TypeJSON)
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.SetField(advert.FieldLastModifier, field.TypeJSON, value)
	}
	if auo.mutation.LastModifierCleared() {
		_spec.ClearField(advert.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.SetField(advert.FieldRemark, field.TypeString, value)
	}
	if auo.mutation.RemarkCleared() {
		_spec.ClearField(advert.FieldRemark, field.TypeString)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(advert.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Image(); ok {
		_spec.SetField(advert.FieldImage, field.TypeString, value)
	}
	if value, ok := auo.mutation.Link(); ok {
		_spec.SetField(advert.FieldLink, field.TypeString, value)
	}
	if value, ok := auo.mutation.Sort(); ok {
		_spec.SetField(advert.FieldSort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedSort(); ok {
		_spec.AddField(advert.FieldSort, field.TypeInt, value)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Advert{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{advert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
