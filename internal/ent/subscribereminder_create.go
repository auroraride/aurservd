// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/plan"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
	"github.com/auroraride/aurservd/internal/ent/subscribereminder"
)

// SubscribeReminderCreate is the builder for creating a SubscribeReminder entity.
type SubscribeReminderCreate struct {
	config
	mutation *SubscribeReminderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (src *SubscribeReminderCreate) SetCreatedAt(t time.Time) *SubscribeReminderCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SubscribeReminderCreate) SetNillableCreatedAt(t *time.Time) *SubscribeReminderCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SubscribeReminderCreate) SetUpdatedAt(t time.Time) *SubscribeReminderCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SubscribeReminderCreate) SetNillableUpdatedAt(t *time.Time) *SubscribeReminderCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetSubscribeID sets the "subscribe_id" field.
func (src *SubscribeReminderCreate) SetSubscribeID(u uint64) *SubscribeReminderCreate {
	src.mutation.SetSubscribeID(u)
	return src
}

// SetPlanID sets the "plan_id" field.
func (src *SubscribeReminderCreate) SetPlanID(u uint64) *SubscribeReminderCreate {
	src.mutation.SetPlanID(u)
	return src
}

// SetRiderID sets the "rider_id" field.
func (src *SubscribeReminderCreate) SetRiderID(u uint64) *SubscribeReminderCreate {
	src.mutation.SetRiderID(u)
	return src
}

// SetType sets the "type" field.
func (src *SubscribeReminderCreate) SetType(s subscribereminder.Type) *SubscribeReminderCreate {
	src.mutation.SetType(s)
	return src
}

// SetPhone sets the "phone" field.
func (src *SubscribeReminderCreate) SetPhone(s string) *SubscribeReminderCreate {
	src.mutation.SetPhone(s)
	return src
}

// SetName sets the "name" field.
func (src *SubscribeReminderCreate) SetName(s string) *SubscribeReminderCreate {
	src.mutation.SetName(s)
	return src
}

// SetSuccess sets the "success" field.
func (src *SubscribeReminderCreate) SetSuccess(b bool) *SubscribeReminderCreate {
	src.mutation.SetSuccess(b)
	return src
}

// SetDays sets the "days" field.
func (src *SubscribeReminderCreate) SetDays(i int) *SubscribeReminderCreate {
	src.mutation.SetDays(i)
	return src
}

// SetPlanName sets the "plan_name" field.
func (src *SubscribeReminderCreate) SetPlanName(s string) *SubscribeReminderCreate {
	src.mutation.SetPlanName(s)
	return src
}

// SetDate sets the "date" field.
func (src *SubscribeReminderCreate) SetDate(s string) *SubscribeReminderCreate {
	src.mutation.SetDate(s)
	return src
}

// SetFee sets the "fee" field.
func (src *SubscribeReminderCreate) SetFee(f float64) *SubscribeReminderCreate {
	src.mutation.SetFee(f)
	return src
}

// SetNillableFee sets the "fee" field if the given value is not nil.
func (src *SubscribeReminderCreate) SetNillableFee(f *float64) *SubscribeReminderCreate {
	if f != nil {
		src.SetFee(*f)
	}
	return src
}

// SetFeeFormula sets the "fee_formula" field.
func (src *SubscribeReminderCreate) SetFeeFormula(s string) *SubscribeReminderCreate {
	src.mutation.SetFeeFormula(s)
	return src
}

// SetNillableFeeFormula sets the "fee_formula" field if the given value is not nil.
func (src *SubscribeReminderCreate) SetNillableFeeFormula(s *string) *SubscribeReminderCreate {
	if s != nil {
		src.SetFeeFormula(*s)
	}
	return src
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (src *SubscribeReminderCreate) SetSubscribe(s *Subscribe) *SubscribeReminderCreate {
	return src.SetSubscribeID(s.ID)
}

// SetPlan sets the "plan" edge to the Plan entity.
func (src *SubscribeReminderCreate) SetPlan(p *Plan) *SubscribeReminderCreate {
	return src.SetPlanID(p.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (src *SubscribeReminderCreate) SetRider(r *Rider) *SubscribeReminderCreate {
	return src.SetRiderID(r.ID)
}

// Mutation returns the SubscribeReminderMutation object of the builder.
func (src *SubscribeReminderCreate) Mutation() *SubscribeReminderMutation {
	return src.mutation
}

// Save creates the SubscribeReminder in the database.
func (src *SubscribeReminderCreate) Save(ctx context.Context) (*SubscribeReminder, error) {
	src.defaults()
	return withHooks(ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *SubscribeReminderCreate) SaveX(ctx context.Context) *SubscribeReminder {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SubscribeReminderCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SubscribeReminderCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SubscribeReminderCreate) defaults() {
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := subscribereminder.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := subscribereminder.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
	if _, ok := src.mutation.Fee(); !ok {
		v := subscribereminder.DefaultFee
		src.mutation.SetFee(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SubscribeReminderCreate) check() error {
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SubscribeReminder.created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SubscribeReminder.updated_at"`)}
	}
	if _, ok := src.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe_id", err: errors.New(`ent: missing required field "SubscribeReminder.subscribe_id"`)}
	}
	if _, ok := src.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`ent: missing required field "SubscribeReminder.plan_id"`)}
	}
	if _, ok := src.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider_id", err: errors.New(`ent: missing required field "SubscribeReminder.rider_id"`)}
	}
	if _, ok := src.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "SubscribeReminder.type"`)}
	}
	if v, ok := src.mutation.GetType(); ok {
		if err := subscribereminder.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "SubscribeReminder.type": %w`, err)}
		}
	}
	if _, ok := src.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "SubscribeReminder.phone"`)}
	}
	if _, ok := src.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SubscribeReminder.name"`)}
	}
	if _, ok := src.mutation.Success(); !ok {
		return &ValidationError{Name: "success", err: errors.New(`ent: missing required field "SubscribeReminder.success"`)}
	}
	if _, ok := src.mutation.Days(); !ok {
		return &ValidationError{Name: "days", err: errors.New(`ent: missing required field "SubscribeReminder.days"`)}
	}
	if _, ok := src.mutation.PlanName(); !ok {
		return &ValidationError{Name: "plan_name", err: errors.New(`ent: missing required field "SubscribeReminder.plan_name"`)}
	}
	if _, ok := src.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "SubscribeReminder.date"`)}
	}
	if _, ok := src.mutation.Fee(); !ok {
		return &ValidationError{Name: "fee", err: errors.New(`ent: missing required field "SubscribeReminder.fee"`)}
	}
	if _, ok := src.mutation.SubscribeID(); !ok {
		return &ValidationError{Name: "subscribe", err: errors.New(`ent: missing required edge "SubscribeReminder.subscribe"`)}
	}
	if _, ok := src.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan", err: errors.New(`ent: missing required edge "SubscribeReminder.plan"`)}
	}
	if _, ok := src.mutation.RiderID(); !ok {
		return &ValidationError{Name: "rider", err: errors.New(`ent: missing required edge "SubscribeReminder.rider"`)}
	}
	return nil
}

func (src *SubscribeReminderCreate) sqlSave(ctx context.Context) (*SubscribeReminder, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *SubscribeReminderCreate) createSpec() (*SubscribeReminder, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscribeReminder{config: src.config}
		_spec = sqlgraph.NewCreateSpec(subscribereminder.Table, sqlgraph.NewFieldSpec(subscribereminder.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = src.conflict
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.SetField(subscribereminder.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribereminder.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.GetType(); ok {
		_spec.SetField(subscribereminder.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := src.mutation.Phone(); ok {
		_spec.SetField(subscribereminder.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := src.mutation.Name(); ok {
		_spec.SetField(subscribereminder.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := src.mutation.Success(); ok {
		_spec.SetField(subscribereminder.FieldSuccess, field.TypeBool, value)
		_node.Success = value
	}
	if value, ok := src.mutation.Days(); ok {
		_spec.SetField(subscribereminder.FieldDays, field.TypeInt, value)
		_node.Days = value
	}
	if value, ok := src.mutation.PlanName(); ok {
		_spec.SetField(subscribereminder.FieldPlanName, field.TypeString, value)
		_node.PlanName = value
	}
	if value, ok := src.mutation.Date(); ok {
		_spec.SetField(subscribereminder.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := src.mutation.Fee(); ok {
		_spec.SetField(subscribereminder.FieldFee, field.TypeFloat64, value)
		_node.Fee = value
	}
	if value, ok := src.mutation.FeeFormula(); ok {
		_spec.SetField(subscribereminder.FieldFeeFormula, field.TypeString, value)
		_node.FeeFormula = value
	}
	if nodes := src.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.SubscribeTable,
			Columns: []string{subscribereminder.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscribe.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscribeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.PlanTable,
			Columns: []string{subscribereminder.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(plan.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscribereminder.RiderTable,
			Columns: []string{subscribereminder.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rider.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RiderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeReminder.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeReminderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (src *SubscribeReminderCreate) OnConflict(opts ...sql.ConflictOption) *SubscribeReminderUpsertOne {
	src.conflict = opts
	return &SubscribeReminderUpsertOne{
		create: src,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (src *SubscribeReminderCreate) OnConflictColumns(columns ...string) *SubscribeReminderUpsertOne {
	src.conflict = append(src.conflict, sql.ConflictColumns(columns...))
	return &SubscribeReminderUpsertOne{
		create: src,
	}
}

type (
	// SubscribeReminderUpsertOne is the builder for "upsert"-ing
	//  one SubscribeReminder node.
	SubscribeReminderUpsertOne struct {
		create *SubscribeReminderCreate
	}

	// SubscribeReminderUpsert is the "OnConflict" setter.
	SubscribeReminderUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeReminderUpsert) SetUpdatedAt(v time.Time) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateUpdatedAt() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldUpdatedAt)
	return u
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeReminderUpsert) SetSubscribeID(v uint64) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldSubscribeID, v)
	return u
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateSubscribeID() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldSubscribeID)
	return u
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeReminderUpsert) SetPlanID(v uint64) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldPlanID, v)
	return u
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdatePlanID() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldPlanID)
	return u
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeReminderUpsert) SetRiderID(v uint64) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldRiderID, v)
	return u
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateRiderID() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldRiderID)
	return u
}

// SetType sets the "type" field.
func (u *SubscribeReminderUpsert) SetType(v subscribereminder.Type) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateType() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldType)
	return u
}

// SetPhone sets the "phone" field.
func (u *SubscribeReminderUpsert) SetPhone(v string) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdatePhone() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldPhone)
	return u
}

// SetName sets the "name" field.
func (u *SubscribeReminderUpsert) SetName(v string) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateName() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldName)
	return u
}

// SetSuccess sets the "success" field.
func (u *SubscribeReminderUpsert) SetSuccess(v bool) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldSuccess, v)
	return u
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateSuccess() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldSuccess)
	return u
}

// SetDays sets the "days" field.
func (u *SubscribeReminderUpsert) SetDays(v int) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldDays, v)
	return u
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateDays() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldDays)
	return u
}

// AddDays adds v to the "days" field.
func (u *SubscribeReminderUpsert) AddDays(v int) *SubscribeReminderUpsert {
	u.Add(subscribereminder.FieldDays, v)
	return u
}

// SetPlanName sets the "plan_name" field.
func (u *SubscribeReminderUpsert) SetPlanName(v string) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldPlanName, v)
	return u
}

// UpdatePlanName sets the "plan_name" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdatePlanName() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldPlanName)
	return u
}

// SetDate sets the "date" field.
func (u *SubscribeReminderUpsert) SetDate(v string) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateDate() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldDate)
	return u
}

// SetFee sets the "fee" field.
func (u *SubscribeReminderUpsert) SetFee(v float64) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldFee, v)
	return u
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateFee() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldFee)
	return u
}

// AddFee adds v to the "fee" field.
func (u *SubscribeReminderUpsert) AddFee(v float64) *SubscribeReminderUpsert {
	u.Add(subscribereminder.FieldFee, v)
	return u
}

// SetFeeFormula sets the "fee_formula" field.
func (u *SubscribeReminderUpsert) SetFeeFormula(v string) *SubscribeReminderUpsert {
	u.Set(subscribereminder.FieldFeeFormula, v)
	return u
}

// UpdateFeeFormula sets the "fee_formula" field to the value that was provided on create.
func (u *SubscribeReminderUpsert) UpdateFeeFormula() *SubscribeReminderUpsert {
	u.SetExcluded(subscribereminder.FieldFeeFormula)
	return u
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (u *SubscribeReminderUpsert) ClearFeeFormula() *SubscribeReminderUpsert {
	u.SetNull(subscribereminder.FieldFeeFormula)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeReminderUpsertOne) UpdateNewValues() *SubscribeReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscribereminder.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscribeReminderUpsertOne) Ignore() *SubscribeReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeReminderUpsertOne) DoNothing() *SubscribeReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeReminderCreate.OnConflict
// documentation for more info.
func (u *SubscribeReminderUpsertOne) Update(set func(*SubscribeReminderUpsert)) *SubscribeReminderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeReminderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeReminderUpsertOne) SetUpdatedAt(v time.Time) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateUpdatedAt() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeReminderUpsertOne) SetSubscribeID(v uint64) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateSubscribeID() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeReminderUpsertOne) SetPlanID(v uint64) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdatePlanID() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePlanID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeReminderUpsertOne) SetRiderID(v uint64) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateRiderID() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateRiderID()
	})
}

// SetType sets the "type" field.
func (u *SubscribeReminderUpsertOne) SetType(v subscribereminder.Type) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateType() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateType()
	})
}

// SetPhone sets the "phone" field.
func (u *SubscribeReminderUpsertOne) SetPhone(v string) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdatePhone() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePhone()
	})
}

// SetName sets the "name" field.
func (u *SubscribeReminderUpsertOne) SetName(v string) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateName() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateName()
	})
}

// SetSuccess sets the "success" field.
func (u *SubscribeReminderUpsertOne) SetSuccess(v bool) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateSuccess() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateSuccess()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeReminderUpsertOne) SetDays(v int) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeReminderUpsertOne) AddDays(v int) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateDays() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateDays()
	})
}

// SetPlanName sets the "plan_name" field.
func (u *SubscribeReminderUpsertOne) SetPlanName(v string) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPlanName(v)
	})
}

// UpdatePlanName sets the "plan_name" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdatePlanName() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePlanName()
	})
}

// SetDate sets the "date" field.
func (u *SubscribeReminderUpsertOne) SetDate(v string) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateDate() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateDate()
	})
}

// SetFee sets the "fee" field.
func (u *SubscribeReminderUpsertOne) SetFee(v float64) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *SubscribeReminderUpsertOne) AddFee(v float64) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateFee() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateFee()
	})
}

// SetFeeFormula sets the "fee_formula" field.
func (u *SubscribeReminderUpsertOne) SetFeeFormula(v string) *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetFeeFormula(v)
	})
}

// UpdateFeeFormula sets the "fee_formula" field to the value that was provided on create.
func (u *SubscribeReminderUpsertOne) UpdateFeeFormula() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateFeeFormula()
	})
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (u *SubscribeReminderUpsertOne) ClearFeeFormula() *SubscribeReminderUpsertOne {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.ClearFeeFormula()
	})
}

// Exec executes the query.
func (u *SubscribeReminderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeReminderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeReminderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscribeReminderUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscribeReminderUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscribeReminderCreateBulk is the builder for creating many SubscribeReminder entities in bulk.
type SubscribeReminderCreateBulk struct {
	config
	err      error
	builders []*SubscribeReminderCreate
	conflict []sql.ConflictOption
}

// Save creates the SubscribeReminder entities in the database.
func (srcb *SubscribeReminderCreateBulk) Save(ctx context.Context) ([]*SubscribeReminder, error) {
	if srcb.err != nil {
		return nil, srcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SubscribeReminder, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribeReminderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = srcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SubscribeReminderCreateBulk) SaveX(ctx context.Context) []*SubscribeReminder {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SubscribeReminderCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SubscribeReminderCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SubscribeReminder.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscribeReminderUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (srcb *SubscribeReminderCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscribeReminderUpsertBulk {
	srcb.conflict = opts
	return &SubscribeReminderUpsertBulk{
		create: srcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (srcb *SubscribeReminderCreateBulk) OnConflictColumns(columns ...string) *SubscribeReminderUpsertBulk {
	srcb.conflict = append(srcb.conflict, sql.ConflictColumns(columns...))
	return &SubscribeReminderUpsertBulk{
		create: srcb,
	}
}

// SubscribeReminderUpsertBulk is the builder for "upsert"-ing
// a bulk of SubscribeReminder nodes.
type SubscribeReminderUpsertBulk struct {
	create *SubscribeReminderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SubscribeReminderUpsertBulk) UpdateNewValues() *SubscribeReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscribereminder.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SubscribeReminder.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscribeReminderUpsertBulk) Ignore() *SubscribeReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscribeReminderUpsertBulk) DoNothing() *SubscribeReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscribeReminderCreateBulk.OnConflict
// documentation for more info.
func (u *SubscribeReminderUpsertBulk) Update(set func(*SubscribeReminderUpsert)) *SubscribeReminderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscribeReminderUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubscribeReminderUpsertBulk) SetUpdatedAt(v time.Time) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateUpdatedAt() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetSubscribeID sets the "subscribe_id" field.
func (u *SubscribeReminderUpsertBulk) SetSubscribeID(v uint64) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetSubscribeID(v)
	})
}

// UpdateSubscribeID sets the "subscribe_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateSubscribeID() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateSubscribeID()
	})
}

// SetPlanID sets the "plan_id" field.
func (u *SubscribeReminderUpsertBulk) SetPlanID(v uint64) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPlanID(v)
	})
}

// UpdatePlanID sets the "plan_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdatePlanID() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePlanID()
	})
}

// SetRiderID sets the "rider_id" field.
func (u *SubscribeReminderUpsertBulk) SetRiderID(v uint64) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetRiderID(v)
	})
}

// UpdateRiderID sets the "rider_id" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateRiderID() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateRiderID()
	})
}

// SetType sets the "type" field.
func (u *SubscribeReminderUpsertBulk) SetType(v subscribereminder.Type) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateType() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateType()
	})
}

// SetPhone sets the "phone" field.
func (u *SubscribeReminderUpsertBulk) SetPhone(v string) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdatePhone() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePhone()
	})
}

// SetName sets the "name" field.
func (u *SubscribeReminderUpsertBulk) SetName(v string) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateName() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateName()
	})
}

// SetSuccess sets the "success" field.
func (u *SubscribeReminderUpsertBulk) SetSuccess(v bool) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetSuccess(v)
	})
}

// UpdateSuccess sets the "success" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateSuccess() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateSuccess()
	})
}

// SetDays sets the "days" field.
func (u *SubscribeReminderUpsertBulk) SetDays(v int) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetDays(v)
	})
}

// AddDays adds v to the "days" field.
func (u *SubscribeReminderUpsertBulk) AddDays(v int) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.AddDays(v)
	})
}

// UpdateDays sets the "days" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateDays() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateDays()
	})
}

// SetPlanName sets the "plan_name" field.
func (u *SubscribeReminderUpsertBulk) SetPlanName(v string) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetPlanName(v)
	})
}

// UpdatePlanName sets the "plan_name" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdatePlanName() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdatePlanName()
	})
}

// SetDate sets the "date" field.
func (u *SubscribeReminderUpsertBulk) SetDate(v string) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateDate() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateDate()
	})
}

// SetFee sets the "fee" field.
func (u *SubscribeReminderUpsertBulk) SetFee(v float64) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetFee(v)
	})
}

// AddFee adds v to the "fee" field.
func (u *SubscribeReminderUpsertBulk) AddFee(v float64) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.AddFee(v)
	})
}

// UpdateFee sets the "fee" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateFee() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateFee()
	})
}

// SetFeeFormula sets the "fee_formula" field.
func (u *SubscribeReminderUpsertBulk) SetFeeFormula(v string) *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.SetFeeFormula(v)
	})
}

// UpdateFeeFormula sets the "fee_formula" field to the value that was provided on create.
func (u *SubscribeReminderUpsertBulk) UpdateFeeFormula() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.UpdateFeeFormula()
	})
}

// ClearFeeFormula clears the value of the "fee_formula" field.
func (u *SubscribeReminderUpsertBulk) ClearFeeFormula() *SubscribeReminderUpsertBulk {
	return u.Update(func(s *SubscribeReminderUpsert) {
		s.ClearFeeFormula()
	})
}

// Exec executes the query.
func (u *SubscribeReminderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscribeReminderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscribeReminderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscribeReminderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
