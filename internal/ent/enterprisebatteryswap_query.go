// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/battery"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/enterprise"
	"github.com/auroraride/aurservd/internal/ent/enterprisebatteryswap"
	"github.com/auroraride/aurservd/internal/ent/enterprisestation"
	"github.com/auroraride/aurservd/internal/ent/exchange"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// EnterpriseBatterySwapQuery is the builder for querying EnterpriseBatterySwap entities.
type EnterpriseBatterySwapQuery struct {
	config
	ctx                  *QueryContext
	order                []enterprisebatteryswap.OrderOption
	inters               []Interceptor
	predicates           []predicate.EnterpriseBatterySwap
	withExchange         *ExchangeQuery
	withCabinet          *CabinetQuery
	withPutin            *BatteryQuery
	withPutinEnterprise  *EnterpriseQuery
	withPutinStation     *EnterpriseStationQuery
	withPutout           *BatteryQuery
	withPutoutEnterprise *EnterpriseQuery
	withPutoutStation    *EnterpriseStationQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnterpriseBatterySwapQuery builder.
func (ebsq *EnterpriseBatterySwapQuery) Where(ps ...predicate.EnterpriseBatterySwap) *EnterpriseBatterySwapQuery {
	ebsq.predicates = append(ebsq.predicates, ps...)
	return ebsq
}

// Limit the number of records to be returned by this query.
func (ebsq *EnterpriseBatterySwapQuery) Limit(limit int) *EnterpriseBatterySwapQuery {
	ebsq.ctx.Limit = &limit
	return ebsq
}

// Offset to start from.
func (ebsq *EnterpriseBatterySwapQuery) Offset(offset int) *EnterpriseBatterySwapQuery {
	ebsq.ctx.Offset = &offset
	return ebsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ebsq *EnterpriseBatterySwapQuery) Unique(unique bool) *EnterpriseBatterySwapQuery {
	ebsq.ctx.Unique = &unique
	return ebsq
}

// Order specifies how the records should be ordered.
func (ebsq *EnterpriseBatterySwapQuery) Order(o ...enterprisebatteryswap.OrderOption) *EnterpriseBatterySwapQuery {
	ebsq.order = append(ebsq.order, o...)
	return ebsq
}

// QueryExchange chains the current query on the "exchange" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryExchange() *ExchangeQuery {
	query := (&ExchangeClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(exchange.Table, exchange.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.ExchangeTable, enterprisebatteryswap.ExchangeColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCabinet chains the current query on the "cabinet" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryCabinet() *CabinetQuery {
	query := (&CabinetClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(cabinet.Table, cabinet.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.CabinetTable, enterprisebatteryswap.CabinetColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutin chains the current query on the "putin" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutin() *BatteryQuery {
	query := (&BatteryClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutinTable, enterprisebatteryswap.PutinColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutinEnterprise chains the current query on the "putin_enterprise" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutinEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinEnterpriseTable, enterprisebatteryswap.PutinEnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutinStation chains the current query on the "putin_station" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutinStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutinStationTable, enterprisebatteryswap.PutinStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutout chains the current query on the "putout" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutout() *BatteryQuery {
	query := (&BatteryClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(battery.Table, battery.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, enterprisebatteryswap.PutoutTable, enterprisebatteryswap.PutoutColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutoutEnterprise chains the current query on the "putout_enterprise" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutoutEnterprise() *EnterpriseQuery {
	query := (&EnterpriseClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(enterprise.Table, enterprise.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutEnterpriseTable, enterprisebatteryswap.PutoutEnterpriseColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPutoutStation chains the current query on the "putout_station" edge.
func (ebsq *EnterpriseBatterySwapQuery) QueryPutoutStation() *EnterpriseStationQuery {
	query := (&EnterpriseStationClient{config: ebsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ebsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ebsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enterprisebatteryswap.Table, enterprisebatteryswap.FieldID, selector),
			sqlgraph.To(enterprisestation.Table, enterprisestation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enterprisebatteryswap.PutoutStationTable, enterprisebatteryswap.PutoutStationColumn),
		)
		fromU = sqlgraph.SetNeighbors(ebsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnterpriseBatterySwap entity from the query.
// Returns a *NotFoundError when no EnterpriseBatterySwap was found.
func (ebsq *EnterpriseBatterySwapQuery) First(ctx context.Context) (*EnterpriseBatterySwap, error) {
	nodes, err := ebsq.Limit(1).All(setContextOp(ctx, ebsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enterprisebatteryswap.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) FirstX(ctx context.Context) *EnterpriseBatterySwap {
	node, err := ebsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnterpriseBatterySwap ID from the query.
// Returns a *NotFoundError when no EnterpriseBatterySwap ID was found.
func (ebsq *EnterpriseBatterySwapQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebsq.Limit(1).IDs(setContextOp(ctx, ebsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enterprisebatteryswap.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := ebsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnterpriseBatterySwap entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnterpriseBatterySwap entity is found.
// Returns a *NotFoundError when no EnterpriseBatterySwap entities are found.
func (ebsq *EnterpriseBatterySwapQuery) Only(ctx context.Context) (*EnterpriseBatterySwap, error) {
	nodes, err := ebsq.Limit(2).All(setContextOp(ctx, ebsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enterprisebatteryswap.Label}
	default:
		return nil, &NotSingularError{enterprisebatteryswap.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) OnlyX(ctx context.Context) *EnterpriseBatterySwap {
	node, err := ebsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnterpriseBatterySwap ID in the query.
// Returns a *NotSingularError when more than one EnterpriseBatterySwap ID is found.
// Returns a *NotFoundError when no entities are found.
func (ebsq *EnterpriseBatterySwapQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = ebsq.Limit(2).IDs(setContextOp(ctx, ebsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enterprisebatteryswap.Label}
	default:
		err = &NotSingularError{enterprisebatteryswap.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := ebsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnterpriseBatterySwaps.
func (ebsq *EnterpriseBatterySwapQuery) All(ctx context.Context) ([]*EnterpriseBatterySwap, error) {
	ctx = setContextOp(ctx, ebsq.ctx, ent.OpQueryAll)
	if err := ebsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EnterpriseBatterySwap, *EnterpriseBatterySwapQuery]()
	return withInterceptors[[]*EnterpriseBatterySwap](ctx, ebsq, qr, ebsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) AllX(ctx context.Context) []*EnterpriseBatterySwap {
	nodes, err := ebsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnterpriseBatterySwap IDs.
func (ebsq *EnterpriseBatterySwapQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if ebsq.ctx.Unique == nil && ebsq.path != nil {
		ebsq.Unique(true)
	}
	ctx = setContextOp(ctx, ebsq.ctx, ent.OpQueryIDs)
	if err = ebsq.Select(enterprisebatteryswap.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := ebsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ebsq *EnterpriseBatterySwapQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ebsq.ctx, ent.OpQueryCount)
	if err := ebsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ebsq, querierCount[*EnterpriseBatterySwapQuery](), ebsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) CountX(ctx context.Context) int {
	count, err := ebsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ebsq *EnterpriseBatterySwapQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ebsq.ctx, ent.OpQueryExist)
	switch _, err := ebsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ebsq *EnterpriseBatterySwapQuery) ExistX(ctx context.Context) bool {
	exist, err := ebsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnterpriseBatterySwapQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ebsq *EnterpriseBatterySwapQuery) Clone() *EnterpriseBatterySwapQuery {
	if ebsq == nil {
		return nil
	}
	return &EnterpriseBatterySwapQuery{
		config:               ebsq.config,
		ctx:                  ebsq.ctx.Clone(),
		order:                append([]enterprisebatteryswap.OrderOption{}, ebsq.order...),
		inters:               append([]Interceptor{}, ebsq.inters...),
		predicates:           append([]predicate.EnterpriseBatterySwap{}, ebsq.predicates...),
		withExchange:         ebsq.withExchange.Clone(),
		withCabinet:          ebsq.withCabinet.Clone(),
		withPutin:            ebsq.withPutin.Clone(),
		withPutinEnterprise:  ebsq.withPutinEnterprise.Clone(),
		withPutinStation:     ebsq.withPutinStation.Clone(),
		withPutout:           ebsq.withPutout.Clone(),
		withPutoutEnterprise: ebsq.withPutoutEnterprise.Clone(),
		withPutoutStation:    ebsq.withPutoutStation.Clone(),
		// clone intermediate query.
		sql:       ebsq.sql.Clone(),
		path:      ebsq.path,
		modifiers: append([]func(*sql.Selector){}, ebsq.modifiers...),
	}
}

// WithExchange tells the query-builder to eager-load the nodes that are connected to
// the "exchange" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithExchange(opts ...func(*ExchangeQuery)) *EnterpriseBatterySwapQuery {
	query := (&ExchangeClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withExchange = query
	return ebsq
}

// WithCabinet tells the query-builder to eager-load the nodes that are connected to
// the "cabinet" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithCabinet(opts ...func(*CabinetQuery)) *EnterpriseBatterySwapQuery {
	query := (&CabinetClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withCabinet = query
	return ebsq
}

// WithPutin tells the query-builder to eager-load the nodes that are connected to
// the "putin" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutin(opts ...func(*BatteryQuery)) *EnterpriseBatterySwapQuery {
	query := (&BatteryClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutin = query
	return ebsq
}

// WithPutinEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "putin_enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutinEnterprise(opts ...func(*EnterpriseQuery)) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutinEnterprise = query
	return ebsq
}

// WithPutinStation tells the query-builder to eager-load the nodes that are connected to
// the "putin_station" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutinStation(opts ...func(*EnterpriseStationQuery)) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseStationClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutinStation = query
	return ebsq
}

// WithPutout tells the query-builder to eager-load the nodes that are connected to
// the "putout" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutout(opts ...func(*BatteryQuery)) *EnterpriseBatterySwapQuery {
	query := (&BatteryClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutout = query
	return ebsq
}

// WithPutoutEnterprise tells the query-builder to eager-load the nodes that are connected to
// the "putout_enterprise" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutoutEnterprise(opts ...func(*EnterpriseQuery)) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutoutEnterprise = query
	return ebsq
}

// WithPutoutStation tells the query-builder to eager-load the nodes that are connected to
// the "putout_station" edge. The optional arguments are used to configure the query builder of the edge.
func (ebsq *EnterpriseBatterySwapQuery) WithPutoutStation(opts ...func(*EnterpriseStationQuery)) *EnterpriseBatterySwapQuery {
	query := (&EnterpriseStationClient{config: ebsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ebsq.withPutoutStation = query
	return ebsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnterpriseBatterySwap.Query().
//		GroupBy(enterprisebatteryswap.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ebsq *EnterpriseBatterySwapQuery) GroupBy(field string, fields ...string) *EnterpriseBatterySwapGroupBy {
	ebsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EnterpriseBatterySwapGroupBy{build: ebsq}
	grbuild.flds = &ebsq.ctx.Fields
	grbuild.label = enterprisebatteryswap.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.EnterpriseBatterySwap.Query().
//		Select(enterprisebatteryswap.FieldCreatedAt).
//		Scan(ctx, &v)
func (ebsq *EnterpriseBatterySwapQuery) Select(fields ...string) *EnterpriseBatterySwapSelect {
	ebsq.ctx.Fields = append(ebsq.ctx.Fields, fields...)
	sbuild := &EnterpriseBatterySwapSelect{EnterpriseBatterySwapQuery: ebsq}
	sbuild.label = enterprisebatteryswap.Label
	sbuild.flds, sbuild.scan = &ebsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EnterpriseBatterySwapSelect configured with the given aggregations.
func (ebsq *EnterpriseBatterySwapQuery) Aggregate(fns ...AggregateFunc) *EnterpriseBatterySwapSelect {
	return ebsq.Select().Aggregate(fns...)
}

func (ebsq *EnterpriseBatterySwapQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ebsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ebsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ebsq.ctx.Fields {
		if !enterprisebatteryswap.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ebsq.path != nil {
		prev, err := ebsq.path(ctx)
		if err != nil {
			return err
		}
		ebsq.sql = prev
	}
	return nil
}

func (ebsq *EnterpriseBatterySwapQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnterpriseBatterySwap, error) {
	var (
		nodes       = []*EnterpriseBatterySwap{}
		_spec       = ebsq.querySpec()
		loadedTypes = [8]bool{
			ebsq.withExchange != nil,
			ebsq.withCabinet != nil,
			ebsq.withPutin != nil,
			ebsq.withPutinEnterprise != nil,
			ebsq.withPutinStation != nil,
			ebsq.withPutout != nil,
			ebsq.withPutoutEnterprise != nil,
			ebsq.withPutoutStation != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EnterpriseBatterySwap).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EnterpriseBatterySwap{config: ebsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ebsq.modifiers) > 0 {
		_spec.Modifiers = ebsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ebsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ebsq.withExchange; query != nil {
		if err := ebsq.loadExchange(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Exchange) { n.Edges.Exchange = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withCabinet; query != nil {
		if err := ebsq.loadCabinet(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Cabinet) { n.Edges.Cabinet = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutin; query != nil {
		if err := ebsq.loadPutin(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Battery) { n.Edges.Putin = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutinEnterprise; query != nil {
		if err := ebsq.loadPutinEnterprise(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Enterprise) { n.Edges.PutinEnterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutinStation; query != nil {
		if err := ebsq.loadPutinStation(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *EnterpriseStation) { n.Edges.PutinStation = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutout; query != nil {
		if err := ebsq.loadPutout(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Battery) { n.Edges.Putout = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutoutEnterprise; query != nil {
		if err := ebsq.loadPutoutEnterprise(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *Enterprise) { n.Edges.PutoutEnterprise = e }); err != nil {
			return nil, err
		}
	}
	if query := ebsq.withPutoutStation; query != nil {
		if err := ebsq.loadPutoutStation(ctx, query, nodes, nil,
			func(n *EnterpriseBatterySwap, e *EnterpriseStation) { n.Edges.PutoutStation = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ebsq *EnterpriseBatterySwapQuery) loadExchange(ctx context.Context, query *ExchangeQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Exchange)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		fk := nodes[i].ExchangeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exchange.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "exchange_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadCabinet(ctx context.Context, query *CabinetQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Cabinet)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		fk := nodes[i].CabinetID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(cabinet.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "cabinet_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutin(ctx context.Context, query *BatteryQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Battery)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		fk := nodes[i].PutinID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(battery.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putin_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutinEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		if nodes[i].PutinEnterpriseID == nil {
			continue
		}
		fk := *nodes[i].PutinEnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putin_enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutinStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		if nodes[i].PutinStationID == nil {
			continue
		}
		fk := *nodes[i].PutinStationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putin_station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutout(ctx context.Context, query *BatteryQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Battery)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		fk := nodes[i].PutoutID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(battery.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putout_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutoutEnterprise(ctx context.Context, query *EnterpriseQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *Enterprise)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		if nodes[i].PutoutEnterpriseID == nil {
			continue
		}
		fk := *nodes[i].PutoutEnterpriseID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprise.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putout_enterprise_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ebsq *EnterpriseBatterySwapQuery) loadPutoutStation(ctx context.Context, query *EnterpriseStationQuery, nodes []*EnterpriseBatterySwap, init func(*EnterpriseBatterySwap), assign func(*EnterpriseBatterySwap, *EnterpriseStation)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*EnterpriseBatterySwap)
	for i := range nodes {
		if nodes[i].PutoutStationID == nil {
			continue
		}
		fk := *nodes[i].PutoutStationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enterprisestation.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "putout_station_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ebsq *EnterpriseBatterySwapQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ebsq.querySpec()
	if len(ebsq.modifiers) > 0 {
		_spec.Modifiers = ebsq.modifiers
	}
	_spec.Node.Columns = ebsq.ctx.Fields
	if len(ebsq.ctx.Fields) > 0 {
		_spec.Unique = ebsq.ctx.Unique != nil && *ebsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ebsq.driver, _spec)
}

func (ebsq *EnterpriseBatterySwapQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(enterprisebatteryswap.Table, enterprisebatteryswap.Columns, sqlgraph.NewFieldSpec(enterprisebatteryswap.FieldID, field.TypeUint64))
	_spec.From = ebsq.sql
	if unique := ebsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ebsq.path != nil {
		_spec.Unique = true
	}
	if fields := ebsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enterprisebatteryswap.FieldID)
		for i := range fields {
			if fields[i] != enterprisebatteryswap.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ebsq.withExchange != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldExchangeID)
		}
		if ebsq.withCabinet != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldCabinetID)
		}
		if ebsq.withPutin != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutinID)
		}
		if ebsq.withPutinEnterprise != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutinEnterpriseID)
		}
		if ebsq.withPutinStation != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutinStationID)
		}
		if ebsq.withPutout != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutoutID)
		}
		if ebsq.withPutoutEnterprise != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutoutEnterpriseID)
		}
		if ebsq.withPutoutStation != nil {
			_spec.Node.AddColumnOnce(enterprisebatteryswap.FieldPutoutStationID)
		}
	}
	if ps := ebsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ebsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ebsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ebsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ebsq *EnterpriseBatterySwapQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ebsq.driver.Dialect())
	t1 := builder.Table(enterprisebatteryswap.Table)
	columns := ebsq.ctx.Fields
	if len(columns) == 0 {
		columns = enterprisebatteryswap.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ebsq.sql != nil {
		selector = ebsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ebsq.ctx.Unique != nil && *ebsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ebsq.modifiers {
		m(selector)
	}
	for _, p := range ebsq.predicates {
		p(selector)
	}
	for _, p := range ebsq.order {
		p(selector)
	}
	if offset := ebsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ebsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebsq *EnterpriseBatterySwapQuery) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseBatterySwapSelect {
	ebsq.modifiers = append(ebsq.modifiers, modifiers...)
	return ebsq.Select()
}

type EnterpriseBatterySwapQueryWith string

var (
	EnterpriseBatterySwapQueryWithExchange         EnterpriseBatterySwapQueryWith = "Exchange"
	EnterpriseBatterySwapQueryWithCabinet          EnterpriseBatterySwapQueryWith = "Cabinet"
	EnterpriseBatterySwapQueryWithPutin            EnterpriseBatterySwapQueryWith = "Putin"
	EnterpriseBatterySwapQueryWithPutinEnterprise  EnterpriseBatterySwapQueryWith = "PutinEnterprise"
	EnterpriseBatterySwapQueryWithPutinStation     EnterpriseBatterySwapQueryWith = "PutinStation"
	EnterpriseBatterySwapQueryWithPutout           EnterpriseBatterySwapQueryWith = "Putout"
	EnterpriseBatterySwapQueryWithPutoutEnterprise EnterpriseBatterySwapQueryWith = "PutoutEnterprise"
	EnterpriseBatterySwapQueryWithPutoutStation    EnterpriseBatterySwapQueryWith = "PutoutStation"
)

func (ebsq *EnterpriseBatterySwapQuery) With(withEdges ...EnterpriseBatterySwapQueryWith) *EnterpriseBatterySwapQuery {
	for _, v := range withEdges {
		switch v {
		case EnterpriseBatterySwapQueryWithExchange:
			ebsq.WithExchange()
		case EnterpriseBatterySwapQueryWithCabinet:
			ebsq.WithCabinet()
		case EnterpriseBatterySwapQueryWithPutin:
			ebsq.WithPutin()
		case EnterpriseBatterySwapQueryWithPutinEnterprise:
			ebsq.WithPutinEnterprise()
		case EnterpriseBatterySwapQueryWithPutinStation:
			ebsq.WithPutinStation()
		case EnterpriseBatterySwapQueryWithPutout:
			ebsq.WithPutout()
		case EnterpriseBatterySwapQueryWithPutoutEnterprise:
			ebsq.WithPutoutEnterprise()
		case EnterpriseBatterySwapQueryWithPutoutStation:
			ebsq.WithPutoutStation()
		}
	}
	return ebsq
}

// EnterpriseBatterySwapGroupBy is the group-by builder for EnterpriseBatterySwap entities.
type EnterpriseBatterySwapGroupBy struct {
	selector
	build *EnterpriseBatterySwapQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ebsgb *EnterpriseBatterySwapGroupBy) Aggregate(fns ...AggregateFunc) *EnterpriseBatterySwapGroupBy {
	ebsgb.fns = append(ebsgb.fns, fns...)
	return ebsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ebsgb *EnterpriseBatterySwapGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebsgb.build.ctx, ent.OpQueryGroupBy)
	if err := ebsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseBatterySwapQuery, *EnterpriseBatterySwapGroupBy](ctx, ebsgb.build, ebsgb, ebsgb.build.inters, v)
}

func (ebsgb *EnterpriseBatterySwapGroupBy) sqlScan(ctx context.Context, root *EnterpriseBatterySwapQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ebsgb.fns))
	for _, fn := range ebsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ebsgb.flds)+len(ebsgb.fns))
		for _, f := range *ebsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ebsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EnterpriseBatterySwapSelect is the builder for selecting fields of EnterpriseBatterySwap entities.
type EnterpriseBatterySwapSelect struct {
	*EnterpriseBatterySwapQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ebss *EnterpriseBatterySwapSelect) Aggregate(fns ...AggregateFunc) *EnterpriseBatterySwapSelect {
	ebss.fns = append(ebss.fns, fns...)
	return ebss
}

// Scan applies the selector query and scans the result into the given value.
func (ebss *EnterpriseBatterySwapSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ebss.ctx, ent.OpQuerySelect)
	if err := ebss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EnterpriseBatterySwapQuery, *EnterpriseBatterySwapSelect](ctx, ebss.EnterpriseBatterySwapQuery, ebss, ebss.inters, v)
}

func (ebss *EnterpriseBatterySwapSelect) sqlScan(ctx context.Context, root *EnterpriseBatterySwapQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ebss.fns))
	for _, fn := range ebss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ebss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ebss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ebss *EnterpriseBatterySwapSelect) Modify(modifiers ...func(s *sql.Selector)) *EnterpriseBatterySwapSelect {
	ebss.modifiers = append(ebss.modifiers, modifiers...)
	return ebss
}
