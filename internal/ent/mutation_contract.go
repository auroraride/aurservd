// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/contract"
    "github.com/auroraride/aurservd/app/model"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// ContractMutation represents an operation that mutates the Contract nodes in the graph.
type ContractMutation struct {
	config
	op               Op
	typ              string
	id               *uint64
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	creator          **model.Modifier
	last_modifier    **model.Modifier
	remark           *string
	status           *uint8
	addstatus        *int8
	flow_id          *string
	sn               *string
	files            *[]string
	effective        *bool
	rider_info       **model.ContractRider
	link             *string
	expires_at       *time.Time
	signed_at        *time.Time
	clearedFields    map[string]struct{}
	subscribe        *uint64
	clearedsubscribe bool
	employee         *uint64
	clearedemployee  bool
	rider            *uint64
	clearedrider     bool
	allocate         *uint64
	clearedallocate  bool
	done             bool
	oldValue         func(context.Context) (*Contract, error)
	predicates       []predicate.Contract
}

var _ ent.Mutation = (*ContractMutation)(nil)

// contractOption allows management of the mutation configuration using functional options.
type contractOption func(*ContractMutation)

// newContractMutation creates new mutation for the Contract entity.
func newContractMutation(c config, op Op, opts ...contractOption) *ContractMutation {
	m := &ContractMutation{
		config:        c,
		op:            op,
		typ:           TypeContract,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContractID sets the ID field of the mutation.
func withContractID(id uint64) contractOption {
	return func(m *ContractMutation) {
		var (
			err   error
			once  sync.Once
			value *Contract
		)
		m.oldValue = func(ctx context.Context) (*Contract, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contract.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContract sets the old Contract of the mutation.
func withContract(node *Contract) contractOption {
	return func(m *ContractMutation) {
		m.oldValue = func(context.Context) (*Contract, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContractMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContractMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContractMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContractMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contract.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ContractMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContractMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContractMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContractMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContractMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContractMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ContractMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ContractMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ContractMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[contract.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ContractMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[contract.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ContractMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, contract.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *ContractMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *ContractMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *ContractMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[contract.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *ContractMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[contract.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *ContractMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, contract.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *ContractMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *ContractMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *ContractMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[contract.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *ContractMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[contract.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *ContractMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, contract.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *ContractMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ContractMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ContractMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[contract.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ContractMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[contract.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ContractMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, contract.FieldRemark)
}

// SetSubscribeID sets the "subscribe_id" field.
func (m *ContractMutation) SetSubscribeID(u uint64) {
	m.subscribe = &u
}

// SubscribeID returns the value of the "subscribe_id" field in the mutation.
func (m *ContractMutation) SubscribeID() (r uint64, exists bool) {
	v := m.subscribe
	if v == nil {
		return
	}
	return *v, true
}

// OldSubscribeID returns the old "subscribe_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldSubscribeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubscribeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubscribeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubscribeID: %w", err)
	}
	return oldValue.SubscribeID, nil
}

// ClearSubscribeID clears the value of the "subscribe_id" field.
func (m *ContractMutation) ClearSubscribeID() {
	m.subscribe = nil
	m.clearedFields[contract.FieldSubscribeID] = struct{}{}
}

// SubscribeIDCleared returns if the "subscribe_id" field was cleared in this mutation.
func (m *ContractMutation) SubscribeIDCleared() bool {
	_, ok := m.clearedFields[contract.FieldSubscribeID]
	return ok
}

// ResetSubscribeID resets all changes to the "subscribe_id" field.
func (m *ContractMutation) ResetSubscribeID() {
	m.subscribe = nil
	delete(m.clearedFields, contract.FieldSubscribeID)
}

// SetEmployeeID sets the "employee_id" field.
func (m *ContractMutation) SetEmployeeID(u uint64) {
	m.employee = &u
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *ContractMutation) EmployeeID() (r uint64, exists bool) {
	v := m.employee
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldEmployeeID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (m *ContractMutation) ClearEmployeeID() {
	m.employee = nil
	m.clearedFields[contract.FieldEmployeeID] = struct{}{}
}

// EmployeeIDCleared returns if the "employee_id" field was cleared in this mutation.
func (m *ContractMutation) EmployeeIDCleared() bool {
	_, ok := m.clearedFields[contract.FieldEmployeeID]
	return ok
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *ContractMutation) ResetEmployeeID() {
	m.employee = nil
	delete(m.clearedFields, contract.FieldEmployeeID)
}

// SetStatus sets the "status" field.
func (m *ContractMutation) SetStatus(u uint8) {
	m.status = &u
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ContractMutation) Status() (r uint8, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldStatus(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds u to the "status" field.
func (m *ContractMutation) AddStatus(u int8) {
	if m.addstatus != nil {
		*m.addstatus += u
	} else {
		m.addstatus = &u
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ContractMutation) AddedStatus() (r int8, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ContractMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetRiderID sets the "rider_id" field.
func (m *ContractMutation) SetRiderID(u uint64) {
	m.rider = &u
}

// RiderID returns the value of the "rider_id" field in the mutation.
func (m *ContractMutation) RiderID() (r uint64, exists bool) {
	v := m.rider
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderID returns the old "rider_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRiderID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderID: %w", err)
	}
	return oldValue.RiderID, nil
}

// ResetRiderID resets all changes to the "rider_id" field.
func (m *ContractMutation) ResetRiderID() {
	m.rider = nil
}

// SetFlowID sets the "flow_id" field.
func (m *ContractMutation) SetFlowID(s string) {
	m.flow_id = &s
}

// FlowID returns the value of the "flow_id" field in the mutation.
func (m *ContractMutation) FlowID() (r string, exists bool) {
	v := m.flow_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowID returns the old "flow_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldFlowID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlowID: %w", err)
	}
	return oldValue.FlowID, nil
}

// ResetFlowID resets all changes to the "flow_id" field.
func (m *ContractMutation) ResetFlowID() {
	m.flow_id = nil
}

// SetSn sets the "sn" field.
func (m *ContractMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *ContractMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *ContractMutation) ResetSn() {
	m.sn = nil
}

// SetFiles sets the "files" field.
func (m *ContractMutation) SetFiles(s []string) {
	m.files = &s
}

// Files returns the value of the "files" field in the mutation.
func (m *ContractMutation) Files() (r []string, exists bool) {
	v := m.files
	if v == nil {
		return
	}
	return *v, true
}

// OldFiles returns the old "files" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldFiles(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFiles is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFiles requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFiles: %w", err)
	}
	return oldValue.Files, nil
}

// ClearFiles clears the value of the "files" field.
func (m *ContractMutation) ClearFiles() {
	m.files = nil
	m.clearedFields[contract.FieldFiles] = struct{}{}
}

// FilesCleared returns if the "files" field was cleared in this mutation.
func (m *ContractMutation) FilesCleared() bool {
	_, ok := m.clearedFields[contract.FieldFiles]
	return ok
}

// ResetFiles resets all changes to the "files" field.
func (m *ContractMutation) ResetFiles() {
	m.files = nil
	delete(m.clearedFields, contract.FieldFiles)
}

// SetEffective sets the "effective" field.
func (m *ContractMutation) SetEffective(b bool) {
	m.effective = &b
}

// Effective returns the value of the "effective" field in the mutation.
func (m *ContractMutation) Effective() (r bool, exists bool) {
	v := m.effective
	if v == nil {
		return
	}
	return *v, true
}

// OldEffective returns the old "effective" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldEffective(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEffective is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEffective requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEffective: %w", err)
	}
	return oldValue.Effective, nil
}

// ResetEffective resets all changes to the "effective" field.
func (m *ContractMutation) ResetEffective() {
	m.effective = nil
}

// SetRiderInfo sets the "rider_info" field.
func (m *ContractMutation) SetRiderInfo(mr *model.ContractRider) {
	m.rider_info = &mr
}

// RiderInfo returns the value of the "rider_info" field in the mutation.
func (m *ContractMutation) RiderInfo() (r *model.ContractRider, exists bool) {
	v := m.rider_info
	if v == nil {
		return
	}
	return *v, true
}

// OldRiderInfo returns the old "rider_info" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldRiderInfo(ctx context.Context) (v *model.ContractRider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRiderInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRiderInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRiderInfo: %w", err)
	}
	return oldValue.RiderInfo, nil
}

// ClearRiderInfo clears the value of the "rider_info" field.
func (m *ContractMutation) ClearRiderInfo() {
	m.rider_info = nil
	m.clearedFields[contract.FieldRiderInfo] = struct{}{}
}

// RiderInfoCleared returns if the "rider_info" field was cleared in this mutation.
func (m *ContractMutation) RiderInfoCleared() bool {
	_, ok := m.clearedFields[contract.FieldRiderInfo]
	return ok
}

// ResetRiderInfo resets all changes to the "rider_info" field.
func (m *ContractMutation) ResetRiderInfo() {
	m.rider_info = nil
	delete(m.clearedFields, contract.FieldRiderInfo)
}

// SetAllocateID sets the "allocate_id" field.
func (m *ContractMutation) SetAllocateID(u uint64) {
	m.allocate = &u
}

// AllocateID returns the value of the "allocate_id" field in the mutation.
func (m *ContractMutation) AllocateID() (r uint64, exists bool) {
	v := m.allocate
	if v == nil {
		return
	}
	return *v, true
}

// OldAllocateID returns the old "allocate_id" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldAllocateID(ctx context.Context) (v *uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAllocateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAllocateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllocateID: %w", err)
	}
	return oldValue.AllocateID, nil
}

// ClearAllocateID clears the value of the "allocate_id" field.
func (m *ContractMutation) ClearAllocateID() {
	m.allocate = nil
	m.clearedFields[contract.FieldAllocateID] = struct{}{}
}

// AllocateIDCleared returns if the "allocate_id" field was cleared in this mutation.
func (m *ContractMutation) AllocateIDCleared() bool {
	_, ok := m.clearedFields[contract.FieldAllocateID]
	return ok
}

// ResetAllocateID resets all changes to the "allocate_id" field.
func (m *ContractMutation) ResetAllocateID() {
	m.allocate = nil
	delete(m.clearedFields, contract.FieldAllocateID)
}

// SetLink sets the "link" field.
func (m *ContractMutation) SetLink(s string) {
	m.link = &s
}

// Link returns the value of the "link" field in the mutation.
func (m *ContractMutation) Link() (r string, exists bool) {
	v := m.link
	if v == nil {
		return
	}
	return *v, true
}

// OldLink returns the old "link" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldLink(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLink: %w", err)
	}
	return oldValue.Link, nil
}

// ClearLink clears the value of the "link" field.
func (m *ContractMutation) ClearLink() {
	m.link = nil
	m.clearedFields[contract.FieldLink] = struct{}{}
}

// LinkCleared returns if the "link" field was cleared in this mutation.
func (m *ContractMutation) LinkCleared() bool {
	_, ok := m.clearedFields[contract.FieldLink]
	return ok
}

// ResetLink resets all changes to the "link" field.
func (m *ContractMutation) ResetLink() {
	m.link = nil
	delete(m.clearedFields, contract.FieldLink)
}

// SetExpiresAt sets the "expires_at" field.
func (m *ContractMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *ContractMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *ContractMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[contract.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *ContractMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[contract.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *ContractMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, contract.FieldExpiresAt)
}

// SetSignedAt sets the "signed_at" field.
func (m *ContractMutation) SetSignedAt(t time.Time) {
	m.signed_at = &t
}

// SignedAt returns the value of the "signed_at" field in the mutation.
func (m *ContractMutation) SignedAt() (r time.Time, exists bool) {
	v := m.signed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSignedAt returns the old "signed_at" field's value of the Contract entity.
// If the Contract object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContractMutation) OldSignedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignedAt: %w", err)
	}
	return oldValue.SignedAt, nil
}

// ClearSignedAt clears the value of the "signed_at" field.
func (m *ContractMutation) ClearSignedAt() {
	m.signed_at = nil
	m.clearedFields[contract.FieldSignedAt] = struct{}{}
}

// SignedAtCleared returns if the "signed_at" field was cleared in this mutation.
func (m *ContractMutation) SignedAtCleared() bool {
	_, ok := m.clearedFields[contract.FieldSignedAt]
	return ok
}

// ResetSignedAt resets all changes to the "signed_at" field.
func (m *ContractMutation) ResetSignedAt() {
	m.signed_at = nil
	delete(m.clearedFields, contract.FieldSignedAt)
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (m *ContractMutation) ClearSubscribe() {
	m.clearedsubscribe = true
}

// SubscribeCleared reports if the "subscribe" edge to the Subscribe entity was cleared.
func (m *ContractMutation) SubscribeCleared() bool {
	return m.SubscribeIDCleared() || m.clearedsubscribe
}

// SubscribeIDs returns the "subscribe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscribeID instead. It exists only for internal usage by the builders.
func (m *ContractMutation) SubscribeIDs() (ids []uint64) {
	if id := m.subscribe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscribe resets all changes to the "subscribe" edge.
func (m *ContractMutation) ResetSubscribe() {
	m.subscribe = nil
	m.clearedsubscribe = false
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (m *ContractMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared reports if the "employee" edge to the Employee entity was cleared.
func (m *ContractMutation) EmployeeCleared() bool {
	return m.EmployeeIDCleared() || m.clearedemployee
}

// EmployeeIDs returns the "employee" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *ContractMutation) EmployeeIDs() (ids []uint64) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee resets all changes to the "employee" edge.
func (m *ContractMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// ClearRider clears the "rider" edge to the Rider entity.
func (m *ContractMutation) ClearRider() {
	m.clearedrider = true
}

// RiderCleared reports if the "rider" edge to the Rider entity was cleared.
func (m *ContractMutation) RiderCleared() bool {
	return m.clearedrider
}

// RiderIDs returns the "rider" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RiderID instead. It exists only for internal usage by the builders.
func (m *ContractMutation) RiderIDs() (ids []uint64) {
	if id := m.rider; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRider resets all changes to the "rider" edge.
func (m *ContractMutation) ResetRider() {
	m.rider = nil
	m.clearedrider = false
}

// ClearAllocate clears the "allocate" edge to the Allocate entity.
func (m *ContractMutation) ClearAllocate() {
	m.clearedallocate = true
}

// AllocateCleared reports if the "allocate" edge to the Allocate entity was cleared.
func (m *ContractMutation) AllocateCleared() bool {
	return m.AllocateIDCleared() || m.clearedallocate
}

// AllocateIDs returns the "allocate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AllocateID instead. It exists only for internal usage by the builders.
func (m *ContractMutation) AllocateIDs() (ids []uint64) {
	if id := m.allocate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAllocate resets all changes to the "allocate" edge.
func (m *ContractMutation) ResetAllocate() {
	m.allocate = nil
	m.clearedallocate = false
}

// Where appends a list predicates to the ContractMutation builder.
func (m *ContractMutation) Where(ps ...predicate.Contract) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContractMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contract).
func (m *ContractMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContractMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.created_at != nil {
		fields = append(fields, contract.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, contract.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, contract.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, contract.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, contract.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, contract.FieldRemark)
	}
	if m.subscribe != nil {
		fields = append(fields, contract.FieldSubscribeID)
	}
	if m.employee != nil {
		fields = append(fields, contract.FieldEmployeeID)
	}
	if m.status != nil {
		fields = append(fields, contract.FieldStatus)
	}
	if m.rider != nil {
		fields = append(fields, contract.FieldRiderID)
	}
	if m.flow_id != nil {
		fields = append(fields, contract.FieldFlowID)
	}
	if m.sn != nil {
		fields = append(fields, contract.FieldSn)
	}
	if m.files != nil {
		fields = append(fields, contract.FieldFiles)
	}
	if m.effective != nil {
		fields = append(fields, contract.FieldEffective)
	}
	if m.rider_info != nil {
		fields = append(fields, contract.FieldRiderInfo)
	}
	if m.allocate != nil {
		fields = append(fields, contract.FieldAllocateID)
	}
	if m.link != nil {
		fields = append(fields, contract.FieldLink)
	}
	if m.expires_at != nil {
		fields = append(fields, contract.FieldExpiresAt)
	}
	if m.signed_at != nil {
		fields = append(fields, contract.FieldSignedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContractMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldCreatedAt:
		return m.CreatedAt()
	case contract.FieldUpdatedAt:
		return m.UpdatedAt()
	case contract.FieldDeletedAt:
		return m.DeletedAt()
	case contract.FieldCreator:
		return m.Creator()
	case contract.FieldLastModifier:
		return m.LastModifier()
	case contract.FieldRemark:
		return m.Remark()
	case contract.FieldSubscribeID:
		return m.SubscribeID()
	case contract.FieldEmployeeID:
		return m.EmployeeID()
	case contract.FieldStatus:
		return m.Status()
	case contract.FieldRiderID:
		return m.RiderID()
	case contract.FieldFlowID:
		return m.FlowID()
	case contract.FieldSn:
		return m.Sn()
	case contract.FieldFiles:
		return m.Files()
	case contract.FieldEffective:
		return m.Effective()
	case contract.FieldRiderInfo:
		return m.RiderInfo()
	case contract.FieldAllocateID:
		return m.AllocateID()
	case contract.FieldLink:
		return m.Link()
	case contract.FieldExpiresAt:
		return m.ExpiresAt()
	case contract.FieldSignedAt:
		return m.SignedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContractMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contract.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case contract.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case contract.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case contract.FieldCreator:
		return m.OldCreator(ctx)
	case contract.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case contract.FieldRemark:
		return m.OldRemark(ctx)
	case contract.FieldSubscribeID:
		return m.OldSubscribeID(ctx)
	case contract.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case contract.FieldStatus:
		return m.OldStatus(ctx)
	case contract.FieldRiderID:
		return m.OldRiderID(ctx)
	case contract.FieldFlowID:
		return m.OldFlowID(ctx)
	case contract.FieldSn:
		return m.OldSn(ctx)
	case contract.FieldFiles:
		return m.OldFiles(ctx)
	case contract.FieldEffective:
		return m.OldEffective(ctx)
	case contract.FieldRiderInfo:
		return m.OldRiderInfo(ctx)
	case contract.FieldAllocateID:
		return m.OldAllocateID(ctx)
	case contract.FieldLink:
		return m.OldLink(ctx)
	case contract.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case contract.FieldSignedAt:
		return m.OldSignedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Contract field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contract.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case contract.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case contract.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case contract.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case contract.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case contract.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case contract.FieldSubscribeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubscribeID(v)
		return nil
	case contract.FieldEmployeeID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case contract.FieldStatus:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case contract.FieldRiderID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderID(v)
		return nil
	case contract.FieldFlowID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlowID(v)
		return nil
	case contract.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case contract.FieldFiles:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFiles(v)
		return nil
	case contract.FieldEffective:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEffective(v)
		return nil
	case contract.FieldRiderInfo:
		v, ok := value.(*model.ContractRider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRiderInfo(v)
		return nil
	case contract.FieldAllocateID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllocateID(v)
		return nil
	case contract.FieldLink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLink(v)
		return nil
	case contract.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case contract.FieldSignedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContractMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, contract.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContractMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contract.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContractMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contract.FieldStatus:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Contract numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContractMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contract.FieldDeletedAt) {
		fields = append(fields, contract.FieldDeletedAt)
	}
	if m.FieldCleared(contract.FieldCreator) {
		fields = append(fields, contract.FieldCreator)
	}
	if m.FieldCleared(contract.FieldLastModifier) {
		fields = append(fields, contract.FieldLastModifier)
	}
	if m.FieldCleared(contract.FieldRemark) {
		fields = append(fields, contract.FieldRemark)
	}
	if m.FieldCleared(contract.FieldSubscribeID) {
		fields = append(fields, contract.FieldSubscribeID)
	}
	if m.FieldCleared(contract.FieldEmployeeID) {
		fields = append(fields, contract.FieldEmployeeID)
	}
	if m.FieldCleared(contract.FieldFiles) {
		fields = append(fields, contract.FieldFiles)
	}
	if m.FieldCleared(contract.FieldRiderInfo) {
		fields = append(fields, contract.FieldRiderInfo)
	}
	if m.FieldCleared(contract.FieldAllocateID) {
		fields = append(fields, contract.FieldAllocateID)
	}
	if m.FieldCleared(contract.FieldLink) {
		fields = append(fields, contract.FieldLink)
	}
	if m.FieldCleared(contract.FieldExpiresAt) {
		fields = append(fields, contract.FieldExpiresAt)
	}
	if m.FieldCleared(contract.FieldSignedAt) {
		fields = append(fields, contract.FieldSignedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContractMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContractMutation) ClearField(name string) error {
	switch name {
	case contract.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case contract.FieldCreator:
		m.ClearCreator()
		return nil
	case contract.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case contract.FieldRemark:
		m.ClearRemark()
		return nil
	case contract.FieldSubscribeID:
		m.ClearSubscribeID()
		return nil
	case contract.FieldEmployeeID:
		m.ClearEmployeeID()
		return nil
	case contract.FieldFiles:
		m.ClearFiles()
		return nil
	case contract.FieldRiderInfo:
		m.ClearRiderInfo()
		return nil
	case contract.FieldAllocateID:
		m.ClearAllocateID()
		return nil
	case contract.FieldLink:
		m.ClearLink()
		return nil
	case contract.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	case contract.FieldSignedAt:
		m.ClearSignedAt()
		return nil
	}
	return fmt.Errorf("unknown Contract nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContractMutation) ResetField(name string) error {
	switch name {
	case contract.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case contract.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case contract.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case contract.FieldCreator:
		m.ResetCreator()
		return nil
	case contract.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case contract.FieldRemark:
		m.ResetRemark()
		return nil
	case contract.FieldSubscribeID:
		m.ResetSubscribeID()
		return nil
	case contract.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case contract.FieldStatus:
		m.ResetStatus()
		return nil
	case contract.FieldRiderID:
		m.ResetRiderID()
		return nil
	case contract.FieldFlowID:
		m.ResetFlowID()
		return nil
	case contract.FieldSn:
		m.ResetSn()
		return nil
	case contract.FieldFiles:
		m.ResetFiles()
		return nil
	case contract.FieldEffective:
		m.ResetEffective()
		return nil
	case contract.FieldRiderInfo:
		m.ResetRiderInfo()
		return nil
	case contract.FieldAllocateID:
		m.ResetAllocateID()
		return nil
	case contract.FieldLink:
		m.ResetLink()
		return nil
	case contract.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case contract.FieldSignedAt:
		m.ResetSignedAt()
		return nil
	}
	return fmt.Errorf("unknown Contract field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContractMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.subscribe != nil {
		edges = append(edges, contract.EdgeSubscribe)
	}
	if m.employee != nil {
		edges = append(edges, contract.EdgeEmployee)
	}
	if m.rider != nil {
		edges = append(edges, contract.EdgeRider)
	}
	if m.allocate != nil {
		edges = append(edges, contract.EdgeAllocate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContractMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contract.EdgeSubscribe:
		if id := m.subscribe; id != nil {
			return []ent.Value{*id}
		}
	case contract.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case contract.EdgeRider:
		if id := m.rider; id != nil {
			return []ent.Value{*id}
		}
	case contract.EdgeAllocate:
		if id := m.allocate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContractMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContractMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContractMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedsubscribe {
		edges = append(edges, contract.EdgeSubscribe)
	}
	if m.clearedemployee {
		edges = append(edges, contract.EdgeEmployee)
	}
	if m.clearedrider {
		edges = append(edges, contract.EdgeRider)
	}
	if m.clearedallocate {
		edges = append(edges, contract.EdgeAllocate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContractMutation) EdgeCleared(name string) bool {
	switch name {
	case contract.EdgeSubscribe:
		return m.clearedsubscribe
	case contract.EdgeEmployee:
		return m.clearedemployee
	case contract.EdgeRider:
		return m.clearedrider
	case contract.EdgeAllocate:
		return m.clearedallocate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContractMutation) ClearEdge(name string) error {
	switch name {
	case contract.EdgeSubscribe:
		m.ClearSubscribe()
		return nil
	case contract.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case contract.EdgeRider:
		m.ClearRider()
		return nil
	case contract.EdgeAllocate:
		m.ClearAllocate()
		return nil
	}
	return fmt.Errorf("unknown Contract unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContractMutation) ResetEdge(name string) error {
	switch name {
	case contract.EdgeSubscribe:
		m.ResetSubscribe()
		return nil
	case contract.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case contract.EdgeRider:
		m.ResetRider()
		return nil
	case contract.EdgeAllocate:
		m.ResetAllocate()
		return nil
	}
	return fmt.Errorf("unknown Contract edge %s", name)
}

