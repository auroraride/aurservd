// Code generated by liasica and entc, DO NOT EDIT.

package ent

import (
    "context"
    "fmt"
    "sync"
    "errors"
    "time"
    "github.com/auroraride/aurservd/internal/ent/employee"
    "github.com/auroraride/aurservd/app/model"
    "github.com/google/uuid"
    "github.com/auroraride/aurservd/internal/ent/predicate"

    "entgo.io/ent"
)


// EmployeeMutation represents an operation that mutates the Employee nodes in the graph.
type EmployeeMutation struct {
	config
	op                 Op
	typ                string
	id                 *uint64
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	creator            **model.Modifier
	last_modifier      **model.Modifier
	remark             *string
	sn                 *uuid.UUID
	name               *string
	phone              *string
	enable             *bool
	clearedFields      map[string]struct{}
	city               *uint64
	clearedcity        bool
	store              *uint64
	clearedstore       bool
	attendances        map[uint64]struct{}
	removedattendances map[uint64]struct{}
	clearedattendances bool
	stocks             map[uint64]struct{}
	removedstocks      map[uint64]struct{}
	clearedstocks      bool
	exchanges          map[uint64]struct{}
	removedexchanges   map[uint64]struct{}
	clearedexchanges   bool
	commissions        map[uint64]struct{}
	removedcommissions map[uint64]struct{}
	clearedcommissions bool
	assistances        map[uint64]struct{}
	removedassistances map[uint64]struct{}
	clearedassistances bool
	done               bool
	oldValue           func(context.Context) (*Employee, error)
	predicates         []predicate.Employee
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows management of the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for the Employee entity.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the ID field of the mutation.
func withEmployeeID(id uint64) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmployeeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmployeeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Employee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EmployeeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmployeeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmployeeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmployeeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmployeeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmployeeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EmployeeMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EmployeeMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EmployeeMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[employee.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EmployeeMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[employee.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EmployeeMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, employee.FieldDeletedAt)
}

// SetCreator sets the "creator" field.
func (m *EmployeeMutation) SetCreator(value *model.Modifier) {
	m.creator = &value
}

// Creator returns the value of the "creator" field in the mutation.
func (m *EmployeeMutation) Creator() (r *model.Modifier, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreator returns the old "creator" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldCreator(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreator: %w", err)
	}
	return oldValue.Creator, nil
}

// ClearCreator clears the value of the "creator" field.
func (m *EmployeeMutation) ClearCreator() {
	m.creator = nil
	m.clearedFields[employee.FieldCreator] = struct{}{}
}

// CreatorCleared returns if the "creator" field was cleared in this mutation.
func (m *EmployeeMutation) CreatorCleared() bool {
	_, ok := m.clearedFields[employee.FieldCreator]
	return ok
}

// ResetCreator resets all changes to the "creator" field.
func (m *EmployeeMutation) ResetCreator() {
	m.creator = nil
	delete(m.clearedFields, employee.FieldCreator)
}

// SetLastModifier sets the "last_modifier" field.
func (m *EmployeeMutation) SetLastModifier(value *model.Modifier) {
	m.last_modifier = &value
}

// LastModifier returns the value of the "last_modifier" field in the mutation.
func (m *EmployeeMutation) LastModifier() (r *model.Modifier, exists bool) {
	v := m.last_modifier
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModifier returns the old "last_modifier" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldLastModifier(ctx context.Context) (v *model.Modifier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModifier: %w", err)
	}
	return oldValue.LastModifier, nil
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (m *EmployeeMutation) ClearLastModifier() {
	m.last_modifier = nil
	m.clearedFields[employee.FieldLastModifier] = struct{}{}
}

// LastModifierCleared returns if the "last_modifier" field was cleared in this mutation.
func (m *EmployeeMutation) LastModifierCleared() bool {
	_, ok := m.clearedFields[employee.FieldLastModifier]
	return ok
}

// ResetLastModifier resets all changes to the "last_modifier" field.
func (m *EmployeeMutation) ResetLastModifier() {
	m.last_modifier = nil
	delete(m.clearedFields, employee.FieldLastModifier)
}

// SetRemark sets the "remark" field.
func (m *EmployeeMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *EmployeeMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *EmployeeMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[employee.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *EmployeeMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[employee.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *EmployeeMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, employee.FieldRemark)
}

// SetCityID sets the "city_id" field.
func (m *EmployeeMutation) SetCityID(u uint64) {
	m.city = &u
}

// CityID returns the value of the "city_id" field in the mutation.
func (m *EmployeeMutation) CityID() (r uint64, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCityID returns the old "city_id" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldCityID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityID: %w", err)
	}
	return oldValue.CityID, nil
}

// ResetCityID resets all changes to the "city_id" field.
func (m *EmployeeMutation) ResetCityID() {
	m.city = nil
}

// SetSn sets the "sn" field.
func (m *EmployeeMutation) SetSn(u uuid.UUID) {
	m.sn = &u
}

// Sn returns the value of the "sn" field in the mutation.
func (m *EmployeeMutation) Sn() (r uuid.UUID, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldSn(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ClearSn clears the value of the "sn" field.
func (m *EmployeeMutation) ClearSn() {
	m.sn = nil
	m.clearedFields[employee.FieldSn] = struct{}{}
}

// SnCleared returns if the "sn" field was cleared in this mutation.
func (m *EmployeeMutation) SnCleared() bool {
	_, ok := m.clearedFields[employee.FieldSn]
	return ok
}

// ResetSn resets all changes to the "sn" field.
func (m *EmployeeMutation) ResetSn() {
	m.sn = nil
	delete(m.clearedFields, employee.FieldSn)
}

// SetName sets the "name" field.
func (m *EmployeeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmployeeMutation) ResetName() {
	m.name = nil
}

// SetPhone sets the "phone" field.
func (m *EmployeeMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *EmployeeMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *EmployeeMutation) ResetPhone() {
	m.phone = nil
}

// SetEnable sets the "enable" field.
func (m *EmployeeMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *EmployeeMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ResetEnable resets all changes to the "enable" field.
func (m *EmployeeMutation) ResetEnable() {
	m.enable = nil
}

// ClearCity clears the "city" edge to the City entity.
func (m *EmployeeMutation) ClearCity() {
	m.clearedcity = true
}

// CityCleared reports if the "city" edge to the City entity was cleared.
func (m *EmployeeMutation) CityCleared() bool {
	return m.clearedcity
}

// CityIDs returns the "city" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CityID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) CityIDs() (ids []uint64) {
	if id := m.city; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCity resets all changes to the "city" edge.
func (m *EmployeeMutation) ResetCity() {
	m.city = nil
	m.clearedcity = false
}

// SetStoreID sets the "store" edge to the Store entity by id.
func (m *EmployeeMutation) SetStoreID(id uint64) {
	m.store = &id
}

// ClearStore clears the "store" edge to the Store entity.
func (m *EmployeeMutation) ClearStore() {
	m.clearedstore = true
}

// StoreCleared reports if the "store" edge to the Store entity was cleared.
func (m *EmployeeMutation) StoreCleared() bool {
	return m.clearedstore
}

// StoreID returns the "store" edge ID in the mutation.
func (m *EmployeeMutation) StoreID() (id uint64, exists bool) {
	if m.store != nil {
		return *m.store, true
	}
	return
}

// StoreIDs returns the "store" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StoreID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) StoreIDs() (ids []uint64) {
	if id := m.store; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStore resets all changes to the "store" edge.
func (m *EmployeeMutation) ResetStore() {
	m.store = nil
	m.clearedstore = false
}

// AddAttendanceIDs adds the "attendances" edge to the Attendance entity by ids.
func (m *EmployeeMutation) AddAttendanceIDs(ids ...uint64) {
	if m.attendances == nil {
		m.attendances = make(map[uint64]struct{})
	}
	for i := range ids {
		m.attendances[ids[i]] = struct{}{}
	}
}

// ClearAttendances clears the "attendances" edge to the Attendance entity.
func (m *EmployeeMutation) ClearAttendances() {
	m.clearedattendances = true
}

// AttendancesCleared reports if the "attendances" edge to the Attendance entity was cleared.
func (m *EmployeeMutation) AttendancesCleared() bool {
	return m.clearedattendances
}

// RemoveAttendanceIDs removes the "attendances" edge to the Attendance entity by IDs.
func (m *EmployeeMutation) RemoveAttendanceIDs(ids ...uint64) {
	if m.removedattendances == nil {
		m.removedattendances = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.attendances, ids[i])
		m.removedattendances[ids[i]] = struct{}{}
	}
}

// RemovedAttendances returns the removed IDs of the "attendances" edge to the Attendance entity.
func (m *EmployeeMutation) RemovedAttendancesIDs() (ids []uint64) {
	for id := range m.removedattendances {
		ids = append(ids, id)
	}
	return
}

// AttendancesIDs returns the "attendances" edge IDs in the mutation.
func (m *EmployeeMutation) AttendancesIDs() (ids []uint64) {
	for id := range m.attendances {
		ids = append(ids, id)
	}
	return
}

// ResetAttendances resets all changes to the "attendances" edge.
func (m *EmployeeMutation) ResetAttendances() {
	m.attendances = nil
	m.clearedattendances = false
	m.removedattendances = nil
}

// AddStockIDs adds the "stocks" edge to the Stock entity by ids.
func (m *EmployeeMutation) AddStockIDs(ids ...uint64) {
	if m.stocks == nil {
		m.stocks = make(map[uint64]struct{})
	}
	for i := range ids {
		m.stocks[ids[i]] = struct{}{}
	}
}

// ClearStocks clears the "stocks" edge to the Stock entity.
func (m *EmployeeMutation) ClearStocks() {
	m.clearedstocks = true
}

// StocksCleared reports if the "stocks" edge to the Stock entity was cleared.
func (m *EmployeeMutation) StocksCleared() bool {
	return m.clearedstocks
}

// RemoveStockIDs removes the "stocks" edge to the Stock entity by IDs.
func (m *EmployeeMutation) RemoveStockIDs(ids ...uint64) {
	if m.removedstocks == nil {
		m.removedstocks = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.stocks, ids[i])
		m.removedstocks[ids[i]] = struct{}{}
	}
}

// RemovedStocks returns the removed IDs of the "stocks" edge to the Stock entity.
func (m *EmployeeMutation) RemovedStocksIDs() (ids []uint64) {
	for id := range m.removedstocks {
		ids = append(ids, id)
	}
	return
}

// StocksIDs returns the "stocks" edge IDs in the mutation.
func (m *EmployeeMutation) StocksIDs() (ids []uint64) {
	for id := range m.stocks {
		ids = append(ids, id)
	}
	return
}

// ResetStocks resets all changes to the "stocks" edge.
func (m *EmployeeMutation) ResetStocks() {
	m.stocks = nil
	m.clearedstocks = false
	m.removedstocks = nil
}

// AddExchangeIDs adds the "exchanges" edge to the Exchange entity by ids.
func (m *EmployeeMutation) AddExchangeIDs(ids ...uint64) {
	if m.exchanges == nil {
		m.exchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		m.exchanges[ids[i]] = struct{}{}
	}
}

// ClearExchanges clears the "exchanges" edge to the Exchange entity.
func (m *EmployeeMutation) ClearExchanges() {
	m.clearedexchanges = true
}

// ExchangesCleared reports if the "exchanges" edge to the Exchange entity was cleared.
func (m *EmployeeMutation) ExchangesCleared() bool {
	return m.clearedexchanges
}

// RemoveExchangeIDs removes the "exchanges" edge to the Exchange entity by IDs.
func (m *EmployeeMutation) RemoveExchangeIDs(ids ...uint64) {
	if m.removedexchanges == nil {
		m.removedexchanges = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.exchanges, ids[i])
		m.removedexchanges[ids[i]] = struct{}{}
	}
}

// RemovedExchanges returns the removed IDs of the "exchanges" edge to the Exchange entity.
func (m *EmployeeMutation) RemovedExchangesIDs() (ids []uint64) {
	for id := range m.removedexchanges {
		ids = append(ids, id)
	}
	return
}

// ExchangesIDs returns the "exchanges" edge IDs in the mutation.
func (m *EmployeeMutation) ExchangesIDs() (ids []uint64) {
	for id := range m.exchanges {
		ids = append(ids, id)
	}
	return
}

// ResetExchanges resets all changes to the "exchanges" edge.
func (m *EmployeeMutation) ResetExchanges() {
	m.exchanges = nil
	m.clearedexchanges = false
	m.removedexchanges = nil
}

// AddCommissionIDs adds the "commissions" edge to the Commission entity by ids.
func (m *EmployeeMutation) AddCommissionIDs(ids ...uint64) {
	if m.commissions == nil {
		m.commissions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.commissions[ids[i]] = struct{}{}
	}
}

// ClearCommissions clears the "commissions" edge to the Commission entity.
func (m *EmployeeMutation) ClearCommissions() {
	m.clearedcommissions = true
}

// CommissionsCleared reports if the "commissions" edge to the Commission entity was cleared.
func (m *EmployeeMutation) CommissionsCleared() bool {
	return m.clearedcommissions
}

// RemoveCommissionIDs removes the "commissions" edge to the Commission entity by IDs.
func (m *EmployeeMutation) RemoveCommissionIDs(ids ...uint64) {
	if m.removedcommissions == nil {
		m.removedcommissions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.commissions, ids[i])
		m.removedcommissions[ids[i]] = struct{}{}
	}
}

// RemovedCommissions returns the removed IDs of the "commissions" edge to the Commission entity.
func (m *EmployeeMutation) RemovedCommissionsIDs() (ids []uint64) {
	for id := range m.removedcommissions {
		ids = append(ids, id)
	}
	return
}

// CommissionsIDs returns the "commissions" edge IDs in the mutation.
func (m *EmployeeMutation) CommissionsIDs() (ids []uint64) {
	for id := range m.commissions {
		ids = append(ids, id)
	}
	return
}

// ResetCommissions resets all changes to the "commissions" edge.
func (m *EmployeeMutation) ResetCommissions() {
	m.commissions = nil
	m.clearedcommissions = false
	m.removedcommissions = nil
}

// AddAssistanceIDs adds the "assistances" edge to the Assistance entity by ids.
func (m *EmployeeMutation) AddAssistanceIDs(ids ...uint64) {
	if m.assistances == nil {
		m.assistances = make(map[uint64]struct{})
	}
	for i := range ids {
		m.assistances[ids[i]] = struct{}{}
	}
}

// ClearAssistances clears the "assistances" edge to the Assistance entity.
func (m *EmployeeMutation) ClearAssistances() {
	m.clearedassistances = true
}

// AssistancesCleared reports if the "assistances" edge to the Assistance entity was cleared.
func (m *EmployeeMutation) AssistancesCleared() bool {
	return m.clearedassistances
}

// RemoveAssistanceIDs removes the "assistances" edge to the Assistance entity by IDs.
func (m *EmployeeMutation) RemoveAssistanceIDs(ids ...uint64) {
	if m.removedassistances == nil {
		m.removedassistances = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.assistances, ids[i])
		m.removedassistances[ids[i]] = struct{}{}
	}
}

// RemovedAssistances returns the removed IDs of the "assistances" edge to the Assistance entity.
func (m *EmployeeMutation) RemovedAssistancesIDs() (ids []uint64) {
	for id := range m.removedassistances {
		ids = append(ids, id)
	}
	return
}

// AssistancesIDs returns the "assistances" edge IDs in the mutation.
func (m *EmployeeMutation) AssistancesIDs() (ids []uint64) {
	for id := range m.assistances {
		ids = append(ids, id)
	}
	return
}

// ResetAssistances resets all changes to the "assistances" edge.
func (m *EmployeeMutation) ResetAssistances() {
	m.assistances = nil
	m.clearedassistances = false
	m.removedassistances = nil
}

// Where appends a list predicates to the EmployeeMutation builder.
func (m *EmployeeMutation) Where(ps ...predicate.Employee) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, employee.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, employee.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, employee.FieldDeletedAt)
	}
	if m.creator != nil {
		fields = append(fields, employee.FieldCreator)
	}
	if m.last_modifier != nil {
		fields = append(fields, employee.FieldLastModifier)
	}
	if m.remark != nil {
		fields = append(fields, employee.FieldRemark)
	}
	if m.city != nil {
		fields = append(fields, employee.FieldCityID)
	}
	if m.sn != nil {
		fields = append(fields, employee.FieldSn)
	}
	if m.name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m.phone != nil {
		fields = append(fields, employee.FieldPhone)
	}
	if m.enable != nil {
		fields = append(fields, employee.FieldEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldCreatedAt:
		return m.CreatedAt()
	case employee.FieldUpdatedAt:
		return m.UpdatedAt()
	case employee.FieldDeletedAt:
		return m.DeletedAt()
	case employee.FieldCreator:
		return m.Creator()
	case employee.FieldLastModifier:
		return m.LastModifier()
	case employee.FieldRemark:
		return m.Remark()
	case employee.FieldCityID:
		return m.CityID()
	case employee.FieldSn:
		return m.Sn()
	case employee.FieldName:
		return m.Name()
	case employee.FieldPhone:
		return m.Phone()
	case employee.FieldEnable:
		return m.Enable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case employee.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case employee.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case employee.FieldCreator:
		return m.OldCreator(ctx)
	case employee.FieldLastModifier:
		return m.OldLastModifier(ctx)
	case employee.FieldRemark:
		return m.OldRemark(ctx)
	case employee.FieldCityID:
		return m.OldCityID(ctx)
	case employee.FieldSn:
		return m.OldSn(ctx)
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldPhone:
		return m.OldPhone(ctx)
	case employee.FieldEnable:
		return m.OldEnable(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case employee.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case employee.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case employee.FieldCreator:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreator(v)
		return nil
	case employee.FieldLastModifier:
		v, ok := value.(*model.Modifier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModifier(v)
		return nil
	case employee.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case employee.FieldCityID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityID(v)
		return nil
	case employee.FieldSn:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case employee.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(employee.FieldDeletedAt) {
		fields = append(fields, employee.FieldDeletedAt)
	}
	if m.FieldCleared(employee.FieldCreator) {
		fields = append(fields, employee.FieldCreator)
	}
	if m.FieldCleared(employee.FieldLastModifier) {
		fields = append(fields, employee.FieldLastModifier)
	}
	if m.FieldCleared(employee.FieldRemark) {
		fields = append(fields, employee.FieldRemark)
	}
	if m.FieldCleared(employee.FieldSn) {
		fields = append(fields, employee.FieldSn)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	switch name {
	case employee.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case employee.FieldCreator:
		m.ClearCreator()
		return nil
	case employee.FieldLastModifier:
		m.ClearLastModifier()
		return nil
	case employee.FieldRemark:
		m.ClearRemark()
		return nil
	case employee.FieldSn:
		m.ClearSn()
		return nil
	}
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case employee.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case employee.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case employee.FieldCreator:
		m.ResetCreator()
		return nil
	case employee.FieldLastModifier:
		m.ResetLastModifier()
		return nil
	case employee.FieldRemark:
		m.ResetRemark()
		return nil
	case employee.FieldCityID:
		m.ResetCityID()
		return nil
	case employee.FieldSn:
		m.ResetSn()
		return nil
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldPhone:
		m.ResetPhone()
		return nil
	case employee.FieldEnable:
		m.ResetEnable()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.city != nil {
		edges = append(edges, employee.EdgeCity)
	}
	if m.store != nil {
		edges = append(edges, employee.EdgeStore)
	}
	if m.attendances != nil {
		edges = append(edges, employee.EdgeAttendances)
	}
	if m.stocks != nil {
		edges = append(edges, employee.EdgeStocks)
	}
	if m.exchanges != nil {
		edges = append(edges, employee.EdgeExchanges)
	}
	if m.commissions != nil {
		edges = append(edges, employee.EdgeCommissions)
	}
	if m.assistances != nil {
		edges = append(edges, employee.EdgeAssistances)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeCity:
		if id := m.city; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgeStore:
		if id := m.store; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgeAttendances:
		ids := make([]ent.Value, 0, len(m.attendances))
		for id := range m.attendances {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.stocks))
		for id := range m.stocks {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.exchanges))
		for id := range m.exchanges {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeCommissions:
		ids := make([]ent.Value, 0, len(m.commissions))
		for id := range m.commissions {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeAssistances:
		ids := make([]ent.Value, 0, len(m.assistances))
		for id := range m.assistances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedattendances != nil {
		edges = append(edges, employee.EdgeAttendances)
	}
	if m.removedstocks != nil {
		edges = append(edges, employee.EdgeStocks)
	}
	if m.removedexchanges != nil {
		edges = append(edges, employee.EdgeExchanges)
	}
	if m.removedcommissions != nil {
		edges = append(edges, employee.EdgeCommissions)
	}
	if m.removedassistances != nil {
		edges = append(edges, employee.EdgeAssistances)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeAttendances:
		ids := make([]ent.Value, 0, len(m.removedattendances))
		for id := range m.removedattendances {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeStocks:
		ids := make([]ent.Value, 0, len(m.removedstocks))
		for id := range m.removedstocks {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeExchanges:
		ids := make([]ent.Value, 0, len(m.removedexchanges))
		for id := range m.removedexchanges {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeCommissions:
		ids := make([]ent.Value, 0, len(m.removedcommissions))
		for id := range m.removedcommissions {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeAssistances:
		ids := make([]ent.Value, 0, len(m.removedassistances))
		for id := range m.removedassistances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedcity {
		edges = append(edges, employee.EdgeCity)
	}
	if m.clearedstore {
		edges = append(edges, employee.EdgeStore)
	}
	if m.clearedattendances {
		edges = append(edges, employee.EdgeAttendances)
	}
	if m.clearedstocks {
		edges = append(edges, employee.EdgeStocks)
	}
	if m.clearedexchanges {
		edges = append(edges, employee.EdgeExchanges)
	}
	if m.clearedcommissions {
		edges = append(edges, employee.EdgeCommissions)
	}
	if m.clearedassistances {
		edges = append(edges, employee.EdgeAssistances)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	case employee.EdgeCity:
		return m.clearedcity
	case employee.EdgeStore:
		return m.clearedstore
	case employee.EdgeAttendances:
		return m.clearedattendances
	case employee.EdgeStocks:
		return m.clearedstocks
	case employee.EdgeExchanges:
		return m.clearedexchanges
	case employee.EdgeCommissions:
		return m.clearedcommissions
	case employee.EdgeAssistances:
		return m.clearedassistances
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	case employee.EdgeCity:
		m.ClearCity()
		return nil
	case employee.EdgeStore:
		m.ClearStore()
		return nil
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeCity:
		m.ResetCity()
		return nil
	case employee.EdgeStore:
		m.ResetStore()
		return nil
	case employee.EdgeAttendances:
		m.ResetAttendances()
		return nil
	case employee.EdgeStocks:
		m.ResetStocks()
		return nil
	case employee.EdgeExchanges:
		m.ResetExchanges()
		return nil
	case employee.EdgeCommissions:
		m.ResetCommissions()
		return nil
	case employee.EdgeAssistances:
		m.ResetAssistances()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

