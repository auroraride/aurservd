// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// AssistanceQuery is the builder for querying Assistance entities.
type AssistanceQuery struct {
	config
	limit         *int
	offset        *int
	unique        *bool
	order         []OrderFunc
	fields        []string
	inters        []Interceptor
	predicates    []predicate.Assistance
	withStore     *StoreQuery
	withRider     *RiderQuery
	withSubscribe *SubscribeQuery
	withCity      *CityQuery
	withOrder     *OrderQuery
	withEmployee  *EmployeeQuery
	modifiers     []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssistanceQuery builder.
func (aq *AssistanceQuery) Where(ps ...predicate.Assistance) *AssistanceQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit the number of records to be returned by this query.
func (aq *AssistanceQuery) Limit(limit int) *AssistanceQuery {
	aq.limit = &limit
	return aq
}

// Offset to start from.
func (aq *AssistanceQuery) Offset(offset int) *AssistanceQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *AssistanceQuery) Unique(unique bool) *AssistanceQuery {
	aq.unique = &unique
	return aq
}

// Order specifies how the records should be ordered.
func (aq *AssistanceQuery) Order(o ...OrderFunc) *AssistanceQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryStore chains the current query on the "store" edge.
func (aq *AssistanceQuery) QueryStore() *StoreQuery {
	query := (&StoreClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(store.Table, store.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.StoreTable, assistance.StoreColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRider chains the current query on the "rider" edge.
func (aq *AssistanceQuery) QueryRider() *RiderQuery {
	query := (&RiderClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(rider.Table, rider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.RiderTable, assistance.RiderColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribe chains the current query on the "subscribe" edge.
func (aq *AssistanceQuery) QuerySubscribe() *SubscribeQuery {
	query := (&SubscribeClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(subscribe.Table, subscribe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.SubscribeTable, assistance.SubscribeColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCity chains the current query on the "city" edge.
func (aq *AssistanceQuery) QueryCity() *CityQuery {
	query := (&CityClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(city.Table, city.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assistance.CityTable, assistance.CityColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrder chains the current query on the "order" edge.
func (aq *AssistanceQuery) QueryOrder() *OrderQuery {
	query := (&OrderClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(order.Table, order.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, assistance.OrderTable, assistance.OrderColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmployee chains the current query on the "employee" edge.
func (aq *AssistanceQuery) QueryEmployee() *EmployeeQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assistance.Table, assistance.FieldID, selector),
			sqlgraph.To(employee.Table, employee.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assistance.EmployeeTable, assistance.EmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Assistance entity from the query.
// Returns a *NotFoundError when no Assistance was found.
func (aq *AssistanceQuery) First(ctx context.Context) (*Assistance, error) {
	nodes, err := aq.Limit(1).All(newQueryContext(ctx, TypeAssistance, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assistance.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *AssistanceQuery) FirstX(ctx context.Context) *Assistance {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Assistance ID from the query.
// Returns a *NotFoundError when no Assistance ID was found.
func (aq *AssistanceQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(1).IDs(newQueryContext(ctx, TypeAssistance, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assistance.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *AssistanceQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Assistance entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Assistance entity is found.
// Returns a *NotFoundError when no Assistance entities are found.
func (aq *AssistanceQuery) Only(ctx context.Context) (*Assistance, error) {
	nodes, err := aq.Limit(2).All(newQueryContext(ctx, TypeAssistance, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assistance.Label}
	default:
		return nil, &NotSingularError{assistance.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *AssistanceQuery) OnlyX(ctx context.Context) *Assistance {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Assistance ID in the query.
// Returns a *NotSingularError when more than one Assistance ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *AssistanceQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(2).IDs(newQueryContext(ctx, TypeAssistance, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assistance.Label}
	default:
		err = &NotSingularError{assistance.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *AssistanceQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Assistances.
func (aq *AssistanceQuery) All(ctx context.Context) ([]*Assistance, error) {
	ctx = newQueryContext(ctx, TypeAssistance, "All")
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Assistance, *AssistanceQuery]()
	return withInterceptors[[]*Assistance](ctx, aq, qr, aq.inters)
}

// AllX is like All, but panics if an error occurs.
func (aq *AssistanceQuery) AllX(ctx context.Context) []*Assistance {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Assistance IDs.
func (aq *AssistanceQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	ctx = newQueryContext(ctx, TypeAssistance, "IDs")
	if err := aq.Select(assistance.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *AssistanceQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *AssistanceQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeAssistance, "Count")
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, aq, querierCount[*AssistanceQuery](), aq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (aq *AssistanceQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *AssistanceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeAssistance, "Exist")
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *AssistanceQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssistanceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *AssistanceQuery) Clone() *AssistanceQuery {
	if aq == nil {
		return nil
	}
	return &AssistanceQuery{
		config:        aq.config,
		limit:         aq.limit,
		offset:        aq.offset,
		order:         append([]OrderFunc{}, aq.order...),
		predicates:    append([]predicate.Assistance{}, aq.predicates...),
		withStore:     aq.withStore.Clone(),
		withRider:     aq.withRider.Clone(),
		withSubscribe: aq.withSubscribe.Clone(),
		withCity:      aq.withCity.Clone(),
		withOrder:     aq.withOrder.Clone(),
		withEmployee:  aq.withEmployee.Clone(),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// WithStore tells the query-builder to eager-load the nodes that are connected to
// the "store" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithStore(opts ...func(*StoreQuery)) *AssistanceQuery {
	query := (&StoreClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withStore = query
	return aq
}

// WithRider tells the query-builder to eager-load the nodes that are connected to
// the "rider" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithRider(opts ...func(*RiderQuery)) *AssistanceQuery {
	query := (&RiderClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withRider = query
	return aq
}

// WithSubscribe tells the query-builder to eager-load the nodes that are connected to
// the "subscribe" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithSubscribe(opts ...func(*SubscribeQuery)) *AssistanceQuery {
	query := (&SubscribeClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withSubscribe = query
	return aq
}

// WithCity tells the query-builder to eager-load the nodes that are connected to
// the "city" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithCity(opts ...func(*CityQuery)) *AssistanceQuery {
	query := (&CityClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withCity = query
	return aq
}

// WithOrder tells the query-builder to eager-load the nodes that are connected to
// the "order" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithOrder(opts ...func(*OrderQuery)) *AssistanceQuery {
	query := (&OrderClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrder = query
	return aq
}

// WithEmployee tells the query-builder to eager-load the nodes that are connected to
// the "employee" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *AssistanceQuery) WithEmployee(opts ...func(*EmployeeQuery)) *AssistanceQuery {
	query := (&EmployeeClient{config: aq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	aq.withEmployee = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Assistance.Query().
//		GroupBy(assistance.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *AssistanceQuery) GroupBy(field string, fields ...string) *AssistanceGroupBy {
	aq.fields = append([]string{field}, fields...)
	grbuild := &AssistanceGroupBy{build: aq}
	grbuild.flds = &aq.fields
	grbuild.label = assistance.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Assistance.Query().
//		Select(assistance.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *AssistanceQuery) Select(fields ...string) *AssistanceSelect {
	aq.fields = append(aq.fields, fields...)
	sbuild := &AssistanceSelect{AssistanceQuery: aq}
	sbuild.label = assistance.Label
	sbuild.flds, sbuild.scan = &aq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssistanceSelect configured with the given aggregations.
func (aq *AssistanceQuery) Aggregate(fns ...AggregateFunc) *AssistanceSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *AssistanceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range aq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, aq); err != nil {
				return err
			}
		}
	}
	for _, f := range aq.fields {
		if !assistance.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *AssistanceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Assistance, error) {
	var (
		nodes       = []*Assistance{}
		_spec       = aq.querySpec()
		loadedTypes = [6]bool{
			aq.withStore != nil,
			aq.withRider != nil,
			aq.withSubscribe != nil,
			aq.withCity != nil,
			aq.withOrder != nil,
			aq.withEmployee != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Assistance).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Assistance{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withStore; query != nil {
		if err := aq.loadStore(ctx, query, nodes, nil,
			func(n *Assistance, e *Store) { n.Edges.Store = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withRider; query != nil {
		if err := aq.loadRider(ctx, query, nodes, nil,
			func(n *Assistance, e *Rider) { n.Edges.Rider = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSubscribe; query != nil {
		if err := aq.loadSubscribe(ctx, query, nodes, nil,
			func(n *Assistance, e *Subscribe) { n.Edges.Subscribe = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withCity; query != nil {
		if err := aq.loadCity(ctx, query, nodes, nil,
			func(n *Assistance, e *City) { n.Edges.City = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrder; query != nil {
		if err := aq.loadOrder(ctx, query, nodes, nil,
			func(n *Assistance, e *Order) { n.Edges.Order = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEmployee; query != nil {
		if err := aq.loadEmployee(ctx, query, nodes, nil,
			func(n *Assistance, e *Employee) { n.Edges.Employee = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *AssistanceQuery) loadStore(ctx context.Context, query *StoreQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *Store)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		if nodes[i].StoreID == nil {
			continue
		}
		fk := *nodes[i].StoreID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(store.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "store_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssistanceQuery) loadRider(ctx context.Context, query *RiderQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *Rider)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		fk := nodes[i].RiderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(rider.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "rider_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssistanceQuery) loadSubscribe(ctx context.Context, query *SubscribeQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *Subscribe)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		fk := nodes[i].SubscribeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(subscribe.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscribe_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssistanceQuery) loadCity(ctx context.Context, query *CityQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *City)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		fk := nodes[i].CityID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(city.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "city_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssistanceQuery) loadOrder(ctx context.Context, query *OrderQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *Order)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		if nodes[i].OrderID == nil {
			continue
		}
		fk := *nodes[i].OrderID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(order.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "order_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *AssistanceQuery) loadEmployee(ctx context.Context, query *EmployeeQuery, nodes []*Assistance, init func(*Assistance), assign func(*Assistance, *Employee)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Assistance)
	for i := range nodes {
		if nodes[i].EmployeeID == nil {
			continue
		}
		fk := *nodes[i].EmployeeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(employee.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "employee_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (aq *AssistanceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *AssistanceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assistance.Table,
			Columns: assistance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assistance.FieldID)
		for i := range fields {
			if fields[i] != assistance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *AssistanceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(assistance.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = assistance.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, m := range aq.modifiers {
		m(selector)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aq *AssistanceQuery) Modify(modifiers ...func(s *sql.Selector)) *AssistanceSelect {
	aq.modifiers = append(aq.modifiers, modifiers...)
	return aq.Select()
}

// AssistanceGroupBy is the group-by builder for Assistance entities.
type AssistanceGroupBy struct {
	selector
	build *AssistanceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *AssistanceGroupBy) Aggregate(fns ...AggregateFunc) *AssistanceGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the selector query and scans the result into the given value.
func (agb *AssistanceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeAssistance, "GroupBy")
	if err := agb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssistanceQuery, *AssistanceGroupBy](ctx, agb.build, agb, agb.build.inters, v)
}

func (agb *AssistanceGroupBy) sqlScan(ctx context.Context, root *AssistanceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*agb.flds)+len(agb.fns))
		for _, f := range *agb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*agb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssistanceSelect is the builder for selecting fields of Assistance entities.
type AssistanceSelect struct {
	*AssistanceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *AssistanceSelect) Aggregate(fns ...AggregateFunc) *AssistanceSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *AssistanceSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeAssistance, "Select")
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssistanceQuery, *AssistanceSelect](ctx, as.AssistanceQuery, as, as.inters, v)
}

func (as *AssistanceSelect) sqlScan(ctx context.Context, root *AssistanceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (as *AssistanceSelect) Modify(modifiers ...func(s *sql.Selector)) *AssistanceSelect {
	as.modifiers = append(as.modifiers, modifiers...)
	return as
}
