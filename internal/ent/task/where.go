// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// RiderID applies equality check predicate on the "rider_id" field. It's identical to RiderIDEQ.
func RiderID(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRiderID, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUUID, v))
}

// ExchangeID applies equality check predicate on the "exchange_id" field. It's identical to ExchangeIDEQ.
func ExchangeID(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExchangeID, v))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCabinetID, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSerial, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartAt, v))
}

// StopAt applies equality check predicate on the "stop_at" field. It's identical to StopAtEQ.
func StopAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStopAt, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// RiderIDEQ applies the EQ predicate on the "rider_id" field.
func RiderIDEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRiderID, v))
}

// RiderIDNEQ applies the NEQ predicate on the "rider_id" field.
func RiderIDNEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRiderID, v))
}

// RiderIDIn applies the In predicate on the "rider_id" field.
func RiderIDIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRiderID, vs...))
}

// RiderIDNotIn applies the NotIn predicate on the "rider_id" field.
func RiderIDNotIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRiderID, vs...))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...xid.ID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...xid.ID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v xid.ID) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUUID, v))
}

// ExchangeIDEQ applies the EQ predicate on the "exchange_id" field.
func ExchangeIDEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExchangeID, v))
}

// ExchangeIDNEQ applies the NEQ predicate on the "exchange_id" field.
func ExchangeIDNEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldExchangeID, v))
}

// ExchangeIDIn applies the In predicate on the "exchange_id" field.
func ExchangeIDIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldExchangeID, vs...))
}

// ExchangeIDNotIn applies the NotIn predicate on the "exchange_id" field.
func ExchangeIDNotIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldExchangeID, vs...))
}

// ExchangeIDGT applies the GT predicate on the "exchange_id" field.
func ExchangeIDGT(v uint64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldExchangeID, v))
}

// ExchangeIDGTE applies the GTE predicate on the "exchange_id" field.
func ExchangeIDGTE(v uint64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldExchangeID, v))
}

// ExchangeIDLT applies the LT predicate on the "exchange_id" field.
func ExchangeIDLT(v uint64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldExchangeID, v))
}

// ExchangeIDLTE applies the LTE predicate on the "exchange_id" field.
func ExchangeIDLTE(v uint64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldExchangeID, v))
}

// ExchangeIDIsNil applies the IsNil predicate on the "exchange_id" field.
func ExchangeIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldExchangeID))
}

// ExchangeIDNotNil applies the NotNil predicate on the "exchange_id" field.
func ExchangeIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldExchangeID))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCabinetID, vs...))
}

// CabinetIDGT applies the GT predicate on the "cabinet_id" field.
func CabinetIDGT(v uint64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCabinetID, v))
}

// CabinetIDGTE applies the GTE predicate on the "cabinet_id" field.
func CabinetIDGTE(v uint64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCabinetID, v))
}

// CabinetIDLT applies the LT predicate on the "cabinet_id" field.
func CabinetIDLT(v uint64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCabinetID, v))
}

// CabinetIDLTE applies the LTE predicate on the "cabinet_id" field.
func CabinetIDLTE(v uint64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCabinetID, v))
}

// CabinetIDIsNil applies the IsNil predicate on the "cabinet_id" field.
func CabinetIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCabinetID))
}

// CabinetIDNotNil applies the NotNil predicate on the "cabinet_id" field.
func CabinetIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCabinetID))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSerial, v))
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v model.TaskJob) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldEQ(FieldJob, vc))
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v model.TaskJob) predicate.Task {
	vc := v
	return predicate.Task(sql.FieldNEQ(FieldJob, vc))
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...model.TaskJob) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldIn(FieldJob, v...))
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...model.TaskJob) predicate.Task {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Task(sql.FieldNotIn(FieldJob, v...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v model.TaskStatus) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStatus, v))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStartAt))
}

// StopAtEQ applies the EQ predicate on the "stop_at" field.
func StopAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStopAt, v))
}

// StopAtNEQ applies the NEQ predicate on the "stop_at" field.
func StopAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStopAt, v))
}

// StopAtIn applies the In predicate on the "stop_at" field.
func StopAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStopAt, vs...))
}

// StopAtNotIn applies the NotIn predicate on the "stop_at" field.
func StopAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStopAt, vs...))
}

// StopAtGT applies the GT predicate on the "stop_at" field.
func StopAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStopAt, v))
}

// StopAtGTE applies the GTE predicate on the "stop_at" field.
func StopAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStopAt, v))
}

// StopAtLT applies the LT predicate on the "stop_at" field.
func StopAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStopAt, v))
}

// StopAtLTE applies the LTE predicate on the "stop_at" field.
func StopAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStopAt, v))
}

// StopAtIsNil applies the IsNil predicate on the "stop_at" field.
func StopAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStopAt))
}

// StopAtNotNil applies the NotNil predicate on the "stop_at" field.
func StopAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStopAt))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMessage, v))
}

// ExchangeIsNil applies the IsNil predicate on the "exchange" field.
func ExchangeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldExchange))
}

// ExchangeNotNil applies the NotNil predicate on the "exchange" field.
func ExchangeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldExchange))
}

// BusinessBinInfoIsNil applies the IsNil predicate on the "business_bin_info" field.
func BusinessBinInfoIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBusinessBinInfo))
}

// BusinessBinInfoNotNil applies the NotNil predicate on the "business_bin_info" field.
func BusinessBinInfoNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBusinessBinInfo))
}

// HasRider applies the HasEdge predicate on the "rider" edge.
func HasRider() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiderWith applies the HasEdge predicate on the "rider" edge with a given conditions (other predicates).
func HasRiderWith(preds ...predicate.Rider) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RiderInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RiderTable, RiderColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		p(s.Not())
	})
}
