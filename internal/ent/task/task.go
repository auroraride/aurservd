// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"

	"github.com/auroraride/aurservd/app/model"
	"github.com/rs/xid"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRiderID holds the string denoting the rider_id field in the database.
	FieldRiderID = "rider_id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldExchangeID holds the string denoting the exchange_id field in the database.
	FieldExchangeID = "exchange_id"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldJob holds the string denoting the job field in the database.
	FieldJob = "job"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldStopAt holds the string denoting the stop_at field in the database.
	FieldStopAt = "stop_at"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldExchange holds the string denoting the exchange field in the database.
	FieldExchange = "exchange"
	// FieldBusinessBinInfo holds the string denoting the business_bin_info field in the database.
	FieldBusinessBinInfo = "business_bin_info"
	// FieldCabinet holds the string denoting the cabinet field in the database.
	FieldCabinet = "cabinet"
	// EdgeRider holds the string denoting the rider edge name in mutations.
	EdgeRider = "rider"
	// Table holds the table name of the task in the database.
	Table = "task"
	// RiderTable is the table that holds the rider relation/edge.
	RiderTable = "task"
	// RiderInverseTable is the table name for the Rider entity.
	// It exists in this package in order to avoid circular dependency with the "rider" package.
	RiderInverseTable = "rider"
	// RiderColumn is the table column denoting the rider relation/edge.
	RiderColumn = "rider_id"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRiderID,
	FieldUUID,
	FieldExchangeID,
	FieldCabinetID,
	FieldSerial,
	FieldJob,
	FieldStatus,
	FieldStartAt,
	FieldStopAt,
	FieldMessage,
	FieldExchange,
	FieldBusinessBinInfo,
	FieldCabinet,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() xid.ID
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus model.TaskStatus
)

// JobValidator is a validator for the "job" field enum values. It is called by the builders before save.
func JobValidator(j model.TaskJob) error {
	switch j.String() {
	case "RDR_EXCHANGE", "RDR_ACTIVE", "RDR_UNSUBSCRIBE", "RDR_PAUSE", "RDR_CONTINUE", "MGR_OPEN", "MGR_LOCK", "MGR_UNLOCK", "MGR_REBOOT", "MGR_EXCHANGE":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for job field: %q", j)
	}
}
