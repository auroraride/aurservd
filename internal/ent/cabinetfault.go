// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/branch"
	"github.com/auroraride/aurservd/internal/ent/cabinet"
	"github.com/auroraride/aurservd/internal/ent/cabinetfault"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/rider"
)

// CabinetFault is the model entity for the CabinetFault schema.
type CabinetFault struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Creator holds the value of the "creator" field.
	// 创建人
	Creator *model.Modifier `json:"creator,omitempty"`
	// LastModifier holds the value of the "last_modifier" field.
	// 最后修改人
	LastModifier *model.Modifier `json:"last_modifier,omitempty"`
	// Remark holds the value of the "remark" field.
	// 管理员改动原因/备注
	Remark string `json:"remark,omitempty"`
	// CityID holds the value of the "city_id" field.
	// 城市ID
	CityID uint64 `json:"city_id,omitempty"`
	// Status holds the value of the "status" field.
	// 故障状态 0未处理 1已处理
	Status uint8 `json:"status,omitempty"`
	// BranchID holds the value of the "branch_id" field.
	// 网点ID
	BranchID uint64 `json:"branch_id,omitempty"`
	// CabinetID holds the value of the "cabinet_id" field.
	// 电柜ID
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// RiderID holds the value of the "rider_id" field.
	// 骑手ID
	RiderID uint64 `json:"rider_id,omitempty"`
	// Fault holds the value of the "fault" field.
	// 故障内容
	Fault string `json:"fault,omitempty"`
	// Attachments holds the value of the "attachments" field.
	// 附件
	Attachments []string `json:"attachments,omitempty"`
	// Description holds the value of the "description" field.
	// 故障留言
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CabinetFaultQuery when eager-loading is set.
	Edges CabinetFaultEdges `json:"edges"`
}

// CabinetFaultEdges holds the relations/edges for other nodes in the graph.
type CabinetFaultEdges struct {
	// City holds the value of the city edge.
	City *City `json:"city,omitempty"`
	// Branch holds the value of the branch edge.
	Branch *Branch `json:"branch,omitempty"`
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// Rider holds the value of the rider edge.
	Rider *Rider `json:"rider,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// CityOrErr returns the City value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetFaultEdges) CityOrErr() (*City, error) {
	if e.loadedTypes[0] {
		if e.City == nil {
			// The edge city was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: city.Label}
		}
		return e.City, nil
	}
	return nil, &NotLoadedError{edge: "city"}
}

// BranchOrErr returns the Branch value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetFaultEdges) BranchOrErr() (*Branch, error) {
	if e.loadedTypes[1] {
		if e.Branch == nil {
			// The edge branch was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: branch.Label}
		}
		return e.Branch, nil
	}
	return nil, &NotLoadedError{edge: "branch"}
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetFaultEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[2] {
		if e.Cabinet == nil {
			// The edge cabinet was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// RiderOrErr returns the Rider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CabinetFaultEdges) RiderOrErr() (*Rider, error) {
	if e.loadedTypes[3] {
		if e.Rider == nil {
			// The edge rider was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rider.Label}
		}
		return e.Rider, nil
	}
	return nil, &NotLoadedError{edge: "rider"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CabinetFault) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cabinetfault.FieldCreator, cabinetfault.FieldLastModifier, cabinetfault.FieldAttachments:
			values[i] = new([]byte)
		case cabinetfault.FieldID, cabinetfault.FieldCityID, cabinetfault.FieldStatus, cabinetfault.FieldBranchID, cabinetfault.FieldCabinetID, cabinetfault.FieldRiderID:
			values[i] = new(sql.NullInt64)
		case cabinetfault.FieldRemark, cabinetfault.FieldFault, cabinetfault.FieldDescription:
			values[i] = new(sql.NullString)
		case cabinetfault.FieldCreatedAt, cabinetfault.FieldUpdatedAt, cabinetfault.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CabinetFault", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CabinetFault fields.
func (cf *CabinetFault) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cabinetfault.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = uint64(value.Int64)
		case cabinetfault.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cf.CreatedAt = value.Time
			}
		case cabinetfault.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cf.UpdatedAt = value.Time
			}
		case cabinetfault.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cf.DeletedAt = new(time.Time)
				*cf.DeletedAt = value.Time
			}
		case cabinetfault.FieldCreator:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.Creator); err != nil {
					return fmt.Errorf("unmarshal field creator: %w", err)
				}
			}
		case cabinetfault.FieldLastModifier:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field last_modifier", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.LastModifier); err != nil {
					return fmt.Errorf("unmarshal field last_modifier: %w", err)
				}
			}
		case cabinetfault.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				cf.Remark = value.String
			}
		case cabinetfault.FieldCityID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field city_id", values[i])
			} else if value.Valid {
				cf.CityID = uint64(value.Int64)
			}
		case cabinetfault.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cf.Status = uint8(value.Int64)
			}
		case cabinetfault.FieldBranchID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field branch_id", values[i])
			} else if value.Valid {
				cf.BranchID = uint64(value.Int64)
			}
		case cabinetfault.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				cf.CabinetID = uint64(value.Int64)
			}
		case cabinetfault.FieldRiderID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rider_id", values[i])
			} else if value.Valid {
				cf.RiderID = uint64(value.Int64)
			}
		case cabinetfault.FieldFault:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fault", values[i])
			} else if value.Valid {
				cf.Fault = value.String
			}
		case cabinetfault.FieldAttachments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cf.Attachments); err != nil {
					return fmt.Errorf("unmarshal field attachments: %w", err)
				}
			}
		case cabinetfault.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cf.Description = value.String
			}
		}
	}
	return nil
}

// QueryCity queries the "city" edge of the CabinetFault entity.
func (cf *CabinetFault) QueryCity() *CityQuery {
	return (&CabinetFaultClient{config: cf.config}).QueryCity(cf)
}

// QueryBranch queries the "branch" edge of the CabinetFault entity.
func (cf *CabinetFault) QueryBranch() *BranchQuery {
	return (&CabinetFaultClient{config: cf.config}).QueryBranch(cf)
}

// QueryCabinet queries the "cabinet" edge of the CabinetFault entity.
func (cf *CabinetFault) QueryCabinet() *CabinetQuery {
	return (&CabinetFaultClient{config: cf.config}).QueryCabinet(cf)
}

// QueryRider queries the "rider" edge of the CabinetFault entity.
func (cf *CabinetFault) QueryRider() *RiderQuery {
	return (&CabinetFaultClient{config: cf.config}).QueryRider(cf)
}

// Update returns a builder for updating this CabinetFault.
// Note that you need to call CabinetFault.Unwrap() before calling this method if this CabinetFault
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CabinetFault) Update() *CabinetFaultUpdateOne {
	return (&CabinetFaultClient{config: cf.config}).UpdateOne(cf)
}

// Unwrap unwraps the CabinetFault entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CabinetFault) Unwrap() *CabinetFault {
	tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CabinetFault is not a transactional entity")
	}
	cf.config.driver = tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CabinetFault) String() string {
	var builder strings.Builder
	builder.WriteString("CabinetFault(")
	builder.WriteString(fmt.Sprintf("id=%v", cf.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(cf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cf.UpdatedAt.Format(time.ANSIC))
	if v := cf.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", creator=")
	builder.WriteString(fmt.Sprintf("%v", cf.Creator))
	builder.WriteString(", last_modifier=")
	builder.WriteString(fmt.Sprintf("%v", cf.LastModifier))
	builder.WriteString(", remark=")
	builder.WriteString(cf.Remark)
	builder.WriteString(", city_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.CityID))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", cf.Status))
	builder.WriteString(", branch_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.BranchID))
	builder.WriteString(", cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.CabinetID))
	builder.WriteString(", rider_id=")
	builder.WriteString(fmt.Sprintf("%v", cf.RiderID))
	builder.WriteString(", fault=")
	builder.WriteString(cf.Fault)
	builder.WriteString(", attachments=")
	builder.WriteString(fmt.Sprintf("%v", cf.Attachments))
	builder.WriteString(", description=")
	builder.WriteString(cf.Description)
	builder.WriteByte(')')
	return builder.String()
}

// CabinetFaults is a parsable slice of CabinetFault.
type CabinetFaults []*CabinetFault

func (cf CabinetFaults) config(cfg config) {
	for _i := range cf {
		cf[_i].config = cfg
	}
}
