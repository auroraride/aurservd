// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contract"
	"github.com/auroraride/aurservd/internal/ent/ebike"
	"github.com/auroraride/aurservd/internal/ent/ebikeallocate"
	"github.com/auroraride/aurservd/internal/ent/ebikebrand"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// EbikeAllocateUpdate is the builder for updating EbikeAllocate entities.
type EbikeAllocateUpdate struct {
	config
	hooks     []Hook
	mutation  *EbikeAllocateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EbikeAllocateUpdate builder.
func (eau *EbikeAllocateUpdate) Where(ps ...predicate.EbikeAllocate) *EbikeAllocateUpdate {
	eau.mutation.Where(ps...)
	return eau
}

// SetEmployeeID sets the "employee_id" field.
func (eau *EbikeAllocateUpdate) SetEmployeeID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetEmployeeID(u)
	return eau
}

// SetStoreID sets the "store_id" field.
func (eau *EbikeAllocateUpdate) SetStoreID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetStoreID(u)
	return eau
}

// SetEbikeID sets the "ebike_id" field.
func (eau *EbikeAllocateUpdate) SetEbikeID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetEbikeID(u)
	return eau
}

// SetBrandID sets the "brand_id" field.
func (eau *EbikeAllocateUpdate) SetBrandID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetBrandID(u)
	return eau
}

// SetSubscribeID sets the "subscribe_id" field.
func (eau *EbikeAllocateUpdate) SetSubscribeID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetSubscribeID(u)
	return eau
}

// SetRiderID sets the "rider_id" field.
func (eau *EbikeAllocateUpdate) SetRiderID(u uint64) *EbikeAllocateUpdate {
	eau.mutation.SetRiderID(u)
	return eau
}

// SetStatus sets the "status" field.
func (eau *EbikeAllocateUpdate) SetStatus(u uint8) *EbikeAllocateUpdate {
	eau.mutation.ResetStatus()
	eau.mutation.SetStatus(u)
	return eau
}

// AddStatus adds u to the "status" field.
func (eau *EbikeAllocateUpdate) AddStatus(u int8) *EbikeAllocateUpdate {
	eau.mutation.AddStatus(u)
	return eau
}

// SetInfo sets the "info" field.
func (eau *EbikeAllocateUpdate) SetInfo(ma *model.EbikeAllocate) *EbikeAllocateUpdate {
	eau.mutation.SetInfo(ma)
	return eau
}

// SetTime sets the "time" field.
func (eau *EbikeAllocateUpdate) SetTime(t time.Time) *EbikeAllocateUpdate {
	eau.mutation.SetTime(t)
	return eau
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (eau *EbikeAllocateUpdate) SetEmployee(e *Employee) *EbikeAllocateUpdate {
	return eau.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eau *EbikeAllocateUpdate) SetStore(s *Store) *EbikeAllocateUpdate {
	return eau.SetStoreID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (eau *EbikeAllocateUpdate) SetEbike(e *Ebike) *EbikeAllocateUpdate {
	return eau.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (eau *EbikeAllocateUpdate) SetBrand(e *EbikeBrand) *EbikeAllocateUpdate {
	return eau.SetBrandID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (eau *EbikeAllocateUpdate) SetSubscribe(s *Subscribe) *EbikeAllocateUpdate {
	return eau.SetSubscribeID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eau *EbikeAllocateUpdate) SetRider(r *Rider) *EbikeAllocateUpdate {
	return eau.SetRiderID(r.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (eau *EbikeAllocateUpdate) SetContractID(id uint64) *EbikeAllocateUpdate {
	eau.mutation.SetContractID(id)
	return eau
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (eau *EbikeAllocateUpdate) SetNillableContractID(id *uint64) *EbikeAllocateUpdate {
	if id != nil {
		eau = eau.SetContractID(*id)
	}
	return eau
}

// SetContract sets the "contract" edge to the Contract entity.
func (eau *EbikeAllocateUpdate) SetContract(c *Contract) *EbikeAllocateUpdate {
	return eau.SetContractID(c.ID)
}

// Mutation returns the EbikeAllocateMutation object of the builder.
func (eau *EbikeAllocateUpdate) Mutation() *EbikeAllocateMutation {
	return eau.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (eau *EbikeAllocateUpdate) ClearEmployee() *EbikeAllocateUpdate {
	eau.mutation.ClearEmployee()
	return eau
}

// ClearStore clears the "store" edge to the Store entity.
func (eau *EbikeAllocateUpdate) ClearStore() *EbikeAllocateUpdate {
	eau.mutation.ClearStore()
	return eau
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (eau *EbikeAllocateUpdate) ClearEbike() *EbikeAllocateUpdate {
	eau.mutation.ClearEbike()
	return eau
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (eau *EbikeAllocateUpdate) ClearBrand() *EbikeAllocateUpdate {
	eau.mutation.ClearBrand()
	return eau
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (eau *EbikeAllocateUpdate) ClearSubscribe() *EbikeAllocateUpdate {
	eau.mutation.ClearSubscribe()
	return eau
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eau *EbikeAllocateUpdate) ClearRider() *EbikeAllocateUpdate {
	eau.mutation.ClearRider()
	return eau
}

// ClearContract clears the "contract" edge to the Contract entity.
func (eau *EbikeAllocateUpdate) ClearContract() *EbikeAllocateUpdate {
	eau.mutation.ClearContract()
	return eau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eau *EbikeAllocateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eau.hooks) == 0 {
		if err = eau.check(); err != nil {
			return 0, err
		}
		affected, err = eau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeAllocateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eau.check(); err != nil {
				return 0, err
			}
			eau.mutation = mutation
			affected, err = eau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eau.hooks) - 1; i >= 0; i-- {
			if eau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eau *EbikeAllocateUpdate) SaveX(ctx context.Context) int {
	affected, err := eau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eau *EbikeAllocateUpdate) Exec(ctx context.Context) error {
	_, err := eau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eau *EbikeAllocateUpdate) ExecX(ctx context.Context) {
	if err := eau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eau *EbikeAllocateUpdate) check() error {
	if _, ok := eau.mutation.EmployeeID(); eau.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.employee"`)
	}
	if _, ok := eau.mutation.StoreID(); eau.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.store"`)
	}
	if _, ok := eau.mutation.EbikeID(); eau.mutation.EbikeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.ebike"`)
	}
	if _, ok := eau.mutation.BrandID(); eau.mutation.BrandCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.brand"`)
	}
	if _, ok := eau.mutation.SubscribeID(); eau.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.subscribe"`)
	}
	if _, ok := eau.mutation.RiderID(); eau.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eau *EbikeAllocateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeAllocateUpdate {
	eau.modifiers = append(eau.modifiers, modifiers...)
	return eau
}

func (eau *EbikeAllocateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ebikeallocate.Table,
			Columns: ebikeallocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikeallocate.FieldID,
			},
		},
	}
	if ps := eau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eau.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: ebikeallocate.FieldStatus,
		})
	}
	if value, ok := eau.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: ebikeallocate.FieldStatus,
		})
	}
	if value, ok := eau.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebikeallocate.FieldInfo,
		})
	}
	if value, ok := eau.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikeallocate.FieldTime,
		})
	}
	if eau.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EmployeeTable,
			Columns: []string{ebikeallocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EmployeeTable,
			Columns: []string{ebikeallocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.StoreTable,
			Columns: []string{ebikeallocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.StoreTable,
			Columns: []string{ebikeallocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EbikeTable,
			Columns: []string{ebikeallocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EbikeTable,
			Columns: []string{ebikeallocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.BrandTable,
			Columns: []string{ebikeallocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.BrandTable,
			Columns: []string{ebikeallocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.SubscribeTable,
			Columns: []string{ebikeallocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.SubscribeTable,
			Columns: []string{ebikeallocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.RiderTable,
			Columns: []string{ebikeallocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.RiderTable,
			Columns: []string{ebikeallocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eau.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ebikeallocate.ContractTable,
			Columns: []string{ebikeallocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eau.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ebikeallocate.ContractTable,
			Columns: []string{ebikeallocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = eau.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, eau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebikeallocate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EbikeAllocateUpdateOne is the builder for updating a single EbikeAllocate entity.
type EbikeAllocateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EbikeAllocateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEmployeeID sets the "employee_id" field.
func (eauo *EbikeAllocateUpdateOne) SetEmployeeID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetEmployeeID(u)
	return eauo
}

// SetStoreID sets the "store_id" field.
func (eauo *EbikeAllocateUpdateOne) SetStoreID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetStoreID(u)
	return eauo
}

// SetEbikeID sets the "ebike_id" field.
func (eauo *EbikeAllocateUpdateOne) SetEbikeID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetEbikeID(u)
	return eauo
}

// SetBrandID sets the "brand_id" field.
func (eauo *EbikeAllocateUpdateOne) SetBrandID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetBrandID(u)
	return eauo
}

// SetSubscribeID sets the "subscribe_id" field.
func (eauo *EbikeAllocateUpdateOne) SetSubscribeID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetSubscribeID(u)
	return eauo
}

// SetRiderID sets the "rider_id" field.
func (eauo *EbikeAllocateUpdateOne) SetRiderID(u uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetRiderID(u)
	return eauo
}

// SetStatus sets the "status" field.
func (eauo *EbikeAllocateUpdateOne) SetStatus(u uint8) *EbikeAllocateUpdateOne {
	eauo.mutation.ResetStatus()
	eauo.mutation.SetStatus(u)
	return eauo
}

// AddStatus adds u to the "status" field.
func (eauo *EbikeAllocateUpdateOne) AddStatus(u int8) *EbikeAllocateUpdateOne {
	eauo.mutation.AddStatus(u)
	return eauo
}

// SetInfo sets the "info" field.
func (eauo *EbikeAllocateUpdateOne) SetInfo(ma *model.EbikeAllocate) *EbikeAllocateUpdateOne {
	eauo.mutation.SetInfo(ma)
	return eauo
}

// SetTime sets the "time" field.
func (eauo *EbikeAllocateUpdateOne) SetTime(t time.Time) *EbikeAllocateUpdateOne {
	eauo.mutation.SetTime(t)
	return eauo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (eauo *EbikeAllocateUpdateOne) SetEmployee(e *Employee) *EbikeAllocateUpdateOne {
	return eauo.SetEmployeeID(e.ID)
}

// SetStore sets the "store" edge to the Store entity.
func (eauo *EbikeAllocateUpdateOne) SetStore(s *Store) *EbikeAllocateUpdateOne {
	return eauo.SetStoreID(s.ID)
}

// SetEbike sets the "ebike" edge to the Ebike entity.
func (eauo *EbikeAllocateUpdateOne) SetEbike(e *Ebike) *EbikeAllocateUpdateOne {
	return eauo.SetEbikeID(e.ID)
}

// SetBrand sets the "brand" edge to the EbikeBrand entity.
func (eauo *EbikeAllocateUpdateOne) SetBrand(e *EbikeBrand) *EbikeAllocateUpdateOne {
	return eauo.SetBrandID(e.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (eauo *EbikeAllocateUpdateOne) SetSubscribe(s *Subscribe) *EbikeAllocateUpdateOne {
	return eauo.SetSubscribeID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (eauo *EbikeAllocateUpdateOne) SetRider(r *Rider) *EbikeAllocateUpdateOne {
	return eauo.SetRiderID(r.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (eauo *EbikeAllocateUpdateOne) SetContractID(id uint64) *EbikeAllocateUpdateOne {
	eauo.mutation.SetContractID(id)
	return eauo
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (eauo *EbikeAllocateUpdateOne) SetNillableContractID(id *uint64) *EbikeAllocateUpdateOne {
	if id != nil {
		eauo = eauo.SetContractID(*id)
	}
	return eauo
}

// SetContract sets the "contract" edge to the Contract entity.
func (eauo *EbikeAllocateUpdateOne) SetContract(c *Contract) *EbikeAllocateUpdateOne {
	return eauo.SetContractID(c.ID)
}

// Mutation returns the EbikeAllocateMutation object of the builder.
func (eauo *EbikeAllocateUpdateOne) Mutation() *EbikeAllocateMutation {
	return eauo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (eauo *EbikeAllocateUpdateOne) ClearEmployee() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearEmployee()
	return eauo
}

// ClearStore clears the "store" edge to the Store entity.
func (eauo *EbikeAllocateUpdateOne) ClearStore() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearStore()
	return eauo
}

// ClearEbike clears the "ebike" edge to the Ebike entity.
func (eauo *EbikeAllocateUpdateOne) ClearEbike() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearEbike()
	return eauo
}

// ClearBrand clears the "brand" edge to the EbikeBrand entity.
func (eauo *EbikeAllocateUpdateOne) ClearBrand() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearBrand()
	return eauo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (eauo *EbikeAllocateUpdateOne) ClearSubscribe() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearSubscribe()
	return eauo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (eauo *EbikeAllocateUpdateOne) ClearRider() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearRider()
	return eauo
}

// ClearContract clears the "contract" edge to the Contract entity.
func (eauo *EbikeAllocateUpdateOne) ClearContract() *EbikeAllocateUpdateOne {
	eauo.mutation.ClearContract()
	return eauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eauo *EbikeAllocateUpdateOne) Select(field string, fields ...string) *EbikeAllocateUpdateOne {
	eauo.fields = append([]string{field}, fields...)
	return eauo
}

// Save executes the query and returns the updated EbikeAllocate entity.
func (eauo *EbikeAllocateUpdateOne) Save(ctx context.Context) (*EbikeAllocate, error) {
	var (
		err  error
		node *EbikeAllocate
	)
	if len(eauo.hooks) == 0 {
		if err = eauo.check(); err != nil {
			return nil, err
		}
		node, err = eauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EbikeAllocateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eauo.check(); err != nil {
				return nil, err
			}
			eauo.mutation = mutation
			node, err = eauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eauo.hooks) - 1; i >= 0; i-- {
			if eauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eauo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eauo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EbikeAllocate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EbikeAllocateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eauo *EbikeAllocateUpdateOne) SaveX(ctx context.Context) *EbikeAllocate {
	node, err := eauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eauo *EbikeAllocateUpdateOne) Exec(ctx context.Context) error {
	_, err := eauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eauo *EbikeAllocateUpdateOne) ExecX(ctx context.Context) {
	if err := eauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eauo *EbikeAllocateUpdateOne) check() error {
	if _, ok := eauo.mutation.EmployeeID(); eauo.mutation.EmployeeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.employee"`)
	}
	if _, ok := eauo.mutation.StoreID(); eauo.mutation.StoreCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.store"`)
	}
	if _, ok := eauo.mutation.EbikeID(); eauo.mutation.EbikeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.ebike"`)
	}
	if _, ok := eauo.mutation.BrandID(); eauo.mutation.BrandCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.brand"`)
	}
	if _, ok := eauo.mutation.SubscribeID(); eauo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.subscribe"`)
	}
	if _, ok := eauo.mutation.RiderID(); eauo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EbikeAllocate.rider"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eauo *EbikeAllocateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EbikeAllocateUpdateOne {
	eauo.modifiers = append(eauo.modifiers, modifiers...)
	return eauo
}

func (eauo *EbikeAllocateUpdateOne) sqlSave(ctx context.Context) (_node *EbikeAllocate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ebikeallocate.Table,
			Columns: ebikeallocate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: ebikeallocate.FieldID,
			},
		},
	}
	id, ok := eauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EbikeAllocate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ebikeallocate.FieldID)
		for _, f := range fields {
			if !ebikeallocate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ebikeallocate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eauo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: ebikeallocate.FieldStatus,
		})
	}
	if value, ok := eauo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: ebikeallocate.FieldStatus,
		})
	}
	if value, ok := eauo.mutation.Info(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ebikeallocate.FieldInfo,
		})
	}
	if value, ok := eauo.mutation.Time(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ebikeallocate.FieldTime,
		})
	}
	if eauo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EmployeeTable,
			Columns: []string{ebikeallocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EmployeeTable,
			Columns: []string{ebikeallocate.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.StoreTable,
			Columns: []string{ebikeallocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.StoreTable,
			Columns: []string{ebikeallocate.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.EbikeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EbikeTable,
			Columns: []string{ebikeallocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.EbikeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.EbikeTable,
			Columns: []string{ebikeallocate.EbikeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebike.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.BrandTable,
			Columns: []string{ebikeallocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.BrandTable,
			Columns: []string{ebikeallocate.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: ebikebrand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.SubscribeTable,
			Columns: []string{ebikeallocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.SubscribeTable,
			Columns: []string{ebikeallocate.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.RiderTable,
			Columns: []string{ebikeallocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ebikeallocate.RiderTable,
			Columns: []string{ebikeallocate.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eauo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ebikeallocate.ContractTable,
			Columns: []string{ebikeallocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eauo.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ebikeallocate.ContractTable,
			Columns: []string{ebikeallocate.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = eauo.modifiers
	_node = &EbikeAllocate{config: eauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ebikeallocate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
