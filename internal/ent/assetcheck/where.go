// Code generated by ent, DO NOT EDIT.

package assetcheck

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldDeletedAt, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldRemark, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldStatus, v))
}

// BatteryNum applies equality check predicate on the "battery_num" field. It's identical to BatteryNumEQ.
func BatteryNum(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldBatteryNum, v))
}

// BatteryNumReal applies equality check predicate on the "battery_num_real" field. It's identical to BatteryNumRealEQ.
func BatteryNumReal(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldBatteryNumReal, v))
}

// EbikeNum applies equality check predicate on the "ebike_num" field. It's identical to EbikeNumEQ.
func EbikeNum(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEbikeNum, v))
}

// EbikeNumReal applies equality check predicate on the "ebike_num_real" field. It's identical to EbikeNumRealEQ.
func EbikeNumReal(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEbikeNumReal, v))
}

// OperateID applies equality check predicate on the "operate_id" field. It's identical to OperateIDEQ.
func OperateID(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldOperateID, v))
}

// OperateType applies equality check predicate on the "operate_type" field. It's identical to OperateTypeEQ.
func OperateType(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldOperateType, v))
}

// LocationsType applies equality check predicate on the "locations_type" field. It's identical to LocationsTypeEQ.
func LocationsType(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldLocationsType, v))
}

// LocationsID applies equality check predicate on the "locations_id" field. It's identical to LocationsIDEQ.
func LocationsID(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldLocationsID, v))
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldStartAt, v))
}

// EndAt applies equality check predicate on the "end_at" field. It's identical to EndAtEQ.
func EndAt(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEndAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldDeletedAt))
}

// CreatorIsNil applies the IsNil predicate on the "creator" field.
func CreatorIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldCreator))
}

// CreatorNotNil applies the NotNil predicate on the "creator" field.
func CreatorNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldCreator))
}

// LastModifierIsNil applies the IsNil predicate on the "last_modifier" field.
func LastModifierIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldLastModifier))
}

// LastModifierNotNil applies the NotNil predicate on the "last_modifier" field.
func LastModifierNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldLastModifier))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldContainsFold(FieldRemark, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldStatus))
}

// BatteryNumEQ applies the EQ predicate on the "battery_num" field.
func BatteryNumEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldBatteryNum, v))
}

// BatteryNumNEQ applies the NEQ predicate on the "battery_num" field.
func BatteryNumNEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldBatteryNum, v))
}

// BatteryNumIn applies the In predicate on the "battery_num" field.
func BatteryNumIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldBatteryNum, vs...))
}

// BatteryNumNotIn applies the NotIn predicate on the "battery_num" field.
func BatteryNumNotIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldBatteryNum, vs...))
}

// BatteryNumGT applies the GT predicate on the "battery_num" field.
func BatteryNumGT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldBatteryNum, v))
}

// BatteryNumGTE applies the GTE predicate on the "battery_num" field.
func BatteryNumGTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldBatteryNum, v))
}

// BatteryNumLT applies the LT predicate on the "battery_num" field.
func BatteryNumLT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldBatteryNum, v))
}

// BatteryNumLTE applies the LTE predicate on the "battery_num" field.
func BatteryNumLTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldBatteryNum, v))
}

// BatteryNumIsNil applies the IsNil predicate on the "battery_num" field.
func BatteryNumIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldBatteryNum))
}

// BatteryNumNotNil applies the NotNil predicate on the "battery_num" field.
func BatteryNumNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldBatteryNum))
}

// BatteryNumRealEQ applies the EQ predicate on the "battery_num_real" field.
func BatteryNumRealEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldBatteryNumReal, v))
}

// BatteryNumRealNEQ applies the NEQ predicate on the "battery_num_real" field.
func BatteryNumRealNEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldBatteryNumReal, v))
}

// BatteryNumRealIn applies the In predicate on the "battery_num_real" field.
func BatteryNumRealIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldBatteryNumReal, vs...))
}

// BatteryNumRealNotIn applies the NotIn predicate on the "battery_num_real" field.
func BatteryNumRealNotIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldBatteryNumReal, vs...))
}

// BatteryNumRealGT applies the GT predicate on the "battery_num_real" field.
func BatteryNumRealGT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldBatteryNumReal, v))
}

// BatteryNumRealGTE applies the GTE predicate on the "battery_num_real" field.
func BatteryNumRealGTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldBatteryNumReal, v))
}

// BatteryNumRealLT applies the LT predicate on the "battery_num_real" field.
func BatteryNumRealLT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldBatteryNumReal, v))
}

// BatteryNumRealLTE applies the LTE predicate on the "battery_num_real" field.
func BatteryNumRealLTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldBatteryNumReal, v))
}

// BatteryNumRealIsNil applies the IsNil predicate on the "battery_num_real" field.
func BatteryNumRealIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldBatteryNumReal))
}

// BatteryNumRealNotNil applies the NotNil predicate on the "battery_num_real" field.
func BatteryNumRealNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldBatteryNumReal))
}

// EbikeNumEQ applies the EQ predicate on the "ebike_num" field.
func EbikeNumEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEbikeNum, v))
}

// EbikeNumNEQ applies the NEQ predicate on the "ebike_num" field.
func EbikeNumNEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldEbikeNum, v))
}

// EbikeNumIn applies the In predicate on the "ebike_num" field.
func EbikeNumIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldEbikeNum, vs...))
}

// EbikeNumNotIn applies the NotIn predicate on the "ebike_num" field.
func EbikeNumNotIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldEbikeNum, vs...))
}

// EbikeNumGT applies the GT predicate on the "ebike_num" field.
func EbikeNumGT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldEbikeNum, v))
}

// EbikeNumGTE applies the GTE predicate on the "ebike_num" field.
func EbikeNumGTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldEbikeNum, v))
}

// EbikeNumLT applies the LT predicate on the "ebike_num" field.
func EbikeNumLT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldEbikeNum, v))
}

// EbikeNumLTE applies the LTE predicate on the "ebike_num" field.
func EbikeNumLTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldEbikeNum, v))
}

// EbikeNumIsNil applies the IsNil predicate on the "ebike_num" field.
func EbikeNumIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldEbikeNum))
}

// EbikeNumNotNil applies the NotNil predicate on the "ebike_num" field.
func EbikeNumNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldEbikeNum))
}

// EbikeNumRealEQ applies the EQ predicate on the "ebike_num_real" field.
func EbikeNumRealEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEbikeNumReal, v))
}

// EbikeNumRealNEQ applies the NEQ predicate on the "ebike_num_real" field.
func EbikeNumRealNEQ(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldEbikeNumReal, v))
}

// EbikeNumRealIn applies the In predicate on the "ebike_num_real" field.
func EbikeNumRealIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldEbikeNumReal, vs...))
}

// EbikeNumRealNotIn applies the NotIn predicate on the "ebike_num_real" field.
func EbikeNumRealNotIn(vs ...uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldEbikeNumReal, vs...))
}

// EbikeNumRealGT applies the GT predicate on the "ebike_num_real" field.
func EbikeNumRealGT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldEbikeNumReal, v))
}

// EbikeNumRealGTE applies the GTE predicate on the "ebike_num_real" field.
func EbikeNumRealGTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldEbikeNumReal, v))
}

// EbikeNumRealLT applies the LT predicate on the "ebike_num_real" field.
func EbikeNumRealLT(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldEbikeNumReal, v))
}

// EbikeNumRealLTE applies the LTE predicate on the "ebike_num_real" field.
func EbikeNumRealLTE(v uint) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldEbikeNumReal, v))
}

// EbikeNumRealIsNil applies the IsNil predicate on the "ebike_num_real" field.
func EbikeNumRealIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldEbikeNumReal))
}

// EbikeNumRealNotNil applies the NotNil predicate on the "ebike_num_real" field.
func EbikeNumRealNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldEbikeNumReal))
}

// OperateIDEQ applies the EQ predicate on the "operate_id" field.
func OperateIDEQ(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldOperateID, v))
}

// OperateIDNEQ applies the NEQ predicate on the "operate_id" field.
func OperateIDNEQ(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldOperateID, v))
}

// OperateIDIn applies the In predicate on the "operate_id" field.
func OperateIDIn(vs ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldOperateID, vs...))
}

// OperateIDNotIn applies the NotIn predicate on the "operate_id" field.
func OperateIDNotIn(vs ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldOperateID, vs...))
}

// OperateIDIsNil applies the IsNil predicate on the "operate_id" field.
func OperateIDIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldOperateID))
}

// OperateIDNotNil applies the NotNil predicate on the "operate_id" field.
func OperateIDNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldOperateID))
}

// OperateTypeEQ applies the EQ predicate on the "operate_type" field.
func OperateTypeEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldOperateType, v))
}

// OperateTypeNEQ applies the NEQ predicate on the "operate_type" field.
func OperateTypeNEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldOperateType, v))
}

// OperateTypeIn applies the In predicate on the "operate_type" field.
func OperateTypeIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldOperateType, vs...))
}

// OperateTypeNotIn applies the NotIn predicate on the "operate_type" field.
func OperateTypeNotIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldOperateType, vs...))
}

// OperateTypeGT applies the GT predicate on the "operate_type" field.
func OperateTypeGT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldOperateType, v))
}

// OperateTypeGTE applies the GTE predicate on the "operate_type" field.
func OperateTypeGTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldOperateType, v))
}

// OperateTypeLT applies the LT predicate on the "operate_type" field.
func OperateTypeLT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldOperateType, v))
}

// OperateTypeLTE applies the LTE predicate on the "operate_type" field.
func OperateTypeLTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldOperateType, v))
}

// OperateTypeIsNil applies the IsNil predicate on the "operate_type" field.
func OperateTypeIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldOperateType))
}

// OperateTypeNotNil applies the NotNil predicate on the "operate_type" field.
func OperateTypeNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldOperateType))
}

// LocationsTypeEQ applies the EQ predicate on the "locations_type" field.
func LocationsTypeEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldLocationsType, v))
}

// LocationsTypeNEQ applies the NEQ predicate on the "locations_type" field.
func LocationsTypeNEQ(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldLocationsType, v))
}

// LocationsTypeIn applies the In predicate on the "locations_type" field.
func LocationsTypeIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldLocationsType, vs...))
}

// LocationsTypeNotIn applies the NotIn predicate on the "locations_type" field.
func LocationsTypeNotIn(vs ...uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldLocationsType, vs...))
}

// LocationsTypeGT applies the GT predicate on the "locations_type" field.
func LocationsTypeGT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldLocationsType, v))
}

// LocationsTypeGTE applies the GTE predicate on the "locations_type" field.
func LocationsTypeGTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldLocationsType, v))
}

// LocationsTypeLT applies the LT predicate on the "locations_type" field.
func LocationsTypeLT(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldLocationsType, v))
}

// LocationsTypeLTE applies the LTE predicate on the "locations_type" field.
func LocationsTypeLTE(v uint8) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldLocationsType, v))
}

// LocationsTypeIsNil applies the IsNil predicate on the "locations_type" field.
func LocationsTypeIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldLocationsType))
}

// LocationsTypeNotNil applies the NotNil predicate on the "locations_type" field.
func LocationsTypeNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldLocationsType))
}

// LocationsIDEQ applies the EQ predicate on the "locations_id" field.
func LocationsIDEQ(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldLocationsID, v))
}

// LocationsIDNEQ applies the NEQ predicate on the "locations_id" field.
func LocationsIDNEQ(v uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldLocationsID, v))
}

// LocationsIDIn applies the In predicate on the "locations_id" field.
func LocationsIDIn(vs ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldLocationsID, vs...))
}

// LocationsIDNotIn applies the NotIn predicate on the "locations_id" field.
func LocationsIDNotIn(vs ...uint64) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldLocationsID, vs...))
}

// LocationsIDIsNil applies the IsNil predicate on the "locations_id" field.
func LocationsIDIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldLocationsID))
}

// LocationsIDNotNil applies the NotNil predicate on the "locations_id" field.
func LocationsIDNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldLocationsID))
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldStartAt))
}

// EndAtEQ applies the EQ predicate on the "end_at" field.
func EndAtEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldEQ(FieldEndAt, v))
}

// EndAtNEQ applies the NEQ predicate on the "end_at" field.
func EndAtNEQ(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNEQ(FieldEndAt, v))
}

// EndAtIn applies the In predicate on the "end_at" field.
func EndAtIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIn(FieldEndAt, vs...))
}

// EndAtNotIn applies the NotIn predicate on the "end_at" field.
func EndAtNotIn(vs ...time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotIn(FieldEndAt, vs...))
}

// EndAtGT applies the GT predicate on the "end_at" field.
func EndAtGT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGT(FieldEndAt, v))
}

// EndAtGTE applies the GTE predicate on the "end_at" field.
func EndAtGTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldGTE(FieldEndAt, v))
}

// EndAtLT applies the LT predicate on the "end_at" field.
func EndAtLT(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLT(FieldEndAt, v))
}

// EndAtLTE applies the LTE predicate on the "end_at" field.
func EndAtLTE(v time.Time) predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldLTE(FieldEndAt, v))
}

// EndAtIsNil applies the IsNil predicate on the "end_at" field.
func EndAtIsNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldIsNull(FieldEndAt))
}

// EndAtNotNil applies the NotNil predicate on the "end_at" field.
func EndAtNotNil() predicate.AssetCheck {
	return predicate.AssetCheck(sql.FieldNotNull(FieldEndAt))
}

// HasCheckDetails applies the HasEdge predicate on the "check_details" edge.
func HasCheckDetails() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckDetailsTable, CheckDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckDetailsWith applies the HasEdge predicate on the "check_details" edge with a given conditions (other predicates).
func HasCheckDetailsWith(preds ...predicate.AssetCheckDetails) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newCheckDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperateManager applies the HasEdge predicate on the "operate_manager" edge.
func HasOperateManager() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OperateManagerTable, OperateManagerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperateManagerWith applies the HasEdge predicate on the "operate_manager" edge with a given conditions (other predicates).
func HasOperateManagerWith(preds ...predicate.Manager) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newOperateManagerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperateStore applies the HasEdge predicate on the "operate_store" edge.
func HasOperateStore() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OperateStoreTable, OperateStoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperateStoreWith applies the HasEdge predicate on the "operate_store" edge with a given conditions (other predicates).
func HasOperateStoreWith(preds ...predicate.Store) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newOperateStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOperateAgent applies the HasEdge predicate on the "operate_agent" edge.
func HasOperateAgent() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OperateAgentTable, OperateAgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOperateAgentWith applies the HasEdge predicate on the "operate_agent" edge with a given conditions (other predicates).
func HasOperateAgentWith(preds ...predicate.Agent) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newOperateAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWarehouse applies the HasEdge predicate on the "warehouse" edge.
func HasWarehouse() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, WarehouseTable, WarehouseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWarehouseWith applies the HasEdge predicate on the "warehouse" edge with a given conditions (other predicates).
func HasWarehouseWith(preds ...predicate.Warehouse) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newWarehouseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStore applies the HasEdge predicate on the "store" edge.
func HasStore() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StoreTable, StoreColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStoreWith applies the HasEdge predicate on the "store" edge with a given conditions (other predicates).
func HasStoreWith(preds ...predicate.Store) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newStoreStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStation applies the HasEdge predicate on the "station" edge.
func HasStation() predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, StationTable, StationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStationWith applies the HasEdge predicate on the "station" edge with a given conditions (other predicates).
func HasStationWith(preds ...predicate.EnterpriseStation) predicate.AssetCheck {
	return predicate.AssetCheck(func(s *sql.Selector) {
		step := newStationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AssetCheck) predicate.AssetCheck {
	return predicate.AssetCheck(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AssetCheck) predicate.AssetCheck {
	return predicate.AssetCheck(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AssetCheck) predicate.AssetCheck {
	return predicate.AssetCheck(sql.NotPredicates(p))
}
