// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/assistance"
	"github.com/auroraride/aurservd/internal/ent/city"
	"github.com/auroraride/aurservd/internal/ent/employee"
	"github.com/auroraride/aurservd/internal/ent/order"
	"github.com/auroraride/aurservd/internal/ent/predicate"
	"github.com/auroraride/aurservd/internal/ent/rider"
	"github.com/auroraride/aurservd/internal/ent/store"
	"github.com/auroraride/aurservd/internal/ent/subscribe"
)

// AssistanceUpdate is the builder for updating Assistance entities.
type AssistanceUpdate struct {
	config
	hooks     []Hook
	mutation  *AssistanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssistanceUpdate builder.
func (au *AssistanceUpdate) Where(ps ...predicate.Assistance) *AssistanceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssistanceUpdate) SetUpdatedAt(t time.Time) *AssistanceUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssistanceUpdate) SetDeletedAt(t time.Time) *AssistanceUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableDeletedAt(t *time.Time) *AssistanceUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssistanceUpdate) ClearDeletedAt() *AssistanceUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetLastModifier sets the "last_modifier" field.
func (au *AssistanceUpdate) SetLastModifier(m *model.Modifier) *AssistanceUpdate {
	au.mutation.SetLastModifier(m)
	return au
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (au *AssistanceUpdate) ClearLastModifier() *AssistanceUpdate {
	au.mutation.ClearLastModifier()
	return au
}

// SetRemark sets the "remark" field.
func (au *AssistanceUpdate) SetRemark(s string) *AssistanceUpdate {
	au.mutation.SetRemark(s)
	return au
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableRemark(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetRemark(*s)
	}
	return au
}

// ClearRemark clears the value of the "remark" field.
func (au *AssistanceUpdate) ClearRemark() *AssistanceUpdate {
	au.mutation.ClearRemark()
	return au
}

// SetStoreID sets the "store_id" field.
func (au *AssistanceUpdate) SetStoreID(u uint64) *AssistanceUpdate {
	au.mutation.SetStoreID(u)
	return au
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableStoreID(u *uint64) *AssistanceUpdate {
	if u != nil {
		au.SetStoreID(*u)
	}
	return au
}

// ClearStoreID clears the value of the "store_id" field.
func (au *AssistanceUpdate) ClearStoreID() *AssistanceUpdate {
	au.mutation.ClearStoreID()
	return au
}

// SetRiderID sets the "rider_id" field.
func (au *AssistanceUpdate) SetRiderID(u uint64) *AssistanceUpdate {
	au.mutation.SetRiderID(u)
	return au
}

// SetSubscribeID sets the "subscribe_id" field.
func (au *AssistanceUpdate) SetSubscribeID(u uint64) *AssistanceUpdate {
	au.mutation.SetSubscribeID(u)
	return au
}

// SetCityID sets the "city_id" field.
func (au *AssistanceUpdate) SetCityID(u uint64) *AssistanceUpdate {
	au.mutation.SetCityID(u)
	return au
}

// SetEmployeeID sets the "employee_id" field.
func (au *AssistanceUpdate) SetEmployeeID(u uint64) *AssistanceUpdate {
	au.mutation.SetEmployeeID(u)
	return au
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableEmployeeID(u *uint64) *AssistanceUpdate {
	if u != nil {
		au.SetEmployeeID(*u)
	}
	return au
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (au *AssistanceUpdate) ClearEmployeeID() *AssistanceUpdate {
	au.mutation.ClearEmployeeID()
	return au
}

// SetOrderID sets the "order_id" field.
func (au *AssistanceUpdate) SetOrderID(u uint64) *AssistanceUpdate {
	au.mutation.SetOrderID(u)
	return au
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableOrderID(u *uint64) *AssistanceUpdate {
	if u != nil {
		au.SetOrderID(*u)
	}
	return au
}

// ClearOrderID clears the value of the "order_id" field.
func (au *AssistanceUpdate) ClearOrderID() *AssistanceUpdate {
	au.mutation.ClearOrderID()
	return au
}

// SetStatus sets the "status" field.
func (au *AssistanceUpdate) SetStatus(u uint8) *AssistanceUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableStatus(u *uint8) *AssistanceUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AssistanceUpdate) AddStatus(u int8) *AssistanceUpdate {
	au.mutation.AddStatus(u)
	return au
}

// SetLng sets the "lng" field.
func (au *AssistanceUpdate) SetLng(f float64) *AssistanceUpdate {
	au.mutation.ResetLng()
	au.mutation.SetLng(f)
	return au
}

// AddLng adds f to the "lng" field.
func (au *AssistanceUpdate) AddLng(f float64) *AssistanceUpdate {
	au.mutation.AddLng(f)
	return au
}

// SetLat sets the "lat" field.
func (au *AssistanceUpdate) SetLat(f float64) *AssistanceUpdate {
	au.mutation.ResetLat()
	au.mutation.SetLat(f)
	return au
}

// AddLat adds f to the "lat" field.
func (au *AssistanceUpdate) AddLat(f float64) *AssistanceUpdate {
	au.mutation.AddLat(f)
	return au
}

// SetAddress sets the "address" field.
func (au *AssistanceUpdate) SetAddress(s string) *AssistanceUpdate {
	au.mutation.SetAddress(s)
	return au
}

// SetBreakdown sets the "breakdown" field.
func (au *AssistanceUpdate) SetBreakdown(s string) *AssistanceUpdate {
	au.mutation.SetBreakdown(s)
	return au
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (au *AssistanceUpdate) SetBreakdownDesc(s string) *AssistanceUpdate {
	au.mutation.SetBreakdownDesc(s)
	return au
}

// SetNillableBreakdownDesc sets the "breakdown_desc" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableBreakdownDesc(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetBreakdownDesc(*s)
	}
	return au
}

// ClearBreakdownDesc clears the value of the "breakdown_desc" field.
func (au *AssistanceUpdate) ClearBreakdownDesc() *AssistanceUpdate {
	au.mutation.ClearBreakdownDesc()
	return au
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (au *AssistanceUpdate) SetBreakdownPhotos(s []string) *AssistanceUpdate {
	au.mutation.SetBreakdownPhotos(s)
	return au
}

// SetCancelReason sets the "cancel_reason" field.
func (au *AssistanceUpdate) SetCancelReason(s string) *AssistanceUpdate {
	au.mutation.SetCancelReason(s)
	return au
}

// SetNillableCancelReason sets the "cancel_reason" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableCancelReason(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetCancelReason(*s)
	}
	return au
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (au *AssistanceUpdate) ClearCancelReason() *AssistanceUpdate {
	au.mutation.ClearCancelReason()
	return au
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (au *AssistanceUpdate) SetCancelReasonDesc(s string) *AssistanceUpdate {
	au.mutation.SetCancelReasonDesc(s)
	return au
}

// SetNillableCancelReasonDesc sets the "cancel_reason_desc" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableCancelReasonDesc(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetCancelReasonDesc(*s)
	}
	return au
}

// ClearCancelReasonDesc clears the value of the "cancel_reason_desc" field.
func (au *AssistanceUpdate) ClearCancelReasonDesc() *AssistanceUpdate {
	au.mutation.ClearCancelReasonDesc()
	return au
}

// SetDistance sets the "distance" field.
func (au *AssistanceUpdate) SetDistance(f float64) *AssistanceUpdate {
	au.mutation.ResetDistance()
	au.mutation.SetDistance(f)
	return au
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableDistance(f *float64) *AssistanceUpdate {
	if f != nil {
		au.SetDistance(*f)
	}
	return au
}

// AddDistance adds f to the "distance" field.
func (au *AssistanceUpdate) AddDistance(f float64) *AssistanceUpdate {
	au.mutation.AddDistance(f)
	return au
}

// ClearDistance clears the value of the "distance" field.
func (au *AssistanceUpdate) ClearDistance() *AssistanceUpdate {
	au.mutation.ClearDistance()
	return au
}

// SetReason sets the "reason" field.
func (au *AssistanceUpdate) SetReason(s string) *AssistanceUpdate {
	au.mutation.SetReason(s)
	return au
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableReason(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetReason(*s)
	}
	return au
}

// ClearReason clears the value of the "reason" field.
func (au *AssistanceUpdate) ClearReason() *AssistanceUpdate {
	au.mutation.ClearReason()
	return au
}

// SetDetectPhoto sets the "detect_photo" field.
func (au *AssistanceUpdate) SetDetectPhoto(s string) *AssistanceUpdate {
	au.mutation.SetDetectPhoto(s)
	return au
}

// SetNillableDetectPhoto sets the "detect_photo" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableDetectPhoto(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetDetectPhoto(*s)
	}
	return au
}

// ClearDetectPhoto clears the value of the "detect_photo" field.
func (au *AssistanceUpdate) ClearDetectPhoto() *AssistanceUpdate {
	au.mutation.ClearDetectPhoto()
	return au
}

// SetJointPhoto sets the "joint_photo" field.
func (au *AssistanceUpdate) SetJointPhoto(s string) *AssistanceUpdate {
	au.mutation.SetJointPhoto(s)
	return au
}

// SetNillableJointPhoto sets the "joint_photo" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableJointPhoto(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetJointPhoto(*s)
	}
	return au
}

// ClearJointPhoto clears the value of the "joint_photo" field.
func (au *AssistanceUpdate) ClearJointPhoto() *AssistanceUpdate {
	au.mutation.ClearJointPhoto()
	return au
}

// SetCost sets the "cost" field.
func (au *AssistanceUpdate) SetCost(f float64) *AssistanceUpdate {
	au.mutation.ResetCost()
	au.mutation.SetCost(f)
	return au
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableCost(f *float64) *AssistanceUpdate {
	if f != nil {
		au.SetCost(*f)
	}
	return au
}

// AddCost adds f to the "cost" field.
func (au *AssistanceUpdate) AddCost(f float64) *AssistanceUpdate {
	au.mutation.AddCost(f)
	return au
}

// ClearCost clears the value of the "cost" field.
func (au *AssistanceUpdate) ClearCost() *AssistanceUpdate {
	au.mutation.ClearCost()
	return au
}

// SetRefusedDesc sets the "refused_desc" field.
func (au *AssistanceUpdate) SetRefusedDesc(s string) *AssistanceUpdate {
	au.mutation.SetRefusedDesc(s)
	return au
}

// SetNillableRefusedDesc sets the "refused_desc" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableRefusedDesc(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetRefusedDesc(*s)
	}
	return au
}

// ClearRefusedDesc clears the value of the "refused_desc" field.
func (au *AssistanceUpdate) ClearRefusedDesc() *AssistanceUpdate {
	au.mutation.ClearRefusedDesc()
	return au
}

// SetPayAt sets the "pay_at" field.
func (au *AssistanceUpdate) SetPayAt(t time.Time) *AssistanceUpdate {
	au.mutation.SetPayAt(t)
	return au
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillablePayAt(t *time.Time) *AssistanceUpdate {
	if t != nil {
		au.SetPayAt(*t)
	}
	return au
}

// ClearPayAt clears the value of the "pay_at" field.
func (au *AssistanceUpdate) ClearPayAt() *AssistanceUpdate {
	au.mutation.ClearPayAt()
	return au
}

// SetAllocateAt sets the "allocate_at" field.
func (au *AssistanceUpdate) SetAllocateAt(t time.Time) *AssistanceUpdate {
	au.mutation.SetAllocateAt(t)
	return au
}

// SetNillableAllocateAt sets the "allocate_at" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableAllocateAt(t *time.Time) *AssistanceUpdate {
	if t != nil {
		au.SetAllocateAt(*t)
	}
	return au
}

// ClearAllocateAt clears the value of the "allocate_at" field.
func (au *AssistanceUpdate) ClearAllocateAt() *AssistanceUpdate {
	au.mutation.ClearAllocateAt()
	return au
}

// SetWait sets the "wait" field.
func (au *AssistanceUpdate) SetWait(i int) *AssistanceUpdate {
	au.mutation.ResetWait()
	au.mutation.SetWait(i)
	return au
}

// SetNillableWait sets the "wait" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableWait(i *int) *AssistanceUpdate {
	if i != nil {
		au.SetWait(*i)
	}
	return au
}

// AddWait adds i to the "wait" field.
func (au *AssistanceUpdate) AddWait(i int) *AssistanceUpdate {
	au.mutation.AddWait(i)
	return au
}

// SetFreeReason sets the "free_reason" field.
func (au *AssistanceUpdate) SetFreeReason(s string) *AssistanceUpdate {
	au.mutation.SetFreeReason(s)
	return au
}

// SetNillableFreeReason sets the "free_reason" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableFreeReason(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetFreeReason(*s)
	}
	return au
}

// ClearFreeReason clears the value of the "free_reason" field.
func (au *AssistanceUpdate) ClearFreeReason() *AssistanceUpdate {
	au.mutation.ClearFreeReason()
	return au
}

// SetFailReason sets the "fail_reason" field.
func (au *AssistanceUpdate) SetFailReason(s string) *AssistanceUpdate {
	au.mutation.SetFailReason(s)
	return au
}

// SetNillableFailReason sets the "fail_reason" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableFailReason(s *string) *AssistanceUpdate {
	if s != nil {
		au.SetFailReason(*s)
	}
	return au
}

// ClearFailReason clears the value of the "fail_reason" field.
func (au *AssistanceUpdate) ClearFailReason() *AssistanceUpdate {
	au.mutation.ClearFailReason()
	return au
}

// SetProcessAt sets the "process_at" field.
func (au *AssistanceUpdate) SetProcessAt(t time.Time) *AssistanceUpdate {
	au.mutation.SetProcessAt(t)
	return au
}

// SetNillableProcessAt sets the "process_at" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableProcessAt(t *time.Time) *AssistanceUpdate {
	if t != nil {
		au.SetProcessAt(*t)
	}
	return au
}

// ClearProcessAt clears the value of the "process_at" field.
func (au *AssistanceUpdate) ClearProcessAt() *AssistanceUpdate {
	au.mutation.ClearProcessAt()
	return au
}

// SetPrice sets the "price" field.
func (au *AssistanceUpdate) SetPrice(f float64) *AssistanceUpdate {
	au.mutation.ResetPrice()
	au.mutation.SetPrice(f)
	return au
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillablePrice(f *float64) *AssistanceUpdate {
	if f != nil {
		au.SetPrice(*f)
	}
	return au
}

// AddPrice adds f to the "price" field.
func (au *AssistanceUpdate) AddPrice(f float64) *AssistanceUpdate {
	au.mutation.AddPrice(f)
	return au
}

// ClearPrice clears the value of the "price" field.
func (au *AssistanceUpdate) ClearPrice() *AssistanceUpdate {
	au.mutation.ClearPrice()
	return au
}

// SetNaviDuration sets the "navi_duration" field.
func (au *AssistanceUpdate) SetNaviDuration(i int) *AssistanceUpdate {
	au.mutation.ResetNaviDuration()
	au.mutation.SetNaviDuration(i)
	return au
}

// SetNillableNaviDuration sets the "navi_duration" field if the given value is not nil.
func (au *AssistanceUpdate) SetNillableNaviDuration(i *int) *AssistanceUpdate {
	if i != nil {
		au.SetNaviDuration(*i)
	}
	return au
}

// AddNaviDuration adds i to the "navi_duration" field.
func (au *AssistanceUpdate) AddNaviDuration(i int) *AssistanceUpdate {
	au.mutation.AddNaviDuration(i)
	return au
}

// ClearNaviDuration clears the value of the "navi_duration" field.
func (au *AssistanceUpdate) ClearNaviDuration() *AssistanceUpdate {
	au.mutation.ClearNaviDuration()
	return au
}

// SetNaviPolylines sets the "navi_polylines" field.
func (au *AssistanceUpdate) SetNaviPolylines(s []string) *AssistanceUpdate {
	au.mutation.SetNaviPolylines(s)
	return au
}

// ClearNaviPolylines clears the value of the "navi_polylines" field.
func (au *AssistanceUpdate) ClearNaviPolylines() *AssistanceUpdate {
	au.mutation.ClearNaviPolylines()
	return au
}

// SetStore sets the "store" edge to the Store entity.
func (au *AssistanceUpdate) SetStore(s *Store) *AssistanceUpdate {
	return au.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (au *AssistanceUpdate) SetRider(r *Rider) *AssistanceUpdate {
	return au.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (au *AssistanceUpdate) SetSubscribe(s *Subscribe) *AssistanceUpdate {
	return au.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (au *AssistanceUpdate) SetCity(c *City) *AssistanceUpdate {
	return au.SetCityID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (au *AssistanceUpdate) SetOrder(o *Order) *AssistanceUpdate {
	return au.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (au *AssistanceUpdate) SetEmployee(e *Employee) *AssistanceUpdate {
	return au.SetEmployeeID(e.ID)
}

// Mutation returns the AssistanceMutation object of the builder.
func (au *AssistanceUpdate) Mutation() *AssistanceMutation {
	return au.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (au *AssistanceUpdate) ClearStore() *AssistanceUpdate {
	au.mutation.ClearStore()
	return au
}

// ClearRider clears the "rider" edge to the Rider entity.
func (au *AssistanceUpdate) ClearRider() *AssistanceUpdate {
	au.mutation.ClearRider()
	return au
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (au *AssistanceUpdate) ClearSubscribe() *AssistanceUpdate {
	au.mutation.ClearSubscribe()
	return au
}

// ClearCity clears the "city" edge to the City entity.
func (au *AssistanceUpdate) ClearCity() *AssistanceUpdate {
	au.mutation.ClearCity()
	return au
}

// ClearOrder clears the "order" edge to the Order entity.
func (au *AssistanceUpdate) ClearOrder() *AssistanceUpdate {
	au.mutation.ClearOrder()
	return au
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (au *AssistanceUpdate) ClearEmployee() *AssistanceUpdate {
	au.mutation.ClearEmployee()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssistanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		if err = au.check(); err != nil {
			return 0, err
		}
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssistanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = au.check(); err != nil {
				return 0, err
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssistanceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssistanceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssistanceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssistanceUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if assistance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assistance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assistance.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AssistanceUpdate) check() error {
	if _, ok := au.mutation.RiderID(); au.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.rider"`)
	}
	if _, ok := au.mutation.SubscribeID(); au.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.subscribe"`)
	}
	if _, ok := au.mutation.CityID(); au.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AssistanceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssistanceUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AssistanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assistance.Table,
			Columns: assistance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldDeletedAt,
		})
	}
	if au.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldDeletedAt,
		})
	}
	if au.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldCreator,
		})
	}
	if value, ok := au.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldLastModifier,
		})
	}
	if au.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldLastModifier,
		})
	}
	if value, ok := au.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRemark,
		})
	}
	if au.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldRemark,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: assistance.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: assistance.FieldStatus,
		})
	}
	if value, ok := au.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLng,
		})
	}
	if value, ok := au.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLng,
		})
	}
	if value, ok := au.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLat,
		})
	}
	if value, ok := au.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLat,
		})
	}
	if value, ok := au.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldAddress,
		})
	}
	if value, ok := au.mutation.Breakdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdown,
		})
	}
	if value, ok := au.mutation.BreakdownDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdownDesc,
		})
	}
	if au.mutation.BreakdownDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldBreakdownDesc,
		})
	}
	if value, ok := au.mutation.BreakdownPhotos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldBreakdownPhotos,
		})
	}
	if value, ok := au.mutation.CancelReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReason,
		})
	}
	if au.mutation.CancelReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldCancelReason,
		})
	}
	if value, ok := au.mutation.CancelReasonDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReasonDesc,
		})
	}
	if au.mutation.CancelReasonDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldCancelReasonDesc,
		})
	}
	if value, ok := au.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldDistance,
		})
	}
	if value, ok := au.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldDistance,
		})
	}
	if au.mutation.DistanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldDistance,
		})
	}
	if value, ok := au.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldReason,
		})
	}
	if au.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldReason,
		})
	}
	if value, ok := au.mutation.DetectPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldDetectPhoto,
		})
	}
	if au.mutation.DetectPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldDetectPhoto,
		})
	}
	if value, ok := au.mutation.JointPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldJointPhoto,
		})
	}
	if au.mutation.JointPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldJointPhoto,
		})
	}
	if value, ok := au.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldCost,
		})
	}
	if value, ok := au.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldCost,
		})
	}
	if au.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldCost,
		})
	}
	if value, ok := au.mutation.RefusedDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRefusedDesc,
		})
	}
	if au.mutation.RefusedDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldRefusedDesc,
		})
	}
	if value, ok := au.mutation.PayAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldPayAt,
		})
	}
	if au.mutation.PayAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldPayAt,
		})
	}
	if value, ok := au.mutation.AllocateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldAllocateAt,
		})
	}
	if au.mutation.AllocateAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldAllocateAt,
		})
	}
	if value, ok := au.mutation.Wait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldWait,
		})
	}
	if value, ok := au.mutation.AddedWait(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldWait,
		})
	}
	if value, ok := au.mutation.FreeReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldFreeReason,
		})
	}
	if au.mutation.FreeReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldFreeReason,
		})
	}
	if value, ok := au.mutation.FailReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldFailReason,
		})
	}
	if au.mutation.FailReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldFailReason,
		})
	}
	if value, ok := au.mutation.ProcessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldProcessAt,
		})
	}
	if au.mutation.ProcessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldProcessAt,
		})
	}
	if value, ok := au.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldPrice,
		})
	}
	if value, ok := au.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldPrice,
		})
	}
	if au.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldPrice,
		})
	}
	if value, ok := au.mutation.NaviDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldNaviDuration,
		})
	}
	if value, ok := au.mutation.AddedNaviDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldNaviDuration,
		})
	}
	if au.mutation.NaviDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: assistance.FieldNaviDuration,
		})
	}
	if value, ok := au.mutation.NaviPolylines(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldNaviPolylines,
		})
	}
	if au.mutation.NaviPolylinesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldNaviPolylines,
		})
	}
	if au.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = au.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assistance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AssistanceUpdateOne is the builder for updating a single Assistance entity.
type AssistanceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssistanceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssistanceUpdateOne) SetUpdatedAt(t time.Time) *AssistanceUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssistanceUpdateOne) SetDeletedAt(t time.Time) *AssistanceUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableDeletedAt(t *time.Time) *AssistanceUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssistanceUpdateOne) ClearDeletedAt() *AssistanceUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetLastModifier sets the "last_modifier" field.
func (auo *AssistanceUpdateOne) SetLastModifier(m *model.Modifier) *AssistanceUpdateOne {
	auo.mutation.SetLastModifier(m)
	return auo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (auo *AssistanceUpdateOne) ClearLastModifier() *AssistanceUpdateOne {
	auo.mutation.ClearLastModifier()
	return auo
}

// SetRemark sets the "remark" field.
func (auo *AssistanceUpdateOne) SetRemark(s string) *AssistanceUpdateOne {
	auo.mutation.SetRemark(s)
	return auo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableRemark(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetRemark(*s)
	}
	return auo
}

// ClearRemark clears the value of the "remark" field.
func (auo *AssistanceUpdateOne) ClearRemark() *AssistanceUpdateOne {
	auo.mutation.ClearRemark()
	return auo
}

// SetStoreID sets the "store_id" field.
func (auo *AssistanceUpdateOne) SetStoreID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetStoreID(u)
	return auo
}

// SetNillableStoreID sets the "store_id" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableStoreID(u *uint64) *AssistanceUpdateOne {
	if u != nil {
		auo.SetStoreID(*u)
	}
	return auo
}

// ClearStoreID clears the value of the "store_id" field.
func (auo *AssistanceUpdateOne) ClearStoreID() *AssistanceUpdateOne {
	auo.mutation.ClearStoreID()
	return auo
}

// SetRiderID sets the "rider_id" field.
func (auo *AssistanceUpdateOne) SetRiderID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetRiderID(u)
	return auo
}

// SetSubscribeID sets the "subscribe_id" field.
func (auo *AssistanceUpdateOne) SetSubscribeID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetSubscribeID(u)
	return auo
}

// SetCityID sets the "city_id" field.
func (auo *AssistanceUpdateOne) SetCityID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetCityID(u)
	return auo
}

// SetEmployeeID sets the "employee_id" field.
func (auo *AssistanceUpdateOne) SetEmployeeID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetEmployeeID(u)
	return auo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableEmployeeID(u *uint64) *AssistanceUpdateOne {
	if u != nil {
		auo.SetEmployeeID(*u)
	}
	return auo
}

// ClearEmployeeID clears the value of the "employee_id" field.
func (auo *AssistanceUpdateOne) ClearEmployeeID() *AssistanceUpdateOne {
	auo.mutation.ClearEmployeeID()
	return auo
}

// SetOrderID sets the "order_id" field.
func (auo *AssistanceUpdateOne) SetOrderID(u uint64) *AssistanceUpdateOne {
	auo.mutation.SetOrderID(u)
	return auo
}

// SetNillableOrderID sets the "order_id" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableOrderID(u *uint64) *AssistanceUpdateOne {
	if u != nil {
		auo.SetOrderID(*u)
	}
	return auo
}

// ClearOrderID clears the value of the "order_id" field.
func (auo *AssistanceUpdateOne) ClearOrderID() *AssistanceUpdateOne {
	auo.mutation.ClearOrderID()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AssistanceUpdateOne) SetStatus(u uint8) *AssistanceUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableStatus(u *uint8) *AssistanceUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AssistanceUpdateOne) AddStatus(u int8) *AssistanceUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// SetLng sets the "lng" field.
func (auo *AssistanceUpdateOne) SetLng(f float64) *AssistanceUpdateOne {
	auo.mutation.ResetLng()
	auo.mutation.SetLng(f)
	return auo
}

// AddLng adds f to the "lng" field.
func (auo *AssistanceUpdateOne) AddLng(f float64) *AssistanceUpdateOne {
	auo.mutation.AddLng(f)
	return auo
}

// SetLat sets the "lat" field.
func (auo *AssistanceUpdateOne) SetLat(f float64) *AssistanceUpdateOne {
	auo.mutation.ResetLat()
	auo.mutation.SetLat(f)
	return auo
}

// AddLat adds f to the "lat" field.
func (auo *AssistanceUpdateOne) AddLat(f float64) *AssistanceUpdateOne {
	auo.mutation.AddLat(f)
	return auo
}

// SetAddress sets the "address" field.
func (auo *AssistanceUpdateOne) SetAddress(s string) *AssistanceUpdateOne {
	auo.mutation.SetAddress(s)
	return auo
}

// SetBreakdown sets the "breakdown" field.
func (auo *AssistanceUpdateOne) SetBreakdown(s string) *AssistanceUpdateOne {
	auo.mutation.SetBreakdown(s)
	return auo
}

// SetBreakdownDesc sets the "breakdown_desc" field.
func (auo *AssistanceUpdateOne) SetBreakdownDesc(s string) *AssistanceUpdateOne {
	auo.mutation.SetBreakdownDesc(s)
	return auo
}

// SetNillableBreakdownDesc sets the "breakdown_desc" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableBreakdownDesc(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetBreakdownDesc(*s)
	}
	return auo
}

// ClearBreakdownDesc clears the value of the "breakdown_desc" field.
func (auo *AssistanceUpdateOne) ClearBreakdownDesc() *AssistanceUpdateOne {
	auo.mutation.ClearBreakdownDesc()
	return auo
}

// SetBreakdownPhotos sets the "breakdown_photos" field.
func (auo *AssistanceUpdateOne) SetBreakdownPhotos(s []string) *AssistanceUpdateOne {
	auo.mutation.SetBreakdownPhotos(s)
	return auo
}

// SetCancelReason sets the "cancel_reason" field.
func (auo *AssistanceUpdateOne) SetCancelReason(s string) *AssistanceUpdateOne {
	auo.mutation.SetCancelReason(s)
	return auo
}

// SetNillableCancelReason sets the "cancel_reason" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableCancelReason(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetCancelReason(*s)
	}
	return auo
}

// ClearCancelReason clears the value of the "cancel_reason" field.
func (auo *AssistanceUpdateOne) ClearCancelReason() *AssistanceUpdateOne {
	auo.mutation.ClearCancelReason()
	return auo
}

// SetCancelReasonDesc sets the "cancel_reason_desc" field.
func (auo *AssistanceUpdateOne) SetCancelReasonDesc(s string) *AssistanceUpdateOne {
	auo.mutation.SetCancelReasonDesc(s)
	return auo
}

// SetNillableCancelReasonDesc sets the "cancel_reason_desc" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableCancelReasonDesc(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetCancelReasonDesc(*s)
	}
	return auo
}

// ClearCancelReasonDesc clears the value of the "cancel_reason_desc" field.
func (auo *AssistanceUpdateOne) ClearCancelReasonDesc() *AssistanceUpdateOne {
	auo.mutation.ClearCancelReasonDesc()
	return auo
}

// SetDistance sets the "distance" field.
func (auo *AssistanceUpdateOne) SetDistance(f float64) *AssistanceUpdateOne {
	auo.mutation.ResetDistance()
	auo.mutation.SetDistance(f)
	return auo
}

// SetNillableDistance sets the "distance" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableDistance(f *float64) *AssistanceUpdateOne {
	if f != nil {
		auo.SetDistance(*f)
	}
	return auo
}

// AddDistance adds f to the "distance" field.
func (auo *AssistanceUpdateOne) AddDistance(f float64) *AssistanceUpdateOne {
	auo.mutation.AddDistance(f)
	return auo
}

// ClearDistance clears the value of the "distance" field.
func (auo *AssistanceUpdateOne) ClearDistance() *AssistanceUpdateOne {
	auo.mutation.ClearDistance()
	return auo
}

// SetReason sets the "reason" field.
func (auo *AssistanceUpdateOne) SetReason(s string) *AssistanceUpdateOne {
	auo.mutation.SetReason(s)
	return auo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableReason(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetReason(*s)
	}
	return auo
}

// ClearReason clears the value of the "reason" field.
func (auo *AssistanceUpdateOne) ClearReason() *AssistanceUpdateOne {
	auo.mutation.ClearReason()
	return auo
}

// SetDetectPhoto sets the "detect_photo" field.
func (auo *AssistanceUpdateOne) SetDetectPhoto(s string) *AssistanceUpdateOne {
	auo.mutation.SetDetectPhoto(s)
	return auo
}

// SetNillableDetectPhoto sets the "detect_photo" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableDetectPhoto(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetDetectPhoto(*s)
	}
	return auo
}

// ClearDetectPhoto clears the value of the "detect_photo" field.
func (auo *AssistanceUpdateOne) ClearDetectPhoto() *AssistanceUpdateOne {
	auo.mutation.ClearDetectPhoto()
	return auo
}

// SetJointPhoto sets the "joint_photo" field.
func (auo *AssistanceUpdateOne) SetJointPhoto(s string) *AssistanceUpdateOne {
	auo.mutation.SetJointPhoto(s)
	return auo
}

// SetNillableJointPhoto sets the "joint_photo" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableJointPhoto(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetJointPhoto(*s)
	}
	return auo
}

// ClearJointPhoto clears the value of the "joint_photo" field.
func (auo *AssistanceUpdateOne) ClearJointPhoto() *AssistanceUpdateOne {
	auo.mutation.ClearJointPhoto()
	return auo
}

// SetCost sets the "cost" field.
func (auo *AssistanceUpdateOne) SetCost(f float64) *AssistanceUpdateOne {
	auo.mutation.ResetCost()
	auo.mutation.SetCost(f)
	return auo
}

// SetNillableCost sets the "cost" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableCost(f *float64) *AssistanceUpdateOne {
	if f != nil {
		auo.SetCost(*f)
	}
	return auo
}

// AddCost adds f to the "cost" field.
func (auo *AssistanceUpdateOne) AddCost(f float64) *AssistanceUpdateOne {
	auo.mutation.AddCost(f)
	return auo
}

// ClearCost clears the value of the "cost" field.
func (auo *AssistanceUpdateOne) ClearCost() *AssistanceUpdateOne {
	auo.mutation.ClearCost()
	return auo
}

// SetRefusedDesc sets the "refused_desc" field.
func (auo *AssistanceUpdateOne) SetRefusedDesc(s string) *AssistanceUpdateOne {
	auo.mutation.SetRefusedDesc(s)
	return auo
}

// SetNillableRefusedDesc sets the "refused_desc" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableRefusedDesc(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetRefusedDesc(*s)
	}
	return auo
}

// ClearRefusedDesc clears the value of the "refused_desc" field.
func (auo *AssistanceUpdateOne) ClearRefusedDesc() *AssistanceUpdateOne {
	auo.mutation.ClearRefusedDesc()
	return auo
}

// SetPayAt sets the "pay_at" field.
func (auo *AssistanceUpdateOne) SetPayAt(t time.Time) *AssistanceUpdateOne {
	auo.mutation.SetPayAt(t)
	return auo
}

// SetNillablePayAt sets the "pay_at" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillablePayAt(t *time.Time) *AssistanceUpdateOne {
	if t != nil {
		auo.SetPayAt(*t)
	}
	return auo
}

// ClearPayAt clears the value of the "pay_at" field.
func (auo *AssistanceUpdateOne) ClearPayAt() *AssistanceUpdateOne {
	auo.mutation.ClearPayAt()
	return auo
}

// SetAllocateAt sets the "allocate_at" field.
func (auo *AssistanceUpdateOne) SetAllocateAt(t time.Time) *AssistanceUpdateOne {
	auo.mutation.SetAllocateAt(t)
	return auo
}

// SetNillableAllocateAt sets the "allocate_at" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableAllocateAt(t *time.Time) *AssistanceUpdateOne {
	if t != nil {
		auo.SetAllocateAt(*t)
	}
	return auo
}

// ClearAllocateAt clears the value of the "allocate_at" field.
func (auo *AssistanceUpdateOne) ClearAllocateAt() *AssistanceUpdateOne {
	auo.mutation.ClearAllocateAt()
	return auo
}

// SetWait sets the "wait" field.
func (auo *AssistanceUpdateOne) SetWait(i int) *AssistanceUpdateOne {
	auo.mutation.ResetWait()
	auo.mutation.SetWait(i)
	return auo
}

// SetNillableWait sets the "wait" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableWait(i *int) *AssistanceUpdateOne {
	if i != nil {
		auo.SetWait(*i)
	}
	return auo
}

// AddWait adds i to the "wait" field.
func (auo *AssistanceUpdateOne) AddWait(i int) *AssistanceUpdateOne {
	auo.mutation.AddWait(i)
	return auo
}

// SetFreeReason sets the "free_reason" field.
func (auo *AssistanceUpdateOne) SetFreeReason(s string) *AssistanceUpdateOne {
	auo.mutation.SetFreeReason(s)
	return auo
}

// SetNillableFreeReason sets the "free_reason" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableFreeReason(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetFreeReason(*s)
	}
	return auo
}

// ClearFreeReason clears the value of the "free_reason" field.
func (auo *AssistanceUpdateOne) ClearFreeReason() *AssistanceUpdateOne {
	auo.mutation.ClearFreeReason()
	return auo
}

// SetFailReason sets the "fail_reason" field.
func (auo *AssistanceUpdateOne) SetFailReason(s string) *AssistanceUpdateOne {
	auo.mutation.SetFailReason(s)
	return auo
}

// SetNillableFailReason sets the "fail_reason" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableFailReason(s *string) *AssistanceUpdateOne {
	if s != nil {
		auo.SetFailReason(*s)
	}
	return auo
}

// ClearFailReason clears the value of the "fail_reason" field.
func (auo *AssistanceUpdateOne) ClearFailReason() *AssistanceUpdateOne {
	auo.mutation.ClearFailReason()
	return auo
}

// SetProcessAt sets the "process_at" field.
func (auo *AssistanceUpdateOne) SetProcessAt(t time.Time) *AssistanceUpdateOne {
	auo.mutation.SetProcessAt(t)
	return auo
}

// SetNillableProcessAt sets the "process_at" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableProcessAt(t *time.Time) *AssistanceUpdateOne {
	if t != nil {
		auo.SetProcessAt(*t)
	}
	return auo
}

// ClearProcessAt clears the value of the "process_at" field.
func (auo *AssistanceUpdateOne) ClearProcessAt() *AssistanceUpdateOne {
	auo.mutation.ClearProcessAt()
	return auo
}

// SetPrice sets the "price" field.
func (auo *AssistanceUpdateOne) SetPrice(f float64) *AssistanceUpdateOne {
	auo.mutation.ResetPrice()
	auo.mutation.SetPrice(f)
	return auo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillablePrice(f *float64) *AssistanceUpdateOne {
	if f != nil {
		auo.SetPrice(*f)
	}
	return auo
}

// AddPrice adds f to the "price" field.
func (auo *AssistanceUpdateOne) AddPrice(f float64) *AssistanceUpdateOne {
	auo.mutation.AddPrice(f)
	return auo
}

// ClearPrice clears the value of the "price" field.
func (auo *AssistanceUpdateOne) ClearPrice() *AssistanceUpdateOne {
	auo.mutation.ClearPrice()
	return auo
}

// SetNaviDuration sets the "navi_duration" field.
func (auo *AssistanceUpdateOne) SetNaviDuration(i int) *AssistanceUpdateOne {
	auo.mutation.ResetNaviDuration()
	auo.mutation.SetNaviDuration(i)
	return auo
}

// SetNillableNaviDuration sets the "navi_duration" field if the given value is not nil.
func (auo *AssistanceUpdateOne) SetNillableNaviDuration(i *int) *AssistanceUpdateOne {
	if i != nil {
		auo.SetNaviDuration(*i)
	}
	return auo
}

// AddNaviDuration adds i to the "navi_duration" field.
func (auo *AssistanceUpdateOne) AddNaviDuration(i int) *AssistanceUpdateOne {
	auo.mutation.AddNaviDuration(i)
	return auo
}

// ClearNaviDuration clears the value of the "navi_duration" field.
func (auo *AssistanceUpdateOne) ClearNaviDuration() *AssistanceUpdateOne {
	auo.mutation.ClearNaviDuration()
	return auo
}

// SetNaviPolylines sets the "navi_polylines" field.
func (auo *AssistanceUpdateOne) SetNaviPolylines(s []string) *AssistanceUpdateOne {
	auo.mutation.SetNaviPolylines(s)
	return auo
}

// ClearNaviPolylines clears the value of the "navi_polylines" field.
func (auo *AssistanceUpdateOne) ClearNaviPolylines() *AssistanceUpdateOne {
	auo.mutation.ClearNaviPolylines()
	return auo
}

// SetStore sets the "store" edge to the Store entity.
func (auo *AssistanceUpdateOne) SetStore(s *Store) *AssistanceUpdateOne {
	return auo.SetStoreID(s.ID)
}

// SetRider sets the "rider" edge to the Rider entity.
func (auo *AssistanceUpdateOne) SetRider(r *Rider) *AssistanceUpdateOne {
	return auo.SetRiderID(r.ID)
}

// SetSubscribe sets the "subscribe" edge to the Subscribe entity.
func (auo *AssistanceUpdateOne) SetSubscribe(s *Subscribe) *AssistanceUpdateOne {
	return auo.SetSubscribeID(s.ID)
}

// SetCity sets the "city" edge to the City entity.
func (auo *AssistanceUpdateOne) SetCity(c *City) *AssistanceUpdateOne {
	return auo.SetCityID(c.ID)
}

// SetOrder sets the "order" edge to the Order entity.
func (auo *AssistanceUpdateOne) SetOrder(o *Order) *AssistanceUpdateOne {
	return auo.SetOrderID(o.ID)
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (auo *AssistanceUpdateOne) SetEmployee(e *Employee) *AssistanceUpdateOne {
	return auo.SetEmployeeID(e.ID)
}

// Mutation returns the AssistanceMutation object of the builder.
func (auo *AssistanceUpdateOne) Mutation() *AssistanceMutation {
	return auo.mutation
}

// ClearStore clears the "store" edge to the Store entity.
func (auo *AssistanceUpdateOne) ClearStore() *AssistanceUpdateOne {
	auo.mutation.ClearStore()
	return auo
}

// ClearRider clears the "rider" edge to the Rider entity.
func (auo *AssistanceUpdateOne) ClearRider() *AssistanceUpdateOne {
	auo.mutation.ClearRider()
	return auo
}

// ClearSubscribe clears the "subscribe" edge to the Subscribe entity.
func (auo *AssistanceUpdateOne) ClearSubscribe() *AssistanceUpdateOne {
	auo.mutation.ClearSubscribe()
	return auo
}

// ClearCity clears the "city" edge to the City entity.
func (auo *AssistanceUpdateOne) ClearCity() *AssistanceUpdateOne {
	auo.mutation.ClearCity()
	return auo
}

// ClearOrder clears the "order" edge to the Order entity.
func (auo *AssistanceUpdateOne) ClearOrder() *AssistanceUpdateOne {
	auo.mutation.ClearOrder()
	return auo
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (auo *AssistanceUpdateOne) ClearEmployee() *AssistanceUpdateOne {
	auo.mutation.ClearEmployee()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssistanceUpdateOne) Select(field string, fields ...string) *AssistanceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Assistance entity.
func (auo *AssistanceUpdateOne) Save(ctx context.Context) (*Assistance, error) {
	var (
		err  error
		node *Assistance
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		if err = auo.check(); err != nil {
			return nil, err
		}
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AssistanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = auo.check(); err != nil {
				return nil, err
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Assistance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AssistanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssistanceUpdateOne) SaveX(ctx context.Context) *Assistance {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssistanceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssistanceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssistanceUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if assistance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assistance.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assistance.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssistanceUpdateOne) check() error {
	if _, ok := auo.mutation.RiderID(); auo.mutation.RiderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.rider"`)
	}
	if _, ok := auo.mutation.SubscribeID(); auo.mutation.SubscribeCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.subscribe"`)
	}
	if _, ok := auo.mutation.CityID(); auo.mutation.CityCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Assistance.city"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AssistanceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssistanceUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AssistanceUpdateOne) sqlSave(ctx context.Context) (_node *Assistance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   assistance.Table,
			Columns: assistance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: assistance.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Assistance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assistance.FieldID)
		for _, f := range fields {
			if !assistance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assistance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldDeletedAt,
		})
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldDeletedAt,
		})
	}
	if auo.mutation.CreatorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldCreator,
		})
	}
	if value, ok := auo.mutation.LastModifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldLastModifier,
		})
	}
	if auo.mutation.LastModifierCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldLastModifier,
		})
	}
	if value, ok := auo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRemark,
		})
	}
	if auo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldRemark,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: assistance.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: assistance.FieldStatus,
		})
	}
	if value, ok := auo.mutation.Lng(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLng,
		})
	}
	if value, ok := auo.mutation.AddedLng(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLng,
		})
	}
	if value, ok := auo.mutation.Lat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLat,
		})
	}
	if value, ok := auo.mutation.AddedLat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldLat,
		})
	}
	if value, ok := auo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldAddress,
		})
	}
	if value, ok := auo.mutation.Breakdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdown,
		})
	}
	if value, ok := auo.mutation.BreakdownDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldBreakdownDesc,
		})
	}
	if auo.mutation.BreakdownDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldBreakdownDesc,
		})
	}
	if value, ok := auo.mutation.BreakdownPhotos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldBreakdownPhotos,
		})
	}
	if value, ok := auo.mutation.CancelReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReason,
		})
	}
	if auo.mutation.CancelReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldCancelReason,
		})
	}
	if value, ok := auo.mutation.CancelReasonDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldCancelReasonDesc,
		})
	}
	if auo.mutation.CancelReasonDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldCancelReasonDesc,
		})
	}
	if value, ok := auo.mutation.Distance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldDistance,
		})
	}
	if value, ok := auo.mutation.AddedDistance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldDistance,
		})
	}
	if auo.mutation.DistanceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldDistance,
		})
	}
	if value, ok := auo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldReason,
		})
	}
	if auo.mutation.ReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldReason,
		})
	}
	if value, ok := auo.mutation.DetectPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldDetectPhoto,
		})
	}
	if auo.mutation.DetectPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldDetectPhoto,
		})
	}
	if value, ok := auo.mutation.JointPhoto(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldJointPhoto,
		})
	}
	if auo.mutation.JointPhotoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldJointPhoto,
		})
	}
	if value, ok := auo.mutation.Cost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldCost,
		})
	}
	if value, ok := auo.mutation.AddedCost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldCost,
		})
	}
	if auo.mutation.CostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldCost,
		})
	}
	if value, ok := auo.mutation.RefusedDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldRefusedDesc,
		})
	}
	if auo.mutation.RefusedDescCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldRefusedDesc,
		})
	}
	if value, ok := auo.mutation.PayAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldPayAt,
		})
	}
	if auo.mutation.PayAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldPayAt,
		})
	}
	if value, ok := auo.mutation.AllocateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldAllocateAt,
		})
	}
	if auo.mutation.AllocateAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldAllocateAt,
		})
	}
	if value, ok := auo.mutation.Wait(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldWait,
		})
	}
	if value, ok := auo.mutation.AddedWait(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldWait,
		})
	}
	if value, ok := auo.mutation.FreeReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldFreeReason,
		})
	}
	if auo.mutation.FreeReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldFreeReason,
		})
	}
	if value, ok := auo.mutation.FailReason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: assistance.FieldFailReason,
		})
	}
	if auo.mutation.FailReasonCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: assistance.FieldFailReason,
		})
	}
	if value, ok := auo.mutation.ProcessAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: assistance.FieldProcessAt,
		})
	}
	if auo.mutation.ProcessAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: assistance.FieldProcessAt,
		})
	}
	if value, ok := auo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldPrice,
		})
	}
	if value, ok := auo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: assistance.FieldPrice,
		})
	}
	if auo.mutation.PriceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Column: assistance.FieldPrice,
		})
	}
	if value, ok := auo.mutation.NaviDuration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldNaviDuration,
		})
	}
	if value, ok := auo.mutation.AddedNaviDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: assistance.FieldNaviDuration,
		})
	}
	if auo.mutation.NaviDurationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: assistance.FieldNaviDuration,
		})
	}
	if value, ok := auo.mutation.NaviPolylines(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: assistance.FieldNaviPolylines,
		})
	}
	if auo.mutation.NaviPolylinesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: assistance.FieldNaviPolylines,
		})
	}
	if auo.mutation.StoreCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.StoreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.StoreTable,
			Columns: []string{assistance.StoreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: store.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.RiderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RiderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.RiderTable,
			Columns: []string{assistance.RiderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rider.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SubscribeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SubscribeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.SubscribeTable,
			Columns: []string{assistance.SubscribeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: subscribe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   assistance.CityTable,
			Columns: []string{assistance.CityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: city.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   assistance.OrderTable,
			Columns: []string{assistance.OrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: order.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assistance.EmployeeTable,
			Columns: []string{assistance.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Modifiers = auo.modifiers
	_node = &Assistance{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assistance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
