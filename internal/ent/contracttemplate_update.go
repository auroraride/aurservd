// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/contracttemplate"
	"github.com/auroraride/aurservd/internal/ent/predicate"
)

// ContractTemplateUpdate is the builder for updating ContractTemplate entities.
type ContractTemplateUpdate struct {
	config
	hooks     []Hook
	mutation  *ContractTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContractTemplateUpdate builder.
func (ctu *ContractTemplateUpdate) Where(ps ...predicate.ContractTemplate) *ContractTemplateUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *ContractTemplateUpdate) SetUpdatedAt(t time.Time) *ContractTemplateUpdate {
	ctu.mutation.SetUpdatedAt(t)
	return ctu
}

// SetDeletedAt sets the "deleted_at" field.
func (ctu *ContractTemplateUpdate) SetDeletedAt(t time.Time) *ContractTemplateUpdate {
	ctu.mutation.SetDeletedAt(t)
	return ctu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableDeletedAt(t *time.Time) *ContractTemplateUpdate {
	if t != nil {
		ctu.SetDeletedAt(*t)
	}
	return ctu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ctu *ContractTemplateUpdate) ClearDeletedAt() *ContractTemplateUpdate {
	ctu.mutation.ClearDeletedAt()
	return ctu
}

// SetLastModifier sets the "last_modifier" field.
func (ctu *ContractTemplateUpdate) SetLastModifier(m *model.Modifier) *ContractTemplateUpdate {
	ctu.mutation.SetLastModifier(m)
	return ctu
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ctu *ContractTemplateUpdate) ClearLastModifier() *ContractTemplateUpdate {
	ctu.mutation.ClearLastModifier()
	return ctu
}

// SetRemark sets the "remark" field.
func (ctu *ContractTemplateUpdate) SetRemark(s string) *ContractTemplateUpdate {
	ctu.mutation.SetRemark(s)
	return ctu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableRemark(s *string) *ContractTemplateUpdate {
	if s != nil {
		ctu.SetRemark(*s)
	}
	return ctu
}

// ClearRemark clears the value of the "remark" field.
func (ctu *ContractTemplateUpdate) ClearRemark() *ContractTemplateUpdate {
	ctu.mutation.ClearRemark()
	return ctu
}

// SetName sets the "name" field.
func (ctu *ContractTemplateUpdate) SetName(s string) *ContractTemplateUpdate {
	ctu.mutation.SetName(s)
	return ctu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableName(s *string) *ContractTemplateUpdate {
	if s != nil {
		ctu.SetName(*s)
	}
	return ctu
}

// SetURL sets the "url" field.
func (ctu *ContractTemplateUpdate) SetURL(s string) *ContractTemplateUpdate {
	ctu.mutation.SetURL(s)
	return ctu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableURL(s *string) *ContractTemplateUpdate {
	if s != nil {
		ctu.SetURL(*s)
	}
	return ctu
}

// SetUserType sets the "user_type" field.
func (ctu *ContractTemplateUpdate) SetUserType(u uint8) *ContractTemplateUpdate {
	ctu.mutation.ResetUserType()
	ctu.mutation.SetUserType(u)
	return ctu
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableUserType(u *uint8) *ContractTemplateUpdate {
	if u != nil {
		ctu.SetUserType(*u)
	}
	return ctu
}

// AddUserType adds u to the "user_type" field.
func (ctu *ContractTemplateUpdate) AddUserType(u int8) *ContractTemplateUpdate {
	ctu.mutation.AddUserType(u)
	return ctu
}

// SetSubType sets the "sub_type" field.
func (ctu *ContractTemplateUpdate) SetSubType(u uint8) *ContractTemplateUpdate {
	ctu.mutation.ResetSubType()
	ctu.mutation.SetSubType(u)
	return ctu
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableSubType(u *uint8) *ContractTemplateUpdate {
	if u != nil {
		ctu.SetSubType(*u)
	}
	return ctu
}

// AddSubType adds u to the "sub_type" field.
func (ctu *ContractTemplateUpdate) AddSubType(u int8) *ContractTemplateUpdate {
	ctu.mutation.AddSubType(u)
	return ctu
}

// SetSn sets the "sn" field.
func (ctu *ContractTemplateUpdate) SetSn(s string) *ContractTemplateUpdate {
	ctu.mutation.SetSn(s)
	return ctu
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableSn(s *string) *ContractTemplateUpdate {
	if s != nil {
		ctu.SetSn(*s)
	}
	return ctu
}

// SetEnable sets the "enable" field.
func (ctu *ContractTemplateUpdate) SetEnable(b bool) *ContractTemplateUpdate {
	ctu.mutation.SetEnable(b)
	return ctu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctu *ContractTemplateUpdate) SetNillableEnable(b *bool) *ContractTemplateUpdate {
	if b != nil {
		ctu.SetEnable(*b)
	}
	return ctu
}

// Mutation returns the ContractTemplateMutation object of the builder.
func (ctu *ContractTemplateUpdate) Mutation() *ContractTemplateMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ContractTemplateUpdate) Save(ctx context.Context) (int, error) {
	if err := ctu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ContractTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ContractTemplateUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ContractTemplateUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *ContractTemplateUpdate) defaults() error {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		if contracttemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contracttemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contracttemplate.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctu *ContractTemplateUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractTemplateUpdate {
	ctu.modifiers = append(ctu.modifiers, modifiers...)
	return ctu
}

func (ctu *ContractTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(contracttemplate.Table, contracttemplate.Columns, sqlgraph.NewFieldSpec(contracttemplate.FieldID, field.TypeUint64))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(contracttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctu.mutation.DeletedAt(); ok {
		_spec.SetField(contracttemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if ctu.mutation.DeletedAtCleared() {
		_spec.ClearField(contracttemplate.FieldDeletedAt, field.TypeTime)
	}
	if ctu.mutation.CreatorCleared() {
		_spec.ClearField(contracttemplate.FieldCreator, field.TypeJSON)
	}
	if value, ok := ctu.mutation.LastModifier(); ok {
		_spec.SetField(contracttemplate.FieldLastModifier, field.TypeJSON, value)
	}
	if ctu.mutation.LastModifierCleared() {
		_spec.ClearField(contracttemplate.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ctu.mutation.Remark(); ok {
		_spec.SetField(contracttemplate.FieldRemark, field.TypeString, value)
	}
	if ctu.mutation.RemarkCleared() {
		_spec.ClearField(contracttemplate.FieldRemark, field.TypeString)
	}
	if value, ok := ctu.mutation.Name(); ok {
		_spec.SetField(contracttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ctu.mutation.URL(); ok {
		_spec.SetField(contracttemplate.FieldURL, field.TypeString, value)
	}
	if value, ok := ctu.mutation.UserType(); ok {
		_spec.SetField(contracttemplate.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := ctu.mutation.AddedUserType(); ok {
		_spec.AddField(contracttemplate.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := ctu.mutation.SubType(); ok {
		_spec.SetField(contracttemplate.FieldSubType, field.TypeUint8, value)
	}
	if value, ok := ctu.mutation.AddedSubType(); ok {
		_spec.AddField(contracttemplate.FieldSubType, field.TypeUint8, value)
	}
	if value, ok := ctu.mutation.Sn(); ok {
		_spec.SetField(contracttemplate.FieldSn, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Enable(); ok {
		_spec.SetField(contracttemplate.FieldEnable, field.TypeBool, value)
	}
	_spec.AddModifiers(ctu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contracttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// ContractTemplateUpdateOne is the builder for updating a single ContractTemplate entity.
type ContractTemplateUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContractTemplateMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *ContractTemplateUpdateOne) SetUpdatedAt(t time.Time) *ContractTemplateUpdateOne {
	ctuo.mutation.SetUpdatedAt(t)
	return ctuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ctuo *ContractTemplateUpdateOne) SetDeletedAt(t time.Time) *ContractTemplateUpdateOne {
	ctuo.mutation.SetDeletedAt(t)
	return ctuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableDeletedAt(t *time.Time) *ContractTemplateUpdateOne {
	if t != nil {
		ctuo.SetDeletedAt(*t)
	}
	return ctuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ctuo *ContractTemplateUpdateOne) ClearDeletedAt() *ContractTemplateUpdateOne {
	ctuo.mutation.ClearDeletedAt()
	return ctuo
}

// SetLastModifier sets the "last_modifier" field.
func (ctuo *ContractTemplateUpdateOne) SetLastModifier(m *model.Modifier) *ContractTemplateUpdateOne {
	ctuo.mutation.SetLastModifier(m)
	return ctuo
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (ctuo *ContractTemplateUpdateOne) ClearLastModifier() *ContractTemplateUpdateOne {
	ctuo.mutation.ClearLastModifier()
	return ctuo
}

// SetRemark sets the "remark" field.
func (ctuo *ContractTemplateUpdateOne) SetRemark(s string) *ContractTemplateUpdateOne {
	ctuo.mutation.SetRemark(s)
	return ctuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableRemark(s *string) *ContractTemplateUpdateOne {
	if s != nil {
		ctuo.SetRemark(*s)
	}
	return ctuo
}

// ClearRemark clears the value of the "remark" field.
func (ctuo *ContractTemplateUpdateOne) ClearRemark() *ContractTemplateUpdateOne {
	ctuo.mutation.ClearRemark()
	return ctuo
}

// SetName sets the "name" field.
func (ctuo *ContractTemplateUpdateOne) SetName(s string) *ContractTemplateUpdateOne {
	ctuo.mutation.SetName(s)
	return ctuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableName(s *string) *ContractTemplateUpdateOne {
	if s != nil {
		ctuo.SetName(*s)
	}
	return ctuo
}

// SetURL sets the "url" field.
func (ctuo *ContractTemplateUpdateOne) SetURL(s string) *ContractTemplateUpdateOne {
	ctuo.mutation.SetURL(s)
	return ctuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableURL(s *string) *ContractTemplateUpdateOne {
	if s != nil {
		ctuo.SetURL(*s)
	}
	return ctuo
}

// SetUserType sets the "user_type" field.
func (ctuo *ContractTemplateUpdateOne) SetUserType(u uint8) *ContractTemplateUpdateOne {
	ctuo.mutation.ResetUserType()
	ctuo.mutation.SetUserType(u)
	return ctuo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableUserType(u *uint8) *ContractTemplateUpdateOne {
	if u != nil {
		ctuo.SetUserType(*u)
	}
	return ctuo
}

// AddUserType adds u to the "user_type" field.
func (ctuo *ContractTemplateUpdateOne) AddUserType(u int8) *ContractTemplateUpdateOne {
	ctuo.mutation.AddUserType(u)
	return ctuo
}

// SetSubType sets the "sub_type" field.
func (ctuo *ContractTemplateUpdateOne) SetSubType(u uint8) *ContractTemplateUpdateOne {
	ctuo.mutation.ResetSubType()
	ctuo.mutation.SetSubType(u)
	return ctuo
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableSubType(u *uint8) *ContractTemplateUpdateOne {
	if u != nil {
		ctuo.SetSubType(*u)
	}
	return ctuo
}

// AddSubType adds u to the "sub_type" field.
func (ctuo *ContractTemplateUpdateOne) AddSubType(u int8) *ContractTemplateUpdateOne {
	ctuo.mutation.AddSubType(u)
	return ctuo
}

// SetSn sets the "sn" field.
func (ctuo *ContractTemplateUpdateOne) SetSn(s string) *ContractTemplateUpdateOne {
	ctuo.mutation.SetSn(s)
	return ctuo
}

// SetNillableSn sets the "sn" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableSn(s *string) *ContractTemplateUpdateOne {
	if s != nil {
		ctuo.SetSn(*s)
	}
	return ctuo
}

// SetEnable sets the "enable" field.
func (ctuo *ContractTemplateUpdateOne) SetEnable(b bool) *ContractTemplateUpdateOne {
	ctuo.mutation.SetEnable(b)
	return ctuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ctuo *ContractTemplateUpdateOne) SetNillableEnable(b *bool) *ContractTemplateUpdateOne {
	if b != nil {
		ctuo.SetEnable(*b)
	}
	return ctuo
}

// Mutation returns the ContractTemplateMutation object of the builder.
func (ctuo *ContractTemplateUpdateOne) Mutation() *ContractTemplateMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the ContractTemplateUpdate builder.
func (ctuo *ContractTemplateUpdateOne) Where(ps ...predicate.ContractTemplate) *ContractTemplateUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ContractTemplateUpdateOne) Select(field string, fields ...string) *ContractTemplateUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ContractTemplate entity.
func (ctuo *ContractTemplateUpdateOne) Save(ctx context.Context) (*ContractTemplate, error) {
	if err := ctuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ContractTemplateUpdateOne) SaveX(ctx context.Context) *ContractTemplate {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ContractTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ContractTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *ContractTemplateUpdateOne) defaults() error {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		if contracttemplate.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized contracttemplate.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := contracttemplate.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ctuo *ContractTemplateUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContractTemplateUpdateOne {
	ctuo.modifiers = append(ctuo.modifiers, modifiers...)
	return ctuo
}

func (ctuo *ContractTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ContractTemplate, err error) {
	_spec := sqlgraph.NewUpdateSpec(contracttemplate.Table, contracttemplate.Columns, sqlgraph.NewFieldSpec(contracttemplate.FieldID, field.TypeUint64))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ContractTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contracttemplate.FieldID)
		for _, f := range fields {
			if !contracttemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != contracttemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contracttemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ctuo.mutation.DeletedAt(); ok {
		_spec.SetField(contracttemplate.FieldDeletedAt, field.TypeTime, value)
	}
	if ctuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contracttemplate.FieldDeletedAt, field.TypeTime)
	}
	if ctuo.mutation.CreatorCleared() {
		_spec.ClearField(contracttemplate.FieldCreator, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.LastModifier(); ok {
		_spec.SetField(contracttemplate.FieldLastModifier, field.TypeJSON, value)
	}
	if ctuo.mutation.LastModifierCleared() {
		_spec.ClearField(contracttemplate.FieldLastModifier, field.TypeJSON)
	}
	if value, ok := ctuo.mutation.Remark(); ok {
		_spec.SetField(contracttemplate.FieldRemark, field.TypeString, value)
	}
	if ctuo.mutation.RemarkCleared() {
		_spec.ClearField(contracttemplate.FieldRemark, field.TypeString)
	}
	if value, ok := ctuo.mutation.Name(); ok {
		_spec.SetField(contracttemplate.FieldName, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.URL(); ok {
		_spec.SetField(contracttemplate.FieldURL, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.UserType(); ok {
		_spec.SetField(contracttemplate.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := ctuo.mutation.AddedUserType(); ok {
		_spec.AddField(contracttemplate.FieldUserType, field.TypeUint8, value)
	}
	if value, ok := ctuo.mutation.SubType(); ok {
		_spec.SetField(contracttemplate.FieldSubType, field.TypeUint8, value)
	}
	if value, ok := ctuo.mutation.AddedSubType(); ok {
		_spec.AddField(contracttemplate.FieldSubType, field.TypeUint8, value)
	}
	if value, ok := ctuo.mutation.Sn(); ok {
		_spec.SetField(contracttemplate.FieldSn, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Enable(); ok {
		_spec.SetField(contracttemplate.FieldEnable, field.TypeBool, value)
	}
	_spec.AddModifiers(ctuo.modifiers...)
	_node = &ContractTemplate{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contracttemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
