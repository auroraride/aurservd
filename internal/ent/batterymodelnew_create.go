// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/aurservd/app/model"
	"github.com/auroraride/aurservd/internal/ent/batterymodelnew"
)

// BatteryModelNewCreate is the builder for creating a BatteryModelNew entity.
type BatteryModelNewCreate struct {
	config
	mutation *BatteryModelNewMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bmnc *BatteryModelNewCreate) SetCreatedAt(t time.Time) *BatteryModelNewCreate {
	bmnc.mutation.SetCreatedAt(t)
	return bmnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bmnc *BatteryModelNewCreate) SetNillableCreatedAt(t *time.Time) *BatteryModelNewCreate {
	if t != nil {
		bmnc.SetCreatedAt(*t)
	}
	return bmnc
}

// SetUpdatedAt sets the "updated_at" field.
func (bmnc *BatteryModelNewCreate) SetUpdatedAt(t time.Time) *BatteryModelNewCreate {
	bmnc.mutation.SetUpdatedAt(t)
	return bmnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bmnc *BatteryModelNewCreate) SetNillableUpdatedAt(t *time.Time) *BatteryModelNewCreate {
	if t != nil {
		bmnc.SetUpdatedAt(*t)
	}
	return bmnc
}

// SetDeletedAt sets the "deleted_at" field.
func (bmnc *BatteryModelNewCreate) SetDeletedAt(t time.Time) *BatteryModelNewCreate {
	bmnc.mutation.SetDeletedAt(t)
	return bmnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bmnc *BatteryModelNewCreate) SetNillableDeletedAt(t *time.Time) *BatteryModelNewCreate {
	if t != nil {
		bmnc.SetDeletedAt(*t)
	}
	return bmnc
}

// SetCreator sets the "creator" field.
func (bmnc *BatteryModelNewCreate) SetCreator(m *model.Modifier) *BatteryModelNewCreate {
	bmnc.mutation.SetCreator(m)
	return bmnc
}

// SetLastModifier sets the "last_modifier" field.
func (bmnc *BatteryModelNewCreate) SetLastModifier(m *model.Modifier) *BatteryModelNewCreate {
	bmnc.mutation.SetLastModifier(m)
	return bmnc
}

// SetRemark sets the "remark" field.
func (bmnc *BatteryModelNewCreate) SetRemark(s string) *BatteryModelNewCreate {
	bmnc.mutation.SetRemark(s)
	return bmnc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bmnc *BatteryModelNewCreate) SetNillableRemark(s *string) *BatteryModelNewCreate {
	if s != nil {
		bmnc.SetRemark(*s)
	}
	return bmnc
}

// SetType sets the "type" field.
func (bmnc *BatteryModelNewCreate) SetType(u uint8) *BatteryModelNewCreate {
	bmnc.mutation.SetType(u)
	return bmnc
}

// SetVoltage sets the "voltage" field.
func (bmnc *BatteryModelNewCreate) SetVoltage(u uint) *BatteryModelNewCreate {
	bmnc.mutation.SetVoltage(u)
	return bmnc
}

// SetCapacity sets the "capacity" field.
func (bmnc *BatteryModelNewCreate) SetCapacity(u uint) *BatteryModelNewCreate {
	bmnc.mutation.SetCapacity(u)
	return bmnc
}

// SetModel sets the "model" field.
func (bmnc *BatteryModelNewCreate) SetModel(s string) *BatteryModelNewCreate {
	bmnc.mutation.SetModel(s)
	return bmnc
}

// Mutation returns the BatteryModelNewMutation object of the builder.
func (bmnc *BatteryModelNewCreate) Mutation() *BatteryModelNewMutation {
	return bmnc.mutation
}

// Save creates the BatteryModelNew in the database.
func (bmnc *BatteryModelNewCreate) Save(ctx context.Context) (*BatteryModelNew, error) {
	if err := bmnc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, bmnc.sqlSave, bmnc.mutation, bmnc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bmnc *BatteryModelNewCreate) SaveX(ctx context.Context) *BatteryModelNew {
	v, err := bmnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmnc *BatteryModelNewCreate) Exec(ctx context.Context) error {
	_, err := bmnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmnc *BatteryModelNewCreate) ExecX(ctx context.Context) {
	if err := bmnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bmnc *BatteryModelNewCreate) defaults() error {
	if _, ok := bmnc.mutation.CreatedAt(); !ok {
		if batterymodelnew.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodelnew.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodelnew.DefaultCreatedAt()
		bmnc.mutation.SetCreatedAt(v)
	}
	if _, ok := bmnc.mutation.UpdatedAt(); !ok {
		if batterymodelnew.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized batterymodelnew.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := batterymodelnew.DefaultUpdatedAt()
		bmnc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (bmnc *BatteryModelNewCreate) check() error {
	if _, ok := bmnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatteryModelNew.created_at"`)}
	}
	if _, ok := bmnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatteryModelNew.updated_at"`)}
	}
	if _, ok := bmnc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "BatteryModelNew.type"`)}
	}
	if _, ok := bmnc.mutation.Voltage(); !ok {
		return &ValidationError{Name: "voltage", err: errors.New(`ent: missing required field "BatteryModelNew.voltage"`)}
	}
	if _, ok := bmnc.mutation.Capacity(); !ok {
		return &ValidationError{Name: "capacity", err: errors.New(`ent: missing required field "BatteryModelNew.capacity"`)}
	}
	if _, ok := bmnc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "BatteryModelNew.model"`)}
	}
	return nil
}

func (bmnc *BatteryModelNewCreate) sqlSave(ctx context.Context) (*BatteryModelNew, error) {
	if err := bmnc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bmnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bmnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bmnc.mutation.id = &_node.ID
	bmnc.mutation.done = true
	return _node, nil
}

func (bmnc *BatteryModelNewCreate) createSpec() (*BatteryModelNew, *sqlgraph.CreateSpec) {
	var (
		_node = &BatteryModelNew{config: bmnc.config}
		_spec = sqlgraph.NewCreateSpec(batterymodelnew.Table, sqlgraph.NewFieldSpec(batterymodelnew.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bmnc.conflict
	if value, ok := bmnc.mutation.CreatedAt(); ok {
		_spec.SetField(batterymodelnew.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bmnc.mutation.UpdatedAt(); ok {
		_spec.SetField(batterymodelnew.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bmnc.mutation.DeletedAt(); ok {
		_spec.SetField(batterymodelnew.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := bmnc.mutation.Creator(); ok {
		_spec.SetField(batterymodelnew.FieldCreator, field.TypeJSON, value)
		_node.Creator = value
	}
	if value, ok := bmnc.mutation.LastModifier(); ok {
		_spec.SetField(batterymodelnew.FieldLastModifier, field.TypeJSON, value)
		_node.LastModifier = value
	}
	if value, ok := bmnc.mutation.Remark(); ok {
		_spec.SetField(batterymodelnew.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	if value, ok := bmnc.mutation.GetType(); ok {
		_spec.SetField(batterymodelnew.FieldType, field.TypeUint8, value)
		_node.Type = value
	}
	if value, ok := bmnc.mutation.Voltage(); ok {
		_spec.SetField(batterymodelnew.FieldVoltage, field.TypeUint, value)
		_node.Voltage = value
	}
	if value, ok := bmnc.mutation.Capacity(); ok {
		_spec.SetField(batterymodelnew.FieldCapacity, field.TypeUint, value)
		_node.Capacity = value
	}
	if value, ok := bmnc.mutation.Model(); ok {
		_spec.SetField(batterymodelnew.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModelNew.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bmnc *BatteryModelNewCreate) OnConflict(opts ...sql.ConflictOption) *BatteryModelNewUpsertOne {
	bmnc.conflict = opts
	return &BatteryModelNewUpsertOne{
		create: bmnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bmnc *BatteryModelNewCreate) OnConflictColumns(columns ...string) *BatteryModelNewUpsertOne {
	bmnc.conflict = append(bmnc.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelNewUpsertOne{
		create: bmnc,
	}
}

type (
	// BatteryModelNewUpsertOne is the builder for "upsert"-ing
	//  one BatteryModelNew node.
	BatteryModelNewUpsertOne struct {
		create *BatteryModelNewCreate
	}

	// BatteryModelNewUpsert is the "OnConflict" setter.
	BatteryModelNewUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelNewUpsert) SetUpdatedAt(v time.Time) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateUpdatedAt() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelNewUpsert) SetDeletedAt(v time.Time) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateDeletedAt() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelNewUpsert) ClearDeletedAt() *BatteryModelNewUpsert {
	u.SetNull(batterymodelnew.FieldDeletedAt)
	return u
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelNewUpsert) SetLastModifier(v *model.Modifier) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldLastModifier, v)
	return u
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateLastModifier() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldLastModifier)
	return u
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelNewUpsert) ClearLastModifier() *BatteryModelNewUpsert {
	u.SetNull(batterymodelnew.FieldLastModifier)
	return u
}

// SetRemark sets the "remark" field.
func (u *BatteryModelNewUpsert) SetRemark(v string) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateRemark() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelNewUpsert) ClearRemark() *BatteryModelNewUpsert {
	u.SetNull(batterymodelnew.FieldRemark)
	return u
}

// SetType sets the "type" field.
func (u *BatteryModelNewUpsert) SetType(v uint8) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateType() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *BatteryModelNewUpsert) AddType(v uint8) *BatteryModelNewUpsert {
	u.Add(batterymodelnew.FieldType, v)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelNewUpsert) SetVoltage(v uint) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateVoltage() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *BatteryModelNewUpsert) AddVoltage(v uint) *BatteryModelNewUpsert {
	u.Add(batterymodelnew.FieldVoltage, v)
	return u
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelNewUpsert) SetCapacity(v uint) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldCapacity, v)
	return u
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateCapacity() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldCapacity)
	return u
}

// AddCapacity adds v to the "capacity" field.
func (u *BatteryModelNewUpsert) AddCapacity(v uint) *BatteryModelNewUpsert {
	u.Add(batterymodelnew.FieldCapacity, v)
	return u
}

// SetModel sets the "model" field.
func (u *BatteryModelNewUpsert) SetModel(v string) *BatteryModelNewUpsert {
	u.Set(batterymodelnew.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelNewUpsert) UpdateModel() *BatteryModelNewUpsert {
	u.SetExcluded(batterymodelnew.FieldModel)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryModelNewUpsertOne) UpdateNewValues() *BatteryModelNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(batterymodelnew.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Creator(); exists {
			s.SetIgnore(batterymodelnew.FieldCreator)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BatteryModelNewUpsertOne) Ignore() *BatteryModelNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelNewUpsertOne) DoNothing() *BatteryModelNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelNewCreate.OnConflict
// documentation for more info.
func (u *BatteryModelNewUpsertOne) Update(set func(*BatteryModelNewUpsert)) *BatteryModelNewUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelNewUpsertOne) SetUpdatedAt(v time.Time) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateUpdatedAt() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelNewUpsertOne) SetDeletedAt(v time.Time) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateDeletedAt() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelNewUpsertOne) ClearDeletedAt() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelNewUpsertOne) SetLastModifier(v *model.Modifier) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateLastModifier() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelNewUpsertOne) ClearLastModifier() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryModelNewUpsertOne) SetRemark(v string) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateRemark() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelNewUpsertOne) ClearRemark() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *BatteryModelNewUpsertOne) SetType(v uint8) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *BatteryModelNewUpsertOne) AddType(v uint8) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateType() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateType()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelNewUpsertOne) SetVoltage(v uint) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *BatteryModelNewUpsertOne) AddVoltage(v uint) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateVoltage() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateVoltage()
	})
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelNewUpsertOne) SetCapacity(v uint) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *BatteryModelNewUpsertOne) AddCapacity(v uint) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateCapacity() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateCapacity()
	})
}

// SetModel sets the "model" field.
func (u *BatteryModelNewUpsertOne) SetModel(v string) *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelNewUpsertOne) UpdateModel() *BatteryModelNewUpsertOne {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryModelNewUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelNewCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelNewUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BatteryModelNewUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BatteryModelNewUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BatteryModelNewCreateBulk is the builder for creating many BatteryModelNew entities in bulk.
type BatteryModelNewCreateBulk struct {
	config
	err      error
	builders []*BatteryModelNewCreate
	conflict []sql.ConflictOption
}

// Save creates the BatteryModelNew entities in the database.
func (bmncb *BatteryModelNewCreateBulk) Save(ctx context.Context) ([]*BatteryModelNew, error) {
	if bmncb.err != nil {
		return nil, bmncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bmncb.builders))
	nodes := make([]*BatteryModelNew, len(bmncb.builders))
	mutators := make([]Mutator, len(bmncb.builders))
	for i := range bmncb.builders {
		func(i int, root context.Context) {
			builder := bmncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatteryModelNewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bmncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bmncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bmncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bmncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bmncb *BatteryModelNewCreateBulk) SaveX(ctx context.Context) []*BatteryModelNew {
	v, err := bmncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bmncb *BatteryModelNewCreateBulk) Exec(ctx context.Context) error {
	_, err := bmncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bmncb *BatteryModelNewCreateBulk) ExecX(ctx context.Context) {
	if err := bmncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BatteryModelNew.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BatteryModelNewUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bmncb *BatteryModelNewCreateBulk) OnConflict(opts ...sql.ConflictOption) *BatteryModelNewUpsertBulk {
	bmncb.conflict = opts
	return &BatteryModelNewUpsertBulk{
		create: bmncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bmncb *BatteryModelNewCreateBulk) OnConflictColumns(columns ...string) *BatteryModelNewUpsertBulk {
	bmncb.conflict = append(bmncb.conflict, sql.ConflictColumns(columns...))
	return &BatteryModelNewUpsertBulk{
		create: bmncb,
	}
}

// BatteryModelNewUpsertBulk is the builder for "upsert"-ing
// a bulk of BatteryModelNew nodes.
type BatteryModelNewUpsertBulk struct {
	create *BatteryModelNewCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BatteryModelNewUpsertBulk) UpdateNewValues() *BatteryModelNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(batterymodelnew.FieldCreatedAt)
			}
			if _, exists := b.mutation.Creator(); exists {
				s.SetIgnore(batterymodelnew.FieldCreator)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BatteryModelNew.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BatteryModelNewUpsertBulk) Ignore() *BatteryModelNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BatteryModelNewUpsertBulk) DoNothing() *BatteryModelNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BatteryModelNewCreateBulk.OnConflict
// documentation for more info.
func (u *BatteryModelNewUpsertBulk) Update(set func(*BatteryModelNewUpsert)) *BatteryModelNewUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BatteryModelNewUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BatteryModelNewUpsertBulk) SetUpdatedAt(v time.Time) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateUpdatedAt() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *BatteryModelNewUpsertBulk) SetDeletedAt(v time.Time) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateDeletedAt() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *BatteryModelNewUpsertBulk) ClearDeletedAt() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearDeletedAt()
	})
}

// SetLastModifier sets the "last_modifier" field.
func (u *BatteryModelNewUpsertBulk) SetLastModifier(v *model.Modifier) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetLastModifier(v)
	})
}

// UpdateLastModifier sets the "last_modifier" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateLastModifier() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateLastModifier()
	})
}

// ClearLastModifier clears the value of the "last_modifier" field.
func (u *BatteryModelNewUpsertBulk) ClearLastModifier() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearLastModifier()
	})
}

// SetRemark sets the "remark" field.
func (u *BatteryModelNewUpsertBulk) SetRemark(v string) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateRemark() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BatteryModelNewUpsertBulk) ClearRemark() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.ClearRemark()
	})
}

// SetType sets the "type" field.
func (u *BatteryModelNewUpsertBulk) SetType(v uint8) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *BatteryModelNewUpsertBulk) AddType(v uint8) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateType() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateType()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BatteryModelNewUpsertBulk) SetVoltage(v uint) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *BatteryModelNewUpsertBulk) AddVoltage(v uint) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateVoltage() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateVoltage()
	})
}

// SetCapacity sets the "capacity" field.
func (u *BatteryModelNewUpsertBulk) SetCapacity(v uint) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetCapacity(v)
	})
}

// AddCapacity adds v to the "capacity" field.
func (u *BatteryModelNewUpsertBulk) AddCapacity(v uint) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.AddCapacity(v)
	})
}

// UpdateCapacity sets the "capacity" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateCapacity() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateCapacity()
	})
}

// SetModel sets the "model" field.
func (u *BatteryModelNewUpsertBulk) SetModel(v string) *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *BatteryModelNewUpsertBulk) UpdateModel() *BatteryModelNewUpsertBulk {
	return u.Update(func(s *BatteryModelNewUpsert) {
		s.UpdateModel()
	})
}

// Exec executes the query.
func (u *BatteryModelNewUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BatteryModelNewCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BatteryModelNewCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BatteryModelNewUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
